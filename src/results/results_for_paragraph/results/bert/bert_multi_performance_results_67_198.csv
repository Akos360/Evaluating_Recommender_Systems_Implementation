book_index,paragraph_index,similarity_score,recommended_book,recommended_text
135,729,0.712,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â ak je vele na zaiatku priradenÃ½ zdroj, ktorÃ©ho kvalita je vysokÃ¡ (naprÃ­klad 95 %), napriek tomu existuje pravdepodobnos (hoci iba 5 %), Å¾e bude zlÃ¡kanÃ¡ inou velou. V tomto prÃ­pade ak vela tento zdroj opustÃ­, neexistuje moÅ¾nos nÃ¡vratu k tomuto zdroju. ExistujÃº iba dva spÃ´soby, ako sa vela dostane na zdroj a to na zÃ¡klade poiatonÃ©ho priradenia, alebo v prÃ­pade zlÃ¡kania inou velou. TÃ½mto sa mÃ´Å¾e vemi kvalitnÃ½ zdroj sta neprÃ­stupnÃ½m pre celÃ© spoloenstvo. HlavnÃ© poÅ¾iadavky pri vytvÃ¡ranÃ­ modelu boli:"
59,688,0.692,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1. JednoduchÃ© rieÅ¡enie, kde pouÅ¾Ã­vame len pravidlÃ¡ 0 alebo 1. t. j. kaÅ¾dom kroku hry sa nÃ¡m podarÃ­ urobiÅ¥ takÃ© zjednoduÅ¡enie hry, Å¾e sa zaplnÃ­ prÃ¡zdna pozÃ­cia ÄÃ­slom. 2. Stredne zloÅ¾itÃ© rieÅ¡enie, kde sa okrem pravidiel 1 a 0 pouÅ¾Ã­vajÃº taktieÅ¾ pravidlÃ¡ 2 a 3. Pre tento stupeÅ zloÅ¾itosti hry taktieÅ¾ dochÃ¡dza monotÃ³nnemu zjednoduÅ¡ovaniu hry, ovÅ¡em uÅ¾ urÄitÃ¡ ÄasÅ¥ krokov rieÅ¡enie (okolo 10 ï­ 15%) spoÄÃ­va v tom, Å¾e pre vybranÃ© bunky aj keÄ nedochÃ¡dza k ich zaplneniu fixovanÃ½m ÄÃ­slom, ale dochÃ¡dza k celkovÃ©mu znÃ­Å¾ovaniu poÄtu alternatÃ­vnych pozÃ­ciÃ­ v aktuÃ¡lnom rieÅ¡enÃ­."
393,144,0.691,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PoÅ¾iadavky pre notÃ¡ciu vyÅ¡Å¡ej Ãºrovne ProblÃ©mom automatickÃ©ho zÃ­skavania znalostÃ­ je veÄ¾kÃ¡ mnoÅ¾ina spÃ´sobov, akÃ½mi je moÅ¾nÃ© danÃº znalosÅ¥ zaznamenaÅ¥ a opÃ­saÅ¥. Tieto spÃ´soby znaÄenia znalostÃ­ navyÅ¡e nie sÃº medzi sebou zluÄiteÄ¾nÃ©. Tieto problÃ©my sa najvÃ½raznejÅ¡ie prejavujÃº, pokiaÄ¾ sa na zaznamenanie znalostÃ­ pouÅ¾Ã­vajÃº nÃ­zko ÃºrovÅovÃ© jazyky (naprÃ­klad KIF). NajdÃ´leÅ¾itejÅ¡ou poÅ¾iadavkou pri tÃ½chto prÃ­stupoch je znovupouÅ¾iteÄ¾nosÅ¥ jazykovÃ½ch konÅ¡trukciÃ­ a takto zapÃ­sanÃ½ch znalostÃ­. Preto sa ako najvhodnejÅ¡ie ukazuje zadefinovanie jazyka vyÅ¡Å¡ej Ãºrovne . Na ilustrÃ¡ciu uvÃ¡dzame moÅ¾nosÅ¥ zaznaÄenia urÄitej informÃ¡cie rÃ´znymi prÃ­stupmi. Ich vÃ½hody a prÃ­padne nevÃ½hody ponechÃ¡vam na posÃºdenie ÄitateÄ¾ovi. Ned sold (the same) 3 cars twice on the 21/1/2001. (This sentence does not specify whether the cars have been sold individually,2 by 2, or 3 by 3. This ambiguity is kept in the representations). CGLF: [Person: Ned]<-(agent)<-[Sell: {*}@2]{ <-(object)<-[Car: {*}@3 @certain]; <-(time)<-[Date: #21/1/2001]; [3 cars, object of: (2 sells, agent: Ned, time: 21/1/2001)] 3 cars are object of 2 sells with agent Ned and time 21/1/2001. (forAllN 3 ?c car (forAllN 2 ?s sell (and (agent ?s Ned) (object ?s ?c) (time ?s '21/1/2001)))) âcars set(cars) â§ size(cars,3) â§ âc â cars âsells set(sells) â§ size(sells,2) â§ âs â sells agent(s,Ned) â§ object(s,c) â§ time(s,21/1/2001) <kif:Set ID=""cars""><size>3</size></kif:Set> <rdf:Description aboutEach=""#cars""> <rdf:type resource=""Car""/> <object><rdf:Description> <kif:Set ID=""sells""><size>2</size></kif:Set> <rdf:Description aboutEach=""#sell""> <agent resource=""Ned""/> <time>21/1/2001</time> </rdf:Description> </rdf:Description></object> </rdf:Description>"
59,131,0.691,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ZÃ¡ver vyplÃ½vajÃºci z Obr. 3.8 mÃ´Å¾eme zovÅ¡eobecniÅ¥ tak, Å¾e evoluÄnÃ½ vznik zloÅ¾itÃ½ch Å¾ivoÄÃ­Å¡nych orgÃ¡nov neprebiehal priamoÄiaro za vzniku hotovÃ©ho orgÃ¡nu poÅ¾adovanej zloÅ¾itosti, ale postupne vyuÅ¾Ã­val3 starÅ¡ie Å¡truktÃºry organizmu, ktorÃ© boli prispÃ´sobenÃ© na novÃ© potreby. TÃ½mto spÃ´sobom je zabezpeÄenÃ½ neustÃ¡ly selekÄnÃ½ tlak vedÃºci v koneÄnom dÃ´sledku na vznik komplexnÃ©ho orgÃ¡nu prostrednÃ­ctvom medzistupÅov, ktorÃ½ch vÃ½znam mÃ´Å¾e byÅ¥ veÄ¾mi vzdialenÃ½ vÃ½znamu koneÄnÃ©ho orgÃ¡nu (pozri obrÃ¡zok 3.8). NiekoÄ¾ko poznÃ¡mok k problÃ©mom reprodukcie a dediÄnosti, ktorÃ½ch vÃ½znamnou ÄasÅ¥ou je tzv. embryogenÃ©za, Äo je spÃ´sob vzniku a vÃ½voja novÃ½ch jedincov zo zÃ¡rodkov. Budeme rozliÅ¡ovaÅ¥ dva druhy embryogenÃ©zy: 1. EpigenetickÃ¡ embryogenÃ©za, kde novÃ½ organizmus vznikÃ¡ delenÃ­m jednej âzÃ¡rodoÄnejâ bunky, tento druh embryogenÃ©zy sa vyskytuje na naÅ¡ej planÃ©te pri reprodukcii biologickÃ½ch systÃ©mov. MÃ´Å¾e byÅ¥ zjednoduÅ¡ene chÃ¡panÃ¡ ako recept na prÃ­pravu kolÃ¡Äa, kde je uvedenÃ© nielen to, Äo kolÃ¡Ä obsahuje, ale aj jeho prÃ­prava. 2. PreformaÄnÃ¡ embryogenÃ©za, kde novÃ½ organizmus je reprezentovanÃ½ zÃ¡rodkom, ktorÃ½ obsahuje vÅ¡etky detaily dospelÃ©ho organizmu. Tento typ embryogenÃ©zy mÃ´Å¾eme formÃ¡lne prirovnaÅ¥ k plÃ¡nu budovy alebo stroja, kde sÃº podrobne uvedenÃ© vÅ¡etky detaily. Existencia tohto druhu embryogenÃ©zy je pre nÃ¡s"
190,183,0.69,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"nia. Äasto sa dodÃ¡va spolu s hardvÃ©rom. Preto je jeho testovanie jednoduchÅ¡ie (odhliadnuc od komplexnosti, keÄ prÃ¡ve softvÃ©r na zÃ¡kazku je pomerne Äasto zloÅ¾itejÅ¡Ã­). Pri tvorbe generickÃ©ho softvÃ©ru vÃ½robca nepoznÃ¡ presnÃ© poÅ¾iadavky budÃºceho zÃ¡kaznÃ­ka. NepoznÃ¡me ani prostredie nasadenia ani vyÅ¥aÅ¾enie systÃ©mu. NepoznÃ¡me hardvÃ©r, na ktorom sa bude vytvÃ¡ranÃ½ softvÃ©r vykonÃ¡vaÅ¥. TÃ½m pÃ¡dom je nevyhnutnÃ© pouÅ¾itie softvÃ©ru (ovlÃ¡daÄov) tretÃ­ch strÃ¡n a podobne. Testovanie vÅ¡etkÃ½ch moÅ¾nÃ½ch kombinÃ¡ciÃ­ prostredia, do ktorÃ©ho sa dÃ¡ vytvÃ¡ranÃ½ softvÃ©r nasadiÅ¥ nie je, ako uÅ¾ som spomenul, dokonca ani moÅ¾nÃ©. Mali by maÅ¥ teda vÃ½robcovia generickÃ©ho softvÃ©ru a softvÃ©ru na zÃ¡kazku rovnakÃº mieru zodpovednosti za svoje produkty? Ja si myslÃ­m, Å¾e nie. Pre kaÅ¾dÃ½ typ treba urÄiÅ¥ hranicu, za Äo by mali byÅ¥ vÃ½robcovia zodpovednÃ­. TakÃ¡to hranica sa podÄ¾a VyrieÅ¡i trh [1] nazÃ½va âakceptovateÄ¾nÃ¡ priemyselnÃ¡ praktikaâ. Ako nÃ¡jsÅ¥ takÃºto hranicu? problÃ©m To vÃ´bec nie je jednoduchÃ©. Aj podÄ¾a [1] nie je vÃ¤ÄÅ¡ina prÃ¡vnych debÃ¡t o tom, zodpovednosti Äi existuje zodpovednosÅ¥ za softvÃ©rovÃ© produkty, ale o tom, Äo sÃº akceptovaza Å¡kodu teÄ¾nÃ© priemyselnÃ© praktiky."
190,243,0.688,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ãno, je to pravda. Aj keÄ je projekt malÃ½, stÃ¡le je to projekt a treba ho za projekt povaÅ¾ovaÅ¥. Ak v malom projekte nebudeme vedieÅ¥, Äo je naÅ¡ou Ãºlohou, nebudeme poznaÅ¥ techniky, prostriedky a zdroje potrebnÃ© pre naÅ¡u prÃ¡cu, nemÃ´Å¾eme ÄakaÅ¥ Ãºspech. Ak nÃ¡m dokonca nebude znÃ¡my ani Äas, dokedy treba prÃ¡ce ukonÄiÅ¥, tak sa mÃ´Å¾e staÅ¥, Å¾e sa celÃ© vynaloÅ¾enÃ© Ãºsilie ukÃ¡Å¾e ako zbytoÄnÃ©. Ak sa nezaobÃ­deme bez plÃ¡novania projektov ako takÃ½ch, nezaobÃ­deme sa ani bez plÃ¡novania projektov menÅ¡ieho rozsahu."
130,75,0.687,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DÃ´sledky Zmena sprÃ¡vania objektu jej obalenÃ­m inÃ½m objektom, dekoratÃ©rom mÃ´Å¾e vÃ½znamne zjednoduÅ¡iÅ¥ hierarchiu tried za cenu malÃ©ho skomplikovania kÃ³du. RozÅ¡Ã­renie alebo utlmenie nejakÃ©ho Å¡pecifickÃ©ho sprÃ¡vania viacerÃ½ch objektov sa rieÅ¡i namiesto vytvorenia viacerÃ½ch podtried pomocou implementÃ¡cie jednej triedy DekoratÃ©r, ktorÃ¡ zabezpeÄÃ­ zmenu sprÃ¡vania vÅ¡etkÃ½ch objektov s poÅ¾adovanÃ½m rozhranÃ­m."
59,94,0.685,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 2.22. SchematickÃ© znÃ¡zornenie vzÅ¥ahu medzi konekcionistickÃ½m a symbolickÃ½m prÃ­stupom k interpretÃ¡cii kognitÃ­vnych aktivÃ­t Ä¾udskÃ©ho mozgu. InterpretatÃ­vna sila tohto grafu je zaloÅ¾enÃ¡ na existencii vety 2.5, [1,5]. PodÄ¾a tejto slÃ¡vnej vety, kaÅ¾dÃ¡ neurÃ³novÃ¡ sieÅ¥ (konekcionistickÃ© vÃ½poÄtovÃ© zariadenie) je ekvivalentnÃ¡ koneÄnostavovÃ©mu stroju (automatu, symbolickÃ©mu vÃ½poÄtovÃ©mu zariadeniu). To znamenÃ¡, idÃºc v grafe zdola-nahor, hÄ¾adÃ¡me takÃ© symbolickÃ© korelÃ¡ty, ktorÃ© integrujÃº aktivity jednotlivÃ½ch neurÃ³nov. Ak ideme opaÄnÃ½m smerom zhora-nadol, potom hÄ¾adÃ¡me konekcionistickÃ© korelÃ¡ty pre symbolickÃ© vÃ½razy. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e medzi konekcionistickÃ½m a symbolickÃ½m prÃ­stupom k Å¡tÃºdiu kognitÃ­vnych aktivÃ­t neexistuje exkluzÃ­vna disjunkcia, hlavnÃ½m kritÃ©riom miery zahrnutia prvÃ©ho alebo druhÃ©ho prÃ­stupu je v pohodlnosti a jednoznaÄnosti Å¡tÃºdiu vybranÃ½ch kognitÃ­vnych aktivÃ­t. V sÃºÄasnosti sa ustÃ¡lil kompromis, Å¾e vyÅ¡Å¡ie kognitÃ­vne aktivity sa obvykle Å¡tudujÃº na symbolickej Ãºrovni (aj keÄ moÅ¾no pouÅ¾iÅ¥ ich Å¡tÃºdium na konekcionistickÃ½ prÃ­stup), zatiaÄ¾ Äo niÅ¾Å¡ie kognitÃ­vne aktivity sa Å¡tudujÃº pomocou konekcionistickÃ©ho formalizmu."
94,49,0.682,Sprievodca svetom vedeckÃ©ho publikovania,"publikovania vÅ¡ak ohrozuje nÃ¡stup predÃ¡torskÃ½ch Äasopisov (podrobnejÅ¡ie v kapitole 3). ÄasÅ¥ vedeckej obce zastÃ¡va nÃ¡zor, Å¾e otvorenÃ© vedeckÃ© publikovanie by nemalo byÅ¥ ÄinnosÅ¥ou zameranou na zisk (Haspelmath 2013), inÃ­ oponujÃº, Å¾e vydavateÄ¾skÃº prax vrÃ¡tane vyberania publikaÄnÃ½ch poplatkov moÅ¾no realizovaÅ¥ so ziskom aj s reÅ¡pektom k akademickÃ½m hodnotÃ¡m (Rittman 2015). NÃ¡strahÃ¡m zlatÃ©ho otvorenÃ©ho prÃ­stupu sa vyhÃ½ba takzvanÃ½ platinovÃ½ otvorenÃ½ prÃ­stup, keÄ vydavateÄ¾ zÃ­skava finanÄnÃ© prostriedky rovno od sponzora, takÅ¾e ich nemusÃ­ vyberaÅ¥ ani od ÄitateÄ¾ov, ani od autorov. Pre vydavateÄ¾a je to vÅ¡ak prirodzene namÃ¡havejÅ¡ia a menej vÃ½nosnÃ¡ cesta, s vÃ½zvou ustrÃ¡Å¾iÅ¥ nezÃ¡vislosÅ¥ redakÄnÃ©ho procesu (ak by niektorÃ½ sponzor nadobudol presvedÄenie, Å¾e za svoje peniaze mÃ¡ prÃ¡vo zasahovaÅ¥ do obsahu). NastÃºpilo na Åu naprÃ­klad vydavateÄ¾stvo Open Library of Humanities, podporovanÃ© americkou nadÃ¡ciou A. W. Mellona, a viacerÃ© eurÃ³pske Äasopisy â nemeckÃ½ Beilstein Journal of Organic Chemistry, Beilstein Journal of Nanotechnology, alebo Å¡vajÄiarsky Swiss Medical Weekly. V DOAJ (Directory of Open Access Journals) sa nachÃ¡dza viac ako tristo medzinÃ¡rodnÃ½ch vedeckÃ½ch Äasopisov, ktorÃ© publikujÃº otvorenÃ½m prÃ­stupom bez toho, Å¾e by vyÅ¾adovali poplatky od autorov. StruÄnÃ© zhrnutie histÃ³rie vedeckÃ½ch Äasopisov v podobe Äasovej osi ponÃºka obrÃ¡zok 1.1. ObrÃ¡zok 1.2 ho dopÄºÅa Äasovou osou vÃ½voja technolÃ³giÃ­ a organizaÄnej infraÅ¡truktÃºry na podporu vedeckej komunikÃ¡cie. TerÄom kritiky zo strany akademickej obce nie je len oligopol veÄ¾kÃ½ch vydavateÄ¾ov, ale aj systÃ©m hodnotenia vedy, narÃ¡Å¾ajÃºci na limity citaÄnej analÃ½zy (podrobnejÅ¡ie v kapitole 11), a navyÅ¡e zÃ¡vislÃ½ od draho predplÃ¡canÃ½ch komerÄnÃ½ch databÃ¡z. Na tieto problÃ©my odpovedÃ¡ naprÃ­klad projekt Anne-Wil Harzingovej Publish or Perish17 (ÄerpajÃºci z databÃ¡zy Google Scholar) alebo trend vyuÅ¾Ã­vania alternatÃ­vnych metrÃ­k ÄÃ­tanosti a spoloÄenskÃ©ho vplyvu jednotlivÃ½ch ÄlÃ¡nkov, ktorÃ© majÃº pomÃ´cÅ¥ prelomiÅ¥ neÃºprosnÃ½ diktÃ¡t impakt faktora (Altmetriky, viac v kapitole 7). VeÄ¾kÃ© vydavateÄ¾skÃ© domy vÅ¡ak ani po roku 2012 nezahÃ¡Ä¾ajÃº. Mnoho americkÃ½ch univerzÃ­t uÅ¾ odmieta ochotne uzatvÃ¡raÅ¥ âBig Dealâ a vydavatelia si uvedomujÃº, Å¾e ak nechcÃº stratiÅ¥ dominanciu na trhu, musia drÅ¾aÅ¥ krok s najnovÅ¡Ã­m vÃ½vojom a kontrolovaÅ¥ Äo najviac aspektov toku vÃ½skumnej prÃ¡ce (workflow, napr. virtuÃ¡lne laboratÃ³rne knihy, protokoly, dÃ¡tovÃ½ manaÅ¾ment a pod.) (Schonfeld 2017). V roku 2013 Elsevier odkÃºpil akademickÃº sociÃ¡lnu sieÅ¥ Mendeley, v roku 2016 repozitÃ¡r spoloÄenskÃ½ch vied SSRN, v roku 2017 firmu Plum Analytics, poskytovateÄ¾a altmetrÃ­k a v roku 2018 spoloÄnosÅ¥ Aries, ktorÃ¡ poskytuje redakÄnÃ© systÃ©my Å¡irokej Å¡kÃ¡le vydavateÄ¾ov (Anderson 2018). Elsevier sa prestÃ¡va nazÃ½vaÅ¥ vydavateÄ¾om, preferuje oznaÄenie dÃ¡tovÃ¡ spoloÄnosÅ¥. NaÄalej sa vÅ¡ak orientuje na akademickÃº âekonomiku prestÃ­Å¾eâ â napr. novÃ© sluÅ¾by Elsevieru smerujÃº k manaÅ¾mentu dÃ¡t, monitorovaniu, hodnoteniu a prezentovaniu (showcasing) vÃ½sledkov vÃ½skumu pre potreby vÃ½skumnÃ½ch inÅ¡titÃºciÃ­ a grantovÃ½ch agentÃºr."
59,629,0.682,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"OpÃ­Å¡eme bliÅ¾Å¡ie hÄ¾adanie analÃ³gie medzi dvoma objektmi O1 a O2, ktorÃ© sÃº reprezentovanÃ© grafmi G1 a G2. KonÅ¡trukcia tÃ½chto grafov mÃ´Å¾e byÅ¥ urobenÃ© tak, Å¾e si zvolÃ­me vybranÃ© Ärty v oboch objektoch, tieto sÃº reprezentovanÃ© vrcholmi v prÃ­sluÅ¡nÃ½ch grafoch. Ak dve Ärty blÃ­zko sÃºvisia (Äasovo, priestorovo alebo funkcionÃ¡lne), potom ich vrcholy prepojÃ­me hranou grafu. V umelej inteligencii [5] existuje mnoho rÃ´znych metÃ³d ako reprezentovaÅ¥ objekty pomocou grafov (ktorÃ© majÃº ohodnotenÃ© vrcholy a/alebo hrany). HÄ¾adÃ¡me potom takÃ© zobrazenie mnoÅ¾iny vrcholov jednÃ©ho grafu na mnoÅ¾inu vrcholov druhÃ©ho grafu, ktorÃ© zachovÃ¡va maximÃ¡lnu podobnosÅ¥ medzi dvojicou priradenÃ½ch vrcholov. Rozsah analÃ³gia medzi objektmi je priamoÃºmernÃ½ poÄtu tÃ½chto elementÃ¡rnych podobnostÃ­. K formalizÃ¡cii analÃ³gie medzi grafmi G1 a G2 pouÅ¾ijeme koncepciu maximÃ¡lneho spoloÄnÃ©ho podgrafu G12 ï½ ï¨V12 ,E12 ï© pre ktorÃ½ platÃ­ (pozri Obr. 13.2): 1. spoloÄnÃ½ graf G12 je sÃºÄasne podgrafom grafov G1 a G2, G12 ï G1 a G12 ï G2 , 2. spoloÄnÃ½ podgraf G12 obsahuje maximÃ¡lny poÄet hrÃ¡n E12 ï½ max ,."
135,222,0.681,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.3.5 alÅ¡ie prÃ­klady pouÅ¾itia Okrem doteraz spomenutÃ½ch prÃ­kladov, alÅ¡Ã­mi prÃ­kladmi pouÅ¾itia architektonickÃ©ho vzoru DÃ¡tovody a filtre je vykresovanie grafickÃ½ch scÃ©n (Kaisler, 2005), prÃ­padne kniÅ¾nica LASSPTools pre oblas numerickej analÃ½zy a grafiky (Buschmann, 1996). VÃ½znamnou oblasou pouÅ¾itia tohto vzoru je integrÃ¡cia podnikovÃ½ch aplikÃ¡ciÃ­, kde sÃº integranÃ© rieÅ¡enia asto zaloÅ¾enÃ© na tomto architektonickom vzore (Hohpe, 2004). PrÃ­kladom takÃ©hoto integranÃ©ho rieÅ¡enia mÃ´Å¾e by spracovanie prichÃ¡dzajÃºcich objednÃ¡vok, ktorÃ© majÃº by najskÃ´r deÅ¡ifrovanÃ© (predpokladÃ¡ sa, Å¾e prichÃ¡dzajÃº v Å¡ifrovanej podobe), potom mÃ¡ by vykonanÃ¡ ich autorizÃ¡cia (predpokladÃ¡ sa nutnos overenia, i je odosielate oprÃ¡vnenÃ½ posla objednÃ¡vku s danÃ½mi charakteristikami, ako je naprÃ­klad finannÃ¡ hodnota) a napokon odstrÃ¡nenie duplicÃ­t (predpokladÃ¡ sa, Å¾e z technickÃ½ch dÃ´vodov sa mÃ´Å¾e sta, Å¾e jedna objednÃ¡vka je poslanÃ¡ viackrÃ¡t). ArchitektÃºra tohto integranÃ©ho rieÅ¡enia je zobrazenÃ¡ na obrÃ¡zku 3-8."
130,146,0.678,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"VybranÃ© nÃ¡stroje tohto typu podporujÃº rÃ´zne moduly pre grafickÃ© modelovanie dÃ¡tovej Å¡truktÃºry. TovÃ¡reÅ pre DÃ¡taObjekt spÃ¡ja pouÅ¾itie preberanÃ©ho vzoru so vzorom AbstraktnÃ¡ tovÃ¡reÅ. TovÃ¡reÅ sa vyuÅ¾Ã­va ako centrum, ktorÃ© je informovanÃ© o aktuÃ¡lne pouÅ¾Ã­vanom dÃ¡tovom zdroji a podÄ¾a toho dokÃ¡Å¾e vrÃ¡tiÅ¥ adekvÃ¡tny DÃ¡taObjekt. TÃ¡to implementÃ¡cia sa Äasto vyuÅ¾Ã­va u Å¡peciÃ¡lnych typov aplikÃ¡ciÃ­, ktorÃ© poÄas svojho behu menia pouÅ¾Ã­vanÃ© zdroje dÃ¡t."
130,434,0.677,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PlÃ¡novanie s alternatÃ­vami Pri vytvÃ¡ranÃ­ plÃ¡nu Äasto nemÃ¡me vÅ¡etky informÃ¡cie potrebnÃ© pre vÃ½ber vhodnej alternatÃ­vy plÃ¡nu. Toto vyplÃ½va z nepredvÃ­dateÄ¾nÃ©ho sprÃ¡vania prostredia alebo objektov (a agentov) v Åom. To Äi sa prostredie skutoÄne sprÃ¡va nÃ¡hodne alebo iba nedokÃ¡Å¾eme odhadnÃºÅ¥ jeho sprÃ¡vanie v tomto prÃ­pade nie je dÃ´leÅ¾itÃ©. Odpovede na tento problÃ©m sÃº dve: priebeÅ¾nÃ© plÃ¡novanie a plÃ¡novanie s alternatÃ­vami. PriebeÅ¾nÃ© plÃ¡novanie znamenÃ¡, Å¾e sa aktuÃ¡lny plÃ¡n nahradÃ­ novÃ½m vÅ¾dy, keÄ sa zmenia predpoklady, na ktorÃ½ch bol pÃ´vodnÃ½ plÃ¡n postavenÃ½. Pre tento novÃ½ plÃ¡n potom musÃ­ znova prebehnÃºÅ¥ koordinÃ¡cia. Niekedy je vhodnejÅ¡ie vytvoriÅ¥ jeden plÃ¡n, ktorÃ½ zÃ¡roveÅ pokrÃ½va viacero alternatÃ­v. ZatiaÄ¾ Äo pri vytvÃ¡ranÃ­ lineÃ¡rneho plÃ¡nu sme sa museli vÅ¾dy rozhodnÃºÅ¥ ako bude plÃ¡n pokraÄovaÅ¥, pri plÃ¡novanÃ­ s alternatÃ­vami sa v mieste rozhodnutia plÃ¡n rozdelÃ­ na viacero alternatÃ­vnych plÃ¡nov. Z alternatÃ­vnych plÃ¡nov sa potom pri vykonÃ¡vanÃ­ plÃ¡nu vyberie ten, ktorÃ½ zodpovedÃ¡ aktuÃ¡lnej situÃ¡cii. Rozdelenie plÃ¡nu na viac alternatÃ­v nastÃ¡va buÄ na zÃ¡klade aktuÃ¡lneho stavu sveta alebo na zÃ¡klade vÃ½sledku vykonanej akcie. Vetvenie na zÃ¡klade aktuÃ¡lneho stavu sveta sa zvykne realizovaÅ¥ vloÅ¾enÃ­m senzorickej akcie, ktorÃ¡ mÃ¡ viac moÅ¾nÃ½ch vÃ½sledkov zodpovedajÃºcich jednotlivÃ½m moÅ¾nÃ½m stavom sveta alebo skupinÃ¡m stavov. Pri vetvenÃ­ na zÃ¡klade vÃ½sledku akcie sa vytvÃ¡ra alternatÃ­vna vetva plÃ¡nu pre kaÅ¾dÃ½ moÅ¾nÃ½ vÃ½sledok akcie. Pri sÃºÄasnÃ½ch prÃ­stupoch k plÃ¡novaniu s alternatÃ­vami nastÃ¡va problÃ©m s veÄ¾kÃ½m faktorom vetvenia. NaprÃ­klad v prÃ­klade uvedenom autormi systÃ©mu ZANDER (Majercik, 2003) so 4 moÅ¾nÃ½mi akciami a 2 krokmi vedÃºcimi k cieÄ¾u (s moÅ¾nosÅ¥ou paralelnÃ©ho vykonÃ¡vania akciÃ­) bolo potrebnÃ© vygenerovaÅ¥ binÃ¡rny strom so 128 listami, vÅ¡eobecne je zloÅ¾itosÅ¥ 2ak, kde a je poÄet zvaÅ¾ovanÃ½ch akciÃ­ v jednom kroku a k je minimÃ¡lny poÄet krokov potrebnÃ½ch na dosiahnutie cieÄ¾a. Ak by sme vylÃºÄili sÃºÄasnÃ© vykonÃ¡vanie viacerÃ½ch akciÃ­, zmenÅ¡ila by sa zloÅ¾itosÅ¥ na ak. ZloÅ¾itosÅ¥ algoritmu je teda exponenciÃ¡lna, a to nielen maximÃ¡lna zloÅ¾itosÅ¥, ale aj priemernÃ¡ a minimÃ¡lna."
111,70,0.676,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Å tatistiky po jednotlivÃ½ch ÃºlohÃ¡ch Obr. 4.4 ilustruje zobrazenie Å¡tatistÃ­k pre konkrÃ©tnu Ãºlohu - Ãloha 1. Je vidieÅ¥, Å¾e ÃºspeÅ¡nosÅ¥ v prÃ­pade predmetnej Ãºlohy bola veÄ¾mi nÃ­zka. SprÃ¡vnu odpoveÄ si vybralo len 14,3% respondentov, z ktorÃ½ch tretina sa najprv vydala inou cestou (a dosiahla tak len nepriamy Ãºspech). Okrem toho, miera priamosti nÃ¡m hovorÃ­, Å¾e 61,9% respondentov si vybralo svoju odpoveÄ bez akÃ©hokoÄ¾vek nÃ¡vratu. AÅ¾ 52,4% respondentov priÅ¡lo k nesprÃ¡vnemu cieÄ¾u priamo a vybrali si ho ako svoju odpoveÄ, Äo znamenÃ¡, Å¾e respondenti sa poÄas tejto Ãºlohy skutoÄne cÃ­tili sebaisto. To, Å¾e 81% Ä¾udÃ­ vybralo nesprÃ¡vnu odpoveÄ, je zrejmÃ½m signÃ¡lom, Å¾e nieÄo nie je v poriadku. Ak chceme tieto vÃ½sledky preskÃºmaÅ¥ podrobnejÅ¡ie, mÃ´Å¾eme sa pozrieÅ¥ na prvÃ© kliknutia a dosiahnutÃ© ciele."
265,192,0.676,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"V softvÃ©rovom inÅ¾inierstve potrebujeme modelovaÅ¥ biznis naÅ¡ich zÃ¡kaznÃ­kov, pre ktorÃ½ch softvÃ©r vytÃ¡rame. Potrebujeme poznaÅ¥ akÃ½m spÃ´sobom pracujÃº (ich pouÅ¾Ã­vatelia) a akÃº rolu v ich aktivitÃ¡ch bude softvÃ©r vykonÃ¡vaÅ¥. Äinnosti a postupy, ktorÃ© zÃ¡kaznÃ­k vykonÃ¡va bÃ½vajÃº zÃ¡kladom scenÃ¡rov samotnÃ©ho softvÃ©ru. Veci s ktorÃ½mi pracuje zasa pravdepodobne budeme reprezentovaÅ¥ Ãºdajmi v naÅ¡om softvÃ©ri. Nami vytvorenÃ½ biznis model mÃ´Å¾e zÃ¡kaznÃ­k skontrolovaÅ¥ a opraviÅ¥ nedorozumenia."
190,302,0.673,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"takpovediac z prsta. NavyÅ¡e, ak zvolÃ­ vysokÃº ÃºroveÅ ohrozenia a zabrÃ¡ni tak prÃ­padnÃ©mu teroristickÃ©mu Ãºtoku, nikto sa o tom nedozvie a obÄania budÃº akurÃ¡t nadÃ¡vaÅ¥ na rÃ´zne obmedzenia, ktorÃ© si museli vytrpieÅ¥. Naopak, ak zvolÃ­ nÃ­zku ÃºroveÅ a dÃ´jde k neÄakanÃ©mu Ãºtoku, Ä¾udia okrem toho, Å¾e budÃº nahnevanÃ­, zaÄnÃº pochybovaÅ¥ o vÃ½zname takÃ©hoto Ãºradu. V softvÃ©rovÃ½ch firmÃ¡ch sa Äasto deje nieÄo podobnÃ©. V oÄiach zamestnancov mÃ´Å¾e byÅ¥ manaÅ¾Ã©r zbytoÄnou zloÅ¾kou vÃ½vojovÃ©ho tÃ­mu. PodÄ¾a nich totiÅ¾ ak firma v danom projekte uspeje, je to vÄaka programÃ¡torom, keÄ neuspeje, je to samozrejme chyba manaÅ¾Ã©ra. Ako sa spieva v jednej slovenskej pesniÄke: âÃºspech je vÅ¡etkÃ½ch, neÃºspech iba jednÃ©hoâ. MÃ¡lokto si vÅ¡ak uvedomuje, Å¾e samotnÃ¡ predpoveÄ budÃºcnosti tÃºto budÃºcnosÅ¥ ovplyvÅuje. UÅ¾ spomÃ­nanÃ© zabrÃ¡nenie predpokladanÃ©mu Ãºtoku je toho dobrÃ½m prÃ­kladom. V rovine softvÃ©rovÃ½ch inÅ¾inierov moÅ¾no tento fakt interpretovaÅ¥ takto: Ak rÃ¡tate so zmenami poÅ¾iadaviek alebo technolÃ³giÃ­ a tieto predpoklady zakomponujete do svojich Ãºvah uÅ¾ na zaÄiatku, vyrieÅ¡ite tÃ½m mnoÅ¾stvo problÃ©mov, ktorÃ© by sa neskÃ´r objavili. V ideÃ¡lnom stave vyrieÅ¡ite vÅ¡etky problÃ©my eÅ¡te pred ich vznikom a neskÃ´r sa nemusÃ­te uÅ¾ o niÄ staraÅ¥, keÄÅ¾e Å¾iadne problÃ©my sa (paradoxne) nevyskytli."
195,30,0.67,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"2.2 Kvalita zÃ¡znamov Kvalita zÃ¡znamov je kÄ¾ÃºÄovÃ¡ pre poskytovanie vhodnÃ½ch odporÃºÄanÃ­ a zvyÅ¡ovanie kvality softvÃ©ru. OvplyvÅuje ju niekoÄ¾ko faktorov: SprÃ¡vna identifikÃ¡cia â ZÃ¡znamy o chybÃ¡ch vytvÃ¡rajÃº rÃ´zne skupiny pouÅ¾Ã­vateÄ¾ov, napr. vÃ½vojÃ¡ri, testeri, zÃ¡kaznÃ­ci. KaÅ¾dÃ¡ skupina mÃ¡ rÃ´znu prax a vedomosÅ¥ o tom, ako softvÃ©r funguje, Äi ide o skutoÄnÃº chybu, novÃº zatiaÄ¾ nezdokumentovanÃº funkcionalitu, nezrovnalosÅ¥ s dokumentÃ¡ciou alebo chybnÃ© vstupnÃ© Ãºdaje, ktorÃ© spÃ´sobujÃº neoÄakÃ¡vanÃ© sprÃ¡vanie systÃ©mu. Pri analÃ½ze zÃ¡znamov preto treba skontrolovaÅ¥ sprÃ¡vnosÅ¥ Ãºdajov. PodÄ¾a [3], kde autori ruÄne preskÃºmali viac ako 7000 zÃ¡znamov o chybÃ¡ch v 5 softvÃ©rovÃ½ch projektoch, bolo v priemere aÅ¾ 33,8% zÃ¡znamov nesprÃ¡vne klasifikovanÃ½ch ako chyba, hoci iÅ¡lo o novÃº funkcionalitu, zlepÅ¡enia, refaktorovanie kÃ³du alebo nezrovnalosÅ¥ s dokumentÃ¡ciou. NeÃºplnosÅ¥ zÃ¡znamov â ÄalÅ¡Ã­m problÃ©mom, ktorÃ½ ovplyvÅuje kvalitu zÃ¡znamov je ich neÃºplnosÅ¥. Tvorcovia zÃ¡znamov nemusia maÅ¥ pri objavenÃ­ chyby vÅ¡etky dostupnÃ© informÃ¡cie, alebo"
111,90,0.67,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Ciele Jednou z najdÃ´leÅ¾itejÅ¡Ã­ch poÅ¾iadaviek pri vytvÃ¡ranÃ­ dobrÃ©ho dotaznÃ­ka je dobre definovanÃ½ cieÄ¾. MusÃ­te vedieÅ¥, preÄo prieskum realizujete, akÃ© informÃ¡cie chcete zÃ­skaÅ¥, Äo sa chcete dozvedieÅ¥ o svojich pouÅ¾Ã­vateÄ¾och a na Äo budÃº Ãºdaje pouÅ¾itÃ©. VÅ¾dy je tieÅ¾ dobrÃ© poloÅ¾iÅ¥ si otÃ¡zku, Äi by ste namiesto prieskumu nemohli zÃ­skaÅ¥ informÃ¡cie nejakÃ½m inÃ½m, moÅ¾no lepÅ¡Ã­m spÃ´sobom (napr. pomocou inÃ½ch nÃ¡strojov a UX metrÃ­k alebo pomocou Ãºdajov z analÃ½zy webovÃ½ch strÃ¡nok). DotaznÃ­k nie je len nÃ¡hodnÃ½ zoznam otÃ¡zok, ale je to Å¡pecifickÃ½ nÃ¡stroj navrhnutÃ½ s konkrÃ©tnym cieÄ¾om. ZvyÄajne, keÄ vytvÃ¡rate dotaznÃ­k, mÃ¡te nejakÃ½ problÃ©m, ktorÃ½ potrebujete vyrieÅ¡iÅ¥, alebo otÃ¡zku, na ktorÃº potrebujete odpoveÄ. Podnety mÃ´Å¾u pochÃ¡dzaÅ¥ z rÃ´znych zdrojov â zo stretnutÃ­ so zainteresovanÃ½mi stranami, z analytickÃ½ch Ãºdajov, z podpory pouÅ¾Ã­vateÄ¾ov, z prieskumu trhu alebo dokonca zo samotnÃ©ho procesu nÃ¡vrhu produktu Äi sluÅ¾by. PredtÃ½m, ako zaÄnete vytvÃ¡raÅ¥ otÃ¡zky do"
59,130,0.669,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.8. ZnÃ¡zornenie evoluÄnej tvorby komplexnÃ©ho orgÃ¡nu (napr. oka stavovcov), proces je inicializovanÃ½ evoluÄnÃ½m vznikom jednoduchÃ©ho âprotoorgÃ¡nuâ Aini , cez prechodnÃ© rieÅ¡enia Ai, aÅ¾ po koneÄnÃ© rieÅ¡enie Afin. ZloÅ¾itosÅ¥ orgÃ¡nu postupne rastie, dva evoluÄne susednÃ© orgÃ¡ny sÃº si podobnÃ©, evoluÄnÃ½ prechod Ai ï® Ai ï«1 je dobre interpretovateÄ¾nÃ½ pomocou mutÃ¡cie genotypu organizmu. KaÅ¾dÃ½ orgÃ¡n mÃ¡ Å¡pecifikovanÃº Ãºlohu, ktorÃ¡ urÄuje aj selekÄnÃ½ tlak na jeho vznik, tieto Ãºlohy sa mÃ´Å¾u v priebehu evolÃºcie podstatne meniÅ¥. Preto mÃ´Å¾eme evoluÄnÃº Ãºlohu vzniku komplexnÃ©ho orgÃ¡nu formulovaÅ¥ ako zloÅ¾itÃº optimalizaÄnÃº Ãºlohu pohyblivÃ©ho cieÄ¾a. PoÄiatoÄnÃ½ a koneÄnÃ½ stav je spojenÃ½ Äiarou, ktorÃ¡ reprezentuje moÅ¾nosÅ¥ priameho âevoluÄnÃ©ho skokuâ z Aini na Afin. TÃ¡to evoluÄnÃ¡ zmena by vyÅ¾adovala zÃ¡sadnÃº prestavbu genotypu, ktorÃ¡ je jednou mutÃ¡ciou nerealizovateÄ¾nÃ¡, preto pravdepodobnosÅ¥ takÃ©ho evoluÄnÃ©ho skoku je skoro nulovÃ¡."
265,65,0.668,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"MÃ¡lokedy mÃ¡me presnÃº predstavu o podobe softvÃ©ru uÅ¾ na zaÄiatku jeho tvorby. A ak aj nejakÃº predstavu mÃ¡me, je rozumnÃ© ju povaÅ¾ovaÅ¥ za neistÃº, pokiaÄ¾ preukÃ¡zateÄ¾ne neoverÃ­me, Å¾e zodpovedÃ¡ poÅ¾iadavkÃ¡m, oÄakÃ¡vaniam a potrebÃ¡m zÃ¡kaznÃ­ka (pouÅ¾Ã­vateÄ¾a). Ak by sme sa totiÅ¾ na jej zÃ¡klade pustili do tvorby softvÃ©ru, vystavujeme sa veÄ¾kÃ©mu riziku minutia prostriedkov na tvorbu nieÄoho nepouÅ¾iteÄ¾nÃ©ho. PokiaÄ¾ sa vÅ¡ak rozhodneme postupovaÅ¥ iteratÃ­vne, teda budeme vytvÃ¡raÅ¥ softvÃ©r viacnÃ¡sobnÃ½m prechodom cez vÅ¡etky fÃ¡zy tvorby a overovania softvÃ©ru, toto riziko sa zniÅ¾uje. UÅ¾ po prvom prechode, ktorÃ½ nÃ¡s stojÃ­ zlomok celkovÃ½ch nÃ¡kladov na projekt, je vÃ½sledkom prvÃ½ (zÄaleka nie âdokonalÃ½â) prototyp softvÃ©ru. Tento prvÃ½ prototyp moÅ¾no zÃ¡kaznÃ­kovi ukÃ¡zaÅ¥ a konfrontovaÅ¥ s jeho oÄakÃ¡vaniami pomerne skoro. IteratÃ­vny prÃ­stup tak pomÃ¡ha zniÅ¾ovaÅ¥ rizikÃ¡, ktorÃ© pri tvorbe softvÃ©ru hrozia â ak sme totiÅ¾ vytvorili nieÄo, Äo predstave zÃ¡kaznÃ­ka nezodpovedÃ¡, nestratili sme toÄ¾ko prostriedkov (Obr. 1.5). OveÄ¾a jednoduchÅ¡Ã­m sa stÃ¡va aj spresnenie ÄalÅ¡Ã­ch krokov vo vÃ½voji, o ktorÃ½ch by sme vÅ¡ak na zaÄiatku projektu eÅ¡te nemohli maÅ¥ predstavu. PoznÃ¡mka: Dokonca aj v prÃ­pade, Å¾e by sme mali na zaÄiatku projektu poÅ¾iadavky dostatoÄne presne definovanÃ©, mÃ´Å¾e byÅ¥ vÃ½hodnÃ© pouÅ¾iÅ¥ iteratÃ­vny prÃ­stup. Je to v prÃ­pade, keÄ hrozÃ­, Å¾e sa tieto poÅ¾iadavky z dÃ´vodu nejakÃ©ho externÃ©ho vplyvu zmenia. PoÄas projektu naprÃ­klad mÃ´Å¾e dÃ´jsÅ¥ k legislatÃ­vnej Äi trhovej zmene, ktorÃ¡ si vyÅ¾iada aj zmeny vo vyvÃ­janom softvÃ©ri."
265,74,0.667,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"SoftvÃ©r sa skladÃ¡ z mnohÃ½ch ÄastÃ­ a prepojenÃ­ (zÃ¡vislostÃ­) medzi nimi. Pre Äloveka je nemoÅ¾nÃ© sa s nimi detailne zaoberaÅ¥ a zÃ¡roveÅ uvaÅ¾ovaÅ¥ o softvÃ©ri ako o celku (tento problÃ©m si moÅ¾no vÅ¡imnÃºÅ¥ uÅ¾ pri tvorbe jednoduchÃ½ch programov). PriveÄ¾kÃ© je aj mnoÅ¾stvo dimenziÃ­ (vlastnostÃ­), cez ktorÃ© na softvÃ©r nazerÃ¡me. SoftvÃ©r je azda zloÅ¾itejÅ¡Ã­ ako ÄokoÄ¾vek, Äo Älovek dokÃ¡Å¾e vytvoriÅ¥. ZÃ¡leÅ¾itosti v softvÃ©ri sÃº (aj napriek naÅ¡ej snahe) prepletenÃ©: napr. jedna Ärta softvÃ©ru (prÃ­pad pouÅ¾itia) mÃ´Å¾e prechÃ¡dzaÅ¥ cez vÅ¡etky Ãºrovne Å¡truktÃºry softvÃ©ru a ovplyvÅovaÅ¥ ich. ZloÅ¾itosÅ¥ komplikuje tvorbu, ÃºdrÅ¾bu a vÃ´bec akÃ©koÄ¾vek Ãºvahy nad softvÃ©rom. OdrÃ¡Å¾a sa aj do problÃ©mov pri zmene mierky (so zvÃ¤ÄÅ¡ovanÃ­m softvÃ©ru narastÃ¡ mnoÅ¾stvo jeho vnÃºtornej interakcie). DÃ´sledkom tieÅ¾ je, Å¾e zloÅ¾itosÅ¥ sa odrÃ¡Å¾a aj do manaÅ¾mentu vÃ½voja softvÃ©ru, teda spÃ´sobu riadenia tvorby softvÃ©rovÃ½ch produktov. Pre Ä¾udÃ­ je Äasovo i mentÃ¡lne nÃ¡roÄnÃ© chÃ¡paÅ¥ celÃ½ rozsah softvÃ©ru, Äo na jednej strane robÃ­ strata zauÄenÃ©ho vÃ½vojÃ¡ra na projekte veÄ¾mi nÃ¡kladnou. A vedie to k ÄalÅ¡iemu paradoxu, znÃ¡memu ako Brooksov zÃ¡kon: Pridanie novÃ©ho vÃ½vojÃ¡ra do (meÅ¡kajÃºceho) projektu vedie k predÄºÅ¾eniu projektu (priÄom intuÃ­cia znaÄÃ­ opak). ZloÅ¾itosÅ¥ softvÃ©ru je jedna z hlavnÃ½ch prÃ­Äin, pretoÅ¾e novÃ½ vÃ½vojÃ¡r sa musÃ­ oboznÃ¡miÅ¥ s netriviÃ¡lne zloÅ¾itÃ½m stavom softvÃ©rovÃ©ho projektu."
190,452,0.665,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Å pecifickÃ½m prÃ­padom je vÃ½voj softvÃ©ru s otvorenÃ½m zdrojovÃ½m kÃ³dom. Na takÃ½chto projektoch zvykne pracovaÅ¥ mnoÅ¾stvo Ä¾udÃ­, Äasto z vlastnej vÃ´le a bez nÃ¡roku na honorÃ¡r, majÃº k dispozÃ­cii rozdielne veÄ¾a Äasu. NajvÃ¤ÄÅ¡Ã­m problÃ©mom vÅ¡ak je, Å¾e vÃ½vojÃ¡ri sÃº rozmiestnenÃ­ v rÃ´znych krajinÃ¡ch sveta a rÃ´znych ÄasovÃ½ch pÃ¡smach, Äo takmer vyluÄuje akÃ©koÄ¾vek stretnutie v reÃ¡lnom Äase. V tomto prÃ­pade nemÃ´Å¾eme mnohokrÃ¡t vyuÅ¾iÅ¥ klasickÃ© metÃ³dy, ktorÃ© sa beÅ¾ne pouÅ¾Ã­vajÃº v softvÃ©rovÃ½ch spoloÄnostiach. Pre otvorenÃ© projekty je tieÅ¾ prÃ­znaÄnÃ©, Å¾e z hÄ¾adiska nÃ¡vrhu, plÃ¡novania a riadenia sÃº viac neformÃ¡lne. Aj keÄ sa tu mÃ´Å¾e zdaÅ¥ vÃ½voj neorganizovanÃ½, nie je to celkom tak a najmÃ¤ existujÃº oprÃ¡vnenÃ© vÃ½hody. RapÃ­dny vÃ½voj a masÃ­vne hodnotenie komunitou, flexibilita v pouÅ¾Ã­vanÃ­ a zmene zdro-"
190,467,0.662,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ZÃ¡kladom kaÅ¾dÃ©ho obchodu sÃº dve strany: obchodnÃ­k, ktorÃ½ ponÃºka tovar alebo poskytuje sluÅ¾by a zÃ¡kaznÃ­k, ktorÃ½ kupuje. Na zabezpeÄenie stÃ¡lych prÃ­jmov a na ich zvyÅ¡ovanie je na strane obchodnÃ­ka (podniku) potrebnÃ© neustÃ¡le predÃ¡vaÅ¥ svoje produkty, Äo zahÅÅa potrebu prinÃ¡Å¡aÅ¥ na trh novÃ©, najlepÅ¡ie bezkonkurenÄnÃ© vÃ½robky a sluÅ¾by a zÃ­skavaÅ¥ novÃ½ch zÃ¡kaznÃ­kov z rÃ´znych ÄastÃ­ trhu ako aj udrÅ¾anie si spokojnÃ½ch a stÃ¡lych odberateÄ¾ov. PodÄ¾a mÃ´jho nÃ¡zoru je vÃ½hodnejÅ¡ie prijaÅ¥ stratÃ©giu udrÅ¾ania ZÃ¡kaznÃ­k oÄakÃ¡va si Äo najÅ¡irÅ¡ieho okruhu zÃ¡kaznÃ­kov a postupnÃ©ho rozÅ¡irovania o no- lepÅ¡ie, rÃ½chlejÅ¡ie, vÃ½ch zÃ¡kaznÃ­kov. Pri vÃ½voji softvÃ©rovÃ½ch produktov (rovnako ako priateÄ¾skejÅ¡ie sluÅ¾by v ostatnÃ½ch odvetviach) sa teda dostÃ¡va do popredia filozofia neustÃ¡- a je netrpezlivÃ½, leho uspokojovania uÅ¾ zÃ­skanÃ½ch a obslÃºÅ¾enÃ½ch zÃ¡kaznÃ­kov. TÃ¡to keÄ nieÄo chÃ½ba. filozofia vyÅ¾aduje stÃ¡le zdokonaÄ¾ovanie komunikaÄnÃ½ch kanÃ¡lov na prenos informÃ¡ciÃ­ a poÅ¾iadaviek od zÃ¡kaznÃ­ka a novÃ½m trendom sa stÃ¡va objavovanie informÃ¡ciÃ­ o potrebÃ¡ch zÃ¡kaznÃ­ka aj z na prvÃ½ pohÄ¾ad nepodstatnÃ½ch informÃ¡ciÃ­. Firmy chcÃº, aby sa zÃ¡kaznÃ­ci stali ich najlepÅ¡Ã­mi priateÄ¾mi. Bolo to tak vÅ¾dy, ale teraz sÃº zÃºfalÃ­, keÄ im musia preukÃ¡zaÅ¥ svoju vÄaÄnosÅ¥. DneÅ¡nÃ­ zÃ¡kaznÃ­ci sÃº totiÅ¾ nestÃ¡li. MÃ´Å¾u vyuÅ¾iÅ¥ internet na porovnanie cien a skontrolovanie ponuky. MÃ´Å¾u nakupovaÅ¥ tovar a sluÅ¾by online, pomocou telefÃ³nu Äi osobne a vybraÅ¥ si medzi rÃ´znymi formami prÃ­stupu podÄ¾a svojho Å¾elania. V digitÃ¡lnom veku oÄakÃ¡vajÃº lepÅ¡ie, rÃ½chlejÅ¡ie a priateÄ¾skejÅ¡ie sluÅ¾by a stÃ¡vajÃº sa netrpezlivÃ½mi, keÄ to chÃ½ba. S rozvojom mobilnÃ©ho obchodu sÃº pouÅ¾Ã­vatelia nÃ¡roÄnejÅ¡Ã­. Pod tlakom potreby odpovedaÅ¥, spoloÄnosti sa Äoraz viac obracajÃº na mix podnikateÄ¾skej stratÃ©gie, spracovania a postupov znÃ¡mych ako manaÅ¾ment vzÅ¥ahov so zÃ¡kaznÃ­kmi (angl. CRM, Customer Relationship Management). Pred niekoÄ¾kÃ½mi rokmi bolo CRM novinkou. Jeho zÃ¡kladnÃ© princÃ­py vÅ¡ak boli znÃ¡me uÅ¾ niekoÄ¾ko desaÅ¥roÄÃ­. V Äom je teda CRM skutoÄne novÃ©? TradiÄnÃ¡ marketingovÃ¡ teÃ³ria opisuje postupnÃ½ vÃ½voj od produktovo orientovanÃ½ch marketingovÃ½ch stratÃ©giÃ­ cez odbytovo orientovanÃ© aÅ¾ po trhovo alebo zÃ¡kaznÃ­cky orientovanÃ© marketingovÃ© stratÃ©gie. ZÃ¡kaznÃ­cky orientovanÃ¡ firma sa vyznaÄuje tÃ½m, Å¾e sa najskÃ´r snaÅ¾Ã­ zistiÅ¥, Äo potrebujÃº sÃºÄasnÃ­ a potenciÃ¡lni zÃ¡kaznÃ­ci a vÅ¡etky vnÃºtornÃ© procesy a Å¡truktÃºry potom orientuje na naplnenie tÃ½chto potrieb. Jednoducho povedanÃ©, nejde uÅ¾ o to, zÃ­skaÅ¥ produkt, a potom ho umiestniÅ¥ na trh a snaÅ¾iÅ¥ sa preÅ zÃ­skaÅ¥ odberateÄ¾ov, ale ide o to, aby si firma najprv zistila, Äo vlastne mÃ´Å¾u jej stÃ¡li i potenciÃ¡lni zÃ¡kaznÃ­ci potrebovaÅ¥, potom nÃ¡jde potrebnÃ½ produkt a ponÃºkne im ho [3]."
94,296,0.661,Sprievodca svetom vedeckÃ©ho publikovania,"8.3.6 VÃ½znam repozitÃ¡rov ZÃ¡kladnÃ¡ hodnota repozitÃ¡rov spoÄÃ­va v napÄºÅanÃ­ ich funkcie cielenÃ©ho zÃ­skavania, odbornÃ©ho spracovania, dlhodobÃ©ho uchovÃ¡vania, ochrany a sprÃ­stupÅovania budovanÃ©ho fondu digitÃ¡lnych objektov. ÄalÅ¡ie doplnkovÃ© a priebeÅ¾ne aktualizovanÃ© funkcie a sluÅ¾by s vyuÅ¾itÃ­m aktuÃ¡lnych technologickÃ½ch moÅ¾nostÃ­, sÃº popri tvorbe metadÃ¡t, kÄ¾ÃºÄovÃ½ch slov, prÃ­padne tezauru takisto pridanou hodnotou tÃ½chto systÃ©mov a dokumentov v nich uloÅ¾enÃ½ch. RepozitÃ¡re prinÃ¡Å¡ajÃº benefit aj autorom, najmÃ¤ tÃ½m, Å¾e uchovÃ¡vajÃº a sprÃ­stupÅujÃº ich prÃ¡ce, napr. aj s pripojenÃ­m kvantitatÃ­vnych hodnotiacich Ãºdajov realizovanÃ½ch oficiÃ¡lnymi metrikami v podobe poÄtu citÃ¡ciÃ­ ÄlÃ¡nku v bibliografickÃ½ch citaÄnÃ½ch databÃ¡zach vo Web of Science a Scopus. Budovanie obsahu repozitÃ¡ra s premyslenou Å¡truktÃºrou a obsahom pomÃ´Å¾e autorom ako aj inÅ¡titÃºciÃ­ zviditeÄ¾niÅ¥ a sprehÄ¾adniÅ¥ evidenciu publikaÄnej 130 https://www.repositoryaudit.eu/"
190,131,0.661,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ManaÅ¾Ã©ri Äasto zostavujÃº plÃ¡n tak, aby ohÃºrili zÃ¡kaznÃ­ka: âSpravÃ­me to Äo inÃ­, ale za polovicu Äasu!â To vÅ¡etko s nÃ¡dejou, Å¾e âveÄ programÃ¡tori sÃº mladÃ­ a oni to zvlÃ¡dnuâ. Touto filozofiou vznikÃ¡ veÄ¾kÃ© mnoÅ¾stvo projektov, z ktorÃ½ch mnohÃ© konÄia neÃºspechom. PreÄo? AgresÃ­vne plÃ¡novanie, aj keÄ jeho vÃ½sledkom sÃº veÄ¾mi atraktÃ­vne vyzerajÃºce plÃ¡ny pre zÃ¡kaznÃ­ka, mÃ¡ minimÃ¡lne dve nevÃ½hody:"
184,383,0.661,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"PageRank Algoritmus PageRank bol navrhnutÃ½ L. Pagom a S. Brinom v (Page, 1998). PodobnÃ½ prÃ­stup navrhol aj Yanhong Li v (Li, 1998). VyuÅ¾Ã­va sa tu podobnÃ½ princÃ­p, ako sa pouÅ¾Ã­va na hodnotenie akademickÃ½ch ÄlÃ¡nkov podÄ¾a poÄtu citÃ¡ciÃ­. Tu urÄuje poÄet citÃ¡ciÃ­ pribliÅ¾nÃº kvalitu alebo zaujÃ­mavosÅ¥ ÄlÃ¡nku. PageRank rozÅ¡iruje tÃºto myÅ¡lienku o to, Å¾e pri spoÄÃ­tavanÃ­ nie sÃº vÅ¡etky odkazy zapoÄÃ­tavanÃ© s rovnakou vÃ¡hou a poÄet odkazov na strÃ¡nku je normalizovanÃ½. SamotnÃ½ vÃ½poÄet je definovanÃ½ nasledovne: KeÄ mÃ¡me strÃ¡nku A, na ktorÃº ukazujÃº strÃ¡nky T1, T2, ..., Tn a C(T) je poÄet odkazov zo strÃ¡nky T. Potom PageRank pre strÃ¡nku A je:"
130,396,0.66,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"OrganizÃ¡cie vytvorenÃ© na princÃ­pe trhov sÃº tvorenÃ© dvomi typmi agentov: predÃ¡vajÃºcimi a kupujÃºcimi. KupujÃºci poÅ¾adujÃº (alebo podÃ¡vajÃº ponuky) urÄitÃ© sluÅ¾by, zdroje alebo informÃ¡cie. OpaÄnÃº stranu vzÅ¥ahov tvoria predÃ¡vajÃºci, ktorÃ­ tieto sluÅ¾by, zdroje a informÃ¡cie poskytujÃº kupujÃºcim. PredÃ¡vajÃºci sÃº zodpovednÃ­ za spracovÃ¡vanie ponÃºk a vÃ½beru najlepÅ¡ej ponuky, ktorÃº uspokoja. PredÃ¡vajÃºci mÃ´Å¾u tieÅ¾ pÃ´sobiÅ¥ v roli sprostredkovateÄ¾a, ktorÃ½ prijÃ­ma od agentov tovar (sluÅ¾by, zdroje, ...), ktorÃ½ potom poskytuje kupujÃºcim. PrÃ­klad trhu je na obrÃ¡zku 7-10. V niektorÃ½ch prÃ­padoch mÃ´Å¾e ten istÃ½ agent sÃºÄasne zastÃ¡vaÅ¥ Ãºlohu kupujÃºceho aj predÃ¡vajÃºceho."
190,309,0.66,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PrvÃ© dve z tÃ½chto definÃ­cii sa v podstate zhodujÃº. Tretia definÃ­cia hovorÃ­ o tom, Å¾e pokiaÄ¾ mÃ¡ byÅ¥ nieÄo, produkt, sluÅ¾ba alebo softvÃ©r, kvalitnÃ½ musÃ­ byÅ¥ vÃ½nimoÄnÃ½ a v nieÄom lepÅ¡Ã­ ako ostatnÃ© dostupnÃ© veci. Je len logickÃ©, Å¾e takÃ¡to definÃ­cia nemohla padnÃºÅ¥ na ÃºrodnÃº pÃ´du v komunite programÃ¡torov, ktorÃ½ sa snaÅ¾ia vÅ¡etko robiÅ¥ podÄ¾a moÅ¾nosti Äo najrÃ½chlejÅ¡ie a najjednoduchÅ¡ie. A naviac, keby sa celÃ½ svet pridÅÅ¾al tejto definÃ­cie, Ä¾udia by zrazu s prekvapenÃ­m zistili, Å¾e vÃ¤ÄÅ¡ina toho Äo pouÅ¾Ã­vajÃº je jednoducho nieÄo nekvalitnÃ©. No a to by bola tvrdÃ¡ rana pravdepodobne pre kaÅ¾dÃ©ho Å¾ijÃºceho v dneÅ¡nej spoloÄnosti. Aj keÄ si to vÃ¤ÄÅ¡ina Ä¾udÃ­ nechce priznaÅ¥. MoÅ¾no prÃ¡ve preto sa kvalita softvÃ©ru v sÃºÄasnosti meria podÄ¾a prvÃ½ch dvoch definÃ­ciÃ­. Okrem ich nespornej pravdivosti, ktorÃº vÅ¡etci akosi podvedome cÃ­tia, dÃ¡vajÃº moÅ¾nosÅ¥ vzniku omnoho vÃ¤ÄÅ¡iemu mnoÅ¾stvu kvalitnÃ½ch vecÃ­ ako tretia, oxfordskÃ¡ definÃ­cia. V tom tkvie ich sila, a to je ich veÄ¾kou prednosÅ¥ou a vÃ½hodou. VÅ¡ak kaÅ¾dÃ½ predsa chce robiÅ¥ kvalitnÃ© veci bez toho, aby musel preukazovaÅ¥ vÃ½nimoÄnosÅ¥. Bez ohÄ¾adu na to, Äi sa jednÃ¡ o vÃ½robu hrncov, tlaÄ novÃ­n alebo tvorbu informaÄnÃ©ho systÃ©m pre uchovÃ¡vanie informÃ¡cii o krvnÃ½ch skupinÃ¡ch dobrovoÄ¾nÃ½ch darcov krvi. ÄalÅ¡ou vÃ½hodou alebo aj nevÃ½hodou je fakt, Å¾e poskytujÃº neuveriteÄ¾ne Å¡irokÃ½ priestor pre manipulÃ¡ciu s pojmami kvalita. Ide o jednoduchÃ½ princÃ­p spoÄÃ­vajÃºci v tom, Å¾e pokiaÄ¾ sÃº splnenÃ© zadanÃ© poÅ¾iadavky, produkt je kvalitnÃ½. Za touto jednoduchou implikÃ¡ciou sa toho skrÃ½va viac ako sa zdÃ¡. InÃ½mi slovami aj Ãºplne zle fungujÃºci program, ktorÃ½ nedokÃ¡Å¾e sprÃ¡vne spoÄÃ­taÅ¥ dve ÄÃ­sla sa mÃ´Å¾e s ÄistÃ½m svedomÃ­m oznaÄiÅ¥ za kvalitnÃ½ pokiaÄ¾ zadÃ¡vateÄ¾ omylom, schvÃ¡lne alebo z nepozornosti sÃºhlasil prÃ¡ve s touto jeho vlastnosÅ¥ou. Koniec koncov nevadÃ­, Å¾e to nerobÃ­ to, Äo to mÃ¡ robiÅ¥, najmÃ¤ Å¾e je to podÄ¾a poÅ¾iadaviek a je to kvalitnÃ©. HlavnÃ½ problÃ©m, ktorÃ½ z tÃ½chto definÃ­cii vyplÃ½va je teda nasledovnÃ½: nie Na kvalitu sa je kvalita ako kvalita. PokiaÄ¾ niekto oÄakÃ¡va od filmu vzÃ¡jomnÃ© kynoÅ¾enie dÃ¡ nazeraÅ¥ monÅ¡truÃ³znych robotov a obyvateÄ¾ov naÅ¡ej planÃ©ty, bude zjavne povaÅ¾ovaÅ¥ za rÃ´zne. kvalitnÃ© Ãºplne inÃ© filmy ako niekto s citlivou duÅ¡ou pachtiaci po romantike."
94,312,0.66,Sprievodca svetom vedeckÃ©ho publikovania,"9.1 Ako zviditeÄ¾niÅ¥ vedeckÃº prÃ¡cu? Vedec ako jednotlivec alebo reprezentant vÃ½skumnej inÅ¡titÃºcie zviditeÄ¾Åuje svoje vÃ½sledky v prvom rade tÃ½m, Å¾e ich publikuje vo vhodnom Äasopise alebo na vhodnej platforme (teda tam, kde sa stretne s cieÄ¾ovou skupinou â s ÄitateÄ¾mi so zÃ¡ujmom o prÃ­sluÅ¡nÃ½ typ informÃ¡cie), prÃ­padne svoje vÃ½sledky prezentuje na konferencii, ktorej sa zÃºÄastÅujÃº vÃ½znamnÃ© kapacity v odbore. CieÄ¾om mnohÃ½ch vedcov je spojiÅ¥ svoju prÃ¡cu s nÃ¡zvom Äo najprestÃ­Å¾nejÅ¡ieho Äasopisu â podÄ¾a tradiÄnÃ©ho oÄakÃ¡vania majÃº prestÃ­Å¾ne Äasopisy viac ÄitateÄ¾ov, lebo prÃ­snym vÃ½berom zaruÄujÃº kvalitu obsahu a ich vydavatelia majÃº dosÅ¥ prostriedkov, aby zabezpeÄili zodpovedajÃºcu propagÃ¡ciu. No ÄÃ­tanosÅ¥ nezÃ¡visÃ­ len"
184,136,0.659,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Prototypovanie ScenÃ¡re sÃº veÄ¾mi uÅ¾itoÄnou technikou na validÃ¡ciu navrhovanej architektÃºry. NiektorÃ© scenÃ¡re vÅ¡ak nie je moÅ¾nÃ© Ä¾ahko vyhodnotiÅ¥. PrÃ­kladom je scenÃ¡r pre vÃ½konnosÅ¥ systÃ©mu. Pre objednÃ¡vkovÃ½ systÃ©m je takÃ½to: V piatok poobede musia byÅ¥ vÅ¡etky prijatÃ© objednÃ¡vky spracovanÃ© pred uzÃ¡vierkou tak, aby boli doruÄenÃ© do pondelka. PÃ¤Å¥ minÃºt pred uzÃ¡vierkou prÃ­de 5000 objednÃ¡vok. OdpoveÄ na otÃ¡zku, Äi je systÃ©m schopnÃ½ spracovaÅ¥ zvÃ½Å¡enÃ½ poÄet objednÃ¡vok je veÄ¾mi nÃ¡roÄnÃ¡ keÄÅ¾e niektorÃ© komponenty, ktorÃ© majÃº zabezpeÄovaÅ¥ spracovanie eÅ¡te nie sÃº vytvorenÃ©. Jedinou moÅ¾nosÅ¥ou ako zodpovedaÅ¥ tÃºto otÃ¡zku s dostatoÄnou dÃ´veryhodnosÅ¥ou je vytvorenie prototypu â minimalistickej, zjednoduÅ¡enej verzie celej alebo len urÄitej Äasti aplikÃ¡cie, urÄenej na overenie niektorÃ½ch kritickÃ½ch aspektov vyvÃ­janÃ©ho systÃ©mu."
94,87,0.658,Sprievodca svetom vedeckÃ©ho publikovania,"Tieto kategÃ³rie sa mÃ´Å¾u rÃ´zne prekrÃ½vaÅ¥. VÃ¤ÄÅ¡ina pozornosti sa prirodzene sÃºstredÃ­ na znÃ¡me medzinÃ¡rodnÃ© tituly. Ale aj malÃ©, zdanlivo bezvÃ½znamnÃ© Äasopisy majÃº vo svete vedeckej komunikÃ¡cie svoje miesto, ak sÃº vedenÃ© poctivo. ZachytÃ¡vajÃº totiÅ¾ lokÃ¡lne informÃ¡cie, ktorÃ© by veÄ¾kÃ© Äasopisy odmietli uverejniÅ¥ (naprÃ­klad prvÃ½ vÃ½skyt konkrÃ©tneho druhu Å¾ivoÄÃ­cha alebo rastliny na Slovensku) a ktorÃ© by sa inak mohli Ä¾ahko stratiÅ¥, hoci pre budÃºcnosÅ¥ mÃ¡ vÃ½znam ich zaznamenaÅ¥. S rastÃºcim dopytom po vedeckom publikovanÃ­ a rozvojom elektronickÃ©ho priestoru sa svet Äasopisov dynamicky vyvÃ­ja (Roberts 1999). Koncom 20. storoÄia bola elektronickÃ¡ forma publikovania vÃ­tanÃ¡ ako nÃ¡dej na zÃ¡chranu pred problÃ©mom obmedzenÃ©ho priestoru na policiach kniÅ¾nÃ­c, no zÃ¡roveÅ k nej radovÃ­ prÃ­sluÅ¡nÃ­ci akademickej obce pristupovali"
265,165,0.658,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"â¢ VÅ¡imnime si pozÃ­ciu testovania v celom Å¾ivotnom cykle: je rozptÃ½lenÃ© po vÅ¡etkÃ½ch etapÃ¡ch. Vo vÅ¡eobecnom ponÃ­manÃ­ teda nejde o nejakÃº samostatnÃº etapu (Äasto sa vÅ¡ak v literatÃºre takto uvÃ¡dza, pozri napr. modely vÃ½voja softvÃ©ru v Kapitole 3). V sÃºvislosti s testovanÃ­m je tieÅ¾ dÃ´leÅ¾itÃ© rozliÅ¡ovaÅ¥ medzi testovanÃ­m v tomto, Å¡irÅ¡om, zmysle a testovanÃ­m ako vykonÃ¡vanÃ­m testov (konkrÃ©tne testovanie softvÃ©ru â jednotkovÃ©, funkcionÃ¡lne, integraÄnÃ©, ...). â¢ Niekedy mÃ´Å¾ete v literatÃºre naraziÅ¥ na pojmy Å¾ivotnÃ½ cyklus softvÃ©rovÃ©ho produktu (SPLC, software product life cycle) a Å¾ivotnÃ½ cyklus vÃ½voja softvÃ©ru (SDLC, software development life cycle). KÃ½m ten prvÃ½ pokrÃ½va vÅ¡etky etapy, ten druhÃ½ sa tÃ½ka fÃ¡zy vÃ½voja softvÃ©ru, teda pokrÃ½va len ÄasÅ¥ celÃ©ho Å¾ivota softvÃ©ru â od analÃ½zy po nasadenie. SÃºstreÄuje sa naÅ viac pozornosti, nakoÄ¾ko to priamo vyplÃ½va z podstaty softvÃ©rovÃ©ho inÅ¾iniera. My sa v tejto kapitole knihy zaoberÃ¡me celÃ½m Å¾ivotnÃ½m cyklom softvÃ©ru, v tej nasledujÃºcej, kde hovorÃ­me o modeloch vÃ½voja, sa vÅ¡ak uÅ¾ viac sÃºstreÄujeme na SDLC."
265,53,0.657,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ZÃ¡kaznÃ­k je osoba (alebo organizÃ¡cia), ktorÃ¡ mÃ¡ na vytvorenÃ­ a fungovanÃ­ softvÃ©ru primÃ¡rny zÃ¡ujem a zÃ¡roveÅ doÅ vkladÃ¡ svoje financie. PouÅ¾Ã­vateÄ¾ je osoba, ktorÃ¡ so softvÃ©rom interaguje. ZÃ¡kaznÃ­k nie je vÅ¾dy pouÅ¾Ã­vateÄ¾ softvÃ©ru, pouÅ¾Ã­vateÄ¾ nie je vÅ¾dy zÃ¡kaznÃ­k. ZÃ¡kladnÃ½ rozdiel je v prÃ­tomnosti zÃ¡ujmu na existenciÃ­ softvÃ©ru. ZÃ¡kaznÃ­k ho z definÃ­cie mÃ¡. PouÅ¾Ã­vateÄ¾ ho maÅ¥ mÃ´Å¾e, ale nemusÃ­. ExtrÃ©mnym prÃ­padom mÃ´Å¾e byÅ¥ softvÃ©r, keÄ je pouÅ¾Ã­vateÄ¾ prinÃºtenÃ½ softvÃ©r pouÅ¾Ã­vaÅ¥, aj keÄ sÃ¡m"
43,536,0.657,Objektovo orientovanÃ© programovanie v C++,"MnohÃ© Å¡tandardnÃ© funkcie sa ozÃ½vajÃº v prÃ­pade, ak im dodÃ¡me argument, ktorÃ½ nevedia pouÅ¾iÅ¥. Ako prÃ­klad pouÅ¾ijeme opÃ¤Å¥ triedu bitset. Jedna z verziÃ­ jej konÅ¡truktora je schopnÃ¡ nastaviÅ¥ prvky bitovej mnoÅ¾iny tak, Å¾e zadÃ¡me znakovÃ½ reÅ¥azec pozostÃ¡vajÃºci zo znakov â0â a â1â. NepozornÃ½ alebo zlomyseÄ¾nÃ½ uÅ¾Ã­vateÄ¾ vÅ¡ak mÃ´Å¾e zadaÅ¥ reÅ¥azec obsahujÃºci aj inÃ© znaky. Äo sa stane v takom prÃ­pade? KonÅ¡truktor triedy naÅ¡Å¥astie pamÃ¤tÃ¡ aj na takÃ©to prÃ­pady a so situÃ¡ciou si poradÃ­ tak, Å¾e oznÃ¡mi Å¡tandardnÃº vÃ½nimku typu invalid argument."
40,82,0.657,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Neradujme se ale pÅedÄasnÄ, nenÃ­ to tak jednoduchÃ©, jak to mÅ¯Å¾e vypadat na prvnÃ­ pohled. Za vÅ¡Ã­m jsou celkem sloÅ¾itÃ© rovnice a navÃ­c je zapotÅebÃ­ ke kostem pÅidat i âkloubyâ s danou (rozumnou) tuhostÃ­ a rozsahem pohybu, coÅ¾ je opÄt prÃ¡ce pro ÄlovÄka, nikoli pro poÄÃ­taÄ. NavÃ­c je dÅ¯leÅ¾itÃ© si uvÄdomit, Å¾e tyto rovnice nemusÃ­ mÃ­t jednoznaÄnÃ© ÅeÅ¡enÃ­: kdyÅ¾ zatÃ¡hnete za konec ruky nebo ocelovÃ©ho ramene, klouby se mohou do vÃ½slednÃ© pozice dostat vÃ­ce zpÅ¯soby. Ve hrÃ¡ch se takto ÅeÅ¡enÃ¡ inverznÃ­ kinematika pouÅ¾Ã­vÃ¡ Äasto u jeÅÃ¡bÅ¯ nebo jinÃ½ch strojÅ¯, kde nevadÃ­ (ba je pÅÃ­mo Å¾Ã¡doucÃ­) strojenÃ½ a strojovÃ½ vzhled tÄchto animacÃ­. O inverznÃ­ kinematice se pÃ­Å¡e ve vÄtÅ¡inÄ zÃ¡kladnÃ­ch uÄebnic o animacÃ­ch, napÅÃ­klad [23], [45]. DoporuÄit lze takÃ© text [20]. BlendovÃ¡nÃ­ animacÃ­ TypickÃ½m problÃ©mem, kterÃ½ se v rÃ¡mci animovÃ¡nÃ­ agentÅ¯ ÅeÅ¡Ã­, je blendovÃ¡nÃ­ (Äesky nÄkdy spojovÃ¡nÃ­, mixovÃ¡nÃ­) animacÃ­. Obvykle animace fungujÃ­ tak, Å¾e tÄlo agenta ovlÃ¡dÃ¡ prÃ¡vÄ jedna animace, agent napÅÃ­klad buÄ jde, nebo bÄÅ¾Ã­. Ale co v pÅÃ­padÄ, Å¾e agent pÅechÃ¡zÃ­ z chÅ¯ze do bÄhu? Mohli bychom si pÅipravit pÅechodovou animaci a pouÅ¾Ã­t ji po skonÄenÃ­ probÃ­hajÃ­cÃ­ho cyklu chÅ¯ze (pÅechodovÃ¡ animace by zaÄÃ­nala v zÃ¡kladnÃ­ pozici chÅ¯ze a konÄila v zÃ¡kladnÃ­ pozici bÄhu). To mÃ¡ tu nevÃ½hodu â kromÄ toho, Å¾e je to prÃ¡ce navÃ­c â, Å¾e to mÅ¯Å¾e dost dlouho trvat, coÅ¾ je problÃ©m, zvlÃ¡Å¡tÄ kdyÅ¾ se jednÃ¡ o hrÃ¡Äem ovlÃ¡danou postavu. TakÃ© mÅ¯Å¾eme problÃ©m ignorovat a prostÄ napÅÃ­klad z 10. snÃ­mku animace chÅ¯ze pÅejÃ­t na 11. snÃ­mek animace bÄhu. To je ÅeÅ¡enÃ­, kterÃ© bylo dÅÃ­v celkem bÄÅ¾nÃ©, ale tehdy byly takÃ© postavy hrubÅ¡Ã­ a monitory mÄly menÅ¡Ã­ rozliÅ¡enÃ­. Dnes je preferovanÃ½ zpÅ¯sob blendovÃ¡nÃ­, neboli prolÃ­nÃ¡nÃ­, animacÃ­. Pro kaÅ¾dou kost se vezmou hodnoty z obou animacÃ­ a vhodnÃ½m zpÅ¯sobem se zprÅ¯mÄrujÃ­ (zde se opÄt s vÃ½hodou vyuÅ¾ijÃ­ zmÃ­nÄnÃ© kvaterniony). JednÃ¡ se o vÃ¡Å¾enÃ½ prÅ¯mÄr, kde se vÃ¡hy mÄnÃ­ tak, Å¾e jejich souÄet je stÃ¡le 1; na zaÄÃ¡tku je vÃ¡ha animace, do kterÃ© pÅechÃ¡zÃ­me (v naÅ¡em pÅÃ­padÄ bÄhu), rovnÃ¡ 0, na konci je rovnÃ¡ nule vÃ¡ha vÃ½chozÃ­ animace (v naÅ¡em pÅÃ­padÄ chÅ¯ze). VÃ½sledkem je plynulÃ½ a vÄtÅ¡inou celkem vÄrohodnÃ½ pÅechod mezi obÄma animacemi. BlendovÃ¡nÃ­ animacÃ­ se dÃ¡ tÃ©Å¾ vyuÅ¾Ã­t k inverznÃ­ kinematice. V takovÃ©m pÅÃ­padÄ se postupuje tak, Å¾e grafici-animÃ¡toÅi vytvoÅÃ­ nÄkolik verzÃ­ stejnÃ© animace, napÅÃ­klad krok 30 cm dlouhÃ½ a krok 60 cm dlouhÃ½. Pokud pak budeme chtÃ­t udÄlat krok 40 cm dlouhÃ½, zprÅ¯mÄrujeme obÄ animace s vÃ¡hami 0,67 a 0,33. ObdobnÃ½ problÃ©m je skloubenÃ­ dvou rÅ¯znÃ½ch animacÃ­. ÅeknÄme, Å¾e mÃ¡me pÅedpÅipravenou animaci chÅ¯ze a otoÄenÃ­ hlavy. Mohli bychom je automaticky spojit? Animace chÅ¯ze se starÃ¡ o nohy a zbytek tÄla ji uÅ¾ tolik nezajÃ­mÃ¡. Animace otoÄenÃ­ hlavy zase hÃ½be pouze hlavou. Kosti, kterÃ© tyto animace rozhÃ½bÃ¡vajÃ­, se tedy nepÅekrÃ½vajÃ­ a spojenÃ­ animacÃ­ je pomÄrnÄ jednoduchÃ©: pustÃ­me animaci chÅ¯ze na nohy a animaci otoÄenÃ­ hlavy na hlavu a mÃ¡me agenta, co po nÃ¡s pokukuje, kdyÅ¾ prochÃ¡zÃ­ kolem. NÄkdy jde obdobu tohoto postupu aplikovat i tehdy, kdyÅ¾ se nÄkterÃ© kosti pÅekrÃ½vajÃ­: pouÅ¾ijeme na tyto kosti vhodnÄ zvolenÃ½ vÃ¡Å¾enÃ½ prÅ¯mÄr. VÃ­ce se o blendovÃ¡nÃ­ animacÃ­ lze doÄÃ­st napÅÃ­klad v [27], [19]."
130,153,0.656,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PodÄ¾a viacerÃ½ch Å¡tatistÃ­k aplikÃ¡cie typu informaÄnÃ½ch systÃ©mov niekoÄ¾konÃ¡sobne viackrÃ¡t ÄÃ­tajÃº Ãºdaje ako ich modifikujÃº alebo zapisujÃº. SÃºÄasnÃ¡ architektÃºra JVM a viacvrstvovÃ½ch aplikÃ¡ciÃ­ vyÅ¾aduje pri kaÅ¾dom sprÃ­stupnenÃ­ hodnoty klientovi prechod cez vÅ¡etky vrstvy aplikÃ¡cie, siete i JVM (aj v prÃ­pade Å¾e vÅ¡etky sÃºÄasti aplikÃ¡cie beÅ¾ia na rovnakom stroji). TakÃ©to volania vzdialenÃ½ch metÃ³d spÃ´sobujÃº oneskorenie reakciÃ­ aplikÃ¡cie. Äasto je vÃ½hodnejÅ¡ie zÃ­skaÅ¥ vÅ¡etky potrebnÃ© hodnoty volanÃ­m jedinej metÃ³dy a aÅ¾ u klienta pracovaÅ¥ s konkrÃ©tnymi hodnotami."
111,118,0.655,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"KvalitnejÅ¡ia podpora zÃ¡kaznÃ­kov PrÃ¡ca technickej podpory je nÃ¡roÄnÃ¡ na technickÃ© zruÄnosti, ako aj na trpezlivosÅ¥. NahrÃ¡vanie sedenÃ­ dokÃ¡Å¾e pomÃ´cÅ¥ pracovnÃ­kom technickej podpory s niektorÃ½mi z nasledujÃºcich problÃ©mov: â¢ Ako prinÃºtiÅ¥ pouÅ¾Ã­vateÄ¾a, aby poskytol celÃ½ kontext, aby som mohol vyrieÅ¡iÅ¥ jeho problÃ©m? â¢ Neexistuje lepÅ¡Ã­ spÃ´sob, ako vÅ¾dy Å¾iadaÅ¥ pouÅ¾Ã­vateÄ¾a o snÃ­mku obrazovky? â¢ PouÅ¾Ã­vatelia sÃº zvyÄajne uÅ¾ frustrovanÃ­, ak veci nefungujÃº tak, ako by mali. Ako mÃ´Å¾em od frustrovanÃ©ho Äloveka zÃ­skaÅ¥ viac informÃ¡ciÃ­? Pomocou jednoduchej identifikÃ¡cie pouÅ¾Ã­vateÄ¾a poskytne nahrÃ¡vanie sedenÃ­ vaÅ¡ej technickej podpore moÅ¾nosÅ¥ priamo zistiÅ¥, Äo nie je v poriadku, a podÄ¾a toho konaÅ¥. Dokonca existujÃº varianty nahrÃ¡vania sedenÃ­ v reÃ¡lnom Äase. PracovnÃ­k technickej podpory vidÃ­ v reÃ¡lnom Äase interakciu predmetnÃ©ho pouÅ¾Ã­vateÄ¾a s rozhranÃ­m a dokÃ¡Å¾e ho tak priamo navigovaÅ¥."
43,31,0.654,Objektovo orientovanÃ© programovanie v C++,"1.7 DediÄnosÅ¥ Ak sa pozrieme okolo nÃ¡s, zistÃ­me, Å¾e objekty reÃ¡lneho sveta sÃº hierarchicky usporiadanÃ©. To znamenÃ¡, Å¾e vÅ¡etky patria do nejakej skupiny, alebo ak chceme triedy, ktorÃ¡ sa Äalej mÃ´Å¾e deliÅ¥ na menÅ¡ie skupiny (podtriedy) charakteristickÃ© nejakou vlastnosÅ¥ou a s takÃ½mto delenÃ­m mÃ´Å¾eme postupovaÅ¥ Äalej do rÃ´znej hÄºbky. Ako prÃ­klad si mÃ´Å¾eme uviesÅ¥ triedu Å¾ivÃ½ch organizmov. Ich spoloÄnou vlastnosÅ¥ou mÃ´Å¾e byÅ¥ naprÃ­klad dÄºÅ¾ka Å¾ivota. V tejto triede je obsiahnutÃ¡ podtrieda Å¾ivoÄÃ­chov, ktorÃ© okrem dÄºÅ¾ky Å¾ivota mÃ´Å¾u byÅ¥ charakterizovanÃ© spÃ´sobom pohybu. Podtriedou Å¾ivoÄÃ­chov je hmyz, ktorÃ©ho ÄalÅ¡ou vlastnosÅ¥ou je poÄet nÃ´h. Medzi hmyzom mÃ´Å¾eme Äalej nÃ¡jsÅ¥ podtriedu motÃ½Ä¾ov, ktorÃ© okrem vÅ¡etkÃ½ch uvedenÃ½ch vlastnostÃ­ majÃº navyÅ¡e eÅ¡te farbu krÃ­del. VidÃ­me, Å¾e pri takomto delenÃ­ vÅ¾dy existujÃº nejakÃ© spoloÄnÃ© vlastnosti pre vÅ¡etky objekty danej triedy a kaÅ¾dÃ¡ ÄalÅ¡ia podtrieda je okrem tÃ½chto vlastnostÃ­ charakteristickÃ¡ nieÄim novÃ½m, Äo ju robÃ­ odliÅ¡nou. MÃ´Å¾eme teda povedaÅ¥, Å¾e objekt nejakej podtriedy mÃ¡ na jednej strane vlastnosti, ktorÃ© v podstate zdedil tÃ½m, Å¾e je aj prvkom nejakej vyÅ¡Å¡ie postavenej triedy, a na druhej strane mÃ¡ aj svoje Å¡peciï¬ckÃ© vlastnosti, ktorÃ© vyÅ¡Å¡ie postavenÃ¡ trieda nemÃ¡. Teda kaÅ¾dÃ½ motÃ½Ä¾ mÃ¡ urÄitÃ½ poÄet nÃ´h z toho dÃ´vodu, Å¾e je to hmyz, ale farbu krÃ­del mÃ¡ preto, Å¾e je motÃ½Ä¾, pretoÅ¾e nie kaÅ¾dÃ½ hmyz mÃ¡ aj krÃ­dla. Objektovo orientovanÃ© programovanie vyuÅ¾Ã­va takÃ©to hierarchickÃ© usporiadanie na prehÄ¾adnejÅ¡iu a efektÃ­vnejÅ¡iu organizÃ¡ciu programu. Tento princÃ­p, pri ktorom kaÅ¾dÃ¡ trieda mÃ´Å¾e maÅ¥ podtriedy, ktorÃ© sÃº nieÄÃ­m Å¡peciï¬ckÃ©, a pri ktorom prvky podtriedy preberajÃº vlastnosti triedy, z ktorej pÃ´vodne pochÃ¡dzajÃº, sa nazÃ½va dediÄnosÅ¥ (angl. inheritance). OpÃ¤Å¥ platÃ­, Å¾e dediÄnosÅ¥ je veÄ¾mi uÅ¾itoÄnÃ¡ najmÃ¤ pri rozsiahlych programoch, v ktorÃ½ch sa vyskytujÃº triedy so spoloÄnÃ½mi vlastnosÅ¥ami alebo s rovnakÃ½mi metÃ³dami. DediÄnosÅ¥ umoÅ¾Åuje tieto spoloÄnÃ© prvky deï¬novaÅ¥ na jednom mieste, v jednej rodiÄovskej triede, a v triedach, ktorÃ© sÃº od nej odvodenÃ©, sa potom uvÃ¡dzajÃº len novÃ© Ãºdaje a metÃ³dy, ktorÃ© rodiÄovskÃ¡ trieda neobsahuje. Takto sa skracuje"
122,112,0.653,Modelovanie softvÃ©ru,"7.2 OperÃ¡cia ako sluÅ¾ba Ani z ÃºplnÃ©ho vyjadrenia operÃ¡cie grafickÃ½m modelom nie je moÅ¾nÃ© vyÄÃ­taÅ¥ priamo jej zÃ¡mer. SkÃºsme sa nad tÃ½m zamyslieÅ¥ inak. Stroj vykonÃ¡va urÄitÃº operÃ¡ciu nad urÄitÃ½m predmetom, ale oÄakÃ¡va, Å¾e tento predmet bude maÅ¥ urÄitÃ© vlastnosti (vÃ¡ha, rozmery, tvar. . . ). MÃ¡ stroj samotnÃ½ preverovaÅ¥, Äi vÃ½robok spÄºÅa podmienky? Aj keby stroj bol takÃ½to robustnÃ½, pravdepodobne by mal vyÄlenenÃ½ predstupeÅ, ktorÃ½"
190,255,0.652,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"SkÃ´r ako sa zamyslÃ­m nad zabezpeÄenÃ­m kvality v softvÃ©rovom projekte treba pojem kvality definovaÅ¥. Norma ISO 8402 uvÃ¡dza: âPod kvalitou rozumieme sÃºhrn vlastnostÃ­ a charakteristÃ­k vÃ½robku procesu alebo sluÅ¾by, ktorÃ© preukazujÃº jeho schopnosÅ¥ splniÅ¥ urÄenÃ© alebo odvodenÃ© potreby.â Na prvÃ½ pohÄ¾ad je zrejmÃ©, Å¾e takÃ¡to definÃ­cia kvality je pomerne abstraktnÃ¡ a len mÃ¡lo vÃ½robkov s takouto definÃ­ciou kvality vystaÄÃ­. NaprÃ­klad skrutka je vÃ½robok, ktorÃ½ mÃ¡ pevne definovanÃ© poÅ¾iadavky. Ak zÃ¡kaznÃ­k poÅ¾aduje skrutku, ktorÃ¡ je vyrobenÃ¡ z urÄitÃ©ho materiÃ¡lu a v Å¥ahu udrÅ¾Ã­ stanovenÃ½ poÄet kilogramov, vie povedaÅ¥, ktorÃ¡ skrutka spÄºÅa jeho zÃ¡kladnÃ© potreby, a ktorÃ¡ jeho potreby nespÄºÅa. Ak sa pokÃºsime takÃºto jednoduchÃº Ãºvahu uplatniÅ¥ na softvÃ©rovÃ½ vÃ½robok, narazÃ­me na viacero problÃ©mov. Spomeniem dva najzÃ¡vaÅ¾nejÅ¡ie:"
301,0,0.652,Ako sprÃ¡vne vybraÅ¥ sprÃ¡vnych Ä¾udÃ­,"Ako sprÃ¡vne vybraÅ¥ sprÃ¡vnych Ä¾udÃ­ VytvoriÅ¥ dobrÃ½ a efektÃ­vny tÃ­m je pomerne nÃ¡roÄnÃ¡ Ãºloha. JednÃ½m z nÃ¡strojov, ktorÃ© to pomÃ¡hajÃº docieliÅ¥, je aj analÃ½za osobnostÃ­. V sÃºÄasnosti existuje niekoÄ¾ko rÃ´znych metodÃ­k, prostriedkov a prÃ­stupov na urÄenie charakterovÃ½ch vlastnostÃ­ Äloveka, jeho povahovÃ½ch ÄÅt a predpokladov. Na zÃ¡klade nich moÅ¾no urÄiÅ¥ zloÅ¾enie tÃ­mu a rozdeliÅ¥ jednotlivÃ© Ãºlohy v rÃ¡mci neho pre dosiahnutie Äo moÅ¾no najvÃ¤ÄÅ¡ej efektivity prÃ¡ce. ObjavujÃº sa vÅ¡ak aj nÃ¡zory, Å¾e tieto metÃ³dy majÃº svoje preukÃ¡zateÄ¾nÃ© nedostatky a obmedzenia. Pri vytvÃ¡ranÃ­ tÃ­mu by sme mali teda prihliadaÅ¥ aj na inÃ© vlastnosti, ako naprÃ­klad na vedomosti, zruÄnosti, predchÃ¡dzajÃºce skÃºsenosti a prax. Ani toto vÅ¡etko eÅ¡te nemusÃ­ zaruÄiÅ¥ vytvorenie ideÃ¡lneho tÃ­mu, ale pomÃ¡ha nÃ¡m predÃ­sÅ¥ niektorÃ½m neÅ¾iadÃºcim situÃ¡ciÃ¡m, ktorÃ© by mohli v softvÃ©rovom tÃ­me nastaÅ¥. Esej sa sÃºstreÄuje na niektorÃ© prÃ­stupy vyuÅ¾Ã­vanÃ© v tejto oblasti."
135,32,0.652,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ktorÃ¡ bola poda tohoto vzoru navrhnutÃ¡. PrÃ­kladom takejto inÅ¡tancie je (v zvyajnom stave) napr. prezident krajiny, t.j. maximÃ¡lne jedna osoba. Vzor UnikÃ¡t sa pouÅ¾Ã­va najmÃ¤ pri implementÃ¡cii tried riadiacich objektov aplikÃ¡cie, resp. objektov, ktorÃ© budÃº v aplikÃ¡cii jedinÃ© svojho druhu, iÅ¾e kaÅ¾dÃ½ takÃ½to objekt bude jedinou inÅ¡tanciou svojej triedy. Takmer kaÅ¾dÃ¡ aplikÃ¡cia pracuje napr. s jedinou myÅ¡ou, klÃ¡vesnicou a pod., kde kaÅ¾dÃ© z tÃ½chto zariadenÃ­ mÃ´Å¾e by reprezentovanÃ© jednÃ½m objektom. NehardvÃ©rovÃ½mi prÃ­kladmi mÃ´Å¾e by napr. sÃºbor dennÃ­ka aplikÃ¡cie â log, prÃ­padne manaÅ¾Ã©r okien aplikÃ¡cie a pod. PouÅ¾itie vzoru UnikÃ¡t rieÅ¡i aj problÃ©m s prÃ­stupom k takÃ½mto objektom. NapomÃ¡ha v jednoduchosti a moÅ¾nosti globÃ¡lneho prÃ­stupu k objektu vaka pouÅ¾itiu statickÃ½ch metÃ³d. StatickÃ© metÃ³dy triedy implementovanej na zÃ¡klade vzoru UnikÃ¡t zabezpeujÃº aj vytvÃ¡ranie konkrÃ©tnych objektov (v skutonosti jedinÃ©ho objektu) tejto triedy. Tak trieda samotnÃ¡ zaisuje existenciu prÃ¡ve jednej svojej inÅ¡tancie. PouÅ¾itÃ­m UnikÃ¡tu mÃ´Å¾me naprÃ­klad zÃ¡pis do dennÃ­ku aplikÃ¡cie realizova jednoducho vyÅ¾iadanÃ­m inÅ¡tancie dennÃ­ka a zÃ¡pisom do nej. i ide o prvÃ½ zÃ¡pis a treba inÅ¡tanciu a popritom aj reÃ¡lny sÃºbor vytvori, vyhodnocuje samotnÃ¡ trieda a na zÃ¡klade toho vrÃ¡ti existujÃºcu alebo vytvorÃ­ novÃº inÅ¡tanciu. UnikÃ¡t je teda charakterizovanÃ½:"
369,329,0.652,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"nizÃ¡cie vypomohli inÃ½m Ä¾uÄom, ktorÃ­ tÃºto pomoc potrebujÃº.24 PodobnosÅ¥ je aj z hÄ¾adiska aplikaÄnÃ½ch architektÃºr softvÃ©rovÃ½ch systÃ©mov. Pri vÃ½plate Å¡tÃ¡tnych prÃ­spevkov25 sa aplikujÃº rovnakÃ© vzory ako pri zmluvnom a zÃ¡konnom poistenÃ­: ZÃ¡vÃ¤zok, NÃ¡rokovanie zÃ¡vÃ¤zku, Platba zÃ¡vÃ¤zku, SpÃ´soby platieb zÃ¡vÃ¤zku a ÄalÅ¡ie. OdliÅ¡nosÅ¥ou je iba to, Å¾e sa aplikujÃº v âopaÄnom gardeâ: opakujÃºci sa nÃ¡rok nie je nÃ¡rokom organizÃ¡cie, ktorÃ¡ prevÃ¡dzkuje softvÃ©rovÃ½ systÃ©m, ale druhej ÃºÄastnÃ­ckej strany a finanÄnÃ© plnenie znamenÃ¡ pre tÃºto organizÃ¡ciu vÃ½daj finanÄnÃ½ch prostriedkov. Na to, aby poberateÄ¾ dostÃ¡val prÃ­spevky Å¡tÃ¡tnej sociÃ¡lnej podpory, musÃ­ podaÅ¥ Å¾iadosÅ¥ na prÃ­sluÅ¡nÃº inÅ¡titÃºciu26. Å½iadosÅ¥ prechÃ¡dza posÃºdenÃ­m, Äi Å¾iadateÄ¾ spÄºÅa zÃ¡konom stanovenÃ© podmienky. Ak sÃº splnenÃ© zÃ¡konom stanovenÃ© podmienky, Å¾iadosÅ¥ sa schvÃ¡li. Po schvÃ¡lenÃ­ Å¾iadosti sa poberateÄ¾ovi vyplatÃ­ prÃ­sluÅ¡nÃ½ prÃ­spevok (v prÃ­pade jednorÃ¡zovÃ©ho prÃ­spevku) alebo sa mu prÃ­spevok vyplÃ¡ca v pravidelnÃ½ch obdobiach, zvyÄajne raz mesaÄne (pri opakovanÃ½ch prÃ­spevkoch). OpakovanÃ© prÃ­spevky sa vyplÃ¡cajÃº do urÄenÃ©ho obdobia (na Slovensku najviac na dobu jednÃ©ho roka), keÄ sa vyÅ¾aduje podanie novej Å¾iadosti. PrÃ­sluÅ¡nÃ¡ inÅ¡titÃºcia zvyÄajne poÄÃ­ta vÃ½Å¡ky vÅ¡etkÃ½ch prÃ­spevkov raz mesaÄne k urÄenÃ©mu dÃ¡tumu. ZÃ¡kladnÃ½ model prÃ­spevkov Å¡tÃ¡tnej sociÃ¡lnej podpory poskytuje obr. 5.10. UvedenÃ½ model vznikol Å¡pecializÃ¡ciou niekoÄ¾kÃ½ch vzorov. PrvÃ½m z nich je vzor ZÃ¡vÃ¤zok (obr. 2.51). Ãlohu zÃ¡vÃ¤zku plnÃ­ trieda Å½iadosÅ¥ o prÃ­spevok, ktorÃ¡ je generalizÃ¡ciou jednotlivÃ½ch typov Å¾iadostÃ­ o Å¡tÃ¡tne prÃ­spevky: prÃ­davky na deti, rodiÄovskÃ½ prÃ­spevok, prÃ­spevok pri narodenÃ­ dieÅ¥aÅ¥a a ÄalÅ¡ie. ÃÄastnÃ­k vystupuje vzhÄ¾adom k Å¾iadosti v dvoch pozÃ­ciÃ¡ch: ako ÃºÄastnÃ­k zÃ¡vÃ¤zku (Å¾iadateÄ¾, resp. poberateÄ¾) a ako predmet zÃ¡vÃ¤zku (posudzovanÃ¡ osoba na Å¾iadosti). V druhej pozÃ­cii mÃ´Å¾e na Å¾iadosti vystupovaÅ¥ viacero ÃºÄastnÃ­kov v rÃ´znych rolÃ¡ch, vrÃ¡tane moÅ¾nosti viacerÃ½ch ÃºÄastnÃ­kov v rovnakej roli (naprÃ­klad Å¾iadosÅ¥ o prÃ­davky na deti mÃ´Å¾e obsahovaÅ¥ viacero detÃ­). Trieda Ãdaje o osobe je Å¡pecializÃ¡ciou triedy PoloÅ¾ka zÃ¡vÃ¤zku a obsahuje Å¡pecifickÃ© Ãºdaje o osobe v danej Å¾iadosti (naprÃ­klad prÃ­jem osoby sa mÃ´Å¾e poÄÃ­taÅ¥ rÃ´znym spÃ´sobom v zÃ¡vislosti od typu prÃ­spevku a roly posudzovanej osoby). DruhÃ½m pouÅ¾itÃ½m vzorom je NÃ¡rokovanie zÃ¡vÃ¤zku (obr. 3.9). OpakujÃºcim sa nÃ¡rokom je prÃ­spevok na prÃ­sluÅ¡nÃ© obdobie. Z dÃ´vodu uniformnosti a jednotnÃ©ho termÃ­nu vÃ½platy prÃ­spevkov sa inÅ¡tancia tejto triedy generuje aj v prÃ­pade jednorazovÃ½ch prÃ­spevkov. U jednÃ©ho typu prÃ­spevku (prÃ­davky na deti) sa vytvÃ¡rajÃº aj poloÅ¾ky nÃ¡roku vo forme prÃ­spevkov na osoby (prÃ­davok na kaÅ¾dÃ© dieÅ¥a). TretÃ­m aplikovanÃ½m vzorom je ZÃºÄtovanie zÃ¡vÃ¤zkov (obr. 3.27). Jeden poberateÄ¾ je Äasto poberateÄ¾om viacerÃ½ch typov prÃ­spevkov (naprÃ­klad prÃ­spevok na dieÅ¥a a rodiÄovskÃ½ prÃ­spevok a/alebo prÃ­spevok na bÃ½vanie). Z dÃ´vodu Å¡etrenia bankovÃ½ch a poÅ¡tovÃ½ch poplatkov sa preto tieto prÃ­spevky (plus doplatky za predchÃ¡dzajÃºce obdobia27) na jednÃ©ho"
115,171,0.651,Algebra a diskrÃ©tna  matematika,"(b) Urobte prehÄ¾adÃ¡vanie do Å¡Ã­rky a do hÄºbky, so Å¡tartom v miestnosti 1 a cieÄ¾om v miestnosti 8. Grafy prehÄ¾adÃ¡vania do Å¡Ã­rky a do hÄºbky, so Å¡tartom v miestnosti 1, keÄ cieÄ¾om je prÃ­sÅ¥ do miestnosti 8. UvÃ¡dzame kostru vytvÃ¡ranÃº pri prehÄ¾adÃ¡vanÃ­. Pri prehÄ¾adÃ¡vanÃ­ do Å¡Ã­rky â grafy (A), (B) aj do hÄºbky â grafy (C), (D) uvÃ¡dzame najprv graf, kedy prehÄ¾adÃ¡vame miestnosti podÄ¾a poradia ânajprv vÄ¾avoâ, ako druhÃ½ uvÃ¡dzame graf pre poradie ânajprv vpravoâ:"
369,117,0.651,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V niektorÃ½ch prÃ­padoch bÃ½va dÃ´leÅ¾itÃ© rozlÃ­Å¡enie medzi zloÅ¾enÃ½m a elementÃ¡rnym objektom. V takomto prÃ­pade sa uplatnÃ­ nepriama rekurzia (obr. 2.32). Zoskupovanie objektov nemusÃ­ byÅ¥ iba typu celok-ÄasÅ¥, ale tieÅ¾ typu mnoÅ¾ina-prvok. Objekty moÅ¾no zoskupovaÅ¥ do rÃ´znych kolekciÃ­ (obr. 2.33). PrÃ­kladom je vÃ½robnÃ¡ dÃ¡vka, v rÃ¡mci ktorej sa vyrÃ¡ba naraz urÄitÃ© mnoÅ¾stvo vÃ½robkov, naprÃ­klad automobily podÄ¾a farebnÃ©ho prevedenia alebo stupÅa vÃ½bavy. TretÃ­m typom relÃ¡cie je sÃºvislosÅ¥ objektov. SÃºvislosÅ¥ objektov sa obvykle vyjadruje konkrÃ©tnymi relÃ¡ciami s ich sÃ©mantikou. RekurzÃ­vnu asociÃ¡ciu schematicky naÄrtÃ¡va obr. 2.34. SÃºvislosÅ¥ mÃ´Å¾e niekedy predpisovaÅ¥ aj mnoÅ¾stvo objektov na kaÅ¾dÃº rolu v relÃ¡cii (obr. 2.35)."
190,358,0.651,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KaÅ¾dÃ¡ snaha, aktivita Äi samotnÃ¡ prÃ¡ca so sebou prinÃ¡Å¡a urÄitÃº ÃºroveÅ nejasnostÃ­ ohÄ¾adne toho, ako sa bude postupne vyvÃ­jaÅ¥, resp. akÃ© vÃ½sledky prinesie. Podobne je to aj pri vÃ½voji softvÃ©rovÃ©ho systÃ©mu. S kaÅ¾dÃ½m ÄalÅ¡Ã­m krokom vÃ½voja, s kaÅ¾dÃ½m novÃ½m nÃ¡vrhom a podnetom sÃºvisia rizikÃ¡, ktorÃ© tieto kroky sprevÃ¡dzajÃº. Samozrejme, vÅ¡eobecnou snahou, moÅ¾no rizikÃ¡ eliminovaÅ¥, resp. Äo najviac obmedziÅ¥. AvÅ¡ak ÃºplnÃ© vyradenie vÅ¡etkÃ½ch moÅ¾nÃ½ch rizÃ­k je takmer nemoÅ¾nÃ©. Preto je nutnÃ© pozrieÅ¥ sa na rizikovÃ© oblasti z druhej strany, to znamenÃ¡, snaÅ¾iÅ¥ sa ich odhadnÃºÅ¥ a predvÃ­daÅ¥ a nÃ¡sledne ich Äo najefektÃ­vnejÅ¡ie riadiÅ¥. PodÄ¾a mÃ´jho nÃ¡zoru je oveÄ¾a lepÅ¡ie maÅ¥ v projekte viac rizÃ­k, nad ktorÃ½mi mÃ¡me kontrolu, ako menej takÃ½ch rizÃ­k, o ktorÃ½ch nevieme. V kontexte tÃ­movÃ©ho projektu (projekt na univerzite, ktorÃ½ mÃ¡ spravidla Å¡esÅ¥ Älenov) nadobÃºda oblasÅ¥ rizÃ­k ÄalÅ¡ie rozmery spojenÃ© s manaÅ¾mentom tÃ­mu a komunikÃ¡ciou v tÃ­me. VÃ¤ÄÅ¡ina softvÃ©rovÃ½ch projektov sa vyvÃ­ja v podmienkach, ktorÃ© nie sÃº vÅ¾dy Ãºplne predvÃ­dateÄ¾nÃ© a v ktorÃ½ch existuje veÄ¾a faktorov, ktorÃ© mÃ´Å¾u ovplyvniÅ¥ vÃ½slednÃ½ produkt. Projekt povaÅ¾uje za ÃºspeÅ¡nÃ½ vtedy, ak spÄºÅa poÅ¾iadavky (funkcionalitu, spoÄ¾ahlivosÅ¥, udrÅ¾ovateÄ¾nosÅ¥, rozÅ¡Ã­riteÄ¾nosÅ¥, efektivita, schopnosÅ¥ zaÄleniÅ¥ sa do vÃ¤ÄÅ¡ieho projektu a schopnosÅ¥ prevÃ¡dzkovaÅ¥ systÃ©m v danÃ½ch podmienkach), dokonÄÃ­ sa v danom termÃ­ne a v rÃ¡mci stanovenÃ©ho rozpoÄtu [6]. VÃ½skum v [4], ukazuje, Å¾e len jedna Å¡estina vÅ¡etkÃ½ch projektov bola ukonÄenÃ¡ naÄas a v rÃ¡mci danÃ©ho rozpoÄtu, jedna tretina projektov bola zruÅ¡enÃ¡ a viac ako polovica priniesla len obmedzenÃ© vÃ½sledky. V Å¡tÃºdii [3] sa ukÃ¡zalo, Å¾e hlavnÃº Ãºlohu vo vysokej neÃºspeÅ¡nosti projektov zohrÃ¡vajÃº projektovÃ­ manaÅ¾Ã©ri, ktorÃ­ v prvÃ½ch fÃ¡zach projektu nedostatoÄne zohÄ¾adÅujÃº moÅ¾nÃ© rizikÃ¡ vyplÃ½vajÃºce z projektu. Po- NeÃºspeÅ¡nosÅ¥ tvrdzuje to tieÅ¾ Å¡tatistika, ktorÃ¡ ukazuje, Å¾e asi tretina projektov sa ukonÄÃ­ projektov Äasto s neÃºspechom aÅ¾ vo fÃ¡ze implementÃ¡cie. Preto je dnes jasnÃ©, Å¾e manaÅ¾- spÃ´sobujÃº projektovÃ­ manaÅ¾Ã©ri ment rizÃ­k musÃ­ byÅ¥ samozrejmou sÃºÄasÅ¥ou prÃ¡ce v tÃ­movom projekte."
184,180,0.65,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"SoftvÃ©rovÃ© technolÃ³gie sÃº veÄ¾mi rÃ½chle a neustÃ¡le meniace sa odvetvie. Tak ako sa zlepÅ¡ujÃº naÅ¡e inÅ¾inierske vedomosti, metÃ³dy a nÃ¡stroje v tejto oblasti, zlepÅ¡uje sa aj naÅ¡a schopnosÅ¥ pochopiÅ¥ a rieÅ¡iÅ¥ stÃ¡le zloÅ¾itejÅ¡ie a zloÅ¾itejÅ¡ie problÃ©my. To znamenÃ¡, Å¾e vytvÃ¡rame âlepÅ¡ie a vÃ¤ÄÅ¡ieâ aplikÃ¡cie na hrane naÅ¡ich neustÃ¡le sa zlepÅ¡ujÃºcich inÅ¾inierskych zruÄnostÃ­. Preto nie je prekvapujÃºce, Å¾e mnohÃ­ z odvetvia nepociÅ¥ujÃº prÃ­nos novÃ½ch a zlepÅ¡enÃ½ch vÃ½vojovÃ½ch prÃ­stupov ale majÃº pocit, Å¾e stojÃ­me na mieste. Je veÄ¾mi dÃ´leÅ¾itÃ© zamyslieÅ¥ sa nad tÃ½m, akÃ© budÃº hlavnÃ© vÃ½zvy a problÃ©my tvorcov softvÃ©rovÃ½ch systÃ©mov v najbliÅ¾Å¡Ã­ch rokoch. VeÄ¾mi pravdepodobne bude pokraÄovaÅ¥ nÃ¡rast zloÅ¾itosti obchodnÃ½ch aplikÃ¡ciÃ­ mnohÃ½mi smermi. ZloÅ¾itosÅ¥ treba preto chÃ¡paÅ¥ ako mnoho-rozmernÃ½ atribÃºt. KtorÃ½ aspekt zloÅ¾itosti vÅ¡ak bude ten, ktorÃ½ zÃ¡sadne ovplyvnÃ­ dizajn a vÃ½voj novej generÃ¡cie softvÃ©rovÃ½ch aplikÃ¡ciÃ­? Z pohÄ¾adu firiem ovplyvnia prÃ¡cu softvÃ©rovÃ½ch inÅ¾inierov v najbliÅ¾Å¡ej dekÃ¡de tieto aspekty: Â SpoloÄnosti budÃº od softvÃ©rovej infraÅ¡truktÃºry vyÅ¾adovaÅ¥ podporu Äoraz komplexnejÅ¡Ã­ch obchodnÃ½ch procesov, Äo povedie k zvÃ½Å¡enej efektivite organizÃ¡cie a znÃ­Å¾eniu nÃ¡kladov. Â V mnohÃ½ch spoloÄnostiach si intenzita zmien v prostredÃ­ obchodu vyÅ¾iada Ä¾ahko a rÃ½chlo adaptovateÄ¾nÃ© softvÃ©rovÃ© systÃ©my. Â SpoloÄnosti sa na jednej strane vÅ¾dy usilovali a budÃº usilovaÅ¥ o zvÃ½Å¡enie prÃ­nosu softvÃ©ru a sÃºÄasne na strane druhej o znÃ­Å¾enie nÃ¡kladov na softvÃ©r. V ÄalÅ¡ej Äasti textu postupne preberieme jednotlivÃ© body spolu s ich moÅ¾nÃ½mi dÃ´sledkami, Å¡peciÃ¡lne z pohÄ¾adu softvÃ©rovej architektÃºry."
190,416,0.649,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"prÃ¡cu navyÅ¡e sa stretne s odporom. Je to vÅ¡ak cesta, ktorÃ¡ je hodnÃ¡ toho, aby sme sa na Åu vydali. Na jej konci totiÅ¾ ÄakÃ¡ kvalitnejÅ¡Ã­ softvÃ©r a vÃ¤ÄÅ¡ia produktivita. VynaloÅ¾enÃ¡ nÃ¡maha sa vrÃ¡ti niekoÄ¾konÃ¡sobne. Ak sa vrÃ¡time spÃ¤Å¥ k pÃ´vodnej otÃ¡zke, ako vnÃ­ma pouÅ¾Ã­vateÄ¾ kvalitu, zistÃ­me, Å¾e tÃ¡to esej odpovedÃ¡ len na polovicu otÃ¡zky â ako zabezpeÄiÅ¥ stabilitu softvÃ©ru. Na druhÃº polovicu treba hÄ¾adaÅ¥ odpoveÄ najmÃ¤ v lepÅ¡ej komunikÃ¡cii s pouÅ¾Ã­vateÄ¾mi tak, aby sme tvorili nielen stabilnÃ½ softvÃ©r, ale najmÃ¤ pouÅ¾iteÄ¾nÃ½ softvÃ©r. TakÃ½, ktorÃ½ bude pomÃ¡haÅ¥ a bude sa naÅ daÅ¥ spoÄ¾ahnÃºÅ¥."
393,131,0.649,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"TradiÄnÃ© grafovÃ© algoritmy sa skÃºmajÃº aj v odbore informatiky. KeÄÅ¾e na web sa dÃ¡ pozeraÅ¥ ako na orientovanÃ½ graf s mnoÅ¾inou uzlov (strÃ¡nok) prepojenÃ½ch orientovanÃ½ch hranami (odkazmi), dajÃº sa niektorÃ© grafovÃ© algoritmy pouÅ¾iÅ¥ vo webovÃ½ch aplikÃ¡ciÃ¡ch. PrvÃ¡ kategÃ³ria grafovÃ½ch prehÄ¾adÃ¡vacÃ­ch algoritmov obsahuje jednoduchÃ© algoritmy, ako naprÃ­klad hÄ¾adanie do Å¡Ã­rky a hÄ¾adanie do hÄºbky. Tieto algoritmy sa oznaÄujÃº ako"
135,111,0.649,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.1.4 NÃ¡vrh distribuovanej aplikÃ¡cie NÃ¡vrh distribuovanej aplikÃ¡cie je z viacerÃ½ch dÃ´vodov komplikovanejÅ¡Ã­ ako nÃ¡vrh centralizovanej aplikÃ¡cie vykonÃ¡vanej v homogÃ©nnom prostredÃ­ jednÃ©ho vÃ½potovÃ©ho uzla. Uvedieme niekoko zÃ¡kladnÃ½ch aspektov, ktorÃ© distribuovanej aplikÃ¡cii pridÃ¡vajÃº na zloÅ¾itosti: vÃ½voj softvÃ©ru, plÃ¡novanie zdrojov, sprÃ¡va chÃ½b, pouÅ¾Ã­vanie nehomogÃ©nnych prostredÃ­ a problematickou sa javÃ­ aj otÃ¡zka bezpenosti distribuovanÃ©ho systÃ©mu. VÃ½voj softvÃ©ru SamotnÃ¡ zloÅ¾itos vÃ½voja softvÃ©ru je asto spojenÃ¡ so skutonosou, Å¾e neexistuje moÅ¾nos ladenia distribuovanej aplikÃ¡cie, ako to poznÃ¡me pri centralizovanÃ½ch systÃ©moch. VÃ½voj aplikÃ¡cie je spojenÃ½ s problÃ©mami ako napr. vzdialenÃ¡ komunikÃ¡cia, transakcie, udalosti, pomenovÃ¡vanie (angl. naming, t.j. priraovanie loveku zrozumitenÃ½ch mien entitÃ¡m v distribuovanom systÃ©me) i bezpenos. PlÃ¡novanie zdrojov PlÃ¡novanie zdrojov v distribuovanej aplikÃ¡cii je nÃ¡ronÃ© na plÃ¡novanie jednotlivÃ½ch aktivÃ­t. Vo vÃ¤Å¡ine prÃ­padov sa totiÅ¾ softvÃ©rovÃ¡ sÃºiastka prirauje na vykonanie konkrÃ©tnemu hardvÃ©ru aÅ¾ v ase vykonÃ¡vania programu. Pri plÃ¡novanÃ­ zdrojov je preto potrebnÃ© bra ohad na poÅ¾iadavky sluÅ¾ieb a sÃºiastok a tieÅ¾ na moÅ¾nosti jednotlivÃ½ch hardvÃ©rovÃ½ch sÃºiastok. SprÃ¡va chÃ½b SprÃ¡va chÃ½b v distribuovanom systÃ©me je odliÅ¡nÃ¡ od sprÃ¡vy chÃ½b v centralizovanom systÃ©me najmÃ¤ tÃ½m, Å¾e v prÃ­pade neoÅ¡etrenej chyby v centralizovanom systÃ©me dÃ´jde k pÃ¡du celÃ©ho systÃ©mu, na druhej strane v prÃ­pade distribuovanej aplikÃ¡cie pri zlyhanÃ­ jednej sÃºiastky alebo procesu v nejakom uzle nedÃ´jde k pÃ¡du celej aplikÃ¡cie. Dokonca napr. neukonenie niektorÃ©ho z procesov mÃ´Å¾e spÃ´sobi zlyhanie inej, na prvÃ½ pohad s danÃ½m procesom nesÃºvisiacej, sÃºiastky. Z tohto dÃ´vodu nemoÅ¾no v distribuovanom systÃ©me zanedba mechanizmus sprÃ¡vy chÃ½b."
43,53,0.648,Objektovo orientovanÃ© programovanie v C++,"2.4 C a C++ UÅ¾ sme si povedali, Å¾e jazyk C++ bol navrhnutÃ½ tak, aby bol Äo najviac kompatibilnÃ½ s jazykom C. Samozrejme, C++ mÃ¡ oveÄ¾a Å¡irÅ¡iu funkÄnosÅ¥, ale zÃ¡kladnÃ© veci ako spÃ´sob vytvÃ¡rania premennÃ½ch, zÃ¡kladnÃ© dÃ¡tovÃ© typy, prÃ­kazy pre cykly a podmienky, vytvÃ¡ranie funkciÃ­ a pod. by sa od C nemali lÃ­Å¡iÅ¥. NavyÅ¡e vÅ¡etky programy napÃ­sanÃ© v C by mali byÅ¥ skompilovateÄ¾nÃ© aj kompilÃ¡torom C++. V skutoÄnosti tÃ¡to kompatibilita nie je stopercentnÃ¡, hoci rozdiely sÃº len minimÃ¡lne. Uvedieme si najdÃ´leÅ¾itejÅ¡ie z nich, s ktorÃ½mi sa mÃ´Å¾e stretnÃºÅ¥ aj zaÄÃ­najÃºci programÃ¡tor v jednoduchÃ½ch programoch. Pri hlbÅ¡om spoznÃ¡vanÃ­ C++ sa dÃ¡ objaviÅ¥ eÅ¡te niekoÄ¾ko ÄalÅ¡Ã­ch [5]. â¢ C++ mÃ¡ medzi zÃ¡kladnÃ½mi dÃ¡tovÃ½mi typmi novÃ½ typ bool. Ide o typ, ktorÃ½ predstavuje pravdivostnÃº hodnotu a mÃ´Å¾e nadobÃºdaÅ¥ len dve hodnoty true a false. â¢ V C++ musÃ­ maÅ¥ kaÅ¾dÃ¡ funkcia urÄenÃ½ nÃ¡vratovÃ½ typ. V C to tak nemusÃ­ byÅ¥, ak pri nejakej funkcii nÃ¡vratovÃ½ typ neuvedieme, automaticky sa predpokladÃ¡ typ int. Mohli by sme teda napÃ­saÅ¥ sucet(int a, int b) return a+b;"
190,325,0.647,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"menÅ¡Ã­ tÃ­m (5-6 Älenov), nemoÅ¾nosÅ¥ vykonÃ¡vaÅ¥ zmeny v personÃ¡lnej Å¡truktÃºre (pribraÅ¥ ÄalÅ¡ieho Älena do tÃ­mu), pre vÃ¤ÄÅ¡inu Älenov sa jednÃ¡ o prvÃ½ projekt, v ktorom sa podieÄ¾ajÃº na jeho manaÅ¾mente, motivÃ¡ciou Älenov tÃ­mu nie je ich finanÄnÃ© ohodnotenie, projekt menÅ¡ieho rozsahu, zabezpeÄenÃ© stretnutia s objednÃ¡vateÄ¾om projektu (minimÃ¡lne raz za tÃ½Å¾deÅ), striktne stanovenÃ½ termÃ­n dokonÄenia projektu; nedodrÅ¾anie termÃ­nu sa povaÅ¾uje za neÃºspech celÃ©ho projektu, nemoÅ¾nosÅ¥ vyuÅ¾Ã­vania externÃ©ho zabezpeÄovania Ãºloh, silne obmedzenÃ½ rozpoÄet."
135,250,0.647,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â NÃ­zka odolnos voi chybÃ¡m. SystÃ©m obsahuje vea sÃºastÃ­ a kaÅ¾dÃ¡ je dÃ´leÅ¾itÃ¡. Chyba v ktorejkovek asti spÃ´sobÃ­ nefunknos celÃ©ho systÃ©mu. SprostredkovateskÃ© systÃ©my sa vyuÅ¾Ã­vajÃº vÅ¡ade tam, kde je potrebnÃ© zabezpei odozvu na kaÅ¾dÃº poÅ¾iadavku. Dnes sÃº ale postupne nahrÃ¡dzanÃ© webovÃ½mi sluÅ¾bami, ktorÃ© majÃº vÃ¤Å¡inu vÃ½hod uvÃ¡dzanÃ½ch pre sprostredkovateskÃ© systÃ©my a nemusia ma Å¾iadnu z uvedenÃ½ch nevÃ½hod."
265,401,0.647,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"AkÃ¡ je zÃ¡kladnÃ¡ charakteristika komponentovÃ©ho prÃ­stupu k vÃ½voju softvÃ©ru? PreÄo je vÃ½hodnÃ© ho pouÅ¾iÅ¥? Skladanie softvÃ©ru z existujÃºcich sÃºÄiastok v Äo najvÃ¤ÄÅ¡ej miere. ReÃ¡lny vÃ½voj sa potom prenÃ¡Å¡a do vytvÃ¡rania prepojenÃ­ medzi sÃºÄiastkami. MotivÃ¡ciou k takÃ©muto prÃ­stupu je samozrejme Ãºspora Ãºsilia, je vÅ¡ak vÅ¾dy treba zvÃ¡Å¾iÅ¥, Äi nÃ¡m existujÃºce sÃºÄiastky vyhovujÃº, Äi budeme schopnÃ­ ich v prÃ­pade chÃ½b opraviÅ¥ a Äi nÃ¡s to vÅ¡etko nebude stÃ¡Å¥ viac Ãºsilia, neÅ¾ vytvorenie softvÃ©ru âna zelenej lÃºkeâ."
43,277,0.647,Objektovo orientovanÃ© programovanie v C++,"V kapitole 1 sme si hovorili, Å¾e polymorï¬zmus alebo mnohotvÃ¡rnosÅ¥ je princÃ­p, ktorÃ½ nÃ¡m umoÅ¾Åuje nazvaÅ¥ jednÃ½m menom viacero rovnako zameranÃ½ch funkciÃ­ â ako vyplÃ½va zo samotnÃ©ho nÃ¡zvu, jedna funkcia mÃ´Å¾e maÅ¥ viacero âtvÃ¡rÃ­â alebo podÃ´b. JednotlivÃ© varianty funkcie vykonÃ¡vajÃº principiÃ¡lne rovnakÃº ÄinnosÅ¥, majÃº vÅ¡ak rÃ´zny kÃ³d. KvÃ´li jednoznaÄnej odlÃ­Å¡iteÄ¾nosti, ktorÃº si podrobnejÅ¡ie rozoberieme neskÃ´r, platÃ­ pravidlo, Å¾e varianty jednej funkcie sa musia lÃ­Å¡iÅ¥ v parametroch â Äi uÅ¾ ide o ich typ alebo poÄet. Inak vÅ¡ak, Äo sa tÃ½ka rozdielov medzi jednotlivÃ½mi variantmi, nie sÃº danÃ© nijakÃ© podmienky. OdliÅ¡nosti mÃ´Å¾u byÅ¥ nepatrnÃ©, naprÃ­klad mÃ´Å¾e Ã­sÅ¥ len o typ jednÃ©ho parametra, inokedy vÅ¡ak mÃ´Å¾e byÅ¥ odliÅ¡nÃ½ aj celÃ½ obsah funkcie. Ãlohou polymorï¬zmu je sprehÄ¾adniÅ¥ kÃ³d, obmedziÅ¥ mnoÅ¾stvo rÃ´znych pomenovanÃ­ v prÃ­pade charakterovo prÃ­buznÃ½ch funkciÃ­ a zabezpeÄiÅ¥ Äo najvÃ¤ÄÅ¡iu ï¬exibilitu a Ä¾ahkÃº rozÅ¡Ã­riteÄ¾nosÅ¥ programu. Polymorï¬zmus je logickÃ¡ zÃ¡leÅ¾itosÅ¥ a jedinÃ©, Äo kompilÃ¡tor dokÃ¡Å¾e skontrolovaÅ¥, je jednoznaÄnÃ¡ odlÃ­Å¡iteÄ¾nosÅ¥ jednotlivÃ½ch variantov. VÅ¡etko ostatnÃ© zÃ¡visÃ­ vÃ½hradne od programÃ¡tora. Ak by sa vÅ¡etky funkcie v programe, resp. vÅ¡etky metÃ³dy v rÃ¡mci jednej triedy (okrem konÅ¡truktora) lÃ­Å¡ili v poÄte alebo type parametrov, kompilÃ¡tor pokojne dovolÃ­ programÃ¡torovi prideliÅ¥ vÅ¡etkÃ½m rovnakÃ© nÃ¡zvy. To by samozrejme nebolo najÅ¡ikovnejÅ¡ie usporiadanie programu. Rovnako by sa mali volaÅ¥ skutoÄne len funkcie s rovnakÃ½m alebo podobnÃ½m ÃºÄelom a mieru podobnosti musÃ­ zvÃ¡Å¾iÅ¥ tvorca programu vo fÃ¡ze jeho analÃ½zy alebo dizajnu. Polymorï¬zmus sa tÃ½ka vÅ¡etkÃ½ch funkciÃ­ v programe, vrÃ¡tane konÅ¡truktorov tried, jedinou vÃ½nimkou sÃº deÅ¡truktory, ktorÃ© nemajÃº nijakÃ© parametre, a preto nie je moÅ¾nosÅ¥ navrhnÃºÅ¥ dva deÅ¡truktory, ktorÃ© by sa lÃ­Å¡ili v poÄte alebo type parametrov. Treba eÅ¡te poznamenaÅ¥, Å¾e polymorï¬zmus nie je vÃ½hradne Ärtou objektovo orientovanÃ©ho programovania a v C++ ho mÃ´Å¾e pokojne vyuÅ¾Ã­vaÅ¥ aj procedurÃ¡lny program. NajvÃ¤ÄÅ¡ie uplatnenie polymorï¬zmu je vÅ¡ak v objektovo orientovanom programovanÃ­, keÄÅ¾e v Åom je otÃ¡zka dobrÃ©ho usporiadania a prehÄ¾adnosti programu kÄ¾ÃºÄovÃ¡. Nakoniec eÅ¡te zopakujme, Å¾e vytvorenie viacerÃ½ch variantov jednej funkcie sa nazÃ½va aj preÅ¥aÅ¾enie funkcie alebo overloading."
59,588,0.646,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"(12.2) yÌt ï«1 ï½ G ï¨ at ,st ;wï© TÃ¡to parametrickÃ¡ funkcia mÃ´Å¾e byÅ¥ naprÃ­klad implementovanÃ¡ pomocou neurÃ³novej siete alebo inÃ©ho âmatematickÃ©ho zariadeniaâ, ktorÃ© mÃ¡ vlastnosti univerzÃ¡lneho aproximÃ¡tora. UÄenie sa tohto komplexu v podstate mÃ´Å¾e prebiehaÅ¥ Å¡tandardnou metÃ³dou s uÄiteÄ¾om, priÄom poÅ¾adovanÃ© vÃ½stupnÃ© aktivity poskytuje priamo systÃ©m (t. j. pri tvorbe doprednÃ©ho modelu nie je potrebnÃ¡ trÃ©ningovÃ¡ mnoÅ¾ina, poÅ¾adovanÃ© vÃ½stupnÃ© hodnoty poskytuje priamo systÃ©m). Treba vÅ¡ak poznamenaÅ¥, Å¾e konÅ¡trukcia doprednÃ©ho modelu musÃ­ predchÃ¡dzaÅ¥ uÄenie sa komplexu, priÄom vÃ½slednÃ½ doprednÃ½ model nemusÃ­ byÅ¥ perfektnÃ½. V teÃ³rii riadenia je zvykom doprednÃ½ model nazÃ½vaÅ¥ identifikÃ¡cia modelu systÃ©mu."
184,203,0.645,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Pojem pretÃ­najÃºca zÃ¡leÅ¾itosÅ¥ mÃ´Å¾eme charakterizovaÅ¥ takto: Â Å¡pecifickÃ¡ poÅ¾iadavka, ktorÃº je potrebnÃ© braÅ¥ do Ãºvahy v snahe naplniÅ¥ ciele, ktorÃ© mÃ¡ systÃ©m spÄºÅaÅ¥, Â treba braÅ¥ na Åu ohÄ¾ad na viacerÃ½ch miestach v systÃ©me, Â rozoznÃ¡vame funkcionÃ¡lne zÃ¡leÅ¾itosti (domÃ©novo zÃ¡vislÃ©) a nefunkcionÃ¡lne zÃ¡leÅ¾itosti (vÃ½konnosÅ¥ systÃ©mu, bezpeÄnosÅ¥, kvalita), Â prÃ­klady pretÃ­najÃºcich zÃ¡leÅ¾itostÃ­ sÃº kontrola transakciÃ­, autorizÃ¡cia, spracovanie chÃ½b a vÃ½nimiek, ladenie softvÃ©ru. PrÃ­klad implementÃ¡cie softvÃ©rovÃ©ho systÃ©mu dvoma rÃ´znymi spÃ´sobmi, Äisto objektovÃ½m a aspektovÃ½m je na obrÃ¡zku 3-4. VÄaka AOP sÃº pretÃ­najÃºce Äasti kÃ³du z modelu pouÅ¾Ã­vateÄ¾a, zamestnanca a manaÅ¾Ã©ra odstrÃ¡nenÃ© a ich funkcionalita je zoskupenÃ¡ do jednÃ©ho modulu s nÃ¡zvom aspekty kontroly prÃ­stupu. V aspektovo-orientovanom prÃ­stupe je moÅ¾nÃ© pretÃ­najÃºce zÃ¡leÅ¾itosti zoskupovaÅ¥ a zapuzdrovaÅ¥ v moduloch, ktorÃ© sa nazÃ½vajÃº aspekty. ExistujÃº dva spÃ´soby tvorby softvÃ©ru z pohÄ¾adu pretÃ­najÃºcich zÃ¡leÅ¾itostÃ­, ktorÃ© sa oznaÄujÃº ako symetrickÃ½ a asymetrickÃ½ prÃ­stup."
205,77,0.645,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Charakteristiky webu 4.3.2 EvolÃºcia strÃ¡nok a prepojenÃ­ medzi nimi Ntoulas [16] vypracoval Å¡tÃºdiu, v ktorej poÄas jednÃ©ho roka sledoval, ako sa tÃ½Å¾denne menÃ­ obsah a Å¡truktÃºra prepojenÃ­ strÃ¡nok 150 webovÃ½ch sÃ­diel. CieÄ¾om tejto Å¡tÃºdie bolo zÃ­skaÅ¥ prehÄ¾ad o tom, ako by sa mali webovÃ© vyhÄ¾adÃ¡vaÄe vyrovnaÅ¥ s neustÃ¡lym vÃ½vojom webu. Sledoval najmÃ¤ poÄty vytvorenÃ½ch a zaniknutÃ½ch strÃ¡nok a prepojenÃ­. Vo vÃ½sledkoch sa uvÃ¡dza, Å¾e starÃ© strÃ¡nky sa rÃ½chlo nahradzovali novÃ½mi, ale ich obsah sa veÄ¾mi podobal uÅ¾ existujÃºcim strÃ¡nkam. TÃ½Å¾denne zaznamenali prÃ­rastok novÃ½ch strÃ¡nok o 8%. StrÃ¡nky, ktorÃ© sa zachovali dlhÅ¡Ã­ Äas, prechÃ¡dzali len malÃ½mi zmenami. Autori predpovedali, Å¾e ak bude trend vÃ½voja webu pokraÄovaÅ¥, iba 20% strÃ¡nok, ktorÃ© existujÃº na zaÄiatku roka, bude dostupnÃ½ch aj o rok (pozri obrÃ¡zok 17). Podobne ako v predchÃ¡dzajÃºcej Å¡tÃºdii, aj tu autori priÅ¡li k zÃ¡veru, Å¾e zmeny na strÃ¡nkach, ktorÃ© sa Äasto menia, moÅ¾no predpovedaÅ¥ na zÃ¡klade ich zmien v minulosti."
195,72,0.644,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"3.4 Spracovanie dÃ¡t interakciÃ­ Ako sme uviedli v Ãºvodnej motivÃ¡cii, dÃ¡ta interakciÃ­ sa vyznaÄujÃº vysokou ÃºrovÅou podrobnosti o prÃ¡ci programÃ¡tora prÃ¡ve vÄaka nÃ­zkej Ãºrovni sledovanÃ½ch udalostÃ­. TÃ½m sa vÅ¡ak dostÃ¡vame do rozporu, kedy sÃ­ce zaznamenÃ¡vame podrobnÃ© informÃ¡cie, no dÃ¡t interakciÃ­ je veÄ¾kÃ© mnoÅ¾stvo a je zloÅ¾itÃ© ich spracovaÅ¥ a vyhodnotiÅ¥. PrÃ­kladom je upravovanie obsahu sÃºboru zdrojovÃ©ho kÃ³du, ktorÃ© mÃ´Å¾eme sledovaÅ¥ aÅ¾ na Ãºrovni stlÃ¡Äania klÃ¡ves klÃ¡vesnice. Preto dÃ¡ta interakciÃ­ tradiÄne predspracujeme pred ich vyhodnocovanÃ­m filtrovanÃ­m, agregovanÃ­m, Äi identifikÃ¡ciou sedenÃ­ [9]. Zo zaznamenanÃ½ch interakciÃ­ sa najÄastejÅ¡ie snaÅ¾Ã­me odfiltrovaÅ¥ nepodstatnÃº ÄinnosÅ¥. Z uvedenÃ©ho prÃ­kladu zaznamenÃ¡vania pÃ­sania znakov zdrojovÃ©ho kÃ³du nÃ¡s nemusia zaujÃ­maÅ¥ znaky, ktorÃ© programÃ¡tor napÃ­sal a nÃ¡sledne zmazal. AgregovanÃ­m dÃ¡t interakciÃ­ sa posÃºvame na vyÅ¡Å¡ie Ãºrovne granularity programÃ¡torovej Äinnosti. Napr. pÃ­sanie znakov agregujeme na Ãºpravy riadkov zdrojovÃ©ho kÃ³du, cez Ãºpravy jednotlivÃ½ch sÃºÄiastok v sÃºboroch zdrojovÃ©ho kÃ³du, aÅ¾ po Ãºpravy samotnÃ½ch sÃºborov. PodÄ¾a Ãºlohy pouÅ¾itia mÃ´Å¾e postaÄovaÅ¥ poznaÅ¥ zmenenÃ© riadky v zdrojovom sÃºbore postupne v Äase, neÅ¾ presnÃ© ÄasovÃ© peÄiatky zadanie vÅ¡etkÃ½ch znakov. RÃ´zne Ãºrovne granularity dosiahneme tÃ½mito prÃ­stupmi: - SÃ©mantickÃ½ prÃ­stup â vopred urÄenÃ¡ hierarchia typov interakciÃ­, napr. kopÃ­rovanie fragmentu kÃ³du medzi sÃºÄiastkami zdrojovÃ©ho kÃ³du pozostÃ¡va z akcie oznaÄenia, kopÃ­rovania a prilepenia. - HeuristickÃ½ prÃ­stup â rozdelenie interakciÃ­ do aktivÃ­t programÃ¡tora podÄ¾a zadanÃ½ch pravidiel, napr. Å¡tudovanie (navigÃ¡cia bez Ãºprav obsahu kÃ³du), opravovanie chyby (zmena kÃ³du a jeho kontrolovanie), vylepÅ¡enie kÃ³du (Å¡tudovanie kÃ³du a nÃ¡slednÃ© Ãºpravy). - PravdepodobnostnÃ½ prÃ­stup â identifikovanie vzorov v dÃ¡tach interakciÃ­ pouÅ¾itÃ­m metÃ³d dolovania v dÃ¡tach a strojovÃ©ho uÄenia. Tak mÃ´Å¾eme podobne urÄovaÅ¥ aktivitu programÃ¡tora, Äi Å¡tuduje kÃ³d, pridÃ¡va novÃº funkcionalitu alebo opravuje chybu. Poslednou ÄasÅ¥ou predspracovania je identifikÃ¡cia sedenÃ­, kedy rozdeÄ¾ujeme interakcie do sÃºvislÃ½ch Ãºsekov prÃ¡ce programÃ¡tora. DÃ¡ta interakciÃ­ predstavujÃº prÃºd zaznamenanÃ½ch udalostÃ­, ktorÃ½ sa beÅ¾ne preruÅ¡uje iba neprÃ­tomnosÅ¥ou programÃ¡tora. V skutoÄnosti vÅ¡ak programÃ¡tor pracuje postupne na ÃºlohÃ¡ch. Aby sme z dÃ¡t interakciÃ­ zÃ­skali cennÃ© informÃ¡cie, rozdeÄ¾ujeme ich na jednotlivÃ© sedenia k ÃºlohÃ¡m. Projekt Mylyn to umoÅ¾Åuje tÃ½m, Å¾e sÃ¡m programÃ¡tor urÄÃ­ svoju Ãºlohu a prepÃ­na sa medzi nimi [7]. Sledovanie Å¡tudovania kÃ³du alebo aj Ãºprav je Å¡pecifickÃ© pre konkrÃ©tnu Ãºlohu. IdentifikÃ¡cia sedenÃ­ vÅ¡ak nie je vÅ¾dy moÅ¾nÃ¡ zo strany programÃ¡tora, preto sa ich snaÅ¾Ã­me identifikovaÅ¥ aj pomocou tÃ½chto pozorovanÃ­: - ÄinnosÅ¥ programÃ¡tora so stanovenÃ½m cieÄ¾om typicky trvÃ¡ od 30 do 90 minÃºt [10]. - PrÃ¡ca na Ãºlohe mÃ´Å¾e pokraÄovaÅ¥ medzi pracovnÃ½mi dÅami, preto je nutnÃ© spÃ¡jaÅ¥ sedenia. - ProgramÃ¡tor sa poÄas spoloÄnÃ©ho sedenia mÃ´Å¾e sÃºstrediÅ¥ na viacero Ãºloh. Vtedy je vhodnÃ© rozliÅ¡ovaÅ¥ medzi sedeniami pomocou artefaktov, s ktorÃ½mi pracuje."
94,91,0.644,Sprievodca svetom vedeckÃ©ho publikovania,"3.1.2 PoznaÅ¥ podstatu svojho vÃ½skumu, urÄiÅ¥ vÃ¡hu vÃ½sledkov Pri pohÄ¾ade na svoje vÃ½sledky by mal vÃ½skumnÃ­k vedieÅ¥ odhadnÃºÅ¥ ich potenciÃ¡lny vÃ½znam (aktuÃ¡lnosÅ¥, prevratnosÅ¥, prÃ­padne kontroverznosÅ¥) a podÄ¾a toho rozhodnÃºÅ¥, kam sa hodia. ZÃ­skal zaujÃ­mavÃ© konkrÃ©tne dÃ¡ta, ktorÃ© zatiaÄ¾ nevie vysvetliÅ¥? SpochybÅuje vÅ¡eobecnÃ© tvrdenie, ktorÃ© odbornÃ¡ obec povaÅ¾ovuje za platnÃ©? Odhalil princÃ­p doteraz nepochopenÃ©ho javu? Alebo upresÅuje nieÄo, Äo je v hrubÃ½ch rysoch uÅ¾ znÃ¡me? ÄlÃ¡nky v ktorom Äasopise odpovedajÃº na podobnÃ½ typ otÃ¡zok ako jeho vÃ½skum? OsobitnÃº, v minulosti znaÄne prehliadanÃº Ãºlohu zohrÃ¡vajÃº Å¡tÃºdie, v ktorÃ½ch vyÅ¡li nepreukaznÃ© alebo negatÃ­vne vÃ½sledky. Kedysi takÃ©to dÃ¡ta zostÃ¡vali skrytÃ© v laboratÃ³rnych knihÃ¡ch. Vedci ich nemali ako uverejniÅ¥, pretoÅ¾e editori a recenzenti uprednostÅovali"
111,116,0.644,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"RÃ½chlejÅ¡ia reprodukcia chÃ½b ZloÅ¾itosÅ¥ webovÃ½ch strÃ¡nok/aplikÃ¡ciÃ­ spÃ´sobuje, Å¾e niektorÃ© veci jednoducho nebudÃº vÅ¾dy fungovaÅ¥ tak, ako by mali. Je potrebnÃ© zohÄ¾adniÅ¥ mnoÅ¾stvo podmienok, ako sÃº rÃ´zne typy zariadenÃ­, operaÄnÃ½ch systÃ©mov a prehliadaÄov, ako aj rÃ´zne rozlÃ­Å¡enia obrazovky alebo lokalizÃ¡cie. A to ani neberieme do Ãºvahy faktor pouÅ¾Ã­vateÄ¾a, ktorÃ½ mÃ¡ pri danej prÃ­leÅ¾itosti nekoneÄnÃº schopnosÅ¥ âpokaziÅ¥ veciâ spÃ´sobom, ktorÃ½ by vÃ½vojÃ¡r nikdy neÄakal (samozrejme pouÅ¾Ã­vateÄ¾, nÃ¡Å¡ zÃ¡kaznÃ­k nÃ¡Å¡ pÃ¡n, preto pokazil v ÃºvodzovkÃ¡ch). Testovanie toÄ¾kÃ½ch moÅ¾nostÃ­ sa rÃ½chlo stÃ¡va nemoÅ¾nÃ½m. KeÄ je objavenÃ¡ a nahlÃ¡senÃ¡ chyba, Äasto narazÃ­te na ÄalÅ¡Ã­ problÃ©m. Ako problÃ©m reprodukovaÅ¥. Pridanie nahrÃ¡vania sedenÃ­ mÃ´Å¾e zmeniÅ¥ spÃ´sob rieÅ¡enia chÃ½b, ktorÃ© sa objavia na vaÅ¡ich webovÃ½ch strÃ¡nkach. Namiesto toho, aby ste poÅ¾iadali pouÅ¾Ã­vateÄ¾a o zopakovanie krokov, ktorÃ© viedli k chybe, alebo aby ste ho poÅ¾iadali o poskytnutie snÃ­mky obrazovky, mÃ´Å¾ete si pozrieÅ¥ jeho sedenie a vidieÅ¥ chybu na vlastnÃ© oÄi."
184,399,0.643,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Â AtribÃºty, ktorÃ© definujÃº jednoduchÃ© dÃ¡tovÃ© hodnoty relevantnÃ© pre obsah ÄlÃ¡nku. NaprÃ­klad, keby sme chceli definovaÅ¥ poÄet obyvateÄ¾ov LondÃ½na pomocou typovÃ½ch odkazov, museli by sme pridaÅ¥ odkaz na ÄlÃ¡nok s nÃ¡zvom ,,7421328'', toto jednoznaÄne nie je sprÃ¡vny spÃ´sob, ako definovaÅ¥ takÃ½to druh Ãºdajov, vytvÃ¡ra veÄ¾kÃ© mnoÅ¾stvo strÃ¡nok s ÄÃ­selnÃ½mi nÃ¡zvami, v ktorÃ½ch navyÅ¡e nÃ¡zov nezachytÃ¡va ÄÃ­selnÃ½ vÃ½znam strÃ¡nky (naprÃ­klad lexikografickÃ© usporiadanie nÃ¡zvov je inÃ©, ako ÄÃ­selnÃ© usporiadanie). Ako teda zapÃ­saÅ¥ populÃ¡ciu? RieÅ¡enÃ­m je zÃ¡pis populÃ¡cie pomocou atribÃºtu s ÄÃ­selnou hodnotou [[population:=7421328]]"
195,167,0.643,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄacie systÃ©my orientovanÃ© na znovupouÅ¾itie kÃ³du Takto je zabezpeÄenÃ©, Å¾e odporÃºÄacÃ­ systÃ©m si je vÅ¾dy vedomÃ½ kontextu, v ktorom pouÅ¾Ã­vateÄ¾ aktuÃ¡lne vyvÃ­ja a chcel zÃ­skaÅ¥ odporÃºÄenie. Zbieranie dÃ¡t s vytvÃ¡ranÃ­m kontextu a nÃ¡slednÃ½m spustenÃ­m vyhÄ¾adÃ¡vania musÃ­ prebiehaÅ¥ v rozumnÃ½ch ÄasovÃ½ch intervaloch a s mierou. NevhodnÃ½m spÃ´sobom je zaÄatie zbierania kontextu vÅ¾dy po stlaÄenÃ­ akÃ©hokoÄ¾vek tlaÄidla klÃ¡vesnice, Äo mÃ¡ za nÃ¡sledok neÃºmernÃ© zaÅ¥aÅ¾enie systÃ©mu. PrincÃ­pom celÃ©ho tohto procesu je pred pripraviÅ¥ si zoznam znovupouÅ¾iteÄ¾nÃ½ch kÃºskov zdrojovÃ½ch kÃ³dov v nÃ¡povedi eÅ¡te pred tÃ½m, ako sa pouÅ¾Ã­vateÄ¾ rozhodne ich nÃ¡jsÅ¥. Okrem samostatnÃ©ho zberu Ãºdajov, ktorÃ½ prebieha paralelne popri aktuÃ¡lnej Äinnosti pouÅ¾Ã­vateÄ¾a, je moÅ¾nÃ© agentovi daÅ¥ vedieÅ¥ zÃ¡ujem pouÅ¾Ã­vateÄ¾a o vyhÄ¾adanie znovupouÅ¾iteÄ¾nÃ½ch kÃºskov kÃ³dov, napr. prostrednÃ­ctvom klÃ¡vesovej skratky. VÃ¤ÄÅ¡inou to bÃ½vajÃº prÃ­pady, keÄ pouÅ¾Ã­vateÄ¾ chce poradiÅ¥, Äi aktuÃ¡lne vytvorenÃ½ zdrojovÃ½ kÃ³d nie je podobnÃ½ niektorÃ©mu uÅ¾ predtÃ½m vytvorenÃ©mu fragmentu. InfraÅ¡truktÃºra vyhÄ¾adÃ¡vania JednotlivÃ© kÃºsky zdrojovÃ½ch kÃ³dov je potrebnÃ© niekde uchovÃ¡vaÅ¥, aby bolo moÅ¾nÃ© s nimi vykonÃ¡vaÅ¥ ÄalÅ¡ie operÃ¡cie, napr. vyhÄ¾adÃ¡vanie, porovnÃ¡vania existujÃºcich kÃºskov kÃ³du s novÃ½mi, prÃ­p. pridÃ¡vaÅ¥ novÃ© kÃºsky kÃ³du. UchovÃ¡vanie kÃºskov zdrojovÃ½ch kÃ³dov je dobrÃ© oddeliÅ¥ od zvyÅ¡nej Äasti odporÃºÄacieho systÃ©mu do formy databÃ¡zy, ktorÃ¡ bude uchovÃ¡vaÅ¥ a pracovaÅ¥ s veÄ¾kÃ½m mnoÅ¾stvom malÃ½ch ÄastÃ­ kusov zdrojovÃ©ho kÃ³du. K jednotlivÃ½m Äastiam kusov zdrojovÃ½ch kÃ³dov je moÅ¾nÃ© si napr. znaÄiÅ¥ ich uÅ¾itoÄnosÅ¥ a vhodnosÅ¥, ÄÃ­m sa spresnÃ­ vÃ½ber pri nÃ¡povede. Ako databÃ¡zu je moÅ¾nÃ© pouÅ¾iÅ¥ akÃºkoÄ¾vek relaÄnÃº databÃ¡zu, napr. Oracle, Microsoft SQL Server, MySQL alebo PostgreSQL. V prÃ­pade pouÅ¾itia tohto rieÅ¡enia je dobrÃ© umiestniÅ¥ databÃ¡zu na samostatnÃ½ server, ktorÃ½ poskytuje dostatoÄnÃ½ vÃ½kon bez obmedzovania ostatnÃ½ch ÄastÃ­, priÄom odporÃºÄacÃ­ systÃ©m musÃ­ komunikovaÅ¥ a udrÅ¾iavaÅ¥ spojenie s databÃ¡zou prostrednÃ­ctvom internetovÃ©ho pripojenia, Äo mÃ´Å¾e spÃ´sobiÅ¥ urÄitÃ© spomalenie. AvÅ¡ak z hÄ¾adiska vÃ½konu a minimalizÃ¡cie Äasu potrebnÃ©ho na vyhÄ¾adÃ¡vanie je vhodnejÅ¡ie pouÅ¾iÅ¥ dokumentovo orientovanÃ© textovÃ© databÃ¡zy, napr. Lucene/Solr, alebo NoSQL databÃ¡zy, akou je MongoDB. Tieto databÃ¡zy je moÅ¾nÃ© pouÅ¾iÅ¥ aj v rÃ¡mci odporÃºÄaÄa bez potreby pouÅ¾itia dodatoÄnÃ©ho hardvÃ©ru. Vyberanie a radenie odporuÄenÃ­ Len Äo sa z databÃ¡zy vytiahnu vÃ½sledky, je moÅ¾nÃ© ich povaÅ¾ovaÅ¥ za finÃ¡lne a ponÃºknuÅ¥ pouÅ¾Ã­vateÄ¾ovi na pouÅ¾itie, napr. vo forme prvÃ½ch desiatich nÃ¡jdenÃ½ch zhÃ´d. AvÅ¡ak pouÅ¾Ã­vateÄ¾ pri poÅ¾iadavke o nÃ¡jdenie podobnostÃ­ oÄakÃ¡va, Å¾e nÃ¡jdenÃ© podobnosti sa mu odporuÄia zoradenÃ½m spÃ´sobom zostupne, kde na prvom mieste bude kandidÃ¡t s najvyÅ¡Å¡ou zhodou podobnosti. To je moÅ¾nÃ© za pomoci takzvanej Å¡pekulatÃ­vnej analÃ½zy [4], keÄ pred samotnÃ½m zobrazenÃ­m budÃº vÃ½sledky ohodnotenÃ© a upravÃ­ sa poradie zobrazovania. Tento modul pre Ãºpravu zobrazovania vÃ½sledkov mÃ´Å¾e byÅ¥ vytvorenÃ½ dvoma spÃ´sobmi:"
190,365,0.643,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"OblasÅ¥ personÃ¡lneho manaÅ¾mentu tvorÃ­ Ãºplne samostatnÃº, no neoddeliteÄ¾nÃº sÃºÄasÅ¥ tÃ­movÃ©ho projektu. PodÄ¾a mÅa sÃº rizikÃ¡, ktorÃ© z tejto oblasti plynÃº veÄ¾mi zÃ¡vaÅ¾nÃ©. HlavnÃ© problÃ©my spoÄÃ­vajÃº v nedostatoÄnej komunikÃ¡cii medzi jednotlivÃ½mi Älenmi tÃ­mu, v rÃ´znorodosti osobnostÃ­ Älenov tÃ­mu a tieÅ¾ v atmosfÃ©re, ktorÃ¡ v tÃ­me vlÃ¡dne. MyslÃ­m si, Å¾e je dÃ´leÅ¾itÃ©, najmÃ¤ v zaÄÃ­najÃºcich tÃ­moch, vytvoriÅ¥ âpriateÄ¾skÃºâ atmosfÃ©ru. Äasto bÃ½va problÃ©mom nedostatoÄnÃ© zhodnotenie osobnostÃ­ jednotlivÃ½ch Älenov, ktorÃ© potom vedie do neadekvÃ¡tneho rozdelenia zodpovednostÃ­ v tÃ­me. Treba venovaÅ¥ rozdeleniu hlavnÃ½ch Ãºloh a pozÃ­ciÃ­ v tÃ­me patriÄnÃº pozornosÅ¥. TieÅ¾ je dÃ´leÅ¾itÃ© priebeÅ¾ne sledovaÅ¥ prÃ¡cu jednotlivÃ½ch Älenov v tÃ­me tak,"
190,51,0.643,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pri uvaÅ¾ovanÃ­ o archetypoch softvÃ©rovÃ½ch tÃ­mov je dÃ´leÅ¾itÃ© uvedomiÅ¥ si Äo vlastne pojem âarchetypâ znamenÃ¡. JednÃ½m z vÃ½znamov slova archetypÃ¡lny je pÃ´vodnÃ½, prvotnÃ½, vyjadrujÃºci podstatu. V sÃºvislosti s tÃ½mito vÃ½znamami mÃ´Å¾eme archetyp softvÃ©rovÃ©ho tÃ­mu vysvetliÅ¥ ako idealizovanÃ½ prÃ­klad softvÃ©rovÃ©ho tÃ­mu, zaloÅ¾enÃ½ na konzistentnej mnoÅ¾ine predpokladov, nÃ¡zorov a presvedÄenÃ­ vzÅ¥ahujÃºcich sa k organizÃ¡cii prÃ¡ce a k sprÃ¡vaniu jednotlivÃ½ch Älenov tÃ­mu. V nasledujÃºcich odsekoch sÃº zhrnutÃ© dÃ´leÅ¾itÃ© poznatky o jednotlivÃ½ch archetypoch, ktorÃ© Sawyer uviedol vo svojom ÄlÃ¡nku."
130,534,0.643,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ÄalÅ¡Ã­m problÃ©mom je sÃºkromie pouÅ¾Ã­vateÄ¾a. Aby sa systÃ©m dokÃ¡zal pouÅ¾Ã­vateÄ¾ovi prispÃ´sobiÅ¥, je potrebnÃ© sledovaÅ¥ a zaznamenÃ¡vaÅ¥ jeho prÃ¡cu so systÃ©mom. Tento fakt vyvolÃ¡va debatu o tom, Äi je to etickÃ©. PouÅ¾Ã­vatelia sa obÃ¡vajÃº moÅ¾nosti zneuÅ¾itia takto zÃ­skanÃ½ch informÃ¡ciÃ­. OdbornÃ­ci tvrdia, Å¾e postupom Äasu si pouÅ¾Ã­vatelia zvyknÃº a nebudÃº to braÅ¥ ako zÃ¡sah do ich sÃºkromia, ale skÃ´r ako nieÄo, z Äoho budÃº profitovaÅ¥, pretoÅ¾e systÃ©m im poskytne rÃ½chlejÅ¡Ã­ prÃ­stup k relevantnÃ½m informÃ¡ciÃ¡m."
190,66,0.642,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V tejto eseji sme charakterizovali tri archetypy ako vzory organizÃ¡cie prÃ¡ce softvÃ©rovÃ½ch tÃ­mov. Autor opÃ­sal svoje osobnÃ© skÃºsenosti s tÃ­mami rÃ´znych archetypov a na zÃ¡klade tÃ½chto skÃºsenostÃ­ uviedol niektorÃ© situÃ¡cie, v ktorÃ½ch je danÃ½ archetyp najefektÃ­vnejÅ¡Ã­ v sÃºvislosti s prijÃ­manÃ­m rozdielne skÃºsenÃ½ch, novÃ½ch Älenov tÃ­mu. VhodnÃ½ archetyp tÃ­mu je pre novÃ½ch zamestnancov jednou z dÃ´leÅ¾itÃ½ch podmienok ich ÃºspeÅ¡nÃ©ho zaÄlenenia, no nemusÃ­ byÅ¥ rozhodujÃºcou podmienkou. Na pozadÃ­ vÅ¡etkÃ½ch viac alebo menej ÃºspeÅ¡nÃ½ch snÃ¡h o nadviazanie spoluprÃ¡ce s novÃ½mi zamestnancami stojÃ­ prÃ¡ve kvalita komunikÃ¡cie medzi nimi a zvyÅ¡kom tÃ­mu. VhodnÃ½ archetyp tÃ­mu mÃ´Å¾e byÅ¥ predpokladom pre kvalitnÃº komunikÃ¡ciu, no je to prÃ¡ve samotnÃ¡ komunikÃ¡cia, ktorÃ¡ je cestou k ÃºspeÅ¡nej spoluprÃ¡ci s novÃ½m Älenom tÃ­mu."
66,149,0.642,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"6.1 SÃ©riovateÄ¾nosÅ¥ V rÃ¡mci sÃºbeÅ¾nÃ©ho vykonÃ¡vania transakciÃ­ je potrebnÃ© dosiahnuÅ¥ vlastnosÅ¥ Isolation, ktorÃ¡ zabezpeÄuje, Å¾e vÃ½sledky transakciÃ­ uloÅ¾enÃ½ch v databÃ¡ze sÃº zhodnÃ© so sÃ©riovÃ½m vykonÃ¡vanÃ­m transakciÃ­. SÃ©riovÃ© vykonÃ¡vanie garantuje sprÃ¡vny vÃ½sledok, ale z pohÄ¾adu vÃ½konnosti systÃ©mu sa nejednÃ¡ o najlepÅ¡iu moÅ¾nosÅ¥. Aby sme vedeli garantovaÅ¥ sprÃ¡vny vÃ½sledok potrebujeme dosiahnuÅ¥ poradie vykonÃ¡vania transakciÃ­, ktorÃ© bude maÅ¥ rovnakÃ½ vÃ½sledok ako sÃ©riovÃ© vykonÃ¡vanie. TakÃ©to vykonÃ¡vanie nazÃ½vame sÃ©riovateÄ¾nÃ©. SÃ©riovateÄ¾nÃ© vykonÃ¡vanie mÃ¡ na stav databÃ¡zy rovnakÃ½ efekt ako sÃ©riovÃ© vykonÃ¡vanie bez ohÄ¾adu na stav databÃ¡zy a na typ a mnoÅ¾stvo operÃ¡ciÃ­ v transakciÃ¡ch. SamotnÃ¡ postupnosÅ¥ vykonÃ¡vania transakciÃ­ a ich operÃ¡ciÃ­ sa nazÃ½va rozvrh (z angl. Shedule). DefinÃ­cia rozvrhu je, Å¾e rozvrh vznikne premieÅ¡anÃ­m transakciÃ­ a ich operÃ¡ciÃ­ s tÃ½m, Å¾e poradie operÃ¡ciÃ­ je zachovanÃ© pre jednotlivÃ© transakcie tj. ak transakcia ÄÃ­ta objekt X a potom zapisuje objekt Y, tak toto poradie nie je moÅ¾nÃ© zmeniÅ¥. Do rozvrhu mÃ´Å¾u vstupovaÅ¥ aj nekompletnÃ© transakcie (neobsahujÃº zaÄiatok a koniec transakcie). V ÄalÅ¡Ã­ch Äastiach budeme pracovaÅ¥ s pojmami sÃ©riovÃ½ a sÃ©riovateÄ¾nÃ½ rozvrh."
265,67,0.642,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"AkÃ© typy softvÃ©rovÃ½ch produktov podÄ¾a pÃ´vodcu Å¡pecifikÃ¡cie (âobjednÃ¡vateÄ¾aâ) poznÃ¡me? AkÃ½ je medzi nimi rozdiel? RozliÅ¡ujeme zÃ¡kaznÃ­cky a generickÃ½ (nazÃ½vanÃ½ tieÅ¾ âkrabicovÃ½â) softvÃ©r. Pri zÃ¡kaznÃ­ckom softvÃ©ri je pÃ´vodcom Å¡pecifikÃ¡cie konkrÃ©tny zÃ¡kaznÃ­k (jeho poÅ¾iadavky vyplÃ½vajÃº z jeho vlastnÃ½ch potrieb) a typicky danÃ½ softvÃ©r vytvÃ¡rame len pre neho. Pri generickom softvÃ©ri sÃº poÅ¾iadavky sformulovanÃ© na zÃ¡klade potrieb (niekedy domnelÃ½ch) veÄ¾kÃ©ho mnoÅ¾stva zÃ¡kaznÃ­kov/pouÅ¾Ã­vateÄ¾ov (Ä¾udÃ­, firiem) a formuluje ich vÃ¤ÄÅ¡inou sama spoloÄnosÅ¥, ktorÃ¡ softvÃ©r vyvÃ­ja. KrabicovÃ½ softvÃ©r sa nÃ¡sledne predÃ¡va vÃ¤ÄÅ¡iemu mnoÅ¾stvu zÃ¡kaznÃ­kov. PoznÃ¡mka: Äasto nastÃ¡va prÃ­pad, kedy firma tvorÃ­ nejakÃ½ softvÃ©r sama pre seba (napr. banka potrebuje softvÃ©r na komunikÃ¡ciu so zÃ¡kaznÃ­kmi a jeho tvorbu zadÃ¡ vlastnÃ©mu vÃ½vojÃ¡rskemu oddeleniu). Aj v takomto prÃ­pade hovorÃ­me"
240,32,0.641,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÅ¡imnime si, Å¾e funkcia nacitaj() popri naÄÃ­tanÃ­ i-tej osoby eÅ¡te v riadkoch 27-28 heuristicky urÄÃ­, Äi osoba je Å¾ena alebo nie. PouÅ¾itÃ© heuristickÃ© pravidlo povaÅ¾uje za Å¾enu osobu, pre ktorÃº prvÃ¡ ÄasÅ¥ mena osoby konÄÃ­ na znak 'a'. Toto pravidlo neplatÃ­ univerzÃ¡lne (napr. pre Å¾enu Hillary alebo muÅ¾a Luka) ale v naÅ¡om prÃ­pade presne pokryje vÅ¡etky Å¾eny v dÃ¡tovej sade. ReÃ¡lne pouÅ¾Ã­vanÃ© programy zvyÄajne pouÅ¾Ã­vajÃº samostatnÃ½ prÃ­znak, ktorÃ½ by bol uvedenÃ½ v sÃºbore. Program tieÅ¾ obsahuje pomocnÃº funkciu aktualny_rok(), ktorÃ¡ z operaÄnÃ©ho systÃ©mu urÄÃ­ aktuÃ¡lny rok a zistenÃº hodnotu vrÃ¡ti ako tzv. nÃ¡vratovÃº hodnotu, ktorÃº mÃ´Å¾e hlavnÃ¡ funkcia main() naplniÅ¥ do lokÃ¡lnej premennej (rok) a pouÅ¾iÅ¥ v ÄalÅ¡Ã­ch prÃ­kazoch:"
393,180,0.64,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"4 INFRAÅ TRUKTÃRA PRE WEBOVÃ INTELIGENTNÃ SYSTÃMY RÃ½chlym rozÅ¡Ã­renÃ­m osobnÃ½ch poÄÃ­taÄov za poslednÃ½ch pÃ¤tnÃ¡sÅ¥ rokov sa radikÃ¡lne zmenil svet nejednÃ©ho z nÃ¡s. To, Äo kedysi bolo nepredstaviteÄ¾nÃ©, ako naprÃ­klad okamÅ¾itÃ½ prÃ­stup k terabajtom dÃ¡t a ich prehÄ¾adÃ¡vanie za niekoÄ¾ko sekÃºnd, je dnes realitou. MÃ¡loktorÃ½ pouÅ¾Ã­vateÄ¾ si vÅ¡ak uvedomuje, Å¾e za tieto sluÅ¾by vÄaÄÃ­ nielen âhmatateÄ¾nÃ©muâ hardvÃ©ru, ale najme sofistikovanÃ½m algoritmom softvÃ©ru. ProblÃ©m minulosti s nedostatkom informÃ¡ciÃ­, sa postupom Äasu pretransformoval na problÃ©m vyhÄ¾adÃ¡vania informÃ¡ciÃ­ medzi obrovskÃ½m mnoÅ¾stvom dÃ¡t, ktorÃ© mÃ¡me v sÃºÄasnosti k dispozÃ­cii. NÃ¡jdenÃ© informÃ¡cie veÄ¾mi Äasto nie sÃº zaujÃ­mavÃ© len pre jednÃ©ho koncovÃ©ho pouÅ¾Ã­vateÄ¾a, ale aj mnoÅ¾stvo pouÅ¾Ã­vateÄ¾ov v jeho okolÃ­ (informÃ¡cie o prÃ¡ci, zÃ¡bave a podobne). Tieto informÃ¡cie mÃ¡ preto vo vÃ¤ÄÅ¡ine prÃ­padov zmysel âposunÃºÅ¥â bliÅ¾Å¡ie k pouÅ¾Ã­vateÄ¾om. PrÃ¡ve na to vyuÅ¾Ã­vame jednu z najÄastejÅ¡ie vyuÅ¾Ã­vanÃ½ch âneviditeÄ¾nÃ½châ sluÅ¾ieb â sluÅ¾bu predprÃ­pravy, a to na takmer kaÅ¾dej Ãºrovni vyuÅ¾itia Å¡irokÃ©ho spektra vÃ½poÄtovÃ½ch prostriedkov. Algoritmy na vyhÄ¾adÃ¡vanie a predprÃ­pravu patria medzi najvyuÅ¾Ã­vanejÅ¡ie algoritmy vo vÅ¡eobecnosti, prÃ¡ve preto je vhodnÃ© im venovaÅ¥ aj primeranÃº pozornosÅ¥."
190,429,0.64,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ako reakcia na tento problÃ©m sa neskÃ´r zaÄala pouÅ¾Ã­vaÅ¥ analÃ½za dosiahnutej hodnoty orientovanÃ¡ na proces vÃ½voja. Prvkami WBS stromu sÃº v tomto prÃ­pade Ãºlohy namiesto modulov. TakÃ½to strom mÃ´Å¾e podliehaÅ¥ zmenÃ¡m aj v priebehu projektu. ZavÃ¡dzajÃº sa tu dva druhy vrcholov: rozpracovanÃ¡ a plÃ¡novanÃ¡ Ãºloha. Podrobne sa musia opÃ­saÅ¥ len rozpracovanÃ© Ãºlohy, tie ktorÃ© prÃ¡ve prebiehajÃº alebo uÅ¾ prebehli. PlÃ¡novanÃ© Ãºlohy sÃº naopak znÃ¡me len rÃ¡mcovo, konkrÃ©tnejÅ¡iu podobu zÃ­skajÃº aÅ¾ v ÄalÅ¡Ã­ch iterÃ¡ciÃ¡ch. V strome WBS tvoria plÃ¡novanÃ© Ãºlohy Äasto eÅ¡te nerozvitÃ© vetvy. Aj plÃ¡novanÃ½m ÃºlohÃ¡m sa vÅ¡ak dajÃº priradiÅ¥ aspoÅ odhadovanÃ© hodnoty v rÃ¡mci metrÃ­k analÃ½zy dosiahnutej hodnoty. S nÃ¡stupom riadenia softvÃ©rovÃ©ho procesu prÃ­padmi pouÅ¾itia sa tieto dostali aj do analÃ½zy dosiahnutej hodnoty. Vrcholmi stromu WBS sa stali prÃ­pady pouÅ¾itia. KeÄÅ¾e prÃ­pady pouÅ¾itia vychÃ¡dzajÃº predovÅ¡etkÃ½m z funkcionÃ¡lnych poÅ¾iadaviek, zvÃ¤ÄÅ¡ila sa vÃ½povednÃ¡ hodnota o situÃ¡cii v projekte aj v poslednom z troch smerov (okrem ceny a Äasu), o kvalite produktu samotnej [5]."
265,267,0.64,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PoznÃ¡mka: tÃ¡to otÃ¡zka by na vÃ¡s mala pÃ´sobiÅ¥ odstraÅ¡ujÃºco. NemÃ¡ krÃ¡tku odpoveÄ a taktieÅ¾ nemÃ¡ zmysel sa uvedenÃ½ zoznam niÅ¾Å¡ie uÄiÅ¥ naspamÃ¤Å¥ (okrem toho urÄite nie je kompletnÃ½, obsahuje len najdÃ´leÅ¾itejÅ¡ie charakteristiky). NeznamenÃ¡ to ale, Å¾e sa Åou nemÃ¡me zaoberaÅ¥. Naopak, dÃ¡ sa povedaÅ¥, Å¾e je z celej podkapitoly najdÃ´leÅ¾itejÅ¡ia a dobrÃ½ vÃ½vojÃ¡r si ju vo vzÅ¥ahu k softvÃ©ru, ktorÃ½ vyvÃ­ja, kladie Äasto. Medzi charakteristiky dobrÃ©ho nÃ¡vrhu softvÃ©ru patrÃ­: â¢ JasnÃ½ ânÃ¡vodâ ako softvÃ©r implementovaÅ¥. DobrÃ½ nÃ¡vrh by nemal nechÃ¡vaÅ¥ otvorenÃ© zÃ¡sadnÃ© otÃ¡zky, len detaily. â¢ VysokÃ¡ sÃºdrÅ¾nosÅ¥ a nÃ­zka zviazanosÅ¥ sÃºÄiastok (komponentov) softvÃ©ru. VhodnÃ¡ zloÅ¾itosÅ¥ sÃºÄiastok."
135,62,0.64,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"So vzorom RukovÃ¤-Teleso sÃº tieÅ¾ spojenÃ© istÃ© problÃ©my vo vzahu k evolÃºcii obaovanÃ½ch sÃºiastok. Z priestorovÃ½ch dÃ´vodov sa nimi na tomto mieste nebudeme zaobera, viac informÃ¡ciÃ­ nÃ¡jde itate na strÃ¡nkach Portland Pattern Repository4. ZÃ¡verenÃ¡ terminologickÃ¡ poznÃ¡mka: Ako vidÃ­me, pojem Obaova nie je celkom jasne vymedzenÃ½. V Å¡irÅ¡om zmysle ide o synonymum pre vÅ¡eobecnÃ½ vzor RukovÃ¤-Teleso. Podobne autori (Gamma, 1995) uvÃ¡dzajÃº pojem Obaova ako synonymum pre dva konkrÃ©tne vzory: AdaptÃ©r a DekoratÃ©r. V uÅ¾Å¡om zmysle ho moÅ¾no pouÅ¾i v sÃºlade s naÅ¡ou definÃ­ciou v asti 1.3.1 na oznaenie sÃºiastky umoÅ¾ujÃºcej spoluprÃ¡cu inÃ½m dvom nekompatibilnÃ½m sÃºiastkam â teda ako synonymum vzoru AdaptÃ©r poda GoF. Ak neuvÃ¡dzame inak, mÃ¡me pod nÃ¡zvom Obaova na mysli prÃ¡ve tento poslednÃ½ koncept."
190,470,0.64,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ManaÅ¾ment vzÅ¥ahov so zÃ¡kaznÃ­kmi je novÃ½m prÃ­stupom k podnikaniu, ktorÃ½ je zaloÅ¾enÃ½ na presvedÄenÃ­, Å¾e hlavnÃ½m zdrojom ziskov pre podnik je zÃ¡kaznÃ­k, nie produkt. MoÅ¾no ho definovaÅ¥ ako neustÃ¡le sa opakujÃºci proces zameranÃ½ na lepÅ¡ie pochopenie a predpokladanie potrieb, sprÃ¡vania a ziskovosti zÃ¡kaznÃ­kov s niekoÄ¾kÃ½mi parciÃ¡lnymi cieÄ¾mi [4]:"
122,32,0.64,Modelovanie softvÃ©ru,"1. SystÃ©m zobrazÃ­ moÅ¾nosti vyhÄ¾adÃ¡vania. 2. ZÃ¡kaznÃ­k nastavÃ­ moÅ¾nosti vyhÄ¾adÃ¡vania a spustÃ­ vyhÄ¾adÃ¡vanie. 3. SystÃ©m zobrazÃ­ vyhÄ¾adanÃ© poloÅ¾ky. TakÃ½to prÃ­pad pouÅ¾itia nie je urÄenÃ½ na samostatnÃº aktivÃ¡ciu. AktivÃ¡ciu je potrebnÃ© upraviÅ¥, aby zohÄ¾adÅovala skutoÄnosÅ¥, Å¾e tok, ktorÃ½ zahÅÅame (include), je uÅ¾ v inom prÃ­pade pouÅ¾itia: PrÃ­pad pouÅ¾itia: Zadaj objednÃ¡vku ZÃ¡kladnÃ½ tok: Zadaj objednÃ¡vku 1. ZÃ¡kaznÃ­k zvolÃ­ zadanie objednÃ¡vky. 2. Aktivuje sa prÃ­pad pouÅ¾itia VyhÄ¾adaj vÃ½robok, jeho rovnomennÃ½ podtok. 3. SystÃ©m vloÅ¾Ã­ zvolenÃ½ vÃ½robok do koÅ¡Ã­ka. 4. ZÃ¡kaznÃ­k mÃ´Å¾e pokraÄovaÅ¥ vo vÃ½bere vÃ½robkov â prÃ­pad pouÅ¾itia pokraÄuje krokom 2. 5. ZÃ¡kaznÃ­k objednÃ¡ vÃ½robky v koÅ¡Ã­ku. 6. SystÃ©m vyÅ¾iada Ãºdaje potrebnÃ© na realizÃ¡ciu objednÃ¡vky vrÃ¡tane spÃ´sobu platby. 7. ZÃ¡kaznÃ­k zadÃ¡ poÅ¾adovanÃ© platobnÃ© Ãºdaje. 8. KedykoÄ¾vek poÄas objednÃ¡vania, zÃ¡kaznÃ­k mÃ´Å¾e vzdaÅ¥ tento proces. 9. SystÃ©m uloÅ¾Ã­ objednÃ¡vku do zoznamu objednÃ¡vok na vybavenie. 10. Ak by stav zÃ¡sob hociktorÃ©ho vÃ½robku v objednÃ¡vke po jej expedovanÃ­ poklesol pod stanovenÃ½ limit, systÃ©m uloÅ¾Ã­ zÃ¡znam do plÃ¡nu doplnenia zÃ¡sob o potrebe zvÃ½Å¡enia stavu prÃ­sluÅ¡nÃ©ho vÃ½robku. 11. PrÃ­pad pouÅ¾itia konÄÃ­. Tento vzÅ¥ah medzi prÃ­padmi pouÅ¾itia sa oznaÄuje ako zahrnutie (angl. include) a zodpovedÃ¡ volaniu metÃ³dy, ako je naznaÄenÃ© v tomto kÃ³de v Jave: public class Objednavanie { public void objednaj(Vyrobok vyrobok, int mnozstvo) { new VyhladavanieVyrobkov().vyhladaj(vyrobok); if (zistiStavZasob(vyrobok) >= mnozstvo) { } else ..."
369,174,0.638,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,ZÃ¡vÃ¤zok v ÃºÄtovnÃ­ctve je opakom pohÄ¾adÃ¡vky. ZnamenÃ¡ zatiaÄ¾ nezrealizovanÃº povinnosÅ¥ zaplatiÅ¥ za uÅ¾ dodanÃ½ tovar alebo sluÅ¾bu. TypickÃ½m prÃ­kladom je prijatÃ¡ faktÃºra. Pojem zÃ¡vÃ¤zok v ÃºÄtovnÃ­ctve nezodpovedÃ¡ pojmu zÃ¡vÃ¤zok zavedenÃ©mu v Äasti 2.5. V tejto podkapitole budeme vÃ½nimoÄne pojem zÃ¡vÃ¤zok pouÅ¾Ã­vaÅ¥ v ÃºÄtovnÃ­ckom vÃ½zname.
76,356,0.637,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"8.1.6 PrÃ­klad. Na vÃ½robe urÄitÃ©ho vÃ½robku sa podieÄ¾ajÃº dve linky. PrvÃ¡ z nich, oznaÄme ju A, vyrÃ¡ba s 5-percentnou nepodarkovosÅ¥ou, kÃ½m druhÃ¡ linka B mÃ¡ nepodarkovosÅ¥ aÅ¾ 10percentnÃº. Predstavme si, Å¾e mÃ¡me pred sebou kontajner s 1000 vÃ½robkami a vieme o Åom iba to, Å¾e buÄ obsahuje vÃ½robky z linky A, alebo naopak, jeho obsah pochÃ¡dza z linky B. Predpokladajme, Å¾e sme realizovali nÃ¡hodnÃ½ vÃ½ber rozsahu = 100 a na zÃ¡klade zistenia poÄtu nepodarkov medzi vybratÃ½mi mÃ¡me rozhodnÃºÅ¥, z ktorej linky tÃ½ch 1000 vÃ½robkov pochÃ¡dza. Formulujme Ãºlohu ako Å¡tatistickÃ½ test na hladine ï¡ = 0.1 a nÃ¡jdime jeho silu. RieÅ¡enie. NÃ¡hodnÃ½ vÃ½ber modelujeme 100-ticou nezÃ¡vislÃ½ch veliÄÃ­n , ~ A( ), kde indikÃ¡tory nepodarku (prÃ­klad 6.2.5). Ak vÃ½robky boli vyrobenÃ© linkou A, tak = 0.05, ak vÃ½robky pochÃ¡dzajÃº z linky B, tak = 0.10. Ide o test o parametri alternatÃ­vneho rozdelenia: : = 0.05 proti : = 0.10 Testovacou Å¡tatistikou je veliÄina = + + ... + , ktorÃ¡ predstavuje poÄet nepodarkov medzi 100 vybratÃ½mi. VeliÄinou budeme identifikovaÅ¥ kritickÃº oblasÅ¥ K. Zrejme kritickÃ½mi pre sÃº prÃ­liÅ¡ veÄ¾kÃ© hodnoty , a preto K mÃ¡ tvar K = {("
195,163,0.637,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"9.2 VÅ¡eobecnÃ© charakteristiky odporÃºÄacieho systÃ©mu V tejto Äasti si predstavÃ­me âdobrÃ© praktikyâ, ktorÃ© sa mÃ´Å¾u pouÅ¾iÅ¥ pri nÃ¡vrhu a vytvÃ¡ranÃ­ novÃ©ho odporÃºÄacieho systÃ©mu. Ich validita bola nezÃ¡vislÃ© potvrdenÃ¡ ako predmet Å¡tÃºdiÃ­ v mnohÃ½ch nezÃ¡vislÃ½ch prÃ¡cach. 9.2.1 Charakteristika prÃ­padov pouÅ¾itia odporÃºÄaÄa V minulosti bol Å¡tandardnÃ½ spÃ´sob znovupouÅ¾itia kÃ³du v ruÄnom vyhÄ¾adÃ¡vanÃ­ zaujÃ­mavÃ½ch ÄastÃ­ zdrojovÃ©ho kÃ³du a po nÃ¡jdenÃ­ sa skopÃ­roval a vloÅ¾il do aktuÃ¡lne vyvÃ­janÃ©ho projektu. Opakom Å¡tandardnÃ©ho spÃ´sobu znovupouÅ¾itia kÃ³du je pokus o automatizovanie procesu, kedy sa jednotlivÃ© kroky namiesto pouÅ¾Ã­vateÄ¾a vykonÃ¡va odporÃºÄacÃ­ systÃ©m, ktorÃ½ by vyuÅ¾Ã­val znalostÃ­ z uÅ¾ existujÃºcich zdrojovÃ½ch kÃ³dov. ZnovupouÅ¾itie komponentov NajÄastejÅ¡ie prÃ­pad pouÅ¾itia odporÃºÄacieho systÃ©mu je pri nÃ¡vrhu znovupouÅ¾itia predtÃ½m napÃ­sanÃ©ho kÃ³du, Äi uÅ¾ ide o ÃºtrÅ¾ky kÃ³du, alebo metÃ³d a tried k celÃ½m subsystÃ©mom a systÃ©mom, inak povedanÃ© ako komponentov. Tento typ znovupouÅ¾itia sa spÃ¡ja hlavne s komponentovo riadenÃ½m vÃ½vojom softvÃ©ru [2]. ZnovupouÅ¾itie kniÅ¾nÃ­c Å peciÃ¡lne v objektovo orientovanom vÃ½voji projektov vÃ½vojÃ¡ri neustÃ¡le navrhujÃº funkcionality ako bloky, ktorÃ© poskytujÃº v tvare kniÅ¾nÃ­c. Z hÄ¾adiska pouÅ¾Ã­vania takto kompaktnÃ©ho kusu softvÃ©ru sa na prvÃ½ pohÄ¾ad mÃ´Å¾e zdaÅ¥ ako uÄ¾ahÄenie pre vÃ½vojÃ¡ra z dÃ´vodu jeho veÄ¾kÃ©ho mnoÅ¾stva potencionÃ¡lne znovupouÅ¾iteÄ¾nÃ½ch ÄastÃ­, avÅ¡ak v prÃ­pade pouÅ¾itia iba niektorÃ½ch ÄastÃ­ mÃ¡vajÃº nevyrieÅ¡enÃ© zÃ¡vislosti na pÃ´vodnÃº kniÅ¾nicu. Pri tomto type znovupouÅ¾iti kniÅ¾nÃ­c, frameworkov, alebo API vyvstÃ¡vajÃº eÅ¡te ÄalÅ¡ie otÃ¡zky, Äi si je vÃ½vojÃ¡r vedomÃ½ ako sa danÃ¡ kniÅ¾nica pouÅ¾Ã­va, ktorÃ© objekty sÃº pre neho potrebnÃ©, ako sÃº vytvÃ¡ranÃ© a tak podobne. ZnovupouÅ¾itie testovÃ½ch prÃ­padov Tento typ odporÃºÄania a vyhÄ¾adÃ¡vania sÃºvisÃ­ s agilnou metodolÃ³giou zvanou extrÃ©mne programovanie17, kde vÃ½voj softvÃ©ru sa riadi prostrednÃ­ctvom testov [3]. Test, ktorÃ½ bol v minulosti pouÅ¾itÃ½ na otestovanie urÄitÃ©ho zdrojovÃ©ho kÃ³du, mÃ´Å¾e byÅ¥ na zÃ¡klade svojej podobnej formulÃ¡cie novÃ©ho testu znovupouÅ¾itÃ½ pre nÃ¡jdenie prislÃºchajÃºceho kÃ³du."
190,137,0.637,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pri rieÅ¡enÃ­ softvÃ©rovÃ½ch projektov sa na celÃ½ rieÅ¡iteÄ¾skÃ½ tÃ­m kladie nespoÄetnÃ© mnoÅ¾stvo poÅ¾iadaviek. Ich splnenie by malo vyÃºstiÅ¥ k ÃºspeÅ¡nÃ©mu vyrieÅ¡eniu projektu, t.j. k odovzdaniu softvÃ©rovÃ©ho produktu v poÅ¾adovanej kvalite, naÄas a so stanovenÃ½mi zdrojmi. Tu vznikÃ¡ problÃ©m ako vÅ¡etky tieto poÅ¾iadavky zosÃºladiÅ¥ do procesov tak, aby bolo moÅ¾nÃ© vÅ¡etky v Äo najkratÅ¡om Äase vyrieÅ¡iÅ¥. V prÃ­pade, Å¾e sa jednÃ¡ o rozsiahle projekty a na realizÃ¡cii sa podieÄ¾a viac Ä¾udÃ­, je priam nutnosÅ¥ou ich prÃ¡cu spÃ´so- Existuje veÄ¾a metÃ³d a podporbom plÃ¡novaÅ¥ a koordinovaÅ¥. DostÃ¡vame sa k pojmu plÃ¡novania, ktorÃ© si naÅ¡lo svoje pevnÃ© miesto nÃ½ch nÃ¡strojov pri rieÅ¡enÃ­ softvÃ©rovÃ½ch projektov. V sÃºÄasnosti uÅ¾ existuje veÄ¾kÃ© mnoÅ¾- uÄ¾ahÄujÃºcich stvo metÃ³d a podpornÃ½ch prostriedkov uÄ¾ahÄujÃºcich proces plÃ¡novania. plÃ¡novanie. No aj tak je niekedy problÃ©m zostaviÅ¥ hodnotnÃ½ plÃ¡n, ktorÃ½ by bol reÃ¡lne vyuÅ¾iteÄ¾nÃ½ pri rieÅ¡enÃ­ projektu a netvoril by iba formu dokumentÃ¡cie, ktorÃ¡ by skonÄila pod kopou papierov nejakÃ©ho manaÅ¾Ã©ra. Tu sa mÃ´Å¾eme pozastaviÅ¥ nad otÃ¡zkou, Äi je plÃ¡novanie pri rieÅ¡enÃ­ projektu dÃ´leÅ¾itÃ©. OdpovedaÅ¥ si musÃ­ kaÅ¾dÃ½ sÃ¡m, pretoÅ¾e existujÃº aj prÃ­stupy, ktorÃ© minimalizujÃº proces plÃ¡novania a snaÅ¾ia sa tak zefektÃ­vniÅ¥ celÃ½ proces vÃ½voja. Faktom vÅ¡ak zostÃ¡va, Å¾e plÃ¡nom riadenÃ½ vÃ½voj je v sÃºÄasnosti rozÅ¡Ã­renÃ½m spÃ´sobom rieÅ¡enia softvÃ©rovÃ½ch projektov a existuje veÄ¾kÃ© mnoÅ¾stvo prÃ­kladov jeho ÃºspeÅ¡nÃ©ho pouÅ¾itia. Ak sa rozhodneme, Å¾e chceme vyuÅ¾iÅ¥ plÃ¡nom riadenÃ½ prÃ­stup, treba, aby sme zvlÃ¡dli niektorÃ© techniky spojenÃ© s vytvÃ¡ranÃ­m plÃ¡nu. V neposlednom rade si musÃ­me uvedomiÅ¥, v Äom nÃ¡m mÃ´Å¾e dobre zostavenÃ½ plÃ¡n pomÃ´cÅ¥ a Äoho by sme sa mali pri zostavovanÃ­ plÃ¡nu vyvarovaÅ¥. OdpoveÄ sa pokÃºsim poskytnÃºÅ¥ v nasledujÃºcich Äastiach."
265,245,0.637,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"AkÃ© druhy dekompozÃ­cie softvÃ©ru v nÃ¡vrhu poznÃ¡te? Vysvetlite, Äo znamenajÃº. Druhy dekompozÃ­cie sÃº hÄ¾adiskÃ¡, podÄ¾a ktorÃ½ch moÅ¾no softvÃ©r rozdeliÅ¥ na menÅ¡ie Äasti: â¢ FunkcionÃ¡lna. SoftvÃ©r rozdeÄ¾ujeme podÄ¾a funkciÃ­, ktorÃ© mÃ¡ poskytovaÅ¥. MÃ´Å¾eme naprÃ­klad zobraÅ¥ jednotlivÃ© prÃ­pady pouÅ¾itia a venovaÅ¥ sa nÃ¡vrhu softvÃ©ru vÅ¾dy iba pre jeden z nich (samozrejme s predpokladom, Å¾e budeme neskÃ´r jednotlivÃ© Äasti spÃ¡jaÅ¥). â¢ UdalostnÃ¡. SoftvÃ©r navrhujeme tak, Å¾e najskÃ´r identifikujeme vÅ¡etky moÅ¾nÃ© podnety z vonka (vstupy do softvÃ©ru Äi uÅ¾ od pouÅ¾Ã­vateÄ¾ov alebo externÃ½ch systÃ©mov) a nÃ¡sledne sa pri kaÅ¾dom zaoberÃ¡me tÃ½m, Äo pre ich âvybavenieâ bude softvÃ©r robiÅ¥. â¢ Å truktÃºrna. SoftvÃ©r rozdeÄ¾ujeme podÄ¾a jeho âstatickejâ Å¡truktÃºry. Na najvyÅ¡Å¡ej Ãºrovni podÄ¾a navrhnutej architektÃºry, na niÅ¾Å¡Ã­ch podÄ¾a Å¡truktÃºry jednotlivÃ½ch sÃºÄiastok (aÅ¾ na ÃºroveÅ tried) â¢ PouÅ¾Ã­vateÄ¾skÃ© rozhranie. Å peciÃ¡lny, no vÃ½znamnÃ½ prÃ­pad Å¡truktÃºrnej dekompozÃ­cie, pri ktorej softvÃ©r delÃ­me a navrhujeme jednotlivo pre sÃºÄasti pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania (napr. jednotlivÃ½ch obrazoviek). â¢ ÃdajovÃ¡. Po vytvorenÃ­ modelu Ãºdajov tento rozdelÃ­me na menÅ¡ie Äasti (jednotlivÃ© entity alebo skupiny entÃ­t) a potom sa zaoberÃ¡me iba tÃ½mi ÄasÅ¥ami softvÃ©ru, ktorÃ© s jednotlivÃ½mi entitami sÃºvisia. â¢ ObjektovÃ¡. SoftvÃ©r delÃ­me podÄ¾a tried a metÃ³d. Pozor: To Å¾e sa rozhodneme uplatniÅ¥ nejakÃ½ druh dekompozÃ­cie neznamenÃ¡, Å¾e sa ostatnÃ½m aspektom softvÃ©ru nevenujeme, prÃ¡ve naopak. Ak si naprÃ­klad vyberieme funkcionÃ¡lnu dekompozÃ­ciu, pre kaÅ¾dÃ½ scenÃ¡r budeme uvaÅ¾ovaÅ¥ s akÃ½mi Ãºdajmi bude pracovaÅ¥, akÃ© triedy vyuÅ¾Ã­vaÅ¥, akÃ© Äasti pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania zahrnie a pod."
111,101,0.637,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"InterpretÃ¡cia vÃ½sledkov Ãdaje, ktorÃ© zÃ­skate, budÃº zÃ¡visieÅ¥ od typu otÃ¡zok, ktorÃ© poloÅ¾Ã­te (pozri ukÃ¡Å¾ku v Obr. 7.2). KvantitatÃ­vne Ãºdaje z uzavretÃ½ch otÃ¡zok sa Ä¾ahÅ¡ie analyzujÃº a vizualizujÃº v zrozumiteÄ¾nÃ½ch grafoch. ExistujÃºce nÃ¡stroje beÅ¾ne ponÃºkajÃº Å¡ikovnÃ© funkcie na uÄ¾ahÄenie prÃ¡ce. MÃ´Å¾ete Ãºdaje filtrovaÅ¥ aj v zÃ¡vislosti od rÃ´znych podmienok. V prÃ­pade kvalitatÃ­vnych Ãºdajov z otvorenÃ½ch otÃ¡zok je dobrou stratÃ©giou zoskupiÅ¥ podobnÃ© otÃ¡zky a hÄ¾adaÅ¥ spoloÄnÃ© tÃ©my. Jednou z vÃ½hod takejto kategorizÃ¡cie je, Å¾e stÃ¡le mÃ´Å¾ete svojim kolegom poskytnÃºÅ¥ niektorÃ© kvalitatÃ­vne metriky, ktorÃ© sÃº Ä¾ahko pochopiteÄ¾nÃ© (napr. 20% respondentov sa sÅ¥aÅ¾ovalo na to, Å¾e menu webovej strÃ¡nky je mÃ¤tÃºce). DotaznÃ­ky mÃ´Å¾u byÅ¥ silnÃ½m a flexibilnÃ½m nÃ¡strojom na zhromaÅ¾Äovanie Ãºdajov o vaÅ¡ich pouÅ¾Ã­vateÄ¾och/zÃ¡kaznÃ­koch, pokiaÄ¾ ide o ich postoje, preferencie a skÃºsenosti. Dbajte vÅ¡ak na to, aby ste dotaznÃ­ky nevyuÅ¾Ã­vali nadmerne (a aby ste vyuÅ¾ili inÃ© UX metÃ³dy na skÃºmanie sprÃ¡vania pouÅ¾Ã­vateÄ¾ov). Venujte Äas starostlivÃ©mu vypracovaniu otÃ¡zok, pretoÅ¾e len dobre navrhnutÃ½ dotaznÃ­k vÃ¡m poskytne relevantnÃ© Ãºdaje."
130,555,0.637,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Tvorba AH systÃ©mov nie je triviÃ¡lny proces a prinÃ¡Å¡a so sebou mnoho problÃ©mov. Je to zloÅ¾itÃ½ a Äasovo nÃ¡roÄnÃ½ proces, ktorÃ©ho najzloÅ¾itejÅ¡ou ÄasÅ¥ou je vytvorenie adaptÃ­vnej funkcionality systÃ©mu. Oproti nÃ¡vrhu hyperpriestoru v klasickÃ½ch hypermediÃ¡lnych systÃ©moch, ktorÃ½ spoÄÃ­va vo viac-menej priamoÄiarej definÃ­cii uzlov a hrÃ¡n hyperpriestoru, je v prÃ­pade adaptÃ­vnych hypermÃ©diÃ­ situÃ¡cia zloÅ¾itejÅ¡ia. Pri nÃ¡vrhu hyperpriestoru je potrebnÃ© braÅ¥ do Ãºvahy ciele, ktorÃ© chceme prispÃ´sobovanÃ­m dosiahnuÅ¥, a podÄ¾a toho vhodne navrhnÃºÅ¥ koncepty a vzÅ¥ahy medzi nimi. NavrhnutÃ½ graf konceptov je navyÅ¡e potrebnÃ© vhodne namapovaÅ¥ na informaÄnÃ½ priestor. TÃ¡to Ãºloha je z hÄ¾adiska prispÃ´sobovania kÄ¾ÃºÄovÃ¡. Kritickou ÄasÅ¥ou nÃ¡vrhu AH systÃ©mu je aj nÃ¡vrh modelu pouÅ¾Ã­vateÄ¾a. SpoÄÃ­va v definovanÃ­ charakteristÃ­k, ktorÃ© bude systÃ©m sledovaÅ¥ a patriÄne vyuÅ¾Ã­vaÅ¥. ÄÃ­m prepracovanejÅ¡Ã­ je nÃ¡vrh modelu pouÅ¾Ã­vateÄ¾a, tÃ½m vÃ¤ÄÅ¡ie moÅ¾nosti sa otvÃ¡rajÃº pri jeho zuÅ¾itkovanÃ­ poÄas samotnÃ©ho prispÃ´sobovania. Rovnako vÃ½ber metÃ³d a technÃ­k, ktorÃ© zabezpeÄia prispÃ´sobovanie, musÃ­ byÅ¥ premyslenÃ½. PrispÃ´sobovanie treba navrhnÃºÅ¥ tak, aby bolo v prvom rade prÃ­nosom pre pouÅ¾Ã­vateÄ¾a. Tu zasahujÃº aj inÃ© vednÃ© disciplÃ­ny, napr. Human Computer Interface. UvedenÃ© problÃ©my mÃ´Å¾e aspoÅ ÄiastoÄne zmierniÅ¥ existencia dobre definovanÃ½ch metÃ³d modelovania. V nasledujÃºcej kapitole preto uvedieme prehÄ¾ad referenÄnÃ½ch modelov AH systÃ©mov a rozoberieme, akÃ½m spÃ´sobom sa tieto modely navrhujÃº v existujÃºcich systÃ©moch. Menej zÃ¡vaÅ¾nÃ½m problÃ©mom, ktorÃ½ je spÃ´sobenÃ½ skÃ´r tÃ½m, Å¾e vÃ½skum v tejto oblasti trvÃ¡ relatÃ­vne krÃ¡tko, je nedostatok podpornÃ½ch prostriedkov pre nÃ¡vrh a implementÃ¡ciu AH systÃ©mov. V sÃºÄasnosti podobnÃ© systÃ©my tvoria vÃ¤ÄÅ¡inou vÃ½skumnÃ­ci, ktorÃ­ sÃº patriÄne technicky zdatnÃ­. Jednou z priorÃ­t je preto aj vytvorenie vhodnÃ½ch modelovacÃ­ch nÃ¡strojov, ktorÃ© by vÃ½voj AH systÃ©mov podstatne zjednoduÅ¡ili, Äo by viedlo k vÃ¤ÄÅ¡iemu rozÅ¡Ã­reniu tÃ½chto systÃ©mov. Ich vytvorenie by nemalo predstavovaÅ¥ vÃ¡Å¾nejÅ¡Ã­ problÃ©m."
66,49,0.636,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"identifikÃ¡tor zÃ¡znamu v tabuÄ¾ke. KaÅ¾dÃ¡ tabuÄ¾ka teda obsahuje nÃ¡zov stÄºpca id. V takomto prÃ­pade je preto nevyhnutnÃ© rozlÃ­Å¡iÅ¥ tieto stÄºpce od seba. V snahe vyhnÃºÅ¥ sa pouÅ¾Ã­vaniu dlhÃ½ch nÃ¡zvov tabuliek pre zabezpeÄenie jednoznaÄnosti atribÃºtov, je moÅ¾nÃ© pouÅ¾iÅ¥ prÃ¡ve aliasy. Aliasy sÃº v niektorÃ½ch prÃ­padoch nevyhnutnÃ© pre zabezpeÄenie jednoznaÄnosti atribÃºtov kvÃ´li tomu, Å¾e rovnakÃ¡ tabuÄ¾ka, mÃ´Å¾e byÅ¥ spojenÃ¡ sama so sebou a v takom prÃ­pade je nevyhnutnÃ© pouÅ¾iÅ¥ alias pre rozlÃ­Å¡enie tÃ½chto dvoch tabuliek. Definovanie aliasu prebieha pomocou klauzuly AS a mÃ´Å¾e vyzeraÅ¥ nasledovne: SELECT pl.id, pl.name, pl.salary AS player_salary FROM players AS pl UkÃ¡Å¾ka 15. Definovanie aliasu pre atribÃºt a nÃ¡zov tabuÄ¾ky pomocou klauzuly AS"
43,123,0.636,Objektovo orientovanÃ© programovanie v C++,"PrvÃ½ parameter predstavuje stream, z ktorÃ©ho reÅ¥azec ÄÃ­tame, druhÃ½ parameter reprezentuje samotnÃ½ reÅ¥azec. VÅ¡imnime si, Å¾e v tomto prÃ­pade nemusÃ­me zadaÅ¥ Å¾iadne obmedzenie pre dÄºÅ¾ku reÅ¥azca. PouÅ¾itie funkcie getline a niektorÃ½ch spomenutÃ½ch operÃ¡torov ilustrujÃº nasledujÃºce prÃ­klady. PrÃ­klad. NapÃ­Å¡me program, ktorÃ½ pre uÅ¾Ã­vateÄ¾a vytvorÃ­ prihlasovacie meno do nejakÃ©ho online systÃ©mu. Pri registrÃ¡cii program naÄÃ­ta od uÅ¾Ã­vateÄ¾a jeho priezvisko. Prihlasovacie meno sa vytvorÃ­ tak, Å¾e prvÃ© pÃ­smeno priezviska sa zmenÃ­ na malÃ© pÃ­smeno a k takto vzniknutÃ©mu reÅ¥azcu sa pripoja Å¡tyri nÃ¡hodne vygenerovanÃ© ÄÃ­selnÃ© znaky. Program najskÃ´r otestuje, Äi je prvÃ© pÃ­smeno zadanÃ©ho priezviska veÄ¾kÃ© pÃ­smeno a ak Ã¡no, zmenÃ­ ho na malÃ©. Na tento ÃºÄel sa vyuÅ¾ije operÃ¡tor <. Tento operÃ¡tor porovnÃ¡ dva reÅ¥azce podÄ¾a abecedy, priÄom sa vyuÅ¾Ã­va ASCII tabuÄ¾ka. PlatÃ­, Å¾e malÃ© pÃ­smenÃ¡ nasledujÃº v ASCII tabuÄ¾ke aÅ¾ za veÄ¾kÃ½mi. Teda prvÃ© pÃ­smeno reÅ¥azca je urÄite veÄ¾kÃ©, ak platÃ­ reÅ¥azec<âaâ. Äalej program vygeneruje reÅ¥azec so Å¡tyrmi ÄÃ­selnÃ½mi znakmi. Tento reÅ¥azec je inicializovanÃ½ poÄiatoÄnou hodnotou â0000â, ÄÃ­m je urÄenÃ¡ jeho dÄºÅ¾ka. ÄÃ­selnÃ© znaky majÃº v ASCII tabuÄ¾ke kÃ³dy 48â57, pomocou funkcie rand sa teda vygenerujÃº ÄÃ­sla v tomto rozsahu. Nakoniec sa takto vygenerovanÃ¡ Å¡tvorica pripojÃ­ k priezvisku pomocou operÃ¡tora + a prihlasovacie meno sa vypÃ­Å¡e na obrazovku. #include <iostream> #include <string> #include <cstdlib> #include <ctime> using namespace std; int main() string priezvisko, pripona=""0000"", login; cout<<""Zadajte vase priezvisko""<<endl; getline(cin,priezvisko); if (priezvisko<""a"") priezvisko[0]+=32; srand(time(NULL)); for (int i=0;i<4;i++) pripona[i]=rand()%10+48; login=priezvisko+pripona; cout<<""Vase prihlasovacie meno: ""<<login<<endl;"
265,140,0.636,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"VÃ½voj softvÃ©ru zaÄÃ­na Å¡pecifikÃ¡ciou poÅ¾iadaviek naÅ, aby bolo jasnÃ©, ÄO sa bude vyvÃ­jaÅ¥. Å pecifikÃ¡cia poÅ¾iadaviek na softvÃ©r sa vytvÃ¡ra popri analÃ½ze problÃ©movej oblasti, ktorÃ¡ sa Äasto oznaÄuje ako biznis analÃ½za. V rÃ¡mci nej sa identifikujÃº (biznis) problÃ©my a potreby, ktorÃ© bude vÃ½slednÃ½ softvÃ©rovÃ½ produkt rieÅ¡iÅ¥, resp. napÄºÅaÅ¥. VÃ½stupom procesu Å¡pecifikÃ¡cie poÅ¾iadaviek je zoznam poÅ¾iadaviek, ktorÃ½ odsÃºhlasil zÃ¡kaznÃ­k, pre ktorÃ©ho softvÃ©r vytvÃ¡rame. SpoloÄne tÃºto etapu Äasto nazÃ½vame aj analÃ½za poÅ¾iadaviek na softvÃ©r."
184,446,0.636,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"kategorizÃ¡cie slov obsiahnutÃ½ch v slovnÃ­ku, teda k slovu zÃ­skame iba lemy ktorÃ½ch je morfologickÃ½m variantom. NevÃ½hod je viacero, a to: Â nemoÅ¾nosÅ¥ zÃ­skaÅ¥ lemu pre slovÃ¡, ktorÃ© nie sÃº v slovnÃ­ku Â jeden reÅ¥azec znakov mÃ´Å¾e byÅ¥ morfologickÃ½m variantom viacerÃ½ch rozliÄnÃ½ch liem (narp. SlovenskÃ© slovo âmierâ mÃ´Å¾e byÅ¥ morfologickÃ½m variantom vÃ½znamovo rozliÄnÃ½ch slov: âmierâ, âmieraâ âmieriÅ¥â). Pre zachovanie presnosti je potom potrebnÃ© uchovÃ¡vaÅ¥ aj viac ako jednu lemu pre slovÃ¡ dokumentov v indexovÃ½ch Å¡truktÃºrach. WordNet22 (Miller, 1990) je prÃ­kladom populÃ¡rneho vÃ½kladovÃ©ho slovnÃ­ka anglickÃ©ho jazyka, ktorÃ½ obsahuje aj lemy morfologickÃ½ch variant slov."
240,156,0.636,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"NiektorÃ© programovacie jazyky (napr. C++) umoÅ¾ÅujÃº aj tzv. volanie odkazom (referenciou), ktorÃ¡ umoÅ¾Åuje argumenty v rÃ¡mci funkcie upravovaÅ¥, priÄom vykonanÃ© Ãºpravy sÃº vykonÃ¡vanÃ© priamo v premennej, ktorÃº sme do funkcie pri volanÃ­ odovzdali. V jazyku C toto nie je priamo takto moÅ¾nÃ©, ale vyÅ¾aduje nepriamy spÃ´sob pouÅ¾itÃ­m smernÃ­ku. Ak chceme aby funkcia nastav() upravila hodnotu premennej i vo funkcii main() musÃ­me jej odovzdaÅ¥ informÃ¡ciu, kde sa premennÃ¡ i v pamÃ¤ti nachÃ¡dza,"
59,349,0.635,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ktorÃ© sa nazÃ½vajÃº âpotvrdenie dÃ´sledkuâ resp. âpoprenie predpokladuâ . TÃ¡to skutoÄnosÅ¥ je spÃ´sobenÃ¡ tÃ½m, Å¾e transformovanÃ© reprezentÃ¡cie implikÃ¡cie t pïq a t p ï q nie sÃº identickÃ©, reprezentÃ¡cia t p ï q vedie prÃ¡ve k neoÄakÃ¡vanÃ½m vÃ½sledkom (6.61), ktorÃ© reprezentujÃº nesprÃ¡vne mÃ³dy usudzovania (ktorÃ© sÃº vÅ¡ak Äasto, aj napriek tomu, Äasto pouÅ¾Ã­vanÃ© Ä¾uÄmi nepoznajÃºcimi zÃ¡sady logiky)."
184,72,0.635,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 2-3. KlasifikÃ¡cia technolÃ³giÃ­ pre spojovacÃ­ softvÃ©r. KaÅ¾dÃ¡ z kategÃ³riÃ­ bude detailnejÅ¡ie opÃ­sanÃ¡ v samostatnÃ½ch podkapitolÃ¡ch a preto ich na tomto mieste opisujeme len v krÃ¡tkosti. Â TransportnÃ© vrstvy reprezentujÃº zÃ¡kladnÃ© komunikaÄnÃ© kanÃ¡ly na zasielanie poÅ¾iadaviek a prenos Ãºdajov medzi softvÃ©rovÃ½mi komponentmi. Tieto komunikaÄnÃ© kanÃ¡ly poskytujÃº jednoduchÃ© mechanizmy, ktorÃ© umoÅ¾ÅujÃº priamoÄiaru vÃ½menu Ãºdajov aj v distribuovanÃ½ch aplikÃ¡ciÃ¡ch. Â AplikaÄnÃ© servery sÃº vÃ¤ÄÅ¡inou postavenÃ© na zÃ¡kladnÃ½ch transportnÃ½ch sluÅ¾bÃ¡ch, avÅ¡ak podporujÃº aj transakcie, bezpeÄnosÅ¥ a adresÃ¡rovÃ© sluÅ¾by, za pomoci ktorÃ½ch je moÅ¾nÃ© vytvÃ¡raÅ¥ viacvlÃ¡knovÃ© serverovÃ© aplikÃ¡cie. Â Sprostredkovatelia sprÃ¡v vyuÅ¾Ã­vajÃº buÄ zÃ¡kladnÃ© sluÅ¾by transportnÃ½ch vrstiev alebo aj aplikaÄnÃ½ch serverov, priÄom pridÃ¡vajÃº Å¡pecializovanÃ© prostriedky na spracovanie sprÃ¡v. Tieto prostriedky umoÅ¾ÅujÃº rÃ½chle transformÃ¡cie sprÃ¡v a vysokoÃºrovÅovÃ© programovacie techniky na Å¡pecifikÃ¡ciu toho, ako bude zabezpeÄenÃ¡ vÃ½mena, manipulÃ¡cia ako aj smerovanie sprÃ¡v medzi rÃ´znymi komponentmi."
265,452,0.635,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ZÃ¡kladom notÃ¡cie diagramu je graf (prÃ­klad na Obr. 4.13). NajdÃ´leÅ¾itejÅ¡Ã­ typ vrcholu grafu je komponent, zakresÄ¾ovanÃ½ ako obdÄºÅ¾nik obsahujÃºci nÃ¡zov komponentu a prÃ­padne funkcie, ktorÃ© poskytuje. MenÅ¡Ã­mi obdÄºÅ¾nikmi sa na obvode komponentu znÃ¡zorÅujÃº tzv. brÃ¡ny, teda miesta urÄenÃ© na komunikÃ¡ciu komponentu s vonkajÅ¡Ã­m prostredÃ­m (mÃ´Å¾u byÅ¥ pomenovanÃ©). Z tÃ½chto brÃ¡n sÃº potom vystavovanÃ© rozhrania so sluÅ¾bami, ktorÃ© komponent poskytuje (krÃ¡tka Äiara vystupujÃºca z brÃ¡ny s kruhom na konci), prÃ­padne âopaÄnÃ© rozhraniaâ naznaÄujÃºce, Å¾e komponent oÄakÃ¡va napojenie na rozhranie inÃ©ho komponentu (krÃ¡tka Äiara vystupujÃºca z brÃ¡ny zakonÄenÃ¡ polkruhom). Spojenie dvoch komponentov sa potom naznaÄÃ­ zanorenÃ­m kruhu rozhrania do polkruhu âopaÄnÃ©ho rozhraniaâ."
111,110,0.635,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 8.3: Pre kaÅ¾dÃº Ãºlohu zÃ­skate rozloÅ¾enie vÅ¡etkÃ½ch kliknutÃ­ naprieÄ stimulom a poÄet respondentov, ktorÃ­ klikli na jednotlivÃ© hotspoty. Ä¾udia nemusia venovaÅ¥ toÄ¾ko Äasu hÄ¾adaniu odpovede a namiesto toho mÃ´Å¾u jednoducho odÃ­sÅ¥. V neposlednom rade dostanete odpovede na svoje ÄalÅ¡ie otÃ¡zky. OpÃ¤Å¥ platÃ­, Å¾e aj keÄ zÃ­skate veÄ¾a sprÃ¡vnych odpovedÃ­, ale odpovede naznaÄujÃº, Å¾e respondenti si neboli istÃ­ svojou voÄ¾bou alebo Å¾e Ãºlohy povaÅ¾ovali za Å¥aÅ¾kÃ©, mali by ste prehodnotiÅ¥ svoj nÃ¡vrh. OtÃ¡zky s voÄ¾nÃ½m textom mÃ´Å¾u tieÅ¾ poskytnÃºÅ¥ uÅ¾itoÄnÃ© informÃ¡cie o postojoch respondentov k vÃ¡Å¡mu produktu. Test prvÃ©ho kliknutia je ÃºÄinnÃ¡ metÃ³da na odhalenie problÃ©mov s pouÅ¾iteÄ¾nosÅ¥ou a oÄakÃ¡vanÃ­ pouÅ¾Ã­vateÄ¾ov. VhodnÃ½ je napr. pre nÃ¡vrhy pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­, ÄiastkovÃ½ch komponentov, ako sÃº formulÃ¡re alebo ponuky. Poskytuje moÅ¾nosÅ¥ pozrieÅ¥ sa na rÃ´zne sprÃ¡vanie pouÅ¾Ã­vateÄ¾ov/respondentov Å¡pecifickÃ© pre konkrÃ©tne Ãºlohy a pozorovaÅ¥ ich nezÃ¡visle od seba. TÃºto metÃ³du moÅ¾no pouÅ¾iÅ¥ v akejkoÄ¾vek fÃ¡ze nÃ¡vrhu, od poÄiatoÄnÃ½ch skÃ­c aÅ¾ po snÃ­mky obrazovky existujÃºcej webovej strÃ¡nky/aplikÃ¡cie."
115,153,0.634,Algebra a diskrÃ©tna  matematika,"12.11. KoÄ¾ko vÃ¡Å¾enÃ­ na rovnoramennÃ½ch vÃ¡hach je potrebnÃ© na nÃ¡jdenie Ä¾ahÅ¡ej faloÅ¡nej mince spomedzi Å¡tyroch mincÃ­? OpÃ­Å¡te algoritmus na nÃ¡jdenie tejto Ä¾ahÅ¡ej mince pri pouÅ¾itÃ­ tohto poÄtu vÃ¡Å¾enÃ­. Mince rozdelÃ­me na dve dvojice a tie porovnÃ¡me, zoberieme Ä¾ahÅ¡iu dvojicu a tÃº porovnÃ¡me. Potrebujeme teda dve porovnania. 12.12. KoÄ¾ko vÃ¡Å¾enÃ­ na rovnoramennÃ½ch vÃ¡hach je potrebnÃ© na nÃ¡jdenie faloÅ¡nej mince spomedzi Å¡tyroch mincÃ­, ktorÃ¡ mÃ´Å¾e byÅ¥ Ä¾ahÅ¡ia alebo Å¥aÅ¾Å¡ia ako ostatnÃ© tri? PretoÅ¾e sÃº 4 rÃ´zne vÃ½sledky na tÃºto testovaciu procedÃºru, potrebujeme aspoÅ dve vÃ¡Å¾enia, pretoÅ¾e jedno vÃ¡Å¾enie nÃ¡m mÃ´Å¾e daÅ¥ iba 3 moÅ¾nÃ© vÃ½sledky (ternÃ¡rny rozhodovacÃ­ strom vÃ½Å¡ky 1 mÃ¡ iba 3 listy). OznaÄme si mince pÃ­smenami A,B,C,D. PorovnÃ¡me mince A a B. PokiaÄ¾ sÃº v rovnovÃ¡he, faloÅ¡nÃ¡ minca je medzi druhÃ½mi dvoma. V tom prÃ­pade, porovnajte C s A, pokiaÄ¾ sÃº v rovnovÃ¡he, D je faloÅ¡nÃ¡ minca, keÄ nie, C je faloÅ¡nÃ¡. Na druhej strane, keÄ A a B nie sÃº v rovnovÃ¡he, jedna z nich je faloÅ¡nÃ¡. OpÃ¤Å¥ porovnajte C s A. KeÄ sÃº v rovnovÃ¡he, B je faloÅ¡nÃ¡, v opaÄnom prÃ­pade je A faloÅ¡nÃ¡. 12.13. KoÄ¾ko vÃ¡Å¾enÃ­ na rovnoramennÃ½ch vÃ¡hach je potrebnÃ© na nÃ¡jdenie faloÅ¡nej mince, ktorÃ¡ je Ä¾ahÅ¡ia ako ostatnÃ©, spomedzi 12 mincÃ­? PretoÅ¾e existuje 12 rozdielnych vÃ½sledkov testovacej procedÃºry, potrebujeme aspoÅ 3 vÃ¡Å¾enia, pretoÅ¾e 2 vÃ¡Å¾enia by nÃ¡m dali 9 moÅ¾nÃ½ch vÃ½sledkov (rozhodovacÃ­ strom hÄºbky 2 mÃ¡ iba 9 listov). RozdeÄ¾te mince na 3 skupiny po 4 minciach, a porovnajte dve skupiny. KeÄ sÃº vyvÃ¡Å¾enÃ©, faloÅ¡nÃ¡ minca je medzi ostatnÃ½mi Å¡tyrmi mincami. KeÄ nie sÃº v rovnovÃ¡he, faloÅ¡nÃ¡ minca je medzi Ä¾ahÅ¡ou Å¡tvoricou. Teraz mÃ´Å¾eme vyuÅ¾iÅ¥ cviÄenie 12.11, pomocou dvoch ÄalÅ¡Ã­ch vÃ¡Å¾enÃ­ urÄÃ­me faloÅ¡nÃº mincu. 12.14. KtorÃ½ z nasledujÃºcich kÃ³dov je prefixovÃ½ kÃ³d? (a) a: 11, e: 00, t: 10, s: 01 Je prefixovÃ½ kÃ³d, Å¾iaden z kÃ³dov nie je zaÄiatkom inÃ©ho kÃ³du. (b) a: 0, e: 1, t: 01, s: 001 Nie je prefixovÃ½ kÃ³d, naprÃ­klad kÃ³d pre a je zaÄiatkom kÃ³du pre s. (c) a: 101, e: 11, t: 001, s: 011, n: 010 Je prefixovÃ½ kÃ³d, Å¾iaden z kÃ³dov nie je zaÄiatkom inÃ©ho kÃ³du. (d) a: 010, e: 11, t: 011, s: 1011, n: 1001, p: 10101 Je prefixovÃ½ kÃ³d, Å¾iaden z kÃ³dov nie je zaÄiatkom inÃ©ho kÃ³du. 12.15. SkonÅ¡truujte binÃ¡rny strom s prefixovÃ½mi kÃ³dmi reprezentujÃºcimi tieto kÃ³dovÃ© schÃ©my: (a) a: 11, e: 0, t: 101, s: 100 (b) a: 1, e: 01, t: 001, s: 0001, n: 00001 (c) a: 1010, e: 0, t: 11, s: 1011, n: 1001, p: 10001"
190,144,0.634,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"finanÄnÃ½ch nÃ¡kladov na projekt. Je viac neÅ¾ jasnÃ©, Å¾e sa tÃ½m zniÅ¾uje rentabilita celÃ©ho projektu, samozrejme v prÃ­pade ak sa jednÃ¡ o komerÄnÃ½ projekt. OpaÄnÃ½m extrÃ©mom je plÃ¡n, ktorÃ½ rozsahom niekoÄ¾konÃ¡sobne prevyÅ¡uje rozsah projektu. V takomto prÃ­pade je sÃ­ce riziko oneskorenÃ©ho ukonÄenia projektu oveÄ¾a menÅ¡ie, ale priveÄ¾mi rozsiahly plÃ¡n mÃ´Å¾e znaÄne zbyrokratizovaÅ¥ rieÅ¡enie aj toho najjednoduchÅ¡ieho projektu. PriveÄ¾mi rozsiahly plÃ¡n nadmerne zamestnÃ¡va Ä¾udÃ­, ktorÃ­ sa tak nemÃ´Å¾u venovaÅ¥ rieÅ¡eniu projektu, ÄÃ­m dochÃ¡dza k plytvaniu Ä¾udskÃ½mi zdrojmi a umelÃ©mu predlÅ¾ovaniu Äasu na rieÅ¡enie projektu. TÃº sprÃ¡vnu cestu je v tomto prÃ­pade moÅ¾nÃ© nÃ¡jsÅ¥ dÃ´kladnou analÃ½zou rozsahu projektu, ktorÃ¡ je taktieÅ¾ formou plÃ¡novania. SprÃ¡vne naplÃ¡novanie rozsahu projektu je zÃ¡kladnÃ½m kameÅom dobre zostavenÃ©ho plÃ¡nu, takÅ¾e niet divu, Å¾e je zahrnutÃ© medzi zÃ¡kladnÃ© procesy plÃ¡novania [1]. Na tÃºto problematiku priamo nadvÃ¤zuje aj spojitosÅ¥ medzi veÄ¾kosÅ¥ou plÃ¡nu a veÄ¾kosÅ¥ou tÃ­mu, ktorÃ½ mÃ¡ plÃ¡novanÃ½ projekt realizovaÅ¥. Nechcem tÃ½m naznaÄiÅ¥, Å¾e projekty rieÅ¡enÃ© v malÃ½ch tÃ­moch si nezaslÃºÅ¾ia kvalitnÃ© a rozsiahle Na zostavenie plÃ¡ny, ale chcem upozorniÅ¥, Å¾e ak sa pri plÃ¡novanÃ­ pozabudne na veÄ¾kosÅ¥ kvalitnÃ©ho tÃ­mu, mÃ´Å¾e nÃ¡sledne vzniknÃºÅ¥ problÃ©m pri plÃ¡novanÃ­ Ä¾udskÃ½ch zdrojov. plÃ¡nu projektu Ãkony spojenÃ© s udrÅ¾iavanÃ­m plÃ¡nu sa tak mÃ´Å¾u javiÅ¥ ako Äasovo veÄ¾mi nÃ¡- treba ovlÃ¡daÅ¥ roÄnÃ© a v koneÄnom dÃ´sledku zbytoÄnÃ©. NajlepÅ¡Ã­m kÄ¾ÃºÄom k zvlÃ¡dnutiu niekoÄ¾ko oblastÃ­ tÃ½chto problÃ©mov je znalosÅ¥ problematiky a skÃºsenosÅ¥ s vytvÃ¡ranÃ­m plÃ¡nov manaÅ¾mentu pre rÃ´zne projekty, realizovanÃ© v rÃ´znych tÃ­moch. projektu."
135,52,0.634,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.3 Obaova Pri vÃ½voji softvÃ©rovÃ½ch systÃ©mov sa asto stretÃ¡vame s poÅ¾iadavkou na vzÃ¡jomnÃº spoluprÃ¡cu sÃºiastok, ktorÃ© boli vyvinutÃ© nezÃ¡visle od seba. Napriek tomu, Å¾e z pohadu poÅ¾adovanej a poskytovanej funknosti by takÃ©to sÃºiastky mohli spolupracova, nekompatibilita rozhranÃ­ vo vÃ¤Å¡ine prÃ­padov ich spoluprÃ¡ci zabrauje. Vzhadom na to, Å¾e zmena jednej alebo oboch sÃºiastok, ktorÃ¡ by kompatibilitu rozhranÃ­ zaistila, nie je niekedy moÅ¾nÃ¡ alebo vhodnÃ¡, ako rieÅ¡enie sa asto pouÅ¾Ã­va softvÃ©rovÃ½ vzor Obaova (angl. Wrapper)."
190,65,0.634,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"prÃ¡ve danou ÄasÅ¥ou problematiky. PresnÃ© definovanie vstupov a vÃ½stupov, priradenie Å¡pecifickej Ãºlohy, ktorÃº uchÃ¡dzaÄ o prÃ¡cu vykonÃ¡va sÃº charakteristikami prÃ¡ve sekvenÄnÃ©ho archetypu. Tieto rozhodnutia mÃ´Å¾u v podstatnej miere uÄ¾ahÄiÅ¥ novÃ©mu zamestnancovi integrÃ¡ciu do projektu a do tÃ­mu. V tejto situÃ¡cii sa mÃ´Å¾e oprieÅ¥ o pouÅ¾itie svojich zruÄnostÃ­, ktorÃ© povaÅ¾uje za prÃ­nos pre tÃ­m. MotivÃ¡cia podmienenÃ¡ pocitom uÅ¾itoÄnosti je pÃ¡kou, ktorÃ¡ je v mnohÃ½ch prÃ­padoch kÄ¾ÃºÄom k ÃºspeÅ¡nej budÃºcnosti. SamotnÃ½ tÃ­m spoÄiatku neregistruje novÃ©ho zamestnanca ako prÃ­nos, pretoÅ¾e je s nÃ­m viac prÃ¡ce ako ÃºÅ¾itku. Treba sa mu venovaÅ¥, komunikovaÅ¥ s nÃ­m, prÃ¡cu, ktorÃº vykonÃ¡va by vo veÄ¾a prÃ­padoch skÃºsenejÅ¡Ã­ zamestnanci spravili oveÄ¾a rÃ½chlejÅ¡ie a moÅ¾no aj kvalitnejÅ¡ie. RÃ©Å¾ia, ktorÃº treba v sÃºvislosti s novÃ½m zamestnancom vynaloÅ¾iÅ¥ postupom Äasu klesÃ¡ nepriamoÃºmerne ako rastÃº skÃºsenosti tohto zamestnanca. Pridanie novÃ©ho pracovnÃ­ka do tÃ­mu sekvenÄnÃ©ho archetypu mÃ¡ charakter investÃ­cie do budÃºcnosti. Je otÃ¡zne ako je tento archetyp vÃ½hodnÃ½ z dlhodobÃ©ho hÄ¾adiska. Riadenie a kontrola mÃ´Å¾u v urÄitom prÃ­pade pÃ´sobiÅ¥ kontraproduktÃ­vne. Tam, kde sa vyÅ¾aduje takÃ½to typ organizÃ¡cie alebo je to najviac vyhovujÃºci spÃ´sob prÃ¡ce pre Älenov tÃ­mu, nie je spravidla Äo rieÅ¡iÅ¥. No v princÃ­pe mÃ´Å¾eme sekvenÄnÃ½ archetyp analogicky prirovnaÅ¥ k Å¡tÃ¡tu s direktÃ­vnym spÃ´sobom riadenia a kontrolou. StojÃ­ teda za zmienku si poloÅ¾iÅ¥ otÃ¡zku, Äi je tento spÃ´sob organizÃ¡cie v danom prÃ­pade najlepÅ¡Ã­. Tento archetyp je vÃ½hodnÃ© pouÅ¾iÅ¥ v prÃ­pade, keÄ medzi Älenmi tÃ­mu sÃº veÄ¾kÃ© rozdiely v skÃºsenostiach. Vtedy spravidla skÃºsenejÅ¡Ã­ Älenovia tÃ­mu sa venujÃº Å¡pecifikovaniu Ãºloh a riadeniu ostatnÃ½ch Älenov tÃ­mu."
265,230,0.633,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Kapitola 2. Etapy Å¾ivotnÃ©ho cyklu softvÃ©ru â¢ Absencia manaÅ¾mentu oÄakÃ¡vanÃ­. VeÄ¾mi Äasto podceÅovanÃ½ aspekt rokovania so zÃ¡kaznÃ­kom. ZÃ¡kaznÃ­k mÃ¡ od prvej chvÃ­le, keÄ identifikuje potrebu nejakÃ½ softvÃ©r vytvoriÅ¥, urÄitÃº predstavu, ako mÃ¡ softvÃ©r vyzeraÅ¥ a Äo vÅ¡etko mu softvÃ©r prinesie. Tieto oÄakÃ¡vania mÃ´Å¾u byÅ¥ prÃ­liÅ¡ veÄ¾kÃ©. AÅ¾ tak, Å¾e ich ani najlepÅ¡ia softvÃ©rovÃ¡ firma za danÃ© peniaze nebude vedieÅ¥ uspokojiÅ¥. OÄakÃ¡vania sa vÅ¡ak mÃ´Å¾u meniÅ¥ a je jedna z prvÃ½ch Ãºloh analytika aby po tom, Äo zistÃ­, Å¾e oÄakÃ¡vania zÃ¡kaznÃ­ka sÃº objektÃ­vne neprimeranÃ©, tieto Äo najviac skorigoval a ak to nebude moÅ¾nÃ©, z projektu vycÃºval. PokiaÄ¾ k takejto korekcii nedÃ´jde, mÃ´Å¾e Ä¾ahko nastaÅ¥ veÄ¾mi neprÃ­jemnÃ½ scenÃ¡r, keÄ sÃ­ce vznikne realistickÃ¡ Å¡pecifikÃ¡cia, v ktorej nebude vidieÅ¥ problÃ©m ani zÃ¡kaznÃ­k ani zhotoviteÄ¾, no v skutoÄnosti bude existovaÅ¥ diskrepancia v oÄakÃ¡vaniach a veÄ¾kÃ© rozÄarovanie na konci projektu. V takom prÃ­pade je ÄastÃ½ jav to, Å¾e firma uÅ¾ druhÃ½krÃ¡t od rovnakÃ©ho zÃ¡kaznÃ­ka zÃ¡kazku nedostane."
369,51,0.633,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"pretoÅ¾e uchovÃ¡va vÅ¡etky (aj historickÃ©18) manÅ¾elstvÃ¡. RieÅ¡enie je analogickÃ© ako v prvom prÃ­pade: vytvorenie Å¡pecializovanej triedy pre opakujÃºce sa Ãºdaje. V modeli sa to prejavÃ­ tak, Å¾e vznikne novÃ¡ trieda (ManÅ¾elstvo), ktorÃ¡ bude reprezentovaÅ¥ pÃ´vodnÃº relÃ¡ciu medzi triedami (obr. 1.12). Trieda, ktorÃ¡ reprezentuje relÃ¡ciu, Äasto mÃ¡va aj svoje Å¡pecifickÃ© atribÃºty. V naÅ¡om prÃ­klade je takÃ½mto atribÃºtom dÃ¡tum sobÃ¡Å¡a, ktorÃ½ je Å¡pecifickÃ½ pre kaÅ¾dÃ© manÅ¾elstvo."
184,44,0.633,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Doba odozvy Doba odozvy predstavuje mieru oneskorenia, ktorÃ© mÃ¡ aplikÃ¡cia pri spracovanÃ­ transakciÃ­, priÄom je najÄastejÅ¡ie spÃ¡janÃ¡ s Äasom za ktorÃ½ aplikÃ¡cia reaguje na vstupy. RÃ½chla doba odozvy umoÅ¾Åuje pouÅ¾Ã­vateÄ¾om pracovaÅ¥ so systÃ©mom efektÃ­vne. VÃ½bornÃ½ prÃ­klad je skladovÃ½ systÃ©m veÄ¾kÃ©ho hypermarketu, kde rÃ½chla odpoveÄ pokladnÃ­ na zosnÃ­manÃ½ ÄiarovÃ½ kÃ³d tovaru, obsahujÃºca jeho cenu, znamenÃ¡, Å¾e zÃ¡kaznÃ­ci mÃ´Å¾u byÅ¥ obslÃºÅ¾enÃ­ rÃ½chlo. DÃ´sledkom sÃº spokojnÃ­ zÃ¡kaznÃ­ci aj predajcovia. Podobne ako v predchÃ¡dzajÃºcom prÃ­pade je dÃ´leÅ¾itÃ© rozliÅ¡ovaÅ¥ priemernÃº dobu odozvy a garantovanÃº dobu odozvy. VybranÃ© aplikÃ¡cie mÃ´Å¾e poÅ¾adovaÅ¥, aby vÅ¡etky poÅ¾iadavky boli spracovanÃ© do danÃ©ho ÄasovÃ©ho limitu, ktorÃ½ zodpovedÃ¡ garantovanej dobe odozvy. InÃ© aplikÃ¡cie zvyÄajne udÃ¡vajÃº priemernÃº dobu spracovania poÅ¾iadavky, ÄÃ­m umoÅ¾ÅujÃº dlhÅ¡iu dobu odozvy v Äase vysokej zÃ¡Å¥aÅ¾e systÃ©mu. V takomto prÃ­pade sa Äasto udÃ¡va hornÃ¡ hranica na dobu odozvy, napr. 90% poÅ¾iadaviek musÃ­ byÅ¥ spracovanÃ½ch do troch sekÃºnd, priÄom Å¾iadna poÅ¾iadavka nemÃ´Å¾e byÅ¥ spracÃºvanÃ¡ dlhÅ¡ie ako 10 sekÃºnd."
115,159,0.631,Algebra a diskrÃ©tna  matematika,"13.4. PouÅ¾ite Kruskalov algoritmus na nÃ¡jdenie minimÃ¡lnej kostry pri grafoch z prÃ­kladu 13.3 a urÄite jej vÃ¡hu. RieÅ¡enie: NÃ¡jdenÃ© kostry sÃº rovnakÃ©, ale keby niektorÃ© z hrÃ¡n s vyÅ¡Å¡Ã­mi vÃ¡hami mali rovnakÃ© vÃ¡hy, potom tak Kruskalov, aj Primov algoritmus by mohli viesÅ¥ k rozdielnym kostrÃ¡m kvÃ´li nÃ¡hodnosti vÃ½beru u rovnako ohodnotenÃ½ch hrÃ¡n. 13.5. Nech T je minimÃ¡lna kostra ohodnotenÃ©ho grafu G. UrÄte, Äi nasledujÃºce tvrdenia sÃº pravdivÃ©: (a) VÃ¡ha kaÅ¾dej hrany patriacej do T je menÅ¡ia alebo rovnÃ¡ vÃ¡he Ä¾ubovoÄ¾nej hrany z G nepatriacej do T. KontraprÃ­klad"
190,5,0.631,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"softvÃ©r je vnorenÃ½ do neustÃ¡le sa meniaceho sveta, softvÃ©r je spravidla ten element , ktorÃ½ keÄ sa nieÄo v naÅ¡om svete zmenÃ­, treba prispÃ´sobiÅ¥, softvÃ©r aj vzhÄ¾adom na svoju ânehmotnÃºâ povahu a zloÅ¾itosÅ¥ sa nedÃ¡ pri nÃ¡vrhu (vo fÃ¡ze znÃ¡mej v inÅ¾inierskych disciplÃ­nach ako projektovanie) zviditeÄ¾niÅ¥ tak, aby sme vedeli zachytiÅ¥ vÅ¡etky jeho aspekty (ako to naprÃ­klad vieme pri projektovanÃ­ stavieb)."
236,40,0.63,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Po umiestnenÃ­ tohoto prÃ­kazu v preambule dokumentu, budÃº vykonanÃ© iba tie prÃ­kazy \include, ktorÃ© sÃº uvÃ¡dzanÃ© v \includeonly. ZapamÃ¤tajte si, Å¾e v nÃ¡zve sÃºboru (menosÃºboru) sa nesmie vyskytovaÅ¥ Äiarka ani medzera. PrÃ­kaz \include zaÄÃ­na tlaÄ vkladanÃ©ho textu na novej strane. Toto je nÃ¡pomocnÃ©, keÄ pouÅ¾Ã­vate \includeonly, pretoÅ¾e zalamovania strÃ¡n (pagebreaks) sa neposÃºvajÃº ani v prÃ­pade, ak niektorÃ© z vkladanÃ½ch sÃºborov vynechÃ¡me. Niekedy to vÅ¡ak nemusÃ­ byÅ¥ Å¾iadÃºce. V takom prÃ­pade mÃ´Å¾ete pouÅ¾iÅ¥ prÃ­kaz \input{menosÃºboru}"
190,399,0.63,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pod pojmom testovanie si vÃ¤ÄÅ¡ina z nÃ¡s predstavÃ­ vykonÃ¡vanie softvÃ©ru za ÃºÄelom overenia jeho sprÃ¡vnosti. AlternatÃ­vnou formou testovania (alebo presnejÅ¡ie kontroly kvality) je ukÃ¡zanie prÃ¡ce kolegovi za ÃºÄelom objavenia chÃ½b a moÅ¾nostÃ­ zlepÅ¡enia. KÃ½m tradiÄnÃ© testovanie je obmedzenÃ© na overovanie vlastnostÃ­ spustiteÄ¾nÃ©ho kÃ³du, prehliadky mÃ´Å¾u byÅ¥ (a mali by byÅ¥) pouÅ¾itÃ© na vÅ¡etky Äasti procesu vÃ½voja: od analÃ½zy cez nÃ¡vrh aÅ¾ po tvorbu dokumentÃ¡cie. Za chyby sa platÃ­ a v softvÃ©rovom inÅ¾inierstve sa za chyby platÃ­ tÃ½m viac, ÄÃ­m neskorÅ¡ie sa odhalia. TroÅ¡ka matematiky ukÃ¡Å¾e, Å¾e najviac uÅ¡etrÃ­me na chybÃ¡ch, ktorÃ© odhalÃ­me Äo najskÃ´r â a to sÃº chyby v Å¡pecifikÃ¡cii poÅ¾iadaviek. NiÄ vÅ¡ak nie je zadarmo, a to platÃ­ aj pre prehliadky. Na jednej strane uÅ¡etrÃ­me na chybÃ¡ch, na druhej strane stratÃ­me Äas a prostriedky na ich hÄ¾adanie. Prehliadky mÃ´Å¾u âzhltnÃºÅ¥â aÅ¾ 5 â 15% vÅ¡etkÃ½ch nÃ¡kladov na projekt [6]. Napriek tomu sa ukazuje, Å¾e vÃ½hody Äaleko prevÃ¡Å¾ia nÃ¡klady. Prehliadky skracujÃº dobu potrebnÃº na vÃ½voj tÃ½m, Å¾e skracujÃº dobu potrebnÃº na integrÃ¡ciu a redukujÃº Äas potrebnÃ½ na testovanie, pretoÅ¾e do finÃ¡lneho testovania sa dostÃ¡va menej chybovÃ½ produkt. VyÅ¡Å¡ia kvalita finÃ¡lneho produktu tieÅ¾ skracuje Äas potrebnÃ½ na ÃºdrÅ¾bu. Äas, ktorÃ½ by bolo treba venovaÅ¥ hÄ¾adaniu a opravovaniu chÃ½b, je tak moÅ¾nÃ© venovaÅ¥ vÃ½voju novÃ½ch funkciÃ­. SamotnÃ© testovanie softvÃ©ru mÃ¡ len obmedzenÃ½ efekt. PriemernÃ½ podiel odhalenÃ½ch chÃ½b je len 25% pre testy jednotiek softvÃ©ru (angl. unit tests), 35% pre funkÄnÃ© testy a 45% pre integraÄnÃ© testy. Pre porovnanie, priemernÃ¡ efektivita prehliadok kÃ³du je 55 aÅ¾ 60% [5]. PodÄ¾a inej Å¡tÃºdie, typickÃ½ programÃ¡tor nÃ¡jde za hodinu testovanÃ­m 2-4 chyby, ale 6-10 chÃ½b pri prehliadke kÃ³du [3]. Je to spÃ´sobenÃ© aj tÃ½m, Å¾e ak sa pri testovanÃ­ odhalÃ­ chyba, treba venovaÅ¥ Äas hÄ¾adaniu prÃ­Äiny. Pri prehliadke kÃ³du sa vÅ¡ak hÄ¾adajÃº priamo prÃ­Äiny chyby, nie len symptÃ³my. Prehliadky kÃ³du vÅ¡ak neslÃºÅ¾ia ako nÃ¡hrada testovania, ale len ako doplnok. Tieto dve techniky pomÃ¡hajÃº odhaÄ¾ovaÅ¥ rÃ´zne druhy chÃ½b, sÃº aplikovateÄ¾nÃ© v rÃ´znych fÃ¡zach projektu a vyÅ¾adujÃº rÃ´zne druhy a Ãºrovne skÃºsenostÃ­. Testovanie ukazuje reÃ¡lne sprÃ¡vanie systÃ©mu, nie modelovÃ© sprÃ¡vanie,"
94,92,0.63,Sprievodca svetom vedeckÃ©ho publikovania,"pozitÃ­vne vÃ½sledky. Tento jav vystavoval morÃ¡lne pruÅ¾nÃ½ch vÃ½skumnÃ­kov pokuÅ¡eniu vÃ½sledky upraviÅ¥, alebo testovaÅ¥ rÃ´znymi spÃ´sobmi znova a znova, kÃ½m z nich nevziÅ¡lo nieÄo âpublikovateÄ¾nÃ©â. Å tatistici vÅ¡ak uÅ¾ celÃ© desaÅ¥roÄia upozorÅujÃº, Å¾e ak literatÃºra negatÃ­vne dÃ¡ta neobsahuje, vytvÃ¡ra skreslenÃ½ obraz reality. ÄalÅ¡Ã­ a ÄalÅ¡Ã­ vedci sa mÃ´Å¾u zbytoÄne vydaÅ¥ tou istou slepou uliÄkou, lebo nikto z ich predchodcov svoj âneÃºspechâ nepublikoval. PrÃ­padnÃ¡ meta-analÃ½za mÃ´Å¾e preto dospieÅ¥ k mylnÃ½m zÃ¡verom. Ak niekomu vyjde faloÅ¡ne pozitÃ­vny vÃ½sledok (napr. nÃ¡hodou si vyberie zo skÃºmanej skupiny nereprezentatÃ­vnu vzorku), nie sÃº k dispozÃ­cii inÃ© vÃ½sledky, ktorÃ© by ho korigovali. NepravdivÃ© tvrdenie sa bude v literatÃºre vyskytovaÅ¥ ako fakt a mÃ´Å¾e trvaÅ¥ dlho, kÃ½m ho niekto uvedie na pravÃº mieru. Aby sa negatÃ­vne vÃ½sledky naÄalej nestrÃ¡cali v zÃ¡suvkÃ¡ch laboratÃ³riÃ­, vznikli zvlÃ¡Å¡tne Å¡pecializovanÃ© Äasopisy â Journal of Negative Results in Biomedicine (2002 â 2017, jeho strÃ¡nka dnes odkazuje autorov negatÃ­vnych vÃ½sledkov na BMC Research Notes), v psycholÃ³gii Journal of Articles in Support of the Null Hypothesis (2002â), Äalej Journal of Negative Results â Ecology and Evolutionary Biology (2004â), Journal of Pharmaceutical Negative Results (2010â), New Negatives in Plant Science (2014â) alebo skupina The All Results Journals s Äasopismi Å¡pecializovanÃ½mi na chÃ©miu (2010â), biolÃ³giu (2010â), fyziku (2011â) a nanotechnolÃ³giu (2015â). NegatÃ­vnym vÃ½sledkom a Å¡tÃºdiÃ¡m overujÃºcim predchÃ¡dzajÃºce experimenty sa nebrÃ¡nia ani interdisciplinÃ¡rne megaÄasopisy ako PLOS ONE alebo F1000Research."
196,81,0.63,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"kcionalita resp. sprÃ¡vanie sa LATEXu. PrincipiÃ¡lne obsahujÃº tÃº cÌastâ zdrojovÃ©ho textu ktorÃ¡ by sa nachÃ¡dzala v preambule. Aby preambula a s nÌou celÃ½ dokument nevyzerali hrozne zloÅ¾ito a neprehlâadne mÃ¡me tu balÃ­ky. SÃº to sÃºbory s prÃ­ponou .sty Å¡tÃ½ly, balÃ­ky prÃ­padne .cls triedy. Rozdiel medzi nimi je najmÃ¤ v tom, Å¾e kaÅ¾dÃ½ dokument je iba jednej triedy definovanej hnedâ na zacÌiatku na rozdiel od balÃ­kov, ktorÃ½ch pouÅ¾itie v dokumente je takmer neobmedzenÃ©. Je tomu tak podobne ako pri dedenÃ­ v Jave, ktorÃ¡ pouÅ¾Ã­va triedy a rozhrania. BalÃ­ky sÃº tÃ½mi rozhraniami. Je bez pochyby zretelânÃ¡ snaha cloud computing rieÅ¡enÃ­ poskytovatâ maximÃ¡lny komfort bez potreby staratâ sa o balÃ­ky. NiektorÃ© LATEX distribÃºcie majÃº predinÅ¡talovanÃ½ netriviÃ¡lny sÃºbor balÃ­kov. Syntax na pouÅ¾itie balÃ­ka je nasledovnÃ¡: \usepackage[options]{balÃ­k} PrÃ­kaz \usepackage na pouÅ¾itie balÃ­ka mÃ¡ deklaratÃ­vny charakter a mÃ´Å¾e sa uvÃ¡dzatâ exkluzÃ­vne v preambule. Okrem nÃ¡zvu, ktorÃ½ je povinnÃ½m parametrom uvedenÃ½m v zloÅ¾enÃ½ch zÃ¡tvorkÃ¡ch je v hranatÃ½ch zÃ¡tvorkÃ¡ch moÅ¾nÃ© uviestâ zoznam nepovinnÃ½ch parametrov, ktorÃ© aktivujÃº konkrÃ©tne sprÃ¡vanie sa balÃ­ka. PokrocÌilou technikou je vytvorenie vlastnÃ©ho balÃ­ka."
265,133,0.629,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Predstavte si, Å¾e vyvÃ­jate vnÃºtrofiremnÃº aplikÃ¡ciu na riadenie procesov vÃ½roby automobilov. AkÃ© poradie priorÃ­t (a preÄo) by ste priradili nasledujÃºcim hÄ¾adiskÃ¡m kvality pri vÃ½voji tohto softvÃ©ru: pouÅ¾iteÄ¾nosÅ¥, robustnosÅ¥, bezpeÄnosÅ¥ voÄi okoliu, modifikovateÄ¾nosÅ¥. V predchÃ¡dzajÃºcich prÃ­kladoch hrala pouÅ¾iteÄ¾nosÅ¥ neotrasiteÄ¾ne najdÃ´leÅ¾itejÅ¡iu Ãºlohu spomedzi uvedenÃ½ch vlastnostÃ­. HneÄ sa preto natÃ­ska otÃ¡zka, Äi to tak bude aj v tomto prÃ­pade. PouÅ¾iteÄ¾nosÅ¥ je skutoÄne vÃ½znamnÃ¡ vlastnosÅ¥. Je vÅ¡ak zakaÅ¾dÃ½m kritickÃ¡? UrÄite nie. VeÄ aj my sami ÄastokrÃ¡t pouÅ¾Ã­vame softvÃ©r, s ktorÃ©ho pouÅ¾iteÄ¾nosÅ¥ou nie sme Ãºplne spokojnÃ­, no nemÃ¡me na vÃ½ber a ak danÃ½ softvÃ©r svoje funkcionÃ¡lne poÅ¾iadavky napÄºÅa, ako pouÅ¾Ã­vatelia sa s tÃ½m zmierime (prÃ­klady sÃº subjektÃ­vne, no je pravdepodobnÃ©, Å¾e sa ÄitateÄ¾ v niektorÃ½ch nÃ¡jde: internet banking aplikÃ¡cie, akademickÃ© informaÄnÃ© systÃ©my, operaÄnÃ© systÃ©my, vÃ½vojÃ¡rske nÃ¡stroje a pod.). To, Äo robÃ­ pouÅ¾iteÄ¾nosÅ¥ v niektorÃ½ch prÃ­padoch kritickou, je stav, keÄ pouÅ¾iteÄ¾nosÅ¥ priamo ovplyvÅuje biznis a finanÄnÃ© vÃ½nosy z predaja a pouÅ¾Ã­vania softvÃ©ru. PlatÃ­ to naprÃ­klad pre prÃ­pad e-obchodu Äi hry, avÅ¡ak v prÃ­pade vnÃºtropodnikovej aplikÃ¡cie na riadenie vÃ½roby automobilov to tak nie je. To, Äi sa vnÃºtropodnikovÃ¡ aplikÃ¡cia bude pouÅ¾Ã­vaÅ¥, nezÃ¡visÃ­ od toho, Äi ju pouÅ¾Ã­vateÄ¾ (zamestnanec) na prvÃ½ pohÄ¾ad pochopÃ­ a zvlÃ¡dne pouÅ¾Ã­vaÅ¥. Jednoducho ju bude musieÅ¥ pouÅ¾iÅ¥ a ak to bude vyÅ¾adovaÅ¥ tÃ½Å¾dennÃ© Å¡kolenie (niÄ neobvyklÃ©"
265,196,0.629,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PoznÃ¡mka: vÅ¾dy zÃ¡leÅ¾Ã­ na kontexte v ktorom aktivitÃ¡m dÃ¡vame nÃ¡zvy. Hoci otÃ¡zka uvÃ¡dza o akÃ½ projekt ide, ako informÃ¡cia to nemusÃ­ staÄiÅ¥. NiektorÃ© prÃ­klady preto mÃ´Å¾u byÅ¥ diskutabilnÃ©. ÄastÃ© chyby, robenÃ© pri identifikÃ¡cii aktivÃ­t v nich vÅ¡ak urÄite moÅ¾no vidieÅ¥. â¢ ÃdrÅ¾ba databÃ¡zy (nesprÃ¡vne, nÃ¡zov obsahuje pojem softvÃ©rovÃ©ho inÅ¾inierstva, navyÅ¡e je vÃ¡gny; radÅ¡ej vyjadrime, Äo sa v skutoÄnosti bude ro-"
190,108,0.629,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"BÃ¡zy poznatkov predstavujÃº stÃ¡ly zdroj informÃ¡ciÃ­ v tÃ­me. Mali by slÃºÅ¾iÅ¥ predovÅ¡etkÃ½m na zdieÄ¾anie informÃ¡ciÃ­, ktorÃ© presahujÃº rÃ¡mec jednÃ©ho projektu. Ide naprÃ­klad o firemnÃ© know-how, rÃ´zne tipy na rieÅ¡enie beÅ¾nÃ½ch problÃ©mov, pravidlÃ¡ a Å¡tandardy pouÅ¾Ã­vanÃ© v rÃ¡mci tÃ­mu. JednotlivÃ­ Älenovia tÃ­mu si mÃ´Å¾u nÃ¡jsÅ¥ informÃ¡cie vÅ¾dy, keÄ ich potrebujÃº vÄaka podpore vyhÄ¾adÃ¡vania. Jeden z modernÃ½ch spÃ´sobov udrÅ¾iavania bÃ¡zy poznatkov je vyuÅ¾itie kolaboratÃ­vneho systÃ©mu, do ktorÃ©ho mÃ´Å¾u prispievaÅ¥ vÅ¡etci Älenovia tÃ­mu. Tento spÃ´sob prinÃ¡Å¡a ale problÃ©my tÃ½kajÃºce sa zodpovednosti za udrÅ¾iavanie aktuÃ¡lnosti informÃ¡ciÃ­. VÃ½hodou takÃ©hoto uchovÃ¡vania informÃ¡ciÃ­, ktorÃ¡ sa prejavÃ­ pri dlhÅ¡Ã­ch projektoch, je najmÃ¤ nezÃ¡vislosÅ¥ informÃ¡ciÃ­ od prÃ­chodu a odchodu Älenov tÃ­mu."
190,297,0.629,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Å¾Ã©r firmy rozhodne vyvÃ­jaÅ¥ systÃ©m nad touto databÃ¡zou. KaÅ¾dÃ½ si zrejme vie predstaviÅ¥, akÃ© nÃ¡sledky by to malo, keby bol tento odhad nesprÃ¡vny â systÃ©m mÃ´Å¾ete v tom lepÅ¡om prÃ­pade celÃ½ prerobiÅ¥, v horÅ¡om prÃ­pade zahodiÅ¥. Hop alebo trop. Je to ako keÄ burzovÃ½ maklÃ©r nakupuje a predÃ¡va akcie. Najprv musÃ­ maÅ¥ vlastnÃ© peniaze, ktorÃ© sa chystÃ¡ riskovaÅ¥, a potom vsadÃ­ na zÃ¡klade svojich skÃºsenostÃ­ a najmÃ¤ odhadu vÃ½voja na nejakÃº kartu â spoloÄnosÅ¥ alebo viacero spoloÄnostÃ­ vo vybranom odvetvÃ­. Samozrejme, ÄÃ­m viac riskuje, tÃ½m viac mÃ´Å¾e zÃ­skaÅ¥, ale aj stratiÅ¥."
94,161,0.629,Sprievodca svetom vedeckÃ©ho publikovania,"6.3 OtvorenÃ© publikovanie Existuje niekoÄ¾ko zÃ¡kladnÃ½ch modelov, ako uverejÅovaÅ¥ otvorenÃ½ obsah. KaÅ¾dÃ½ mÃ¡ svoje vÃ½hody a nevÃ½hody, svojich obdivovateÄ¾ov aj kritikov (Abadal 2013). PoÄiatoÄnÃ© spory o najvhodnejÅ¡Ã­ spÃ´sob, ako dosiahnuÅ¥ otvorenÃ½ prÃ­stup, sa zmenili na paralelnÃ½ rozvoj oboch (hoci diskusia neustÃ¡va â prÃ­kladom je blog Michaela Eisena na tÃ©mu âpomÃ½lenostiâ zelenej cesty a odpoveÄ Stevana Harnada (Eisen 2015)). ZdÃ¡ sa, Å¾e funkÄnÃ½ publikaÄnÃ½ ekosystÃ©m potrebuje diverzitu, aby si autori mohli vybraÅ¥ spÃ´sob zverejnenia svojej prÃ¡ce, ktorÃ½ najlepÅ¡ie vyhovuje ich situÃ¡cii. ZÃ¡kladnÃ© charakteristiky jednotlivÃ½ch ciest k otvorenÃ©mu prÃ­stupu zahÅÅa obrÃ¡zok 6.1."
265,61,0.629,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Inkrementom oznaÄujeme nejakÃ½ prÃ­rastok k softvÃ©ru. MÃ´Å¾e Ã­sÅ¥ o novÃº funkciu, rozÅ¡Ã­renie existujÃºcej, pridanie novej sÃºÄiastky, rozÅ¡Ã­renie databÃ¡zy a podobne. Inkrementy mÃ´Å¾u nadobÃºdaÅ¥ veÄ¾kosti od veÄ¾mi malÃ½ch (vÃ½sledky pÃ¡r hodinovej prÃ¡ce jednÃ©ho programÃ¡tora) po veÄ¾mi veÄ¾kÃ© (vÃ½sledky niekoÄ¾komesaÄnej prÃ¡ce tÃ­mu Ä¾udÃ­). Inkrement mÃ´Å¾e byÅ¥ aj niekoÄ¾ko riadkov programovÃ©ho kÃ³du, novÃ¡ kapitola v dokumentÃ¡cii alebo aj zmazanie databÃ¡zovej tabuÄ¾ky."
205,42,0.629,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","V tejto Å¡tÃºdii okrem inÃ©ho opÃ­sali tzv. motÃ½likovÃ© rozdelenie webu. OznaÄenie pochÃ¡dza z faktu, Å¾e toto rozdelenie graficky znÃ¡zornili v podobe motÃ½lika do pÃ¡nskeho obleku, ako je vidieÅ¥ na obrÃ¡zku 4. Tento motÃ½lik vznikol analÃ½zou webovÃ½ch strÃ¡nok. Od roku 2000, keÄ poznatky publikovali, analÃ½zu niekoÄ¾kokrÃ¡t zopakovali, priÄom percentuÃ¡lne podiely jednotlivÃ½ch zloÅ¾iek sa lÃ­Å¡ili iba minimÃ¡lne a narastal iba poÄet strÃ¡nok. Aj napriek tomu ide v tomto prÃ­pade iba o nÃ¡Ärt toho, ako by takÃ¡to Å¡truktÃºra mohla vyzeraÅ¥, keÄÅ¾e sa na webe nachÃ¡dza veÄ¾kÃ¡ skrytÃ¡ ÄasÅ¥, ktorÃº nie je moÅ¾nÃ© preskÃºmaÅ¥. PodÄ¾a tejto Å¡tÃºdie je jadrom webu silne prepojenÃ© jadro strÃ¡nok. Tieto strÃ¡nky sÃº navzÃ¡jom dobre poprepÃ¡janÃ© a navzÃ¡jom na seba odkazujÃº vÃ¤ÄÅ¡Ã­m mnoÅ¾stvom odkazov. Na Ä¾avej strÃ¡nke motÃ½lika sa potom nachÃ¡dzajÃº vstupnÃ© strÃ¡nky. Tieto strÃ¡nky ukazujÃº na strÃ¡nky v silne prepojenom jadre, ale na ne v tomto jadre neukazuje Å¾iadna strÃ¡nka. Okrem toho tieto strÃ¡nky odkazujÃº na ÄalÅ¡ie strÃ¡nky, ktorÃ© vÅ¡ak uÅ¾ neukazujÃº na Å¾iadne strÃ¡nky a sÃº znÃ¡zornenÃ© na obrÃ¡zku vÄ¾avo hore."
369,82,0.628,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"HistÃ³ria a vÃ½znam vzorov Vzor opisuje rieÅ¡enie vÅ¡eobecnÃ©ho problÃ©mu, ktorÃ½ sa vyskytuje v urÄitÃ½ch situÃ¡ciÃ¡ch, tzv. kontextoch. Buschmann a kol. ho v [Buschmann 1996] definujÃº takto: Vzor Å¡pecifikuje opakujÃºci sa nÃ¡vrhovÃ½ problÃ©m, ktorÃ½ vziÅ¡iel zo Å¡pecifickÃ½ch nÃ¡vrhovÃ½ch kontextov a poskytuje pre ne overenÃº generickÃº schÃ©mu rieÅ¡enia PodÄ¾a objaviteÄ¾a vzorov, Christophera Alexandra [Alexander 1979]: KaÅ¾dÃ½ vzor je pravidlo pozostÃ¡vajÃºce z troch ÄastÃ­, ktorÃ© vyjadruje relÃ¡ciu medzi urÄitÃ½m kontextom, problÃ©mom a rieÅ¡enÃ­m. UvedenÃ© tri Äasti moÅ¾no nÃ¡jsÅ¥ aj v Buschmannovej definÃ­cii vzoru:"
236,94,0.628,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"pracujÃº podobne ako prÃ­kaz \tableofcontents. VytlaÄia zoznam obrÃ¡zkov, respektÃ­ve tabuliek. V tÃ½chto zoznamoch je spomenutÃ½ celÃ½ nÃ¡zov danÃ½ch objektov. Ak ste nÃ¡chylnÃ­ k pouÅ¾Ã­vaniu dlhÃ½ch nÃ¡zvov obrÃ¡zkov (tabuliek), musÃ­te maÅ¥ kratÅ¡iu verziu nÃ¡zvu, ktorÃ¡ pÃ´jde do zoznamu. Toto sa zabezpeÄuje napÃ­sanÃ­m kratÅ¡ej verzie nÃ¡zvu do hranatÃ½ch zÃ¡tvoriek za prÃ­kazom \caption. \caption[KrÃ¡tky]{DDDlllllhhhhÃ½Ã½Ã½Ã½}"
393,461,0.628,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"znovupouÅ¾Ã­va v rÃ´znych aplikÃ¡ciÃ¡ch, priÄom mÃ´Å¾e byÅ¥ znovupouÅ¾itÃ¡ vo viacerÃ½ch inÅ¡tanciÃ¡ch vzoru v rÃ¡mci jednej alebo viacerÃ½ch aplikÃ¡ciÃ­. Pod domÃ©novo zÃ¡vislou ÄasÅ¥ou rozumieme tÃº ÄasÅ¥ Å¡truktÃºry nÃ¡vrhovÃ©ho vzoru, ktorÃ¡ je Å¡pecifickÃ¡ pre konkrÃ©tnu domÃ©nu a je zÃ¡vislÃ¡ od pouÅ¾itia vzoru. DomÃ©novo zÃ¡vislÃ¡ ÄasÅ¥ vzoru je sÃºÄasÅ¥ou aplikÃ¡cie a pomocou nej sa nÃ¡vrhovÃ½ vzor prispÃ´sobuje konkrÃ©tnej aplikÃ¡cii. Rozdelenie na vÅ¡eobecnÃº a domÃ©novo zÃ¡vislÃº ÄasÅ¥ si Äalej ukÃ¡Å¾eme na prÃ­klade rozdelenia vzoru Composite vychÃ¡dzajÃºceho z (JakubÃ­k, 2005b), ktorÃ½ sme prezentovali na konferencii Objekty 2005."
130,395,0.628,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 7-9. PrÃ­klad federÃ¡cie. FederÃ¡cia komunikuje s ostatnÃ½mi federÃ¡ciami prostrednÃ­ctvom jedinÃ©ho agenta. ZÃ¡stupca tu pÃ´sobÃ­ ako rozhranie federÃ¡cie smerom von. Toto umoÅ¾Åuje zavedenie bezpeÄnostnÃ½ch mechanizmov, ktorÃ© oddeÄ¾ujÃº agenty od okolitÃ©ho sveta a brÃ¡nia ich pred neÅ¾elanÃ½mi zÃ¡sahmi zvonku. ZÃ¡stupca spracovÃ¡va vÅ¡etky poÅ¾iadavky z inÃ½ch ÄastÃ­ organizÃ¡cie a tie, ktorÃ© sÃº identifikovanÃ© ako potenciÃ¡lne Å¡kodlivÃ©, mÃ´Å¾e zablokovaÅ¥. PrÃ­kladom pouÅ¾itia federÃ¡ciÃ­ je systÃ©m Metamorph (Maturana, 1999) pre riadenie vÃ½roby. FederÃ¡cie tu zdruÅ¾ujÃº agenty spolupracujÃºce na jednej Ãºlohe. PrÃ­stup k zdrojom sa potom pre celÃº federÃ¡ciu riadi jednotne. ZÃ¡stupca federÃ¡cie mÃ´Å¾e tieÅ¾ pÃ´sobiÅ¥ vo funkcii maklÃ©ra (angl. broker) (Sycara, 1997), ktorÃ½ ponÃºka schopnosti svojich agentov ostatnÃ½m federÃ¡ciÃ¡m a naopak zabezpeÄuje sluÅ¾by, ktorÃ© poÅ¾adujÃº agenty z vnÃºtra federÃ¡cie, od inÃ½ch federÃ¡ciÃ­. Prepojenie agentov vo vnÃºtri federÃ¡cie a prepojenie federÃ¡ciÃ­ navzÃ¡jom mÃ´Å¾e byÅ¥ vytvorenÃ© podÄ¾a Ä¾ubovoÄ¾nÃ©ho modelu, pre Å¡truktÃºru vo vnÃºtri federÃ¡cie sa Äasto pouÅ¾Ã­va plytkÃ¡ hierarchia, v ktorej sÃº vÅ¡etky agenty federÃ¡cie priamo podriadenÃ© zÃ¡stupcovi."
94,151,0.628,Sprievodca svetom vedeckÃ©ho publikovania,"5.2.3 PirÃ¡tske zdieÄ¾anie ÄlÃ¡nkov â Äierna cesta k otvorenÃ©mu prÃ­stupu VedeckÃ¡ prÃ¡ca vyÅ¾aduje pravidelnÃ½ prÃ­stup k najnovÅ¡Ã­m vedeckÃ½m poznatkom, no tradiÄnÃ½ systÃ©m akademickÃ©ho publikovania tejto potrebe nevychÃ¡dza prÃ¡ve v Ãºstrety. Aby vedeckÃ½ pracovnÃ­k udrÅ¾al svoj prehÄ¾ad âna pulze dobyâ, musÃ­ maÅ¥ podporu silnej univerzity Äi akademickej kniÅ¾nice, ktorÃ¡ predplÃ¡ca vÃ¤ÄÅ¡inu Äasopisov z jeho odboru, alebo (teoreticky) nadÅ¡tandardnÃ½ zdroj sÃºkromnÃ½ch financiÃ­, aby si mohol kÃºpiÅ¥ vÅ¡etky spoplatnenÃ© ÄlÃ¡nky, ktorÃ© potrebuje (Äo pri akademickÃ½ch platoch sotva prichÃ¡dza do Ãºvahy). Mnoho vedcov po celom svete vÅ¡ak takÃ© Å¡Å¥astie nemÃ¡ a musia zhÃ¡ÅaÅ¥ potrebnÃ© ÄlÃ¡nky inÃ½mi cestami. Bolo by nesmierne prÃ¡cne pÃ­saÅ¥ osobne autorom kaÅ¾dej publikÃ¡cie, navyÅ¡e bez zÃ¡ruky, Å¾e odpovedia, a hoci tento spÃ´sob eÅ¡te stÃ¡le funguje, novÃ¡ doba prinÃ¡Å¡a novÃ© spÃ´soby: poÅ¾iadaÅ¥ autora o âprivate copyâ prostrednÃ­ctvom akademickej sociÃ¡lnej siete, napr. ResearchGate alebo pouÅ¾iÅ¥ novÃ© nÃ¡stroje otvorenÃ©ho prÃ­stupu ako Open Access Button (viac v kapitole 6). Paralelne s hnutÃ­m otvorenÃ©ho prÃ­stupu sa rozvÃ­ja aj âÄierna cestaâ â nelegÃ¡lne zdieÄ¾anie vedeckÃ½ch publikÃ¡ciÃ­ na pirÃ¡tskych strÃ¡nkach (Himmelstein et al. 2018). SpoÄiatku iÅ¡lo o ojedinelÃ©, neorganizovanÃ© poÄiny, neskÃ´r na seba najviac pozornosti strhol Sci-Hub, pirÃ¡tsky portÃ¡l a repozitÃ¡r vedeckÃ½ch ÄlÃ¡nkov (ktorÃ© zÃ­skava zo strÃ¡nok vydavateÄ¾ov prostrednÃ­ctvom hesiel z predplatiteÄ¾skÃ½ch ÃºÄtov). ZaloÅ¾ila ho v roku 2011 Å¡tudentka Aleksandra Elbakyan z Kazachstanu, frustrovanÃ¡ z neprÃ­stupnosti vedeckej literatÃºry. Napriek vynÃºtenÃ©mu striedaniu domÃ©n a Å¾alobÃ¡m zo strany Elsevieru a American Chemical Society, Sci-Hub stÃ¡le rastie. SÃºdne spory ho dokonca preslÃ¡vili aj medzi uÅ¾Ã­vateÄ¾mi, ktorÃ­ ho dovtedy nepoznali. PouÅ¾Ã­vajÃº ho Å¡tudenti a vedci z rozvojovÃ½ch krajÃ­n s poddimenzovanÃ½m financovanÃ­m vedy a Å¡kolstva, najmÃ¤ v krajinÃ¡ch bÃ½valÃ©ho Sovietskeho zvÃ¤zu, kde mÃ¡ voÄ¾nÃ½ vzÅ¥ah k autorskÃ½m prÃ¡vam bohatÃº histÃ³riu. VysokÃº aktivitu vÅ¡ak zaznamenÃ¡va aj v eurÃ³pskych a americkÃ½ch mestÃ¡ch so sÃ­dlami veÄ¾kÃ½ch univerzÃ­t (Bohannon 2016b). KuriÃ³zne, je, Å¾e uÅ¾Ã­vatelia zo SciHubu sÅ¥ahujÃº nielen spoplatnenÃ© publikÃ¡cie, ale aj legÃ¡lne voÄ¾ne dostupnÃ© ÄlÃ¡nky. MnohÃ­ z nich si vyberÃ¡jÃº Sci-Hub skÃ´r z pohodlnosti, hoci by sa k literatÃºre mohli dostaÅ¥ aj inak (McNutt 2016). V roku 2017 ponÃºkal takmer 69 % z celkovÃ©ho svetovÃ©ho objemu ÄlÃ¡nkov, najmÃ¤ tie z prestÃ­Å¾nych Äasopisov s platenÃ½m prÃ­stupom. Sci-Hub sprÃ­stupÅuje aÅ¾ 97 % aktuÃ¡lnej produkcie vydavateÄ¾stva Elsevier (Himmelstein et al. 2018). TvÃ¡rou v tvÃ¡r tÃ½mto ÄÃ­slam niektorÃ­ analytici predpovedajÃº koniec klasickÃ©ho modelu predplatnÃ©ho. Treba vÅ¡ak podotknÃºÅ¥, Å¾e viacerÃ© podobnÃ© predpovede sa v minulosti nevyplnili. ZvlÃ¡Å¡tnou cestou Äierneho otvorenÃ©ho prÃ­stupu je zdieÄ¾anie ÄlÃ¡nkov na vedeckÃ½ch sociÃ¡lnych sieÅ¥ach (napr. ResearchGate, Academia.edu, viac o nich v stati 9.2.2) samotnÃ½mi autormi, ktorÃ­ si buÄ neuvedomujÃº, Äo podpÃ­sali vydavateÄ¾ovi pri prevode autorskÃ½ch prÃ¡v, alebo sa rozhodli prÃ¡vny aspekt situÃ¡cie ignorovaÅ¥. Napokon, za uverejnenie svojich ÄlÃ¡nkov na akademickej sociÃ¡lnej sieti eÅ¡te nebol nikto trestne stÃ­hanÃ½, nanajvÃ½Å¡ dostal e-mail s upozornenÃ­m, aby predmetnÃ© ÄlÃ¡nky stiahol, prÃ­padne ich stiahla samotnÃ¡ sieÅ¥. Na druhej strane, ak vÃ½skumnÃ­k svoje ÄlÃ¡nky na sociÃ¡lnej sieti nezdieÄ¾a, pripravuje sa o vÃ½znamnÃº citaÄnÃº vÃ½hodu. PodÄ¾a nedÃ¡vneho vÃ½skumu 500 nÃ¡hodne vybranÃ½ch plnotextovÃ½ch ÄlÃ¡nkov zverejnenÃ½ch Älenmi na ResearchGate, aÅ¾ 51 % ÄlÃ¡nkov nereÅ¡pektovalo politiku Äasopisov tÃ½kajÃºcu"
130,346,0.628,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PodÄ¾a definÃ­cie z kapitoly 7.1, agent je autonÃ³mny celok, ktorÃ½ vnÃ­ma svoje prostredie, mÃ´Å¾e si vytvÃ¡raÅ¥ jeho ÄiastoÄnÃº reprezentÃ¡ciu a riadenÃ½m spÃ´sobom ho ovplyvÅuje, pri Äom pouÅ¾Ã­va zdroje, ktorÃ© vlastnÃ­. Napriek tomu, Å¾e definÃ­cia pomerne jasne vymedzuje hranicu medzi pojmom agent a ostatnÃ½mi, prÃ­buznÃ½mi, pojmami (objekt, modul, hrÃ¡Ä), ponechÃ¡va stÃ¡le veÄ¾kÃ½ priestor, v rÃ¡mci ktorÃ©ho sa mÃ´Å¾eme pohybovaÅ¥. V skutoÄnosti, ak sa pozrieme na"
205,179,0.628,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","SociÃ¡lne siete a v nich prÃ­tomnÃ© mechanizmy sa zÃ¡kaznÃ­kovi produkt nepÃ¡Äi, mÃ¡ negatÃ­vny potenciÃ¡l pre marketing. Ak mÃ¡ zÃ¡kaznÃ­k veÄ¾kÃ½ vplyv na svoje okolie (naprÃ­klad je tzv. celebrita), mÃ´Å¾e vÃ½znamne rozÅ¡Ã­riÅ¥ mienku o produkte a mÃ¡ tak vysokÃ½ potenciÃ¡l pre zacielenie marketingu. Ak mÃ¡ zÃ¡kaznÃ­k sÃ­ce mÃ¡lo prepojenÃ­, ale je medzi nimi vplyvnÃ¡ osoba - autorita, mÃ¡ taktieÅ¾ veÄ¾kÃ½ potenciÃ¡l [15]."
76,260,0.627,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"VidÃ­me, Å¾e teraz je aproximÃ¡cia rÃ¡dovo lepÅ¡ia (ako bola bez korekcie). Vo vÅ¡eobecnosti sa nedÃ¡ povedaÅ¥, akÃ© je dostatoÄne veÄ¾kÃ©, aby aproximÃ¡cia dÃ¡vala dobrÃ© vÃ½sledky. Zistilo sa vÅ¡ak, Å¾e ak platÃ­: (1 â ) > 9 , tak vÃ½sledky sÃº uspokojivÃ©. 5.1.9 PrÃ­klad. PoÄas skÃºÅ¡ky spoÄ¾ahlivosti dochÃ¡dza k zniÄeniu vÃ½robku s pravdepodobnosÅ¥ou = 0.02. NÃ¡jdime pravdepodobnosÅ¥ toho, Å¾e v sÃ©rii 500 vÃ½robkov je poÄet zniÄenÃ½ch a) menÅ¡Ã­ ako 12, b) menÅ¡Ã­ ako 12, a pritom viac ako 6. RieÅ¡enie. a) Najprv bez korekcie:"
190,414,0.627,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ukazuje sa, Å¾e projekty, ktorÃ© pouÅ¾Ã­vajÃº neustÃ¡lu integrÃ¡ciu obsahujÃº dramaticky menej chÃ½b [4]. Tento efekt je vÅ¡ak priamo viazanÃ½ na kvalitu sady testov. Vo vÅ¡eobecnosti platÃ­, Å¾e nie je zloÅ¾itÃ© vyrobiÅ¥ lepÅ¡iu sadu testov, s ktorou sa dajÃº dosiahnuÅ¥ lepÅ¡ie vÃ½sledky. ZvyÄajne vÅ¡ak tÃ­mu chvÃ­Ä¾u trvÃ¡ kÃ½m dosiahne takÃº sadu testov, ktorÃ¡ umoÅ¾Åuje odchytiÅ¥ dosiahnuteÄ¾nÃ© chyby. VyÅ¾aduje si to neustÃ¡lu prÃ¡cu na sade testov a jej zlepÅ¡ovanie. Ani neustÃ¡la integrÃ¡cia nie je liekom na chyby. NedokÃ¡Å¾e nÃ¡s chÃ½b zbaviÅ¥, umoÅ¾Åuje ich vÅ¡ak odhaliÅ¥ dramaticky rÃ½chlejÅ¡ie. V tomto smere sa veÄ¾mi podobÃ¡ na testy jednotiek softvÃ©ru. Ak sa do kÃ³du zavedie chyba a podarÃ­ sa nÃ¡m ju skoro odhaliÅ¥, je omnoho jednoduchÅ¡ie zbaviÅ¥ sa jej. KeÄÅ¾e sa zmenila iba malÃ¡ ÄasÅ¥ systÃ©mu, pri hÄ¾adanÃ­ chyby staÄÃ­ zvaÅ¾ovaÅ¥ len malÃº ÄasÅ¥ kÃ³du. NavyÅ¡e, chyba sa vyskytuje v kÃ³de, ktorÃ½ bol naposledy menenÃ½, takÅ¾e dotknutÃ½ kÃ³d mÃ¡ programÃ¡tor ÄerstvÃ½ v pamÃ¤ti, Äo znovu uÄ¾ahÄuje jej odstrÃ¡nenie."
59,140,0.627,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Proces replikÃ¡cie jedinca â replikÃ¡tora je formÃ¡lne chÃ¡panÃ½ ako kopÃ­rovanie jeho genotypu a vytvorenie novÃ©ho fenotypu urÄenÃ©ho kopÃ­rovanÃ½m genotypom. To znamenÃ¡, Å¾e fenotyp â organizmus replikÃ¡tora â mÃ´Å¾eme chÃ¡paÅ¥ ako nosiÄ (vehikel) genotypu, ktorÃ½ umoÅ¾Åuje jeho replikÃ¡ciu. Pre zjednoduÅ¡enie naÅ¡ich Ãºvah chÃ¡peme proces replikÃ¡cie len ako kopÃ­rovanie genotypu, priÄom tento proces kopÃ­rovania je âfyzickyâ uskutoÄnenÃ½ fenotypom replikÃ¡tora. Je potrebnÃ© poznamenaÅ¥, Å¾e ide o veÄ¾mi silnÃº idealizÃ¡ciu, ale umoÅ¾nÃ­ nÃ¡m zaviesÅ¥ pomerne jednoduchÃº algoritmizÃ¡ciu univerzÃ¡lneho darwinizmu (pozri algoritmus 1). MusÃ­me vÅ¡ak podotknÃºÅ¥, Å¾e mÃ´Å¾u existovaÅ¥ darwinovskÃ© systÃ©my, kde odlÃ­Å¡enie fenotypu od genotypu neplatÃ­, kde sa genotyp kopÃ­ruje â replikuje inÃ½m zariadenÃ­m, ako vlastnÃ½m fenotypom. DobrÃ½ prÃ­klad tejto situÃ¡cie sÃº biologickÃ© a poÄÃ­taÄovÃ© vÃ­rusy, ktorÃ© na vlastnÃº replikÃ¡ciu vyuÅ¾Ã­vajÃº systÃ©my, v ktorÃ½ch parazitujÃº. Postulujme, Å¾e replikÃ¡tor je reprezentovanÃ½ svojÃ­m genotypom x, ktorÃ½, ako uÅ¾ bolo poznamenanÃ©, obsahuje zakÃ³dovanÃº informÃ¡ciu o konÅ¡trukcii replikÃ¡tora (pripomeÅme si Dawkinsove prirovnanie genotypu k receptu na kolÃ¡Ä). PopulÃ¡cia replikÃ¡torov je mnoÅ¾ina genotypov P ï½ x1 , x2 ,..., x p"
265,287,0.627,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Tento hlavnÃ½ rozdiel potom determinuje techniky, ktorÃ© pri testovanÃ­ vyuÅ¾Ã­vame. DynamickÃ© testovanie vyuÅ¾Ã­va Äasto automatickÃ© testy, ktorÃ© z definÃ­cie nevieme pouÅ¾iÅ¥ pri statickom testovanÃ­, pretoÅ¾e vyuÅ¾Ã­vajÃº beÅ¾iaci softvÃ©r. PrÃ­kladom je jednotkovÃ© alebo akceptaÄnÃ© testovanie. Pri statickom testovanÃ­ moÅ¾no automatickÃ© prÃ­stupy vyuÅ¾iÅ¥ jedine pri vÃ½poÄtoch metrÃ­k zdrojovÃ©ho kÃ³du. Techniky statickÃ©ho testovania sÃº naprÃ­klad prehliadky zdrojovÃ©ho kÃ³du alebo inÅ¡pekcia kÃ³du. Z definÃ­cie tieÅ¾ vyplÃ½va ÄalÅ¡ia odliÅ¡nosÅ¥: staticky moÅ¾no testovaÅ¥ od samÃ©ho zaÄiatku projektu (uÅ¾ vÃ½stupy analÃ½zy moÅ¾no manuÃ¡lne posudzovaÅ¥), zatiaÄ¾ Äo pre dynamickÃ© testovanie potrebujeme maÅ¥ nieÄo naprogramovanÃ©."
195,100,0.627,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"NaÄasovanie DÃ´leÅ¾itÃ¡ je otÃ¡zka naÄasovania. Mnoho odporÃºÄacÃ­ch systÃ©mov v softvÃ©rovom inÅ¾inierstve poskytuje odporÃºÄania, keÄ o ne pouÅ¾Ã­vateÄ¾ poÅ¾iada. V tomto prÃ­pade je odpoveÄ jasnÃ¡ â poskytni odporÃºÄanie, keÄ sa oÅ Å¾iada. V systÃ©moch, ktorÃ© sa musia samostatne rozhodnÃºÅ¥, uÅ¾ nemusÃ­ byÅ¥ otÃ¡zka naÄasovania Ãºplne jasnÃ¡. NiektorÃ© systÃ©my poskytujÃº odporÃºÄania uprostred prÃ¡ce pouÅ¾Ã­vateÄ¾a, Äo mÃ´Å¾e byÅ¥ kritickÃ©, napr. nÃ¡stroj BeneFactor12 mÃ´Å¾e vÃ½vojÃ¡rovi navrhnÃºÅ¥, aby ruÄne refaktoroval vytvÃ¡ranÃ½ zdrojovÃ½ kÃ³d [6]. V tomto prÃ­pade, ÄÃ­m dlhÅ¡ie bude systÃ©m ÄakaÅ¥ s odporÃºÄanÃ­m, tÃ½m menej Äasu vÃ½vojÃ¡rovi uÅ¡etrÃ­, ak sa bude riadiÅ¥ jeho odporÃºÄaniami. SkorÃ© a potenciÃ¡lne ÄastÃ© odporÃºÄanie rovnako ako odporÃºÄanie uprostred prÃ¡ce mÃ´Å¾e byÅ¥ ruÅ¡ivÃ©. NÃ¡klady spÃ´sobenÃ© preruÅ¡enÃ­m mÃ´Å¾u prevÃ¡Å¾iÅ¥ vÃ½hody, ktorÃ© prinÃ¡Å¡a odporÃºÄanie (za predpokladu, Å¾e si vÃ½vojÃ¡r uvedomuje jeho prÃ­nos). Ako mÃ´Å¾e tvorca OSSI znÃ­Å¾iÅ¥ ruÅ¡enie spÃ´sobenÃ© odporÃºÄaniami? V rÃ¡mci pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania navrhli niekoÄ¾ko technÃ­k, ktorÃ½ch Ãºlohou je vytvÃ¡raÅ¥ rovnovÃ¡hu medzi potrebou vÄasnÃ©ho odporÃºÄania a potrebou vyhnÃºÅ¥ sa ruÅ¡eniu. DobrÃ½m prÃ­kladom sÃº anotÃ¡cie, ktorÃ© informujÃº o dostupnÃ½ch odporÃºÄaniach, no nenÃºtia okamÅ¾ite konaÅ¥. VÃ½vojÃ¡r ich mÃ´Å¾e jednoducho odloÅ¾iÅ¥ alebo Ãºplne ignorovaÅ¥. ÄalÅ¡ou technikou je vyuÅ¾Ã­vanie âcitlivÃ©hoâ upozorÅovania [7], ktorÃ© sa snaÅ¾Ã­ odvodiÅ¥ Äas, kedy nie je vÃ½vojÃ¡r uprostred dÃ´leÅ¾itej Ãºlohy. Carter a Dewan [3] vytvorili systÃ©m, ktorÃ½ poskytuje pomoc vÃ½vojÃ¡rom, keÄ deteguje, Å¾e sa zasekli a nevedia pokraÄovaÅ¥ v prÃ¡ci."
94,319,0.627,Sprievodca svetom vedeckÃ©ho publikovania,"MnoÅ¾stvo vedeckÃ½ch informÃ¡ciÃ­ dostupnÃ½ch vo virtuÃ¡lnom prostredÃ­ viedlo k potrebe vytvoriÅ¥ infraÅ¡truktÃºru e-science. K tomu sa vyuÅ¾Ã­vajÃº softvÃ©rovÃ© rieÅ¡enia, ktorÃ© dokÃ¡Å¾u rozpoznaÅ¥ a verifikovaÅ¥ zdroje zaÄlenenÃ© do systÃ©mu dÃ¡tovÃ½ch zbierok. Okrem informÃ¡ciÃ­ z webovÃ½ch strÃ¡nok je pre vedcov dÃ´leÅ¾itÃ½ jednoduchÃ½ vzdialenÃ½ prÃ­stup k zdrojom informÃ¡ciÃ­. PrÃ­kladom rozvoja nÃ¡rodnej infraÅ¡truktÃºry na podporu vedy je ÄeskÃ½ CESNET, ktorÃ½ rozliÅ¡uje Å¡tyri Ãºrovne (TrtÃ­kovÃ¡ 2017):"
115,24,0.626,Algebra a diskrÃ©tna  matematika,"KaÅ¾dÃ½ graf mÃ¡ jeden vrchol, ktorÃ½ leÅ¾Ã­ aspoÅ na dvoch hranÃ¡ch. DÃ´kaz tejto vety priamo vyplÃ½va zo spÃ´sobu dÃ´kazu vety 1.1. PretoÅ¾e v druhej Äasti grafu mÃ¡me tri vrcholy a dve hrany, musÃ­ existovaÅ¥ aspoÅ jeden vrchol, ktorÃ½ leÅ¾Ã­ aspoÅ na dvoch hranÃ¡ch, Äo bolo potrebnÃ© dokÃ¡zaÅ¥ (QED). Model, ktorÃ½ ilustruje tieto dve vety je znÃ¡zornenÃ½ na obr. 1.1."
195,21,0.626,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"1.2.4 Hipikat SystÃ©m Hipikat je urÄenÃ½ pre novÃ¡Äikov v rÃ¡mci urÄitÃ©ho softvÃ©rovÃ©ho projektu [6]. OdporÃºÄania systÃ©mu slÃºÅ¾ia na nÃ¡jdenie relevantnÃ½ch informÃ¡ciÃ­ o fungovanÃ­ a ÃºdrÅ¾be danÃ©ho systÃ©mu. PrincÃ­p Hipikat-u tkvie v zbere a poskytovanÃ­ relevantnÃ½ch ÄastÃ­ histÃ³rie projektu na zÃ¡klade zdrojovÃ©ho kÃ³du, e-mailovej komunikÃ¡cie, sprÃ¡vach o chybe, zÃ¡znamov o zmenÃ¡ch v zdrojovom kÃ³de a v dokumentÃ¡cii. OdporÃºÄanie sa pouÅ¾Ã­vateÄ¾ovi zobrazÃ­ po tom, Äo explicitne poÅ¾iada o radu. OdporÃºÄaÄ mu vtedy zobrazÃ­ vÅ¡etky dostupnÃ© artefakty k aktuÃ¡lnej Ãºlohe, napr. k oprave chyby. SystÃ©m sa skladÃ¡ z dvoch ÄastÃ­. PrvÃ¡ je implementovanÃ¡ ako zÃ¡suvnÃ½ modul do vÃ½vojovÃ©ho prostredia Eclipse. Tento modul slÃºÅ¾i na zber dÃ¡t a ich preposielanie druhej Äasti. DruhÃ¡ ÄasÅ¥ systÃ©mu na zÃ¡klade"
94,54,0.626,Sprievodca svetom vedeckÃ©ho publikovania,"PrÃ­stup k vedeckÃ½m elektronickÃ½m knihÃ¡m stÃ¡l eurÃ³pske krajiny viac neÅ¾ 4 miliÃ³ny Eur. Podobne ako pri databÃ¡zach, zmluvy trvali jeden alebo tri roky, s nÃ¡rastom cien najÄastejÅ¡ie 3 â 4 % roÄne. KÃ½m v prÃ­pade Äasopisov a databÃ¡z iÅ¡lo takmer vÃ½luÄne o formu predplatnÃ©ho, pri elektronickÃ½ch knihÃ¡ch zÃ­skali akademickÃ© kniÅ¾nice aÅ¾ 30 % titulov formou jednorazovÃ©ho nÃ¡kupu."
265,244,0.625,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"KvÃ´li rastu nÃ¡kladov na integrÃ¡ciu sÃºÄiastok navzÃ¡jom. Je totiÅ¾ dÃ´vodnÃ© sa domnievaÅ¥, Å¾e ÄalÅ¡Ã­m rozbÃ­janÃ­m niektorÃ½ch celkov (sÃºÄiastok) nedosiahneme dostatoÄne voÄ¾ne zviazanÃ© sÃºÄiastky. PrÃ­liÅ¡ vysokÃ¡ zviazanosÅ¥ zaÄne spÃ´sobovaÅ¥ takÃ© problÃ©my, Å¾e sa ÄalÅ¡ie delenie neoplatÃ­."
205,126,0.625,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Politika vÃ½beru stanovuje, ktorÃ© strÃ¡nky mÃ¡ preliezaÄ sÅ¥ahovaÅ¥. PodÄ¾a prieskumu z roku 2005 [4] dokonca aj rozsiahle preliezaÄe zindexujÃº iba 40-70% celÃ©ho indexovateÄ¾nÃ©ho webu. Preto je veÄ¾mi dÃ´leÅ¾itÃ©, aby prelezenÃ¡ ÄasÅ¥ webu obsahovala tie najrelevantnejÅ¡ie strÃ¡nky a nie len nejakÃº nÃ¡hodnÃº vzorku webu. NiektorÃ© strÃ¡nky mÃ´Å¾u tieÅ¾ obsahovaÅ¥ tzv. preliezacie pasce, ktorÃ© predstavujÃº nekoneÄnÃ½ zoznam dynamicky generovanÃ½ch URL adries. Preto je dÃ´leÅ¾itÃ©, aby preliezaÄ reÅ¡pektoval robotickÃ½ protokol, ktorÃ½ uvÃ¡dza, akÃº ÄasÅ¥ sÃ­dla je moÅ¾nÃ© preliezaÅ¥. Politika znovunavÅ¡tevovania stanovuje, ako Äasto kontrolovaÅ¥ zmeny na strÃ¡nkach. PreliezaÄe pouÅ¾Ã­vajÃº viacerÃ© metriky, podÄ¾a ktorÃ½ch sa rozhodujÃº, kedy znovu navÅ¡tÃ­viÅ¥ nejakÃº webovÃº strÃ¡nku. NajÄastejÅ¡ie pouÅ¾Ã­vanÃ© metriky sÃº ÄerstvosÅ¥ a vek [7]. ÄerstvosÅ¥ je jednoduchÃ¡ binÃ¡rna metrika, ktorÃ¡ indikuje, Äi sa lokÃ¡lna kÃ³pia strÃ¡nky zhoduje s originÃ¡lom, alebo nie. ÄerstvosÅ¥ webovej strÃ¡nky s v Äase t je definovanÃ¡ ako:"
130,423,0.625,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"NaprÃ­klad ak sÃº danÃ© usporiadania S i p S k , S j p S k , je moÅ¾nÃ© kroky Si a Sj vykonaÅ¥ sÃºÄasne, teda ich mÃ´Å¾u vykonÃ¡vaÅ¥ dva rÃ´zne agenty. Vykonanie kroku Sk musÃ­ nasledovaÅ¥ aÅ¾ po dokonÄenÃ­ krokov Si a Sj a je potrebnÃ© zabezpeÄiÅ¥ to vzÃ¡jomnou koordinÃ¡ciou agentov. Pri vytvÃ¡ranÃ­ dlhÅ¡Ã­ch plÃ¡nov je niekedy vhodnÃ© eliminovaÅ¥ niektorÃ© detaily pred tÃ½m, neÅ¾ sa vyrieÅ¡ia dÃ´leÅ¾itejÅ¡ie Ãºlohy. Toto je moÅ¾nÃ© spraviÅ¥ naprÃ­klad ohodnotenÃ­m dÃ´leÅ¾itosti podmienok, ktorÃ© treba dosiahnuÅ¥. Tento prÃ­stup pouÅ¾Ã­va systÃ©m ABSTRIPS (Sacerdoti, 1974). Pri vytvÃ¡ranÃ­ plÃ¡nu sa najprv uvaÅ¾ujÃº najdÃ´leÅ¾itejÅ¡ie podmienky. PlÃ¡n vytvorenÃ½ na zÃ¡klade najdÃ´leÅ¾itejÅ¡Ã­ch podmienok potom slÃºÅ¾i ako zÃ¡klad plÃ¡nu vytvÃ¡ranÃ©ho po pridanÃ­ menej dÃ´leÅ¾itÃ½ch podmienok. PostupnÃ© pridÃ¡vanie podmienok pokraÄuje aÅ¾ kÃ½m nie je vytvorenÃ½ kompletnÃ½ plÃ¡n. STRIPS a jeho reprezentÃ¡cia mÃ¡ niekoÄ¾ko zÃ¡vaÅ¾nÃ½ch obmedzenÃ­, ktorÃ© sa snaÅ¾ia odstrÃ¡niÅ¥ jeho rÃ´zne modifikÃ¡cie a rozÅ¡Ã­renia. HlavnÃ© obmedzenia sÃº nasledovnÃ©:"
190,324,0.625,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V minulosti bolo vypracovanÃ½ch viacero Å¡tÃºdiÃ­, ktorÃ½ch vÃ½sledkom boli rozliÄnÃ© zoznamy rizÃ­k v softvÃ©rovÃ½ch projektoch. RizikÃ¡ v nich boli zoradenÃ© podÄ¾a zÃ¡vaÅ¾nosti. Pravdepodobne prvÃ½ zoznam vypracoval Boehm [3]. Aj na svoj pomerne vysokÃ½ vek je tento zoznam citovanÃ½ vo veÄ¾kom mnoÅ¾stve prÃ¡c aj v dneÅ¡nej dobe. NeskÃ´r boli vypracovanÃ© ÄalÅ¡ie prÃ¡ce, kde sa snaÅ¾ili autori zoskupiÅ¥ rizikÃ¡ do rozliÄnÃ½ch skupÃ­n, pridaÅ¥ novÃ© rizikÃ¡ a zoradiÅ¥ ich podÄ¾a zÃ¡vaÅ¾nosti. Medzi najvÃ½znamnejÅ¡ie patrÃ­ Å¡tÃºdia [6], kde autori vytvorili novÃ½ zoznam rizÃ­k a rozdelili rizikÃ¡ do Å¡tyroch kvadrantov podÄ¾a ich relatÃ­vnej dÃ´leÅ¾itosti a Ãºrovne ich kontroly. Toto rozdelenie ukazuje tabuÄ¾ka 1. V roku 2004 boli vÃ½sledky tejto Å¡tÃºdie pouÅ¾itÃ© ako zÃ¡klad pre vypracovanie [8]. V tejto prÃ¡ci sa autori venovali vzÅ¥ahom medzi jednotlivÃ½mi kvadrantmi a ukÃ¡zali, Å¾e treba braÅ¥ pri manaÅ¾mente rizÃ­k do Ãºvahy aj vzÅ¥ahy medzi rizikami."
190,162,0.625,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"CieÄ¾om tvorby nÃ¡Ärtu je dodaÅ¥ koncovÃ©mu pouÅ¾Ã­vateÄ¾ovi Äo moÅ¾no najrÃ½chlejÅ¡ie predstavu, ako bude koncovÃ© rieÅ¡enie vyzeraÅ¥, a tak sa ubezpeÄiÅ¥, Å¾e naÅ¡a predstava o vytvÃ¡ranom rieÅ¡enÃ­ koreÅ¡ponduje s predstavou pouÅ¾Ã­vateÄ¾a. PodÄ¾a mÃ´jho nÃ¡zoru je prÃ¡ve prezentÃ¡cia nÃ¡Ärtu alebo funkÄnÃ©ho prototypu najbezpeÄnejÅ¡ou formou overenia sprÃ¡vnosti formÃ¡lnej Å¡pecifikÃ¡cie pri interaktÃ­vnych aplikÃ¡ciÃ¡ch. Do nÃ¡Ärtu a Äalej prototypu sa zapracujÃº pripomienky pouÅ¾Ã­vateÄ¾a aÅ¾ do vytvorenia prvej oficiÃ¡lnej verzie. TÃ¡to sa odovzdÃ¡ pouÅ¾Ã­vateÄ¾ovi a upravuje sa na jeho Å¾iadosÅ¥. ObrÃ¡zok 1 zobrazuje deÄ¾bu projektu po Äasovej osi na etapy a po funkÄnej osi na komponenty. Po nÃ¡slednom analyzovanÃ­ sa etapa rozdelÃ­ na menÅ¡ie Äasti â moduly, ktorÃ© sa prideÄ¾ujÃº tÃ­mom. Rozsah modulu predpokladÃ¡ pribliÅ¾ne dva tÃ½Å¾dne prÃ¡ce pre jednÃ©ho Äloveka. Na rozsahu modulu je realizovanÃ½ mikro-manaÅ¾ment projektu."
205,200,0.624,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","11.3 Proces tvorby vizualizÃ¡cie sociÃ¡lnej siete Dnes sa sociogram zostavuje pomocou dostupnÃ½ch vizualizaÄnÃ½ch nÃ¡strojov, ktorÃ© urÃ½chlia proces jeho tvorby a zabezpeÄia jeho Äo najlepÅ¡Ã­ vzhÄ¾ad, t. j. aby sa pretÃ­nalo Äo najmenej hrÃ¡n, mal sprÃ¡vne rozloÅ¾enie, ale aj jeho vzhÄ¾ad z estetickÃ©ho hÄ¾adiska. Proces vytvorenia vizualizÃ¡cie v nÃ¡stroji sa skladÃ¡ z tÃ½chto krokov: 1. zÃ­skanie Ãºdajov â zozbieranie Ãºdajov, ktorÃ© chceme zobrazovaÅ¥ a analyzovaÅ¥, 2. vÃ½ber a Ãºprava Ãºdajov do vhodnÃ©ho formÃ¡tu â kaÅ¾dÃ½ nÃ¡stroj podporuje inÃ½ vstupnÃ½ formÃ¡t Ãºdajov, napr. JSON, CSV a pod., 3. import Ãºdajov do vizualizaÄnÃ©ho nÃ¡stroja, 4. nastavovanie â v tomto kroku sa vyberÃ¡ typ vizualizÃ¡cie a nastavujÃº sa rÃ´zne parametre sociogramu ako jeho typ, algoritmus na vÃ½poÄet polohy uzlov, nastavenia hrÃ¡n a uzlov (farby, tvary a pod.), 5. koneÄnÃ¡ vizualizÃ¡cia â vÃ½sledok vizualizÃ¡cie, ktorÃ¡ mÃ´Å¾e byÅ¥ interaktÃ­vna alebo len zachytenÃ½ obraz sociogramu."
94,361,0.624,Sprievodca svetom vedeckÃ©ho publikovania,"rozvinutÃ© moÅ¾nosti vyhÄ¾adÃ¡vania informÃ¡ciÃ­: elektronickÃ© informaÄnÃ© zdroje umoÅ¾ÅujÃº pouÅ¾Ã­vateÄ¾om vyhÄ¾adÃ¡vaÅ¥ potrebnÃ© dokumenty a informÃ¡cie nielen podÄ¾a tradiÄnÃ½ch bibliografickÃ½ch Ãºdajov, ale umoÅ¾ÅujÃº pri vyhÄ¾adÃ¡vanÃ­ vyuÅ¾iÅ¥ prirodzenÃ© jazykovÃ© prostriedky alebo simultÃ¡nne vyhÄ¾adÃ¡vanie v rÃ´znych druhoch informaÄnÃ½ch zdrojov naraz."
135,315,0.624,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â nÃ¡vrhovÃ© vzory â Å¡pecifikujÃº sÃºiastky rÃ¡mca; nartajÃº rieÅ¡enie, â dynamickÃ© nadvÃ¤zovanie â vÃ½ber najvhodnejÅ¡ej sÃºiastky poas vykonÃ¡vania, â kontrakty â kaÅ¾dÃ¡ sÃºiastka mÃ¡ Å¡pecifikÃ¡ciu (konkrÃ©tne aj abstraktnÃ© triedy). 4.1.3 PrÃ¡ca s rÃ¡mcami Pri pouÅ¾Ã­vanÃ­ rÃ¡mcov sa vyskytujÃº viacerÃ© roly na oboch stranÃ¡ch â na strane vÃ½voja rÃ¡mca aj na strane jeho pouÅ¾Ã­vania. Pre pouÅ¾itie rÃ¡mca na vÃ½voj aplikÃ¡cie treba pozna ciele vyvÃ­janej aplikÃ¡cie a ma prehad v dostupnÃ½ch rÃ¡mcoch a ich vlastnostiach. VÃ½ber rÃ¡mca pre projekt realizuje osoba s potrebnÃ½mi znalosami, ktorÃ¡ sa potom mÃ´Å¾e sta aj pouÅ¾Ã­vateom rÃ¡mca. PouÅ¾Ã­vate rÃ¡mca sa priamo podiea na produkcii aplikÃ¡cie. MusÃ­ vedie ako (nemusÃ­ vedie, preo prÃ¡ve tak) pouÅ¾Ã­va rÃ¡mec. VykonÃ¡va Ãºpravy rÃ¡mca na horÃºcich bodoch (angl. hot spots) â dedenie, preaÅ¾ovanie funkciÃ­, pridÃ¡vanie kÃ³du. alÅ¡ou osobou podieajÃºcou sa na prÃ¡ci s rÃ¡mcom je ÃºdrÅ¾bÃ¡r rÃ¡mca, lovek, ktorÃ½ sa starÃ¡ o Ãºpravy rÃ¡mca na pokrytie poÅ¾iadaviek domÃ©ny. MusÃ­ disponova poÅ¾adovanÃ½mi znalosami samotnÃ©ho rÃ¡mca aj domÃ©ny. O vÃ½voj novÃ½ch alebo alternatÃ­vnych rÃ¡mcov sa starÃ¡ vÃ½vojÃ¡r rÃ¡mca. ImplementÃ¡cia rÃ¡mcov RÃ¡mce sÃº implementovanÃ© na zÃ¡klade dvoch prÃ­stupov â kontraktov a horÃºcich bodov:"
190,165,0.623,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ãpravu tohto Å¾ivotnÃ©ho cyklu aj s opisom trvania jednotlivÃ½ch fÃ¡z zobrazuje obrÃ¡zok 3. MÃ­Ä¾nik plÃ¡novanie je pomenovanÃ½ vÃ½stiÅ¾nejÅ¡Ã­m pojmom nÃ¡vrh a mÃ­Ä¾nik vypracovanie je oznaÄenÃ½ ako implementÃ¡cia. MÃ­Ä¾nik revÃ­zie a Ãºpravy je rozdelenÃ½ na dve etapy tak, aby bolo moÅ¾nÃ© vidieÅ¥, akÃ¡ je ÄasovÃ¡ nÃ¡roÄnosÅ¥ kaÅ¾dej jednej z nich."
265,106,0.623,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"VerifikÃ¡cia je testovanÃ­m, Äi softvÃ©r spÄºÅa Å¡pecifikÃ¡ciu, zatiaÄ¾ Äo validÃ¡cia overuje jeho skutoÄnÃº uÅ¾itoÄnosÅ¥ pre zÃ¡kaznÃ­ka (pouÅ¾Ã­vateÄ¾a). VerifikÃ¡cia je Äasto formÃ¡lnejÅ¡ia, keÄÅ¾e sa opiera o âtvrdoâ spÃ­sanÃº Å¡pecifikÃ¡ciu. VerifikovaÅ¥ moÅ¾no aj po etapÃ¡ch vÃ½voja â ide o testovanie, Äi je splnenÃ¡ Å¡pecifikÃ¡cia pre danÃº etapu. Pri verifikÃ¡cii sa dÃ¡ Ä¾ahÅ¡ie argumentovaÅ¥, Äi softvÃ©r je alebo nie je verifikovanÃ½. Naproti tomu, validÃ¡cia mÃ¡ vÃ¡gnejÅ¡ie, Äasto len implicitne existujÃºce kritÃ©riÃ¡ a Å¥aÅ¾Å¡ie sa vykonÃ¡va â softvÃ©r treba Äasto reÃ¡lne nasadiÅ¥ a dlhÅ¡Ã­ Äas nechaÅ¥ fungovaÅ¥, aby sa naplno ukÃ¡zalo, Äi je uÅ¾itoÄnÃ½."
190,290,0.623,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"spÃ´sobom a podÄ¾a Murphyho zÃ¡konov sa tÃ¡ informÃ¡cia objavÃ­ u konkurenÄnej firmy vÅ¾dy skÃ´r ako v naÅ¡ej. Preto je dÃ´leÅ¾itÃ©, aby manaÅ¾Ã©r mal prehÄ¾ad o tom, Äo sa deje v blÃ­zkom okolÃ­ a aj vo svete. InformÃ¡cie sÃº kÄ¾ÃºÄovÃ© aj v samotnÃ½ch pracovnÃ½ch skupinÃ¡ch. Je pre nÃ¡s veÄ¾kou vÃ½hodou maÅ¥ vÃ½borne vyÅ¡kolenÃ½ a skÃºsenÃ½ tÃ­m Ä¾udÃ­, ktorÃ­ rozumejÃº technikÃ¡m, postupom a aj prostriedkom, ktorÃ© majÃº na prÃ¡cu pouÅ¾Ã­vaÅ¥. Ä½udÃ­ by sme si mali tieÅ¾ voliÅ¥ tak, aby rozumeli problematike, ktorÃº chceme naÅ¡im projektom rieÅ¡iÅ¥ a vyberaÅ¥ si naprÃ­klad ekonomicky vzdelanÃ½ch Ä¾udÃ­, na rieÅ¡enie systÃ©mu pre podporu finanÄnÃ©ho oddelenia firmy. Ku kvalitnÃ½m informÃ¡ciÃ¡m poÄÃ­tame aj dokumentÃ¡ciu, ktorÃº vyÅ¾aduje zÃ¡kaznÃ­k. Je veÄ¾mi dobrÃ© vytvÃ¡raÅ¥ ju kvalitne aj kvÃ´li internÃ½m potrebÃ¡m, keÄÅ¾e zamestnanci vo firme sa Äasto menia, ManaÅ¾Ã©r by mal maÅ¥ prehÄ¾ad a potom je Å¥aÅ¾kÃ© opravovaÅ¥ chyby v programe."
190,25,0.623,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Po preÅ¡tudovanÃ­ vÃ½sledkov usudzujem, Å¾e nie je potvrdenÃ¡ ani vyvrÃ¡tenÃ¡ sÃºvislosÅ¥ medzi jednotlivÃ½mi typmi osobnostÃ­ v tÃ­me a celkovou ÄinnosÅ¥ou tÃ­mu. VÅ¡etky tri Å¡tÃºdie sa uskutoÄnili na pomerne malej vzorke tÃ­mov na to, aby nieÄo dostatoÄne preukÃ¡zali. Dokonca druhÃ¡ ukazuje rozdielne vÃ½sledky medzi jednotlivÃ½mi roÄnÃ­kmi. Je jasnÃ©, Å¾e osobnostnÃ© zloÅ¾enie ovplyvÅuje samotnÃ½ spÃ´sob komunikÃ¡cie a prÃ¡ce v tÃ­me. Inak vyzerÃ¡ prÃ¡ca, kde je jeden dominantnÃ½ vedÃºci, ktorÃ½ vedie celÃ½ tÃ­m a inak keÄ tÃ­m obsahuje viac silnejÅ¡Ã­ch osobnostÃ­, ktorÃ© sa musia nielen presadiÅ¥, ale aj spolupracovaÅ¥. Takisto tÃ­m bez vÃ½raznej vedÃºcej osobnosti mÃ´Å¾e spolu dobre vychÃ¡dzaÅ¥, ale efektivita prÃ¡ce zrejme nebude maximÃ¡lna moÅ¾nÃ¡. ZÃ¡verom mi ale z toho vyplÃ½va, Å¾e ÄinnosÅ¥ tÃ­mu skÃ´r zÃ¡visÃ­ od konkrÃ©tneho zloÅ¾enia a medzi jednotlivÃ½mi tÃ­mami sa lÃ­Å¡i, neÅ¾ Å¾e existuje nejakÃ¡ preukÃ¡zateÄ¾nÃ¡ zÃ¡vislosÅ¥ od urÄitÃ©ho zloÅ¾enia."
59,664,0.622,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 14.1. (A) LatinskÃ½ Å¡tvorec typu 4 ï´ 4. V kaÅ¾dom riadku a stÄºpci sa prirodzenÃ© ÄÃ­slo z {1, 2, 3, 4} prÃ¡ve raz. (B) Z latinskÃ©ho Å¡tvorca mÃ´Å¾eme jednoducho zostrojiÅ¥ hru sudoku na ortogonÃ¡lnej mrieÅ¾ka 4 ï´ 4, ktorÃ¡ je rozdelenÃ¡ na menÅ¡ie podoblasti 2 ï´ 2, potom sa zavedie dodatoÄnÃ¡ tretia podmienka, aby v kaÅ¾dej podoblasti sa vyskytovalo prvÃ½ch 4 prirodzenÃ½ch ÄÃ­sel prÃ¡ve raz."
94,176,0.622,Sprievodca svetom vedeckÃ©ho publikovania,"VÃ½skum mÃ´Å¾eme principiÃ¡lne rozdeliÅ¥ na zÃ¡kladnÃ½ a aplikovanÃ½. ZÃ¡kladnÃ½ vÃ½skum sa snaÅ¾Ã­ nÃ¡jsÅ¥ odpovede na fundamentÃ¡lne otÃ¡zky a jeho hlavnou motivÃ¡ciou je rozÅ¡Ã­riÅ¥ Ä¾udskÃ© znalosti a pochopenie sveta. Äasto trvÃ¡ roky, alebo aj desiatky rokov, kÃ½m sa princÃ­py odhalenÃ© zÃ¡kladnÃ½m vÃ½skumom stanÃº sÃºÄasÅ¥ou nieÄoho, Äo sa dÃ¡ predÃ¡vaÅ¥ â a Äasto sa hodnota takto zÃ­skanÃ©ho poznania ani nedÃ¡ vyjadriÅ¥ peniazmi. AkÃº cenu mÃ¡ zaznamenanie zanikajÃºceho folklÃ³ru? AkÃº cenu majÃº informÃ¡cie o druhoch hmyzu Å¾ijÃºceho v slovenskÃ½ch horskÃ½ch lesoch? DÃ¡ sa prirodzene pÃ½taÅ¥ aj opaÄne: akÃº cenu platÃ­ spoloÄnosÅ¥ za neznalosÅ¥ svojej krajiny a kultÃºry? Na tieto otÃ¡zky nie je Ä¾ahkÃ© odpovedaÅ¥. KeÄÅ¾e pokrok vedy sa bez zÃ¡kladnÃ©ho vÃ½skumu z dlhodobÃ©ho hÄ¾adiska nezaobÃ­de, no jeho finanÄnÃº nÃ¡vratnosÅ¥ nemoÅ¾no spoÄ¾ahlivo predikovaÅ¥, zvyÄajne bÃ½va zÃ¡kladnÃ½ vÃ½skum financovanÃ½ z verejnÃ½ch zdrojov. AplikovanÃ½ vÃ½skum rozvÃ­ja poznatky zÃ¡kladnÃ©ho vÃ½skumu tak, aby viedli k praktickÃ½m aplikÃ¡ciÃ¡m â novÃ½m vÃ½robkom, liekom, alebo efektÃ­vnejÅ¡Ã­m technolÃ³giÃ¡m. InvestÃ­cie do tohoto druhu vÃ½skumu majÃº rÃ½chlejÅ¡iu nÃ¡vratnosÅ¥, preto sa na aplikovanom vÃ½skume Äasto podieÄ¾a aj sÃºkromnÃ½ sektor. Oba druhy vÃ½skumu sÃº vÅ¡ak dÃ´leÅ¾itÃ©. Hodnotenie vedy a vÃ½skumu (Äalej VaV) financovanÃ½ch z verejnÃ½ch zdrojov vyplÃ½va z potrieb verejnej sprÃ¡vy. VÃ½sledky hodnotenia vedeckej Äinnosti sÃº podkladom pre budovanie vlÃ¡dnej politiky VaV, vÃ½ber nÃ¡rodnÃ½ch priorÃ­t a strategickÃ½ch cieÄ¾ov pre ÄalÅ¡Ã­ rozvoj. S tÃ½m Ãºzko sÃºvisÃ­ nastavenie spÃ´sobu a nÃ¡strojov financovania vedy, alokÃ¡cia a optimalizÃ¡cia finanÄnÃ½ch prostriedkov, budovanie a ÄinnosÅ¥ Å¡tÃ¡tnych grantovÃ½ch agentÃºr, aj zriaÄovanie vedeckÃ½ch inÅ¡titÃºciÃ­. Ben Martin a John Irvine v svojej prÃ¡ci (Martin a Irvine 1983) uvÃ¡dzajÃº Å¡tyri zÃ¡kladnÃ© otÃ¡zky financovania, na ktorÃ© hodnotenie VaV hÄ¾adÃ¡ odpovede:"
367,26,0.621,CESTA K OTVORENEJ VEDE,"Analyzujete dÃ¡ta? Zautomatizujte spracovÃ¡vanie a svoj pracovnÃ½ postup: navrhnite skripty na spracovanie dÃ¡t a organizÃ¡ciu postupu prÃ¡ce. NevyuÅ¾Ã­vajte tabuÄ¾ky programu Excel pre rozsiahle sÃºbory dÃ¡t tam, kde by bolo vhodnejÅ¡ie vyuÅ¾iÅ¥ databÃ¡zy. Dokumentujte svoj kÃ³d a dÃ¡ta: Äo je jasnÃ© pri prÃ¡ci, nemusÃ­ byÅ¥ takÃ© zrejmÃ© o dva mesiace, a to ani pre samotnÃ©ho autora. TÃ½ka sa to skÃ´r vysvetlenia koneÄnÃ©ho vyuÅ¾itia funkcionalÃ­t, neÅ¾ opisu spÃ´sobu ich fungovania. Preferujte open-source rieÅ¡enia kvÃ´li vyÅ¡Å¡iemu stupÅu transparentnosti a Ä¾ahÅ¡iemu zaruÄenÃ©mu prÃ­stupu. Pre viac informÃ¡ciÃ­ o metodologickÃ½ch princÃ­poch otvorenej transparentnej vedy si mÃ´Å¾ete prejsÅ¥ tieto kurzy a zdroje qReproducible research: methodological principles for transparent science (kurz typu MOOC (massive open online course), The reproducible research practitioner (kurz portÃ¡lu FOSTER), FORRT (Framework for Open and Reproducible Research Training), Reproducible Research Techniques Data Training (materiÃ¡l organizÃ¡cie NEON)."
367,73,0.621,CESTA K OTVORENEJ VEDE,"OtvorenÃ½ prÃ­stup Obsah s otvorenÃ½m prÃ­stupom je prÃ­stupnÃ½m vÅ¡etkÃ½m bez obmedzenÃ­: od ÄitateÄ¾a sa nevyÅ¾aduje autentifikÃ¡cia ani platba, nie je pod embargom a pod. Otvorene sa mÃ´Å¾u zverejniÅ¥ vedeckÃ© publikÃ¡cie, dÃ¡ta, kÃ³dy a pod. Existuje niekoÄ¾ko spÃ´sobov, ako Å¡Ã­riÅ¥ publikÃ¡cie v reÅ¾ime otvorenÃ©ho prÃ­stupu. NaprÃ­klad autoarchivÃ¡cia vedeckÃ½ch vÃ½stupov v otvorenom repozitÃ¡ri (niekedy nazÃ½vanÃ© aj zelenÃ¡ cesta) alebo publikovanie v Äasopise s otvorenÃ½m prÃ­stupom s APC (zlatÃ¡ cesta) alebo bez APC (diamantovÃ¡ cesta). PublikÃ¡cie s otvorenÃ½m prÃ­stupom Äasopis alebo kniha, ktorÃ¡ je priamo Å¡Ã­renÃ¡ v reÅ¾ime otvorenÃ©ho prÃ­stupu. Tieto knihy alebo Äasopisy vyuÅ¾Ã­vajÃº rÃ´zne obchodnÃ© modely, naprÃ­klad verejnÃ© dotÃ¡cie, platby od inÅ¡titÃºcie autora (pozri APC), finanÄnÃ© prÃ­spevky od akademickÃ½ch spoloÄnostÃ­ alebo akademickÃ½ch kniÅ¾nÃ­c atÄ. Zistite viac o qRegister Äasopisov s otvorenÃ½m prÃ­stupom (DOAJ, Directory of Open Access Journals) a o qRegister knÃ­h s otvorenÃ½m prÃ­stupom (DOAB, Directory of Open Access Books). OtvorenÃ½ archÃ­v alebo repozitÃ¡r VÃ½skumnÃ­ci ukladajÃº svoje prÃ¡ce priamo v tematickÃ½ch alebo inÅ¡titucionÃ¡lnych repozitÃ¡roch, Äo umoÅ¾Åuje kedykoÄ¾vek a bez obmedzenÃ­ vyuÅ¾Ã­vaÅ¥ ich obsah. TrvalÃ½ identifikÃ¡tor JedineÄnÃ½ a nemennÃ½ odkaz na digitÃ¡lny objekt (sÃºbor dÃ¡t, ÄlÃ¡nok, publikÃ¡cia) alebo subjekt (autor). NaprÃ­klad trvalÃ½ identifikÃ¡tor digitÃ¡lneho objektu (DOI â Digital Object Identifier) alebo identifikÃ¡tor autora ORCID (Open Researcher and Contributor ID). OsobnÃ© Ãºdaje Ãdaje o jednotlivcovi, ktorÃ½ je identifikovanÃ½ alebo identifikovateÄ¾nÃ½. PredÃ¡torskÃ½ vydavateÄ¾ alebo Äasopis Vydavatelia alebo Äasopisy s pochybnÃ½m recenznÃ½m konanÃ­m alebo neetickÃ½mi obchodnÃ½mi praktikami. ReprodukovateÄ¾nosÅ¥ VlastnosÅ¥ kvalitne zdokumentovanÃ©ho vÃ½skumu, umoÅ¾ÅujÃºca inÃ½m vÃ½skumnÃ­kom doÂ­ siahnuÅ¥ takÃ© istÃ© vÃ½sledky pomocou rovnakÃ½ch metÃ³d a vstupnÃ½ch dÃ¡t, Äo umoÅ¾nÃ­ potvrdiÅ¥ vÃ½sledky predchÃ¡dzajÃºceho experimentu. ZdÃ´razÅuje sa dÃ´leÅ¾itosÅ¥ metÃ³d pouÅ¾itÃ½ch na zÃ­skanie porovnateÄ¾nÃ½ch vÃ½sledkov. VÃ½skumnÃ© dÃ¡ta VecnÃ© zÃ¡znamy (ÄÃ­selnÃ© Ãºdaje, merania, textovÃ©, obrazovÃ© alebo zvukovÃ© zÃ¡znamy a pod.) pouÅ¾itÃ© ako primÃ¡rne zdroje pri vedeckom vÃ½skume, ktorÃ© sÃº vedeckou komunitou vÅ¡eobecne prijÃ­manÃ© ako nevyhnutnÃ© na potvrdenie zistenÃ­ z vÃ½skumu."
130,381,0.621,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Ak mÃ¡ multiagentovÃ½ systÃ©m (alebo vo vÅ¡eobecnosti akÃ¡koÄ¾vek organizÃ¡cia) ÃºspeÅ¡ne plniÅ¥ svoju Ãºlohu, je potrebnÃ© zabezpeÄiÅ¥ efektÃ­vne rozdeÄ¾ovanie Ãºloh medzi jednotlivÃ© agenty (Äasti organizÃ¡cie). Efektivita rozdeÄ¾ovania Ãºloh sa skladÃ¡ z dvoch aspektov, jednak je to efektivita vykonÃ¡vanÃ½ch ÄinnostÃ­ po rozdelenÃ­ Ãºloh a Äalej tieÅ¾ efektivita samotnÃ©ho procesu rozdeÄ¾ovania Ãºloh. RozdeÄ¾ovanie Ãºloh mÃ´Å¾e byÅ¥ vykonanÃ© statickÃ½m spÃ´sobom, vtedy Ãºlohy prideÄ¾uje tvorca systÃ©mu eÅ¡te pred zaÄiatkom Äinnosti systÃ©mu. TakÃ½to spÃ´sob prideÄ¾ovania Ãºloh je pomerne neflexibilnÃ½ a Äasto nedovoÄ¾uje systÃ©mu dostatoÄne reagovaÅ¥ na zmenenÃº situÃ¡ciu, prÃ­padne sa vysporiadaÅ¥ s neoÄakÃ¡vanÃ½mi situÃ¡ciami. Na druhej strane statickÃ© pridelenie Ãºloh odstraÅuje potrebu mechanizmu prideÄ¾ovania Ãºloh poÄas chodu systÃ©mu, Äo mÃ´Å¾e zefektÃ­vniÅ¥ rieÅ¡enie dobre zadefinovanÃ½ch Ãºloh. PrideÄ¾ovanie Ãºloh tvorcom systÃ©mu so sebou prinÃ¡Å¡a aj ÄalÅ¡Ã­ aspekt, a to veÄ¾kÃº zÃ¡vislosÅ¥ vÃ½sledku na schopnostiach tvorcu systÃ©mu vhodne rozdeliÅ¥ Ãºlohy, a to aj s ohÄ¾adom na neÅ¡tandardnÃ© situÃ¡cie. DynamickÃ© rozdeÄ¾ovanie Ãºloh sa deje poÄas behu systÃ©mu, vÃ¤ÄÅ¡inou v momente, keÄ sa objavÃ­ novÃ¡ Ãºloha, ktorÃº treba rieÅ¡iÅ¥, alebo sa objavÃ­ potreba prerozdeliÅ¥ Ãºlohy na zÃ¡klade zmenenej situÃ¡cie, naprÃ­klad pri poruche agenta. TÃ¡to kapitola obsahuje zÃ¡kladnÃ© typy Å¡truktÃºry organizÃ¡cie vzhÄ¾adom na rozdeÄ¾ovanie Ãºloh medzi jednotlivÃ© Äasti organizÃ¡cie. Tieto spÃ´soby rozdeÄ¾ovania Ãºloh sÃº urÄenÃ© hlavne pre dynamickÃ© rozdeÄ¾ovanie Ãºloh. Je tieÅ¾ moÅ¾nÃ© kombinovaÅ¥ tieto techniky so statickÃ½m spÃ´sobom prideÄ¾ovania Ãºloh, naprÃ­klad pri mechanistickej Å¡truktÃºre nemusia byÅ¥ (a veÄ¾a krÃ¡t skutoÄne nie sÃº) Å¡tandardy vÃ½sledkom Äinnosti agentov ale sÃº vopred danÃ© tvorcom systÃ©mu. TerminolÃ³gia pouÅ¾itÃ¡ v tejto kapitole pochÃ¡dza z oblasti riadenia technologickÃ½ch procesov ako ju zadefinoval Romelaer (Romelaer, 2002)."
265,105,0.621,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ZisÅ¥ovanie, Äi je softvÃ©r uÅ¾itoÄnÃ½ (pre svojich pouÅ¾Ã­vateÄ¾ov, pre zÃ¡kaznÃ­ka). Ako ekvivalentnÃ½ pojem sa zvykne pouÅ¾Ã­vaÅ¥ aj âoverovanieâ. ValidÃ¡cia mÃ´Å¾e maÅ¥ veÄ¾a podÃ´b, ktorÃ© zÃ¡visia od typu softvÃ©ru. Äasto zahÅÅa tvorbu prototypov, ktorÃ© dostÃ¡vajÃº pouÅ¾Ã­vatelia na posÃºdenie, Äi sÃº pre nich (aspoÅ potenciÃ¡lne) uÅ¾itoÄnÃ© (prirodzene totiÅ¾ chceme softvÃ©r validovaÅ¥ Äo najskÃ´r, nie aÅ¾ keÄ je celÃ½ hotovÃ½). ValidÃ¡cia softvÃ©ru mÃ´Å¾e dokonca prebehnÃºÅ¥ eÅ¡te skÃ´r, ako napÃ­Å¡eme prvÃ½ riadok kÃ³du: prieskumy trhu Äi âpapierovÃ© prototypovanieâ sÃº vtedy typickÃ½mi pouÅ¾Ã­vanÃ½mi technikami."
367,23,0.621,CESTA K OTVORENEJ VEDE,"Spravujte si bibliografickÃ© odkazy pomocou citaÄnÃ½ch manaÅ¾Ã©rov, ako napr. qZotero. PrÃ¡ca podÄ¾a spoÄ¾ahlivÃ½ch bibliografickÃ½ch Å¡tandardov je vÅ¡eobecnou poÅ¾iadavkou vo vÅ¡etkÃ½ch odboroch. Organizujte dÃ¡ta, sÃºbory a prieÄinky: pouÅ¾Ã­vajte zauÅ¾Ã­vanÃ© konvencie pomenovÃ¡vania sÃºborov (file naming conventions), tvorte stromovÃº Å¡truktÃºru prieÄinkov alebo adresÃ¡rov s konzistentnou Å¡kÃ¡lovateÄ¾nou Å¡truktÃºrou, oddeÄ¾ujte nespracovanÃ© dÃ¡ta od spracovanÃ½ch a pod. Osvojte si zÃ¡klady tvorby verziÃ­ (verziovanie). MoÅ¾nosÅ¥ obnoviÅ¥ konkrÃ©tnu verziu dokumentu pÃ­sanÃ©ho poÄas niekoÄ¾kÃ½ch rokov mÃ´Å¾e byÅ¥ veÄ¾mi uÅ¾itoÄnÃ¡. Zautomatizujte si niektorÃ© Äasto sa opakujÃºce Ãºkony. ZvÃ½Å¡ite tÃ½m spoÄ¾ahlivosÅ¥ svojich vÃ½sledkov a uÄ¾ahÄÃ­te si pÃ­sanie vedeckÃ½ch ÄlÃ¡nkov, pretoÅ¾e budete mÃ´cÅ¥ jednoduchÅ¡ie meniÅ¥ parametre. MÃ¡te obmedzenÃ© zdroje? ZvÃ¡Å¾te spoluprÃ¡cu! Osvojte si kolaboratÃ­vne metÃ³dy prÃ¡ce a vyuÅ¾Ã­vajte verejnÃ© dÃ¡tovÃ© sÃºbory, ak existujÃº."
94,325,0.62,Sprievodca svetom vedeckÃ©ho publikovania,"9.2.1.2 IdentifikÃ¡cia autora ZÃ¡kladnou podmienkou vyhÄ¾adania prÃ¡ce konkrÃ©tneho autora a jeho odlÃ­Å¡enia od ostatnÃ½ch je presnÃ¡ identifikÃ¡cia. ProblÃ©mom sa mÃ´Å¾e staÅ¥ najmÃ¤ v situÃ¡cii, keÄ je citovanÃ© iba priezvisko s iniciÃ¡lou krstnÃ©ho mena (v zahraniÄnÃ½ch Äasopisoch Äasto bez diakritiky). PomÃ´cÅ¥ mÃ´Å¾e afiliÃ¡cia (pracovisko), no hoci v minulosti vedec mohol na jednom mieste pracovaÅ¥ aj desiatky rokov, dnes je zvykom striedaÅ¥ zamestnÃ¡vateÄ¾a po niekoÄ¾kÃ½ch rokoch a afiliÃ¡cie v starÅ¡Ã­ch ÄlÃ¡nkoch rÃ½chlo strÃ¡cajÃº aktuÃ¡lnosÅ¥. Meno nie je stopercentnÃ½m identifikÃ¡torom ani v Ã¡zijskÃ½ch krajinÃ¡ch, kde Å¾ije mnoho Ä¾udÃ­ s rovnakÃ½m priezviskom (ale ÄastÃ© priezviskÃ¡ sa vyskytujÃº aj v EurÃ³pe, napr. NovÃ¡k, MÃ¼ller/Miller, Schmied/Smithâ¦), Äo mÃ´Å¾e viesÅ¥ k chybnej evidencii publikaÄnej aktivity. NaprÃ­klad autorky uvÃ¡dzanÃ© ako A. Smith, Anna Smith a Anna L. Smith sÃº tri rÃ´zne osoby, no z dÃ´vodu nÃ¡hodnej zhody mena dochÃ¡dza k nesprÃ¡vnemu priradeniu ich publikÃ¡ciÃ­ nielen voÄ¾ne na internete, ale aj oficiÃ¡lne v rÃ´znych registroch a databÃ¡zach. Å½eny navyÅ¡e po svadbe Äasto prijÃ­majÃº priezvisko manÅ¾ela, Äo sÅ¥aÅ¾uje sledovanie vedeckÃ©ho zÃ¡znamu vÃ½skumnÃ­Äok. Preto vznikla myÅ¡lienka ÄÃ­selnÃ½ch identifikÃ¡torov, ktorÃ© by dokÃ¡zali jednoznaÄne odlÃ­Å¡iÅ¥ menovcov a zÃ¡roveÅ udrÅ¾aÅ¥ kontinuitu zÃ¡znamu aj po zmene mena. Å truktÃºru identifikÃ¡tora tvorÃ­ alfanumerickÃ½ znakovÃ½ kÃ³d, umoÅ¾ÅujÃºci identifikÃ¡ciu mena autora a sÃºvisiace publikovanÃ© prÃ¡ce. Podmienkou je registrÃ¡cia, vytvorenie elektronickÃ©ho 156 https://www.crossref.org/guestquery"
135,108,0.62,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â pouÅ¾itie â sÃºiastky musia by schopnÃ© pouÅ¾Ã­va funkcionalitu inÃ½ch sÃºiastok, â vysporiadanie sa s chybami â sÃºiastka musÃ­ by schopnÃ¡ vysporiada sa so zlyhanÃ­m inej sÃºiastky, hardvÃ©rovou chybou, chybou v sieovej komunikÃ¡cii a podobne. V zaiatkoch distribuovanÃ½ch systÃ©mov boli tieto problÃ©my rieÅ¡enÃ© na Ãºrovni aplikÃ¡cie â nejakÃ½m spÃ´sobom bolo zabezpeenÃ©, aby sa jednotlivÃ© sÃºiastky dokÃ¡zali vidie, aby sa vedeli navzÃ¡jom pouÅ¾Ã­va a nejakÃ½m spÃ´sobom bol zabezpeenÃ½ mechanizmus vysporiadavania sa s chybami. VÃ½vojÃ¡r sa pri tvorbe nemohol naplno zaobera domÃ©novou logikou sÃºiastky, ale musel sa vysporiadava s mnohÃ½mi technickÃ½mi detailami spomenutÃ½mi vyÅ¡Å¡ie. Tieto skutonosti iniciovali vznik spÃ¡jajÃºceho softvÃ©ru, ktorÃ½ by umoÅ¾nil prepoji softvÃ©rovÃ© sÃºiastky bez ohadu na operanÃ½ systÃ©m i hardvÃ©rovÃº platformu, na ktorej sa vykonÃ¡vajÃº. KaÅ¾dÃ½ typ spÃ¡jajÃºceho softvÃ©ru rieÅ¡i otÃ¡zky umiestnenia, pouÅ¾Ã­vania a vysporiadania sa s chybami svojim spÃ´sobom. VÃ½vojÃ¡r distribuovanÃ©ho systÃ©mu sa tak"
190,441,0.62,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V extrÃ©mnom programovanÃ­ sa kladie najvÃ¤ÄÅ¡Ã­ dÃ´raz na samotnÃ½ zdrojovÃ½ kÃ³d. Pri vÃ½voji totiÅ¾ nevznikÃ¡ prakticky Å¾iadna dokumentÃ¡cia Äi Å¡pecifikÃ¡cia. VÅ¡etky poÅ¾iadavky sÃº viac-menej priamo zapÃ­sanÃ© kÃ³dom do akceptaÄnÃ½ch testov, vÃ¤ÄÅ¡ina komunikÃ¡cie prebieha nad zdrojovÃ½m kÃ³dom, a preto je pre XP mimoriadne dÃ´leÅ¾itÃ© udrÅ¾iavaÅ¥ ich v dobre ÄitateÄ¾nej, Å¡truktÃºrovanej a pre vÅ¡etkÃ½ch zrozumi-"
115,137,0.62,Algebra a diskrÃ©tna  matematika,"V mnohÃ½ch aplikÃ¡ciÃ¡ch mnoÅ¾inovÃ¡ dÃ¡tovÃ¡ Å¡truktÃºra podstatne uÄ¾ahÄuje implementÃ¡ciu algoritmov, ktorÃ© sÃº zaloÅ¾enÃ© na formalizme teÃ³rie mnoÅ¾Ã­n. Ako prÃ­klad takÃ½chto algoritmov mÃ´Å¾e slÃºÅ¾iÅ¥ teÃ³ria grafov, ktorej jednoduchÃ¡ a sÃºÄasne aj elegantnÃ¡ teÃ³ria je zaloÅ¾enÃ¡ na mnoÅ¾inÃ¡ch. MnohÃ© algoritmy teÃ³rie grafov (napr. problÃ©m obchodnÃ©ho cestujÃºceho) patrÃ­ medzi zÃ¡kladnÃ© algoritmy, preto je dÃ´leÅ¾itÃ©, hlavne z pedagogickÃ½ch dÃ´vodov, maÅ¥ moÅ¾nosÅ¥ vyuÅ¾Ã­vaÅ¥ dÃ¡tovÃº Å¡truktÃºru mnoÅ¾iny pre zjednoduÅ¡enie a sprehÄ¾adnenie tÃ½chto algoritmov. ZÃ¡kladnÃ½ prÃ­stup k implementÃ¡cii dÃ¡tovej Å¡truktÃºry mnoÅ¾iny je jej charakteristickÃ¡ binÃ¡rna funkcia, ktorÃ¡ mÃ´Å¾e byÅ¥ reprezentovanÃ¡ binÃ¡rnym vektorom. MaximÃ¡lna dÄºÅ¾ka tohto vektora (napr. 28 = 256) Å¡pecifikuje maximÃ¡lnu mohutnosÅ¥ implementovanej mnoÅ¾iny. Pre jednoduchosÅ¥ uvaÅ¾ujme binÃ¡rne vektory dÄºÅ¾ky 23 = 8, ktorÃ© urÄujÃº mnoÅ¾iny v rÃ¡mci univerzÃ¡lnej mnoÅ¾iny U={1,2,3,4,5,6,7,8}. Tak napr. binÃ¡rny vektor (11001100) Å¡pecifikuje mnoÅ¾inu A={1,2,5,6}. Ak binÃ¡rny vektor obsahuje len nuly, potom mnoÅ¾ina A = â ; v opaÄnom prÃ­pade, ak binÃ¡rny vektor obsahuje len jednotky, potom A = U. Pomocou binÃ¡rnych vektorov mÃ´Å¾eme pomerne jednoducho vykonÃ¡vaÅ¥ algebraickÃ© operÃ¡cie nad mnoÅ¾inami. (1) OperÃ¡cia zjednotenia mnoÅ¾Ã­n A a B, C = AâªB , ktorÃ© sÃº reprezentovanÃ© binÃ¡rnymi vektormi Î¼ A = ( a1 ,a2 ,...,an ) Î¼ B = ( b1 ,b2 ,...,bn )"
240,104,0.62,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"prÃ­kaz ukonÄenÃ½ bodkoÄiarkou, alebo blok (prÃ­kazy ohraniÄenÃ© zloÅ¾enÃ½mi zÃ¡tvorkami). PrÃ­kazy sÃº vykonanÃ© iba ak je testovanÃ¡ podmienka splnenÃ¡. Po vykonanÃ­ prÃ­kazov sa vykonÃ¡ prÃ­kaz krok, napr. inkrementovanie riadiacej premennej. CieÄ¾om prÃ­kazu krok je posunÃºÅ¥ sa na ÄalÅ¡Ã­ krok v spracovanÃ­. Ak podmienka nie je splnenÃ¡, vykonÃ¡vanie cyklu sa skonÄÃ­ a vykonÃ¡vanie programu pokraÄuje prÃ­kazom uvedenÃ½m tesne za cyklom. VÃ½razy inicializacia, podmienka aj krok mÃ´Å¾u byÅ¥ prÃ¡zdne. V prÃ­pade, Å¾e telo cyklu nevyÅ¾aduje prvotnÃº inicializÃ¡ciu (prÃ­kaz incializacia) ani posun (prÃ­kaz krok) mÃ´Å¾eme pouÅ¾iÅ¥ niektorÃ½ z dvoch variantov while cyklu, ktorÃ½ okrem tela cyklu vyÅ¾aduje len podmienku urÄujÃºcu, Äi sa mÃ¡"
43,482,0.62,Objektovo orientovanÃ© programovanie v C++,"Pri vyhÄ¾adÃ¡vanÃ­ prechÃ¡dzame oba vektory naraz, priÄom v jednom vyhÄ¾adÃ¡vame zadanÃ© slovo a druhÃ½ prechÃ¡dzame zÃ¡roveÅ s nÃ­m, aby sme mohli v prÃ­pade ÃºspeÅ¡nÃ©ho vyhÄ¾adania vypÃ­saÅ¥ zodpovedajÃºci preklad. Dajme tomu, Å¾e platÃ­ jazyk=1, ÄiÅ¾e mÃ¡me prehÄ¾adaÅ¥ vektor slova1. VyhÄ¾adÃ¡vanie realizujeme tak, Å¾e z prÃ­sluÅ¡nÃ©ho iterÃ¡tora it1 urobÃ­me riadiacu premennÃº cyklu, v ktorom pole prechÃ¡dzame. ZaÄÃ­name od prvÃ©ho prvku, ktorÃ©mu zodpovedÃ¡ iterÃ¡tor slova1.begin()"
367,29,0.62,CESTA K OTVORENEJ VEDE,"HYBRIDNÃ ÄASOPISY V zÃ¡ujme zvÃ½Å¡enia prÃ­jmov niektorÃ­ vydavatelia udrÅ¾ujÃº klasickÃ½ model predplatnÃ©ho popri spoplatnenej moÅ¾nosti uverejniÅ¥ ÄlÃ¡nok v reÅ¾ime otvorenÃ©ho prÃ­stupu prostredÂ­ nÃ­ctvom APC. InÅ¡titÃºcia tak zaplatÃ­ dvakrÃ¡t â raz za prÃ­stup k celÃ©mu Äasopisu a raz APC za uverejnenie ÄlÃ¡nku. Tento kontroverznÃ½ obchodnÃ½ model Äasto vyuÅ¾Ã­vajÃº veÄ¾kÃ­ komerÄnÃ­ vydavatelia. NeodporÃºÄame platiÅ¥ tieto dodatoÄnÃ© nÃ¡klady (APC) najmÃ¤ preto, Å¾e svoj ÄlÃ¡nok mÃ´Å¾ete zverejniÅ¥ prostrednÃ­ctvom otvorenÃ©ho repozitÃ¡ra (tzv. zelenÃ¡ cesta k otvorenÃ©mu prÃ­stupu)."
135,177,0.62,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"InÃ½m prÃ­nosom mÃ´Å¾e by predaj technolÃ³gie, teda vytvorenÃ½ch sÃºiastok. Podmienkou je, Å¾e sÃºiastky budÃº pouÅ¾itenÃ© v dostatonom mnoÅ¾stve aplikÃ¡ciÃ­ a budÃº tieÅ¾ vytvorenÃ© dostatone kvalitne, aby o ne bol vyÅ¡Å¡Ã­ zÃ¡ujem ako o prÃ­padnÃº konkurenciu. To kladie vyÅ¡Å¡ie nÃ¡roky na tvorbu takÃ½chto sÃºiastok. NajlepÅ¡ie je, ke sÃºiastky dodrÅ¾iavajÃº znÃ¡me Å¡tandardy a sÃº uvÃ¡dzanÃ© prostrednÃ­ctvom katalÃ³gov, kde je ich moÅ¾nÃ© efektÃ­vne vyhadÃ¡va. KatalÃ³gy sÃº vytvÃ¡ranÃ© extrakciou metadÃ¡t z opisu jednotlivÃ½ch sÃºiastok. innosti pri vytvÃ¡ranÃ­ znovupouÅ¾itenÃ½ch sÃºiastok mÃ´Å¾eme zhrnÃº do tÃ½chto krokov:"
369,333,0.619,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Podobne ako v banke aj v poisÅ¥ovni bÃ½va nad âback endâ systÃ©mom postavenÃ½ch niekoÄ¾ko âfront endâ systÃ©mov a doplnkovÃ½ch systÃ©mov: ï· âFront-endâ systÃ©m pre obchodnÃ­kov â systÃ©m umoÅ¾Åuje vytvorenie nÃ¡vrhu poistnej zmluvy s vÃ½poÄtom poistnÃ©ho. ZÃ¡roveÅ umoÅ¾Åuje obchodnÃ­kovi zobrazenie vÅ¡etkÃ½ch poistnÃ½ch zmlÃºv, ktorÃ© uzatvoril, resp. mÃ¡ v sprÃ¡ve s moÅ¾nosÅ¥ou zmien v tÃ½chto zmluvÃ¡ch. VyspelejÅ¡ie âfront endâ systÃ©my pre obchodnÃ­kov dovoÄ¾ujÃº âoff -lineâ prÃ¡cu: obchodnÃ­k sa cez internet pripojÃ­ k âback endâ systÃ©mu a nahrÃ¡ si do prenosnÃ©ho poÄÃ­taÄa svoje zmluvy. Tieto mÃ´Å¾e âoff-lineâ zobrazovaÅ¥ a meniÅ¥ pri nÃ¡vÅ¡teve klientov. NÃ¡sledne sa cez internet pripojÃ­ k âback endâ systÃ©mu a prenesie do neho realizovanÃ© zmeny v poistnÃ½ch zmluvÃ¡ch. SystÃ©my podobnÃ©ho typu mÃ¡vajÃº aj maklÃ©rske firmy na predaj poistnÃ½ch produktov. ï· InternetovÃ½ systÃ©m pre klientov â systÃ©m umoÅ¾Åuje klientom na vybranÃ© jednoduchÃ© produkty (naprÃ­klad cestovnÃ© poistenie) uzatvÃ¡ranie poistnÃ½ch zmlÃºv. Na niektorÃ© zloÅ¾itejÅ¡ie produkty (ktorÃ© si vyÅ¾adujÃº kontrolu podkladov od klienta) poskytuje funkÄnosÅ¥ vytvorenia Å¾iadosti o danÃ½ typ poistenia. PoisÅ¥ovÅa Å¾iadosÅ¥ spracuje, pridelÃ­ ju obchodnÃ­kovi, ktorÃ½ nÃ¡sledne kontaktuje klienta a pripravÃ­ s nÃ­m nÃ¡vrh poistnej zmluvy. VyspelejÅ¡ie systÃ©my dovoÄ¾ujÃº klientom zobraziÅ¥ si svoje zmluvy, meniÅ¥ povolenÃ© atribÃºty (naprÃ­klad kontaktnÃ© Ãºdaje alebo pridaÅ¥ pripoistenie), sledovaÅ¥ platby poistnÃ©ho a hlÃ¡siÅ¥ poistnÃ© udalosti. ï· Klientsky systÃ©m (angl. customer relationship management system) â podobne ako v prÃ­pade bankovnÃ­ctva, tento systÃ©m centralizuje prÃ¡cu s produktmi klienta vedenÃ½mi vo viacerÃ½ch âback endâ systÃ©moch. Na zÃ¡klade profilu klienta a jeho doterajÅ¡Ã­ch produktov mÃ´Å¾e automaticky odporÃºÄaÅ¥ predaj sÃºvisiacich produktov klientovi, prÃ­padne tieÅ¾ poskytovaÅ¥ podporu pre marketingovÃ© kampane. ï· SystÃ©m pre âcall centrumâ - podobne ako v bankovnÃ­ctve, systÃ©m umoÅ¾Åuje prÃ­jem telefonÃ¡tov klientov, ich distribÃºciu operÃ¡torom podÄ¾a poÅ¾adovanej sluÅ¾by a vyÅ¥aÅ¾enosti operÃ¡torov, zaznamenÃ¡vanie telefonÃ¡tov a kÄ¾ÃºÄovÃ½ch informÃ¡ciÃ­. PracovnÃ­k âcall centraâ mÃ¡ zvyÄajne k dispozÃ­cii aj klientsky systÃ©m, ktorÃ½ mu poskytuje integrovanÃ½ pohÄ¾ad na klienta a jeho produkty. ï· Riadenie obchodu â systÃ©m pre podporu riadenia obchodnej siete. ProstrednÃ­ctvom systÃ©mu sa obchodnÃ­kom prideÄ¾ujÃº Ãºlohy urÄitÃ©ho typu (naprÃ­klad kontaktovaÅ¥ klienta a premigrovaÅ¥ jeho poistnÃº zmluvu do novÃ©ho produktu) a sleduje ich plnenie. ï· SystÃ©m pre provÃ­zie â systÃ©m poÄÃ­ta provÃ­zie obchodnÃ­kov na zÃ¡klade nimi uzavretÃ½ch poistnÃ½ch zmlÃºv a zmlÃºv, ktorÃ© majÃº v sprÃ¡ve. UvedenÃ¡ funkÄnosÅ¥ mÃ´Å¾e byÅ¥ sÃºÄasÅ¥ou âback endâ systÃ©mu alebo realizovanÃ¡ v samostatnom systÃ©me. TakÃ½to systÃ©m prevÃ¡dzkuje tieÅ¾ maklÃ©rska spoloÄnosÅ¥ pre predaj poistnÃ½ch produktov. ï· SystÃ©my pre Å¡kodovÃº agendu â poisÅ¥ovÅa mÃ´Å¾e maÅ¥ Å¡pecializovanÃ© systÃ©my na vÃ½poÄet Å¡kÃ´d pri poistnÃ½ch udalostiach. Pre havarijnÃ© poistenie motorovÃ½ch vozidiel mÃ´Å¾e maÅ¥ naprÃ­klad Å¡pecializovanÃ½ systÃ©m, v ktorom likvidÃ¡tor oznaÄÃ­ poÅ¡kodenÃ© Äasti motorovÃ©ho vozidla a systÃ©m na zÃ¡klade toho vypoÄÃ­ta vÃ½Å¡ku Å¡kody, priÄom"
94,142,0.619,Sprievodca svetom vedeckÃ©ho publikovania,"5.2 VedeckÃ¡ a publikaÄnÃ¡ etika Etika â veda alebo praktickÃ¡ filozofia zaoberajÃºca sa morÃ¡lnymi aspektami Ä¾udskÃ©ho konania, vymedzovanÃ­m hranÃ­c prijateÄ¾nÃ©ho a neprijateÄ¾nÃ©ho sprÃ¡vania â pomÃ¡ha Ä¾uÄom v labyrinte nejednoznaÄnÃ½ch situÃ¡ciÃ­, ktorÃ© prinÃ¡Å¡a Å¾ivot a vedeckÃ¡ prax, nestratiÅ¥ sprÃ¡vnu cestu, nedostaÅ¥ sa (moÅ¾no aj po schodoch z dobrÃ½ch Ãºmyslov) do pozÃ­cie, kde Älovek zrazu robÃ­ Äosi v rozpore s princÃ­pmi, ktorÃ© ho svojho Äasu k vede priviedli. EtickÃ© Å¡tandardy sÃº neoddeliteÄ¾nou sÃºÄasÅ¥ou vedy a ich pÃ´sobnosÅ¥ moÅ¾no rozdeliÅ¥ do troch navzÃ¡jom previazanÃ½ch oblastÃ­: 1.) morÃ¡lneho vzÅ¥ahu a zodpovednosti voÄi vÃ½skumnÃ½m subjektom (lekÃ¡rska etika, ochrana osobnÃ½ch Ãºdajov, reÅ¡pektovanie prÃ¡v zvierat, v Å¡irÅ¡om zmysle aj ochrana Å¾ivotnÃ©ho prostredia),"
190,207,0.619,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pracovne âmladÃ­â manaÅ¾Ã©ri projektov si v situÃ¡cii, kedy im projekt, ktorÃ½ vedÃº, zaÄÃ­na meÅ¡kaÅ¥, povedia, Å¾e to nevadÃ­, ich tÃ­m to predsa dobehne a nepovaÅ¾ujÃº problÃ©m za dostatoÄne dÃ´leÅ¾itÃ½, aby ho hlÃ¡sili svojim nadriadenÃ½m. NaÄo by ich s tÃ½m zaÅ¥aÅ¾ovali? VeÄ ich nadriadenÃ­ majÃº dosÅ¥ inÃ½ch starostÃ­ a koniec koncov â oni sÃº tam predsa na to, aby sa s tÃ½m vysporiadali. Na druhej strane sa takÃ­to manaÅ¾Ã©ri projektov boja, Å¾e ich nadriadenÃ­ by zaÄali sami tieto situÃ¡cie rieÅ¡iÅ¥, Äo by, okrem inÃ©ho, ublÃ­Å¾ilo ich autorite, preruÅ¡ilo ich Ãºsilie a pod. TakÅ¾e nadriadenÃ­ sa o meÅ¡kanÃ­ jednotlivÃ½ch projektov nedozvedia niÄ a vÅ¡etko sa takpovediac âzametie pod koberecâ [4]. Vina v takÃ½chto situÃ¡ciÃ¡ch nie je, prekvapivo, vÃ¤ÄÅ¡inou na strane projektovÃ½ch manaÅ¾Ã©rov, ale prÃ¡ve na strane ich nadriadenÃ½ch, teda Å¡Ã©fov. TÃ­ si zvÃ¤ÄÅ¡a sami mÃ´Å¾u za to, Å¾e sa im ich podriadenÃ­ âbojaâ povedaÅ¥ zlÃ© sprÃ¡vy. Ako extrÃ©mny a odradzujÃºci prÃ­pad mÃ´Å¾e poslÃºÅ¾iÅ¥ Å¡Ã©f, ktorÃ©ho spomÃ­na Brooks [4]. Tento manaÅ¾Ã©r zdvihol telefÃ³n a udelil rozkazy zamestnancom ihneÄ po preÄÃ­tanÃ­ Äo len prvÃ©ho nadpisu v sprÃ¡ve o stave projektu..."
184,23,0.619,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"SoftvÃ©rovÃ½ architekt musÃ­ maÅ¥ schopnosÅ¥ abstrakcie. Mal by dokÃ¡zaÅ¥ abstrahovaÅ¥ nÃ¡vrh architektÃºry na viacerÃ½ch Ãºrovniach a to aÅ¾ do takej miery, Å¾e sa zmestÃ­ na jednu stranu, na ktorej sÃº zobrazenÃ© hlavnÃ© komponenty systÃ©mu a ich vzÅ¥ahy (anglicky sa potom nazÃ½va marketecture pre jej pouÅ¾itie v komunikÃ¡ciÃ­ s manaÅ¾mentom). Abstrakcia je v architektÃºre pouÅ¾itÃ¡ vÅ¾dy, keÄÅ¾e zobrazujeme komponenty ako Äierne skrinky, ktorÃ© majÃº iba externe pozorovateÄ¾nÃ© vlastnosti. AvÅ¡ak, to Äo je na jednej Ãºrovni reprezentovanÃ© ako Äierna skrinka sa mÃ´Å¾e v ÄalÅ¡ej Ãºrovni (inÃ½, podrobnejÅ¡Ã­ pohÄ¾ad na architektÃºru systÃ©mu) dekomponovaÅ¥ na sadu subkomponentov. Tento prÃ­stup sa nazÃ½va hierarchickÃ¡ dekompozÃ­cia. HierarchickÃ¡ dekompozÃ­cia sa pouÅ¾Ã­va len tam, kde je potrebnÃ¡. HlavnÃ½ softvÃ©rovÃ½ architekt zvyÄajne navrhne zÃ¡kladnÃ© komponenty systÃ©mu, ich zodpovednosti a prepojenia a detailnÃ½ nÃ¡vrh komponentov ponechÃ¡ na jednotlivÃ© vÃ½vojovÃ© tÃ­my."
66,16,0.618,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"V rÃ¡mci relaÄnÃ©ho modelu vzhÄ¾adom na matematickÃ½ zÃ¡klad sa uvaÅ¾uje o relÃ¡ciÃ­ ako o mnoÅ¾ine n-tic (zÃ¡znamov), Äo znamenÃ¡, Å¾e v celej relÃ¡ciÃ­ sa nenachÃ¡dzajÃº dve rovnakÃ© ntice (zÃ¡znamy). VzhÄ¾adom na definÃ­ciu primÃ¡rneho kÄ¾ÃºÄa, to ani nie je moÅ¾nÃ©, pretoÅ¾e mÃ¡ jednoznaÄne identifikovaÅ¥ zÃ¡znam v relÃ¡cii. V prÃ­pade definovanÃ½ch operÃ¡ciÃ­ nad relÃ¡ciami v rÃ¡mci relaÄnej algebry je moÅ¾nÃ© dosiahnuÅ¥ duplicitnÃ© zÃ¡znamy, ale pretoÅ¾e pracujeme s mnoÅ¾inou a nie s multi-mnoÅ¾inou, tak sÃº tieto zÃ¡znamy odstrÃ¡nenÃ©. V rÃ¡mci relaÄnej algebry existuje viacero operÃ¡ciÃ­ a sÃº to naprÃ­klad selekcia (vÃ½ber riadkov), projekcia (vÃ½ber stÄºpcov), mnoÅ¾inovÃ© operÃ¡cie (prienik, zjednotenie, rozdiel), spÃ¡janie tabuliek, premenovanie. PrÃ­kladom relaÄnej algebry, ktorÃº vyuÅ¾Ã­va aj SQL sa vÅ¡ak nebudeme venovaÅ¥. Silnou strÃ¡nkou relaÄnÃ©ho dÃ¡tovÃ©ho modelu je moÅ¾nosÅ¥ vytvÃ¡rania vzÅ¥ahov medzi jednotlivÃ½mi tabuÄ¾kami. V rÃ¡mci relÃ¡cie vieme definovaÅ¥ vzÅ¥ah pomocou odkazovania sa na inÃ½ zÃ¡znam pomocou cudzieho kÄ¾ÃºÄa, ktorÃ½ odkazuje na primÃ¡rny kÄ¾ÃºÄ. PrÃ­klad prepojenia relÃ¡ciÃ­ je znÃ¡zornenÃ½ na Obr. 3., kde vidÃ­me relÃ¡cie: authors, ktorÃ¡ obsahuje zoznam autorov; relÃ¡ciu books, ktorÃ¡ obsahuje zoznam knÃ­h; relÃ¡ciu author_book, ktorÃ¡ v tomto prÃ­pade prepÃ¡ja relÃ¡cie authors a books z dÃ´vodu, Å¾e jedna kniha mÃ´Å¾e byÅ¥ napÃ­sanÃ¡ viacerÃ½mi autormi. Ak by jedna kniha mohla byÅ¥ napÃ­sanÃ¡ iba jednÃ½m autorom, tak by sme nepotrebovali relÃ¡ciu author_book. RelÃ¡cia author_book obsahuje cudzie kÄ¾ÃºÄe na tabuÄ¾ky authors a books. Zo zÃ¡znamu v author_book je moÅ¾nÃ© povedaÅ¥, Å¾e knihu s id = 1 napÃ­sal autor s id = 50."
265,356,0.618,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Äo je najvÃ¤ÄÅ¡Ã­ prÃ­nos modelu agilnÃ©ho vÃ½voja oproti vÅ¡eobecnÃ©mu iteratÃ­vno-inkrementÃ¡lnemu modelu? VykonÃ¡vanÃ© iterÃ¡cie (cykly) sÃº rÃ½chle/sviÅ¾nÃ©, typicky Äasovo ohraniÄenÃ© a vedÃº k malÃ½m a ÄastÃ½m prÃ­rastkom. Kladie sa veÄ¾kÃ½ dÃ´raz na kvalitu, dosahovanÃº najmÃ¤ cez zodpovednÃ½ prÃ­stup k testovaniu. Do vÃ½voja je priamo zakomponovanÃ½ zÃ¡kaznÃ­k, ktorÃ½ mÃ¡ Ãºlohy vo viacerÃ½ch etapÃ¡ch vÃ½voja, je integrÃ¡lnou sÃºÄasÅ¥ou modelu. V rÃ¡mci vÃ½voja sa celkovo kladie vÃ¤ÄÅ¡Ã­ dÃ´raz na Ä¾udÃ­ a interakcie medzi nimi ako na procesy a nÃ¡stroje, fungujÃºci softvÃ©r je dÃ´leÅ¾itejÅ¡Ã­ ako rozsiahla dokumentÃ¡cia, spoluprÃ¡ca so zÃ¡kaznÃ­kom mÃ¡ prednosÅ¥ pred dohadovanÃ­m kontraktu a rÃ½chla reakcia na zmenu mÃ¡ vÃ¤ÄÅ¡iu hodnotu ako postupovanie podÄ¾a plÃ¡nu. Tieto kritÃ©riÃ¡ boli sformulovanÃ© v tzv. agilnom manifeste. Model agilnÃ©ho vÃ½voja (agilnÃ½ model) tak priamo ovplyvÅuje aj manaÅ¾ment softvÃ©rovÃ©ho projektu, a to najmÃ¤ na Ãºrovni komunikÃ¡cie (v rÃ¡mci softvÃ©rovÃ½ch tÃ­mov, so zÃ¡kaznÃ­kom). Je dÃ´leÅ¾itÃ© uvedomiÅ¥ si historickÃº perspektÃ­vu vzniku agilnÃ½ch metÃ³d, ktorÃ© na konci minulÃ©ho storoÄia boli reakciou na Å¥aÅ¾kopÃ¡dny, zloÅ¾ito regulovanÃ½ prÃ­stup k vÃ½voju softvÃ©ru s veÄ¾kÃ½m podielom manaÅ¾mentu reprezentovanÃ½ vodopÃ¡dovÃ½m modelom. Tieto vlastnosti sa snaÅ¾ia agilnÃ© metÃ³dy redukovaÅ¥ alebo Ãºplne odstrÃ¡niÅ¥."
41,8,0.618,InformaÄnÃ© vzdelÃ¡vanie,"SekundÃ¡rne informaÄnÃ© pramene sÃº tie, ktorÃ© sÃº buÄ zostavenÃ© z primÃ¡rnych informaÄnÃ½ch zdrojov alebo na ne odkazujÃº. PÃ´vodnÃ¡ informÃ¡cia bola cielene upravenÃ¡, vybranÃ¡ alebo reorganizovanÃ¡ tak, aby efektÃ­vne slÃºÅ¾ila definitÃ­vnemu ÃºÄelu pre skupinu vybranÃ½ch pouÅ¾Ã­vateÄ¾ov. TakÃ©to zdroje obsahujÃº informÃ¡cie roztriedenÃ© a usporiadanÃ© na zÃ¡klade urÄitÃ©ho konkrÃ©tneho plÃ¡nu. VÅ¾dy obsahujÃº usporiadanÃ© prebalenÃ© vedomosti, ako novÃ© pÃ´vodnÃ© poznatky. SekundÃ¡rne informaÄnÃ© pramene napomÃ¡hajÃº jednoduchÅ¡ou a pohodlnejÅ¡ou formou sprÃ­stupÅovaÅ¥ informÃ¡cie uvedenÃ© v primÃ¡rnych zdrojoch. SekundÃ¡rne zdroje sÃº svojou podstatou Ä¾ahÅ¡ie a Å¡irÅ¡ie dostupnÃ©. PoskytujÃº nielen âÄ¾ahÅ¡ie strÃ¡viteÄ¾nÃ©"" informÃ¡cie, ale slÃºÅ¾ia aj ako bibliografickÃ½ kÄ¾ÃºÄ k primÃ¡rnym zdrojom informÃ¡ciÃ­. Ich podstatnÃ½m vyuÅ¾itÃ­m je v prvom rade, naviesÅ¥ ku primÃ¡rnym zdrojom. âBonnâ rozdelil sekundÃ¡rne zdroje do troch typov, ktorÃ© sÃº uvedenÃ© niÅ¾Å¡ie 1. PodÄ¾a typu indexu: a) Indexy - register prÃ¡ce obsahuje abecednÃ½ zoznam mien, tÃ©m, miest, vzorcov, nÃ¡zvov akÃ½chkoÄ¾vek vÃ½znamnÃ½ch poloÅ¾iek odkazujÃºcich na materiÃ¡ly uvedenÃ© v hlavnej Äasti prÃ¡ce. Niekedy mÃ´Å¾u byÅ¥ tieto poloÅ¾ky usporiadanÃ© chronologicky, geograficky alebo inÃ½m spÃ´sobom. b) Bibliografia - organizovanÃ½ zoznam primÃ¡rnych alebo inÃ½ch zdrojov tÃ½kajÃºcich sa danÃ©ho subjektu alebo osoby. ZvyÄajne je zoradenÃ½ abecedne podÄ¾a autora alebo chronologicky alebo tematicky. MÃ´Å¾e byÅ¥ komplexnÃ½ alebo selektÃ­vny. Niekedy mÃ´Å¾e byÅ¥ bibliografia opatrenÃ¡ poznÃ¡mkami. MÃ´Å¾e byÅ¥ uverejnenÃ¡ ako sÃºÄasÅ¥ vÃ¤ÄÅ¡ieho diela alebo ako samostatnÃ© dielo. ZÃ¡kladnÃ½m cieÄ¾om bibliografie je pomÃ´cÅ¥ pouÅ¾Ã­vateÄ¾om pri hÄ¾adanÃ­ existencie alebo identifikÃ¡cie knihy alebo inÃ©ho materiÃ¡lu, ktorÃ½ by ho mohol zaujÃ­maÅ¥. c) Indexovanie periodÃ­k - pravidelne publikovanÃ¡ kompilÃ¡cia nÃ¡zvov ÄlÃ¡nkov, ktorÃ© sa objavujÃº v aktuÃ¡lnych primÃ¡rnych Äasopisoch. Spravidla sÃº zahrnutÃ© aj tituly broÅ¾Ãºr novÃ½ch knÃ­h atÄ. Register publikÃ¡cie obsahuje abecednÃ½ zoznam mien, tÃ©m, miest, formulÃ¡ciÃ­, nÃ¡zvov akÃ½chkoÄ¾vek vÃ½znamnÃ½ch poloÅ¾iek odkazujÃºcich na materiÃ¡l uvedenÃ½ v hlavnej Äasti prÃ¡ce. Tieto poloÅ¾ky sÃº usporiadanÃ© chronologicky, geograficky alebo inÃ½m spÃ´sobom. d) Abstrakcie periodÃ­k - pravidelne publikovanÃ¡ kompilÃ¡cia struÄnÃ½ch zhrnutÃ­ ÄlÃ¡nkov v Äasopise v konkrÃ©tnom odbore alebo v monografii, sprÃ¡v, patentov a inÃ½ch primÃ¡rnych zdrojov z vÃ½skumu"
190,471,0.617,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ZÃ¡kaznÃ­cky orientovanÃ¡ stratÃ©gia umoÅ¾Åuje pochopiÅ¥ a optimalizovaÅ¥ vÅ¡etky procesy zameranÃ© na zÃ¡kaznÃ­ka. Pre ÃºspeÅ¡nÃ© riadenie vzÅ¥ahov so zÃ¡kaznÃ­kmi je nevyhnutnÃ© formulovaÅ¥ nielen zÃ¡kaznÃ­cky orientovanÃº, ale aj zÃ¡kaznÃ­cky diferencovanÃº stratÃ©giu. TÃ¡to potreba je vyvolanÃ¡ tÃ½m, Å¾e zÃ¡kaznÃ­ci kaÅ¾dej spoloÄnosti svojimi nÃ¡zormi a poÅ¾iadavkami tvoria Äasto veÄ¾mi rÃ´znorodÃº skupinu. Rozdielne programy a stratÃ©gie by mali byÅ¥ definovanÃ© pre oslovenie zÃ¡kaznÃ­kov podÄ¾a toho, v akej fÃ¡ze vzÅ¥ahu k spoloÄnosti sa nachÃ¡dza. InÃ½ program treba pre zÃ­skanie novÃ½ch zÃ¡kaznÃ­kov, inÃ½ pre zvyÅ¡ovanie lojality a ziskovosti existujÃºcich zÃ¡kaznÃ­kov a inÃ½ pre udrÅ¾anie a znovu zÃ­skanie zÃ¡kaznÃ­kov. Za najdÃ´leÅ¾itejÅ¡ie faktory sa povaÅ¾ujÃº vernosÅ¥ a udrÅ¾anie zÃ¡kaznÃ­kov, prostrednÃ­ctvom ktorÃ½ch sa buduje a zvyÅ¡uje ich ziskovosÅ¥."
367,84,0.617,CESTA K OTVORENEJ VEDE,"Cesta k otvorenej vede je prÃ­ruÄka navrhnutÃ¡ tak, aby vÃ¡s sprevÃ¡dzala na kaÅ¾dom kroku vÃ¡Å¡ho vÃ½skumu, od plÃ¡novania vedeckÃ©ho prÃ­stupu po zverejÅovanie vÃ½sledkov vÃ½skumu. Poskytuje sÃºbor nÃ¡strojov a osvedÄenÃ½ch postupov, ktorÃ© mÃ´Å¾ete priamo implementovaÅ¥ pri vÃ½skume v akomkoÄ¾vek odbore. DÃºfame, Å¾e vÃ¡s tÃ¡to prÃ­ruÄka motivuje a poskytne nÃ¡stroje, ako zrealizovaÅ¥ svoje ambÃ­cie v oblasti otvorenej vedy proâ strednÃ­ctvom zdieÄ¾ania svojich zistenÃ­ a dÃ¡t s Äo najÅ¡irÅ¡Ã­m publikom."
76,238,0.617,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ZÃ¡kladnÃ½mi sÃº vlastnosti 1, 2, 5, bod 3 je dÃ´sledok bodu 1 a bod 4 je dÃ´sledkom 1 a 2. Na reÃ¡lne ÄÃ­slo mÃ´Å¾eme nazeraÅ¥ ako na degenerovanÃº (nÃ¡hodnÃº) veliÄinu â ako na diskrÃ©tnu veliÄinu, ktorÃ¡ mÃ¡ jedinÃº hodnotu (Åou je ÄÃ­slo ), ktorÃº nadobÃºda s jednotkovou pravdepodobnosÅ¥ou. Zrejme potom E( ) = a je jasnÃ©, Å¾e bod 3 je dÃ´sledkom bodu 1. UkÃ¡Å¾me, ako vyuÅ¾ijeme vetu 4.2.1 v dÃ´kaze, naprÃ­klad, prvÃ©ho tvrdenia vety. MÃ¡me dokÃ¡zaÅ¥, Å¾e operÃ¡tor strednej hodnoty je lineÃ¡rny operÃ¡tor (to je obsah bodu 1). Na veliÄinu nazerÃ¡me ako na ( ), keÄ ( + . Preto v diskrÃ©tnom prÃ­pade â â ( E( + ) = â â ( ) ( ) ( ) â â â â"
184,287,0.616,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"SÃºborovÃ½ systÃ©m je podsystÃ©m operaÄnÃ©ho systÃ©mu, ktorÃ©ho cieÄ¾om je poskytovaÅ¥ perzistentnÃ© ÃºloÅ¾isko dÃ¡t (Levy & Silberschatz, 1990). SÃºborovÃ½ systÃ©m by mal poskytovaÅ¥ dva odliÅ¡nÃ© komponenty (Tanenbaum, 2001): Â sÃºborovÃ© sluÅ¾by Â adresÃ¡rovÃ© sluÅ¾by PrvÃ½ komponent sa tÃ½ka operÃ¡ciÃ­ nad jednotlivÃ½mi sÃºbormi, akÃ½mi sÃº: ÄÃ­tanie, zÃ¡pis alebo pripÃ¡janie obsahu k sÃºborom, zatiaÄ¾ Äo druhÃ½ sa tÃ½ka vytvÃ¡rania a manaÅ¾ovania adresÃ¡rov, pridÃ¡vania a ruÅ¡enia sÃºborov z adresÃ¡rov a podobne. V nasledujÃºcich dvoch podkapitolÃ¡ch budÃº opÃ­sanÃ© rozhrania sÃºborovÃ½ch a adresÃ¡rovÃ½ch sluÅ¾ieb."
66,78,0.616,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"To, Äi je tabuÄ¾ka oznaÄovanÃ¡ ako LEFT alebo RIGHT, urÄuje poradie, ako sÃº zapÃ­sanÃ©. Z pohÄ¾adu syntaxe sa prvÃ¡ tabuÄ¾ka uvÃ¡dza v rÃ¡mci klauzuly FROM a tÃ¡to tabuÄ¾ka je oznaÄovanÃ¡ ako LEFT. TabuÄ¾ka v rÃ¡mci klauzuly ON je oznaÄovanÃ¡ ako RIGHT. Keby boli tieto prÃ­kazy zapÃ­sanÃ© v rÃ¡mci jednÃ©ho riadku, tak klauzula FROM by sa nachÃ¡dzalo naÄ¾avo a klauzula ON napravo. V rÃ¡mci prvÃ©ho prÃ­kladu je pouÅ¾itÃ½ LEFT JOIN, kde tabuÄ¾ka tabuÄ¾ka_1 sa nachÃ¡dza na Ä¾avej strane a predstavuje teda LEFT tabuÄ¾ku. TabuÄ¾ka tabuÄ¾ka_2 predstavuje RIGHT tabuÄ¾ku. PretoÅ¾e je pouÅ¾itÃ½ LEFT JOIN, tak sa zoberÃº vÅ¡etky zÃ¡znamy z tabuÄ¾ka_1, pre ktorÃ© sa hÄ¾adajÃº zÃ¡znamy z tabuÄ¾ka_2. V prÃ­pade, Å¾e nie je nÃ¡jdenÃ½ zÃ¡znam, ktorÃ½ by vyhovoval podmienke spojenia, sÃº pre tento zÃ¡znam doplnenÃ© hodnoty NULL v zÃ¡vislosti od poÄtu stÄºpcov, ktorÃ© majÃº byt zobrazenÃ© z tabuÄ¾ka_2. V prÃ­pade druhÃ©ho prÃ­kladu, je poradie tabuliek vymenenÃ© a teda tabuÄ¾ka_2 sa stÃ¡va LEFT tabuÄ¾kou a tabuÄ¾ka_1 je RIGHT tabuÄ¾kou. KeÄÅ¾e priÅ¡lo k zmene z LEFT JOIN na RIGHT JOIN, vÃ½sledok je rovnakÃ½ ako v prvom prÃ­klade v dÃ´sledku toho, Å¾e teraz sÃº zobrazenÃ© vÅ¡etky zÃ¡znamy z RIGHT tabuÄ¾ky, pre ktorÃ© sÃº pridÃ¡vanÃ© informÃ¡cie z LEFT tabuÄ¾ky. UvaÅ¾ujme o prÃ­klade, kde chceme vypÃ­saÅ¥ vÅ¡etkÃ½ch hrÃ¡Äov bez ohÄ¾adu na to, Äi odohrali nejakÃº sezÃ³nu. V prÃ­pade, Å¾e odohrali nejakÃº sezÃ³nu, tak vo vÃ½pise budÃº vÅ¡etky hrÃ¡Äove sezÃ³ny. SQL dopyt pre takÃºto Ãºlohu mÃ´Å¾e vyzeraÅ¥ nasledovne:"
265,102,0.616,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"â¢ funkcionÃ¡lna kvalita â do akej miery sÃº splnenÃ© funkcionÃ¡lne poÅ¾iadavky (obsahuje vytvÃ¡ranÃ½ softvÃ©r poÅ¾adovanÃ© funkcie?) â¢ Å¡trukturÃ¡lna kvalita â do akej miery sÃº splnenÃ© nefunkcionÃ¡lne poÅ¾iadavky (sÃº splnenÃ© vÅ¡etky ostatnÃ© poÅ¾adovanÃ© kritÃ©riÃ¡ na sprÃ¡vanie softvÃ©ru?) NaprÃ­klad, vytvorenÃ­m internet banking aplikÃ¡cie napÄºÅame potrebu klientov banky uskutoÄÅovaÅ¥ bankovÃ© operÃ¡cie kdekoÄ¾vek a bez Äakania a potrebu banky uÅ¡etriÅ¥ personÃ¡lne nÃ¡klady na poboÄkÃ¡ch. Tieto potreby sa potom pretavia do zoznamu poÅ¾iadaviek (zoznam nie je kompletnÃ½, slÃºÅ¾i na ilustrÃ¡ciu): 1. AplikÃ¡cia umoÅ¾Åuje klientovi previesÅ¥ urÄitÃº sumu peÅazÃ­ z jeho ÃºÄtu na inÃ½ 2. BeÅ¾nÃ½ beh aplikÃ¡cie nesmie vyÅ¾adovaÅ¥ sÃºÄinnosÅ¥ personÃ¡lu banky 3. AplikÃ¡cia musÃ­ fungovaÅ¥ aj na mobilnÃ½ch zariadeniach 4. AplikÃ¡cia musÃ­ zvlÃ¡dnuÅ¥ beÅ¾aÅ¥ naraz pre 5000 klientov Ako si iste vieme predstaviÅ¥, mÃ´Å¾e existovaÅ¥ aplikÃ¡cia, ktorÃ¡ splnÃ­ vÅ¡etky tieto poÅ¾iadavky a tieÅ¾ aj aplikÃ¡cia, ktorÃ¡ splnÃ­ len niektorÃ©. MÃ´Å¾eme ich teda kvantitatÃ­vne porovnaÅ¥. ZÃ¡roveÅ moÅ¾no vidieÅ¥, Å¾e niektorÃ© poÅ¾iadavky, napr. 3 a 4, mÃ´Å¾u nadobÃºdaÅ¥ viacero hodnÃ´t vystihujÃºcich mieru ich splnenia (je rozdiel medzi tÃ½m, ak aplikÃ¡cia zvlÃ¡da 2000 alebo 20 prihlÃ¡senÃ½ch klientov). CelkovÃ¡ kvalita softvÃ©ru je teda len agregovanÃ­m miery splnenia jednotlivÃ½ch poÅ¾iadaviek."
265,428,0.616,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UML slÃºÅ¾i na modelovanie softvÃ©ru. Pomocou neho softvÃ©r: â¢ Vizualizujeme. ZÃ¡kladnou funkciou kaÅ¾dÃ©ho modelu softvÃ©ru je vizualizovaÅ¥ nejakÃ© vlastnosti softvÃ©ru. â¢ Komunikujeme. Hoci je UML len poloformÃ¡lny jazyko, je podstatne presnejÅ¡Ã­ a efektÃ­vnejÅ¡Ã­ pri komunikÃ¡cii naÅ¡ich myÅ¡lienok inÃ½m vÃ½vojÃ¡rom, neÅ¾ prirodzenÃ½ jazyk. â¢ Å pecifikujeme. UML notÃ¡cia, napriek tomu Å¾e je len poloformÃ¡lna, staÄÃ­ na jednoznaÄnÃ© vyjadrenie toho Äo mÃ¡ softvÃ©r spÄºÅaÅ¥. â¢ KonÅ¡truujeme. Pri navrhovanÃ­ softvÃ©ru slÃºÅ¾i jazyk UML ako efektÃ­vny nÃ¡stroj na vyjadrenie vysokoÃºrovÅovÃ½ch ÄÅt softvÃ©ru, napr. architektÃºry, modelu Ãºdajov Äi modelov interakciÃ­ a procesov. SlÃºÅ¾i tak ako medzistupeÅ medzi veÄ¾mi nejasnou myÅ¡lienkou v hlave vÃ½vojÃ¡ra o tom, ako mÃ¡ softvÃ©r vyzeraÅ¥ a tvrdÃ½m a detailnÃ½m zdrojovÃ½m kÃ³dom, ku ktorÃ©mu sa âna jeden skokâ je z obyÄajnej myÅ¡lienky len veÄ¾mi Å¥aÅ¾kÃ© dostaÅ¥. â¢ Dokumentujeme. Modely vyjadrenÃ© pomocou UML aj po dokonÄenÃ­ softvÃ©ru naÄalej opisujÃº jeho vysokoÃºrovÅovÃ© Ärty (samozrejme za predpokladu, Å¾e sa pri zmenÃ¡ch softvÃ©ru dÃ´sledne udrÅ¾iavajÃº) a umoÅ¾ÅujÃº tak novÃ½m vÃ½vojÃ¡rom Ä¾ahÅ¡ie oboznamovanie sa s danÃ½m softvÃ©rom."
265,349,0.616,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UveÄte vÃ½hody a nevÃ½hody iteratÃ­vneho modelu vÃ½voja softvÃ©ru (v porovnanÃ­ voÄi vodopÃ¡dovÃ©mu modelu). VÃ½hody: ZlepÅ¡ovanie produktu krok za krokom. MoÅ¾nosÅ¥ vytvorenia poÄiatoÄnej zjednoduÅ¡enej verzie produktu. ZÃ¡kaznÃ­k mÃ´Å¾e poskytovaÅ¥ priebeÅ¾nÃº spÃ¤tnÃº vÃ¤zbu, Äo mÃ´Å¾e pomÃ´cÅ¥ redukovaÅ¥ nepochopenÃ© poÅ¾iadavky uÅ¾ v zaÄiatoÄnej fÃ¡ze vÃ½voja. PotenciÃ¡l skorÃ©ho odhalenia chÃ½b, bez nutnosti opakovania uÅ¾ raz vykonanÃ½ch procesov vÃ½voja (nÃ¡vrh, implementÃ¡cia, testovanie) alebo spÃ¤tnÃ©ho negatÃ­vneho ovplyvnenia uÅ¾ hotovÃ½ch ÄastÃ­ (napr. aj vrÃ¡tane dokumentÃ¡cie)."
369,346,0.616,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 6.4. Vzor TechnologickÃ¡ zÃ¡kazka Na niÅ¾Å¡ej Ãºrovni abstrakcie sa na realizÃ¡cii zÃ¡kazky podieÄ¾ajÃº pracovnÃ­ci, zariadenia a spotrebnÃ© a opakovane pouÅ¾iteÄ¾nÃ© zdroje (obr. 6.5). Tieto predstavujÃº akÃ©si vÅ¡eobecnÃ© zdroje zÃ¡kazky. PracovnÃ­ci vystupujÃº v zÃ¡kazke v urÄitÃ½ch rolÃ¡ch (zvyÄajne bÃ½va naprÃ­klad menovanÃ½ hlavnÃ½ zodpovednÃ½ pracovnÃ­k za zÃ¡kazku). Pri zariadeniach sa eviduje najmÃ¤ Äas ich vyuÅ¾itia, kÃ½m pri ostatnÃ½ch zdrojoch ich mnoÅ¾stvo."
205,195,0.616,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","ÄalÅ¡Ã­ projekt [2] z MIT skÃºma, ako sa ovplyvÅujÃº vÅ¡etky osobnosti na WikipÃ©dii, napr. filozofi, herci, spisovatelia. WikipÃ©dia pri kaÅ¾dej osobnosti uvÃ¡dza vzÅ¥ahy: kÃ½m bola danÃ¡ osobnosÅ¥ ovplyvnenÃ¡ (vzÅ¥ah influenced by) a koho ovplyvnila (vzÅ¥ah influenced). Ãdaje pre tÃºto vizualizÃ¡ciu zÃ­skali z DBpedie. Vo vÃ½slednej interaktÃ­vnej vizualizÃ¡cii (pozri obrÃ¡zok 45) osobnosti znÃ¡zornili uzlami, ktorÃ© prepojili na zÃ¡klade uvedenÃ½ch vzÅ¥ahov. VeÄ¾kosÅ¥ uzla zodpovedÃ¡ mnoÅ¾stvu vzÅ¥ahov â ÄÃ­m vÃ¤ÄÅ¡Ã­ uzol, tÃ½m vÃ¤ÄÅ¡Ã­ vplyv mala danÃ¡ osobnosÅ¥ v histÃ³rii. Uzly farebne zoskupili do zhlukov, ktorÃ© mÃ´Å¾u reprezentovaÅ¥ filozofickÃ© smery a zoskupovaÅ¥ podobnÃ© osobnosti. TakÃ¡to vizualizÃ¡cia umoÅ¾Åuje naprÃ­klad objavovaÅ¥ novÃ© osobnosti a diela, ktorÃ© by sa nÃ¡m mohli pÃ¡ÄiÅ¥, na zÃ¡klade podobnosti s naÅ¡imi obÄ¾Ãºbencami. Projekt OrgOrgChart (Organic Organization Chart) [3] sa zameriava na sledovanie vzÅ¥ahov na pracovisku a organizaÄnÃº Å¡truktÃºru v Äase. PoÄas Å¡tyroch rokov zaznamenÃ¡vali udalosti v zamestnaneckej Å¡truktÃºre spoloÄnosti Autodesk research. Äasom sa ku spoloÄnosti pridÃ¡vali novÃ­ zamestnanci, starÃ­ odchÃ¡dzali alebo sa menili riaditelia jednotlivÃ½ch oddelenÃ­. KaÅ¾dÃ½ deÅ zobrazili zamestnaneckÃº Å¡truktÃºru v tvare stromu. JednotlivÃ© obrÃ¡zky potom pospÃ¡jali do videa, na ktorom je moÅ¾nÃ© pozorovaÅ¥ zmeny v Äase."
195,32,0.616,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"2.3 Mapovanie chÃ½b ZÃ¡znamy o chybÃ¡ch sÃº kÄ¾ÃºÄom k ÃºdrÅ¾be a ÄalÅ¡iemu vÃ½voju softvÃ©ru. Preto je o ne veÄ¾kÃ½ zÃ¡ujem zo strany vÃ½vojÃ¡rov a manaÅ¾Ã©rov. V mnohÃ½ch spoloÄnostiach a projektoch sÃº systÃ©my na sledovanie chÃ½b oddelenÃ© od systÃ©mov pre sprÃ¡vu verzii zdrojovÃ©ho kÃ³du (VCS, angl. version control systems) a preto neumoÅ¾ÅujÃº okamÅ¾itÃº analÃ½zu kvality kÃ³du a odporÃºÄania na jej zlepÅ¡enie (napr. identifikÃ¡cia komponentov, ktorÃ© sa prejavili ako chybnÃ©). Preto sa musia vytvoriÅ¥ vzÅ¥ahy medzi zÃ¡znamami o chybÃ¡ch s ich rieÅ¡eniami v podobe zmien vo verziovacÃ­ch systÃ©moch. Napriek tomu, Å¾e mapovanie chÃ½b na zmeny v zdrojovom kÃ³de je beÅ¾nou Ãºlohou v procese dolovania znalostÃ­ v tejto oblasti, existuje prekvapivo mÃ¡lo zÃ¡sadne odliÅ¡nÃ½ch mapovacÃ­ch stratÃ©giÃ­ a eÅ¡te menej vÃ½skumnÃ½ch prÃ¡c, ktorÃ© by overovali sprÃ¡vnosÅ¥ danÃ½ch mapovacÃ­ch stratÃ©giÃ­ a ich vplyv na odporÃºÄania a vytvÃ¡ranÃ© predikÄnÃ© modely. VÃ¤ÄÅ¡ina mapovacÃ­ch stratÃ©giÃ­ je zaloÅ¾enÃ¡ na hÄ¾adanÃ­ referencii v sprÃ¡vach o odovzdanÃ­ (angl. commit messages) pomocou regulÃ¡rnych vÃ½razov. PresnosÅ¥ mapovania sa mÃ´Å¾e zvÃ½Å¡iÅ¥ aplikÃ¡ciou filtrov."
236,189,0.616,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"LATEX vytvÃ¡ra svoje strany rozmiestÅovanÃ­m boxov (Å¡katuliek, krabiÄiek, schrÃ¡nok, skriniek). Po prvÃ©, kaÅ¾dÃ© pÃ­smeno je malÃ¡ krabiÄka, ktorÃ¡ sa Äalej nalepuje na inÃ© pÃ­smenÃ¡, vytvÃ¡rajÃºc slovÃ¡. Tieto sa zasa prilepujÃº k ÄalÅ¡Ã­m slovÃ¡m, ale Å¡peciÃ¡lnym glejom7 , ktorÃ½ je pruÅ¾nÃ½. Preto mÃ´Å¾e byÅ¥ rad slov stlaÄenÃ½ alebo roztiahnutÃ½ tak, aby mohol presne vyplniÅ¥ riadok na strane. PripÃºÅ¡Å¥am, Å¾e toto je veÄ¾mi zjednoduÅ¡enÃ¡ verzia toho, Äo sa skutoÄne stane, ale myÅ¡lienka je takÃ¡, Å¾e TEX narÃ¡ba s glejom (lepidlom) a so Å¡katuÄ¾kami (boxmi). Ale nielen pÃ­smenÃ¡ mÃ´Å¾u tvoriÅ¥ box. Do krabiÄky mÃ´Å¾ete poloÅ¾iÅ¥ skutoÄne vÅ¡etko, vrÃ¡tane inÃ½ch boxov. LATEX zaobchÃ¡dza s kaÅ¾dÃ½m boxom, akoby to bolo jedno pÃ­smeno. V predchÃ¡dzajÃºcich kapitolÃ¡ch ste sa uÅ¾ niektorÃ½mi boxmi stretli, hoci som vÃ¡m to nepovedal. Prostredie tabular a prÃ­kaz \includegraphics, naprÃ­klad, oboje vytvÃ¡rajÃº box. To znamenÃ¡, Å¾e Ä¾ahko mÃ´Å¾ete umiestniÅ¥ dve tabuÄ¾ky alebo dva obrÃ¡zky vedÄ¾a seba. Len si musÃ­te byÅ¥ istÃ­, Å¾e ich spoloÄnÃ¡ Å¡Ã­rka nie je vÃ¤ÄÅ¡ia ako nastavenÃ¡ Å¡Ã­rka strany."
43,13,0.615,Objektovo orientovanÃ© programovanie v C++,"dom nÃ¡Å¡ho suseda, rodiÄovskÃ½ dom atÄ. Takto by sme mohli pokraÄovaÅ¥ Äalej. Ak by sme nÃ¡Å¡ svet povaÅ¾ovali za program, potom by sme skutoÄne vÅ¡etky predmety, hmotnÃ© aj nehmotnÃ©, mohli vidieÅ¥ ako objekty istÃ½ch tried a takisto platÃ­, Å¾e kaÅ¾dÃº akciu, ktorÃ¡ sa udeje, vykonÃ¡va objekt nejakej triedy. Å½iadna akcia nemÃ´Å¾e existovaÅ¥ nezÃ¡visle, kaÅ¾dÃ¡ schopnosÅ¥ alebo ÄinnosÅ¥ je spojenÃ¡ s nejakou triedou. NaprÃ­klad Ã­sÅ¥ mÃ´Å¾e Älovek alebo auto, svietiÅ¥ mÃ´Å¾e lampa alebo vesmÃ­rne teleso, stÃ¡Å¥ mÃ´Å¾e budova atÄ. Rovnako to platÃ­ pre vlastnosti â hÄºbku mÃ´Å¾u maÅ¥ jazerÃ¡ alebo nÃ¡doby, farbu vÅ¡etky viditeÄ¾nÃ© objekty. Presne tieto princÃ­py boli inÅ¡pirÃ¡ciou pre vytvorenie objektovo orientovanÃ©ho programovania a dobre navrhnutÃ© objektovo orientovanÃ© programy by mali pripomÃ­naÅ¥ organizÃ¡ciu a logiku reÃ¡lneho sveta."
41,37,0.615,InformaÄnÃ© vzdelÃ¡vanie,"CieÄ¾om kaÅ¾dÃ©ho vedca je maÅ¥ publikÃ¡ciu zaradenÃº do vedeckej databÃ¡zy. KeÄÅ¾e spravovanie vedeckÃ½ch databÃ¡z je relatÃ­vne lukratÃ­vny biznis, do ktorÃ©ho sa ako vÅ¾dy mieÅ¡a politika, je na svete mnoho rozliÄnÃ½ch vedeckÃ½ch databÃ¡z rÃ´zneho vÃ½znamu. TÃ½ch, ktorÃ© sÃº ale beÅ¾ne uznÃ¡vanÃ©, a ktorÃ© poskytujÃº relatÃ­vne komplexnÃ½ pohÄ¾ad na stav vednÃ½ch disciplÃ­n vo svete je relatÃ­vne mÃ¡lo. VÄaka predplatenÃ½m sluÅ¾bÃ¡m si aj vy, Å¡tudenti na STU BA mÃ´Å¾ete dovoliÅ¥ vyhÄ¾adÃ¡vaÅ¥ a zÃ­skavaÅ¥ poznatky zo svetovÃ½ch vedeckÃ½ch databÃ¡z. Pre dostupnÃ© prehÄ¾adÃ¡vanie je vÅ¡ak potrebnÃ©, aby ste boli: â¢ Na sieti STU a zÃ­skali tak IP adresu pre svoj poÄÃ­taÄ z rozsahu IP adries STU. â¢ NainÅ¡talovali si a vytvorili vzdialenÃ½ prÃ­stup VPN cez STU (v prÃ­pade, Å¾e ste riadny Å¡tudent, VirtuÃ¡lna privÃ¡tna sieÅ¥ STU (stuba.sk), RDP pripojenie do fakultnej siete.pdf (stuba.sk)). Z hÄ¾adiska vyuÅ¾Ã­vania pracujÃº vedeckÃ© databÃ¡zy ako vyhÄ¾adÃ¡vacie stroje (searching engines). BuÄ priamo poskytujÃº, alebo odkazujÃº na prÃ­sluÅ¡nÃ½ ÄlÃ¡nok. Z tohto druhu pohÄ¾adu ich mÃ´Å¾me deliÅ¥ na: â¢ ScientometrickÃ©/citaÄnÃ© (bibliografickÃ©) â s odkazmi na primÃ¡rne zdroje ÄlÃ¡nkov. DatabÃ¡za obsahuje abstrakt ÄlÃ¡nku a odkaz na jeho umiestnenie. PrÃ­kladmi sÃº Web of Science, SCOPUS, Dimensions â¢ PlnotextovÃ© (FullText) â to znamenÃ¡, Å¾e vyhÄ¾adÃ¡vanie v nich je moÅ¾nÃ© zadanÃ­m konkrÃ©tneho textu, ktorÃ½ sa hÄ¾adÃ¡ v prÃ­sluÅ¡nom ÄlÃ¡nku v rÃ¡mci databÃ¡zy, to jest, Å¾e databÃ¡za obsahuje celÃ½ text prÃ­sluÅ¡nÃ©ho ÄlÃ¡nku, nie odkaz. PrÃ­kladmi sÃº: ScienceDirect, SpringerLink, IEEEXplore â¢ AgregaÄnÃ© databÃ¡zy â sÃº databÃ¡zy pozostÃ¡vajÃºce z odkazov na zdroje rnomovanÃ½ch vydavteÄ¾stiev, ako ja menej znÃ¡mÃ½ch vydavateÄ¾ov. ZvÃ¤ÄÅ¡a neposkytujÃº priamy prÃ­stup do plnÃ½ch textov, pokiaÄ¾ sa nejednÃ¡ o menej znÃ¡meho vydavateÄ¾a, ktorÃ½ takÃ½mto spÃ´sobom ponÃºka elektronickÃ© prÃ­stupy do svojich titulov. V ponuke STU sÃº ProQUEST, EBSCOhost, Gale AcademicOneFile NajbeÅ¾nejÅ¡Ã­mi databÃ¡zami, ktorÃ© sÃº dostupnÃ© aj z prostredia STU a pre vaÅ¡e vyuÅ¾itie sÃº [4]: â Scopus â www.scopus.com , bibliografickÃ¡ a scientometrickÃ¡ databÃ¡za, ktorÃ¡ patrÃ­ medzi najvÃ¤ÄÅ¡ie na svete. Poskytuje mimoriadne Å¡irokÃ½ pohÄ¾ad na publikovanÃ© vedeckÃ© prÃ¡ce, a tÃ½m aj na vedu a vÃ½skum v celosvetovom"
393,31,0.615,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"NaprÃ­klad zÃ¡kladnÃ½ reaktÃ­vny plÃ¡n pre hrÃ¡Äa v simulovanom poÄÃ­taÄovom futbale Robocup by mohol vyzeraÅ¥ tak, ako v tabuÄ¾ke 1-2. KeÄ sa hrÃ¡Ä zaÄne vykonÃ¡vaÅ¥ a lopta je uÅ¾ v brÃ¡nke, tak nemÃ¡ zmysel vykonÃ¡vaÅ¥ Å¾iadne akcie, lebo bol gÃ³l. Preto je krok F cieÄ¾ovÃ½. V opaÄnom prÃ­pade, pokiaÄ¾ mÃ¡ hrÃ¡Ä loptu, tak mÃ´Å¾e alebo strieÄ¾aÅ¥ na brÃ¡nku E alebo prihraÅ¥ spoluhrÃ¡Äovi D, alebo beÅ¾aÅ¥ s loptou C, priority zodpovedajÃº tomu, Å¾e je najvÃ½hodnejÅ¡ie priamo vystreliÅ¥ na brÃ¡nku (pokiaÄ¾ sa to dÃ¡). PokiaÄ¾ sa to nedÃ¡, tak prihraÅ¥ spoluhrÃ¡Äovi (pokiaÄ¾ je vo vÃ½hodnejÅ¡ej polohe), alebo Ã­sÅ¥ Äalej s loptou (ale to unavuje hrÃ¡Äa viac ako streÄ¾ba na brÃ¡nku alebo prihrÃ¡vka). Ãmerne k vÃ½hodnosti pre hrÃ¡Äa sÃº krokom priradenÃ© rÃ´zne priority. PokiaÄ¾ hrÃ¡Ä nemÃ¡ loptu pod kontrolou, tak sa mÃ´Å¾e pokÃºsiÅ¥ ju ovlÃ¡dnuÅ¥ B. PokiaÄ¾ hrÃ¡Ä nevie urobiÅ¥ niÄ, tak ÄakÃ¡ A."
195,67,0.614,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Sledovanie interakciÃ­ programÃ¡tora JednotlivÃ© systÃ©my sa odliÅ¡ujÃº ÃºrovÅou podrobnosti zbieranÃ½ch dÃ¡t, ich umiestnenia lokÃ¡lne alebo vzdialene, alebo aj podporovanÃ½mi zdrojmi dÃ¡t. ÃroveÅ podrobnosti dÃ¡t vplÃ½va na efektÃ­vnosÅ¥ zbierania dÃ¡t a moÅ¾nosti ich pouÅ¾itia. - Mylyn â verejne dostupnÃ© rozÅ¡Ã­renie pre vÃ½vojovÃ© prostredie Eclipse8. LokÃ¡lny logovaÄ uchovÃ¡va agregovanÃ© dÃ¡ta o prÃ¡ci programÃ¡tora so sÃºbormi zdrojovÃ©ho kÃ³du, ktorÃ© je moÅ¾nÃ© pridaÅ¥ k rieÅ¡eniam Ãºloh v systÃ©me pre sprÃ¡vu Ãºloh v podobe kontextu Ãºlohy. Kontext Ãºlohy je vÃ½hodnÃ© pouÅ¾iÅ¥ pri nÃ¡vrate k prÃ¡ci, alebo jej prevzatÃ­ po inom programÃ¡torovi. - PerConIK â vÃ½skumnÃ½ projekt zameranÃ½ na zbieranie dÃ¡t, ich spracovanie a vyhodnotenie9. Oproti Mylyn sa vyznaÄuje zbieranÃ­m podrobnejÅ¡Ã­ch dÃ¡t, a to ako z prostredia Eclipse, tak aj Microsoft Visual Studio do vzdialenÃ©ho centrÃ¡lneho ÃºloÅ¾iska. Spomedzi vÃ½skumnÃ½ch vÃ½stupov projektu mÃ´Å¾eme spomenÃºÅ¥ oznaÄovanie zdrojovÃ©ho kÃ³du metadÃ¡tami v podobe informaÄnÃ½ch znaÄiek nesÃºcich informÃ¡cie zÃ­skanie prÃ¡ve z dÃ¡t interakciÃ­ [11], odhadovanie expertÃ­zy programÃ¡tora [8], alebo aj identifikÃ¡ciu zÃ¡vislostÃ­ v zdrojovom kÃ³de bez syntaktickej analÃ½zy [6]. HlavnÃ½m problÃ©mom rozsiahleho rozÅ¡Ã­renia a uplatniteÄ¾nosti systÃ©mov pre sledovanie programÃ¡tora a je potreba vlastnÃ½ch rozÅ¡Ã­renÃ­ do existujÃºcich vÃ½vojÃ¡rskych nÃ¡strojov a presvedÄenie programÃ¡tora ich pouÅ¾Ã­vaÅ¥. PodobnÃ© rieÅ¡enia vÅ¡ak uÅ¾ existujÃº pre zaznamenÃ¡vanie Äinnosti pouÅ¾Ã­vateÄ¾a na Webe. V kombinÃ¡cii s narastajÃºcim trendom prechodu vÃ½vojovÃ½ch prostredÃ­ na Web10 tak vidÃ­me zjednoduÅ¡enie rozÅ¡Ã­renia prostredÃ­ o sledovanie Äinnosti programÃ¡tora [5]."
43,358,0.614,Objektovo orientovanÃ© programovanie v C++,"8.2 Typy dediÄnosti a zÃ¡kladnÃ¡ syntax UÅ¾ vieme, Å¾e v rodiÄovskej triede mÃ´Å¾u byÅ¥ dÃ¡ta a metÃ³dy troch typov â sÃºkromnÃ©, chrÃ¡nenÃ© a verejnÃ©. Rovnako to je v odvodenej triede. OtÃ¡zkou je, do ktorej z tÃ½chto troch ÄastÃ­ sa v odvodenej triede umiestnia zdedenÃ© prvky. OdpoveÄ zÃ¡visÃ­ od toho, akÃ½ typ dediÄnosti zvolÃ­me. Rovnako ako prvky, aj dediÄnosÅ¥ mÃ´Å¾e byÅ¥ sÃºkromnÃ¡, chrÃ¡nenÃ¡ a verejnÃ¡. SÃºkromnÃ¡ dediÄnosÅ¥ je takÃ½ typ dediÄnosti, pri ktorom sa vÅ¡etky dÃ¡ta a metÃ³dy rodiÄovskej triedy stanÃº sÃºkromnÃ½mi prvkami odvodenej triedy. ChrÃ¡nenÃ¡ dediÄnosÅ¥ spoÄÃ­va v tom, Å¾e sÃºkromnÃ© prvky rodiÄovskej triedy budÃº sÃºkromnÃ½mi prvkami odvodenej triedy a chrÃ¡nenÃ© a verejnÃ© prvky rodiÄovskej triedy sa v odvodenej triede stanÃº chrÃ¡nenÃ½mi prvkami. Pri verejnej dediÄnosti sa zaradenie prvkov zachovÃ¡va. To znamenÃ¡, Å¾e sÃºkromnÃ© prvky rodiÄovskej triedy ostanÃº sÃºkromnÃ½mi aj v odvodenej triede, chrÃ¡nenÃ© prvky ostanÃº chrÃ¡nenÃ½mi a verejnÃ© verejnÃ½mi. Å tandardnÃ¡ dediÄnosÅ¥ v C++ je sÃºkromnÃ¡. Ak chce programÃ¡tor pouÅ¾iÅ¥ inÃ½ typ dediÄnosti, musÃ­ to programu explicitne povedaÅ¥. SpÃ´sob zaradenia prvkov rodiÄovskej triedy do odvodenej triedy pri rÃ´znych typoch dediÄnosti je zosumarizovanÃ½ v tab. 8.1."
94,221,0.614,Sprievodca svetom vedeckÃ©ho publikovania,"OdliÅ¡nosti vednÃ½ch odborov: jednotlivÃ© vednÃ© odbory majÃº odliÅ¡nÃ© spÃ´soby komunikÃ¡cie. V spoloÄenskÃ½ch a humanitnÃ½ch vedÃ¡ch sa typicky vedeckÃ© vÃ½stupy komunikujÃº v podobe kniÅ¾nÃ½ch titulov s niÅ¾Å¡ou frekvenciou publikovania (napr. vÃ½sledky etnologickÃ©ho vÃ½skumu). Naopak v technickÃ½ch vedÃ¡ch sÃº vedeckÃ© vÃ½sledky publikovanÃ© najÄastejÅ¡ie v podobe ÄasopiseckÃ½ch ÄlÃ¡nkov s vysokou frekvenciou publikovania. Vo vzÅ¥ahu frekvencie publikovania a citovanosti logicky platÃ­ priama Ãºmera: ÄÃ­m vyÅ¡Å¡ia je frekvencia publikovania, tÃ½m ÄastejÅ¡ie sa mÃ´Å¾u objaviÅ¥ citÃ¡cie."
129,13,0.614,Sprievodca licenciami Creative Commons,"vyrozumenia autora). TakÃ¡to licencia vÅ¡ak mÃ´Å¾e byÅ¥ len nevÃ½hradnÃ¡, bezodplatnÃ¡ a nemoÅ¾no ju vypovedaÅ¥. TÃ½mto spÃ´sobom je umoÅ¾nenÃ© uzatvÃ¡ranie tzv. verejnÃ½ch licenciÃ­, ako sÃº naprÃ­klad licencie CC (Creative Commons), GNU, GPL, BSD, EUPL). Ich vyuÅ¾itie je dvojakÃ©: kaÅ¾dÃ½ ich mÃ´Å¾e aplikovaÅ¥ na svoje vlastnÃ© novovytvorenÃ© diela, na druhej strane mÃ´Å¾e kaÅ¾dÃ½ pouÅ¾Ã­vaÅ¥ cudzie diela Å¡Ã­renÃ© pod tÃ½mito licenciami, ak dodrÅ¾Ã­ podmienky, ktorÃ© sa s danou verejnou licenciou spÃ¡jajÃº. Zdroje: h  ttps://www.dusevnevlastnictvo.gov.sk/web/guest/autorske-pravo https://www.lita.sk/co-je-kolektivna-sprava https://www.dusevnevlastnictvo.gov.sk/web/guest/kolektivna-sprava-prav http://www.dusevnevlastnictvo.gov.sk/web/guest/osobitne-pravo-k-databaze ZÃ¡kon Ä.185/2015 Z. z. AutorskÃ½ zÃ¡kon: https://www.zakonypreludi.sk/zz/2015-185 ]"
130,99,0.614,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"3 VYBRANÃ VZORY SPRÃVANIA Äo v skutoÄnosti rozumieme pod pojmom sprÃ¡vanie v objektovo orientovanom svete obzvlÃ¡Å¡Å¥? AkÃ© typy sprÃ¡vania nÃ¡m definujÃº takto pomenovanÃ© vzory? PokiaÄ¾ nechceme alebo nepotrebujeme odpoveÄ v kontexte konkrÃ©tneho vzoru mÃ´Å¾eme povedaÅ¥, Å¾e ide o definÃ­ciu vÅ¡eobecnÃ©ho postupu, ktorÃ½ je konkretizovanÃ½ inÅ¡tanciou samotnÃ©ho vzoru. Vzory sprÃ¡vania resp. ich charakteristickÃ¡ skupina nÃ¡m umoÅ¾ÅujÃº alternovaÅ¥ nad konkrÃ©tnym postupom v Äase behu programu. Nie je potrebnÃ© urÄiÅ¥ konkrÃ©tny prÃ­stup uÅ¾ v Äase kompilÃ¡cie, konkrÃ©tne postupy alebo sprÃ¡vania sa dodrÅ¾iavanÃ­m vzorom definovanÃ½ch rozhranÃ­ stÃ¡vajÃº vzÃ¡jomne zameniteÄ¾nÃ© a z vonkajÅ¡ieho pohÄ¾adu ekvivalentnÃ©."
393,231,0.613,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"strÃ¡nky, portÃ¡ly a inÃ©. ZaujÃ­ma nÃ¡s automatickÃ© rozpoznanie komunÃ­t. ÃspeÅ¡nosÅ¥ HITS algoritmu zÃ¡leÅ¾Ã­ na tom, Äi komunita obsahuje hustÃº sieÅ¥ hypertextovÃ½ch odkazov na autorskÃ© zdroje. Teda ide o rozpoznanie hustÃ½ch bipartitnÃ½ch grafov, kde podgrafy sÃº kompletnÃ½mi bipartitnÃ½mi grafmi. Technika na identifikovanie komunÃ­t sa volÃ¡ trawling (chytanie rÃ½b do siete). Pre veÄ¾kÃº sieÅ¥ je tÃ¡to technika veÄ¾mi Äasovo nÃ¡roÄnÃ¡. V inej prÃ¡ci sa komunity definujÃº ako zoskupenie strÃ¡nok, ktorÃ© majÃº viac odkazov na Älenov komunity ako odkazov mimo komunity."
135,318,0.613,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"120 Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informanÃ½ch systÃ©mov Pri nÃ¡vrhu rÃ¡mca treba myslie na to, Å¾e je asto jednoduchÅ¡ie vytvÃ¡ra aplikÃ¡ciu inÅ¡tanciovanÃ­m existujÃºcich Å¡tandardnÃ½ch objektov, im sa dosiahne, Å¾e asti aplikÃ¡cie je moÅ¾nÃ© vytvori bez programovania, naprÃ­klad cez grafickÃ© rozhranie rÃ¡mca. KeÅ¾e v mnohÃ½ch organizÃ¡ciÃ¡ch sa stÃ¡le pouÅ¾Ã­va kvalitnÃ½ hoci zastaranÃ½ softvÃ©r, treba pri nÃ¡vrhu myslie aj na moÅ¾nosti jeho integrÃ¡cie ako aj na integrÃ¡ciu aplikÃ¡ciÃ­ vytvorenÃ½ch v rozdielnych rÃ¡mcoch. NÃ¡vrh rÃ¡mcov by mal by vykonÃ¡vanÃ½ aÅ¾ po riadnom pochopenÃ­ domÃ©novej oblasti, priom by mal by o najahÅ¡ie pochopitenÃ½. Z hadiska Å¡truktÃºry sa odporÃºa navrhova rÃ¡mce tak, aby podporovali najmÃ¤ zamenitenos, dokonca eÅ¡te pred znovupouÅ¾itenosou. KaÅ¾dÃ½ dobrÃ½ nÃ¡vrh by mal obsahova aj moÅ¾nosti testovania. ProblÃ©my s rÃ¡mcami RÃ¡mce sÃº zaloÅ¾enÃ© na uritÃ½ch zÃ¡kladnÃ½ch Å¡truktÃºrach rieÅ¡enÃ­ problÃ©mov a vychÃ¡dzajÃº z mnohÃ½ch predpokladov, na ktorÃ© reagujÃº vlastnÃ½mi spÃ´sobmi. Tieto vlastnosti vÅ¡ak mÃ´Å¾u spÃ´sobova viacerÃ© problÃ©my, i uÅ¾ ide o vÃ½voj rÃ¡mcov so zapracovÃ¡vanÃ­m zmien v domÃ©novej oblasti alebo rozsahom pokrytia domÃ©ny alebo kompozÃ­ciou, kedy mÃ´Å¾u vznika naprÃ­klad problÃ©my s riadenÃ­m, ak spojÃ­me dva rÃ¡mce, ktorÃ© aktÃ­vne riadia tok aplikÃ¡cie. alÅ¡Ã­mi problÃ©mami bÃ½vajÃº naprÃ­klad kompozÃ­cia so zastaranÃ½mi komponentmi, ktorÃ¡ sa zvykne rieÅ¡i pomocou adaptÃ©ra, i pokazenie rÃ¡mca, kedy v rÃ¡mci vÃ½voja rÃ¡mca prestanÃº by funknÃ© starÅ¡ie aplikÃ¡cie. RÃ¡mce predstavujÃº znanÃº pomoc pri vÃ½voji softvÃ©ru. PredstavujÃº posun v znovupouÅ¾itÃ­ a zefektÃ­vnenÃ­ prÃ¡ce. MajÃº vyÅ¡Å¡ie vstupnÃ© nÃ¡klady (najmÃ¤ z hadiska nauenia) a svoje nevÃ½hody, ale ponÃºkajÃº aj podstatnÃ© vÃ½hody, ktorÃ© umoÅ¾ujÃº vyvÃ­ja kvalitnÃ© aplikÃ¡cie."
367,20,0.613,CESTA K OTVORENEJ VEDE,"ZÃ¡lohovanie a uchovÃ¡vanie: ako budÃº dÃ¡ta poÄas vÃ½skumu uchovÃ¡vanÃ© a ukladanÃ©? Kto bude zodpovednÃ½ za obnovenie dÃ¡t v prÃ­pade vÃ½padku? PrÃ¡vne a bezpeÄnostnÃ© otÃ¡zky: akÃ© ochrannÃ© predpisy sa vzÅ¥ahujÃº na vaÅ¡e dÃ¡ta? AkÃ½mi metÃ³dami zabezpeÄÃ­te ochranu osobnÃ½ch Ãºdajov alebo inÃ½ch citlivÃ½ch dÃ¡t? OboznÃ¡mte sa najmÃ¤ so VÅ¡eobecnÃ½m nariadenÃ­m o ochrane Ãºdajov (GDPR, informÃ¡cie nÃ¡jdete aj na strÃ¡nke n k Ãradu na ochranu osobnÃ½ch Ãºdajov SR), zÃ¡konom Ä. 211/2000 Z. z. o slobodnom prÃ­stupe k informÃ¡ciÃ¡m a o zmene a doplÂ­ nenÃ­ niektorÃ½ch zÃ¡konov (zÃ¡kon o slobode informÃ¡ciÃ­) v znenÃ­ neskorÅ¡Ã­ch predâ pisov, Äi s n k katalÃ³gom otvorenÃ½ch dÃ¡t verejnej sprÃ¡vy. Na zdieÄ¾anie dÃ¡t v strednom a dlhodobom horizonte uvaÅ¾ujte nad nasledovnÃ½m: â¢ kto mÃ´Å¾e chcieÅ¥ pouÅ¾iÅ¥ vaÅ¡e dÃ¡ta, â¢ akÃ© sÃº kritÃ©riÃ¡ na vÃ½ber zdieÄ¾anie dÃ¡t, â¢ ako dlho je ÃºÄelnÃ© uchovÃ¡vaÅ¥ dÃ¡ta, â¢ dÃ¡tovÃ½ repozitÃ¡r, v ktorom svoje dÃ¡ta uloÅ¾Ã­te, â¢ spÃ´sob identifikÃ¡cie dÃ¡t (trvalÃ½ identifikÃ¡tor / DOI), â¢ identifikÃ¡cia prispievateÄ¾ov do dÃ¡tovÃ©ho sÃºboru (osobnÃ½ trvalÃ½ identifikÃ¡tor / ORCID). ZodpovednosÅ¥ a zdroje: Å¡pecifikujte Ãºlohy a zodpovednosti jednotlivÃ½ch ÃºÄastnÃ­kov projektu, najmÃ¤ pri kolaboratÃ­vnom vÃ½skume, na ktorom sa podieÄ¾a mnoÅ¾stvo vÃ½skumnÃ­kov, inÅ¡titÃºciÃ­ a skupÃ­n, z ktorÃ½ch mÃ¡ kaÅ¾dÃ¡ vlastnÃ© postupy prÃ¡ce. Pri tvorbe plÃ¡nov manaÅ¾mentu dÃ¡t a softvÃ©ru mÃ´Å¾ete vyuÅ¾iÅ¥ uÅ¾ existujÃºce nÃ¡stroje ako OpenAIREâArgos, DMPOnline, DMPtool, Data Stewardship Wizard, DMP OPIDoR. Pozrite aj âOtvorenÃ© sprÃ­stupnenie vÃ½skumnÃ½ch dÃ¡tâ, str. 25"
343,36,0.613,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"V skutoÄnosti ten Lightning je poprepÃ¡janÃ½ nÃ¡hodnÃ½m spÃ´sobom, a teda ta nedÃ´veryhodnosÅ¥ je mitigovanÃ¡ tak, Å¾e ja len posÃºvam transakcie medzi kanÃ¡lmi, ale nemÃ¡m moÅ¾nosÅ¥ ich ovplyvniÅ¥. MÃ´Å¾u tam vzniknÃºÅ¥ nejakÃ© cykly a je Ãºplne beÅ¾nÃ©, Å¾e sa tam poprepÃ¡jajÃº rÃ´zny jedinci medzi sebou, ale tÃ­ si vÃ¤ÄÅ¡inou dÃ´verujÃº. Tento model umoÅ¾Åuje pridÃ¡vaÅ¥ rÃ´zne rozÅ¡Ã­renia, napr. nejakÃ© pÃ´Å¾iÄkÃ¡rne, kde si viete poÅ¾iÄaÅ¥ do toho payment channelu, alebo sÃº tam nejakÃ© multi currency hubs na vÃ½menu jednÃ©ho aktÃ­va za inÃ©, atÄ."
135,761,0.613,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"11.7 SieovÃ© spojenie modelov 11.7.1 ObsluÅ¾nÃ© siete Siete systÃ©mov hromadnej obsluhy sÃº tvorenÃ© systÃ©mami hromadnej obsluhy, priom poÅ¾iadavka, ktorej obsluha skonila v jednom systÃ©me mÃ´Å¾e vyÅ¾adova alÅ¡iu obsluhu. Ak poÅ¾iadavka vyÅ¾aduje obsluhu v systÃ©me v ktorom uÅ¾ bola, hovorÃ­me o systÃ©me so slukou. Siete, do ktorÃ½ch mÃ´Å¾u poÅ¾iadavky prichÃ¡dza z ich okolia a odchÃ¡dza z nich nazÃ½vame otvorenÃ½mi. V opanom prÃ­pade sÃº to zatvorenÃ© siete. Na obrÃ¡zku 11-9 je znÃ¡zornenÃ¡ sie Å¡tyroch poÃ­taov. PoÃ­tae 1 a 3 prijÃ­majÃº Ãºlohy, poÃ­tae 2 a 3 odosielajÃº vÃ½sledky spracovania Ãºloh."
190,121,0.613,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PlÃ¡novanie je jeden z procesov v manaÅ¾mente projektu. Hlavnou nÃ¡plÅou plÃ¡novania je vytvorenie a ÃºdrÅ¾ba plÃ¡nu, teda rozvrhu, podÄ¾a ktorÃ©ho sa budÃº vykonÃ¡vaÅ¥ Äinnosti v rÃ¡mci projektu. SÃºÄasÅ¥ou plÃ¡nu je tieÅ¾ definÃ­cia cieÄ¾ov projektu, urÄenie poÅ¾iadaviek na zdroje a ÄasovÃ½ rozvrh. Niekto by si mohol pomyslieÅ¥, Å¾e plÃ¡novanie je zabitÃ½ Äas. ZnÃ¡ma Ä¾udovÃ¡ pranostika vÅ¡ak vravÃ­: âDvakrÃ¡t meraj a raz reÅ¾â. Z toho je zjavnÃ©, Å¾e uÅ¾ v minulosti Ä¾udia poznali dÃ´vody pre plÃ¡novanie. PlÃ¡novanie totiÅ¾ nie je samoÃºÄelnÃ©. SlÃºÅ¾i ako zÃ¡klad pre rozhodovanie (napr. ktorÃ½ krok treba vykonaÅ¥, Äi stÃ­hame pridaÅ¥ ÄalÅ¡iu funkcionalitu), riadenie (napr. rozdelenie Ãºloh, pridelenie zdrojov) a kontrolu (napr. otÃ¡zka, Äi ide vÅ¡etko podÄ¾a plÃ¡nu). PlÃ¡novanie nie je len o zostavenÃ­ plÃ¡nu, je to vlastne premÃ½Å¡Ä¾anie pred aktivitou. PlÃ¡novanÃ­m sa zostavÃ­ celkovÃ½ obraz projektu alebo jeho Äasti. Po zhliadnutÃ­ plÃ¡nu by malo byÅ¥ kaÅ¾dÃ©mu Äloveku angaÅ¾ovanÃ©mu v projekte jasnÃ©, Äo sa ide robiÅ¥ a asi ako sa bude postupovaÅ¥. PodÄ¾a PMI (Project Management Institute) je projekt definovanÃ½ ako doÄasnÃ© Ãºsilie vyvÃ­janÃ© s cieÄ¾om vytvoriÅ¥ jedineÄnÃ½ produkt [6]. DÃ´leÅ¾itÃ½m slovom je doÄasnÃ©, teda ukonÄenÃ© po urÄitom Äase. Preto, aby bol tento obmedzenÃ½ Äas Äo najlepÅ¡ie vyuÅ¾itÃ½ na splnenie cieÄ¾ov projektu, treba si ho zorganizovaÅ¥ â teda naplÃ¡novaÅ¥. PlÃ¡novanie mÃ¡ veÄ¾kÃ½ dopad na osud projektu, nakoÄ¾ko urÄuje, ako bude projekt prebiehaÅ¥. Projekt bez plÃ¡nu nemÃ¡ veÄ¾kÃº Å¡ancu na Ãºspech, t.j. splnenie poÅ¾iadaviek v danom Äase a s danÃ½mi zdrojmi. Ani existencia plÃ¡nu vÅ¡ak nezaruÄÃ­, Å¾e projekt bude ÃºspeÅ¡nÃ½. Pri plÃ¡novanÃ­ sa totiÅ¾ mÃ´Å¾u spraviÅ¥ chyby (a Äasto sa aj robia), ktorÃ© projekt vykoÄ¾aja z cesty, prÃ­padne Ãºplne znemoÅ¾nia v Åom pokraÄovaÅ¥. NiektorÃ© z beÅ¾nÃ½ch chÃ½b, ktorÃ© sa mÃ´Å¾u vyskytnÃºÅ¥ v sÃºvislosti s plÃ¡novanÃ­m projektu sÃº:"
265,237,0.613,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ArchitektÃºra je zÃ¡kladnÃ¡ organizÃ¡cia softvÃ©ru. Tvoria ju komponenty (sÃºÄiastky), vzÅ¥ahy medzi nimi a vzÅ¥ahy k prostrediu, v ktorom mÃ¡ softvÃ©r existovaÅ¥. Tieto vzÅ¥ahy sÃº najÄastejÅ¡ie definovanÃ© programovÃ½mi rozhraniami (niektorÃ© komponenty ich vystavujÃº, inÃ© sa k nim pripÃ¡jajÃº a vyuÅ¾Ã­vajÃº ich). SÃºÄasÅ¥ architektÃºry sÃº aj princÃ­py jej vytvÃ¡rania a vÃ½voja. To znamenÃ¡, Å¾e pri vytvÃ¡ranÃ­ architektÃºry vedome vyuÅ¾Ã­vame nejakÃº (pokiaÄ¾ moÅ¾no Å¡tandardnÃº a overenÃº) stratÃ©giu, naprÃ­klad uplatÅujeme nejakÃ½ architektonickÃ½ Å¡tÃ½l (napr. vrstvy Äi klient-server). ÄastÃ¡ chyba: Äasto sa za architektÃºru vydÃ¡va uÅ¾ Å¡truktÃºra, ktorÃ¡ identifikuje komponenty a âkreslÃ­â medzi nimi nepomenovanÃ© vzÅ¥ahy (naprÃ­klad ako na Obr. 2.5). TakÃ© nieÄo je veÄ¾mi nepresnÃ© a neprÃ­pustnÃ©. ArchitektÃºra nie je kompletnÃ¡, pokiaÄ¾ okrem nÃ¡zvov komponentov neexistuje aj ich vnÃºtornÃ½ opis a najmÃ¤ rozhrania (vo forme jednotlivÃ½ch operÃ¡ciÃ­, ktorÃ© komponenty poskytujÃº). TaktieÅ¾ musÃ­ byÅ¥ jasnÃ©, ktorÃ½ komponent sa pripÃ¡ja na ktorÃ© rozhranie a ktorÃ½ inÃ½ komponent toto rozhranie implementuje. Iba takÃ½to opis totiÅ¾ skutoÄne definuje, akÃ© sÃº âkompetencieâ jednotlivÃ½ch modulov."
111,112,0.613,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"NahrÃ¡vanie sedenÃ­ NahrÃ¡vanie sedenÃ­ je nÃ¡stroj, ktorÃ½ umoÅ¾Åuje zachytiÅ¥ kompletnÃº interakciu a prehraÅ¥ reprodukciu interakcie pouÅ¾Ã­vateÄ¾a s webovou strÃ¡nkou/aplikÃ¡ciou. SamotnÃ© prehrÃ¡vanie vyzerÃ¡ rovnako, ako keby ste prehrÃ¡vali video. Ale video to nie je. PrehrÃ¡vanie sedenia zobrazuje vÅ¡etko presne (alebo tak presne, ako to okolnosti dovoÄ¾ujÃº), ako to videl a zaÅ¾il pouÅ¾Ã­vateÄ¾. Pri zachytÃ¡vanÃ­ sedenia sa ukladajÃº Ãºdaje o zmenÃ¡ch zobrazenej strÃ¡nky, ako aj o akciÃ¡ch pouÅ¾Ã­vateÄ¾a â okrem inÃ©ho o pohyboch medzi rÃ´znymi strÃ¡nkami, kliknutiach, pohyboch kurzora, skrolovanÃ­, alebo pÃ­sanÃ­. Tieto Ãºdaje sÃº potom interpretovanÃ© pomocou prehrÃ¡vania sedenia, aby sa dali zobraziÅ¥ ako video. KeÄ vidÃ­te prehrÃ¡vanie sedenÃ­ po prvÃ½krÃ¡t, mÃ´Å¾e sa vÃ¡m zdaÅ¥, akoby ste mali v rukÃ¡ch nejakÃ© Äary. Ako je moÅ¾nÃ© tak verne zreplikovaÅ¥ to, Äo pouÅ¾Ã­vateÄ¾ preÅ¾Ã­val, a potom to prehraÅ¥ ako video?"
43,65,0.613,Objektovo orientovanÃ© programovanie v C++,"2.7 Å truktÃºra programu v C++ Program v C++ sa svojou Å¡truktÃºrou veÄ¾mi podobÃ¡ programu v jazyku C. DrobnÃ© rozdiely vÅ¡ak predsa len nÃ¡jdeme. Ako sme uÅ¾ naznaÄili, ak chceme vyuÅ¾Ã­vaÅ¥ prvky zo Å¡tandardnÃ½ch kniÅ¾nÃ­c C++, musÃ­me pouÅ¾Ã­vaÅ¥ priestor mien std. Ako prÃ­klad si uvedieme objekt cout zo Å¡tandardnej kniÅ¾nice iostream, ktorÃ½ predstavuje Å¡tandardnÃ© vÃ½stupnÃ© zariadenie â vÃ¤ÄÅ¡inou konzolu (obrazovku). Tento objekt musÃ­me pouÅ¾iÅ¥ vÅ¾dy, ak chceme na konzolu nieÄo vypÃ­saÅ¥. ZakaÅ¾dÃ½m vÅ¡ak musÃ­me povedaÅ¥, Å¾e je to objekt z priestoru mien std. UrobÃ­me to takto std::cout"
94,293,0.613,Sprievodca svetom vedeckÃ©ho publikovania,"ZverejÅovanie vÃ½sledkov vedeckej prÃ¡ce vyÅ¾aduje znalosÅ¥ autorsko-prÃ¡vnych otÃ¡zok a systematickÃ© sledovanie danej problematiky, aby sa autor mohol aspoÅ do istej miery slobodne rozhodnÃºÅ¥ o spÃ´sobe publikovania. V tomto procese by kniÅ¾nice a ich odbornÃ­ pracovnÃ­ci mali byÅ¥ nÃ¡pomocnÃ­ poskytovanÃ­m informÃ¡ciÃ­ a budovanÃ­m digitÃ¡lnych repozitÃ¡rov, ÄÃ­m zabezpeÄia nielen odbornÃ© spracovanie a sprÃ­stupnenie obsahu v sÃºlade s medzinÃ¡rodnÃ½m Å¡tandardom, ale aj dlhodobÃº ochranu e-printov."
195,135,0.612,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"VÃ½konnostnÃ© testovanie SpravodajskÃ© sluÅ¾by â poskytujÃº ÄlÃ¡nky na preÄÃ­tanie. Vo vÃ¤ÄÅ¡ine prÃ­padov sÃº ÄlÃ¡nky dostupnÃ© zadarmo, a preto je prÃ­jem tÃ½chto sluÅ¾ieb zÃ¡vislÃ½ od mnoÅ¾stva ÄitateÄ¾ov a ich Äasu strÃ¡venÃ©ho zobrazovanÃ­m jednotlivÃ½ch ÄlÃ¡nkov. Ãloha odporÃºÄaÄa obsahu je na prvÃ½ pohÄ¾ad zrejmÃ¡ â zobrazovaÅ¥ ÄalÅ¡ie ÄlÃ¡nky, ktorÃ© by mohli byÅ¥ pre ÄitateÄ¾a zaujÃ­mavÃ©. Tu sa stretÃ¡vame s protichodnÃ½mi zÃ¡mermi pouÅ¾Ã­vateÄ¾skÃ½ch skupÃ­n. Äitatelia majÃº zÃ¡ujem strÃ¡viÅ¥ ÄÃ­tanÃ­m Äo najmenej Äasu a dozvedieÅ¥ sa len podstatnÃ© informÃ¡cie, pre poskytovateÄ¾ov obsahu je zase vÃ½hodnÃ©, aby si Äitatelia zobrazili Äo najviac ÄlÃ¡nkov."
43,28,0.612,Objektovo orientovanÃ© programovanie v C++,"Do triedy ZÃ¡kaznÃ­k doplnÃ­me novÃº verziu metÃ³dy Zisti cenu s dvomi parametrami, z ktorÃ½ch prvÃ½ predstavuje mesto, o ktorÃ© mÃ¡ zÃ¡kaznÃ­k zÃ¡ujem. TÃ¡to metÃ³da hneÄ na zaÄiatku otestuje, Äi je ï¬rma z danÃ©ho mesta a ak nie, tak ani nepokraÄuje zisÅ¥ovanÃ­m cenovej ponuky, ale skonÄÃ­. Trieda ZÃ¡kaznÃ­k sÃºkromnÃ© priezvisko bydlisko stav ÃºÄtu mnoÅ¾stvo vÃ½robkov verejnÃ© KonÅ¡truktor(m,p,b,s Ãº,m v) VypÃ­Å¡ meno a bydlisko() Zisti cenu(firma X) Zisti cenu(mesto,firma X) ZÃ¡kaznÃ­k::Zisti cenu(mesto,ï¬rma X) Ak firma X.Povedz sÃ­dlo()Ì¸=mesto tak skonÄi Ak firma X.VypoÄÃ­taj cenu(mnoÅ¾stvo vÃ½robkov) â¤ stav ÃºÄtu, tak firma X.VypÃ­Å¡ nÃ¡zov a sÃ­dlo()"
236,59,0.612,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"nasledujÃºcim po prÃ­kaze \documentclass. V Local Guide [4] by malo byÅ¥ uvedenÃ©, ktorÃ© jazyky podporuje vÃ¡Å¡ systÃ©m. Babel bude automaticky aktivovaÅ¥ vhodnÃ© pravidlÃ¡ delenia slov jazyka, ktorÃ½ ste zvolili. Ak vÃ¡Å¡ formÃ¡t LATEXu (naprÃ­klad cslatex) nepodporuje delenie slov vo vami zvolenom jazyku, babel bude aj tak funkÄnÃ½, ale neumoÅ¾nÃ­ delenie, ktorÃ© by malo Ãºplne negatÃ­vny vplyv na vizuÃ¡lny zjav vÃ¡Å¡ho dokumentu. Pre niektorÃ© jazyky Å¡pecifikuje babel aj novÃ© prÃ­kazy zjednoduÅ¡ujÃºce vkladanie Å¡peciÃ¡lnych znakov. NaprÃ­klad v nemeckom jazyku existuje mnoho Å¡peciÃ¡lnych znakov (Ã¤Ã¶Ã¼). Pri pouÅ¾itÃ­ babelu mÃ´Å¾ete napÃ­saÅ¥ Ã¶ pomocou prÃ­kazu ""o namiesto \""o. NiektorÃ© poÄÃ­taÄovÃ© systÃ©my umoÅ¾ÅujÃº vkladanie Å¡peciÃ¡lnych znakov priamo z klÃ¡vesnice. LATEX vie spracovaÅ¥ aj takÃ©to znaky. Od decembrovÃ©ho vydania LATEXu2Îµ v roku 1994 obsahuje rozÅ¡irovanÃ¡ verzia LATEXu2Îµ podporu rÃ´znych vstupnÃ½ch kÃ³dovanÃ­. Pozrite si balÃ­k inputenc. PoÄas pouÅ¾Ã­vania tohoto balÃ­ka si musÃ­te uvedomiÅ¥, Å¾e inÃ­ Ä¾udia nemusia maÅ¥ moÅ¾nosÅ¥ zobraziÅ¥ si vÃ¡Å¡ zdrojovÃ½ sÃºbor na svojom poÄÃ­taÄi, pretoÅ¾e mÃ´Å¾u pouÅ¾Ã­vaÅ¥ inÃ© kÃ³dovanie. NaprÃ­klad ânemeckÃ½Ã¿ znak Ã¤ je na PC oznaÄenÃ½ ako 132 a na niektorÃ½ch UNIXovskÃ½ch systÃ©moch, pouÅ¾Ã­vajÃºcich ISO-LATIN 1, je oznaÄenÃ½ ako 228. Preto pouÅ¾Ã­vajte tieto nastavenia opatrne. InÃ¡ vec je kÃ³dovanie fontu. Definuje, na ktorej pozÃ­cii TEXovskÃ©ho fontu je uloÅ¾enÃ© kaÅ¾dÃ© pÃ­smeno. OriginÃ¡lne TEXovskÃ© fonty Computer Modern obsahujÃº len 128 znakov starej 7-bitovej ASCII tabuÄ¾ky. Ak sÃº poÅ¾adovanÃ© akcentovanÃ© znaky, vytvÃ¡ra ich TEX kombinovanÃ­m normÃ¡lnych pÃ­smen a prÃ­sluÅ¡nÃ©ho akcentu. Hoci vÃ½slednÃ½ vÃ½stup mÃ´Å¾e vyzeraÅ¥ bezchybne, tento"
111,49,0.612,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Äo ak mÃ¡m Å¡tandardizovanÃº kategÃ³riu s nÃ­zkou mierou zhody? Miera zhody sa povaÅ¾uje za vysokÃº, ak je vyÅ¡Å¡ia ako 60%. TakÃ©to Å¡tandardizovanÃ© kategÃ³rie moÅ¾no zvyÄajne povaÅ¾ovaÅ¥ za osvedÄenÃ© a pouÅ¾Ã­vaÅ¥ ich ako definitÃ­vnych reprezentantov konceptov. Äo vÅ¡ak v prÃ­pade, ak je miera zhody niÅ¾Å¡ia? PodrobnejÅ¡ie sa pozrite na karty, ktorÃ© respondenti priradili ku kategÃ³rii. MoÅ¾no nÃ¡jdete ÄiastkovÃ© skupiny respondentov, ktorÃ­ tÃºto kategÃ³riu koncipovali odliÅ¡ne. NaprÃ­klad, v Å¡tandardizovanej kategÃ³rii so 40% zhodou mÃ´Å¾ete zistiÅ¥, Å¾e traja respondenti nikdy nezahrnuli dve z kariet, ktorÃ© mali vÅ¡etci ostatnÃ­ respondenti. ZruÅ¡te toto zoskupenie a prerobte ho na dve samostatnÃ© Å¡tandardizovanÃ© kategÃ³rie, priÄom spomÃ­nanÃ­ traja respondenti dostanÃº vlastnÃ© Å¡tandardizovanÃ© kategÃ³rie. Zrazu zÃ­skate 70% ÃºroveÅ zhody a dve kategÃ³rie, ktorÃ© vÃ¡m povedia nieÄo o dvoch rÃ´znych spÃ´soboch uvaÅ¾ovania o podobnÃ½ch konceptoch. Å tandardizacÌnÃ¡ mrieÅ¾ka"
130,94,0.612,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Poskytuje nÃ¡hradnÃ½ objekt, pomocou ktorÃ©ho sa pristupuje k inÃ©mu objektu. JednÃ½m z dÃ´vodov na to, aby sme nahradili priame pouÅ¾Ã­vanie originÃ¡lneho objektu prÃ­stupom k nemu pomocou zÃ¡stupcu, mÃ´Å¾e byÅ¥ rÃ©Å¾ia spojenÃ¡ s jeho vytvÃ¡ranÃ­m. Zoberme si naprÃ­klad editor dokumentov, ktorÃ½ v sebe mÃ´Å¾e obsahovaÅ¥ obrÃ¡zky. Ich uloÅ¾enie do pamÃ¤te mÃ´Å¾e byÅ¥ Äasovo aj pamÃ¤Å¥ovo nÃ¡roÄnÃ©. NavyÅ¡e, Äasto nepotrebujeme, aby bol kaÅ¾dÃ½ obrÃ¡zok v nejakom dokumente uloÅ¾enÃ½ v pamÃ¤ti. Len tie, ktorÃ© mÃ¡ pouÅ¾Ã­vateÄ¾ moÅ¾nosÅ¥ v danom okamihu vidieÅ¥ na obrazovke. JednotlivÃ© nÃ¡roÄnÃ© objekty sa naÄÃ­tajÃº do pamÃ¤te podÄ¾a potreby."
265,205,0.612,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ZhodnoÅ¥te techniku pozorovania ako prostriedku pre zÃ­skavanie informÃ¡ciÃ­ o problÃ©movej oblasti. PoznÃ¡mka: pozorovanie je aktivitou analÃ½zy problÃ©movej oblasti a zberu poÅ¾iadaviek. Analytik v Åom pasÃ­vne sleduje deje v problÃ©movej oblasti, naprÃ­klad ÄinnosÅ¥ v nejakej organizÃ¡ciÃ­. NemusÃ­ Ã­sÅ¥ len o Å¾ivÃ© pozorovanie; reprodukcia dejov zo zÃ¡znamu mÃ´Å¾e byÅ¥ pouÅ¾itÃ¡ tieÅ¾. Tak ako vÅ¡etky techniky, mÃ¡ aj pozorovanie svoje vÃ½hody a nevÃ½hody (uvedenÃ© zoznamy urÄite neuvÃ¡dzajÃº vÅ¡etky, len tie najdÃ´leÅ¾itejÅ¡ie). VÃ½hody: â¢ Autenticita a videnie dejov v praxi. Oproti ostatnÃ½m technikÃ¡m (rozhovory, Å¡tÃºdium dokumentov, ... ) mÃ¡ pozorovanie exkluzÃ­vnu vÃ½hodu: dokÃ¡Å¾e ukÃ¡zaÅ¥ problÃ©movÃº oblasÅ¥ takÃº, akÃ¡ naozaj je. OstatnÃ© techniky ju analytikovi sprostredkujÃº len pÃ­somne Äi Ãºstne (a teda potenciÃ¡lne skreslene). â¢ MoÅ¾nosÅ¥ opakovania. V prÃ­pade existencie vhodnÃ½ch zÃ¡znamov pozorovanÃ½ch dejov, moÅ¾no pozorovanie v prÃ­pade potreby opakovaÅ¥ (naprÃ­klad keÄ analyzujeme, ako pouÅ¾Ã­vatelia pracujÃº s uÅ¾ existujÃºcim softvÃ©rom, ku ktorÃ©mu, povedzme, robÃ­me alternatÃ­vu alebo ho plÃ¡nujeme zlepÅ¡iÅ¥)."
111,44,0.612,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"AnalÃ½za otvorenÃ½ch a hybridnÃ½ch triedenÃ­ kariet OtvorenÃ© aj hybridnÃ© triedenie kariet je generatÃ­vne cviÄenie, pri ktorom oÄakÃ¡vate, Å¾e zÃ­skate predstavu o tom, ako oznaÄiÅ¥ a zoskupiÅ¥ informÃ¡cie na vaÅ¡ej webovej strÃ¡nke. Z toho vyplÃ½va, Å¾e analÃ½za vÃ½sledkov bude smerovaÅ¥ k prieskumnej analÃ½ze (v prÃ­pade hybridnÃ©ho triedenia kariet zÃ¡leÅ¾Ã­ na tom, nakoÄ¾ko bolo otvorenÃ©). NiekoÄ¾ko otÃ¡zok, ktorÃ© si moÅ¾no poloÅ¾iÅ¥ pri otvorenom alebo hybridnom triedenÃ­ kariet: â¢ PodÄ¾a akej logiky respondenti vytvÃ¡rajÃº a oznaÄujÃº kategÃ³rie?"
190,306,0.611,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"UrÄiÅ¥, ktorÃ½ softvÃ©r je do akej miery kvalitnÃ½, je pomerne nÃ¡roÄnÃ¡ otÃ¡zka. Koniec koncov uÅ¾ samotnÃ½ pojem âkvalita softvÃ©ruâ je dostatoÄne abstraktnÃ½ na to, aby dovolil interpretÃ¡ciu mnohÃ½mi spÃ´sobmi. Äo je softvÃ©r je pomerne zrejmÃ©, no Äo je kvalita je uÅ¾ otÃ¡zka nÃ¡roÄnejÅ¡ia. OdvolÃ¡vajÃºc sa na mÃºdre knihy napÃ­sanÃ© mÃºdrymi Ä¾uÄmi uvedieme nasledujÃºce definÃ­cie pojmu kvalita:"
135,53,0.611,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.3.1 DefinÃ­cia Gamma a kol. (Gamma, 1995) nazvali tento vzor adaptÃ©rom1 (angl. Adapter), priom ho definujÃº takto: âAdaptÃ©r konvertuje rozhranie triedy na inÃ©, oakÃ¡vanÃ© klientmi. Takto umoÅ¾uje spolupracova aj triedam, ktorÃ© by pre nekompatibilnÃ© rozhrania inak spolupracova nemohli.â (s. 139) PokÃºsme sa teraz o mierne zovÅ¡eobecnenie tejto definÃ­cie, najmÃ¤ s ohadom na to, Å¾e spolupracujÃºce sÃºiastky nemusia by nutne triedami. Majme teda softvÃ©rovÃº entitu A. MÃ´Å¾e Ã­s o sÃºiastku v uÅ¾Å¡om zmysle slova, ako ju definuje napr. (Szyperski, 2002) â teda typicky o procedÃºru, triedu, balÃ­k (angl. package), kniÅ¾nicu alebo aplikÃ¡ciu â alebo o inÃ½ typ softvÃ©rovej entity, ako je naprÃ­klad objekt, informanÃ½ systÃ©m, (webovÃ¡) sluÅ¾ba a podobne. Pre jednoduchos vyjadrovania pripusme teda istÃº nepresnos a hovorme zjednoduÅ¡ene o (softvÃ©rovej) sÃºiastke A. SÃºiastka A potrebuje pouÅ¾i funknos F. OakÃ¡va pritom, Å¾e ju mÃ¡ k dispozÃ­cii prostrednÃ­ctvom rozhrania R (obrÃ¡zok 1-5)."
369,190,0.611,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.42. Vzor CenovÃ½ balÃ­k UvedenÃ© modely sa tÃ½kali metaÃºrovne. Na operatÃ­vnej Ãºrovni sa cena jednoduchÃ©ho vÃ½robku (t. j. inÅ¡tancie produktu) vypoÄÃ­ta podÄ¾a definovanÃ½ch hodnÃ´t v metaÃºrovni. UvÃ¡dza sa priamo v objekte alebo v sÃºvisiacom zÃ¡vÃ¤zku (faktÃºre alebo zmluve). Ako sme uviedli uÅ¾ vo vzore Predmet zmluvy na obr. 2.48, cena v zmluve, resp. pri faktÃºre sa nemusÃ­ zhodovaÅ¥ s katalÃ³govou cenou, pretoÅ¾e partner mÃ´Å¾e dostaÅ¥ individuÃ¡lnu zÄ¾avu. OsobitnÃ½m prÃ­padom na inÅ¡tanÄnej Ãºrovni je cena agregovanÃ©ho vÃ½robku (objektu), ktorÃ¡ sa napoÄÃ­ta z cien poloÅ¾iek, ktorÃ© zodpovedajÃº definovanÃ½m produktom (obr. 3.43). Ako prÃ­klad slÃºÅ¾i vÃ½poÄet ceny automobilu s doplnkovou vÃ½bavou, kedy sa vÃ½slednÃ¡ cena vypoÄÃ­ta ako sÃºÄet ceny automobilu so Å¡tandardnou vÃ½bavou a cien objednanej doplnkovej vÃ½bavy. Agregovany Objekt Produkt"
265,331,0.611,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"4. PredoÅ¡lÃ© roky ÃºdrÅ¾by naruÅ¡ili Å¡truktÃºru systÃ©mu, Äo sÅ¥aÅ¾uje jeho pochopiteÄ¾nosÅ¥. Å peciÃ¡lne to platÃ­ pre zmeny, ktorÃ© boli vykonanÃ© kvÃ´li optimalizÃ¡cii vÃ½konu. NovÃ© sÃºÄasti mohli byÅ¥ pridanÃ© a prepojenÃ© ad hoc. 5. DÃ¡ta spracovÃ¡vanÃ© systÃ©mom mÃ´Å¾u byÅ¥ udrÅ¾iavanÃ© v rÃ´znych typoch, vo formÃ¡toch s nekompatibilnou Å¡truktÃºrou, mÃ´Å¾u byÅ¥ duplikovanÃ©, nekompletnÃ© Äi inak zastaranÃ©. ÃdrÅ¾ba zanechanÃ½ch systÃ©mov je veÄ¾mi nÃ¡kladnÃ¡. Pri vÃ½voji novÃ©ho softvÃ©ru treba vyhodnotiÅ¥, Äi mÃ¡ vÃ´bec zmysel zanechanÃ½ systÃ©m Äalej udrÅ¾iavaÅ¥, alebo ho prerobiÅ¥ Äi dokonca Ãºplne vymeniÅ¥."
393,456,0.61,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PredchÃ¡dzajÃºce Äasti sÃº zameranÃ© na objasnenie vÅ¡eobecnÃ½ch prÃ­stupov a metÃ³d pouÅ¾itia Äi uÅ¾ vzorov alebo konkrÃ©tne nÃ¡vrhovÃ½ch vzorov. V nasledujÃºcich Äastiach sa budeme zaoberaÅ¥ konkrÃ©tne moÅ¾nosÅ¥ami znovupouÅ¾itia ÄastÃ­ nÃ¡vrhovÃ½ch vzorov. Objektovo orientovanÃ© programovanie mÃ¡ ako jeden z cieÄ¾ov umoÅ¾niÅ¥ jednoduchÃ© a z hÄ¾adiska vÃ½voja efektÃ­vne znovupouÅ¾itie ÄastÃ­ systÃ©mov. K naplneniu tohto cieÄ¾a mÃ´Å¾eme v OO programovanÃ­ vyuÅ¾Ã­vaÅ¥ dedenie, polymorfizmus, asociÃ¡cie a ÄalÅ¡ie viac alebo menej elementÃ¡rne prostriedky. NÃ¡vrhovÃ© vzory, ktorÃ½mi sa tu zaoberÃ¡me, sa implicitne spÃ¡jajÃº s objektovo orientovanÃ½m programovanÃ­m, no ich znovupouÅ¾itie je neformÃ¡lne definovanÃ© iba na Ãºrovni postupov, myÅ¡lienok a konceptov rieÅ¡enÃ­."
190,274,0.61,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pri testovanÃ­ softvÃ©ru a celkovom manaÅ¾mente kvality mÃ´Å¾eme naraziÅ¥ dva zÃ¡sadnÃ© a v dneÅ¡nej dobe Äasto spomÃ­nanÃ© problÃ©my tzv. âover-engineeringâ(vynaloÅ¾enie priveÄ¾kÃ©ho, nepotrebnÃ©ho inÅ¾inierskeho Ãºsilia) a âunder-engineeringâ(vynaloÅ¾enie veÄ¾mi malÃ©ho inÅ¾inierskeho Ãºsilia). V prÃ­pade testovania sa nachÃ¡dzame v podobnej situÃ¡cii, mÃ¡me k dispozÃ­cii silnÃ© prostriedky, ale problÃ©m je zvoliÅ¥ sprÃ¡vnu mieru pouÅ¾itia tÃ½chto prostriedkov. PlÃ¡n testovania podÄ¾a IEEE 807 pokrÃ½va aj fÃ¡zy vÃ½voja softvÃ©ru a definuje ich ako tzv. Ãºrovne testovania (angl. test levels). ProblÃ©mom mÃ´Å¾e byÅ¥ vÃ½ber vhodnosti testovacÃ­ch stratÃ©giÃ­ v jednotlivÃ½ch fÃ¡zach. Jedno moÅ¾nÃ© rieÅ¡enie ukazuje tabuÄ¾ka 1."
190,106,0.61,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ako uÅ¾ bolo spomenutÃ©, myÅ¡lienkovÃ½ pochod âviac informÃ¡ciÃ­ = lepÅ¡ia informovanosÅ¥â uÅ¾ bol dÃ¡vno prekonanÃ½. Ako teda mÃ´Å¾eme pomÃ´cÅ¥ Älenom tÃ­mu, aby boli informovanÃ­ o dianÃ­ na pracovisku (angl. workspace awareness, [11]), a pritom ich nezahlcovaÅ¥ nepotrebnÃ½mi informÃ¡ciami? Najprv potrebujeme identifikovaÅ¥ jednotlivÃ© podskupiny Ä¾udÃ­ v softvÃ©rovom tÃ­me: manaÅ¾Ã©rov, nÃ¡vrhÃ¡rov, vÃ½vojÃ¡rov a testerov. KomunikÃ¡cia kaÅ¾dÃ½ s kaÅ¾dÃ½m by isto priniesla nemalÃ© problÃ©my a spÃ´sobila informaÄnÃ© zahltenie u mnohÃ½ch Älenov tÃ­mu. KomunikaÄnÃ© cesty zÃ¡visia Äasto od vÃ½vojovÃ©ho modelu, zloÅ¾enia tÃ­mu a ich umiestnenia v priestore [12]. ZjednoduÅ¡enÃ½ vÅ¡eobecnÃ½ model by mohol vyzeraÅ¥ podobne ako obrÃ¡zku 2. Najviac vyÅ¥aÅ¾enÃ½mi Älenmi tÃ­mu v tomto ohÄ¾ade sÃº manaÅ¾Ã©ri a vÃ½vojÃ¡ri. Z obrÃ¡zku nie je zrejmÃ©, Å¾e vÃ½vojÃ¡ri sÃ­ce komunikujÃº s nÃ¡vrhÃ¡rmi aj testermi, no zvyÄajne v odliÅ¡nÃ½ch fÃ¡zach vÃ½voja. NavyÅ¡e kaÅ¾dÃ¡ podskupina tÃ­mu pouÅ¾Ã­va na rieÅ¡enie problÃ©mov inÃº sadu nÃ¡strojov, ktorÃ© nie je vÅ¾dy moÅ¾nÃ© prepojiÅ¥."
40,114,0.61,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"7 ZÃ¡vÄr DospÄli jsme na konec naÅ¡eho pÅÃ­bÄhu. Co si z nÄj odnÃ©st? PÅedevÅ¡Ã­m dvÄ vÄci. ZaprvÃ©, pokud se chceme vÄnovat studiu virtuÃ¡lnÃ­ch agentÅ¯, musÃ­me si uvÄdomit, Å¾e jde o oblast z pomezÃ­ umÄlÃ© inteligence a poÄÃ­taÄovÃ© grafiky. Znalosti z tÄchto disciplÃ­n musÃ­me vhodnÄ skloubit. ZadruhÃ©, chovÃ¡nÃ­ virtuÃ¡lnÃ­ho agenta musÃ­ nÄkdo naprogramovat: nespadne samo z nebe. HlavnÃ­ technikou, kterÃ¡ se dnes pouÅ¾Ã­vÃ¡ a jeÅ¡tÄ"
190,478,0.61,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pre ÃºspeÅ¡nÃ© nasadenie a profitovanie z CRM systÃ©mov treba zvlÃ¡dnuÅ¥ teoretickÃ© podklady tejto rozsiahlej filozofie. Ako som spomÃ­nal v predchÃ¡dzajÃºcej Äasti, nepochopenie alebo nie komplexnÃ© vyuÅ¾Ã­vanie tÃ½chto systÃ©mov mÃ¡ automaticky za nÃ¡sledok zlyhanie podpory manaÅ¾mentu vzÅ¥ahov a bÃ½va Äasto spoloÄnosÅ¥ami vyhodnotenÃ© ako zbytoÄnÃ¡ investÃ­cia. ProblÃ©mom je, Å¾e vÃ¤ÄÅ¡ina systÃ©mov CRM v prvom rade rÃ¡ta s pouÅ¾Ã­vateÄ¾mi, ktorÃ­ sÃº v priamom osobnom styku so zÃ¡kaznÃ­kom a systematicky vytvÃ¡rajÃº databÃ¡zu znalostÃ­ o zÃ¡kaznÃ­kovi a jeho potrebÃ¡ch. KeÄ tak pouÅ¾Ã­vatelia nerobia, lebo je to prÃ­liÅ¡ Å¥aÅ¾kÃ©, prÃ­liÅ¡ nepohodlnÃ© alebo to prinÃ¡Å¡a minimÃ¡lne vÃ½hody, mnohÃ© potom zlyhajÃº. PA Consulting Group v prÃ¡ci s klientmi ukÃ¡zala pÃ¤Å¥ kÄ¾ÃºÄovÃ½ch faktorov Ãºspechu, ktorÃ© prispievajÃº k efektÃ­vnosti implementÃ¡cie CRM:"
190,461,0.61,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V tejto eseji sme sa zaoberali monitorovanÃ­m softvÃ©rovÃ½ch projektov a pozreli sme sa bliÅ¾Å¡ie na projekty s otvorenÃ½m zdrojovÃ½m kÃ³dom, kde nie je Ä¾ahkÃ© sledovaÅ¥ vÃ½voj pomocou beÅ¾nÃ½ch metÃ³d, ktorÃ© sa pouÅ¾Ã­vajÃº v pevne zviazanÃ½ch formÃ¡ch organizÃ¡ciÃ­ (klasickÃ© softvÃ©rovÃ© firmy). V tomto prÃ­pade je vhodnÃ© pouÅ¾iÅ¥ alternatÃ­vu, ktorÃ¡ modeluje vÃ½voj otvorenÃ©ho projektu ako udalostnÃ½ systÃ©m."
265,114,0.61,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Porovnajte mieru fixÃ¡cie Ãºrovne splnenia poÅ¾iadaviek pre generickÃ½ a pre zÃ¡kaznÃ­cky softvÃ©r. Pri generickom softvÃ©ri (aby obstÃ¡l v konkurenciÃ­) je zvyÄajne vÃ¤ÄÅ¡Ã­ tlak na splnenie vÅ¡etkÃ½ch poÅ¾iadaviek na Ãºkor Äasu a vynaloÅ¾enÃ½ch prostriedkov. Naproti tomu pri zÃ¡kaznÃ­ckom softvÃ©ri, bÃ½va skÃ´r tlak na cenu a dodrÅ¾anie termÃ­nov dodania. BÃ½va to podÄiarknutÃ© aj faktom, Å¾e sÃºÅ¥aÅ¾ medzi dodÃ¡vateÄ¾mi softvÃ©ru bÃ½va zaloÅ¾enÃ¡ skÃ´r na sÃºÅ¥aÅ¾i cien a termÃ­nov dodania, neÅ¾ na rozsahu poÅ¾iadaviek na softvÃ©r."
94,45,0.61,Sprievodca svetom vedeckÃ©ho publikovania,"1.4.11 VedeckÃ¡ komunikÃ¡cia v Äase internetu PrÃ­chod poÄÃ­taÄov a moÅ¾nosÅ¥ internetovÃ©ho pripojenia mnohÃ­ vÃ­tali ako spÃ¡su akademickÃ©ho publikovania. Priestor na policiach aj tÃ½ch najÅ¡tedrejÅ¡ie dotovanÃ½ch kniÅ¾nÃ­c mal svoje hranice a bolo Äoraz Å¥aÅ¾Å¡ie do nich vtesnaÅ¥ vÅ¡etky vÃ½sledky vÃ½skumu, ktorÃ© vedcov zaujÃ­mali. ElektronickÃ© publikovanie sa javilo ako praktickÃ© rieÅ¡enie problÃ©mu. V porovnanÃ­ s papierovou cestou malo aj vÃ½hodu rÃ½chlosti, eliminovali sa problÃ©my s tlaÄou a veÄ¾kÃ¡ ÄasÅ¥ poÅ¡tovÃ½ch nÃ¡kladov. ZaÄali vznikaÅ¥ prvÃ© vedeckÃ© listservy (sluÅ¾ba zasielania tematickÃ½ch emailov urÄenej skupine zÃ¡ujemcov), newslettery (elektronickÃ© informaÄnÃ© bulletiny) a vÃ½luÄne elektronickÃ© Äasopisy, napr. Flora Online (1987 â 1993, zasielala sa poÅ¡tou na disketÃ¡ch, archÃ­v je prÃ­stupnÃ½ na internete13), Äi Postmodern Culture (1990-). NiektorÃ­ akademici tuÅ¡ili potenciÃ¡l elektronickej formy, ale nepovaÅ¾ovali ju za rovnocennÃº tlaÄenÃ©mu ÄlÃ¡nku. Mali obavy z jej nestÃ¡losti, nespoÄ¾ahlivosti, pominuteÄ¾nosti a nedostatku ochrany autorskÃ½ch prÃ¡v. PraktickÃ© vÃ½hody elektronickej vedeckej komunikÃ¡cie vÅ¡ak prevÃ¡Å¾ili. NajrÃ½chlejÅ¡ie sa ujala vo vednÃ½ch disciplÃ­nach, ktorÃ© mali k poÄÃ­taÄom principiÃ¡lne blÃ­zko a zÃ¡roveÅ sa rÃ½chlo rozvÃ­jali, takÅ¾e Å¥aÅ¾kopÃ¡dne recenznÃ© konanie v nich predstavovalo naliehavejÅ¡Ã­ problÃ©m ako v inÃ½ch (napr. humanitnÃ½ch) odboroch s pomalÅ¡Ã­m tempom. V roku 1991 zaloÅ¾il fyzik Paul Ginsparg z Los Alamos National Laboratory repozitÃ¡r arXiv14, ÃºloÅ¾isko elektronickÃ½ch preprintovÃ½ch verziÃ­ vedeckÃ½ch ÄlÃ¡nkov z oblasti fyziky (neskÃ´r aj matematiky, astronÃ³mie, informatiky a kvantitatÃ­vnej biolÃ³gie) vo formÃ¡te TeX. Tento formÃ¡t si vÄaka Ãºspornosti a vynikajÃºcej matematickej sadzbe zÃ­skal obÄ¾ubu medzi vÅ¡etkÃ½mi vedcami, ktorÃ­ potrebovali pri pÃ­sanÃ­ publikÃ¡ciÃ­ pouÅ¾Ã­vaÅ¥ vzorce. ArXiv sa stal Å¡tandardom vo svojej oblasti a poslÃºÅ¾il ako prÃ­klad pre ÄalÅ¡ie vednÃ© disciplÃ­ny. Tam, kde vizionÃ¡ri videli ÃºÅ¾asnÃ© novÃ© moÅ¾nosti, komerÄnÃ­ vydavatelia vytuÅ¡ili ohrozenie zdroja prÃ­jmov. Preto znaÄnÃº ÄasÅ¥ z financiÃ­, ktorÃ© zÃ­skali za predplatnÃ© od univerzÃ­t, investovali do âochrany obsahuâ (teda jeho spoplatnenia a zneprÃ­stupnenia pre tÃ½ch, ktorÃ­ nezaplatili). Kontrast moÅ¾nostÃ­ elektronickÃ©ho sveta oproti bariÃ©ram komerÄnÃ©ho publikovania provokoval vedcov uÅ¾ v prvÃ½ch rokoch rozvoja svetovej siete. V roku 1994 kognitÃ­vny vedec Stevan Harnad predloÅ¾il vedeckej verejnosti na internete âpodvratnÃ½"
59,273,0.61,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Budeme predpokladaÅ¥, Å¾e agent je schopnÃ½ svojÃ­m kognitÃ­vnym orgÃ¡nom ohodnocovaÅ¥ vznikajÃºce nasledujÃºce pozÃ­cie tak v prÃ­pade, Å¾e je prvÃ½, alebo aj druhÃ½ hrÃ¡Ä. Tento predpoklad je plazibilnÃ½ pre symetrickÃ© hry, kde strategickÃ© pravidlÃ¡ tak pre prvÃ©ho, ako aj druhÃ©ho hrÃ¡Äa sÃº rovnakÃ©, urÄitÃ½ malÃ½ rozdiel vÅ¡ak existuje v tom, Å¾e hru zahajuje prvÃ½ hrÃ¡Ä a tak mÃ´Å¾e v urÄitom rozsahu vnucovaÅ¥ Å¡tÃ½l hry druhÃ©mu hrÃ¡Äovi. Vo vyÅ¡Å¡ie uvedenom algoritme je tÃ¡to poÅ¾iadavka univerzÃ¡lnosti kognitÃ­vneho orgÃ¡nu (t. j. agent nemÃ¡ dva kognitÃ­vne orgÃ¡ny, jeden pre prÃ­pad, Å¾e je prvÃ½ hrÃ¡Ä a inÃ½ pre prÃ­pad, Å¾e je druhÃ½ hrÃ¡Ä) realizovanÃ¡ tÃ½m, Å¾e druhÃ½ hrÃ¡Ä svojim kognitÃ­vnym orgÃ¡nom neohodnocuje priamo pozÃ­cie Pï¢ïA(P) ale ich inverzie P ï¢ , t. j. agent aj ako druhÃ½ hrÃ¡Ä ohodnocuje nasledujÃºce pozÃ­cie z pohÄ¾adu prvÃ©ho hrÃ¡Äa, ÄiÅ¾e kognitÃ­vny orgÃ¡n je nastavenÃ½ na to, Å¾e agent je akoby vÅ¾dy prvÃ½ hrÃ¡Ä, v prÃ­pade, Å¾e je druhÃ½ hrÃ¡Ä, âohodnocujeâ inverznÃ© pozÃ­cie."
76,159,0.609,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ktorÃ½ mÃ¡ univerzÃ¡lnu platnosÅ¥. PlatÃ­ tak pre diskrÃ©tne veliÄiny, ako aj pre spojitÃ© s hustotou a aj pre vÅ¡etky ostatnÃ© (v Ãºlohe 2.5.20 jednu takÃº veliÄinu predstavÃ­me). DÃ´leÅ¾itosÅ¥ distribuÄnej funkcie vynikne prÃ¡ve v tomto ÄlÃ¡nku, v ktorom pÃ´jde o urÄenie rozdelenia novej nÃ¡hodnej veliÄiny , ktorÃ¡ je transformÃ¡ciou pÃ´vodnej veliÄiny , t. j. = ( ). Vstupom Ãºlohy je rozdelenie veliÄiny a transformÃ¡cia, ktorÃº predstavuje danÃ¡ funkcia . CieÄ¾om snaÅ¾enia je urÄiÅ¥ rozdelenie veliÄiny = ( ). Rozdelenie veliÄiny je danÃ© buÄ funkciou alebo . KeÄÅ¾e pracujeme s dvoma nÃ¡hodnÃ½mi veliÄinami , , oznaÄme ich distribuÄnÃ© funkcie a . DanÃ© sÃº teda funkcia a funkcia . Ãlohou je urÄiÅ¥ . NajÄastejÅ¡ie transformÃ¡cie sÃº lineÃ¡rna funkcia, ( ) = a jednoduchÃ¡ kvadratickÃ¡, ( ) = . PrincipiÃ¡lne vÅ¡ak funkciou mÃ´Å¾e byÅ¥ akÃ¡koÄ¾vek reÃ¡lna funkcia reÃ¡lnej premennej. Samozrejme, definiÄnÃ½ obor funkcie musÃ­ obsahovaÅ¥ obor hodnÃ´t veliÄiny (tÃ¡to podmienka zaruÄuje, Å¾e veliÄina = ( ) je dobre definovanÃ¡). V prvÃ½ch troch situÃ¡ciÃ¡ch ide o prÃ­pady, keÄ veliÄina je diskrÃ©tna, a preto aj veliÄina , = ( ), je diskrÃ©tna. Pri hÄ¾adanÃ­ pravdepodobnostnej funkcie veliÄiny v odsekoch 2.5.1 a 2.5.2 vystaÄÃ­me s aditivitou pravdepodobnosti, pretoÅ¾e ( ) je koneÄnÃ¡. 2.5.1 PrÃ­klad. Nech rozdelenie veliÄiny je danÃ© pravdepodobnostnou funkciou vo forme tabuÄ¾ky ( )"
265,335,0.609,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Model Å¾ivotnÃ©ho cyklu vÃ½voja softvÃ©ru (Äalej len model vÃ½voja softvÃ©ru) je schÃ©ma definujÃºca procesy/Äinnosti, ktorÃ© treba vykonaÅ¥ poÄas Å¾ivotnÃ©ho cyklu vÃ½voja softvÃ©ru, ich vstupy a vÃ½stupy a ÄasovÃº nÃ¡slednosÅ¥. Model vÃ½voja softvÃ©ru neurÄuje dÄºÅ¾ku trvania ÄinnostÃ­. Modely vÃ½voja softvÃ©ru vznikali ako zovÅ¡eobecnenie procesov/ÄinnostÃ­, ktorÃ© boli realizovanÃ© v rÃ´znych typoch softvÃ©rovÃ½ch projektov. RÃ´zne modely vÃ½voja softvÃ©ru vznikli z dÃ´vodu dosiahnutia odliÅ¡nÃ½ch cieÄ¾ov, ktorÃ© mal urÄitÃ½ softvÃ©r napÄºÅaÅ¥. VeÄ¾mi dÃ´leÅ¾itÃ¡ je aj historickÃ¡ perspektÃ­va, keÄ novÅ¡ie modely vÃ½voja typicky reagujÃº na nedostatky starÅ¡Ã­ch a adresujÃº aktuÃ¡lne/sÃºÄasnÃ© problÃ©my vÃ½voja softvÃ©ru. Modely vÃ½voja softvÃ©ru mÃ´Å¾eme rozdeliÅ¥ na sekvenÄnÃ© (oznaÄovanÃ© aj ako lineÃ¡rne) a iteratÃ­vno-inkrementÃ¡lne. Pri sekvenÄnÃ½ch modeloch sÃº jednotlivÃ© etapy Å¾ivotnÃ©ho cyklu softvÃ©ru usporiadanÃ© sekvenÄne, za sebou â jedna zaÄÃ­na vÅ¾dy potom, keÄ skonÄÃ­ predoÅ¡lÃ¡. Pri inkrementÃ¡lnych modeloch je softvÃ©r vyvÃ­janÃ½ v menÅ¡Ã­ch cykloch, vÃ½stupom ktorÃ½ch sÃº softvÃ©rovÃ© inkrementy â prÃ­rastky softvÃ©ru. Hranica medzi oboma typmi modelov nie je striktnÃ¡ a v praxi sÃº Äasto zauÅ¾Ã­vanÃ© modely, ktorÃ© obsahujÃº Ärty oboch typov. Medzi najznÃ¡mejÅ¡ie modely Å¾ivotnÃ©ho cyklu vÃ½voja softvÃ©ru patria: â¢ VodopÃ¡dovÃ½ model,"
393,62,0.608,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"V tomto bode sa ale vynÃ¡ra otÃ¡zka vnÃºtornej reprezentÃ¡cie extrahovanÃ½ch znalostÃ­. VzhÄ¾adom na to, Å¾e systÃ©m na vyhÄ¾adÃ¡vanie je urÄenÃ½ pre relatÃ­vne malÃ© informaÄnÃ© priestory, zvolili sa dva spÃ´soby reprezentÃ¡cie dokumentov: Â vektorovÃ¡ reprezentÃ¡cia, kde sa dokument reprezentuje vektorom kÄ¾ÃºÄovÃ½ch slov, Â asociaÄnÃ½mi pravidlami, kde sa dokument reprezentuje vzÅ¥ahmi jednotlivÃ½ch kÄ¾ÃºÄovÃ½ch slov."
43,45,0.608,Objektovo orientovanÃ© programovanie v C++,"zaÄiatku mali k tvorbe objektovo orientovanÃ½ch programov pristupovaÅ¥ tak, Å¾e ani pri jednoduchÃ½ch programoch nezaÄneme pÃ­saÅ¥ skÃ´r, ako si dÃ´kladne premyslÃ­me, Äo ideme robiÅ¥. V sÃºÄasnosti existuje viacero metÃ³d vÃ½voja softvÃ©ru a pribÃºdajÃº novÃ© prÃ­stupy a modiï¬kÃ¡cie starÅ¡Ã­ch metÃ³d [9, 14]. NajstarÅ¡ou a najjednoduchÅ¡ou technikou je tzv. vodopÃ¡dovÃ¡ metÃ³da. Ide o lineÃ¡rny model, v ktorom sa vÃ½voj programu delÃ­ do Å¡tyroch zÃ¡kladnÃ½ch ÄastÃ­ - analÃ½za, dizajn, implementÃ¡cia a testovanie (obr. 1.5). KÃ½m pri jednoduchÃ½ch programoch zabezpeÄuje vÅ¡etky tieto fÃ¡zy samotnÃ½ programÃ¡tor, pri vÃ¤ÄÅ¡Ã­ch projektoch sa jednotlivÃ­ Älenovia tÃ­mu Äasto Å¡pecializujÃº len na niektorÃº konkrÃ©tnu ÄasÅ¥ vÃ½voja programu. KaÅ¾dÃ¡ z tÃ½chto Ãºloh vyÅ¾aduje istÃº odbornosÅ¥ a zruÄnosÅ¥ a tvorÃ­ podstatnÃº ÄasÅ¥ celÃ©ho procesu."
190,126,0.607,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KaÅ¾dÃ¡ palica mÃ¡ dva konce. OpaÄnÃ½ extrÃ©m oproti predoÅ¡lÃ©mu bodu je plÃ¡novanie do detailu. Samo detailnÃ© plÃ¡novanie je Å¾iadÃºce, avÅ¡ak nie hneÄ na zaÄiatku projektu. Toto je charakteristika vodopÃ¡dovÃ©ho modelu â plÃ¡novanie sa v Ãºplnosti vykonÃ¡ na zaÄiatku, a potom sa postupuje podÄ¾a pevne stanovenÃ©ho plÃ¡nu. V sÃºÄasnosti je vÅ¡ak jeho pouÅ¾itie v praxi zriedkavÃ©. NÃ¡stup novÃ½ch agilnÃ½ch metÃ³d vÃ½voja softvÃ©ru a mnohÃ© ÄlÃ¡nky poukazujÃº na to, Å¾e sa toto nie je ideÃ¡lny postup. Royce povaÅ¾uje vodopÃ¡dovÃ½ model za riskantnÃ½ a nÃ¡chylnÃ½ k zlyhaniu [6]. DetailnÃ© S tÃ½mto nÃ¡zorom sÃºhlasÃ­m, nakoÄ¾ko kaÅ¾dÃ½ projekt je jedineÄnÃ½ a aÅ¾ poÄas jeho plÃ¡novanie vykonÃ¡vania sa odhalia vÅ¡etky jeho Å¡pecifikÃ¡. DetailnÃ© plÃ¡novanie hneÄ na zaÄiatku je Å¥aÅ¾kÃ©, keÄÅ¾e nemusÃ­ byÅ¥ eÅ¡te presne hneÄ zrejmÃ©, akÃ© Äinnosti bude projekt vyÅ¾adovaÅ¥, Äi ako dlho budÃº trvaÅ¥. Samozrejme, na zaÄiatku po skÃºsenosti s predoÅ¡lÃ½mi projektmi uÅ¾ mÃ´Å¾u projektovÃ­ manaÅ¾Ã©ri maÅ¥ predsta- projektu vu o tom, Äo budÃº jednotlivÃ© etapy zahÅÅaÅ¥. Ak manaÅ¾Ã©r svoj tÃ­m poznÃ¡, mÃ´Å¾e je Å¥aÅ¾kÃ©. maÅ¥ predstavu aj o tom, koÄ¾ko to bude trvaÅ¥. AvÅ¡ak, ako som uÅ¾ spomenul, realita je takÃ¡, Å¾e Å¾iaden projekt nie je rovnakÃ½ a v kaÅ¾dom projekte sa vyskytnÃº rÃ´zne vplyvy, ktorÃ© skÃ´r Äi neskÃ´r odklonia projekt od pÃ´vodnÃ©ho plÃ¡nu. PlÃ¡novanie do detailu je vÅ¡eobecne v projekte Å¾iadÃºce preto, aby bolo v kaÅ¾dom momente jednoznaÄnÃ©, akÃ© sÃº aktuÃ¡lne Ãºlohy, ciele a akÃ½ je ÄalÅ¡Ã­ predpokladanÃ½ postup. TvrdÃ­m ale, Å¾e je nezodpovednÃ© zostaviÅ¥ detailnÃ½ plÃ¡n hneÄ na zaÄiatku a plÃ¡novanie jednoducho âodpÃ­saÅ¥â. McConnel opisuje plÃ¡novanie ako jazdu autom v noci z mesta A do mesta B. MÃ¡ sÃ­ce k dispozÃ­cii mapu celej trasy, ale na detaily si dosvieti len do urÄitej vzdialenosti [4]. Tento prÃ­klad nÃ¡zorne demonÅ¡truje fakt, Å¾e detaily sa vyjasnia aÅ¾ vtedy, keÄ k nÃ­m prÃ­deme."
265,358,0.607,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NevÃ½hody: NÃ¡roÄnÃ© odhadovanie Ãºsilia na zaÄiatku vÃ½vojovÃ©ho cyklu, obzvlÃ¡Å¡Å¥ pre veÄ¾kÃ© Äasti (Ärty) softvÃ©ru. Niekedy je problÃ©m slabÃ½ dÃ´raz na rozpracovanie nÃ¡vrhu a dokumentÃ¡ciu. SoftvÃ©r je zÃ¡vislÃ½ od zÃ¡stupcu zÃ¡kaznÃ­ka, ak nie je dostatoÄne zapÃ¡janÃ½, prÃ­p. ak nemÃ¡ jasnÃº predstavu o vÃ½slednom softvÃ©ri, vÃ½sledok nemusÃ­ byÅ¥ uspokojivÃ½. Potreba skÃºsenÃ½ch pracovnÃ­kov v agilnÃ½ch tÃ­moch kvÃ´li nÃ¡roÄnÃ½m rozhodnutiam, ktorÃ© treba vykonÃ¡vaÅ¥ poÄas procesu vÃ½voja."
59,539,0.607,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Tieto predstavy naÅ¡li urÄitÃ© vyvrcholenie u francÃºzskeho osvieteneckÃ©ho vedca a filozofa P. R. Laplaceho v jeho dikcii o superinteligentnej bytosti, ktorÃ¡ pomocou matematickÃ½ch metÃ³d vidÃ­ svojim âzrakomâ vÅ¡etky udalosti z minulosti, prÃ­tomnosti a aj budÃºcnosti, pre Åu neexistujÃº nÃ¡hodnÃ© alebo neurÄitÃ© udalosti. V sÃºÄasnosti je veÄ¾mi populÃ¡rna Dawkinsova memetika, ktorÃ¡ rozvÃ­ja podobnÃ© nÃ¡zory (pozri kap. 4.2)."
190,327,0.607,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Äalej diskutujeme jednotlivÃ© rizikÃ¡ podÄ¾a zoznamu, ktorÃ½ vypracoval Boehm [1, 2, 3, 7]. Tento zoznam sme zvolili pre jeho jednoduchosÅ¥ a dobrÃ© spracovanie. VÄaka tomu poskytuje najmÃ¤ pre zaÄÃ­najÃºceho manaÅ¾Ã©ra dobrÃ½ prehÄ¾ad o zÃ¡kladnÃ½ch rizikÃ¡ch a umoÅ¾Åuje sa mu sÃºstrediÅ¥ na zÃ¡klady manaÅ¾mentu rizÃ­k bez potreby veÄ¾kej skÃºsenosti v tejto oblasti. JednotlivÃ© rizikÃ¡ rozoberiem na projekte, ktorÃ©ho najvÃ½znamnejÅ¡ie charakteristiky sÃº:"
94,164,0.607,Sprievodca svetom vedeckÃ©ho publikovania,"NevÃ½hodou zlatej cesty je aj neustÃ¡le zvyÅ¡ovanie autorskÃ½ch poplatkov. Äasopisy, ktorÃ© zaÄÃ­nali s APC na Ãºrovni stoviek, po niekoÄ¾kÃ½ch rokoch ÃºÄtujÃº tisÃ­ce dolÃ¡rov. VysvetlenÃ­m mÃ´Å¾e byÅ¥, Å¾e pÃ´vodnÃ© sumy neboli nastavenÃ© realisticky, alebo Ãºlohu opÃ¤Å¥ zohrala akademickÃ¡ ekonomika prestÃ­Å¾e (vysokÃ½ kredit sa spÃ¡ja s vysokÃ½mi cenami). V prostredÃ­ Open Access sa udomÃ¡cnil aj termÃ­n bronzovÃ¡ cesta (podÄ¾a Piwowar et al. (2018)) pre prÃ­stup Äasopisov, ktorÃ© uverejÅujÃº svoj obsah voÄ¾ne na internete, ale nepouÅ¾Ã­vajÃº Å¾iadnu licenciu, takÅ¾e ÄitateÄ¾ovi nie je jasnÃ©, ako mÃ´Å¾e tento obsah pouÅ¾iÅ¥. Napriek osvete tento prÃ­stup stÃ¡le nevymizol."
76,334,0.606,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"RieÅ¡enie. ZaÄnime odhadom parametra . Vieme, Å¾e sa rovnÃ¡ strednej hodnote, a preto je celkom prirodzenÃ© odhadovaÅ¥ Å¡tatistikou Ì â vÃ½berovÃ½m priemerom. Veta 7.1.11 (tieÅ¾ veta 6.3.2) hovoria, Å¾e vÃ½berovÃ½ priemer je nevychÃ½lenÃ½ odhad E( ), teda nevychÃ½lenÃ½ odhad parametra . Je vÅ¡ak na mieste otÃ¡zka, Äi nie je moÅ¾nÃ© odhadovaÅ¥ vÃ½berovÃ½m mediÃ¡nom, keÄÅ¾e je nielen strednou hodnotou, ale aj mediÃ¡nom rozdelenia N( , ï³2). PretoÅ¾e diskutovanie vlastnostÃ­ Å¡tatistiky vÃ½berovÃ½ mediÃ¡n je nad naÅ¡e sily, vezmime bez dÃ´kazu fakt, Å¾e vÃ½berovÃ½ priemer je najlepÅ¡Ã­ nevychÃ½lenÃ½ odhad parametra . Teraz hovorme o odhadoch parametra ï³2, resp. ï³. PretoÅ¾e ï³2 sa rovnÃ¡ variancii, odhadovaÅ¥ ï³2, znamenÃ¡ odhadovaÅ¥ varianciu. Ak pritom poznÃ¡me , tak mÃ´Å¾eme uvaÅ¾ovaÅ¥ o Å¡tatistike ( ) = â ako o prirodzenom odhade variancie. Nie je Å¥aÅ¾kÃ© ukÃ¡zaÅ¥, Å¾e je to nevychÃ½lenÃ½ odhad ï³2."
135,347,0.606,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Ãºpravy inÅ¡tancie vzoru, na zÃ¡klade ktorÃ½ch sa stÃ¡va domÃ©novo Å¡pecifickÃ¡, aÅ¾ Å¡pecifickÃ¡ pre potreby konkrÃ©tnej aplikÃ¡cie. Medzi prÃ­klady krokov procesu Å¡pecifikÃ¡cie moÅ¾no povaÅ¾ova definovanie volitenÃ½ch potov hrÃ¡ov jednotlivÃ½ch rolÃ­, i adekvÃ¡tne pomenovanie hrÃ¡ov rolÃ­ v kontexte vyvÃ­janÃ©ho systÃ©mu."
59,659,0.606,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 13.9. Osem rÃ´znych spÃ´sobov konÅ¡trukcie relÃ¡cie ijk ï ï¤ na zÃ¡klade relÃ¡cie abc ï abd. KaÅ¾dÃ¡ z tÃ½chto moÅ¾nostÃ­ obsahuje dve Äasti: Ä¾avÃ¡ ÄasÅ¥ je priradenÃ¡ relÃ¡cii abc ï abd, zatiaÄ¾ Äo, pravÃ¡ ÄasÅ¥ obsahuje relÃ¡ciu ijk ï ï¤ , kde reÅ¥azec ï¤ mÃ¡ konkrÃ©tny tvar. PreruÅ¡ovanÃ© orientovanÃ© Äiary medzi pravou a Ä¾avou ÄasÅ¥ou znÃ¡zorÅuje zobrazenie homomorfizmu, pomocou ktorÃ©ho zisÅ¥ujeme maximÃ¡lny spoloÄnÃ½ podgraf medzi oboma ÄasÅ¥ami."
76,360,0.606,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"148 Testovanie Å¡tatistickÃ½ch hypotÃ©z ZatiaÄ¾ nepredpisujme hladinu testu, len intuitÃ­vne zvoÄ¾me kritickÃº oblasÅ¥ K a uvaÅ¾ujme o vlastnostiach testu zaloÅ¾enÃ©ho na K. Tvar kritickej oblasti je jasnÃ½. Ak je minca normÃ¡lna, poÄet nÃºl a poÄet jednotiek v realizÃ¡cii x = ( ) nÃ¡hodnÃ©ho vÃ½beru je pribliÅ¾ne rovnakÃ½ (to znamenÃ¡, Å¾e sÃºÄet + + ... + kolÃ­Å¡e okolo ÄÃ­sla 8). KritickÃ½mi pre sÃº tie body x, v ktorÃ½ch sa poÄet jednotiek vÃ½razne lÃ­Å¡i od poÄtu nÃºl, t. j. sÃºÄet + + ... + je alebo prÃ­liÅ¡ malÃ½, alebo prÃ­liÅ¡ veÄ¾kÃ½. Testovacou Å¡tatistikou bude teda opÃ¤Å¥ = + + ... + . Pre prehÄ¾adnosÅ¥ uveÄme hodnoty veliÄiny , ktorÃ© povaÅ¾ujeme za mÃ¡lo pravdepodobnÃ© v prÃ­pade, Å¾e platnÃ¡ (mÃ´Å¾eme im hovoriÅ¥, Å¾e sÃº âkritickÃ©â pre ). H( ): 0 1 2 kritickÃ©: 0 1 2"
190,201,0.606,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ako som uÅ¾ spomenul v predchÃ¡dzajÃºcej Äasti, s plÃ¡novanÃ­m sÃºvisÃ­ istÃ¡ dÃ¡vka rizika, nakoÄ¾ko kaÅ¾dÃ½ plÃ¡n sa snaÅ¾Ã­ predpovedaÅ¥ (viac Äi menej neistÃº) budÃºcnosÅ¥. TaktieÅ¾ som spomenul fakt, Å¾e plÃ¡ny nevedia odvrÃ¡tiÅ¥ nepredvÃ­dateÄ¾nÃ© situÃ¡cie. ZvÃ­Å¥aziÅ¥ nad budÃºcnosÅ¥ou sa (v dobe pÃ­sania tejto eseje) bohuÅ¾iaÄ¾ nedÃ¡, ale dÃ¡ sa ju aspoÅ mierne âpreÄ¾stiÅ¥â. Trik spoÄÃ­va v tom, Å¾e namiesto jednÃ©ho plÃ¡nu vytvorÃ­me rovno plÃ¡ny dva â plÃ¡n prÃ¡ce a zÃ¡vÃ¤znÃ½ plÃ¡n [1], pozri obrÃ¡zok 1. PlÃ¡n prÃ¡ce odzrkadÄ¾uje odhadnutÃ½ priebeh projektu na zÃ¡klade naÅ¡ich aktuÃ¡lnych odhadov v dobe vytvorenia plÃ¡nu. Predstavuje Å¡tandardnÃ½ plÃ¡n softvÃ©rovÃ©ho projektu, podÄ¾a ktorÃ©ho sa riadi celÃ½ tÃ­m. ZÃ¡vÃ¤znÃ½ plÃ¡n predstavuje plÃ¡n dohodnutÃ½ so zÃ¡kaznÃ­kom, resp. zadÃ¡vateÄ¾om projektu. ZahÅÅa v sebe vyÅ¡Å¡ie opÃ­sanÃ½ plÃ¡n prÃ¡ce, no navyÅ¡e aj dodatoÄnÃº rezervu Äasu (a ÄalÅ¡Ã­ch prostriedkov) pre prÃ­pad, Å¾e nastanÃº nepredvÃ­dateÄ¾nÃ© udalosti. Pomocou dvoch plÃ¡nov sme oÄividne viac chrÃ¡nenÃ­ pred neoÄakÃ¡vanÃ½mi udalosÅ¥ami neÅ¾ v prÃ­pade existencie jedinÃ©ho a to spoloÄnÃ©ho plÃ¡nu. S vÃ½hodami ale idÃº aj nevÃ½hody. PouÅ¾itie dvoch plÃ¡nov nesie v sebe riziko rozhnevania Älenov tÃ­mu v prÃ­pade, Å¾e objavia existenciu âmiernejÅ¡iehoâ, teda zÃ¡vÃ¤znÃ©ho plÃ¡nu. Jeho âodtajnenieâ Älenom tÃ­mu, na druhej strane, so sebou nesie riziko, Å¾e sa vÅ¡etky naplÃ¡novanÃ© rezervy svojvoÄ¾ne vyÄerpajÃº â nakoÄ¾ko z mojej osobnej skÃºsenosti viem, Å¾e vÃ¤ÄÅ¡ina Ä¾udÃ­ mÃ¡ tendenciu (neÃºmyselne) vyplniÅ¥ vÅ¡etok dostupnÃ½ Äas i prostriedky."
240,502,0.606,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V riadku 11 je prÃ­klad tzv. skrÃ¡tenÃ©ho vyhodnotenia logickÃ©ho vÃ½razu, ktorÃ© slÃºÅ¾i na zrÃ½chlenie vykonÃ¡vania programu: v prÃ­pade ak aktuÃ¡lna hodnota premennej i je 1, tak sa pokraÄuje na riadok 12 bez toho, aby sa vyhodnocovala podmienka max < d. Ãlohy na zamyslenie 1. UvaÅ¾ujme, Å¾e presunieme definÃ­ciu lokÃ¡lnych premennÃ½ch z funkcie main() eÅ¡te pred funkciu na riadok 2. PremennÃ© sa tak stanÃº globÃ¡lne, ktorÃ© sÃº automaticky inicializovanÃ©. ZjednoduÅ¡ilo by to vÃ½slednÃ½ program?"
130,50,0.606,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DÃ´sledky ReÅ¡trikcia na vytvorenie jedinej inÅ¡tancie, v rÃ©Å¾ii samotnej triedy (prÃ­padne nadtriedy). Ä½ahko je moÅ¾nÃ© zmeniÅ¥ unikÃ¡tnu implementÃ¡ciu na viac objektovÃº triedu (postaÄuje zmeniÅ¥ metÃ³du dajInÅ¡tanciu). Na rozdiel od statickÃ½ch metÃ³d je moÅ¾nÃ© implementÃ¡ciu unikÃ¡tnej triedy Ä¾ahko nahradiÅ¥ realizÃ¡ciou inej triedy, ktorÃ¡ mÃ¡ rovnakÃ© rozhranie ako poÅ¾adujeme od unikÃ¡tneho objektu. TÃ¡to vlastnosÅ¥ nÃ¡m umoÅ¾Åuje jednoduchÃ½ch spÃ´sobom poÄas testovania ÄastÃ­ aplikÃ¡cie, ktorÃ© vyuÅ¾Ã­vajÃº nÃ¡Å¡ unikÃ¡t, nahradiÅ¥ jeho funkcionalitu testovacou (mock, stub) implementÃ¡ciou. Je moÅ¾nÃ© pouÅ¾Ã­vaÅ¥ viacero typov tried (podtried). To, ktorÃ¡ z implementÃ¡ciÃ­ sa pouÅ¾ije, mÃ´Å¾e byÅ¥ Å¡pecifikovanÃ© v konfigurÃ¡cii aplikÃ¡cie (.properties, .xml)."
265,318,0.606,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UvaÅ¾ujme dve hÄ¾adiskÃ¡ prÃ­stupov k testovaniu: manuÃ¡lne-automatizovanÃ© a dynamickÃ©-statickÃ©. UveÄte prÃ­klad testovania pre kaÅ¾dÃº kombinÃ¡ciu hodnÃ´t z tÃ½chto dvoch dimenziÃ­? ManuÃ¡lne dynamickÃ©: NaprÃ­klad akceptaÄnÃ© testovanie, ale aj hocijakÃ© spustenie Äasti programu poÄas vÃ½voja spojenÃ© s pozorovanÃ­m, Äi sa sprÃ¡va sprÃ¡vne. ManuÃ¡lne statickÃ©: NaprÃ­klad prehliadky zdrojovÃ½ch kÃ³dov, prehliadky dokumentÃ¡cie, kladenie kontrolnÃ½ch otÃ¡zok o softvÃ©ri. AutomatizovanÃ© dynamickÃ©: NaprÃ­klad jednotkovÃ© testovanie, integraÄnÃ© testovanie (okrem inÃ©ho zahÅÅa aj simulovanie Ä¾udskÃ©ho sprÃ¡vania nad pouÅ¾Ã­vateÄ¾skÃ½m rozhranÃ­m). AutomatizovanÃ© statickÃ©: Sem patrÃ­ naprÃ­klad vÃ½poÄet metrÃ­k zdrojovÃ©ho kÃ³du s cieÄ¾om zÃ­skania kvantitatÃ­vnych ukazovateÄ¾ov o zdrojovom kÃ³de (pokrytie kÃ³du automatickÃ½mi testami, zloÅ¾itosÅ¥ metÃ³d, prepojenosÅ¥ modulov, vÃ½skyt pachov a podobne)."
190,405,0.606,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"pre kaÅ¾dÃº novÃº funkcionalitu tak zÃ­skame komplexnÃº sadu testov, ktorÃ¡ preverÃ­ funkÄnosÅ¥ kÃ³du. Ak testy prejdÃº, vÅ¡etko je v poriadku. Ak testy PrÃ¡ca s kÃ³dom, neprejdÃº? UkÃ¡Å¾u, kde je chyba. Ak sÃº testy dostatoÄne jemne granulovanÃ© ktorÃ½ mÃ¡ len a navzÃ¡jom nezÃ¡vislÃ©, kaÅ¾dÃ½ test overuje prÃ¡ve jednu malÃº vlastnosÅ¥ kÃ³du. minimÃ¡lne alebo Test, ktorÃ½ zlyhÃ¡, tak presne ukÃ¡Å¾e na chybnÃ© miesto v kÃ³de, aj s posÅ¾iadne pokrytie tupom, ako chybu vyvolaÅ¥. Ako dlho by to trvalo Äloveku? testami, je ako Testy jednotiek softvÃ©ru nÃ¡m navyÅ¡e umoÅ¾ÅujÃº simulovaÅ¥ rÃ´zne podmienky, ktorÃ© poÄas beÅ¾nÃ©ho âÄloveko-testovaniaâ nikdy nenastanÃº, prechÃ¡dzaÅ¥ sa prÃ­padne je obtiaÅ¾ne ich nasimulovaÅ¥. Ako sa zachovÃ¡ nÃ¡Å¡ systÃ©m, ak sa po tenkom Ä¾ade. externÃ½ systÃ©m zachovÃ¡ tak, Äi onak? Po vytvorenÃ­ testu je odpoveÄ otÃ¡zkou pÃ¡r sekÃºnd. PrÃ¡ca s kÃ³dom, ktorÃ½ mÃ¡ len minimÃ¡lne alebo Å¾iadne pokrytie testami, je ako prechÃ¡dzaÅ¥ sa po tenkom Ä¾ade. Nikdy neviete, kedy sa Ä¾ad praskne a vy sa prepadnete. TÃ¡to paralela vÅ¡ak nie je Ãºplne presnÃ¡. Pri vÃ½voji softvÃ©ru nevidÃ­me chybu hneÄ, ale prejavÃ­ sa aÅ¾ dlho potom, Äo Ä¾ad praskol. KÃ³d pokrytÃ½ testami umoÅ¾Åuje zmeny kÃ³du bez strachu. Po kaÅ¾dej zmene kÃ³du sa spustÃ­ sada testov, ktorÃ¡ odhalÃ­ novÃ© chyby a zaistÃ­, Å¾e starÃ½ kÃ³d nebol poÅ¡kodenÃ½ novÃ½mi zmenami. Podobne ako prehliadky kÃ³du, ani testy jednotiek softvÃ©ru nie sÃº nÃ¡hradou za ruÄnÃ© testovanie. Testy jednotiek softvÃ©ru mÃ´Å¾u nedokÃ¡Å¾u odhaliÅ¥ niektorÃ© druhy chÃ½b, ktorÃ© odhalÃ­ len manuÃ¡lne testovanie. Rovnako nedokÃ¡Å¾u odchytiÅ¥ vÅ¡etky chyby, mali by sa preto pouÅ¾Ã­vaÅ¥ ako doplnok k ostatnÃ½m druhom testov. Napriek zrejmÃ½m vÃ½hodÃ¡m sa spÃ¡ja s tvorbou testov mnoho kontroverziÃ­. VÃ¤ÄÅ¡ina vÃ½vojÃ¡rov podvedome tuÅ¡Ã­, Å¾e by mali tvoriÅ¥ testy. Len mÃ¡lo ich vÅ¡ak aj naozaj tvorÃ­. UniverzÃ¡lnou odpoveÄou na otÃ¡zku âPreÄo nie?â je âMÃ¡m mÃ¡lo Äasuâ. To vÅ¡ak vedie k vytvoreniu bludnÃ©ho cyklu. ÄÃ­m menej Äasu programÃ¡tor mÃ¡, tÃ½m menej testov tvorÃ­. ÄÃ­m menej testov tvorÃ­, tÃ½m je menej produktÃ­vny a jeho kÃ³d je menej stabilnÃ½ [1]. ÄÃ­m je menej produktÃ­vny a ÄÃ­m menej stabilnÃ½ kÃ³d tvorÃ­, tÃ½m mÃ¡ menej Äasu a dostÃ¡va sa pod vÃ¤ÄÅ¡Ã­ tlak. ZaÄarovanÃ½ kruh. Ãplne opaÄnÃ½m extrÃ©mom je posadnutosÅ¥ testami. Jednou z metrÃ­k kvality testov je pokrytie testami, ktorÃ¡ opisuje stupeÅ otestovanosti kÃ³du. 100% pokrytie kÃ³du znamenÃ¡, Å¾e test vykonÃ¡va testovanÃ© funkcie takÃ½m spÃ´sobom (s takÃ½mi argumentmi) a simuluje takÃ© podmienky, Å¾e testovanÃ½ kÃ³d prejde pri testoch vÅ¡etkÃ½mi moÅ¾nÃ½mi cestami. TakÃ©to pokrytie kÃ³du sa vyÅ¾aduje pri kritickÃ½ch aplikÃ¡ciÃ¡ch (pre armÃ¡du), je vÅ¡ak veÄ¾mi Å¥aÅ¾ko dosiahnuteÄ¾nÃ©. MyslÃ­m, Å¾e je zbytoÄnÃ© snaÅ¾iÅ¥ sa dosiahnuÅ¥ Äo najvÃ¤ÄÅ¡ie pokrytie kÃ³du. Pri beÅ¾nÃ½ch projektoch je to zbytoÄnÃ© â je dÃ´leÅ¾itÃ©, aby kaÅ¾dÃ¡ jednotka kÃ³du"
76,279,0.606,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"beru je deÅ¡truktÃ­vnej povahy (ako napr. pri meranÃ­ Å¾ivotnosti vÃ½robkov, alebo pevnosti nosnÃ­kov). V takÃ½ch prÃ­padoch je sÃ­ce poruÅ¡enÃ¡ nezÃ¡vislosÅ¥ avÅ¡ak obyÄajne rozsah nÃ¡hodnÃ©ho vÃ½beru je podstatne menÅ¡Ã­ ako rozsah zÃ¡kladnÃ©ho sÃºboru, a preto nepatrnÃ© poruÅ¡enie nezÃ¡vislosti mÃ´Å¾eme zanedbaÅ¥ (pozri Ãºlohu 6.6.1). TermÃ­n nÃ¡hodnÃ½ vÃ½ber sa pouÅ¾Ã­va aj tam, kde sa v skutoÄnosti niÄ nevyberÃ¡, ale za tÃ½ch istÃ½ch podmienok sa -krÃ¡t (a nezÃ¡visle na sebe) meria sledovanÃ¡ nÃ¡hodnÃ¡ veliÄina (pozri prÃ­klad 6.2.8). 6.2.6 DefinÃ­cia. NÃ¡hodnÃ½ vÃ½ber z rozdelenia, ktorÃ© urÄuje distribuÄnÃ¡ funkcia , je -tica nÃ¡hodnÃ½ch veliÄÃ­n , , ... , s vlastnosÅ¥ami: 1. VÅ¡etky majÃº rovnakÃ© rozdelenie. Funkcia je distribuÄnou funkciou kaÅ¾dej 2. VeliÄiny , , ... , sÃº nezÃ¡vislÃ© nÃ¡hodnÃ© veliÄiny."
190,125,0.605,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PlÃ¡novanie nie je jednorazovÃ½ proces, ktorÃ½ sa vykonÃ¡ na zaÄiatku projektu a potom sa naÅ zabudne. PlÃ¡novanie musÃ­ sledovaÅ¥ projekt poÄas vÃ¤ÄÅ¡iny jeho trvania, reagovaÅ¥ na rozhodnutia, braÅ¥ do Ãºvahy neoÄakÃ¡vanÃ© situÃ¡cie a novÃ© otÃ¡zky, ktorÃ© vyvstanÃº poÄas neskorÅ¡Ã­ch fÃ¡z projektu. PokiaÄ¾ sa plÃ¡n nevyvÃ­ja, nebude trvaÅ¥ dlho a aktivity v rÃ¡mci projektu sa pod vplyvom okolnostÃ­ zaÄnÃº od plÃ¡nu postupne vzÄaÄ¾ovaÅ¥. Pre demonÅ¡trÃ¡ciu naviaÅ¾em na predchÃ¡dzajÃºci prÃ­klad s cestou autom: zrazu uprostred cesty sa stane nejakÃ¡ katastrofa a je uzavretÃ¡ pÃ´vodnÃ¡ cesta. Vtedy si treba nÃ¡jsÅ¥ inÃº cestu â teda preplÃ¡novaÅ¥ trasu. Preto je dÃ´leÅ¾itÃ© sledovaÅ¥ priebeh projektu a nÃ¡sledne upravovaÅ¥ plÃ¡n projektu. PMI uvÃ¡dza plÃ¡novanie ako sÃºÄasÅ¥ cyklu v rÃ¡mci Å¾ivota projektu (pozri obrÃ¡zok 1). UÅ¾ to, Å¾e plÃ¡novanie je prezento-"
40,40,0.605,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Na prvÃ½ pohÄ¾ad sa nÃ¡m mÃ´Å¾e zdaÅ¥, Å¾e toto tvrdenie nÃ¡m nijako nepomÃ´Å¾e pri hÄ¾adanÃ­ Echo State neurÃ³novÃ½ch sietÃ­. Ale praktickÃ½mi experimentmi bolo zistenÃ©, Å¾e ak nedodrÅ¾Ã­me podmienky uvedenÃ© vo vete 1, ÄiÅ¾e ak spektrÃ¡lny polomer vÃ¡hovej matice je menÅ¡Ã­ ako jedna, tak neurÃ³novÃ¡ sieÅ¥, ktorÃº zÃ­skame tÃ½mto spÃ´sobom, mÃ¡ echo stavy. HypotÃ©za 1. Nech Î´ a Îµ sÃº dve malÃ© kladnÃ© ÄÃ­sla. Potom existuje veÄ¾kosÅ¥ neurÃ³novej siete N takÃ¡, Å¾e ak dynamickÃ½ rezervoÃ¡r o veÄ¾kosti N skonÅ¡truujeme nÃ¡hodnÃ½m vygenerovanÃ­m matice W0 za pouÅ¾itia uniformnÃ©ho rozdelenia a z rozsahu [â1,1] , Äalej tÃºto maticu W0 normalizujeme na W1 , 1  W1 = W0 , kde Î»max je spektrÃ¡lny polomer matice W0 a nakoniec"
76,302,0.605,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"kde je koeficient Ãºmernosti (Ä¾ubovoÄ¾nÃ© kladnÃ© ÄÃ­slo). Vzali sme najjednoduchÅ¡iu voÄ¾bu, = 1 a zÃ­skali sme = 0.5, = 1.5, = 2.5, = 2, = 0.5. Niekedy si prajeme zostrojiÅ¥ histogram tak, aby sÃºÄet plÃ´ch vÅ¡etkÃ½ch obdÄºÅ¾nikov sa rovnal jednej. NaprÃ­klad preto, lebo ho chceme porovnaÅ¥ s grafom (do Ãºvahy prichÃ¡dzajÃºcej) hustoty. V takom prÃ­pade majÃº platiÅ¥ hore uvedenÃ© vzÅ¥ahy, kde uÅ¾ nie je Ä¾ubovoÄ¾nÃ©, pretoÅ¾e mÃ¡ platiÅ¥:"
190,330,0.605,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Treba zistiÅ¥ poÅ¾iadavky objednÃ¡vateÄ¾a na vÃ½konnosÅ¥ vytvÃ¡ranÃ©ho produktu v reÃ¡lnom Äase. KeÄ sÃº poÅ¾iadavky znÃ¡me, treba overovaÅ¥ vÃ½kon systÃ©mu pomocou vyÅ¡Å¡ie spomenutÃ½ch technÃ­k. Toto riziko Ãºzko sÃºvisÃ­ s viacerÃ½mi uÅ¾ spomÃ­nanÃ½mi rizikami. NaprÃ­klad pozlacovanie systÃ©mu, ako aj pouÅ¾itie nedostatoÄne analyzovanej technolÃ³gie mÃ´Å¾e produkt nevhodne spomaliÅ¥."
190,178,0.605,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PreÄo nie sÃº vÃ½robcovia softvÃ©ru rovnako zodpovednÃ­ za svoje produkty ako producenti Ã¡ut? DÃ¡ sa vÃ´bec vytvoriÅ¥ softvÃ©r bez chÃ½b? PreÄo si nevyberÃ¡me ako zÃ¡kaznÃ­ci bezpeÄnejÅ¡Ã­ softvÃ©r? Toto sÃº len niektorÃ© otÃ¡zky, ktorÃ© ma napadajÃº pri hÄ¾adanÃ­ prÃ­Äiny ânezodpovednostiâ softvÃ©rovÃ½ch vÃ½robcov za svoje produkty. OdpoveÄ na prvÃº otÃ¡zku je, Å¾e pre firmy nie je ekonomicky vÃ½hodnÃ© niesÅ¥ zodpovednosÅ¥ za chyby, a taktieÅ¾ neexistuje ani Å¾iadna legislatÃ­va, ktorÃ¡ by ich nÃºtila dodrÅ¾iavaÅ¥ normy vo vÃ½robnom procese. ZastavÃ­m sa nad myÅ¡lienkou zavedenia noriem do vÃ½roby softvÃ©ru. SpoloÄnosÅ¥ Microsoft ostro vystÃºpila proti zavedeniu takÃ½chto noriem, pretoÅ¾e by to podÄ¾a nich âspomalilo inovÃ¡cie, vÃ½voj softvÃ©ru, ktorÃ½ by sa len neÃºmerne predraÅ¾il a neprinieslo by to dostatoÄnÃ½ poÅ¾adovanÃ½ efektâ [2]. NemyslÃ­m si, Å¾e by zavedenie noriem prinieslo len negatÃ­va. Znova sa musÃ­m vrÃ¡tiÅ¥ k automobilovÃ©mu priemyslu. AutÃ¡ boli tieÅ¾ spoÄiatku nebezpeÄnÃ© a nespoÄ¾ahlivÃ©. AvÅ¡ak od prvÃ©ho zavedenia bezpeÄnostnÃ½ch predpisov v USA v roku 1966, klesol poÄet ÃºmrtÃ­ za volantom o 75%. A to vÄaka povinnÃ©mu zavedeniu bezpeÄnostnÃ½ch pÃ¡sov, prieÄnych stabilizÃ¡torov a airbagov [5]. Zastavil sa zavedenÃ­m tÃ½chto pravidiel vÃ½voj automobilov? OdpoveÄ nechÃ¡vam na samotnÃ©ho ÄitateÄ¾a. VÃ½robcovia podliehajÃº poÅ¾iadavkÃ¡m trhu, to je zrejme z princÃ­pu demokratickÃ½ch ekonomÃ­k. A akÃ© sÃº poÅ¾iadavky trhu? Je to bezpeÄnÃ½ softvÃ©r alebo stÃ¡le novÃ© a novÃ© vlastnosti programov, ktorÃ© zaujÃ­majÃº pouÅ¾Ã­vateÄ¾ov? Zo sÃºÄasnej situÃ¡cie je odpoveÄ jednoduchÃ¡. SÃº to novÃ© vlastnosti progra-"
135,356,0.605,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Tento prÃ­stup vÅ¡ak kladie vÃ¤Å¡Ã­ dÃ´raz na prÃ¡cu s rolami, priom podrobnejÅ¡ie definuje vlastnosti ich pouÅ¾itia a sÃºasne vyuÅ¾Ã­va mieru abstrakcie, ktorÃº tento pojem umoÅ¾uje. Pri prÃ¡ci s rolami uplatuje nasledovnÃ© pravidlÃ¡: 1. Rola predstavuje bu Å¡trukturÃ¡lnu entitu (zodpovedÃ¡ jej napr. trieda, objekt) alebo entitu sprÃ¡vania (zodpovedÃ¡ jej napr. metÃ³da). Leitmotif vzoru je opÃ­sanÃ½ ako mnoÅ¾ina spolupracujÃºcich rolÃ­ oboch typov. 2. KaÅ¾dej roli mÃ´Å¾e zodpoveda niekoko konkrÃ©tnych hrÃ¡ov reprezentujÃºcich inÅ¡tanciu role. NiektorÃ© sÃº definovanÃ© tak, aby im zodpovedal iba jeden hrÃ¡, inÃ© sÃº urenÃ© tak, aby im zodpovedalo viac (0 - N) hrÃ¡ov. HovorÃ­me o poetnosti role. 3. Role mÃ´Å¾u ma viac dimenziÃ­: naprÃ­klad vo vzore Abstarct factory kaÅ¾dÃ½ hrÃ¡ role ConcreteProduct zodpovedÃ¡ uritÃ©mu typu produktu (AbstractProduct) a sÃºasne rodine produktu (= produkty vytvÃ¡ranÃ© rovnakÃ½m hrÃ¡om ConcreteFactory). V tomto prÃ­pade je rola ConcreteProduct definovanÃ¡ ako dvojrozmernÃ¡, pretoÅ¾e poet hrÃ¡ov role je viazanÃ½ na poty hrÃ¡ov dvoch nezÃ¡vislÃ½ch rolÃ­. 4. Vzahy medzi rolami sa nie sÃº mapovanÃ© jedna k jednej k vÃ½slednÃ½m hrÃ¡om: a. Jedna relÃ¡cia na Ãºrovni modelu rolÃ­ mÃ´Å¾e by mapovanÃ¡ do viacerÃ½ch vzahov na Ãºrovni nÃ¡vrhu. NaprÃ­klad vo vzore Abstract factory je kaÅ¾dÃ½ hrÃ¡ role ConcreteFactory zodpovednÃ½ za inÅ¡tanciÃ¡ciu hrÃ¡ov role ConcreteProduct. To, akÃ½m spÃ´sobom sa to deje, nie je definovanÃ©: mÃ´Å¾e to by lokÃ¡lne na bÃ¡ze Factory method (klasicky) alebo delegovanÃ­m pomocou vzoru Prototype (vznikÃ¡ vzor Plugable Factory [35])."
135,509,0.605,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"vÃ½ch fariem (angl. link farm), ktorÃ© automaticky generujÃº velâkÃ© siete prepojenÃ­ na irelevantnÃ© vrcholy a vytvÃ¡rajÃº tak ilÃºziu toho, Å¾e je populÃ¡rny. ZneuÅ¾Ã­va sa vlastnostâ PageRank algoritmu, kde aj vrcholy, ktorÃ© by nesplÌnÌali podmienku ireducibilnosti, majÃº urcÌitÃ© malÃ© ohodnotenie. TÃ¡to vlastnostâ je dÃ´sledkom zavedenia nÃ¡hodnÃ©ho skoku na lâubovolânÃ½ vrchol, ktorÃ½ zabezpecÌuje malÃº vÃ¡hu kaÅ¾dÃ©mu vrcholu grafu. Na obrÃ¡zku 7-6 je zobrazenÃ½ prÃ­klad odkazovej farmy, ktorÃ¡ umelo zvyÅ¡uje ohodnotenie vrcholu wâ."
130,483,0.604,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Ak sa pri analÃ½ze zdrojov znalostÃ­ detailnejÅ¡ie zameriame na zdroje na Internete, primÃ¡rnym sprostredkovateÄ¾om znalostÃ­ sÃº webovÃ© sÃ­dla. Hoci na Internete moÅ¾no nÃ¡jsÅ¥ niekoÄ¾ko definÃ­ciÃ­ webovÃ©ho sÃ­dla, vo vÅ¡eobecnosti budeme pod tÃ½mto pojmom rozumieÅ¥ kolekciu webovÃ½ch strÃ¡nok takto zoskupenÃ½ch na zÃ¡klade ich spolupatriÄnosti ku konkrÃ©tnej tÃ©me, problÃ©movej oblasti, spoloÄnosti, organizÃ¡cii Äi osobe. AlternatÃ­vne tieÅ¾ mÃ´Å¾eme povedaÅ¥, Å¾e primÃ¡rnym zdrojom znalostÃ­ sÃº konkrÃ©tne webovÃ© strÃ¡nky zoskupenÃ© do webovÃ½ch sÃ­diel podÄ¾a kritÃ©riÃ­ uvedenÃ½ch v definÃ­cii vyÅ¡Å¡ie. Z hÄ¾adiska prÃ­stupu webovÃ½ch sÃ­diel k poskytovaniu informÃ¡ciÃ­ tretÃ­m stranÃ¡m, ktorÃ© chcÃº tieto informÃ¡cie Äalej spracovaÅ¥, mÃ´Å¾eme sÃ­dla rozdeliÅ¥ na pasÃ­vne a aktÃ­vne. âPasÃ­vneâ webovÃ© sÃ­dla. V sÃºÄasnosti prevaÅ¾nÃº vÃ¤ÄÅ¡inu sÃ­diel vo webe moÅ¾no pokladaÅ¥ za pasÃ­vne, nakoÄ¾ko okrem poskytovania obsahu zakÃ³dovanÃ©ho v primÃ¡rnom formÃ¡te, ktorÃ½m je vo webe jazyk HTML, neposkytujÃº inÃº formu sprostredkovania informÃ¡ciÃ­, a teda neumoÅ¾ÅujÃº potenciÃ¡lnym integrÃ¡torom informÃ¡ciÃ­ zÃ­skaÅ¥ tieto informÃ¡cie inÃ½m spÃ´sobom ako vytvorenÃ­m obaÄ¾ovaÄov webovÃ½ch strÃ¡nok. âAktÃ­vneâ webovÃ© sÃ­dla. Ide o sÃ­dla, ktorÃ© buÄ (1) vytvÃ¡rajÃº alternatÃ­vne kanÃ¡ly pre prÃ­stup k dÃ¡tam primÃ¡rne poskytovanÃ½ch vo forme HTML, alebo (2) obohacujÃº poskytovanÃ½ obsah pridanÃ­m tzv. âsÃ©mantickÃ½châ znaÄiek, prÃ­p. metadÃ¡t, ktorÃ© sÃº vnorenÃ© priamo do webovÃ½ch strÃ¡nok. Do prvej kategÃ³rie moÅ¾no zaradiÅ¥ webovÃ© sluÅ¾by (Haas, 2002), kanÃ¡ly zaloÅ¾enÃ© na jednej zo Å¡pecifikÃ¡ciÃ­ RSS alebo Atom (Nottingham a Sayre, 2004), intenzÃ­vne vyuÅ¾Ã­vanÃ© hlavne prevÃ¡dzkovateÄ¾mi"
190,89,0.604,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Na najvyÅ¡Å¡ej Ãºrovni stojÃ­ projekt samotnÃ½. NiÅ¾Å¡ie stoja Äasti projektu, ktorÃ© sa dajÃº dobre logicky oddeliÅ¥. MÃ´Å¾e Ã­sÅ¥ o rozdelenie podÄ¾a toho, ktorÃ½ tÃ­m bude vykonÃ¡vaÅ¥ Ãºlohu alebo rozdelenie z hÄ¾adiska ÄasovÃ½ch etÃ¡p projektu, prÃ­padne z pohÄ¾adu fyzikÃ¡lnej Å¡truktÃºry projektu. Na niÅ¾Å¡ej Ãºrovni mÃ¡me vÅ¾dy Ãºlohy, ktorÃ© splnia nadradenÃ© Äasti projektu. NiektorÃ­ vyÅ¡Å¡ie postavenÃ­ vedÃºci pracovnÃ­ci mÃ´Å¾u maÅ¥ napr. len rozhÄ¾ad po tÃºto ÃºroveÅ, hlbÅ¡ie to uÅ¾ prenechajÃº svojim podriadenÃ½m, ktorÃ­ povedÃº pracovnÃ½ tÃ­m. Tento niÅ¾Å¡Ã­ element sa rozdelÃ­ na balÃ­ky prÃ¡c, ktorÃ© sa potom prerozdelia medzi konkrÃ©tne tÃ­my, Äi skupiny pracovnÃ­kov, medzi ktorÃ½ch sa ZÃ¡kladnou konkrÃ©tne prÃ¡ce z balÃ­ka rozdelia. V tejto Ãºrovni uÅ¾ je konkrÃ©tny pracovnÃ­k technikou zodpovednÃ½ za svoju ÄasÅ¥ prÃ¡ce, pred ktorou stojÃ­, vie ako je tento jeho vÃ½kon rieÅ¡enia ohodnotenÃ½ a Äo sa oÄakÃ¡va ako vÃ½sledok [4]."
111,31,0.604,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Kedy pouÅ¾Ã­vaÅ¥ hybridnÃ© triedenie kariet namiesto uzavretÃ©ho? HybridnÃ© triedenie kariet, ktorÃ© je bliÅ¾Å¡ie k uzavretÃ©mu, zÃ­skate, ak ho vytvorÃ­te pomocou zoznamu kategÃ³riÃ­, ktorÃ© sÃº dostatoÄnÃ© na triedenie vÅ¡etkÃ½ch kariet bez toho, aby bolo potrebnÃ© vytvÃ¡raÅ¥ novÃ© kategÃ³rie (aspoÅ podÄ¾a vÃ¡Å¡ho vlastnÃ©ho chÃ¡pania informÃ¡ciÃ­). Ak Ä¾udia mÃ´Å¾u kartu zaradiÅ¥ do existujÃºcej kategÃ³rie, je pravdepodobnejÅ¡ie, Å¾e tak urobia. IbaÅ¾e by Å¾iadna z existujÃºcich kategÃ³riÃ­ nezodpovedala ich predstavÃ¡m o tom, Äo danÃ¡ karta predstavuje. Vtedy si vytvoria novÃº kategÃ³riu, ÄÃ­m sa prejavÃ­ rozdiel medzi uzavretÃ½m a hybridnÃ½m triedenÃ­m kariet."
41,30,0.604,InformaÄnÃ© vzdelÃ¡vanie,"BibliografickÃ½ odkaz je zÃ¡znam obsahujÃºci Ãºdaje o dokumente, ktorÃ½ autor bezprostredne pouÅ¾il pri pÃ­sanÃ­ svojej prÃ¡ce. V zozname bibliografickÃ½ch odkazov sa odkazy usporiadajÃº abecedne podÄ¾a prvÃ©ho Ãºdaja alebo podÄ¾a ÄÃ­siel, ktorÃ© zodpovedajÃº oznaÄeniu citÃ¡cie v texte. CitÃ¡cia je skrÃ¡tenÃ© oznaÄenie citovanÃ©ho dokumentu priamo v texte podÄ¾a jednej z troch pouÅ¾Ã­vanÃ½ch metÃ³d citovania. CitÃ¡cia slÃºÅ¾i na spojenie citovanÃ©ho miesta s bibliografickÃ½m odkazom nachÃ¡dzajÃºcim sa v zozname na konci prÃ¡ce. Forma citÃ¡cie zÃ¡visÃ­ od techniky citovania. CitÃ¡t je text doslovne prebratÃ½ z citovanÃ©ho dokumentu. Mal by sa pÃ­saÅ¥ v ÃºvodzovkÃ¡ch, resp. inÃ½m typom pÃ­sma. V prÃ­pade dlhÅ¡Ã­ch citÃ¡tov presahujÃºcich Å¡tyri riadky je vhodnÃ© citÃ¡ty oddeliÅ¥ od vlastnÃ©ho textu, odsadiÅ¥ od Ä¾avÃ©ho okraja a uviesÅ¥ kurzÃ­vou. Bez Ãºvodzoviek Äi inÃ©ho typu pÃ­sma uvÃ¡dzame prebratÃ© texty, ktorÃ© parafrÃ¡zujeme a uvÃ¡dzame vo vlastnej interpretÃ¡cii. Citovanie je preberanie akÃ©hokoÄ¾vek textu alebo Äasti citovanÃ©ho dokumentu: â¢ doslovnÃ½ text (citÃ¡t) â¢ modifikovanÃ½ text alebo jeho ÄasÅ¥ (parafrÃ¡za) â¢ vÃ½sledky vÃ½skumov â¢ tabuÄ¾ky, grafy, obrÃ¡zky CitovaÅ¥ pouÅ¾itÃº literatÃºru musÃ­me vÅ¾dy, aj v prÃ­pade, ak v texte prÃ¡ce publikÃ¡ciu len spomÃ­name, resp. odkazujeme na Åu. Pri tvorbe bibliografickÃ½ch odkazov a pri citovanÃ­ treba dodrÅ¾iavaÅ¥ tieto vÅ¡eobecnÃ© pravidlÃ¡: odkaz musÃ­ presne identifikovaÅ¥ citovanÃ½ dokument, aby ho bolo moÅ¾nÃ© bez Å¥aÅ¾kostÃ­ opÃ¤tovne dohÄ¾adaÅ¥, v celej publikÃ¡cii musÃ­ byÅ¥ pouÅ¾itÃ¡ rovnakÃ¡ technika citovania, Ãºdaje sa zapisujÃº v jazyku citovanÃ©ho dokumentu (s vÃ½nimkou poznÃ¡mok a doplnkov), inÃ© pÃ­sma sa prepisujÃº do latinky, poradie Ãºdajov v odkaze vrÃ¡tane interpunkcie je zÃ¡vÃ¤znÃ©, jednotlivÃ© skupiny Ãºdajov oddeÄ¾ujeme bodkou a medzerou,"
43,8,0.604,Objektovo orientovanÃ© programovanie v C++,"Tieto skriptÃ¡ boli napÃ­sanÃ© s prvotnÃ½m zÃ¡merom poskytnÃºÅ¥ Å¡tudijnÃ½ materiÃ¡l Å¡tudentom druhÃ©ho roÄnÃ­ka odboru Matematicko-poÄÃ­taÄovÃ© modelovanie na Stavebnej fakulte Slovenskej technickej univerzity v Bratislave. Obsah skrÃ­pt sa vo veÄ¾kej miere zhoduje s obsahom predmetu Objektovo orientovanÃ© programovanie tohto Å¡tudijnÃ©ho zamerania. UÄebnica vÅ¡ak mÃ´Å¾e rovnako dobre poslÃºÅ¾iÅ¥ aj komukoÄ¾vek inÃ©mu, kto si chce osvojiÅ¥ princÃ­py objektovo orientovanÃ©ho programovania a zoznÃ¡miÅ¥ sa s jazykom C++. CieÄ¾om tejto knihy je ponÃºknuÅ¥ zrozumiteÄ¾nÃ½ a intuitÃ­vny pohÄ¾ad na objektovo orientovanÃ© programovanie a jeho zÃ¡kladnÃ© stavebnÃ© kamene. Popri tom kniha obsahuje kapitoly, ktorÃ© sa netÃ½kajÃº priamo tejto tÃ©my, ale skÃ´r samotnÃ©ho jazyka C++. ÄitateÄ¾ by mal teda po jej preÄÃ­tanÃ­ nadobudnÃºÅ¥ schopnosÅ¥ vidieÅ¥ objektovÃº Å¡truktÃºru v praktickÃ½ch problÃ©moch, navrhnÃºÅ¥ objektovo orientovanÃ½ program a potom ho implementovaÅ¥ v C++. UÄebnica sa snaÅ¾Ã­ osloviÅ¥ skÃ´r novÃ¡Äika v tejto oblasti, ako profesionÃ¡lneho programÃ¡tora. Aby bola kaÅ¾dÃ¡ problematika Äo najlepÅ¡ie objasnenÃ¡, kniha obsahuje veÄ¾kÃ© mnoÅ¾stvo prÃ­kladov z rÃ´znych oblastÃ­. Ide o jednoduchÃ© Ãºlohy, ktorÃ© sÃº rozdelenÃ© do niekoÄ¾kÃ½ch kategÃ³riÃ­ (zÃ¡kladnÃ© princÃ­py, matematickÃ© Ãºlohy, hry a inÃ© aplikÃ¡cie), aby mal ÄitateÄ¾ moÅ¾nosÅ¥ predstaviÅ¥ si, ako sa dajÃº objektovo reprezentovaÅ¥ rÃ´znorodÃ© typy problÃ©mov. Treba vÅ¡ak zdÃ´razniÅ¥, Å¾e ide skÃ´r o ilustrÃ¡cie princÃ­pov, pretoÅ¾e objektovo orientovanÃ© programovanie zaÄne byÅ¥ skutoÄne uÅ¾itoÄnÃ© aÅ¾ pri rozsiahlych programÃ¡torskÃ½ch projektoch. Kniha uÅ¾ predpokladÃ¡, Å¾e ÄitateÄ¾ poznÃ¡ zÃ¡kladnÃ© princÃ­py programovania. Pri ÄÃ­tanÃ­ prvej kapitoly, ktorÃ¡ vysvetÄ¾uje kÄ¾ÃºÄovÃ© myÅ¡lienky objektovo orientovanÃ©ho programovania, nie je potrebnÃ¡ znalosÅ¥ Å¾iadneho Å¡peciÃ¡lneho programovacieho jazyka. Äalej je vÅ¡ak uÅ¾ uÅ¾itoÄnÃ© maÅ¥ zÃ¡kladnÃ© znalosti jazyka C alebo aspoÅ inÃ©ho prÃ­buznÃ©ho programovacieho jazyka. UÄebnica sa sÃ­ce podrobne venuje niektorÃ½m dÃ´leÅ¾itÃ½m programÃ¡torskÃ½m otÃ¡zkam, ako sÃº naprÃ­klad alokÃ¡cia pamÃ¤te alebo usporiadanie dÃ¡t do rÃ´znych dÃ¡tovÃ½ch Å¡truktÃºr, no nijako sa nevracia k princÃ­pom algoritmizÃ¡cie problÃ©mov a k zÃ¡kladnÃ½m prvkom programovacÃ­ch jazykov, ako sÃº cykly, podmienky, deklarÃ¡cie premennÃ½ch, tvorba funkciÃ­ a podobne. KeÄÅ¾e uÄebnica je primÃ¡rne urÄenÃ¡ pre Å¡tudentov odboru Matematicko-poÄÃ­taÄovÃ© modelovanie, niektorÃ© prÃ­klady a cviÄenia prepokladajÃº istÃ© matematickÃ© vedomosti (nejde vÅ¡ak o pokroÄilÃ© problematiky), alebo rieÅ¡ia jednoduchÃ© problÃ©my z oblastÃ­ sÃºvisiacich s aplikovanou matematikou, ako je naprÃ­klad spracovanie obrazu. Okrem toho je vÅ¡ak v knihe mnoÅ¾stvo ÄalÅ¡Ã­ch prÃ­kladov, ktorÃ© sÃº urÄenÃ© aj pre inak zameranÃ©ho ÄitateÄ¾a. VÅ¡etky uvedenÃ© prÃ­klady sÃº funkÄnÃ© programy alebo ich Äasti, teda boli skompilovanÃ© aj otestovanÃ©. PoÄakovanie. Äakujem recenzentom Ing. TomÃ¡Å¡ovi Oberhuberovi, PhD. a RNDr. Martinovi SamuelÄÃ­kovi, PhD., za cennÃ© pripomienky a rady. TieÅ¾ Äakujem Mgr. Jane Karasovej za pripomienky a pohÄ¾ad laika so zÃ¡ujmom o zÃ¡klady OOP."
130,507,0.604,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"NÃ­zka kritickÃ¡ âmasaâ. Web, ako snaha o zdieÄ¾anie informÃ¡ciÃ­ v sieÅ¥ovom prostredÃ­, potreboval minimÃ¡lny (ale zÃ¡roveÅ dostatoÄne veÄ¾kÃ½) poÄet ÃºÄastnÃ­kov, ktorÃ­ by zvÃ½Å¡ili zÃ¡ujem u âobyÄajnÃ½châ Ä¾udÃ­ a presvedÄili ich, aby ho zaÄali pouÅ¾Ã­vaÅ¥. KeÄÅ¾e web bol prvÃ½ systÃ©m svojho druhu, tzn. dovtedy neexistoval Å¾iadny podobnÃ½ systÃ©m, ktorÃ½ by mu mohol konkurovaÅ¥, tento kritickÃ½ poÄet nadÅ¡encov potrebnÃ½ na âprerazenieâ bol relatÃ­vne malÃ½."
369,283,0.603,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.33. Vzor ÃverovÃ½ prÃ­pad â 1. ÄasÅ¥ ViacerÃ© z tried zodpovedajÃºcich hlavnÃ½m vÃ½stupom krokov ÃºverovÃ©ho procesu majÃº rovnakÃ© alebo podobnÃ© atribÃºty, ich hodnoty sa vÅ¡ak mÃ´Å¾u navzÃ¡jom lÃ­Å¡iÅ¥. NaprÃ­klad: ï· ÃrokovÃ¡ sadzba v indikatÃ­vnej ponuke je orientaÄnÃ¡ (urÄenÃ¡ intervalom), kÃ½m v nÃ¡vrhu je spresnenÃ¡ predajcom na zÃ¡klade finanÄnej analÃ½zy klienta. ÃrokovÃ¡ sadzba z nÃ¡vrhu mÃ´Å¾e byÅ¥ eÅ¡te zmenenÃ¡ v rozhodnutÃ­ o Ãºvere. (PoznÃ¡mka: pri hypo-"
236,62,0.603,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"ktorÃ½ prikÃ¡Å¾e LATEXu, aby nevkladal o niÄ vÃ¤ÄÅ¡ie medzery za bodkou ako za normÃ¡lnym znakom. Toto je beÅ¾nÃ© pre neanglickÃ© jazyky okrem bibliografiÃ­. Ak pouÅ¾ijete \frenchspacing, prÃ­kaz \@ nie je potrebnÃ½.6"
43,321,0.603,Objektovo orientovanÃ© programovanie v C++,"NT predstavuje nÃ¡vratovÃ½ typ operÃ¡tora, teda pri operÃ¡tore < by to bol typ bool, pri sÄÃ­tanÃ­ dvoch komplexnÃ½ch ÄÃ­sel komplexnÃ© ÄÃ­slo a pod. Zoznam parametrov reprezentuje operandy operÃ¡tora, pri preÅ¥aÅ¾ovanÃ­ vÅ¡etkÃ½ch spomenutÃ½ch operÃ¡torov bude obsahovaÅ¥ najviac dva parametre, mÃ´Å¾e byÅ¥ vÅ¡ak aj prÃ¡zdny. TÃºto problematiku si bliÅ¾Å¡ie vysvetlÃ­me pri konkrÃ©tnych operÃ¡toroch, ktorÃ½mi sa budeme zaoberaÅ¥ v tejto kapitole. PredtÃ½m, ako sa zaÄneme venovaÅ¥ konkrÃ©tnym prÃ­kladom, treba poznamenaÅ¥, Å¾e nie vÅ¡etky operÃ¡tory sa dajÃº preÅ¥aÅ¾iÅ¥. Spomedzi uvedenÃ½ch operÃ¡torov nie je moÅ¾nÃ© preÅ¥aÅ¾iÅ¥ operÃ¡tory ., :: a sizeof."
190,3,0.603,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ale kniÅ¾ka je to pre vÅ¡etky vekovÃ© kategÃ³rie tÃ½ch, ktorÃ­ sa zaujÃ­majÃº o dnes uÅ¾ vÅ¡adeprÃ­tomnÃ½ softvÃ©r, o jeho tvorbu. VerÃ­me, Å¾e pre mnohÃ½ch mÃ´Å¾e byÅ¥ zaujÃ­mavÃ© nazrieÅ¥ âpod pokrievkuâ toho, Äo sa Äasto oznaÄuje ako nieÄo medzi umenÃ­m a inÅ¾inierstvom. Autori sa v esejach venovali viacerÃ½m aspektom spojenÃ½m so softvÃ©rovÃ½mi projektmi. Je to vlastne skoro vÅ¡etko, Äo naznaÄuje aj pokrytie celej latinskej abecedy jednotlivÃ½mi esejami âº"
184,166,0.603,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"RizikÃ¡ NajvÃ¤ÄÅ¡ie riziko spojenÃ© s nÃ¡vrhom systÃ©mu ICDE predstavuje nesprÃ¡vne odhadnutie poÅ¾iadaviek nÃ¡strojov tretÃ­ch strÃ¡n, pretoÅ¾e len minimum potenciÃ¡lnych vÃ½vojÃ¡rov tÃ½chto nÃ¡strojov ich dokÃ¡Å¾e (v sÃºÄasnosti) Å¡pecifikovaÅ¥. VhodnÃ½m opatrenÃ­m na znÃ­Å¾enie tohto rizika je pouÅ¾itie jednoduchÃ©ho a Ä¾ahko rozÅ¡Ã­riteÄ¾nÃ©ho poÄiatoÄnÃ©ho programovÃ©ho rozhrania API, ktorÃ© bude rozÅ¡Ã­renÃ© po identifikovanÃ­ dodatoÄnÃ½ch poÅ¾iadaviek vyplÃ½vajÃºcich z novÃ½ch prÃ­padov pouÅ¾itia. 2.5.3"
195,203,0.602,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"11.5 Zhrnutie VykonÃ¡vanie systematickÃ½ch zmien je ÄastokrÃ¡t mÃ¡lo zaujÃ­mavÃ¡ ÄinnosÅ¥ a nÃ¡chylnÃ¡ na chyby. Ako rieÅ¡enie tejto problematiky sme uviedli zavedenie systÃ©mov pre odporÃºÄanie transformÃ¡ciÃ­ zdrojovÃ©ho kÃ³du. TransformÃ¡cia sa identifikuje z interakciÃ­ programÃ¡tora alebo vykonanÃ½ch zmien medzi verziami zdrojovÃ©ho kÃ³du ako prevod z pÃ´vodnej verzie na novÃº verziu. TÃºto transformÃ¡ciu je moÅ¾nÃ© zovÅ¡eobecniÅ¥, ako sme uviedli na prÃ­klade systÃ©mu Sydit, a nÃ¡sledne aplikovaÅ¥ aj v inÃ½ch podobnÃ½ch miestach zdrojovÃ©ho kÃ³du. OdporÃºÄanÃ­m v tomto prÃ­pade bol vzor transformÃ¡cie a miesta, kde ju moÅ¾no aplikovaÅ¥. Na odporÃºÄacie systÃ©my v tejto oblasti sa preto mÃ´Å¾eme pozeraÅ¥ z viacerÃ½ch pohÄ¾adov po vykonanÃ­ prvej zmeny, ktorÃ¡ by mala byÅ¥ transformÃ¡ciou: - odporÃºÄanie miest v zdrojovom kÃ³de, ktorÃ© by mal programÃ¡tor transformovaÅ¥, - odporÃºÄanie vzoru transformÃ¡cie z vykonanej zmeny, - odporÃºÄanie pouÅ¾itia transformÃ¡cie na zvolenom mieste. ExistujÃºce rieÅ¡enia tejto problematiky vÅ¡ak narÃ¡Å¾ajÃº na viacerÃ© problÃ©my. NajvÃ¡Å¾nejÅ¡Ã­m sÃº granularita a kontext zmeny. UvedenÃ½ prÃ­klad transformÃ¡cie systÃ©mom Sydit je moÅ¾nÃ© vykonaÅ¥ len v rÃ¡mci metÃ³dy v zdrojovom kÃ³de. SystematickÃ© zmeny sa vÅ¡ak ÄastokrÃ¡t vykonÃ¡vajÃº aj na vyÅ¡Å¡ej Ãºrovni, napr. hierarchia tried, alebo naprieÄ viacerÃ½mi metÃ³dami sÃºÄasne. ProblÃ©mom odlÃ­Å¡enia kontextu zmeny je prÃ­klad upravenia cyklu for, kedy by sa nesprÃ¡vne odporÃºÄali vÅ¡etky podobnÃ© cykly v zdrojovom kÃ³de. Z tohto vyplÃ½va aj problÃ©m presnosti odporÃºÄania, keÄ mÃ´Å¾eme programÃ¡tora zahltiÅ¥ odporÃºÄaniami."
59,364,0.602,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"PodobnÃ½m spÃ´sobom mÃ´Å¾u byÅ¥ uskutoÄniteÄ¾nÃ© aj ostatnÃ© tri zovÅ¡eobecnenÃ© modus ponens z Obr. 6.17. IlustraÄnÃ½ prÃ­klad âgeneralizÃ¡cie pomocou indukcie UvaÅ¾ujme âtrÃ©ningovÃºâ mnoÅ¾inu tvorenÃº postupnosÅ¥ou jednoduchÃ½ch unÃ¡rnych predikÃ¡torv, ktorÃ© mÃ´Å¾eme interpretovaÅ¥ ako pozorovania Atrain ï½ ï»m ï¨ ai ï© ; i ï½ 1, 2,...,qï½ (6.79) NaÅ¡im cieÄ¾om bude zovÅ¡eobecniÅ¥ tieto partikulÃ¡rne predikÃ¡ty do tvaru s univerzÃ¡lnym kvantifikÃ¡torom (alebo v naÅ¡om jednoduchÅ¡om formalizme, s univerzÃ¡lnou premennou) (6.80) ï¨ ï¢x ï© ï©ï«m ï¨ x ï©ï¹ï» ïº m ï¨ x ï©"
94,298,0.602,Sprievodca svetom vedeckÃ©ho publikovania,"ktorÃ© obsahujÃº dÃ¡ta. MetadÃ¡ta mÃ´Å¾u opisovaÅ¥ Å¡truktÃºru akÃ½chkoÄ¾vek dÃ¡t o akomkoÄ¾vek subjekte uloÅ¾enom v repozitÃ¡ri v akomkoÄ¾vek formÃ¡te (o.i. stanovujÃº maximÃ¡lnu moÅ¾nÃº dÄºÅ¾ku slova, naprÃ­klad priezviska, Äi je moÅ¾nÃ½ prevod malÃ½ch alebo veÄ¾kÃ½ch pÃ­smen, aj to, kto mÃ¡ k dÃ¡tam oprÃ¡vnenÃ½ prÃ­stup a ako s nimi mÃ´Å¾e naloÅ¾iÅ¥ a pod.). MetadÃ¡ta sÃº budovanÃ© v sÃºlade s medzinÃ¡rodnÃ½mi Å¡tandardmi131, Äo podporilo myÅ¡lienku ÄalÅ¡ieho vyuÅ¾itia ich informaÄnej hodnoty vo viacerÃ½ch medzinÃ¡rodnÃ½ch projektoch, s cieÄ¾om zviditeÄ¾nenia a sprÃ­stupnenia naprÃ­klad tzv. osirelÃ½ch textov (projekty LOCKSS a CLOCKSS, viac o nich v Äasti 8.2.1), alebo budovania novÃ½ch produktov v podobe databÃ¡z a repozitÃ¡rov. Medzi prvÃ© prÃ­klady patrÃ­ projekt SOLINET132 na uchovÃ¡vanie diplomovÃ½ch a dizertaÄnÃ½ch prÃ¡c na Ã´smich americkÃ½ch univerzitÃ¡ch, alebo realizÃ¡cia kooperatÃ­vneho programu MetaArchive Cooperative133, ktorÃ½ chrÃ¡ni digitÃ¡lne archÃ­vne zbierky. Predstavuje medzinÃ¡rodnÃº sieÅ¥ na uchovÃ¡vanie digitÃ¡lneho obsahu pozostÃ¡vajÃºcu z kniÅ¾nÃ­c, archÃ­vov a inÃ½ch pamÃ¤Å¥ovÃ½ch inÅ¡titÃºciÃ­. Å tyridsaÅ¥osem inÅ¡titÃºciÃ­ aktÃ­vne uchovÃ¡va Å¡irokÃº Å¡kÃ¡lu typov Ãºdajov a Å¾Ã¡nrov obsahu: elektronickÃ© dizertaÄnÃ© prÃ¡ce, digitÃ¡lne noviny, archÃ­v â zbierky fotografiÃ­, obchodnÃ© e-zÃ¡znamy a sÃºbory Ãºdajov. SieÅ¥ je budovanÃ¡ ako âtieÅovÃ¡"", Äo znamenÃ¡, Å¾e prÃ­stup je obmedzenÃ½ na vlastnÃ­ka obsahu/prispievateÄ¾a. KaÅ¾dÃ½ prispievateÄ¾ obsahu mÃ´Å¾e urÄiÅ¥, akÃ© formÃ¡ty si Å¾elÃ¡ uchovaÅ¥. Projekt LYRASIS134 vznikol v aprÃ­li 2009 po zlÃºÄenÃ­ projektov SOLINET a PALINET135, dvoch americkÃ½ch kniÅ¾niÄnÃ½ch sietÃ­. Podporuje trvalÃ½ prÃ­stup k spoloÄnÃ©mu akademickÃ©mu, vedeckÃ©mu a kultÃºrnemu dediÄstvu prostrednÃ­ctvom vedÃºceho postavenia v oblasti otvorenÃ½ch technolÃ³giÃ­, obsahu, digitÃ¡lnych rieÅ¡enÃ­ a spoluprÃ¡ce s archÃ­vmi, kniÅ¾nicami, mÃºzeami a znalostnÃ½mi komunitami na celom svete. BudÃºcnosÅ¥ tÃ½chto projektov je v zdokonalenÃ­ distribuovanej siete tzv. tieÅovÃ½ch archÃ­vov a v spojenÃ­ lokÃ¡lnej ochrany dokumentov s ochranou na medzinÃ¡rodnej Ãºrovni. SpoloÄnosÅ¥ CrossRef zhodnocuje zÃ­skanÃ© metadÃ¡ta v sluÅ¾be Crossref Search136. Tento produkt umoÅ¾Åuje ÄalÅ¡ie vyhÄ¾adÃ¡vanie metadÃ¡t v budovanej databÃ¡ze a je prÃ­kladom efektÃ­vneho vyuÅ¾itia metadÃ¡t aj na rÃ´zne druhy reÅ¡erÅ¡nÃ½ch postupov."
195,133,0.602,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov nosÅ¥ a niektorÃ© ÄalÅ¡ie [4]. Na zÃ¡klade tÃ½chto charakteristÃ­k sa dÃ¡ potom porovnÃ¡vaÅ¥ a vylepÅ¡ovaÅ¥ kvalitu odporÃºÄaÄov. KvalitatÃ­vne charakteristiky vÅ¡ak vyjadrujÃº vÃ½kon odporÃºÄaÄa len z hÄ¾adiska kvality jednotlivÃ½ch odporÃºÄanÃ­. Pojem vÃ½kon odporÃºÄaÄa zastreÅ¡uje aj ÄalÅ¡ie pohÄ¾ady na vÃ½kon, napr. z hÄ¾adiska rÃ½chlosti odozvy odporÃºÄaÄa na konkrÃ©tnu poÅ¾iadavku alebo vÃ½kon v zmysle poÄtu predanÃ½ch produktov, ktorÃ© sa predali vÄaka odporÃºÄaniam."
265,139,0.602,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Äinnosti, ktorÃ© sa vykonÃ¡vajÃº poÄas Å¾ivota softvÃ©ru mÃ´Å¾u byÅ¥ v rÃ´znych spoloÄnostiach vyvÃ­jajÃºcich softvÃ©r rÃ´zne. SÃºvisia s typom vyvÃ­janÃ©ho softvÃ©rovÃ©ho produktu, tÃ­mom, ktorÃ½ na Åom pracuje, prÃ­padne zavedenou metodolÃ³giou vÃ½voja softvÃ©ru. Medzi najÄastejÅ¡ie aplikovanÃ© Äinnosti vÃ½voja softvÃ©ru patrÃ­ (zoznam ÄinnostÃ­ nie je ani z Äaleka vyÄerpanÃ½): â¢ analÃ½za problÃ©movej oblasti (biznis analÃ½za), â¢ Å¡pecifikÃ¡cia poÅ¾iadaviek na softvÃ©r, â¢ nÃ¡vrh softvÃ©ru (architektonickÃ½, rozhranÃ­, komponentov), â¢ implementÃ¡cia softvÃ©ru, â¢ verifikÃ¡cia a validÃ¡cia softvÃ©ru (testovanie a overovanie), â¢ nasadenie softvÃ©ru do prevÃ¡dzky, â¢ pouÅ¾Ã­vanie softvÃ©ru, prevÃ¡dzka, â¢ ÃºdrÅ¾ba softvÃ©ru, â¢ vyradenie softvÃ©ru. DÃ´leÅ¾itÃ© je uvedomiÅ¥ si, Å¾e samotnÃ¡ implementÃ¡cia softvÃ©ru (programovanie) tvorÃ­ len jednu z mnohÃ½ch ÄinnostÃ­, ktorÃ© sÃº so softvÃ©rom poÄas celÃ©ho jeho Å¾ivota spÃ¤tÃ©."
393,30,0.602,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ZÃ¡kladnÃ© reaktÃ­vne plÃ¡ny Tieto plÃ¡ny boli pouÅ¾itÃ© vo viacerÃ½ch architektÃºrach (Fikes et al., 1993, Nillson, 1994) a sÃº charakteristickÃ© pre reaktÃ­vne plÃ¡novanie. BRP krok je trojica (Ï, Ï, Î±), kde Ï je priorita, Ï je spÃºÅ¡Å¥aÄ a Î± je akcia. BRP je malÃ¡ mnoÅ¾ina (vÃ¤ÄÅ¡inou 3-7 prvkovÃ¡) krokov plÃ¡nu {(Ïi, Ïi, Î±i)*} zviazanÃ¡ s dosiahnutÃ­m prÃ­sluÅ¡nÃ©ho cieÄ¾a. SpÃºÅ¡Å¥aÄ Ïi je je konjunkciou boolovskÃ½ch primitÃ­v, ktorÃ© urÄujÃº vykonateÄ¾nosÅ¥ prÃ­sluÅ¡nÃ©ho kroku. KaÅ¾dÃ¡ priorita Ïi je prvkom lineÃ¡rne usporiadanej mnoÅ¾iny. KaÅ¾dÃ¡ akcia Î±i je mÃ´Å¾e byÅ¥ inÃ½m BRP alebo primitÃ­vnou akciou. Poradie vykonÃ¡vania plÃ¡novanÃ½ch krokov sa urÄuje dvoma spÃ´sobmi: prioritou a spÃºÅ¡Å¥aÄmi. KeÄ sa mÃ´Å¾e vykonaÅ¥ viac ako jeden krok, tak sa vykonÃ¡ krok s najvyÅ¡Å¡ou prioritou. PokiaÄ¾ sa mÃ´Å¾u vykonaÅ¥ viacerÃ© kroky s rovnakou prioritou, tak sa vykonÃ¡ Ä¾ubovoÄ¾nÃ½ jeden z nich. NormÃ¡lne sa vykonÃ¡vania pre kroky s rovnakou prioritou navzÃ¡jom vyluÄujÃº. PokiaÄ¾ sa nedÃ¡ vykonaÅ¥ Å¾iadny krok tak sa BRP skonÄÃ­. CieÄ¾ovÃ½ krok mÃ¡ vÃ¤ÄÅ¡inou najvyÅ¡Å¡ou prioritu, v tomto prÃ­pade jeho spÃºÅ¡Å¥aÄ kontroluje, Äi bol BRP ÃºspeÅ¡nÃ½ a jeho akcia ukonÄuje BRP."
265,233,0.601,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Vysvetlite, preÄo je dobrÃ© vytvÃ¡raÅ¥ funkcionÃ¡lne testovacie scenÃ¡re poÄas Å¡pecifikÃ¡cie. MÃ¡ to aj nejakÃ© nevÃ½hody? HlavnÃ¡ vÃ½hoda a dÃ´vod preÄo vytvÃ¡rame funkcionÃ¡lne testy eÅ¡te pred nÃ¡vrhom a implementÃ¡ciou softvÃ©ru je, aby sme odhalili problÃ©my v poÅ¾iadavkÃ¡ch. VytvÃ¡ranie testov, naprÃ­klad konkrÃ©tnych vstupov a vÃ½stupov nÃ¡s nÃºti nad poÅ¾iadavkami podrobnejÅ¡ie premÃ½Å¡Ä¾aÅ¥. ZÃ¡roveÅ Å¡etrÃ­me Äas, keÄÅ¾e scenÃ¡re mÃ¡me âv hlaveâ a odpadÃ¡ tak istÃ¡ âmentÃ¡lna rÃ©Å¾iaâ. NevÃ½hoda je, Å¾e v prÃ­pade zmien poÅ¾iadaviek treba modifikovaÅ¥ aj testovacie scenÃ¡re. PoznÃ¡mka 1: funkcionÃ¡lne testy sÃº takÃ©, pri ktorÃ½ch testujeme funkcionalitu softvÃ©ru alebo nejakej jeho sÃºÄiastky zadÃ¡vanÃ­m vstupov a porovnÃ¡vanÃ­m reÃ¡lnych vÃ½stupov s oÄakÃ¡vanÃ½mi (tzv. Äierna skrinka). Spravidla sÃº automatickÃ© (viac o typoch testovania v otÃ¡zke 2.4.2). PoznÃ¡mka 2: z definÃ­cie v poznÃ¡mke 1 nepriamo vyplÃ½va, Å¾e nie vÅ¡etky funkcionÃ¡lne testy, ktorÃ© v softvÃ©rovom projekte moÅ¾no vytvoriÅ¥ a pouÅ¾iÅ¥, moÅ¾no vytvoriÅ¥ poÄas Å¡pecifikÃ¡cie: zahÅÅajÃº totiÅ¾ aj testy komponentov softvÃ©ru, ktorÃ© v Äase Å¡pecifikÃ¡cie eÅ¡te nemÃ´Å¾eme poznaÅ¥."
135,240,0.601,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.4.5 Zhodnotenie ArchitektÃºra volanie a nÃ¡vrat predstavuje zÃ¡klad alÅ¡Ã­ch odvodenÃ½ch architektÃºr, priom kaÅ¾dÃ¡ zavÃ¡dza nejakÃ© dodatonÃ© podmienky na obsah, smer a spÃ´sob komunikÃ¡cie medzi asami systÃ©mu. JednoduchÃ¡ architektÃºra HlavnÃ½ program a podprogramy je vhodnÃ¡ pre malÃ© projekty, pri vÃ¤Å¡Ã­ch projektoch zaÃ­na by neprehadnÃ¡. Pre efektÃ­vne pouÅ¾ite sofistikovanejÅ¡Ã­ch architektÃºr je nutnÃ© pochopi najmÃ¤ spÃ´sob komunikÃ¡cie medzi asami systÃ©mu, kde napr. medziprocesovÃ¡ komunikÃ¡cia je relatÃ­vne vysoko vÃ½potovo nÃ¡ronÃ¡ â vyÅ¾aduje okrem inÃ©ho zabalenie parametrov a nÃ¡vratovÃ½ch hodnÃ´t funkciÃ­ do formÃ¡tu v komunikanom protokole."
205,180,0.601,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","10.1.2 ZÃ¡kladnÃ© pojmy pre Å¡tÃºdium sietÃ­ AnalÃ½za sociÃ¡lnych sietÃ­ vyuÅ¾Ã­va pojmy ako ÃºÄastnÃ­k, vÃ¤zba, dyÃ¡da, triÃ¡da, podskupina, skupina, vzÅ¥ah a sociÃ¡lna sieÅ¥. SpoloÄenskÃ© entity sa oznaÄujÃº ako ÃºÄastnÃ­ci. SÃº to jednotlivÃ© alebo kolektÃ­vne jednotky spoloÄnosti ako naprÃ­klad Ä¾udia v skupinÃ¡ch, oddelenia vo firmÃ¡ch, Äi mestÃ¡ v Å¡tÃ¡toch. SociÃ¡lna sieÅ¥ sa skladÃ¡ vÃ¤ÄÅ¡inou z ÃºÄastnÃ­kov jednÃ©ho druhu. VlastnosÅ¥ou vÃ¤zby je, Å¾e vytvÃ¡ra prepojenie medzi dvoma ÃºÄastnÃ­kmi. VÃ¤zba mÃ´Å¾e byÅ¥ rÃ´zneho druhu, ako naprÃ­klad: ohodnotenie osoby inou (priateÄ¾stvo, reÅ¡pekt), prevod materiÃ¡lnych zdrojov (obchodnÃ© transakcie, pÃ´Å¾iÄky), asociÃ¡cie a afiliÃ¡cie (prÃ­sluÅ¡nosÅ¥ do zÃ¡ujmovÃ©ho klubu), interakcia (rozprÃ¡vanie sa, posielanie sprÃ¡v), biologickÃ© a rodinnÃ© vzÅ¥ahy (prÃ­buzenstvo), fyzickÃ© prepojenie (cesta, most). Na tej najzÃ¡kladnejÅ¡ej Ãºrovni sa prepojenie vytvorenÃ© medzi dvoma ÃºÄastnÃ­kmi nazÃ½va dyÃ¡da. Je vlastnosÅ¥ou dvojice, nielen jednÃ©ho z ÃºÄastnÃ­kov. Analyzuje sa reciprocita vÃ¤zby alebo sÃºÄasnÃ½ vÃ½skyt rÃ´znych typov vÃ¤zieb v sieti. TriÃ¡da je mnoÅ¾inou troch ÃºÄastnÃ­kov a existujÃºcich alebo potenciÃ¡lnych vÃ¤zieb medzi nimi. Analyzuje sa najÄastejÅ¡ie tranzitÃ­vnosÅ¥ vzÅ¥ahov (ak ÃºÄastnÃ­k I mÃ¡ rÃ¡d ÃºÄastnÃ­ka J a ÃºÄastnÃ­k J mÃ¡ rÃ¡d K, tak aj I mÃ¡ rÃ¡d K) alebo vyvÃ¡Å¾enosÅ¥ vzÅ¥ahov (ak I sa mÃ¡ rÃ¡d s J, tak sÃº podobnÃ­ s ÃºÄastnÃ­kom K)."
94,129,0.601,Sprievodca svetom vedeckÃ©ho publikovania,"sa dozvedel, v akÃ© vÃ½sledky dÃºfajÃº a v poÄÃ­taÄi vyrobil zodpovedajÃºce grafy. Kolegovia boli nadÅ¡enÃ­, keÄ priÅ¡iel s dÃ¡tami, ktorÃ© podporovali ich teÃ³rie. SchÃ¶n prefÃ­kane vyuÅ¾Ã­val slabiny akademickÃ©ho systÃ©mu, aÅ¾ kÃ½m ho nezastavil samoopravnÃ½ mechanizmus vedy. Dovtedy vÅ¡ak mnoho vedcov z celÃ©ho sveta mrhalo prostriedkami a svojÃ­m Äasom v mÃ¡rnom ÃºsilÃ­ replikovaÅ¥ SchÃ¶nove sfalÅ¡ovanÃ© vÃ½sledky. PodobnÃ© pocity zaÅ¾Ã­vali aj vÃ½skumnÃ­ci v oblasti kmeÅovÃ½ch buniek, ktorÃ­ sa snaÅ¾ili zopakovaÅ¥ Ãºspechy slÃ¡vneho juhokÃ³rejskÃ©ho vedca Woo-suk Hwanga (Sang-Hun 2014). Ten tvrdil (a v rokoch 2004 a 2005 publikoval v Äasopise Science), Å¾e naklonoval Ä¾udskÃ© embryo a zÃ­skal z neho kmeÅovÃ© bunky â neskÃ´r dokonca pÃ­sal o jedenÃ¡stich lÃ­niÃ¡ch kmeÅovÃ½ch buniek vytvorenÃ½ch geneticky âna mieruâ rÃ´znym pacientom. BÃ½valÃ½ spolupracovnÃ­k vÅ¡ak vrhol na Hwangove vÃ½sledky pochybnosti a vyÅ¡etrovanie potvrdilo falÅ¡ovanie â lÃ­nie kmeÅovÃ½ch buniek nevznikli klonovanÃ­m, ale (najpravdepodobnejÅ¡ie) partenogenÃ©zou a nebolo ich jedenÃ¡sÅ¥, ale iba dve (autori zÃ¡merne upravili obrÃ¡zky). NavyÅ¡e sa ukÃ¡zalo, Å¾e Hwangovo laboratÃ³rium nadobudlo Ä¾udskÃ© vajÃ­Äka neetickÃ½m spÃ´sobom a pouÅ¾ilo vÃ¤ÄÅ¡Ã­ poÄet, neÅ¾ pÃ´vodne priznalo. Malo Ã­sÅ¥ o dobrovoÄ¾nÃ© darovanie, no potvrdilo sa kupÄenie a dokonca zÃ­skavanie vajÃ­Äok od mladÅ¡Ã­ch vÃ½skumnÃ­Äok. V roku 2006 oba ÄlÃ¡nky zo Science stiahli. SamotnÃ½ Äasopis dal svoju komunikÃ¡ciu s autormi preÅ¡etriÅ¥ komisiou odbornÃ­kov, ktorÃ¡ konÅ¡tatovala, Å¾e recenznÃ© konanie prebehlo Å¡tandardne. Recenzenti zavÃ¡hali iba vtedy, keÄ sa pri pochybnostiach o pÃ´vode lÃ­nie kmeÅovÃ½ch buniek (Äi nevznikla partenogeneticky) uspokojili s vysvetlenÃ­m autorov a neÅ¾iadali dÃ¡ta. Po Å¡kandÃ¡le pristÃºpil Äasopis Science k sprÃ­sneniu redakÄnÃ½ch procedÃºr (van der Heyden et al. 2009). Pod drobnohÄ¾adom sa ocitla aj Hwangova prÃ¡ca o prvom klonovanÃ­ psa, ktorÃº uverejnil v Nature, tÃ¡ vÅ¡ak bola v poriadku. ÃspeÅ¡nÃ© klonovanie zvierat napokon umoÅ¾nilo Hwangovi po vÃ½povedi na Univerzite v Soule pokraÄovaÅ¥ v kariÃ©re a pokÃºsiÅ¥ sa rehabilitovaÅ¥ (Cyranoski 2014). Z peÅazÃ­ od skalnÃ½ch fanÃºÅ¡ikov, ktorÃ­ ho napriek medzinÃ¡rodnej hanbe neprestali podporovaÅ¥, vybudoval spoloÄnosÅ¥ Sooam, kde sa venuje klonovaniu zvierat (naprÃ­klad milovanÃ½ch psov, s ktorÃ½ch odchodom sa bohatÃ­ majitelia nechcÃº zmieriÅ¥, ale aj krÃ¡v, ktorÃ© v mlieku produkujÃº Ä¾udskÃ© proteÃ­ny, alebo geneticky pozmenenÃ½ch prasiat, ktorÃ½ch orgÃ¡ny by mohli byÅ¥ vhodnÃ© na transplantÃ¡cie pre Ä¾udÃ­). Publikovanie pochybnÃ©ho vÃ½skumu mÃ´Å¾e maÅ¥ doslova globÃ¡lny dopad, naprÃ­klad ak sa tÃ½ka politicky citlivej otÃ¡zky ako je globÃ¡lne otepÄ¾ovanie. Willie Soon a Sallie Baulinas publikovali v roku 2003 ÄlÃ¡nok v recenzovanom Äasopise Climate Research. IÅ¡lo o review â prehÄ¾ad a interpretÃ¡ciu predchÃ¡dzajÃºcich vÃ½skumov. Soon a Baulinas z nich vyvodili, Å¾e najteplejÅ¡Ã­m obdobÃ­m za poslednÃ½ch tisÃ­c rokov nebolo dvadsiate storoÄie, ale obdobie oteplenia v stredoveku. Politici a zÃ¡stupcovia energetickÃ©ho priemyslu v USA popierajÃºci globÃ¡lne zmeny klÃ­my privÃ­tali ÄlÃ¡nok s nadÅ¡enÃ­m ako zÃ¡mienku na odmietanie environmentÃ¡lnych opatrenÃ­. Medzi klimatolÃ³gmi sa strhla bÃºrka kritiky, Å¾e prezentovanÃ© zÃ¡very z pouÅ¾itÃ½ch dÃ¡t nevyplÃ½vajÃº (Mann et al. 2003). ÄlÃ¡nok nebol stiahnutÃ½, hoci vydavateÄ¾ Otto Kinne neskÃ´r priznal, Å¾e nemal byÅ¥ uverejnenÃ½ v podobe, ako vyÅ¡iel. Polovica Älenov redakÄnej rady Äasopisu Climate Research odstÃºpila (Goodess 2003). Odhalenie finanÄnÃ½ch vÃ¤zieb Soona na uhoÄ¾nÃ½ a ropnÃ½ priemysel nikoho neprekvapilo. RecenznÃ© konanie prebehlo formÃ¡lne podÄ¾a pravidiel â pod redakÄnÃ½m dohÄ¾adom Chrisa de Freitasa, editora nÃ¡zorovo spriaznenÃ©ho s autormi (ktorÃ©ho rukami preÅ¡li viacerÃ© neskÃ´r spochybÅovanÃ© ÄlÃ¡nky). De Freitas poslal rukopis Å¡tyrom hodnotiteÄ¾om a Å¾iadny z nich neodporÃºÄal odmietnutie. Tento prÃ­klad"
190,42,0.601,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V tejto Äasti chcem nadviazaÅ¥ na poslednÃ½ spomÃ­nanÃ½ prÃ­pad, v ktorom moÅ¾no pouÅ¾iÅ¥ outsourcing. Budem vychÃ¡dzaÅ¥ z konkrÃ©tneho projektu, na ktorom som mal moÅ¾nosÅ¥ pracovaÅ¥. AnalÃ½za rizÃ­k sa bude teda vzÅ¥ahovaÅ¥ na tento konkrÃ©tny prÃ­pad. AnalyzovaÅ¥ riziko vo vÅ¡eobecnej rovine by bolo zrejme veÄ¾mi zloÅ¾itÃ© a nad rÃ¡mec tejto eseje. Produkt, na ktorom nÃ¡Å¡ tÃ­m pracuje sa skladÃ¡ z viacerÃ½ch modulov, ktorÃ© priebeÅ¾ne dopÄºÅame podÄ¾a meniacich sa poÅ¾iadaviek a podÄ¾a poÅ¾iadaviek na novÃº funkcionalitu, priÄom paralelne vznikajÃº moduly novÃ©. V istej fÃ¡ze vÃ½voja sme museli konÅ¡tatovaÅ¥, Å¾e poÅ¾iadavky, ktorÃ© vznikajÃº pre existujÃºce moduly nÃ¡s vyÅ¥aÅ¾ili do takej miery, Å¾e nebolo moÅ¾nÃ© vyvinÃºÅ¥ novÃ© Å¡pecifikovanÃ© moduly, priÄom ich vÄasnÃ½ vÃ½voj bol mimoriadne dÃ´leÅ¾itÃ½. Rozhodli sme sa teda, Å¾e vÃ½voj novÃ½ch ÄastÃ­ zverÃ­me pracovnÃ­kom z firmy, s ktorou sme uÅ¾ spolupracovali na viacerÃ½ch projektoch. Jednalo sa o dÃ´leÅ¾itÃº ÄasÅ¥ softvÃ©ru, no naÅ¡Å¥astie neobsahovala nejakÃ© prÃ­liÅ¡ dÃ´vernÃ© informÃ¡cie a nebolo teda treba uvaÅ¾ovaÅ¥ nad rizikom Ãºniku informÃ¡ciÃ­. ZÃ¡kladnÃ½ problÃ©m a teda asi aj najvÃ¤ÄÅ¡ie riziko bolo, Å¾e by outsourcoNajvÃ¤ÄÅ¡ie riziko vanÃ­ pracovnÃ­ci neboli dostatoÄne kvalifikovanÃ­ a nemali patriÄnÃ© skÃºsebolo nedostatok nosti. Na inÃ½ch projektoch sme Äasto sledovali, Å¾e dodÃ¡vateÄ¾skÃ¡ firma nedodala Ä¾udÃ­, ktorÃ­ dostatoÄne spÄºÅali poÅ¾iadavky na odbornÃº kvalifikÃ¡ciu. skÃºsenostÃ­ IdentifikÃ¡cia a vyrieÅ¡enie tÃ½chto problÃ©mov predstavovalo zÃ¡kladnÃ½ pred- outsourcovanÃ½ch poklad na to, aby bol v koneÄnom dÃ´sledku vytvorenÃ½ lepÅ¡Ã­ produkt, ako pracovnÃ­kov. bez pouÅ¾itia externÃ½ch pracovnÃ­kov."
393,208,0.601,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PredprÃ­prava na strane klienta NajjednoduchÅ¡Ã­ spÃ´sob predprÃ­pravy sa zakladÃ¡ na predikcii zaloÅ¾enej na histÃ³rii prÃ­stupov klienta. Tento spÃ´sob zÃ­skal mnoÅ¾stvo pozornosti z dÃ´vodu jeho potenciÃ¡lneho vÃ½konovÃ©ho zlepÅ¡enia bez nutnosti zmeny webovÃ½ch serverov. PredprÃ­pravu na strane klienta mÃ´Å¾eme rozdeliÅ¥ na paÅ¾ravÃº a nepaÅ¾ravÃº stratÃ©giu. V prÃ­pade paÅ¾ravej stratÃ©gie mÃ´Å¾e pouÅ¾Ã­vateÄ¾ Å¡pecifikovaÅ¥ len niekoÄ¾ko zÃ¡kladnÃ½ch parametrov, ako mnoÅ¾stvo a druh zdrojov na vÃ½ber predpripravenÃ½ch objektov. Napriek tomu, Å¾e tento spÃ´sob predprÃ­pravy sa dÃ¡ implementovaÅ¥ veÄ¾mi rÃ½chlo, zvyÄajne sa nepouÅ¾Ã­va, keÄÅ¾e spÃ´sobuje mimoriadnu rÃ©Å¾iu. NepaÅ¾ravÃ¡ stratÃ©gia sa zakladÃ¡ na histÃ³rii prÃ­stupov a pokÃºÅ¡a sa o predikciu v blÃ­zkej budÃºcnosti pravdepodobne navÅ¡tÃ­venÃ½ch vnorenÃ½ch odkazov. Rozsiahle experimenty ukazujÃº, Å¾e pri priemernom zrÃ½chlenÃ­ prÃ­stupu o viac ako 50% sÃº reÅ¾ijnÃ© nÃ¡klady menej ako 150%."
66,126,0.601,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,Z pohÄ¾adu vÃ½konnosti databÃ¡zovÃ½ch systÃ©mov nÃ¡s budÃº zaujÃ­maÅ¥ dva typy pamÃ¤te - a to volatÃ­lna a nevolatÃ­lna. NevolatÃ­lna pamÃ¤Å¥ nie je zÃ¡vislÃ¡ na zdroji napÃ¡jania oproti volatÃ­lnej pamÃ¤ti a dÃ¡ta sÃº zachovanÃ© aj v prÃ­pade vÃ½padku zdroja. TÃ¡to vlastnosÅ¥ je Å¾iadÃºca aby dÃ¡ta boli zachovanÃ© v prÃ­pade vÃ½padku databÃ¡zovÃ½ch systÃ©mov (mÃ´Å¾u nastaÅ¥ rÃ´zne typy zlyhanÃ­). SamotnÃ© dÃ¡ta sÃº uloÅ¾enÃ© v blokoch rovnako aj ich adresÃ¡cia â blokovo adresovateÄ¾nÃ©. Je preto potrebnÃ© vÅ¾dy naÄÃ­tanie celÃ©ho bloku do hlavnej pamÃ¤te. Reprezentantom tohto typu pamÃ¤te je SSD (Solid-State Disk) alebo HDD (Hard Disk Drive). V prÃ­pade volatÃ­lnej pamÃ¤te sÃº dÃ¡ta stratenÃ© v prÃ­pade vÃ½padku a prÃ­stup k samotnÃ½m dÃ¡tam je moÅ¾nÃ© po Bytoch â Bytovo adresovateÄ¾nÃ©. Tento typ pamÃ¤te sa vyuÅ¾Ã­va ako hlavnÃ¡ pamÃ¤Å¥ v rÃ¡mci poÄÃ­taÄa.
130,96,0.601,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DÃ´sledky NÃ¡vrhovÃ½ vzor ZÃ¡stupca spÃ´sobuje, Å¾e sa medzi klienta a reÃ¡lny subjekt vloÅ¾Ã­ ÄalÅ¡ia vrstva. TakÃ¡to ÄalÅ¡ia vrstva sa dÃ¡ vyuÅ¾iÅ¥ mnohÃ½mi spÃ´sobmi podÄ¾a toho, o akÃ½ druh zÃ¡stupcu ide: 1. VzdialenÃ½ zÃ¡stupca mÃ´Å¾e pred klientom skrÃ½vaÅ¥ fakt, Å¾e komunikuje s predmetom v inom adresovom priestore. 2. SkorozÃ¡stupca mÃ´Å¾e vykonÃ¡vaÅ¥ rÃ´zne optimalizujÃºce Äinnosti ako naprÃ­klad vytvorenie objektu na poÅ¾iadanie. 3. Oba druhy ochrannÃ½ch zÃ¡stupcov ako aj bystrej referencie umoÅ¾ÅujÃº robiÅ¥ rÃ´zne Äinnosti sÃºvisiace s ÃºdrÅ¾bou chodu systÃ©mu."
265,248,0.601,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PreÄo pri tvorbe jednÃ©ho softvÃ©ru spravidla potrebujeme uplatniÅ¥ viacerÃ© druhy dekompozÃ­cie? Medzi dÃ´vody patrÃ­: â¢ RÃ´zne druhy dekompozÃ­cie majÃº rÃ´znu hrubosÅ¥, spravidla najskÃ´r potrebujeme uplatniÅ¥ tie âhrubÅ¡ieâ (funkcionÃ¡lnu, Å¡truktÃºrnu) aÅ¾ potom moÅ¾no pracovaÅ¥ s jemnejÅ¡Ã­mi (objektovÃ¡). â¢ Aby sme softvÃ©r vytvorili sprÃ¡vne, mali by sme maÅ¥ âporiadokâ v kaÅ¾dom moÅ¾nom uhle pohÄ¾adu naÅ. Å¤aÅ¾ko si naprÃ­klad predstaviÅ¥, Å¾e by sme softvÃ©r navrhli Äisto skrz funkcionÃ¡lnu dekompozÃ­ciu. Pravdepodobne by sme nevytvorili efektÃ­vne pouÅ¾Ã­vateÄ¾skÃ© rozhranie ani sprÃ¡vny model Ãºdajov. â¢ Uplatnenie rÃ´znych druhov dekompozÃ­cie pÃ´sobÃ­ aj ako âskÃºÅ¡ka sprÃ¡vnostiâ nÃ¡vrhu. Ak naprÃ­klad uvaÅ¾ujeme dekompozÃ­ciu podÄ¾a pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania, pri nÃ¡vrhu jednotlivÃ½ch ÄastÃ­ by sme postupne mali"
240,128,0.601,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"sprÃ¡vanie zÃ¡visÃ­ od spÃ´sobu implementÃ¡cie bitovej reprezentÃ¡cie premennÃ½ch v kompilÃ¡tore. V praxi mÃ´Å¾e (ale nemusÃ­!) vykonÃ¡vanie pokraÄovaÅ¥ bez vÃ¡Å¾nejÅ¡ej ujmy, ale z formÃ¡lneho hÄ¾adiska sa na vÃ½sledky programu pri preteÄenÃ­/podteÄenÃ­ znamienkovÃ©ho (signed) typu uÅ¾ nedÃ¡ spoÄ¾ahnÃºÅ¥. Ãloha 2-9 (rieÅ¡enie) Po naÄÃ­tanÃ­ ÄÃ­sla v riadku 6 sa v programe vykonÃ¡va cyklus do-while (riadky 7-10). Potrebujeme zodpovedaÅ¥ na dve otÃ¡zky: 1. KoÄ¾kokrÃ¡t sa bude cyklus opakovaÅ¥? Podmienka (riadok 10) obsahuje operÃ¡tor /=, ktorÃ½ v tomto prÃ­pade zodpovedÃ¡ celoÄÃ­selnÃ©mu deleniu 10 a priradeniu vÃ½sledku do premennej n. V programe premennÃº n (okrem naÄÃ­tania v riadku 6) na inom mieste neupravujeme. Podmienka n /= 10 je vyhodnotenÃ¡ ako splnenÃ¡ ak hodnota premennej n zostane po delenÃ­ nenulovÃ¡. UvaÅ¾ujme teraz vstupnÃ© ÄÃ­slo n = 12345, vÃ½sledok n /= 10 je 1234, Äo zodpovedÃ¡ odstrÃ¡neniu poslednej cifry z ÄÃ­sla. Cyklus sa opakuje pokÃ½m podmienka je splnenÃ¡, teda pokÃ½m hodnota premennej n je nenulovÃ¡. PoÄet opakovanÃ­ cyklu preto zodpovedÃ¡ poÄtu cifier ÄÃ­sla n. 2. K Äomu slÃºÅ¾i vÃ½poÄet v tele cyklu? UvaÅ¾ujme ÄÃ­slo n = 12345, priradenie v riadku 9, preÄÃ­ta poslednÃº cifru n a upravÃ­ hodnotu premennej i. V prvej iterÃ¡cii tela cyklu nastavÃ­me poslednÃº cifru vstupnÃ©ho ÄÃ­sla n ako prvÃº cifru ÄÃ­sla i. V kaÅ¾dej ÄalÅ¡ej iterÃ¡cii priradenie i = 10*i posunie aktuÃ¡lnu hodnotu v premennej i o jeden desiatkovÃ½ rÃ¡d doÄ¾ava, teda poradie cifier zÄ¾ava doprava zostane v premennej i zachovanÃ©: napr. pre i = 54 je 10*i = 540. PripoÄÃ­tanÃ­m poslednej cifry (n%10) k tejto hodnote potom prenesieme poslednÃº cifru z premennej n ako novÃº poslednÃº cifru premennej i. Telo cyklu teda postupne od najniÅ¾Å¡Ã­ch rÃ¡dov presÃºva cifry zo vstupnÃ©ho ÄÃ­sla n do premennej i, ÄÃ­m ich otoÄÃ­: pre vstupnÃ© ÄÃ­slo 12345 je vÃ½stup programu 54321."
265,28,0.601,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Ako ÄÃ­taÅ¥ tÃºto knihu ÄÃ­taÅ¥ tÃºto knihu mÃ´Å¾ete akÃ½mkoÄ¾vek spÃ´sobom, my vÅ¡ak predpokladÃ¡me dva typickÃ© scenÃ¡re: 1. ÄÃ­tanie ako forma Å¡tÃºdia a teda aj prÃ­prava na inÃ© Å¡tudijnÃ© aktivity (v rÃ¡mci predmetov o softvÃ©rovom inÅ¾inierstve), keÄ sa predpokladajÃº len malÃ© predchÃ¡dzajÃºce znalosti o predmetnej Å¡tudijnej lÃ¡tke. 2. ÄÃ­tanie ako forma samoskÃºÅ¡ania (po absolvovanÃ­ inÃ½ch Å¡tudijnÃ½ch aktivÃ­t zameranÃ½ch na rovnakÃº lÃ¡tku). Znenie otÃ¡zok, ich poradie a najmÃ¤ spÃ´sob akÃ½m sÃº formulovanÃ© odpovede sledujÃº predovÅ¡etkÃ½m prvÃ½ scenÃ¡r. DruhÃ½ scenÃ¡r podporuje najmÃ¤ naÅ¡a mobilnÃ¡ verzia systÃ©mu ALEF, avÅ¡ak vo verzii odpovedÃ­ otÃ¡zok na mobile absentujÃº komentÃ¡re uÄiteÄ¾a. Za to vÅ¡ak vÅ¡etci zainteresovanÃ­ majÃº moÅ¾nosÅ¥ diskutovaÅ¥ k prÃ­sluÅ¡nÃ½m otÃ¡zkam, Äo Å¡tudenti aj primerane vyuÅ¾Ã­vajÃº. Nie je prekvapenÃ­m, Å¾e tu platÃ­ mocninovÃ½ zÃ¡kon rozloÅ¾enia aktivity Å¡tudentov, t. j. pribliÅ¾ne 80 % komunikÃ¡cie k otÃ¡zkam vytvÃ¡ra pribliÅ¾ne 20 % Å¡tudentov. Toto vÅ¡ak umoÅ¾Åuje aj pasÃ­vnejÅ¡Ã­m Å¡tudentom aspoÅ sledovaÅ¥ aktivitu, umoÅ¾Åuje to prednÃ¡Å¡ateÄ¾ovi na prednÃ¡Å¡ke komentovaÅ¥ prÃ¡ve tie otÃ¡zky, kde z komentÃ¡rov vidieÅ¥ nedorozumenia a nepochopenie. A takÃ½ch otÃ¡zok bolo kaÅ¾dÃ½ tÃ½Å¾deÅ poÄas semestra pomerne dosÅ¥. SnaÅ¾ili sme sa, aby znenia odpovedÃ­ v knihe neobsahovali len minimalisticky opÃ­sanÃ© rieÅ¡enia otÃ¡zok, ale aby ich primerane komentovali a naznaÄili, ako by sa Ãºvahy k nim vedÃºce mohli (mali) v hlavÃ¡ch softvÃ©rovÃ½ch profesionÃ¡lov vy-"
66,65,0.601,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"V prÃ­pade, Å¾e pouÅ¾Ã­vateÄ¾ chce spojiÅ¥ viacero tabuliek nie len dve, tak za podmienkou spojenia mÃ´Å¾e nasledovaÅ¥ ÄalÅ¡ia operÃ¡cia JOIN. Pri prÃ¡ci so spÃ¡janÃ­m viac ako dvoch tabuliek treba pristupovaÅ¥ k spÃ¡janiu tak, Å¾e najprv sÃº spojenÃ© prvÃ© dve tabuÄ¾ky do jednej vÃ¤ÄÅ¡ej a nÃ¡sledne tÃ¡to spojenÃ¡ tabuÄ¾ka je spojenÃ¡ s ÄalÅ¡ou tabuÄ¾kou v poradÃ­ do novej vÃ¤ÄÅ¡ej tabuÄ¾ky. Toto spojenie je len doÄasnÃ© a je dostupnÃ© iba poÄas vykonÃ¡vania danÃ©ho dopytu. Z pohÄ¾adu SQL nie je limitÃ¡cia na poÄet tabuliek, ktorÃ© je moÅ¾nÃ© spojiÅ¥ v rÃ¡mci dopytu. ChÃ¡panie logiky spÃ¡jania viacerÃ½ch tabuliek je dÃ´leÅ¾itÃ©, keÄÅ¾e existuje viacero typov operÃ¡cii JOIN a ich pouÅ¾itie vie ovplyvniÅ¥ vÃ½sledok spojenia rovnako aj definovanÃ© poradie spÃ¡jania v rÃ¡mci SQL dopytu. PoznÃ¡me nasledujÃºce typy JOIN operÃ¡ciÃ­:"
43,409,0.6,Objektovo orientovanÃ© programovanie v C++,"Od kaÅ¾dej triedy mÃ´Å¾eme jednoducho odvodiÅ¥ inÃº triedu. To sa tÃ½ka aj tried, ktorÃ© sÃº samy odvodenÃ© od inej triedy. ViacÃºrovÅovÃ¡ dediÄnosÅ¥ sa nevyznaÄuje nijakou Å¡peciÃ¡lnou syntaxou. Treba tu spomenÃºÅ¥ len fakt, Å¾e predtÃ½m, ako sa zaÄnÃº vykonÃ¡vaÅ¥ prÃ­kazy konÅ¡truktora odvodenej triedy, sa vykonajÃº prÃ­kazy konÅ¡truktorov vÅ¡etkÃ½ch jej predchodcov a to postupne zaÄÃ­najÃºc konÅ¡truktorom triedy, ktorÃ¡ stojÃ­ v hierarchii najvyÅ¡Å¡ie. PrÃ­kazy deÅ¡truktorov sa vykonÃ¡vajÃº v presne opaÄnom poradÃ­. Za prÃ­kazmi deÅ¡truktora odvodenej triedy budÃº nasledovaÅ¥ prÃ­kazy deÅ¡truktora triedy, ktorÃ¡ stojÃ­ v hierarchii hneÄ nad Åou a takto sa postupuje Äalej aÅ¾ po deÅ¡truktor triedy, ktorÃ¡ sa nachÃ¡dza v hierarchii najvyÅ¡Å¡ie. PrÃ­klad. V poli obchod mÃ¡me uloÅ¾enÃ© smernÃ­ky, ktorÃ© mÃ´Å¾u ukazovaÅ¥ na objekty troch typov â tovar, potravina a zelenina. Trieda tovar obsahuje Å¡tyri Ãºdaje â nazov, kod, cena (cena za jednotkovÃ© mnoÅ¾stvo) a jednotka (jednotka mnoÅ¾stva tovaru, napr. kg, ks atÄ.). KonÅ¡truktor triedy tieto Ãºdaje nastavÃ­. Trieda obsahuje aj metÃ³du Kod zverejÅujÃºcu Ãºdaj kod. Od triedy tovar je odvodenÃ¡ trieda potravina, ktorÃ¡ mÃ¡ navyÅ¡e jeden Ãºdaj â datum spotreby. Od tejto triedy je odvodenÃ¡ trieda zelenina, s ÄalÅ¡Ã­m Ãºdajom navyÅ¡e â trieda akosti. VÅ¡etky tri triedy majÃº metÃ³du Udaje, ktorÃ¡ vypÃ­Å¡e vÅ¡etky Ãºdaje triedy. Naprogramujme program tak, aby na zÃ¡klade zadanÃ©ho kÃ³du vyhÄ¾adal tovar a zobrazil vÅ¡etky jeho Ãºdaje."
265,12,0.6,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"2.2.14 Äo je to architektonickÃ½ Å¡tÃ½l? . . . . . . . . . . . . . . . . . . . . . 99 2.2.15 AkÃ½ je rozdiel medzi architektonickÃ½m Å¡tÃ½lom a nÃ¡vrhovÃ½m vzorom? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 2.2.16 AkÃ© architektonickÃ© Å¡tÃ½ly poznÃ¡me? StruÄne ich opÃ­Å¡te. . . . . . 100 2.2.17 UveÄte prÃ­klad alebo typ aplikÃ¡cie, pri ktorej NIE JE vhodnÃ© pouÅ¾Ã­vaÅ¥ architektonickÃ½ Å¡tÃ½l MVC (neuvaÅ¾ujte triviÃ¡lne prÃ­klady a la kalkulaÄka, kde to nemÃ¡ zmysel z dÃ´vodu jednoduchosti). . . . . . . 101 2.2.18 AkÃº funkciu v MVC mÃ¡ model? Äo ho tvorÃ­? . . . . . . . . . . . 102 2.2.19 AkÃº funkciu v MVC mÃ¡ view? . . . . . . . . . . . . . . . . . . . . 102 2.2.20 AkÃº funkciu v MVC mÃ¡ controller? . . . . . . . . . . . . . . . . . 102 2.2.21 Vysvetlite pojmy tuÄnÃ½ a tenkÃ½ klient. . . . . . . . . . . . . . . . . 103 2.2.22 MÃ¡ pri webovÃ½ch aplikÃ¡ciÃ¡ch zmysel hovoriÅ¥ o tuÄnom klientovi? 103 2.2.23 AkÃ© sÃº vÃ½hody a nevÃ½hody pouÅ¾itia tuÄnÃ©ho a tenkÃ©ho klienta? Ako je to Å¡pecificky v prÃ­pade webovÃ½ch aplikÃ¡ciÃ­? . . . . . . . . . . 103 2.2.24 AkÃ© vÃ½hody majÃº webovÃ© aplikÃ¡cie oproti desktopovÃ½m aplikÃ¡ciÃ¡m? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 2.2.25 AkÃ½ je rozdiel medzi softvÃ©rovou kniÅ¾nicou (library) a softvÃ©rovÃ½m rÃ¡mcom (framework)? . . . . . . . . . . . . . . . . . . . . . . . . 105 2.2.26 PreÄo triedy vo vytvÃ¡ranom systÃ©me viaÅ¾eme na prÃ­pady pouÅ¾itia? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106 2.2.27 AkÃ© sÃº charakteristiky dobrÃ©ho nÃ¡vrhu softvÃ©ru (na mysli mÃ¡me vÃ½stupy, nie samotnÃº etapu)? . . . . . . . . . . . . . . . . . . . . . . . 106 ImplementÃ¡cia 2.3.1 AkÃ© Äinnosti vykonÃ¡vame v etape implementÃ¡cie softvÃ©ru? . . . . 109 2.3.2 Äo je vÃ½stupom etapy implementÃ¡cie softvÃ©ru? . . . . . . . . . . . 109 2.3.3 PreÄo na vytvorenie softvÃ©rovÃ©ho systÃ©mu potrebujeme spravidla viac softvÃ©rovÃ½ch (programovacÃ­ch) jazykov? . . . . . . . . . . . . . . 109 2.3.4 Äo by sme pri vÃ½bere programovacÃ­ch jazykov pre projekt mali zvaÅ¾ovaÅ¥? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 2.3.5 Äo sÃº to nÃ¡stroje na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov (angl. version control, ale aj revision control, source control)? . . . . . . . . . . . . . . . 112 2.3.6 PreÄo uchovÃ¡vame zdrojovÃ½ kÃ³d v nÃ¡strojoch na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112 2.3.7 AkÃ© dva druhy nÃ¡strojov na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov poznÃ¡me z hÄ¾adiska umiestnenia ÃºloÅ¾iska? . . . . . . . . . . . . . . . . 113 2.3.8 AkÃ© spÃ´soby na zabezpeÄenie toho, aby zmeny jednej Äasti zdrojovÃ©ho kÃ³du dvoma programÃ¡tormi neboli v konflikte, poznÃ¡me v nÃ¡strojoch na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov? . . . . . . . . . . . . . . 114 2.3.9 Äo je to âcommitâ (v sÃºvislosti s nÃ¡strojmi na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114"
190,318,0.6,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"CieÄ¾om eseje je preskÃºmaÅ¥ rizikÃ¡, ktorÃ© Barry Boehm vo svojej prÃ¡ci zoskupil do zoznamu TOP-10 rizÃ­k z pohÄ¾adu zaÄÃ­najÃºceho manaÅ¾Ã©ra softvÃ©rovÃ½ch projektov. Esej sa zaoberÃ¡ aplikÃ¡ciou tohto zoznamu rizÃ­k na projekt menÅ¡ieho rozsahu, ktorÃ½ je svojou charakteristikou pomerne dosÅ¥ odliÅ¡nÃ½ od vÃ¤ÄÅ¡iny beÅ¾nÃ½ch projektov. ÄitateÄ¾ovi priblÃ­Å¾ime aj najvÃ½znamnejÅ¡ie charakteristickÃ© Ärty takÃ©hoto menÅ¡ieho projektu. Poskytneme zÃ¡kladnÃ½ pohÄ¾ad na manaÅ¾ment rizÃ­k v takomto projekte a jeho jednotlivÃ© fÃ¡zy. Spomenieme aj najvÃ½znamnejÅ¡ie Å¡tÃºdie, ktorÃ© podporili vÃ½voj tejto vÃ½znamnej oblasti manaÅ¾mentu softvÃ©rovÃ½ch projektov."
343,14,0.6,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"byÅ¥ menÅ¡ia ako hodnota inputov, pretoÅ¾e tento rozdiel je poplatok (angl. fee) za transakciu. Outputy jednej transakcie, ktorÃ© som eÅ¡te nevyuÅ¾il a mÃ¡m ich âv peÅaÅ¾enkeâ sa nazÃ½vajÃº unspent transactions output (UTXO). AkonÃ¡hle takÃ½to output chcem minÃºÅ¥, tak sa z neho stÃ¡va input novej transakcie, ktorÃ¡ keÄ prejde, tak uÅ¾ to utxo nemÃ¡m. V prÃ­pade, Å¾e chceme vytvoriÅ¥ novÃº transakciu, musÃ­me si poskladaÅ¥ tie outputy tak, aby sme poslali tie prostriedky niekde Äalej. KeÄ prÃ­de transakcia, ktorÃº niekto vytvoril, teda naprÃ­klad takÃ¡, v ktorej chcem minÃºÅ¥ jeden z outputov utxo, tak ju musÃ­ validovaÅ¥ miner. Ten mÃ¡ za Ãºlohu zvalidovaÅ¥ tÃº transakciu, Äi je sprÃ¡vna. Miner skontroluje, Äi sedia podpisy. PouÅ¾ije ten istÃ½ Bitcoin script, ktorÃ½ tam je, aby zvalidoval tÃº samotnÃº transakciu. PouÅ¾ije public key odosielateÄ¾ov tÃ½ch outputov na kontrolu. Skontroluje, Å¾e Äi TXID a index sÃº v aktuÃ¡lnom UTXO poole, a teda eÅ¡te neminutÃ©. Takisto skontroluje, Å¾e Äi inputy sÃº vÃ¤ÄÅ¡ie alebo rovnÃ© ako outputy. KeÄ tÃ¡to transakcia je uÅ¾ vloÅ¾enÃ¡ do blockchainu a je prezdielanÃ¡ medzi ÄalÅ¡Ã­ch validÃ¡torov alebo ÄalÅ¡Ã­ch Å¥aÅ¾iarov, tak ten miner odstrÃ¡ni ten utxo z toho UTXO poolu. V bloku mÃ¡m vytvorenÃº transakciu. V rÃ¡mci jednej transakcie a jednÃ©ho inputu vyzerÃ¡ ten beÅ¾nÃ½ skript ako na obrÃ¡zku 3. MÃ¡m podpis, ktorÃ½ viem overiÅ¥ cez verejnÃ½ kÄ¾ÃºÄ, Äalej mÃ¡m tam hash funkciu, v tomto prÃ­pade HASH160, potom zadefinovanÃº operÃ¡ciu overenia (OP_EQUALVERIFY) a konroly podpisu (CHECKSIG). Toto je beÅ¾nÃ½ skript na to, aby ste spravili nejakÃº transakciu."
240,216,0.6,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V kaÅ¾dom prÃ­pade, Äi je vÃ½sledok (minimum) a, b alebo c vykonÃ¡me prÃ¡ve 2 porovnania. Menej ako pouÅ¾itÃ­m 2 porovnanÃ­ to urÄite nepÃ´jde, pretoÅ¾e s jednÃ½m porovnanÃ­m nedokÃ¡Å¾eme rozlÃ­Å¡iÅ¥ vzÃ¡jomnÃº polohu troch ÄÃ­sel. Na poÄet vykonanÃ½ch inÅ¡trukciÃ­ je to najefektÃ­vnejÅ¡Ã­ postup. Analyzujme eÅ¡te postup, ktorÃ½ vyuÅ¾Ã­va urÄenie minima z dvoch ÄÃ­sel (min2):"
184,150,0.6,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Tvorba dokumentÃ¡cie je pri tvorbe architektÃºry softvÃ©ru nevyhnutnÃ¡. DÃ´leÅ¾itÃ© vÅ¡ak je investovaÅ¥ do tejto Äinnosti primeranÃ© ÄasovÃ© a finanÄnÃ© zdroje. Je potrebnÃ© vytvÃ¡raÅ¥ len uÅ¾itoÄnÃº dokumentÃ¡ciu a vyhÃ½baÅ¥ sa tvorbe prÃ­liÅ¡ povrchnÃ½ch, prÃ­padne prÃ­liÅ¡ podrobnÃ½ch dokumentov. ProblÃ©m nedostatoÄnej dokumentÃ¡cie sa Äasto vyskytuje pri voÄ¾ne dostupnÃ½ch (opensource) produktoch. MnoÅ¾stvo dobrÃ½ch rÃ¡mcov pre tvorbu aplikÃ¡ciÃ­ nie je pouÅ¾Ã­vanÃ½ch prÃ¡ve preto, Å¾e nie sÃº dostatoÄne zdokumentovanÃ© a je veÄ¾mi nÃ¡roÄnÃ© zistiÅ¥ ako ich pouÅ¾iÅ¥, priÄom s primeranou dokumentÃ¡ciou by tieto rÃ¡mce mohli byÅ¥ veÄ¾mi uÅ¾itoÄnÃ©. Pri dokumentovanÃ­ je vhodnÃ© pouÅ¾Ã­vaÅ¥ znÃ¡mu notÃ¡ciu s dostatoÄnou vyjadrovacou silou. Medzi v sÃºÄasnosti najpouÅ¾Ã­vanejÅ¡ie notÃ¡cie patrÃ­ modelovacÃ­ jazyk UML, ktorÃ½m je softvÃ©rovÃ½ architekt schopnÃ½ opÃ­saÅ¥ tak Å¡truktÃºru ako aj sprÃ¡vanie sa systÃ©mu. UML poskytuje mnoÅ¾stvo pohÄ¾adov, ktorÃ½mi je moÅ¾nÃ© zachytiÅ¥ rÃ´zne aspekty systÃ©mu. Jeho vÃ½hodou je podpora v mnohÃ½ch nÃ¡strojoch, pomocou ktorÃ½ch mÃ´Å¾eme efektÃ­vne vytvÃ¡raÅ¥ rÃ´zne diagramy alebo pomocou modelom riadenÃ©ho vÃ½voja softvÃ©ru priamo generovaÅ¥ Äasti zdrojovÃ©ho kÃ³du z vytvorenÃ½ch modelov."
184,384,0.6,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Tlmiaci faktor d je vÃ¤ÄÅ¡inou nastavenÃ½ na hodnotu 0,85. PageRank predstavuje pravdepodobnÃ© rozdelenie cez vÅ¡etky poÄÃ­tanÃ© strÃ¡nky a sÃºÄet PageRank pre vÅ¡etky strÃ¡nky je rovnÃ½ 1. Fungovanie algoritmu sa dÃ¡ pochopiÅ¥ ako model sprÃ¡vanie pouÅ¾Ã­vateÄ¾a. Tento nÃ¡hodnÃ½ pouÅ¾Ã­vateÄ¾ dostane na zaÄiatku nÃ¡hodnÃº strÃ¡nku, nÃ¡slednÃ© klikÃ¡ na odkazy, ÄÃ­m sa presÃºva na ÄalÅ¡ie strÃ¡nky, nikdy nejde spÃ¤Å¥. KeÄ ho toto klikanie prestane baviÅ¥, vyberie si ÄalÅ¡iu nÃ¡hodnÃº strÃ¡nku a znovu zaÄne klikaÅ¥. Tlmiaci faktor d predstavuje pravdepodobnosÅ¥, s ktorou prestane nÃ¡hodnÃ½ pouÅ¾Ã­vateÄ¾ klikaÅ¥ na odkazy a vyberie si nÃ¡hodnÃº strÃ¡nku. PageRank PR(A) pre konkrÃ©tnu strÃ¡nku A je pravdepodobnosÅ¥, s akou sa nÃ¡hodnÃ½ pouÅ¾Ã­vateÄ¾ dostane na strÃ¡nku A. PageRank je ekvivalentnÃ½ vÃ½poÄtu vlastnÃ©ho vektora prechodovej matice Z."
236,34,0.6,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Pri prÃ¡ci s LATEXom sa Äoskoro ocitnete v bludisku sÃºborov s rÃ´znymi koncovkami (extensions) a pravdepodobne bez pochopenia ich pÃ´vodu. DoleuvednÃ½ zoznam vÃ¡m napovie nieÄo o rÃ´znych typoch sÃºborov, na ktorÃ© mÃ´Å¾ete natrafiÅ¥ pri prÃ¡ci s TEXom. ProsÃ­m, vezmite vÅ¡ak na vedomie, Å¾e tÃ¡to tabuÄ¾ka si nenÃ¡rokuje staÅ¥ sa ÃºplnÃ½m zoznamom koncoviek a ak nÃ¡jdete takÃº, o ktorej ste presvedÄenÃ­, Å¾e je dÃ´leÅ¾itÃ¡, napÃ­Å¡te nÃ¡m pÃ¡r riadkov. .tex VstupnÃ½ (zdrojovÃ½) sÃºbor LATEXu alebo TEXu. MÃ´Å¾e ho kompilovaÅ¥ latex, respektÃ­ve tex."
265,166,0.6,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Spravidla najviac stojÃ­ ÃºdrÅ¾ba softvÃ©ru. Äasto na Åu pripadne viac ako polovica prostriedkov. DÃ´vodom, preÄo je ÃºdrÅ¾ba takÃ¡ drahÃ¡, je nedokonalosÅ¥ vÃ½voja, v ktorom vznikajÃº chyby, na ktorÃ© prÃ­deme aÅ¾ po nasadenÃ­ softvÃ©ru. V Äase, kedy chyby/nedostatky vznikajÃº, pritom nemusÃ­ Ã­sÅ¥ ani o zÃ¡sadnÃ© veci, no ich opravy sÃº vÅ¡ak v neskorÅ¡Ã­ch fÃ¡zach projektu oveÄ¾a nÃ¡roÄnejÅ¡ie (a drahÅ¡ie)."
130,342,0.6,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"7 MULTIAGENTOVÃ SYSTÃMY Trend postupnÃ©ho distribuovania vÃ½poÄtov neobiÅ¡iel ani umelÃº inteligenciu. MyÅ¡lienka jednÃ©ho superinteligentnÃ©ho centrÃ¡lneho systÃ©mu, ktorÃ½ samostatne rieÅ¡i Ãºlohy, zÃ­skala konkurenta uÅ¾ viac neÅ¾ pred tretinou storoÄia. PribliÅ¾ne v tejto dobe sa zaÄali objavovaÅ¥ systÃ©my zaloÅ¾enÃ© na spoluprÃ¡ci viacerÃ½ch expertov na rieÅ¡enÃ­ spoloÄnej Ãºlohy. Dodnes pribudlo mnoho ÄalÅ¡Ã­ch spÃ´sobov ako v umelej inteligencii vyuÅ¾iÅ¥ princÃ­p distribuovanÃ½ch vÃ½poÄtov a vykonÃ¡vania, a to pre dosiahnutie kvantitatÃ­vnych, ale aj kvalitatÃ­vnych zlepÅ¡enÃ­. DistribuovanÃ© vÃ½poÄty a vykonÃ¡vanie v multiagentovÃ½ch systÃ©moch vÅ¡ak so sebou prinÃ¡Å¡ajÃº aj rad problÃ©mov. Je potrebnÃ© urÄiÅ¥, ako problÃ©m rozdeliÅ¥ na jednoduchÅ¡ie Äasti. Je potrebnÃ© zabezpeÄiÅ¥ prenesenie jednotlivÃ½ch podproblÃ©mov na miesto ich rieÅ¡enia a nakoniec zozbieraÅ¥ a spojiÅ¥ ÄiastkovÃ© vÃ½sledky. Je tieÅ¾ potrebnÃ© koordinovaÅ¥ ÄinnosÅ¥ jednotlivÃ½ch agentov tam kde sÃº ich Äinnosti od seba vzÃ¡jomne zÃ¡vislÃ© a synchronizovaÅ¥ prÃ­stup k spoloÄnÃ½m zdrojom. Napriek tomu, Å¾e multiagentovÃ© systÃ©my ako vednÃ¡ disciplÃ­na sÃº starÅ¡ie ako Å¡tvrÅ¥ storoÄia, definÃ­cie jednotlivÃ½ch konceptov v rÃ´znych zdrojoch nie sÃº jednotnÃ© a Äasto ani jednoznaÄnÃ©. Vymedzenie jednotlivÃ½ch konceptov uvedenÃ½ch v tejto kapitole vychÃ¡dza predovÅ¡etkÃ½m z monografiÃ­ (Ferber, 1999; NÃ¡vrat, 2002; MaÅÃ­k, 1993; MaÅÃ­k, 2003a; MaÅÃ­k, 2003b), ale aj z ÄalÅ¡Ã­ch zdrojov a v neposlednej miere z diskusiÃ­ s kolegami ktorÃ½m by som chcel touto cestou poÄakovaÅ¥."
190,280,0.6,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ako som uÅ¾ spomenul, zoznam vecÃ­, ktorÃ© sa mÃ´Å¾u prihodiÅ¥ je nekoneÄne dlhÃ½. NiektorÃ© sa vÅ¡ak objavujÃº ÄastejÅ¡ie. Capers Jones identifikoval pÃ¤Å¥ najvÃ½raznejÅ¡Ã­ch hrozieb, ktorÃ© ohrozujÃº softvÃ©rovÃ© projekty v rÃ´znych sektoroch pouÅ¾itia [3]. ZnÃ¡zorÅuje ich tabuÄ¾ka 1. Karl Wiegers v [5] uvÃ¡dza ÄalÅ¡ie moÅ¾nÃ© problÃ©my, z ktorÃ½ch niektorÃ© mÃ´Å¾eme ovplyvniÅ¥ iba nepriamo. Tieto rizikÃ¡ vznikajÃº kvÃ´li vonkajÅ¡Ã­m faktorom alebo tretÃ­m stranÃ¡m. MÃ´Å¾e sa jednaÅ¥ naprÃ­klad o vzÅ¥ahy naÅ¡ich subdodÃ¡vateÄ¾skÃ½ch firiem, poloÅ¾ky alebo informÃ¡cie, ktorÃ© mÃ¡ na starosti zÃ¡kaznÃ­k, vzÃ¡jomnÃ© zÃ¡vislosti pracovnÃ½ch skupÃ­n alebo dostupnosÅ¥ dostatoÄne skÃºsenÃ½ch Ä¾udÃ­."
130,387,0.599,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Adhokracia Adhokracia znamenÃ¡ rozdeÄ¾ovanie Ãºloh metÃ³dou ad-hoc. Å truktÃºra a rozdelenie Ãºloh sÃº vytvÃ¡ranÃ© znovu pre kaÅ¾dÃ½ problÃ©m, ktorÃ½ treba rieÅ¡iÅ¥. TypickÃ© pouÅ¾itie adhokracie je pri nedostatoÄne Å¡truktÃºrovanÃ½ch problÃ©moch alebo problÃ©moch, pri ktorÃ½ch nevieme dopredu urÄiÅ¥ spÃ´sob ich rieÅ¡enia. Äasto sa pri prideÄ¾ovanÃ­ Ãºloh vyuÅ¾Ã­va mechanizmus trhu (naprÃ­klad âcontract netâ (Smith, 1980)). Pri rieÅ¡enÃ­ konkrÃ©tneho problÃ©mu sa vytvorÃ­ ad-hoc Å¡truktÃºra rozdelenia Ãºloh. Po viacnÃ¡sobnom rieÅ¡enÃ­ podobnÃ©ho problÃ©mu podobnÃ½m spÃ´sobom je moÅ¾nÃ© Å¡truktÃºru spoluprÃ¡ce vytvorenÃº spÃ´sobom ad-hoc ustÃ¡liÅ¥, teda preniesÅ¥ do Å¡tandardov alebo rozdelenia zodpovednostÃ­."
59,703,0.599,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"VÃ½skumy Gigerenzera a jeho spolupracovnÃ­kov moÅ¾no zosumarizovaÅ¥ [9,10] prostrednÃ­ctvom hypotÃ©zy, Å¾e Ä¾udskÃ½ mozog bol formovanÃ½ v priebehu evolÃºcie tak, Å¾e nie je veÄ¾mi efektÃ­vne vÃ½poÄtovÃ© zariadenie, ale je schopnÃ½ efektÃ­vne rieÅ¡iÅ¥ neustÃ¡le sa vyskytujÃºce adaptÃ­vne a rÃ½chlo sa meniace dynamickÃ© problÃ©my, od rieÅ¡enia ktorÃ½ch Äasto zÃ¡visÃ­ existencia danÃ©ho jedinca, priÄom vyuÅ¾Ã­va na rieÅ¡enie tÃ½chto problÃ©mov jednoduchÃ© a rÃ½chle heuristiky, ktorÃ© sÃº nenÃ¡roÄnÃ© na Äas, poznatky a vÃ½poÄty. MoÅ¾nosti sÃºÄasnej umelej inteligencie a kognitÃ­vnej vedy modelovaÅ¥ ohraniÄenÃº racionalitu IntegrÃ¡lna sÃºÄasÅ¥ modernej umelej inteligencie je poÄÃ­taÄovÃ¡ inteligencia (Äasto nazÃ½vanÃ¡ aj ako softcomputing), ktorÃ¡ obsahuje znÃ¡mu triÃ¡du modernÃ½ch subsymbolickÃ½ch prÃ­stupov: neurÃ³novÃ© siete [14], evoluÄnÃ© algoritmy [15] a fuzzy logiku [28]. Je potrebnÃ© poznamenaÅ¥, Å¾e tieto tri subsymbolickÃ© oblasti umelej inteligencie sÃº zaloÅ¾enÃ© na princÃ­poch, ktorÃ© sÃº veÄ¾mi blÃ­zke k teÃ³rii ohraniÄenej racionality. NeurÃ³novÃ© siete sÃº vhodnÃ½ prostriedok na konÅ¡trukciu kognitÃ­vneho orgÃ¡nu agentov, ktorÃ½ je schopnÃ½ uÄenia v priebehu vykonÃ¡vania svojich aktivÃ­t v danom prostredÃ­ a ktorÃ½ uÅ¾ svojou konÅ¡trukciou mÃ¡ ohraniÄenÃ© kognitÃ­vne moÅ¾nosti a preto je vhodnÃ½ prostriedok pre Å¡tÃºdium ohraniÄenej racionality. Podobne, evoluÄnÃ© algoritmy mÃ´Å¾u slÃºÅ¾iÅ¥ na konÅ¡trukciu stratÃ©giÃ­ v multiagentovÃ½ch systÃ©moch. KlasickÃ½ prÃ­klad tohto prÃ­stupu sÃº Axelrodove Å¡tÃºdie [2,3] kooperÃ¡cie zaloÅ¾enÃ© na vÃ¤zenskej dileme, ktorÃ© vyÃºstili v zistenÃ­ neoÄakÃ¡vanej tit-for-tat stratÃ©gie. Fuzzy logika je schopnÃ¡ spracovaÅ¥ neÃºplnÃº informÃ¡ciu (napr. verbÃ¡lne formulovanÃº). Pomocou jej metÃ³d sme schopnÃ­ zostrojiÅ¥ rÃ´zne typy riadiacich prvkov (kontrolÃ©rov) len pomocou vÃ¡gne formulovanÃ½ch pravidiel (napr. âzabrzdi, ak sa pribliÅ¾ujeÅ¡ k autu, ktorÃ© je pred tebouâ). Tieto âkontrolÃ©ryâ mÃ´Å¾eme chÃ¡paÅ¥ ako jednoduchÃ© heuristiky na riadenie zloÅ¾itÃ½ch dynamickÃ½ch systÃ©mov, ktorÃ½ch teÃ³riu v mnohÃ½ch prÃ­padoch nepoznÃ¡me (napr. riadenie zloÅ¾itÃ©ho zariadenia, kde vzÅ¥ah medzi vstupnÃ½mi a vÃ½stupnÃ½mi parametrami poznÃ¡me len ako âÄiernu skrinkuâ). PoÄÃ­taÄovÃ¡ inteligencia je v sÃºÄasnosti veÄ¾mi populÃ¡rna v kruhoch âautomatizÃ©rovâ, kde poskytuje skoro univerzÃ¡lny prostriedok na riadenie zloÅ¾itÃ½ch systÃ©mov, priÄom redukuje nutnosÅ¥ vyuÅ¾Ã­vaÅ¥ klasickÃ© matematickÃ© prÃ­stupy teÃ³rie riadenia na minimum."
190,9,0.599,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V knihe, ktorÃº prÃ¡ve drÅ¾Ã­te v rukÃ¡ch, sa snaÅ¾Ã­me priblÃ­Å¾iÅ¥ niektorÃ© aspekty tvorby softvÃ©ru, a to z pohÄ¾adu nastupujÃºcich profesionÃ¡lov v tejto oblasti. Pre priblÃ­Å¾enie myslenia mladej generÃ¡cie sÃº eseje prepletenÃ© vÃ½rokmi znÃ¡mych Ä¾udÃ­, ale aj vtipnÃ½mi prÃ­behmi o tÃ½ch, ktorÃ­ vytvÃ¡rajÃº softvÃ©r, zozbieranÃ© samÃ½mi Å¡tudentmi. TÃ½m kniha podÃ¡va zaujÃ­mavÃ½ a zÃ¡bavnÃ½ nÃ¡hÄ¾ad do myslenia Å¡tudentov Å¡tudujÃºcich metÃ³dy a techniky vytvÃ¡rania jednÃ½ch z najzloÅ¾itejÅ¡Ã­ch vÃ½tvorov Ä¾udskÃ©ho ducha."
195,47,0.599,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Po vykonanÃ­ kÃ³du obsahuje premennÃ¡ trainX zÃ¡vislostnÃ© metriky tried, ktorÃ© boli zaradenÃ© do trÃ©novacej mnoÅ¾iny. V premennej trainY sa nachÃ¡dza Ãºdaj o prÃ­tomnosti chÃ½b (âOneâ alebo âZeroâ) pre triedy v trÃ©novacej mnoÅ¾ine. V premennÃ½ch testX a testY sa nachÃ¡dzajÃº analogickÃ© Ãºdaje pre testovaciu mnoÅ¾inu. Krok 4: PrÃ­prava dÃ¡t VÃ½sledky predikcie sa mÃ´Å¾u zlepÅ¡iÅ¥ predprÃ­pravou dÃ¡t. Najprv sa odstraÅujÃº premennÃ©, ktorÃ© neprispievajÃº k tvorbe koneÄnÃ©ho modelu. ExistujÃº dva prÃ­pady: - V prÃ­pade, ak hodnoty premennÃ½ch naprieÄ vÅ¡etkÃ½mi zÃ¡znamami majÃº nulovÃ½ rozptyl (mÃ´Å¾e sa povaÅ¾ovaÅ¥ za konÅ¡tantnÃ½). Funkcia nearZeroVar (trainX) vracia pole stÄºpcov, ktorÃ½ch hodnoty nevykazujÃº vÃ½znamnÃ½ rozptyl. > train.nzv <- nearZeroVar(trainX) > if (length(train.nzv) > 0) { + trainX <- trainX[, -train.nzv] + testX <- testX[, -train.nzv] }"
94,23,0.599,Sprievodca svetom vedeckÃ©ho publikovania,"1.3 PublikaÄnÃ½ priemysel Na celom svete tisÃ­cky vydavateÄ¾ov vydÃ¡vajÃº desiatky tisÃ­c Äasopisov z najrÃ´znejÅ¡Ã­ch vednÃ½ch odborov. RoÄne vychÃ¡dza pribliÅ¾ne 2,5 miliÃ³na vedeckÃ½ch ÄlÃ¡nkov. MnoÅ¾stvo Äasopisov rastie v priemere o 3 % za rok, mnoÅ¾stvo ÄlÃ¡nkov pribliÅ¾ne o 6 % (Ware a Mabe 2015). DlhÃ© obdobie boli najvÃ¤ÄÅ¡Ã­m producentom tohto Å¡pecifickÃ©ho artiklu SpojenÃ© Å¡tÃ¡ty americkÃ©. V roku 2016 ich prvÃ½ raz predstihla ÄÃ­na s 426 000 publikÃ¡ciami, kÃ½m americkÃ­ vedci uverejnili âlenâ 409 000 ÄlÃ¡nkov â vedÃºce postavenie v oblasti patentov vÅ¡ak USA zostalo (Tollefson 2018). Okrem globÃ¡lneho rastu vedeckÃ©ho segmentu za tÃ½mto javom stojÃ­ aj ÄÃ­nska politika Å¡tedrÃ©ho odmeÅovania vedcov za publikovanie v medzinÃ¡rodnÃ½ch Äasopisoch. Tento prÃ­stup vÅ¡ak vedie aj k zvyÅ¡ovaniu mnoÅ¾stva chÃ½b a pokusov âoklamaÅ¥â systÃ©m, ÄÃ­m trpÃ­ reprodukovateÄ¾nosÅ¥ vÃ½skumu. StÃ¡le vznikajÃº (a Äasto aj rÃ½chlo zanikajÃº) novÃ© Äasopisy. MnohÃ© redakcie majÃº seriÃ³zny zÃ¡mer pokryÅ¥ oblasÅ¥ vedy, ktorej sa zatiaÄ¾ venuje mÃ¡lo pozornosti. ZÃ¡roveÅ vÅ¡ak bujnie aj"
94,390,0.598,Sprievodca svetom vedeckÃ©ho publikovania,"11.2.2 FormulÃ¡cia reÅ¡erÅ¡nej poÅ¾iadavky Ak kÄ¾ÃºÄovÃ© slovÃ¡ napÃ­Å¡eme jednoducho za sebou, zÃ­skame Äasto vysokÃ½ a neprehÄ¾adnÃ½ poÄet vyhÄ¾adanÃ½ch vÃ½sledkov. Z tohto dÃ´vodu je uÅ¾itoÄnÃ© nauÄiÅ¥ sa sformulovaÅ¥ komplexnejÅ¡iu vyhÄ¾adÃ¡vaciu poÅ¾iadavku â dlhodobo to Å¡etrÃ­ Äas a energiu. Na formulÃ¡ciu vyhÄ¾adÃ¡vacej poÅ¾iadavky sa vyuÅ¾Ã­vajÃº vyhÄ¾adÃ¡vacie operÃ¡tory a Å¡peciÃ¡lne znaky, ktorÃ© umoÅ¾ÅujÃº uÅ¾Å¡ie vymedziÅ¥ a zacieliÅ¥ vyhÄ¾adÃ¡vanie. ZÃ¡kladnÃ© BooleovskÃ© operÃ¡tory sÃº pomenovanÃ© podÄ¾a Ã­rskeho matematika Georga Boolea. Pri formulovanÃ­ reÅ¡erÅ¡nej poÅ¾iadavky slÃºÅ¾ia na urÄenie vzÅ¥ahov medzi slovami. NajpouÅ¾Ã­vanejÅ¡ie operÃ¡tory sÃº AND, OR a NOT. BinÃ¡rne operÃ¡tory AND a OR Å¡pecifickÃ½m spÃ´sobom kombinujÃº dvojice vÃ½razov a unÃ¡rny operÃ¡tor NOT invertuje logickÃº hodnotu vÃ½razu."
94,439,0.598,Sprievodca svetom vedeckÃ©ho publikovania,"ObrÃ¡zok 13.2 Kompetencie knihovnÃ­ka tretej generÃ¡cie. ObrÃ¡zok ilustruje hlavnÃ© smery, ktorÃ½mi sa mÃ´Å¾e rozvÃ­jaÅ¥ knihovnÃ­cka profesia (prirodzene, konkrÃ©tny knihovnÃ­k nemÃ¡ Å¡ancu do hÄºbky ovlÃ¡daÅ¥ vÅ¡etky uvedenÃ© kompetencie â podobne ako u vedeckÃ½ch pracovnÃ­kov, z vÃ¤ÄÅ¡iny ÄiastkovÃ½ch disciplÃ­n ovlÃ¡da zÃ¡klady a na vybranÃ© oblasti sa Å¡pecializuje)."
369,103,0.597,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 2.14. Vzor PracovnÃ¡ kategÃ³ria V realite a nÃ¡sledne aj v softvÃ©rovÃ½ch systÃ©moch bÃ½va Äasto tendencia spÃ¡jaÅ¥ pozÃ­cie a pracovnÃ© kategÃ³rie: manaÅ¾Ã©r sa povaÅ¾uje za jednu z pracovnÃ½ch kategÃ³riÃ­. SpÃ¡janie tÃ½chto pohÄ¾adov zvyÄajne nerobÃ­ problÃ©m v menÅ¡ej firme, mÃ´Å¾e vÅ¡ak spÃ´sobiÅ¥ problÃ©my vo vÃ¤ÄÅ¡ej firme, ktorÃ¡ mÃ¡ zavedenÃ½ rigorÃ³zny systÃ©m pracovnÃ½ch kategÃ³riÃ­. VÅ¡eobecnejÅ¡ie rieÅ¡enie preto spoÄÃ­va v oddelenÃ­ tÃ½chto dvoch vecÃ­. ManaÅ¾Ã©ra mÃ´Å¾eme povaÅ¾ovaÅ¥ za pracovnÃº kategÃ³riu (ak sa pracovnÃ­k profiluje tÃ½mto smerom), avÅ¡ak prÃ­sluÅ¡nÃº pozÃ­ciu vo firme (naprÃ­klad vedÃºceho oddelenia) mÃ´Å¾e zastÃ¡vaÅ¥ pracovnÃ­k s pracovnou kategÃ³riou manaÅ¾Ã©r aj analytik."
190,311,0.597,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"programom pridÃ¡te Å¾iarivÃº striebornÃº nÃ¡lepku hlÃ¡sajÃºcu, Å¾e tento produkt spÄºÅa poÅ¾iadavky kvality podÄ¾a normy ISO-XXXX. Samozrejme tu sa to celÃ© komplikuje. Postup pri tvorbe softvÃ©ru a hrncov je, no povedzme, Å¾e pomerne odliÅ¡nÃ½. Hrnce sa vÃ¤ÄÅ¡inou podarÃ­ spraviÅ¥ podÄ¾a nÃ¡vrhu na prvÃ½krÃ¡t, a ak aj nie, tak pokiaÄ¾ sÃº pokazenÃ© netreba ich chodiÅ¥ za zÃ¡kaznÃ­kom opravovaÅ¥ a ani mu posielaÅ¥ kÃºsky kovu potiahnutÃ© teflonom ako zÃ¡platy na diery, ktorÃ© vznikli pouÅ¾Ã­vanÃ­m. PrÃ¡ve preto je kvalita softvÃ©ru tak dÃ´leÅ¾itÃ¡. Jedno nesprÃ¡vne rozhodnutie, jedna chyba a o nekvalitnÃ½ softvÃ©r sa treba staraÅ¥ do konca Å¾ivota. Alebo minimÃ¡lne pokiaÄ¾ je to napÃ­sanÃ© v zmluve."
130,60,0.597,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory AdaptÃ©r definuje obalenie objektu alebo triedy, aby tak ponÃºkol inÃ© rozhranie. PodobnÃ© obalenie sa nachÃ¡dza aj v nÃ¡vrhovom vzore ZÃ¡stupca, ktorÃ½ zakrÃ½va niektorÃ© vlastnosti obalenÃ©ho objektu. DekoratÃ©r namiesto zaistenia inÃ©ho rozhrania, zmenÃ­ (rozÅ¡Ã­ri alebo utlmÃ­) sprÃ¡vanie dekorovanÃ©ho objektu."
184,238,0.597,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 3-12. VzdialenÃ½ prÃ­stup analytickÃ½ch nÃ¡strojov k ICDE. WebovÃ© sluÅ¾by sÃº poslednÃ½m vÃ½krikom mÃ³dy vo veÄ¾kÃ½ch a stredne veÄ¾kÃ½ch systÃ©moch kde sa predpokladÃ¡ interoperabilita medzi viacerÃ½mi architektÃºrami. TradiÄnÃ© rieÅ¡enia, ako naprÃ­klad J2EE aplikaÄnÃ© servery a posielanie sprÃ¡v je vynikajÃºce rieÅ¡enie pre vnÃºtropodnikovÃ© aplikÃ¡cie. Äasto vÅ¡ak padÃ¡ ak sa ho snaÅ¾Ã­me prepojiÅ¥ s inÃ½m rieÅ¡enÃ­m, ktorÃ© je prepojenÃ© s naÅ¡ou aplikÃ¡ciou cez Internet. Vo svojej podstate webovÃ© sluÅ¾by nie sÃº niÄÃ­m novÃ½m. Volanie vzdialenÃ©ho kÃ³du Java podporuje pomocou svojich komponentov. WebovÃ© sluÅ¾by vÅ¡ak prinÃ¡Å¡ajÃº moÅ¾nosÅ¥ komunikÃ¡cie rÃ´znych platforiem medzi sebou bez potreby poznania druhej strany. KaÅ¾dÃ¡ z platforiem, Äi uÅ¾ ide o Javu, .NET alebo inÃº implementaÄnÃº platformu, dokÃ¡Å¾e poskytnÃºÅ¥ vzdialenÃ© sluÅ¾by inÃ½m aplikÃ¡ciÃ¡m, avÅ¡ak len ak pracujÃº na rovnakej platforme. TaktieÅ¾ majÃº tieto rieÅ¡enia problÃ©m s komunikÃ¡ciou cez Internet. ÄalÅ¡Ã­m problÃ©mom je to, Å¾e aplikÃ¡cie ktorÃ© neboli nikdy navrhovanÃ© tak aby prekroÄili hranice spoloÄnosti sÃº zrazu nÃºtenÃ© komunikovaÅ¥ so systÃ©mami mimo organizÃ¡cie."
122,101,0.597,Modelovanie softvÃ©ru,"Obr. 6.3: SpÃºÅ¡Å¥aÄe ako signÃ¡ly. Prechod mÃ´Å¾e byÅ¥ spojenÃ½ s realizÃ¡ciou urÄitej akcie (angl. action) alebo, v terminolÃ³gii UML, efektu (angl. effect). Efekt mÃ´Å¾e byÅ¥ iba pomenovanÃ½, ale aj prepojenÃ½ na urÄitÃº operÃ¡ciu. StavovÃ½ stroj na obrÃ¡zku 6.2 sa zdrÅ¾iava v stave VytvÃ¡ranÃ¡ kÃ½m sa do objednÃ¡vky pridÃ¡vajÃº poloÅ¾ky, Äo je indikovanÃ© cirkulÃ¡rnym prechodom. Pridanie poloÅ¾ky je realizovanÃ© operÃ¡ciou addItem() triedy Order. VÅ¡imnime si, Å¾e definovanÃ­m akciÃ­ odhaÄ¾ujeme operÃ¡cie, ktorÃ© mÃ¡ poskytovaÅ¥ systÃ©m alebo jeho ÄasÅ¥. Ak by sme v tomto boli dÃ´slednÃ­, stavovÃ½ diagram sa zaÄne podobaÅ¥ na diagram aktivÃ­t. Akcie moÅ¾no prisudzovaÅ¥ aj momentu vstupu do stavu (angl. entry), zotrvaniu v stave (angl. do) alebo opustenÃ­ stavu (angl. exit). V naÅ¡om prÃ­klade sme v stave VytvÃ¡ranÃ¡ nastavili, Å¾e sa po opustenÃ­ tohto stavu objednÃ¡vka uloÅ¾Ã­ (operÃ¡cia store() triedy Order). Aj keÄ nastane prÃ­sluÅ¡nÃ¡ udalosÅ¥, t. j. spÃºÅ¡Å¥aÄ, aktivÃ¡cia prechodu mÃ´Å¾e byÅ¥ neÅ¾iaduca, ak nie je splnenÃ¡ urÄitÃ¡ podmienka (angl. condition). StavovÃ½ stroj na obrÃ¡zku 6.2 podmieÅuje prechod zo stavu VytvÃ¡ranÃ¡ do stavu PotvrdenÃ¡ tÃ½m, Å¾e objednÃ¡vka nie je prÃ¡zdna. Na toto sa pouÅ¾Ã­vajÃº strÃ¡Å¾covia (angl. guards), s ktorÃ½mi sme sa stretli v diagramoch aktivÃ­t (pozri ÄasÅ¥ 3.11). ZnaÄenie prechodov v stavovÃ½ch diagramoch moÅ¾no sumarizovaÅ¥ takto: event [condition] / action V terminolÃ³gii UML je to: trigger [guard] / effect"
43,438,0.597,Objektovo orientovanÃ© programovanie v C++,"Jeho sÃºÄasÅ¥ou sa stali vÄaka tomu, Å¾e programÃ¡tori ich pri prÃ¡ci Äasto vyuÅ¾Ã­vali a museli ich implementovaÅ¥ sami. NavyÅ¡e, v STL sÃº dÃ¡tovÃ© Å¡truktÃºry navrhnutÃ© ako Å¡ablÃ³ny, preto nekladÃº obmedzenia na dÃ¡tovÃ½ typ prvkov, ktorÃ© sa v nich uchovÃ¡vajÃº. To robÃ­ z STL silnÃ½ a uÅ¾itoÄnÃ½ nÃ¡stroj s mnoÅ¾stvom moÅ¾nostÃ­. Pri kaÅ¾dej dÃ¡tovej Å¡truktÃºre popÃ­Å¡eme jej princÃ­p, ale aj vÃ½hody a nevÃ½hody a moÅ¾nÃ© oblasti pouÅ¾itia. TÃ½m, Å¾e jednotlivÃ© Å¡truktÃºry majÃº rÃ´zne vlastnosti, majÃº aj svoje Å¡peciï¬ckÃ© vyuÅ¾itie a nie kaÅ¾dÃ¡ Å¡truktÃºra sa hodÃ­ pre kaÅ¾dÃº situÃ¡ciu."
205,58,0.597,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","3.2 Äo sa deje, keÄ nasledujem odkaz? ZÃ¡kladnou operÃ¡ciou pri pohybovanÃ­ sa vo webovom priestore je presÃºvanie sa medzi jednotlivÃ½mi webovÃ½mi strÃ¡nkami zobrazenÃ½mi v prehliadaÄi prostrednÃ­ctvom nasledovania odkazov. Pri zobrazenÃ­ jednej webovej strÃ¡nky vÅ¡ak prehliadaÄ vykonÃ¡va sÃ©riu Ãºloh spojenÃ½ch so zÃ­skanÃ½m obsahu strÃ¡nky, jej ÄalÅ¡Ã­ch sÃºÄastÃ­ a ich zobrazenÃ­m. PostupnosÅ¥ krokov, ktorÃ© sa dejÃº pri zobrazovanÃ­ webovÃ©ho zdroja v prehliadaÄi opÃ­Å¡eme v tejto Äasti na prÃ­klade zobrazenia beÅ¾nej webovej strÃ¡nky. Zadanie URL adresy PrvÃ½ krok je pomerne jednoduchÃ½ a kaÅ¾dÃ©mu znÃ¡my: zadanie URL adresy do prehliadaÄa. Pre potreby tohto prÃ­kladu mÃ´Å¾eme povedaÅ¥, Å¾e touto adresou bude adresa dokumentu, ktorÃ½ opisuje pravidlÃ¡ pre prijÃ­manie na Å¡tÃºdium na Fakulte informatiky a informaÄnÃ½ch technolÃ³giÃ­ STU v Bratislave http://www.fiit.stuba.sk/generate_page.php?page_id=353 VyhÄ¾adanie IP adresy pre domÃ©novÃ© meno V ÄalÅ¡om kroku je potrebnÃ© identifikovaÅ¥ adresu poÄÃ­taÄa v sieti, ktorÃ½ je schopnÃ½ poskytnÃºÅ¥ nÃ¡m zdroj, ktorÃ½ hÄ¾adÃ¡me a ktorÃ½ je identifikovanÃ½ pomocou URL, ktorÃº sme zadali do prehliadaÄa. Na zÃ¡klade domÃ©novÃ©ho mena zÃ­skanÃ©ho z URL adresy sa snaÅ¾Ã­me nÃ¡jsÅ¥ DNS (Domain Name System) zÃ¡znam postupne v pamÃ¤ti prehliadaÄa, pamÃ¤ti operaÄnÃ©ho systÃ©mu, pamÃ¤ti smerovaÄa, prostrednÃ­ctvom ktorÃ©ho je poÄÃ­taÄ pripojenÃ½ do internetu. Ak sa danÃ½ zÃ¡znam nenÃ¡jde, tak nasleduje rekurzÃ­vne vyhÄ¾adÃ¡vanie v DNS serveroch. Odoslanie HTTP dopytu na server Pre potreby tohto prÃ­kladu mÃ´Å¾eme predpokladaÅ¥, Å¾e hÄ¾adanÃº strÃ¡nku sme nikdy nezobrazovali a teda sa nenachÃ¡dza v Å¾iadnej doÄasnej pamÃ¤ti prehliadaÄa. V URL adrese, ktorÃº sme napÃ­sali"
195,84,0.597,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"4.2 Znalosti o vÃ½voji softvÃ©ru V predchÃ¡dzajÃºcej Äasti sme priblÃ­Å¾ili moÅ¾nosti vyuÅ¾itia modelu vÃ½vojÃ¡ra v OSSI. Pri samotnom odporÃºÄanÃ­, prÃ­padne personalizÃ¡cii vÅ¡ak treba najskÃ´r poznaÅ¥ vÃ½vojÃ¡rove znalosti, preferencie a podobne. Preto sa v tejto kapitole zameriavame na objasnenie existujÃºcich trendov vÃ½beru informÃ¡ciÃ­ a spÃ´sobu ich zachytenia. Znalosti o vÃ½voji softvÃ©ru predstavujÃº znalosti, ktorÃ© majÃº vÃ½vojÃ¡ri o systÃ©me (systÃ©moch), ktorÃ½ vyvÃ­jajÃº a ich celkovÃ© skÃºsenosti s vÃ½vojom softvÃ©ru. Miera tÃ½chto znalostÃ­ je typicky zÃ­skavanÃ¡ skÃ´r implicitne sledovanÃ­m akciÃ­ vykonanÃ½ch vÃ½vojÃ¡rom. TypickÃ½mi predmetom sledovania sÃº 3 typy artefaktov: - zÃ¡znamy o zmene (angl. change logs) uloÅ¾enÃ© vo VCS, - stopy interakcie (angl. interaction traces) zbieranÃ© z IDE, - zÃ¡znamy (angl. records) uloÅ¾enÃ© v systÃ©moch pre sprÃ¡vu Ãºloh. 4.2.1 ZÃ¡znamy o zmene kÃ³du z VCS Tieto dÃ¡ta typicky odkazujÃº na odovzdania zdrojovÃ©ho kÃ³du zÃ­skanÃ© zo systÃ©mov na kontrolu verziÃ­ zdrojovÃ©ho kÃ³du ako Git, SVN, CVS. Existuje viacero spÃ´sobov vyuÅ¾itia takÃ©hoto typu dÃ¡t, typicky ide o heuristiky. Jedna z heuristÃ­k napr. predpokladÃ¡, Å¾e vÃ½vojÃ¡r, ktorÃ½ menÃ­ urÄitÃº ÄasÅ¥ zdrojovÃ©ho kÃ³du, jej aj rozumie. TÃ¡to heuristika teda zo zÃ¡znamov o odovzdaniach zisÅ¥uje, kto konkrÃ©tne menil poÅ¾adovanÃ© riadky zdrojovÃ©ho kÃ³du. Heuristika sa nazÃ½va Pravidlo riadku 10 (angl. Line 10 rule) a reÃ¡lne ju na odporÃºÄanie expertov jednotlivÃ½ch modulov zdrojovÃ©ho kÃ³du vyuÅ¾Ã­va vyÅ¡Å¡ie opisovanÃ½ systÃ©m Expertise Recommender [19]. V tomto systÃ©me model kaÅ¾dÃ©ho vÃ½vojÃ¡ra obsahuje informÃ¡ciu o tom, ktorÃ½m modulom rozumie â teda ich menil ako poslednÃ½. Pri odporÃºÄanÃ­ v systÃ©me teda pre moduly sÃºvisiace s aktuÃ¡lne rieÅ¡enÃ½m problÃ©mom identifikujeme expertov. ProblÃ©mom takÃ©hoto prÃ­stupu je urÄovanie expertÃ­zy API elementov a zdrojovÃ½ch kÃ³dov, pre ktorÃ© nie je dostupnÃ¡ histÃ³ria zmien. InÃº heuristiku vyuÅ¾Ã­va systÃ©m CodeBroker, ktorÃ½ odporÃºÄanie personalizuje pomocou vyluÄovania odporÃºÄanÃ­ obsahujÃºcich API elementy, ktorÃ© vÃ½vojÃ¡r uÅ¾ poznÃ¡. SystÃ©m vychÃ¡dza z predpokladu, Å¾e vÃ½vojÃ¡r element respektÃ­ve kniÅ¾nicu poznÃ¡, ak ju uÅ¾ pouÅ¾il. V takomto prÃ­pade mu systÃ©m z odporÃºÄanÃ­ vylÃºÄi danÃ½ element a jeho podelementy, napr. metÃ³dy kniÅ¾nice. Pri identifikÃ¡cii elementov, ktorÃ© vÃ½vojÃ¡r poznÃ¡, nemusÃ­ odporÃºÄacÃ­ systÃ©m pri modelovanÃ­ vychÃ¡dzaÅ¥ len z priamo zmenenÃ½ch riadkov v kÃ³de, ale mÃ´Å¾e v modeli vÃ½vojÃ¡ra uvaÅ¾ovaÅ¥ rovnako predchÃ¡dzajÃºci a nasledujÃºci riadok [16]. Termy, ktorÃ© sÃº zapÃ­sanÃ© do modelu, pochÃ¡dzajÃº okrem konkrÃ©tnych elementov tieÅ¾ z ich identifikÃ¡torov alebo komentÃ¡rov. Extrakcia elementov (metÃ³d) volanÃ½ch v odovzdaniach je vÅ¡ak vÃ½zva. Tu je totiÅ¾ treba namapovaÅ¥ premennÃ© objektov na ciele volanÃ­ metÃ³d. To zvyÄajne robia kompilÃ¡tory, avÅ¡ak v prÃ­pade odovzdanÃ­ je proces Å¥aÅ¾Å¡Ã­, pretoÅ¾e v tomto prÃ­pade ide prevaÅ¾ne o malÃ© Äasti kÃ³du, ktorÃ© boli zmenenÃ©. PracovaÅ¥ pri kaÅ¾dom odovzdanÃ­ s celÃ½m zdrojovÃ½m kÃ³dom je tieÅ¾ veÄ¾mi neefektÃ­vne. RieÅ¡enÃ­m vÃ½zvy zisku informÃ¡cii z jednotlivÃ½ch odovzdanÃ­ je napr. ÄiastoÄnÃ¡ analÃ½za programu pomocou PPA [4]."
236,5,0.597,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Kapitola 5 obsahuje urÄitÃº potenciÃ¡lne nebezpeÄnÃº informÃ¡ciu o tom ako dosiahnuÅ¥ alternatÃ­vnu Ãºpravu voÄi Å¡tandardnej Ãºprave, ktorÃº vytvÃ¡ra LATEX. Dozviete sa z nej ako zmeniÅ¥ veci tak, Å¾e krÃ¡sny vÃ½stup z LATEXu zaÄne vyzeraÅ¥ dosÅ¥ zle. Je dÃ´leÅ¾itÃ©, aby ste ÄÃ­tali kapitoly po poradÃ­. Okrem toho tÃ¡to kniha nie je aÅ¾ takÃ¡ rozsiahla. Pozorne si preÄÃ­tajte prÃ­klady, pretoÅ¾e veÄ¾kÃ¡ ÄasÅ¥ informÃ¡ciÃ­ je obsiahnutÃ¡ prÃ¡ve v tÃ½chto prÃ­kladoch, ktorÃ© nÃ¡jdete v celej knihe. Ak potrebujete akÃ½koÄ¾vek materiÃ¡l sÃºvisiaci s LATEXom, pozrite sa do niektorÃ©ho z CTAN ftp archÃ­vov. Pre USA je to ftp.shsu.edu, pre Nemecko ftp.dante.de, pre VeÄ¾kÃº BritÃ¡niu ftp.tex.ac.uk alebo ftp.muni.cz u nÃ¡s. Ak nie ste v niektorej z tÃ½chto krajÃ­n, zvoÄ¾te si archÃ­v, ktorÃ½ je ku vÃ¡m najbliÅ¾Å¡ie. Ak chcete spustiÅ¥ LATEX na vaÅ¡om vlastnom poÄÃ­taÄi, pozrite sa, Äo sa dÃ¡ zÃ­skaÅ¥ z CTAN:/tex-archive/systems. Ak vÃ¡s napadne nieÄo, Äo by mohlo byÅ¥ pridanÃ©, vypustenÃ©, alebo zmenenÃ© v tomto dokumente, prosÃ­m, oznÃ¡mte mi to. NÃ¡zory LATEXovÃ½ch zaÄiatoÄnÃ­kov ma zaujÃ­majÃº najviac â Äo z tohoto Ãºvodu (do LATEXu) Ä¾ahko pochopili a Äo by podÄ¾a nich mohlo byÅ¥ vysvetlenÃ© lepÅ¡ie. Tobias Oetiker"
240,235,0.596,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"RekurzÃ­vne vnorenie prebieha len v prÃ­pade ak x nie je jednocifernÃ© binÃ¡rne ÄÃ­slo (x > 1). Potom ako vypÃ­Å¡e binÃ¡rnu reprezentÃ¡ciu vyÅ¡Å¡Ã­ch rÃ¡dov (x/2) dopÃ­Å¡e aj poslednÃº cifru (x%2) binÃ¡rneho zÃ¡pisu x. VÅ¡imnime si, Å¾e toto rekurzÃ­vne rieÅ¡enie nemÃ¡ obmedzenie na vstupnÃ© ÄÃ­slo x do 1 000 000. Je to spÃ´sobenÃ© tÃ½m, Å¾e zÃ¡sobnÃ­k volanÃ­ funguje ako akÃ¡si pamÃ¤Å¥ poslednej cifry (x%2) predtÃ½m ako ju vypÃ­Å¡eme (pretoÅ¾e rekurzÃ­vne vnorenie (x/2) prebieha tesne pred vÃ½pisom printf()). Z formÃ¡lneho hÄ¾adiska teda rekurzÃ­vne rieÅ¡enie vyÅ¾aduje viac pomocnej pamÃ¤te, ÄÃ­m vÅ¡ak zÃ­skame vÅ¡eobecnejÅ¡ie rieÅ¡enie, ktorÃ©ho kÃ³d je jednoduchÅ¡Ã­ a prehÄ¾adnejÅ¡Ã­."
265,118,0.596,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PreÄo spravidla netrvÃ¡me na tom, aby bol softvÃ©r kvalitnÃ½ vo vÅ¡etkÃ½ch hÄ¾adiskÃ¡ch? Nie vÅ¾dy sÃº vÅ¡etky hÄ¾adiskÃ¡ pre zÃ¡kaznÃ­ka dÃ´leÅ¾itÃ©. NaprÃ­klad modifikovateÄ¾nosÅ¥ Äi udrÅ¾ovateÄ¾nosÅ¥ softvÃ©ru nemusÃ­ byÅ¥ dÃ´leÅ¾itÃ¡, ak je urÄenÃ½ len na jednorazovÃ© pouÅ¾itie alebo sa neplÃ¡nujÃº jeho zmeny (napr. promo aplikÃ¡cie). Interoperabilita a prenosnosÅ¥ nemusia byÅ¥ dÃ´leÅ¾itÃ©, ak vieme jednoznaÄne povedaÅ¥, Å¾e je softvÃ©r urÄenÃ½ len a len pre konkrÃ©tne prostredie (napr. firmu). EfektÃ­vnosÅ¥ nemusÃ­ byÅ¥ dÃ´leÅ¾itÃ¡, ak nÃ¡s netlaÄia obmedzenia ohÄ¾adom vÃ½poÄtovÃ½ch kapacÃ­t, ktorÃ© mÃ¡me k dispozÃ­cii. RobustnosÅ¥ zasa nie je podmienka pre ÃºspeÅ¡nÃ© fungovanie experimentÃ¡lneho programu na spracovanie dÃ¡t, ktorÃ½ pouÅ¾Ã­vajÃº autori sami. Ak by aj zÃ¡kaznÃ­k mal zÃ¡ujem o kvalitu vo vÅ¡etkÃ½ch hÄ¾adiskÃ¡ch, softvÃ©r by bol zrejme neprimerane drahÃ½. A vo vÃ¤ÄÅ¡ine prÃ­padov to ani nie je moÅ¾nÃ©, keÄÅ¾e jednotlivÃ© vlastnosti sÃº navzÃ¡jom v protiklade (vylepÅ¡enÃ­m jednej sa nÃ¡m druhÃ¡ zhorÅ¡Ã­). Preto si zÃ¡kaznÃ­ci zvyÄajne veÄ¾mi rÃ½chlo vlastnosti zoradia podÄ¾a priority a rozhodnÃº sa investovaÅ¥ do kvality len v urÄitÃ½ch ohÄ¾adoch. Poradie samozrejme zÃ¡visÃ­ od typu a ÃºÄelu softvÃ©ru. NaprÃ­klad banka vo svojom systÃ©me urÄite uprednostnÃ­ bezpeÄnosÅ¥ pred interoperabilitou (dve vlastnosti, ktorÃ© sÃº zvyÄajne protikladnÃ©). Pri sluÅ¾be posielania okamÅ¾itÃ½ch sprÃ¡v (instant messaging) by sme zrejme naopak uprednostnili interoperabilitu s inÃ½mi podobnÃ½mi sluÅ¾bami aj za cenu niÅ¾Å¡Ã­ch bezpeÄnostnÃ½ch Å¡tandardov."
59,260,0.596,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 5.1. ZnÃ¡zornenie 3 partiÃ­ hry piÅ¡kvorky Indexy pri jednotlivÃ½ch symboloch X a/alebo O znamenajÃº poradie Å¥ahu. V prvÃ½ch dvoch partiÃ¡ch bolo dosiahnutÃ© vÃ­Å¥azstvo, hrÃ¡Ä umiestnil svoje symboly do âsÃºvislej lÃ­nieâ naznaÄenÃ©ho preruÅ¡ovanou Äiarou. Tretia partia skonÄila remÃ­zou, Å¾iadnemu hrÃ¡Äovi sa nepodarilo umiestniÅ¥ svoje symboly do âriadkuâ, po 9 Å¥ahoch, keÄ sÃº obsadenÃ© vÅ¡etky pozÃ­cie hracej dosky, hra konÄÃ­ remÃ­zou."
369,314,0.596,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"PodÄ¾a novÃ©ho zÃ¡kona o finanÄnom sprostredkovanÃ­ a poradenstve s ÃºÄinnosÅ¥ou od roku 2010 je finanÄnÃ½ sprostredkovateÄ¾ (agent) osoba, ktorÃ¡ predkladÃ¡ klientovi ponuky na uzavretie zmluvy o poskytnutÃ­ finanÄnej sluÅ¾by, resp. uzatvÃ¡ra zmluvu o poskytnutÃ­ finanÄnej sluÅ¾by a dostÃ¡va za to provÃ­zie od prÃ­sluÅ¡nej finanÄnej inÅ¡titÃºcie. FinanÄnÃ½ sprostredkovateÄ¾ nesmie byÅ¥ zÃ¡roveÅ finanÄnÃ½m poradcom. (FinanÄnÃ½ poradca vykonÃ¡va finanÄnÃ© poradenstvo na zÃ¡klade zmluvy s klientom a dostÃ¡va provÃ­ziu od klienta.)"
111,13,0.596,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"aby sme mali aj osobnÃº skÃºsenosÅ¥ â priamu interakciu s autom â napr. odvezieme sa v Åom. Äasto mÃ´Å¾eme vidieÅ¥ preklad anglickÃ©ho pojmu âuser experienceâ do slovenÄiny ako âpouÅ¾Ã­vateÄ¾skÃ¡ skÃºsenosÅ¥â. Ja prekladÃ¡m tento pojem ako âpouÅ¾Ã­vateÄ¾skÃ½ zÃ¡Å¾itokâ. Rozdiel, resp. vzÅ¥ah medzi skÃºsenosÅ¥ou a zÃ¡Å¾itkom nemusÃ­ byÅ¥ jasnÃ½. SkÃºsenosÅ¥ sa formuje z viacerÃ½ch faktorov â napr. poznatkov/vedomostÃ­, zruÄnostÃ­, nÃ¡vykov, zÃ¡Å¾itkov â zÃ­skanÃ½ch uÄenÃ­m, praxou, pozorovanÃ­m a rozumovom uvaÅ¾ovanÃ­. ZÃ¡Å¾itok je (subjektÃ­vny) jav, ktorÃ½ preÅ¾Ã­vam, pocity, ako danÃº vec/situÃ¡ciu vnÃ­mam (v danom okamihu). PouÅ¾Ã­vateÄ¾ si interakciou so systÃ©mom (produktom) formuje skÃºsenosti. ZapamÃ¤tÃ¡ si, Äo videl, akÃ© informÃ¡cie, funkcionalitu, prvky a formu interakcie. UtvÃ¡ra si dojmy a pocity z toho, do akej miery sÃº naplnenÃ© jeho oÄakÃ¡vania, ako zafungovala intuitÃ­vnosÅ¥, pouÅ¾iteÄ¾nosÅ¥, Äi je rozhranie esteticky Ä¾ÃºbivÃ©, atÄ. ZÃ¡Å¾itok a skÃºsenosÅ¥ sÃº Ãºzko prepojenÃ© pojmy. ZÃ¡Å¾itok je jedineÄnÃ½, dvaja pouÅ¾Ã­vatelia si pri rovnakej situÃ¡cii odnÃ¡Å¡ajÃº inÃº skÃºsenosÅ¥. ZÃ¡Å¾itok mÃ´Å¾e byÅ¥ zÃ¡kladom pre skÃºsenosÅ¥, resp. skÃºsenosÅ¥ mÃ´Å¾e byÅ¥ vÃ½sledkom naÅ¡ich zÃ¡Å¾itkov. NaÅ¡im cieÄ¾om (UX vÃ½skumnÃ­kov, dizajnÃ©rov, vÃ½vojÃ¡rov) je vylepÅ¡ovaÅ¥ produkty a sluÅ¾by tak, aby mali pouÅ¾Ã­vatelia, Äo najviac pozitÃ­vnych zÃ¡Å¾itkov a s tÃ½m spojenÃ© pozitÃ­vne skÃºsenosti. Preklad pojmu UX ako âpouÅ¾Ã­vateÄ¾skÃ¡ skÃºsenosÅ¥â nie je vyslovene zlÃ½, ale âpouÅ¾Ã­vateÄ¾skÃ½ zÃ¡Å¾itokâ je trefnejÅ¡Ã­. PoznÃ¡mka, urÄite nepouÅ¾Ã­vajte pojem âuÅ¾Ã­vateÄ¾skÃ½â zÃ¡Å¾itok. UÅ¾Ã­vateÄ¾ je osoba, ktorÃ¡ nieÄo uÅ¾Ã­va, napr. nehnuteÄ¾nosÅ¥ alebo lieky. SoftvÃ©r pouÅ¾Ã­vame, preto je sprÃ¡vne âpouÅ¾Ã­vateÄ¾â softvÃ©ru, nie âuÅ¾Ã­vateÄ¾â softvÃ©ru."
265,99,0.596,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PoznÃ¡mka: tÃ¡to otÃ¡zka je v princÃ­pe definovanÃ¡ dosÅ¥ vÅ¡eobecne a mohli by sme ju uchopiÅ¥ z mnohÃ½ch hÄ¾adÃ­sk. My sa zameriame na porovnanie skrz problÃ©my tvorby softvÃ©ru diskutovanÃ© v tejto podkapitole. Z definÃ­cie majÃº tieto disciplÃ­ny spoloÄnÃ© vÅ¡etky znaky âvÅ¡eobecnÃ©hoâ inÅ¾inierstva (projektovo orientovanÃ¡ prÃ¡ca, opieranie sa o osvedÄenÃ© postupy a ich systematickÃ© rozvÃ­janie, budovanie znalostnÃ½ch bÃ¡z, systematickÃ¡ prÃ¡ca a pod.)."
76,111,0.596,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"NÃ¡hodnÃ½ pokus spoÄÃ­va v hode tÃ½mito kockami. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e a) obe ukÃ¡Å¾u pÃ¡rne ÄÃ­slo? b) na modrej bude pÃ¡rne a na Äervenej nepÃ¡rne ÄÃ­slo? c) na modrej aspoÅ 4 body a na Äervenej menej ako 5 bodov? 1.7.14 Na terÄ striedavo strieÄ¾ajÃº dvaja strelci a zasahujÃº ho na sebe nezÃ¡visle s pravdepodobnosÅ¥ami = 0.8 a = 0.7. Predpokladajme, Å¾e kaÅ¾dÃ½ strieÄ¾a tri razy. AkÃ¡ je pravdepodobnosÅ¥, Å¾e a) prvÃ½krÃ¡t je terÄ zasiahnutÃ½ druhou ranou prvÃ©ho strelca? b) terÄ bol zasiahnutÃ½ len raz a to druhou ranou prvÃ©ho strelca? c) terÄ bol zasiahnutÃ½ prÃ¡ve raz a to ranou prvÃ©ho strelca? d) terÄ bol zasiahnutÃ½ prÃ¡ve raz? e) terÄ bol zasiahnutÃ½ prÃ¡ve dva razy? 1.7.15 NÃ¡hodnÃ½ pokus spoÄÃ­va v hode tromi faloÅ¡nÃ½mi mincami. Znaky padajÃº na jednotlivÃ½ch minciach s pravdepodobnosÅ¥ami 0.65, 0.55 a 0.45. S akou pravdepodobnosÅ¥ou padne znak prÃ¡ve na dvoch minciach?"
195,130,0.595,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"6.3 Zhrnutie V tejto Äasti sme sa venovali zÃ¡kladnÃ½m charakteristikÃ¡m a metrikÃ¡m, ktorÃ© sa vyuÅ¾Ã­vajÃº pri vyhodnocovanÃ­ a porovnÃ¡vanÃ­ odporÃºÄaÄov. Uviedli sme Å¡estnÃ¡sÅ¥ najfrekventovanejÅ¡Ã­ch z nich. Charakteristiky mÃ´Å¾u byÅ¥ kvantitatÃ­vne, ktorÃ© sa dajÃº meraÅ¥, alebo kvalitatÃ­vne. Na vÃ½poÄet kvalitatÃ­vnych sa vyuÅ¾Ã­vajÃº rÃ´zne metriky, najÄastejÅ¡ie meranie odchÃ½lky alebo relevantnosti odporÃºÄanÃ½ch poloÅ¾iek. JednotlivÃ© charakteristiky odporÃºÄaÄov sa mÃ´Å¾u navzÃ¡jom ovplyvÅovaÅ¥, teda zvyÅ¡ovanie hodnoty jednej charakteristiky spÃ´sobuje zmenu (zvyÅ¡ovanie alebo zniÅ¾ovanie) inej charakteristiky. Pri vÃ½bere odporÃºÄaÄa je potrebnÃ© zvÃ¡Å¾iÅ¥, ktorÃ© charakteristiky sÃº podstatnejÅ¡ie a na zÃ¡klade poÅ¾iadaviek a preferenciÃ­ vybraÅ¥ konkrÃ©tny."
184,315,0.595,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"na adresÃ¡r odstrÃ¡nenÃ½ len v prÃ­pade, ak je adresÃ¡r, na ktorÃ½ danÃ½ odkaz odkazuje prÃ¡zdny. V prÃ­pade grafovej reprezentÃ¡cie je povolenÃ© zruÅ¡iÅ¥ odkaz na adresÃ¡r v prÃ­pade, Å¾e existuje aspoÅ jeden inÃ½ odkaz tento na adresÃ¡r. ZavedenÃ­m referenÄnÃ©ho ÄÃ­sla znÃ¡zornenÃ©ho v pravom hornom rohu kaÅ¾dÃ©ho adresÃ¡ra â obrÃ¡zok 4-3 je jednoduchÃ© urÄiÅ¥ kedy je odstraÅovanÃ½ odkaz na adresÃ¡r poslednÃ½. Po tom, ako sa zruÅ¡Ã­ odkaz z A do B je referenÄnÃ© ÄÃ­slo B znÃ­Å¾enÃ© z 2 na 1, Äo vyzerÃ¡ ako jednoduchÃ© rieÅ¡enie problÃ©mu, avÅ¡ak adresÃ¡r B by bol v tomto prÃ­pade neprÃ­stupnÃ½ z koreÅovÃ©ho adresÃ¡ra sÃºborovÃ©ho systÃ©mu (A). Tri adresÃ¡re, B, D a E a vÅ¡etky sÃºbory v nich by sa stratili. Tento problÃ©m existuje aj v centralizovanÃ½ch systÃ©moch, je vÅ¡ak kritickejÅ¡Ã­ v distribuovanÃ½ch. PokiaÄ¾ je vÅ¡etko na jednom poÄÃ­taÄi, je moÅ¾nÃ©, aj keÄ potenciÃ¡lne zloÅ¾ito, objaviÅ¥ stratenÃ© adresÃ¡re, pretoÅ¾e sÃº vÅ¡etky informÃ¡cie o nich uloÅ¾enÃ© na jednom mieste. Aktivita vÅ¡etkÃ½ch sÃºborov mÃ´Å¾e byÅ¥ v takÃ½chto systÃ©moch zastavenÃ¡ a graf mÃ´Å¾e byÅ¥ obnovenÃ½ poÄnÃºc koreÅovÃ½m adresÃ¡rom oznaÄenÃ­m vÅ¡etkÃ½ch dostupnÃ½ch adresÃ¡rov. Na konci tohto procesu sa vÅ¡etky neoznaÄenÃ© adresÃ¡re povaÅ¾ujÃº za nedostupnÃ©. V distribuovanÃ½ch systÃ©moch, kde je spojenÃ½ch viacero poÄÃ­taÄov nie je moÅ¾nÃ© zastaviÅ¥ vÅ¡etku aktivitu sÃºborovÃ©ho systÃ©mu, Äim je zÃ­skanie âsnÃ­mky (snapshot)â sÃºborovÃ©ho systÃ©mu veÄ¾mi zloÅ¾itÃ©, ak nie nemoÅ¾nÃ©. KÄ¾ÃºÄovÃ½m problÃ©mom nÃ¡vrhu kaÅ¾dÃ©ho distribuovanÃ©ho sÃºborovÃ©ho systÃ©mu je, Äi vÅ¡etky poÄÃ­taÄe a procesy majÃº identickÃ½ pohÄ¾ad na adresÃ¡rovÃº hierarchiu. Ako prÃ­klad na pochopenie tohto nÃ¡vrhovÃ©ho rozhodnutia poslÃºÅ¾i obrÃ¡zok 4-7. Na obrÃ¡zku 4-7a sÃº znÃ¡zornenÃ© dva sÃºborovÃ© servery. KaÅ¾dÃ½ z nich obsahuje tri adresÃ¡re a niekoÄ¾ko sÃºborov. Na obrÃ¡zku 4-7b je znÃ¡zornenÃ½ systÃ©m v ktorom mÃ¡ kaÅ¾dÃ½ klient rovnakÃ½ pohÄ¾ad na distribuovanÃ½ sÃºborovÃ½ systÃ©m. PokiaÄ¾ cesta /D/E/x je platnÃ¡ na jednom poÄÃ­taÄi, je automaticky platnÃ¡ na vÅ¡etkÃ½ch ostatnÃ½ch poÄÃ­taÄoch. Na rozdiel od tohto pohÄ¾adu, je na obrÃ¡zku 4-7c znÃ¡zornenÃ¡ moÅ¾nosÅ¥, keÄ mÃ¡ kaÅ¾dÃ½ poÄÃ­taÄ v systÃ©me rÃ´zny pohÄ¾ad na distribuovanÃ½ sÃºborovÃ½ systÃ©m. V porovnanÃ­ s predchÃ¡dzajÃºcim prÃ­kladom mÃ´Å¾e byÅ¥ cesta /D/E/x platnÃ¡ na jednom poÄÃ­taÄi, ale nemusÃ­ byÅ¥ platnÃ¡ na ostatnÃ½ch. V systÃ©moch, ktorÃ© spravujÃº viacero sÃºborovÃ½ch serverov pomocou vzdialenÃ©ho pripÃ¡jania je beÅ¾nÃ¡ prÃ¡ve situÃ¡cia znÃ¡zornenÃ¡ na obrÃ¡zku 4-7c. Tento variant je sÃ­ce flexibilne a priamoÄiaro implementovateÄ¾nÃ½, mÃ¡ vÅ¡ak nevÃ½hody, ktorÃ© zamedzujÃº celÃ©mu systÃ©mu aby sa sprÃ¡val sa ako obyÄajnÃ½ â staromÃ³dny systÃ©m zdieÄ¾ania Äasu. V systÃ©moch zdieÄ¾ania Äasu je pohÄ¾ad na sÃºborovÃ½ systÃ©m pre vÅ¡etky procesy rovnakÃ½ (ako na obrÃ¡zku 4-7b). TÃ¡to vlastnosÅ¥ uÄ¾ahÄuje jednoduchÅ¡ie pochopenie systÃ©mu a tieÅ¾ jeho jednoduchÃ© programovanie. Transparencia mien V systÃ©me zloÅ¾enom z viacerÃ½ch sÃºborovÃ½ch serverov, kde je kaÅ¾dÃ½ z nich samostatnÃ½ (neobsahuje Å¾iadne referencie na adresÃ¡re alebo sÃºbory na inÃ½ch sÃºborovÃ½ch serveroch) mÃ´Å¾me pouÅ¾iÅ¥ ako binÃ¡rne meno sÃºboru ÄÃ­slo lokÃ¡lneho i-uzla, ako je tomu naprÃ­klad aj v systÃ©moch UNIX. Viac vÅ¡eobecnÃ¡ schÃ©ma pomenovania sa dosiahne v prÃ­pade, ak bude binÃ¡rne meno udÃ¡vaÅ¥ tak meno servera ako aj Å¡pecifickÃ½ sÃºbor na tomto serveri. AlternatÃ­vnym spÃ´sobom na dosiahnutie rovnakÃ©ho cieÄ¾a mÃ´Å¾e byÅ¥ pouÅ¾itie symbolickÃ½ch odkazov. SymbolickÃ½ odkaz je poloÅ¾ka adresÃ¡ra ktorÃ¡ sa mapuje na reÅ¥azec (server, meno sÃºboru), ktorÃ½ mÃ´Å¾e byÅ¥ pouÅ¾itÃ½ na vyhÄ¾adanie binÃ¡rneho mena na serveri. SymbolickÃ© meno predstavuje samo o sebe cestu k sÃºboru."
43,439,0.595,Objektovo orientovanÃ© programovanie v C++,"Vektor je najuniverzÃ¡lnejÅ¡ou dÃ¡tovou Å¡truktÃºrou. Ide vlastne o jednorozmernÃ© dynamickÃ© pole, ktorÃ© mÃ´Å¾e obsahovaÅ¥ prvky Ä¾ubovoÄ¾nÃ©ho typu. VeÄ¾kosÅ¥ tohto poÄ¾a je premenlivÃ¡, to znamenÃ¡, Å¾e sa mÃ´Å¾e zmeniÅ¥ kedykoÄ¾vek, keÄ je to potrebnÃ©. Nie je teda napevno danÃ¡ v Äase kompilÃ¡cie, ale ani poÄiatoÄnou alokÃ¡ciou, ako to je charakteristickÃ© pre dynamickÃ© pole alokovanÃ© pomocou operÃ¡tora new[ ]. To je veÄ¾kou vÃ½hodou tejto Å¡truktÃºry â mÃ´Å¾eme do nej pridÃ¡vaÅ¥ prvky prakticky bez obmedzenia (pravdaÅ¾e, obmedzenie je danÃ© fyzickÃ½mi moÅ¾nosÅ¥ami operaÄnej pamÃ¤te) a jej veÄ¾kosÅ¥ sa automaticky prispÃ´sobÃ­ tak, aby sa do nej novÃ© prvky zmestili. PrÃ¡ca s tÃ½mto poÄ¾om sa veÄ¾mi podobÃ¡ na prÃ¡cu s poÄ¾ami, ktorÃ© uÅ¾ poznÃ¡me. Ide o pole s nÃ¡hodnÃ½m prÃ­stupom, Äo znamenÃ¡, Å¾e mÃ´Å¾eme priamo pristupovaÅ¥ k Ä¾ubovoÄ¾nÃ©mu prvku, pouÅ¾iÅ¥ alebo zmeniÅ¥ jeho hodnotu. Tento nÃ¡hodnÃ½ prÃ­stup je rÃ½chly. Äo je vÅ¡ak pomerne pomalÃ©, je vkladanie alebo vymazÃ¡vanie prvku do/z poÄ¾a. Tak ako pri inÃ½ch poliach, s ktorÃ½mi sme sa stretli, novÃ½ prvok mÃ´Å¾eme vloÅ¾iÅ¥ len tak, Å¾e preÅ uvoÄ¾nÃ­me miesto tÃ½m, Å¾e vÅ¡etky prvky za vybranÃ½m miestom poposÃºvame o jedno miesto Äalej. RÃ½chle je len vkladanie na koniec, a preto je to aj najÄastejÅ¡Ã­ spÃ´sob, ako sa do vektora novÃ© prvky vkladajÃº. Rovnako je to aj s vymazanÃ­m prvku. VoÄ¾nÃ© miesto sa zaplnÃ­ len tak, Å¾e vÅ¡etky prvky za nÃ­m posunieme o jedno miesto spÃ¤Å¥. RÃ½chle je opÃ¤Å¥ len vymazanie poslednÃ©ho prvku. Tieto princÃ­py sÃº znÃ¡zornenÃ© na obr. 10.1."
190,362,0.595,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PodÄ¾a Å¡tÃºdie [2] je komunikÃ¡cia medzi zmluvnÃ½mi stranami jednÃ½m z najvÃ¤ÄÅ¡Ã­ch zdrojov rizÃ­k. ProblÃ©mom Äasto bÃ½va fakt, Å¾e medzi Älenmi tÃ­mu, ktorÃ­ realizujÃº projekt a koncovÃ½m pouÅ¾Ã­vateÄ¾om, ktorÃ½ definuje poÅ¾iadavky, stojÃ­ viacero Ä¾udÃ­. TÃ­to ovplyvÅujÃº projekt spÃ´sobom, ktorÃ½ vyplÃ½va z ich postavenia a pozÃ­cie, a potom sa mÃ´Å¾e staÅ¥, Å¾e majÃº rozdielne nÃ¡zory a pohÄ¾ady na konkrÃ©tne Äasti projektu. MyslÃ­m si, Å¾e v sÃºvislosti s tÃ½mto problÃ©mom sa vynÃ¡ra Äasto aj OrganizÃ¡cia tÃ­mu problÃ©m nepochopenia poÅ¾iadaviek zÃ¡kaznÃ­ka a tÃ½m aj nesplnenie jeho je najsilnejÅ¡ou oÄakÃ¡vanÃ­. Za kÄ¾ÃºÄovÃ©, pokladÃ¡m v oblasti komunikÃ¡cie so zÃ¡kaznÃ­kom zbraÅou v snahe tieto problÃ©my: predchÃ¡dzaÅ¥"
205,30,0.595,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy aj pozvÃ¡nku na diskusiu. Niekedy sÃº diskusie tak ohnivÃ©, Å¾e prekroÄia hranice sluÅ¡nosti a Äo je horÅ¡ie, aj etnickej alebo nÃ¡boÅ¾enskej znÃ¡Å¡anlivosti. Kto nesie zodpovednosÅ¥ za zverejÅovanie takÃ½chto nÃ¡zorov? Je prÃ­pustnÃ© alebo naopak Å¾elateÄ¾nÃ© ich mazaÅ¥ (cenzurovaÅ¥)? WebovÃ© sÃ­dlo mÃ´Å¾e byÅ¥ eÅ¡te interaktÃ­vnejÅ¡ie. Wiki je webovÃ© sÃ­dlo, ktorÃ©ho obsah mÃ´Å¾u spoloÄne vytvÃ¡raÅ¥ viacerÃ­ Ä¾udia. Podporuje spoluprÃ¡cu Ä¾udÃ­, ktorÃ­ vÃ´bec nemusia byÅ¥ technicky zdatnÃ­. SociÃ¡lna sieÅ¥ je pÃ´vodne pojem, ktorÃ½ zaviedli v sociÃ¡lnych vedÃ¡ch pri Å¡tÃºdiu vzÅ¥ahov medzi jednotlivcami, skupinami, organizÃ¡ciami alebo dokonca spoloÄnosÅ¥ami. Opisuje sociÃ¡lnu Å¡truktÃºru, urÄenÃº ich interakciami. Å tudoval sa uÅ¾ v prvej polovici dvadsiateho storoÄia, keÄ sa eÅ¡te o poÄÃ­taÄoch a tobÃ´Å¾ o webe nechyrovalo. ZvyÅ¡ujÃºca sa moÅ¾nosÅ¥ interaktÃ­vnosti webovÃ½ch sÃ­del priniesla nÃ¡pad podporiÅ¥ interakciu medzi Ä¾uÄmi poskytnutÃ­m webovÃ©ho sÃ­dla, ktorÃ© umoÅ¾Åuje komukoÄ¾vek vytvoriÅ¥ si akÃ½si osobnÃ½ profil, prehlÃ¡siÅ¥ sa za âpriateÄ¾aâ inej osoby so zverejnenÃ½m profilom alebo pridaÅ¥ sa do jednej Äi viacerÃ½ch skupÃ­n. MomentÃ¡lne je najpopulÃ¡rnejÅ¡ou realizÃ¡ciou takÃ©ho nÃ¡padu sÃ­dlo alebo sluÅ¾ba sociÃ¡lneho zosieÅ¥ovania, nazÃ½vanÃ¡ Facebook. VÃ½voj poslednÃ½ch rokov priniesol aj podporu pÃ­sania a Å¡Ã­renia tzv. mikroblogov, t.j. kratuÄkÃ½ch poznÃ¡mok, ktorÃ© nemajÃº viac neÅ¾ 140 znakov. Tieto aj ÄalÅ¡ie novÃ© moÅ¾nosti sociÃ¡lnej komunikÃ¡cie alebo vzÅ¥ahov v spojitosti s webom sÃº novÃ½mi javmi. StÃ¡vajÃº sa pomaly predmetom skÃºmania sociÃ¡lnych vied [1], ale skÃºmanie sa nezaobÃ­de bez hlbokÃ©ho pochopenia vlastnostÃ­ webu. Na druhej strane, ich pochopenie je nevyhnutnÃ© pre hlbÅ¡ie pochopenie toho, Äo je web. MÃ¡lokto asi bude vÃ¡Å¾ne tvrdiÅ¥, Å¾e oznaÄenie niekoho za âpriateÄ¾aâ v sluÅ¾be sociÃ¡lneho zosieÅ¥ovania robÃ­ z tÃ½chto dvoch Ä¾udÃ­ priateÄ¾ov. Ak vÅ¡ak odhliadneme od tohto oznaÄenia, nejakÃ¡ sociÃ¡lna vÃ¤zba medzi dvoma Ä¾uÄmi vznikÃ¡. Je prÃ­kladom Å¡pecifickÃ©ho sociÃ¡lneho vzÅ¥ahu, ktorÃ½ je podmienenÃ½ existenciou webu. Äaleko viac, hypotÃ©za webovedy znie, Å¾e poznanie vlastnostÃ­ aj takÃ½chto sociÃ¡lnych vÃ¤zieb vznikajÃºcich v prostredÃ­ webu je potrebnÃ© pre jeho lepÅ¡ie pochopenie."
43,21,0.594,Objektovo orientovanÃ© programovanie v C++,"VÅ¡eobecne teda platÃ­, Å¾e prÃ­stup k dÃ¡tam triedy nemÃ¡ byÅ¥ nikdy voÄ¾nejÅ¡Ã­, ako je nevyhnutnÃ©. Takto sa zabezpeÄÃ­ maximÃ¡lna ochrana dÃ¡t pred vonkajÅ¡Ã­mi zÃ¡sahmi, a teda aj bezpeÄnejÅ¡Ã­ chod programu. Ako sme uÅ¾ upozorÅovali, vÃ½hody takÃ©hoto prÃ­stupu sa naplno prejavia aÅ¾ pri rozsiahlejÅ¡Ã­ch programoch, ktorÃ© sa skladajÃº z rÃ´znych ÄastÃ­ a na ktorÃ½ch pracuje viacero programÃ¡torov alebo pri programovanÃ­ kniÅ¾nÃ­c urÄenÃ½ch pre Å¡irÅ¡ie vyuÅ¾itie. Vtedy sa jednak zabezpeÄÃ­, Å¾e niekto, kto nie je Ãºplne oboznÃ¡menÃ½ s celou Å¡truktÃºrou nÃ¡Å¡ho kÃ³du, nespÃ´sobÃ­ chyby prepÃ­sanÃ­m dÃ´leÅ¾itÃ½ch dÃ¡t a na druhej strane ho odbremenÃ­me od Å¡tudovania celÃ©ho nÃ¡vrhu triedy tÃ½m, Å¾e mu poskytneme prÃ­stup len k Ãºdajom, ktorÃ© majÃº preÅho vÃ½znam. Je teda dÃ´leÅ¾itÃ© nauÄiÅ¥ sa takto korektne navrhovaÅ¥ triedy, hoci pri cviÄeniach pÃ´sobÃ­ ukrÃ½vanie dÃ¡t a vytvÃ¡ranie komunikaÄnÃ½ch metÃ³d Äasto Å¥aÅ¾kopÃ¡dne."
369,148,0.594,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"PosÃºdenie zÃ¡vÃ¤zku ZÃ¡vÃ¤zok nemusÃ­ niektorÃ¡ strana prijaÅ¥ automaticky, ale nÃ¡vrh zÃ¡vÃ¤zku mÃ´Å¾e byÅ¥ predmetom komplexnÃ©ho posÃºdenia. NaprÃ­klad uzatvorenie zmluvy, ktorÃ¡ obsahuje kredit partnera (t. j. odoberanie tovaru alebo sluÅ¾ieb do urÄitej vÃ½Å¡ky bez zaplatenia) si mÃ´Å¾e vyÅ¾iadaÅ¥ komplexnÃ© posÃºdenie finanÄnej situÃ¡cie partnera na zÃ¡klade jeho ÃºÄtovnÃ½ch dokladov. Podobne Å¾iadosÅ¥ klienta o Ãºver v banke vyvolÃ¡ posÃºdenie jeho schopnosti splÃ¡cania Ãºveru (obr. 3.15) alebo nÃ¡vrh poistnej zmluvy na Å¾ivotnÃ© poistenie klienta si mÃ´Å¾e vyÅ¾iadaÅ¥ posÃºdenie jeho zdravotnÃ©ho stavu na zÃ¡klade lekÃ¡rskeho vyÅ¡etrenia."
265,132,0.594,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Å¡tÃºdiÃ¡ nedokÃ¡Å¾u prenosnosÅ¥ dosiahnuÅ¥ vyuÅ¾itÃ­m nejakej existujÃºcej integrujÃºcej technolÃ³gie (v hernom priemysle napr. Unity), vÃ¤ÄÅ¡inou sa prenosnosÅ¥ou nezaoberajÃº vÃ´bec (napr. rieÅ¡ia ju na poslednom mieste). VÃ½znam bezpeÄnosti pri vÃ½voji a prevÃ¡dzke hier vo vÅ¡eobecnosti nemoÅ¾no urÄiÅ¥ â zÃ¡visÃ­ od Å¡pecifÃ­k hry, ale aj modelu predaja. NaprÃ­klad v prÃ­pade hry pre jednÃ©ho hrÃ¡Äa, ktorÃ¡ sa jednorazovo predÃ¡va prostrednÃ­ctvom obchodov s aplikÃ¡ciami, akÃ© poznÃ¡me z mobilnÃ½ch platforiem (napr. Google Play, iOS AppStore), nie sÃº bezpeÄnostnÃ© rizikÃ¡, ktorÃ© by Å¡pecificky mal rieÅ¡iÅ¥ vÃ½vojÃ¡r hry veÄ¾kÃ©. Gro bezpeÄnÃ©ho predaja a ochrany pred nelegÃ¡lnym kopÃ­rovanÃ­m hry uÅ¾ totiÅ¾ zabezpeÄuje platforma ako takÃ¡. Ani zmena platobnÃ©ho modelu na priebeÅ¾nÃ½, by zrejme neznamenala zvÃ½Å¡enie Ãºsilia na bezpeÄnosÅ¥, pokiaÄ¾ by boli platby stÃ¡le realizovanÃ© prostrednÃ­ctvom mobilnej platformy. ZvÃ½Å¡enie bezpeÄnostnÃ½ch rizÃ­k by ale zrejme priÅ¡lo, ak by sa platby rozhodlo implementovaÅ¥ Å¡tÃºdio samo (napr. preto, Å¾e by mu model ponÃºkanÃ½ mobilnou platformou nevyhovoval). ZvÃ½Å¡enie hrozieb by sme tieÅ¾ zrejme mohli oÄakÃ¡vaÅ¥ pri hrÃ¡ch pre viac hrÃ¡Äov, Å¡peciÃ¡lne tzv. mnoho-hrÃ¡ÄovÃ½ch online hier (MMOG â massive multiplayer online games)."
265,96,0.594,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"V roku 1968 na konferencii NATO. V tom Äase sa ukÃ¡zalo, Å¾e vtedajÅ¡Ã­ spÃ´sob riadenia Äoraz zloÅ¾itejÅ¡Ã­ch softvÃ©rovÃ½ch projektov nestaÄÃ­ a projekty sÃº Äasto neÃºspeÅ¡nÃ©. Toto âuvedomenieâ dalo za vznik softvÃ©rovÃ©mu inÅ¾inierstvu â novej disciplÃ­ne, aktÃ­vne sa zaoberajÃºcej spÃ´sobmi, ako softvÃ©r efektÃ­vne vytvÃ¡raÅ¥. Ako mÃ´Å¾eme aj v sÃºÄasnosti vidieÅ¥ (takmer 50 rokov neskÃ´r), problÃ©my s efektÃ­vnosÅ¥ou tvorby softvÃ©ru stÃ¡le nie sÃº vyrieÅ¡enÃ©. ZnamenÃ¡ to, Å¾e je softvÃ©rovÃ© inÅ¾inierstvo neÃºspeÅ¡nÃ©? Nie. SoftvÃ©rovÃ© inÅ¾inierstvo (vrÃ¡tane vÃ½skumu) Äasom vÅ¾dy naÅ¡lo odpoveÄ na konkrÃ©tne paradigmatickÃ© problÃ©my. NaprÃ­klad problÃ©m prÃ­liÅ¡nej previazanosti sÃºÄiastok softvÃ©ru v 80. rokoch, spÃ´sobenÃ½ vtedy prevlÃ¡dajÃºcou procedurÃ¡lnou paradigmou, bol zmiernenÃ½ vznikom objektovo-orientovanÃ©ho programovania, ktorÃ© oddeÄ¾ovanie zÃ¡leÅ¾itostÃ­"
205,235,0.594,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","14.2 HierarchickÃ© metÃ³dy HierarchickÃ© metÃ³dy [2] vytvÃ¡rajÃº zhluky na zÃ¡klade hierarchickej dekompozÃ­cie mnoÅ¾iny vstupnÃ½ch Ãºdajov. Delia sa na rozdeÄ¾ovacie a zluÄovacie v zÃ¡vislosti od smeru dekompozÃ­cie. RozdeÄ¾ovacie metÃ³dy alebo tieÅ¾ metÃ³dy zhora nadol najprv zaradia vÅ¡etky objekty do jednÃ©ho zhluku. Potom postupne rozdeÄ¾ujÃº tento zhluk na stÃ¡le menÅ¡ie zhluky. Naopak, zluÄovacie metÃ³dy alebo tieÅ¾ metÃ³dy zdola nahor, zaradia kaÅ¾dÃ½ objekt do vlastnÃ©ho zhluku a potom spÃ¡jajÃº zhluky, ktorÃ© sÃº si najpodobnejÅ¡ie. Pri obidvoch smeroch sa dekompozÃ­cia konÄÃ­ v momente splnenia ukonÄovacej podmienky. NevÃ½hodou hierarchickÃ½ch metÃ³d je, Å¾e ak raz rozdelÃ­me alebo spojÃ­me nejakÃ© zhluky, nemoÅ¾no tento krok vrÃ¡tiÅ¥ spÃ¤Å¥. ÄalÅ¡ou nevÃ½hodou je, Å¾e tÃ¡to metÃ³da je vÃ½poÄtovo veÄ¾mi nÃ¡roÄnÃ¡. Preto je niekedy vhodnÃ© pouÅ¾iÅ¥ alternatÃ­vne metÃ³dy, ako naprÃ­klad metÃ³da K-priemerov. Na obrÃ¡zku 56 vidÃ­me zaradenie podobnÃ½ch poloÅ¾iek do zhlukov pouÅ¾itÃ­m hierarchickÃ©ho zhlukovania."
59,717,0.594,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"5. MÃ´Å¾eme diskutovaÅ¥, Äi tÃ¡to schopnosÅ¥ a tendencia je pre âÄ¾udskÃ©ho agentaâ pozitÃ­vna alebo negatÃ­vna Ärta. SÃºÄasnÃ¡ kognitÃ­vna a evoluÄnÃ¡ psycholÃ³gia poskytuje jednoznaÄnÃº odpoveÄ, Å¾e tÃ¡to schopnosÅ¥ je âpoÅ¾ehnanieâ pre Ä¾udskÃ½ druh, umoÅ¾Åuje rÃ½chlu orientÃ¡ciu v zloÅ¾itom materiÃ¡lnom, aj sociÃ¡lnom svete. Bez tejto vlastnosti by jeho Å¡anca preÅ¾itia (fitnes) bola podstatne niÅ¾Å¡ia. 6. Pri zmenenej situÃ¡cii (zmena prÃ­rodnÃ©ho prostredia, sociÃ¡lnej Å¡truktÃºry a pod.) mÃ´Å¾e sa staÅ¥, Å¾e niektorÃ© pouÅ¾Ã­vanÃ© heuristiky sa stanÃº âkontraproduktÃ­vneâ, brzdou ÄalÅ¡ieho rozvoja multiagentovÃ©ho systÃ©mu. Potom sa buÄ danÃ¡ heuristika nahradÃ­ inou, v danej situÃ¡cii vhodnejÅ¡ou, alebo bude pre multiagentovÃ½ systÃ©m predstavovaÅ¥ podstatnÃº bariÃ©ru jeho zachovania a rozvoja. 7. Pre umelÃº inteligenciu (a aj kognitÃ­vnu vedu) je veÄ¾kou vÃ½zvou navrhovaÅ¥ mechanizmy vzniku tÃ½chto heuristÃ­k pouÅ¾itÃ­m prostriedkov poÄÃ­taÄovej inteligencie a sledovaÅ¥ ich kultÃºrny prenos a fixÃ¡ciu pomocou memetickÃ½ch prÃ­stupov v systÃ©me. RieÅ¡enie tohto problÃ©mu spoÄÃ­va hÄ¾adanÃ­ vhodnej stratÃ©gie pre rÃ½chle a efektÃ­vne rieÅ¡enie danÃ©ho problÃ©mu. Pri pouÅ¾itÃ­ evoluÄnÃ½ch algoritmov je potrebnÃ© preto navrhnÃºÅ¥ vhodnÃ© kÃ³dovanie stratÃ©gie, ktorÃ© je dostatoÄne flexibilnÃ© k tomu, aby emergovanÃ© rieÅ¡enia boli dostatoÄne zaujÃ­mavÃ©. 8. MÃ´Å¾eme si poloÅ¾iÅ¥ zÃ¡vereÄnÃº otÃ¡zku, ako je moÅ¾nÃ©, Å¾e u Ä¾udÃ­ s tak nedokonalÃ½m a ohraniÄenÃ½m kognitÃ­vnym orgÃ¡nom, ktorÃ½ pri rieÅ¡enÃ­ problÃ©mov pouÅ¾Ã­va skoro vÃ½luÄne jednoduchÃ© heuristickÃ© postupy, vznikla sofistikovanÃ¡ veda? Ide o veÄ¾mi zloÅ¾itÃ½ problÃ©m, ktorÃ©ho vysvetlenie nie je jednoduchÃ©. Vznik vedy (kognitÃ­vneho artefaktu) v populÃ¡cii agentov, Äo moÅ¾no chÃ¡paÅ¥ ako emergenciu novej kvality, je asi umoÅ¾nenÃ½ tÃ½m, Å¾e v systÃ©me existujÃº spoÄ¾ahlivÃ© memetickÃ© vertikÃ¡lne prenosy poznatkov (mÃ©mov), ktorÃ© zabezpeÄujÃº ich akumulÃ¡ciu v priebehu mnohÃ½ch Å¾ivotnÃ½ch cyklov agentov. Samozrejme, veda nie je lineÃ¡rne ukladanie poznatkov, ktorÃ© spolu nesÃºvisia, je reprezentovanÃ¡ sÃºborom navzÃ¡jom previazanÃ½ch konzistentnÃ½ch poznatkov. Preto musia existovaÅ¥ aj ÄalÅ¡ie âvyÅ¡Å¡ieâ kognitÃ­vne aktivity agentov nad touto sumou poznatkov, ktorÃ© spoÄÃ­vajÃº napr. v odstraÅovanÃ­ nekonzistentnÃ½ch alebo redundantnÃ½ch poznatkov, Äi v induktÃ­vnom zovÅ¡eobecÅovanÃ­ a pod. V dÃ´sledku ohraniÄenej racionality kognitÃ­vneho orgÃ¡nu agentov je tento dvojitÃ½ proces pomalÃ½ a mÃ¡ inkrementÃ¡lny charakter. ProblÃ©m ohraniÄenej racionality reprezentuje pre umelÃº inteligenciu a kognitÃ­vnu vedu zaujÃ­mavÃº a aktuÃ¡lnu novÃº problematiku, ktorÃ¡ doposiaÄ¾ v tÃ½chto oblastiach nebola Å¡tudovanÃ¡. Å tÃºdium vzniku heuristÃ­k pre rieÅ¡enie zloÅ¾itÃ½ch Ãºloh, problÃ©m ich klasifikÃ¡cie podÄ¾a ÃºspeÅ¡nosti, spÃ¡janie rÃ´znych heuristÃ­k do jednej novej heuristiky a pod. reprezentujÃº veÄ¾mi zaujÃ­mavÃ© problÃ©my leÅ¾iace na rozhranÃ­ informatiky a sociÃ¡lnych vied. MetÃ³dy poÄÃ­taÄovej inteligencie (neurÃ³novÃ© siete a evoluÄnÃ© algoritmy) a multiagentovÃ½ch systÃ©mov majÃº pri tÃ½chto Å¡tÃºdiÃ¡ch dÃ´leÅ¾itÃ© postavenie jednotiacej metodiky pre vÃ½skum a opis problematiky ohraniÄenej racionality."
59,348,0.594,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ImplikÃ¡ciu ï¢ïï¢ mÃ´Å¾eme chÃ¡paÅ¥ ako binÃ¡rnu relÃ¡ciu, ktorÃº moÅ¾no holografickÃ½m distribuovanÃ½m spÃ´sobom reprezentovaÅ¥ takto (pozri vzÅ¥ah (6.45)) (6.53) t pïq ï½ op ï impl ï« var1 ï p ï« var2 ï q ktorÃ¡ obsahuje sÃºÄet troch ÄastÃ­, prvÃ¡ ÄasÅ¥ Å¡pecifikuje typ relÃ¡cie (implikÃ¡ciu), druhÃ¡ a tretia ÄasÅ¥ Å¡pecifikuje prvÃº (antedecedent) resp. druhÃº (konzekvent) premennÃº relÃ¡cie implikÃ¡cie. Tento konceptuÃ¡lny vektor reprezentujÃºci relÃ¡ciu implikÃ¡cie mÃ´Å¾e byÅ¥ transformovanÃ½ takto (6.54a) t p ïq ï½ t p ïq ï T (6.54b) T ï½ var1ïª ï pïª ï pïª ï q ï« var2ïª ï qïª ï q ïª ï p TransformovanÃ¡ reprezentÃ¡cie implikÃ¡cie je reprezentuje sÃºÄet dvoch asociatÃ­vnych dvojÃ­c t pïq ï» pïª ï q ï« q ïª ï p (6.55) ktorÃ¡ poskytuje holografickÃº reprezentÃ¡ciu pravidiel modus ponens a modus tollens (6.56a) p ï t pïq ï» q (6.56b) q ï t pïq ï» p PrvÃ½ vzÅ¥ah (6.56a) mÃ´Å¾eme chÃ¡paÅ¥ ako holografickÃº reprezentÃ¡ciu modus ponens (pozri (6.51) a (6.52a)), zatiaÄ¾ Äo druhÃ½ vzÅ¥ah je holografickÃ¡ reprezentÃ¡cia modus tollens (pozri (6.51) a (6.52b)). PodobnÃ½ vÃ½sledok mÃ´Å¾e byÅ¥ zÃ­skanÃ½ aj inÃ½m alternatÃ­vnym spÃ´sobom, ktorÃ½ je zaloÅ¾enÃ½ na disjunktnom tvare implikÃ¡cie (6.57) ï¨ p ï qï© ïº ï¨ p ï qï© DistribuovanÃ¡ reprezentÃ¡cia implikÃ¡cie v tomto alternatÃ­vnom tvare ma tÃºto podobu t pïq ï½ op ï disj ï« var1 ï p ï« var2 ï q (6.58) TransformÃ¡ciou tejto reprezentÃ¡cie dostaneme (porovnaj (6.53)) t pï q ï½ t pï q ï T ï» p ï q ïª ï« q ï pïª (6.59a) (6.59a) T ï½ var1ïª q ïª ï« var2ïª pïª TÃ¡to transformÃ¡cia je podstatne jednoduchÅ¡ia neÅ¾ ako v predchÃ¡dzajÃºcom prÃ­pade (6.54b). PravidlÃ¡ modus ponens a mosus tollens sÃº teraz realizovanÃ© vzÅ¥ahmi podobnÃ½mi s (6.56a-b). Naviac dostÃ¡vame eÅ¡te tieto dve âpravidlÃ¡â"
190,95,0.594,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Proces samotnÃ©ho rozkladu je pomerne zloÅ¾itÃ½. ZatiaÄ¾ nemÃ¡me presnÃ½ kÄ¾ÃºÄ, ktorÃ½m by sme mohli kaÅ¾dÃ½ projekt rozloÅ¾iÅ¥. KaÅ¾dÃ½ projekt je jedineÄnÃ½, a preto si vyÅ¾aduje jedineÄnÃ½ prÃ­stup. VÃ½sledok kvalitnÃ©ho rozkladu prÃ¡ce, v ktorom vÅ¡etky elementy sÃº nezÃ¡vislÃ©, paralelne vykonÃ¡vateÄ¾nÃ© a zÃ¡roveÅ sÃº nastavenÃ© tak, aby rozvinuli aj schopnosti rieÅ¡iteÄ¾ov, sa dÃ¡ prirovnaÅ¥ k umeleckÃ©mu dielu. VytvorenÃ½ strom by mal byÅ¥ podÄ¾a mÅa kompromisom medzi kvalitou a efektivitou a zÃ¡roveÅ by rozloÅ¾enie prÃ¡c malo umoÅ¾ÅovaÅ¥ rozvoj pracovnÃ­kov. Ãplne stopercentnÃ½ takÃ½to rozklad nikdy nebude, ale skÃºsenÃ½ vedÃºci pracovnÃ­k sa snaÅ¾Ã­ tomuto ideÃ¡lnemu modelu priblÃ­Å¾iÅ¥. VzhÄ¾adom na tieto fakty si myslÃ­m, Å¾e kvalitnÃ½ vedÃºci pracovnÃ­k, ktorÃ½ dokÃ¡Å¾e aj zloÅ¾itÃ½ projekt kvalitne s prehÄ¾adom rozloÅ¾iÅ¥, by mal byÅ¥ vo firme vyvÃ¡Å¾enÃ½ zlatom."
265,216,0.593,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Kapitola 2. Etapy Å¾ivotnÃ©ho cyklu softvÃ©ru â¢ SledovateÄ¾nosÅ¥. ZnamenÃ¡, Å¾e v priebehu ÄalÅ¡ieho vÃ½voja vieme poÅ¾iadavku priradiÅ¥ vÃ½vojovÃ½m aktivitÃ¡m, ktorÃ© smerujÃº k jej naplneniu (a v opaÄnom garde teda vieme povedaÅ¥, Äi nieÄo nerobÃ­me zbytoÄne). â¢ ModifikovateÄ¾nosÅ¥. ZnamenÃ¡, Å¾e vieme jednoducho poÅ¾iadavku zmeniÅ¥ bez toho, aby negatÃ­vne dopady na projekt boli veÄ¾kÃ©. â¢ JednoznaÄnosÅ¥. ZnamenÃ¡, Å¾e poÅ¾iadavka je sformulovanÃ¡ tak, Å¾e nedovoÄ¾uje viacerÃ© interpretÃ¡cie (teda sa nemÃ´Å¾e staÅ¥, Å¾e by ju dvaja vÃ½vojÃ¡ri inak pochopili). â¢ ZrozumiteÄ¾nosÅ¥. ZnamenÃ¡, Å¾e je poÅ¾iadavke vÃ½vojÃ¡ri jednoducho rozumejÃº a poÅ¾iadavka nezvÃ¡dza vÄaka svojej formulÃ¡cii k nesprÃ¡vnemu pochopeniu."
184,184,0.593,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"VeÄ¾kÃ½ rozmach neskorÃ½ch 90-tych rokov Ã©ry âdot.comâ a obrovskÃ© mÃ­Åanie do IT sektora je zrejme minulosÅ¥ou. V sÃºÄasnosti vyÅ¾adujÃº spoloÄnosti jasnÃ© urÄenie prÃ­nosov, ktorÃ© im investÃ­cie do IT prinesÃº a akÃº nÃ¡vratnosÅ¥ mÃ´Å¾u oÄakÃ¡vaÅ¥. Ak chceme obmedziÅ¥ mÃ­Åanie a sÃºÄasne naÄalej spÄºÅaÅ¥ naÅ¡e obchodnÃ© ciele, musÃ­me zaÄaÅ¥ pracovaÅ¥ dÃ´myselnejÅ¡ie. SoftvÃ©rovÃ½ priemysel sa snaÅ¾Ã­ hÄ¾adaÅ¥ spÃ´soby ako dosiahnuÅ¥ sÄ¾ubovanÃº zvÃ½Å¡enÃº efektivitu a niÅ¾Å¡ie ceny prispÃ´sobenÃ­m novÃ½ch vÃ½vojovÃ½ch technolÃ³giÃ­ a prÃ­stupov. Objektovo a komponentovo orientovanÃ© technolÃ³gie boli vymyslenÃ©, aby uÄ¾ahÄili nÃ¡vrh a tvorbu znovupouÅ¾iteÄ¾nÃ½ch komponentov, ktorÃ© mÃ´Å¾u byÅ¥ pouÅ¾itÃ© v ÄalÅ¡Ã­ch aplikÃ¡ciÃ¡ch. Vytvor nieÄo raz a pouÅ¾Ã­vaj v podstate bez nÃ¡kladov mnohokrÃ¡t. TÃºto ideu nemÃ´Å¾e nikto odmietnuÅ¥ a je dostatoÄne jednoduchÃ¡ na to, aby jej porozumel aj manaÅ¾ment. Pravda je takÃ¡, Å¾e softvÃ©rovÃ½ priemysel zatiaÄ¾ viac-menej zlyhal v plnenÃ­ sÄ¾ubu znovupouÅ¾iteÄ¾nosti. ÃspeÅ¡nÃ© znovupouÅ¾itie bolo dosiahnutÃ© pre Å¡iroko-pouÅ¾iteÄ¾nÃ© systÃ©my a to vo vÃ¤ÄÅ¡ej miere v komponentoch infraÅ¡truktÃºry akÃ½mi sÃº spojovacÃ­ softvÃ©r a databÃ¡zy. AvÅ¡ak pre systÃ©my, ktorÃ© sÃº vyuÅ¾iteÄ¾nÃ© v menÅ¡ej miere sa znovupouÅ¾iteÄ¾nosÅ¥ nepodarilo uskutoÄniÅ¥. DÃ´vod je jednoduchÃ½ a podrobne opÃ­sanÃ½ v mnohÃ½ch prÃ¡cach v komunite softvÃ©rovÃ½ch inÅ¾inierov."
130,428,0.593,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Akcia ako vplyv Ak chceme modelovaÅ¥ vzÃ¡jomnÃ© interakcie medzi akciami vykonÃ¡vanÃ½mi jednotlivÃ½mi agentmi v tom istom Äase, mÃ´Å¾eme to spraviÅ¥ zmenou konceptu akcie. Namiesto toho, aby bola akcia vyjadrenÃ¡ jej ÃºÄinkom, mÃ´Å¾eme akciu vyjadriÅ¥ ako vplyv na prostredie (Ferber, 1996). SkutoÄnÃ½ ÃºÄinok na prostredie sa potom urÄÃ­ ako vÃ½sledok vplyvov vÅ¡etkÃ½ch sÃºÄasne vykonÃ¡vanÃ½ch akciÃ­ na zÃ¡klade pravidiel, ktorÃ© je moÅ¾nÃ© povaÅ¾ovaÅ¥ za prÃ­rodnÃ© zÃ¡kony danÃ©ho prostredia. PÃ´vodnÃ½ model vykonania operÃ¡tora sa potom zmenÃ­ z:"
184,321,0.593,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"kde prÃ­kaz vykonaj spÃºÅ¡Å¥a dva programy A a B po sebe, jeden po druhom. PokiaÄ¾ oba programy produkujÃº vÃ½stup, oÄakÃ¡va sa, Å¾e vÃ½stup produkovanÃ½ procesom B bude priamo nasledovaÅ¥ za vÃ½stupom z procesu A a to v sÃºbore vystup. SpÃ´sob akÃ½m sa tento stav dosahuje na jednoprocesorovÃ½ch systÃ©moch, je zaloÅ¾enÃ½ na tom, Å¾e v Äase, keÄ Å¡tartuje proces B zdedÃ­ po procese A ukazovateÄ¾ ktorÃ½ je medzi nimi a shellom zdieÄ¾anÃ½. Pri takomto postupe bude prvÃ¡ slabika vÃ½stupu programu B zapÃ­sanÃ¡ hneÄ po poslednej slabike zapÃ­sanej programom A. V prÃ­pade session sÃ©mantiky a bez zdieÄ¾anÃ½ch ukazovateÄ¾ov sÃºborov je nutnÃ© pouÅ¾iÅ¥ Ãºplne inÃ½ mechanizmus aby sa dosiahlo rovnakÃ© sprÃ¡vanie tohto jednoduchÃ©ho shellovskÃ©ho prÃ­kazu. Ãplne odliÅ¡nÃ½m prÃ­stupom ku sÃ©mantike zdieÄ¾ania sÃºborov v distribuovanÃ½ch systÃ©moch je pouÅ¾Ã­vanie takzvanÃ½ch immutable sÃºborov. Pri tomto prÃ­stupe je umoÅ¾nenÃ© vytvoriÅ¥ novÃ½ sÃºbor a vloÅ¾iÅ¥ ho do adresÃ¡ra pod rovnakÃ½m menom ako meno pÃ´vodnÃ©ho sÃºboru, priÄom sa predchÃ¡dzajÃºca verzia sÃºboru stÃ¡va (pod tÃ½mto menom) nedostupnou. Takto je sÃ­ce nemoÅ¾nÃ© modifikovaÅ¥ sÃºbor X, ostÃ¡va vÅ¡ak moÅ¾nosÅ¥ atomicky nahradiÅ¥ sÃºbor X novÃ½m sÃºborom. InÃ½mi slovami: aj keÄ sÃºbor nemÃ´Å¾e byÅ¥ modifikovanÃ½, adresÃ¡r modifikovanÃ½ byÅ¥ mÃ´Å¾e. RozhodnutÃ­m, Å¾e sÃºbory nemÃ´Å¾u byÅ¥ modifikovanÃ© sa eliminuje problÃ©m ako sa dohodnÃºÅ¥ s dvomi procesmi â jednÃ½m z nich, ktorÃ½ zapisuje do sÃºboru a inÃ½m, ktorÃ½ z neho ÄÃ­ta. ProblÃ©m, ktorÃ½ ostÃ¡va je rozhodnutie Äo sa stane v prÃ­pade, ak sa dva procesy snaÅ¾ia nahradiÅ¥ rovnakÃ½ sÃºbor v rovnakom Äase. Ako aj v prÃ­pade session sÃ©mantiky, aj tu sa zdÃ¡ najlepÅ¡Ã­m rieÅ¡enÃ­m nahradenie starÃ©ho sÃºboru najnovÅ¡Ã­m sÃºborom alebo nahradiÅ¥ sÃºbor âdruhÃ½mâ sÃºborom nedeterministicky. Trocha zloÅ¾itejÅ¡Ã­m problÃ©mom je, Äo robiÅ¥ v prÃ­pade, ak je sÃºbor nahradenÃ½ inÃ½m sÃºborom v Äase, keÄ z neho prÃ¡ve ÄÃ­ta nejakÃ½ proces. JednÃ½m z moÅ¾nÃ½ch rieÅ¡enÃ­ je nejakÃ½m spÃ´sobom zabezpeÄiÅ¥ pre ÄÃ­tajÃºceho pokraÄovanie ÄÃ­tania starej verzie sÃºboru, napriek tomu, Å¾e sa uÅ¾ nenachÃ¡dza v Å¾iadnom adresÃ¡ri. Podobne to rieÅ¡i systÃ©m UNIX v ktorom proces, ktorÃ½ otvoril sÃºbor mÃ´Å¾e bez problÃ©mov pokraÄovaÅ¥ v prÃ¡ci s nÃ­m napriek tomu, Å¾e mohol byÅ¥ medziÄasom vymazanÃ½. InÃ½m rieÅ¡enÃ­m je detekcia stavu zmeny sÃºboru a zabrÃ¡nenie jeho ÄalÅ¡ieho ÄÃ­tania tÃ½m, Å¾e operÃ¡cia Read vrÃ¡ti chybu."
265,122,0.593,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"SoftvÃ©r A ukladÃ¡ vÃ½stupy do vlastnÃ©ho efektÃ­vneho formÃ¡tu, ktorÃ©ho tvar nie je znÃ¡my. SoftvÃ©r B ukladÃ¡ vÃ½stupy do Å¡tandardnÃ©ho formÃ¡tu (XML). KtorÃ½ softvÃ©r mÃ¡ menÅ¡iu interoperabilitu? MenÅ¡iu interoperabilitu mÃ¡ softvÃ©r A. VlastnÃ½ (proprietÃ¡rny) formÃ¡t vÃ½stupov znamenÃ¡, Å¾e prÃ­padnÃ­ vÃ½vojÃ¡ri tretÃ­ch strÃ¡n budÃº maÅ¥ viac prÃ¡ce s jeho integrÃ¡ciou s ich softvÃ©rmi. Ak by mali vÃ½stupy k dispozÃ­ciÃ­ aspoÅ ako XML sÃºbory, odpadla by im aspoÅ potreba pÃ­saÅ¥ vlastnÃ½ âparserâ. EfektÃ­vnosÅ¥ formÃ¡tu vÃ½stupov softvÃ©ru A (v tomto prÃ­pade priestorovÃ¡) pritom interoperabilitu nijak nezlepÅ¡uje. V najlepÅ¡om prÃ­pade na Åu nebude maÅ¥ vplyv, v horÅ¡om ju eÅ¡te zhorÅ¡Ã­: priestorovÃ¡ efektÃ­vnosÅ¥ formÃ¡tu sÃºboru ide totiÅ¾ Äasto na Ãºkor ÄitateÄ¾nosti Älovekom, Äo sa prenÃ¡Å¡a aj do zvÃ½Å¡enÃ©ho Ä¾udskÃ©ho Ãºsilia potrebnÃ©ho na integrÃ¡ciu takÃ©hoto formÃ¡tu do inÃ½ch softvÃ©rov. PoznÃ¡mka: otÃ¡zka mÃ¡ samozrejme zmysel len za predpokladu, Å¾e porovnÃ¡vame softvÃ©ry, ktorÃ½ch vÃ½stupom je zhodnÃ½ obsah vÃ½stupnÃ½ch dÃ¡t a zaoberÃ¡me sa len ich formou."
190,231,0.593,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,KaÅ¾dodennÃ© Äinnosti ako uhasenie smÃ¤du nemoÅ¾no povaÅ¾ovaÅ¥ za projekt. Vo vÅ¡eobecnosti projektom rozumieme Äasovo ohraniÄenÃ© Ãºsilie s cieÄ¾om dosiahnutia jedineÄnÃ©ho vÃ½sledku. UhasenÃ½ smÃ¤d sa za Å¾iadnych okolnostÃ­ nedÃ¡ povaÅ¾ovaÅ¥ za jedineÄnÃ½ vÃ½sledok. Tento cieÄ¾ dosahujeme neustÃ¡le.
130,112,0.592,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ImplementÃ¡cia Vzor potrebuje maÅ¥ vytvorenÃº reÅ¥az objektov. Pri vytvÃ¡ranÃ­ reÅ¥aze sa mÃ´Å¾u vyuÅ¾iÅ¥ existujÃºce prepojenia, alebo sa mÃ´Å¾u definovaÅ¥ novÃ©. Ak neexistujÃº vopred danÃ© odkazy pre definovanie reÅ¥aze, musÃ­me ich zaviesÅ¥ sami. V tomto prÃ­pade trieda SpracovateÄ¾ definuje nie len rozhranie pre Å¾iadosti, ale aj udrÅ¾uje nÃ¡slednÃ­ka. Å½iadosÅ¥ vstupujÃºca do reÅ¥aze mÃ´Å¾e byÅ¥:"
130,556,0.592,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"HypermediÃ¡lne systÃ©my zvyÄajne zdieÄ¾ajÃº spoloÄnÃ© prvky architektÃºry. Abstrakciu architektÃºry moÅ¾no opÃ­saÅ¥ referenÄnÃ½m modelom. Na ich Å¡pecifikÃ¡ciu sa pouÅ¾Ã­vajÃº rÃ´zne techniky opisu. Jednou z moÅ¾nostÃ­ je formÃ¡lna Å¡pecifikÃ¡cia pomocou Å¡pecifikaÄnÃ©ho jazyka s definovanou syntaxou a sÃ©mantikou jednotlivÃ½ch prvkov jazyka, ako aj odvodzovacÃ­mi pravidlami. ÄalÅ¡ou z moÅ¾nostÃ­ je opis pomocou semiformÃ¡lnych technÃ­k, naprÃ­klad pomocou diagramov alebo inÃ½ch Å¡truktÃºrovanÃ½ch dÃ¡t. NajintuitÃ­vnejÅ¡Ã­m spÃ´sobom Å¡pecifikÃ¡cie je neformÃ¡lny opis, najÄastejÅ¡ie pomocou prirodzenÃ©ho jazyka. FormÃ¡lne techniky vyjadrujÃº Å¡pecifikÃ¡ciu zvyÄajne najpresnejÅ¡ie. V praxi sa mnohokrÃ¡t vyuÅ¾Ã­va kombinÃ¡cia viacerÃ½ch technÃ­k Å¡pecifikÃ¡cie. Existuje niekoÄ¾ko referenÄnÃ½ch modelov hypermediÃ¡lnych (hypertextovÃ½ch) systÃ©mov. DajÃº sa rozdeliÅ¥ do dvoch skupÃ­n, podÄ¾a spÃ´sobu Å¡pecifikÃ¡cie modelov:"
135,123,0.592,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.2.2 Reakcia na udalosti Ke je potrebnÃ© reagova na vstupnÃ© udalosti, pouÅ¾ije sa vzor Obaova alebo ZÃ¡stupca. Dosiahne sa tak, Å¾e s vonkajÅ¡Ã­m zdrojom udalostÃ­ mÃ´Å¾eme pracova ako so zdrojom vnÃºtornÃ½m. SÃºiastky, ktorÃ© reagujÃº na vnÃºtornÃ© udalosti, sÃº potom vytvÃ¡ranÃ© na zÃ¡klade nÃ¡vrhovÃ©ho vzoru Pozorovate (angl. Observer), ktorÃ½ je na obrÃ¡zku 1-10 v kapitole 1. Zdroj udalostÃ­ je tu zobrazenÃ½ ako pozorovatenÃ½ subjekt. KaÅ¾dÃ½ pozorovate, ktorÃ½ chce prijÃ­ma udalos, sa zaregistruje u zodpovedajÃºceho subjektu volanÃ­m jeho metÃ³dy Pripoj. Subjekt pri zmene svojho stavu metÃ³dou Notifikuj volÃ¡ metÃ³du Aktualizuj kaÅ¾dÃ©ho zaregistrovanÃ©ho pozorovatea. Pozorovate si nÃ¡sledne vyÅ¾iada novÃ½ stav subjektu. Ke uÅ¾ nechce pozorovate prijÃ­ma alÅ¡ie udalosti od tohto subjektu, odregistruje sa volanÃ­m metÃ³dy Odpoj. Sprehadnenie procesu posielania, rozdeovania a spracovania udalostÃ­ umoÅ¾uje manaÅ¾Ã©r udalostÃ­, ktorÃ©ho zapojenie do celÃ©ho procesu je znÃ¡zornenÃ© na obrÃ¡zku 2-7. Prideuje"
236,183,0.592,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Tento prÃ­kaz sa normÃ¡lne oddeÄ¾uje voÄ¾nÃ½m riadkom pred a za prÃ­kazom. V prÃ­pade, Å¾e sa mÃ¡ medzera udrÅ¾ovaÅ¥ aj na zaÄiatku (konci) strany a medzi dvoma strÃ¡nkami, pouÅ¾ite namiesto \vspace hviezdiÄkovÃº verziu prÃ­kazu \vspace*. PrÃ­kaz \stretch spolu s prÃ­kazom \pagebreak sa mÃ´Å¾e pouÅ¾iÅ¥ na napÃ­sanie textu na poslednÃ½ riadok strany, prÃ­padne na zvislÃ© vycentrovanie strany. NejakÃ½ text \ldots \vspace{\stretch{1}} Toto bude napÃ­sanÃ© na poslednom riadku strany.\pagebreak V prÃ­pade, Å¾e chceme zvÃ¤ÄÅ¡iÅ¥ medzery medzi riadkami toho istÃ©ho odseku alebo vo vnÃºtri tabuÄ¾ky, mÃ´Å¾eme namiesto prÃ­kazu \\ pouÅ¾iÅ¥ prÃ­kaz: \\[dÄºÅ¾ka]"
190,239,0.592,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Älenovia tretej skupiny mÃ´Å¾u strÃ¡viÅ¥ mesiace prÃ¡cou, ktorÃ¡ nezodpovedÃ¡ poÅ¾iadavkÃ¡m. Pritom samotnÃ¡ strata Äasu mÃ´Å¾e byÅ¥ tÃ½m najmenÅ¡Ã­m problÃ©mom. Ak sa takÃ½to vÃ½sledok integruje do celÃ©ho systÃ©mu, tento sa nÃ¡sledne stane chybnÃ½m. VÃ¡Å¾nosÅ¥ zÃ¡visÃ­ aj od veÄ¾kosti a dÃ´leÅ¾itosti chybnej Äasti. MÃ´Å¾e sa tieÅ¾ staÅ¥, Å¾e Älenovia tretej skupiny sa vo svojej domnienke, Å¾e vedia, o Äo ide, rozhodnÃº dÃ¡vaÅ¥ âradyâ Älenom prvej skupiny a tÃ½mto ich takpovediac presÃºvaÅ¥ do svojej skupiny."
195,212,0.592,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"VÃ½sledky sa dajÃº zobraziÅ¥ krivkou, kde na osi x bol poÄet vyÅ¾iadanÃ½ch odporÃºÄanÃ­ a na osi y bol poÄet sprÃ¡vne odporuÄenÃ½ch â ObrÃ¡zok 12.1. Pri nÃ¡hodnej metÃ³de nÃ¡hodne vyberali, Äo danÃ©ho ÃºÄastnÃ­ka mÃ´Å¾e zaujÃ­maÅ¥. Pri Å¡tandardnej metÃ³de iÅ¡lo o maticu (kaÅ¾dÃ½ vstup pouÅ¾Ã­vateÄ¾a predstavoval jeho zÃ¡ujem), ako sme uÅ¾ uviedli vyÅ¡Å¡ie. Pri binÃ¡rnej metÃ³de bolo pridanÃ© vÃ¡hovanie (vÃ¡hy podÄ¾a poÄtu prÃ­spevkov a podÄ¾a obsahu prÃ­spevku). Nakoniec, inklÃºzia znÃ¡mych dÃ¡t znamenÃ¡ pridanie znÃ¡mych informÃ¡cii o pouÅ¾Ã­vateÄ¾och (rolÃ­ pouÅ¾Ã­vateÄ¾ov a vytvorenie susedov)."
190,341,0.592,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ãsilie, ktorÃ© treba vynaloÅ¾iÅ¥ na zmenu sÃºÄiastky s cieÄ¾om odstrÃ¡niÅ¥ chyby, zvÃ½Å¡iÅ¥ vÃ½konnosÅ¥ alebo inÃ© parametre, prÃ­padne prispÃ´sobiÅ¥ sÃºÄiastku novÃ½m podmienkam sa oznaÄuje ako udrÅ¾ovateÄ¾nosÅ¥. Jej odhadom bÃ½va poÄet riadkov kÃ³du alebo poÄet rozhodovanÃ­ v sÃºÄiastke. AlternatÃ­vnym vyhodnotenÃ­m bÃ½va poÄet vstupno-vÃ½stupnÃ½ch premennÃ½ch."
43,382,0.592,Objektovo orientovanÃ© programovanie v C++,"8.4 Predeï¬novanie metÃ³d rodiÄovskej triedy OdvodenÃ¡ trieda zdedÃ­ od svojej rodiÄovskej triedy vÅ¡etky metÃ³dy okrem konÅ¡truktora a deÅ¡truktora. NeznamenÃ¡ to vÅ¡ak, Å¾e ich musÃ­ pouÅ¾Ã­vaÅ¥ presne v tej istej forme, v akej ich preberie. OdvodenÃ¡ trieda mÃ¡ oproti svojmu rodiÄovi vÅ¾dy nejakÃ© prvky navyÅ¡e, Äo sa mÃ´Å¾e prejaviÅ¥ v jednotlivÃ½ch metÃ³dach â ich funkÄnosÅ¥ sa mÃ´Å¾e rozÅ¡Ã­riÅ¥ alebo aj Ãºplne zmeniÅ¥. JednÃ½m z cieÄ¾ov objektovo orientovanÃ©ho programovania je poskytnÃºÅ¥ programÃ¡torovi dostatok moÅ¾nostÃ­, aby kÃ³d mohol byÅ¥ pruÅ¾nÃ½, rozÅ¡Ã­riteÄ¾nÃ½ a Ä¾ahko upraviteÄ¾nÃ½. Preto aj v rÃ¡mci dediÄnosti majÃº odvodenÃ© triedy moÅ¾nosÅ¥ upraviÅ¥ si zdedenÃ© metÃ³dy podÄ¾a svojich potrieb. TakÃ©to modiï¬kovanie zdedenÃ½ch metÃ³d sa nazÃ½va predeï¬novanie alebo prehodnotenie, angl. overriding. Ak chceme zdedenÃº metÃ³du upraviÅ¥, musÃ­me ju v odvodenej triede znova deklarovaÅ¥ a potom ju aj deï¬novaÅ¥. PravdaÅ¾e, aj tu platia istÃ© pravidlÃ¡ hovoriace, do akej miery sa mÃ´Å¾e metÃ³da zmeniÅ¥. ZatiaÄ¾ Äo obsah metÃ³dy sa mÃ´Å¾e zmeniÅ¥ Ä¾ubovoÄ¾ne, musÃ­ zostaÅ¥ zachovanÃ½ typ"
184,353,0.591,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"5 VYUÅ½ITIE ZNALOSTÃ Z WIKIPÃDIE PRI HÄ½ADANÃ VyhÄ¾adÃ¡vanie informÃ¡ciÃ­ na webe sa stalo beÅ¾nou ÄinnosÅ¥ou vÃ¤ÄÅ¡iny InternetovÃ½ch pouÅ¾Ã­vateÄ¾ov. TakÃ½to pouÅ¾Ã­vatelia majÃº na vÃ½ber viacerÃ© vyhÄ¾adÃ¡vacie systÃ©my, ale v sÃºÄasnosti je veÄ¾mi dominantnÃ½ a ÃºspeÅ¡nÃ½ systÃ©m Google, ktorÃ½ pouÅ¾Ã­va algoritmus PageRank. Ale vÃ½voj sa nezastavil a objavili sa novÃ© algoritmy ako naprÃ­klad ExpertRank systÃ©mu Teoma, alebo HITS algoritmus vyvÃ­janÃ½ v rÃ¡mci projektu CLEVER. TÃ¡to kapitola mapuje prostredie webu, systÃ©m kolaboratÃ­vnej encyklopÃ©die WikipÃ©dia, Äalej poskytuje prehÄ¾ad sÃºÄasnÃ½ch vyhÄ¾adÃ¡vacÃ­ch technolÃ³giÃ­. Zameriavame sa na niektorÃ© projekty, ktorÃ© zÃ­skavajÃº a pouÅ¾Ã­vajÃº znalosti obsiahnutÃ© v encyklopÃ©dii WikipÃ©dia. CieÄ¾om vÃ½skumu je moÅ¾nosÅ¥ pouÅ¾iÅ¥ znalosti obsiahnutÃ© v systÃ©me WikipÃ©dia pri hÄ¾adanÃ­ na webe a jeho realizÃ¡cia pomocou rozÅ¡Ã­renia algoritmu QDPageRank."
393,182,0.591,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"MyFreddy vytvorili ako webovÃº pospolitosÅ¥ zaloÅ¾enÃ¡ na hlasovanÃ­ pouÅ¾Ã­vateÄ¾ov. KÄ¾ÃºÄovÃ½mi vlastnosÅ¥ami systÃ©mu sÃº: Â podpora viacerÃ½ch typov dÃ¡t. Podporuje sa je niekoÄ¾ko typov dÃ¡t (text, obrÃ¡zky, zvuk, video) a jazykov; Â Ä¾ahkÃ¡ navigÃ¡cia; Â obsah sa ÄerpÃ¡ vÃ½luÄne od pouÅ¾Ã­vateÄ¾ov. PouÅ¾Ã­vateÄ¾skÃ© rozhranie umoÅ¾Åuje pouÅ¾Ã­vateÄ¾om pridÃ¡vaÅ¥ do systÃ©mu rÃ´zny obsah. Na druhej strane pouÅ¾Ã­vateÄ¾ mÃ´Å¾e monitorovaÅ¥, ako obsah, ktorÃ½ pridal, Äalej prijÃ­majÃº ostatnÃ­ na zÃ¡klade ich hlasovania; Â zÃ¡bavnÃ½ obsah. Obsah sa zredukuje na takÃ½, ktorÃ½ produkuje zÃ¡bavu: anekdoty, komiksy, kreslenÃ© vtipy; Â jadrom systÃ©mu je vizuÃ¡lny webovÃ½ agent; Â rozÅ¡Ã­renÃ¡ analÃ½za dÃ¡t. SÃºÄasÅ¥ou portÃ¡lu sÃº algoritmy narÃ¡bania s dÃ¡tami a analÃ½zy zbieranÃ½ch dÃ¡t: vÃ½ber nasledujÃºceho dokumentu na hlasovanie, odporÃºÄanie dokumentov pouÅ¾Ã­vateÄ¾om, predpovedanie hlasovania, zdruÅ¾ovanie prÃ­buznÃ½ch dokumentov."
40,93,0.591,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Pokud je nÃ¡Å¡ Å¡patnÃ½ ÃºÅednÃ­k svÄdomitÃ½, mÅ¯Å¾e se stÃ¡t, Å¾e jej povÃ½Å¡Ã­ a pÅestÄhuje se do velkÃ© kancelÃ¡Åe s velkÃ½m stolem, poÄÃ­taÄem, tiskÃ¡rnou, registraturou na Å¡anony a akvÃ¡riem. Zde jiÅ¾ ÃºÅednÃ­k potÅebuje znÃ¡t vÃ­ce cest neÅ¾ jen od svÃ© Å¾idle ke dveÅÃ­m. MusÃ­ umÄt zajÃ­t si pro vytisknutÃ© dokumenty, odtud je zanÃ©st do registratury a Äas od Äasu nakrmit rybiÄky. V hlavÄ tedy nosÃ­ jakousi mapu kancelÃ¡Åe, do kterÃ© mÃ¡ zaznaÄeno, jak pÅechÃ¡zet mezi jednotlivÃ½mi mÃ­sty (obr. 13). VÅ¡imnÄme si, Å¾e pro samotnÃ½ pohyb jsou dÅ¯leÅ¾itÃ¡ pouze mÃ­sta a cesty â z obrÃ¡zku by klidnÄ mohl zmizet stÅ¯l Äi podstavec s akvÃ¡riem. K samotnÃ©mu pohybu nepotÅebujeme vÄdÄt, Å¾e obchÃ¡zÃ­me stÅ¯l nebo Å¾e se vyhÃ½bÃ¡me podstavci s akvÃ¡riem, dÅ¯leÅ¾itÃ¡ je pro nÃ¡s pouze informace cest, po kterÃ½ch se mÅ¯Å¾eme bezpeÄnÄ pohybovat. JinÃ½mi slovy nÃ¡Å¡ ÃºÅednÃ­k nepotÅebuje vidÄt, staÄÃ­ mu chodit po pamÄti (pÅedstavte si, Å¾e jdete v noci na zÃ¡chod a praskla Å¾Ã¡rovka). ProblÃ©m s mapou na obr. 13 je, Å¾e poÄet cest je kvadratickÃ½ vzhledem k poÄtu vrcholÅ¯ â musÃ­me se umÄt dostat odkudkoli kamkoli (snad aÅ¾ na triviÃ¡lnÃ­ cesty typu akvÃ¡rium â akvÃ¡rium). Pokud bychom chtÄli do takovÃ©hoto grafu zahrnout i kancelÃ¡Åe podÅÃ­zenÃ½ch, neÅku-li celou budovu ÃºÅadu, dostaneme se rychle do problÃ©mÅ¯. UrÄitÄ vÃ¡s napadÃ¡ jednoduchÃ½ trik. BliÅ¾Å¡Ã­m pohledem na cesty v kancelÃ¡Åi zjistÃ­me, Å¾e cesta od Å¾idle ÃºÅednÃ­ka k tiskÃ¡rnÄ je velice podobnÃ¡ cestÄ k akvÃ¡riu, liÅ¡Ã­ se jen dodateÄnÃ½m krokem k akvÃ¡riu. MÅ¯Å¾eme tedy zruÅ¡it cestu Å¾idle â akvÃ¡rium a zapamatujeme si, Å¾e cesta od Å¾idle k akvÃ¡riu vede pÅes tiskÃ¡rnu. PodobnÃ½m zpÅ¯sobem upravÃ­me vÅ¡echny cesty, kterÃ© majÃ­ nÄkterÃ© ÄÃ¡sti spoleÄnÃ© (obr. 14). Vznikne nÃ¡m tak graf, kterÃ©mu se ÅÃ­kÃ¡ navigaÄnÃ­, a jeho vrcholy se oznaÄujÃ­ jako navigaÄnÃ­ body (âway pointsâ nebo takÃ© ânavigation pointsâ Äi zkrÃ¡cenÄ ânavpointsâ). OdpovÄÄ na otÃ¡zku âkudy mÃ¡ agent jÃ­t?â se tak mÄnÃ­ na Ãºkol nalezenÃ­ cesty v grafu z vÃ½chozÃ­ho mÃ­sta do poÅ¾adovanÃ©ho cÃ­le. ObecnÄ se jednÃ¡ o Ãºlohu nalezenÃ­ nejkratÅ¡Ã­ cesty v grafu s kladnÃ½m ohodnocenÃ­m hran. Ãlohu mÅ¯Å¾eme ÅeÅ¡it napÅÃ­klad pomocÃ­ Dijkstrova algoritmu [18], A* [52] Äi FloydWarshallovÃ½m algoritmem [17]. Mohlo by se zdÃ¡t, Å¾e takovÃ½to graf je vÅ¡e, co nÃ¡Å¡ virtuÃ¡lnÃ­ agent potÅebuje k bezpeÄnÃ©mu pohybu po ÃºÅadÄ. AvÅ¡ak opak je pravdou. NÃ¡Å¡ graf je totiÅ¾ statickÃ½; je vytvoÅen s pÅedstavou, Å¾e zdi kancelÃ¡Åe se nezmÄnÃ­ pÅes noc, nÃ¡bytkem nikdo nebude hÃ½bat a po cestiÄkÃ¡ch se nebudou pohybovat jinÃ­ ÃºÅednÃ­ci. Co kdyÅ¾ ale stejnÃ½ graf vyuÅ¾Ã­vÃ¡ vÃ­cero ÃºÅednÃ­kÅ¯ a stÅetnou se na chodbÄ? Zde je jeÅ¡tÄ pomoc jednoduchÃ¡: zkombinujeme hledÃ¡nÃ­ cesty v grafu s navigaÄnÃ­mi pravidly popsanÃ½mi vÃ½Å¡e. Ale co kdyÅ¾ nÄjakÃ½ zlomyslnÃ­k schvÃ¡lnÄ Å¡oupne v noci se stolem uprostÅed kancelÃ¡Åe a pÅehradÃ­ cestu v grafu? Co kdyÅ¾ dojde k pÅestavbÄ ÃºÅadu a do kancelÃ¡Åe povedou novÃ© dveÅe nebo starÃ© budou zazdÄny? Ukazuje se, Å¾e nÃ¡Å¡ Å¡patnÃ½ ÃºÅednÃ­k bude opÄt chytÅejÅ¡Ã­ neÅ¾ virtuÃ¡lnÃ­ agent. ÃÅednÃ­k si jednoduÅ¡e pÅestavÃ­ svou mapu v hlavÄ a pÅizpÅ¯sobÃ­ se novÃ½m podmÃ­nkÃ¡m. Toto âpÅizpÅ¯sobenÃ­â agentÅ¯m jiÅ¾ jde hÅ¯Åe, ale i je dokÃ¡Å¾eme nauÄit, aby svÅ¯j graf umÄli revidovat (viz dÃ¡le)."
94,120,0.591,Sprievodca svetom vedeckÃ©ho publikovania,"4.4 LimitÃ¡cie recenznÃ©ho konania RecenznÃ© konanie je sÃ­ce ÃºÄinnou kontrolou kvality vedeckej prÃ¡ce, mÃ¡ vÅ¡ak svoje limity. Preto nemoÅ¾no tvrdiÅ¥, Å¾e kaÅ¾dÃ¡ prÃ¡ca uverejnenÃ¡ v recenzovanom Äasopise hlÃ¡sa nespochybniteÄ¾nÃº pravdu â je iba skontrolovanÃ¡ niekoÄ¾kÃ½mi Ä¾uÄmi. Napriek veÄ¾kÃ©mu Ãºsiliu dochÃ¡dza aj v prestÃ­Å¾nych Äasopisoch k opravÃ¡m, dokonca aj k stiahnutiu uÅ¾ publikovanÃ½ch ÄlÃ¡nkov, ak vyjdÃº najavo skutoÄnosti spochybÅujÃºce korektnosÅ¥ metodiky alebo vedeckÃº etiku autorov. Recenzent sa v mnohÃ½ch ohÄ¾adoch musÃ­ spoÄ¾ahnÃºÅ¥ na dobrÃ© mravy autora â Å¾e uviedol vÅ¡etkÃ½ch, ktorÃ­ k vÃ½skumu prispeli svojou prÃ¡cou, nepripisuje zÃ¡sluhy niekomu, kto na experimente v skutoÄnosti nepracoval, Å¾e uskutoÄnil experimenty tak, ako tvrdÃ­ a dodrÅ¾al etickÃ© zÃ¡sady (napr. pri zaobchÃ¡dzanÃ­ s laboratÃ³rnymi zvieratami, pri zÃ­skavanÃ­ biologickÃ©ho materiÃ¡lu, Äi informovanÃ©ho sÃºhlasu od pacientov â podrobnejÅ¡ie v kapitole 5). Recenzent mÃ´Å¾e skontrolovaÅ¥ jazykovÃº a terminologickÃº strÃ¡nku, prÃ­padne to, Äi mÃ¡ autor dobrÃ½ prehÄ¾ad v problematike a zvolil si rozumnÃ½ dizajn Å¡tÃºdie, Äi je jeho prÃ­stup novÃ¡torskÃ½, alebo opakuje to, Äo uÅ¾ robili inÃ­ (opakovanie experimentov nie je sÃ­ce prÃ­liÅ¡ populÃ¡rne a nedostane autora do najlepÅ¡Ã­ch Äasopisov, ale v koneÄnom dÃ´sledku prispieva k overovaniu vedeckÃ½ch hypotÃ©z eÅ¡te vÃ½znamnejÅ¡ie ako recenznÃ© konanie), Äi sa jeho prÃ¡ca hodÃ­ tam, kam ju poslal, Äi sÃº jeho metÃ³dy primeranÃ© a vhodne opÃ­sanÃ©, Äi sÃº precÃ­zne realizovanÃ© (skÃºsenÃ½ pozorovateÄ¾ to mÃ´Å¾e odhadnÃºÅ¥ z dokumentÃ¡cie), Äi autor zodpovedajÃºco opÃ­sal to,"
190,455,0.59,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"jovÃ©ho kÃ³du, nÃ­zkonÃ¡kladovosÅ¥, preberanie prÃ¡ce druhÃ½ch a s tÃ½m sÃºvisiaca motivÃ¡cia k vytvÃ¡raniu Å¡tandardov, sÃº niektorÃ½mi z mnohÃ½ch prÃ­kladov. ExistujÃº viacerÃ© organizÃ¡cie, ktorÃ© podporujÃº takÃ½to vÃ½voj, niektorÃ© si vybrali len jeden alebo niekoÄ¾ko menej konkrÃ©tnych projektov. SÃº tu aj organizÃ¡cie snaÅ¾iace sa v globÃ¡le podporovaÅ¥ a zlepÅ¡ovaÅ¥ vÃ½voj otvorenÃ½ch projektov, na Äele stojÃ­ NadÃ¡cia otvorenÃ©ho softvÃ©ru (angl. Open Software Foundation, OSF). Jednou z nich je aj SoftvÃ©rovÃ¡ nadÃ¡cia Apache (Apache Software Foundation, ASF). Do jej inkubaÄnÃ©ho systÃ©mu sa mÃ´Å¾e zapojiÅ¥ hocijakÃ½ otvorenÃ½ softvÃ©r, ktorÃ½ Å¾iada o financie. ASF mÃ¡ zÃ¡ujem vytvÃ¡raÅ¥ komunity a ich prÃ¡cu na takÃ½chto projektoch podporovaÅ¥, no musÃ­ sa jednaÅ¥ o projekt, ktorÃ½ ma potenciÃ¡l byÅ¥ ÃºspeÅ¡nÃ½. PrÃ¡ve na zistenie tejto skutoÄnosti je vhodnÃ© projekt najprv istÃ½ Äas monitorovaÅ¥ a aÅ¾ potom vykonaÅ¥ kroky vedÃºce k pomoci. Rovnako aj rozbehnutÃ© projekty mÃ´Å¾u byÅ¥ poÄas vÃ½voja ohrozenÃ© rÃ´znymi rizikami, naprÃ­klad nedostatkom alebo vystÃºpenÃ­m kÄ¾ÃºÄovÃ½ch vÃ½vojÃ¡rov, Äo mÃ´Å¾e maÅ¥ za nÃ¡sledok stratenie viery a motivÃ¡cie prispievateÄ¾ov a komunity. SituÃ¡cia, kedy bol projekt v minulosti ÃºspeÅ¡nÃ½, ale cieÄ¾ovÃ½ trh sa zmenil a o Å¡pecifickÃº technolÃ³giu nemusÃ­ byÅ¥ Äalej zÃ¡ujem, tieÅ¾ neprospieva motivÃ¡cii vÃ½vojÃ¡rov. OtÃ¡zka znie: ako mÃ¡me efektÃ­vne monitorovaÅ¥ otvorenÃ½ vÃ½voj a odhaliÅ¥ rizikovÃ© momenty, keÄ sa beÅ¾nÃ© metÃ³dy pouÅ¾iÅ¥ nedajÃº? Jednou z moÅ¾nostÃ­je vyuÅ¾itie udalostnÃ½ch systÃ©mov pri monitorovanÃ­ vÃ½voja prÃ¡ve otvorenÃ©ho softvÃ©ru."
111,56,0.59,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"UvedenÃ© informÃ¡cie mÃ´Å¾ete pouÅ¾iÅ¥ na: â¢ NÃ¡jdite najÄastejÅ¡ie triedenÃ© karty pre kaÅ¾dÃº kategÃ³riu a pouÅ¾ite ich ako reprezentantov obsahu, ktorÃ½ do nej patrÃ­. â¢ VyhodnoÅ¥te, v ktorÃ½ch kategÃ³riÃ¡ch sa respondenti najviac nezhodujÃº a primerane ich preznaÄte. â¢ Zistite, Äi niektorÃº z kategÃ³riÃ­ respondenti ignorovali, aby ste sa ju mohli pokÃºsiÅ¥ premenovaÅ¥ alebo Ãºplne vyradiÅ¥. â¢ ZÃ­skajte rÃ½chle odpovede, ak ste na zber nÃ¡zorov pouÅ¾ili triedenie kariet (napr. âToto sa mi pÃ¡Äiââ, âToto mi je Ä¾ahostajnÃ©â, âToto sa mi nepÃ¡Äiâ)."
343,74,0.59,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"transakciu neskÃ´r ako ostatnÃ­. VÃ½sledkom je, Å¾e existuje niekoÄ¾ko verziÃ­ pravdy o tom, akÃ© poradie je spravodlivÃ©. Dohoda medzi geograficky distribuovanÃ½mi autoritami, alebo uzlami, musÃ­ prebehnÃºÅ¥ pred konÅ¡trukciou kaÅ¾dÃ©ho bloku. Z toho vyplÃ½va tzv. podmienka synchronizÃ¡cie, teda uzly musia medzi sebou rÃ½chlo komunikovaÅ¥ a poskytnÃºÅ¥ dostatok dÃ¡t na to, aby bolo moÅ¾nÃ© vytvoriÅ¥ rozhodnutie. KeÄ vznikÃ¡ novÃ½ blockchain a jeho komunita autorÃ­t, kolÃ¡torov, alebo stakerov je eÅ¡te obmedzenÃ¡, je Å¥aÅ¾kÃ© dosiahnuÅ¥ dostatoÄnÃº synchronizÃ¡ciu. VÄaka rozsahu a kvalite Polkadot blockchainu mÃ´Å¾eme vytvoriÅ¥ novÃ© blockchainy, ktorÃ© sÃº odvodenÃ© a priamo interoperabilnÃ© s Polkadotom. TakÃ©to blockchainy je moÅ¾nÃ© vytvÃ¡raÅ¥ cez Substrate a z neho odvÃ¡dzaÅ¥ ÄalÅ¡ie podmienky. V rÃ¡mci Polkadotu a Substrate vytvÃ¡rajÃº nielen novÃ© mechanizmy, ale pridÃ¡vajÃº aj biznis logiku na blockchain a menia princÃ­py komunikÃ¡cie medzi uzlami a spÃ´sobom, akÃ½m sÃº transakcie a bloky vykonanÃ©. NespoliehajÃº sa len na to, Å¾e poskytnutÃ¡ bezpeÄnosÅ¥ je dostatoÄnÃ¡, a preto pridÃ¡vajÃº ÄalÅ¡ie Å¡ifrovanie transakciÃ­, aby ich boti nevideli. Toto je zobrazenÃ© na obrÃ¡zku 27. VÃ½hodou Mangaty je, Å¾e sÃº plne auditovanÃ½ a majÃº veÄ¾mi vysokÃ© bezpeÄnostnÃ© kontroly. Na to slÃºÅ¾ia naprÃ­klad aj bezpeÄnostnÃ© audity a penetraÄnÃ© testy. ExistujÃº firmy, ktorÃ© skÃºmajÃº kÃ³d a sÃº Å¡pecializovanÃ© na Substrate framework. PrechÃ¡dzajÃº cez celÃ½ kÃ³d, robia penetraÄnÃ© testy a skÃºmajÃº, ako bezpeÄnÃ© sÃº mechanizmy. Jednou z vÃ½hod aplikaÄne Å¡pecifickÃ½ch blockchainov je to, Å¾e slÃºÅ¾ia len na jednu Ãºlohu alebo aplikÃ¡ciu. Preto je Å¡kÃ¡lovateÄ¾nosÅ¥ pre nich dÃ´leÅ¾itejÅ¡ia ako pre vÅ¡eobecnÃ© blockchainy, ako je naprÃ­klad Ethereum. KeÄ na Ethereum mÃ¡te svoju DeFi aplikÃ¡ciu, musÃ­te sÃºÅ¥aÅ¾iÅ¥ o vÃ½konnosÅ¥ a dostupnosÅ¥ dÃ¡t s NFT. KeÄ mÃ¡te aplikaÄne Å¡pecifickÃ½ blockchain s rovnakou dostupnosÅ¥ou, rÃ½chlosÅ¥ou a vÃ½konnosÅ¥ou, uÅ¾ len to, Å¾e tam existuje iba jedna aplikÃ¡cia, robÃ­ blockchain efektÃ­vnejÅ¡Ã­m a problÃ©my so Å¡kÃ¡lovateÄ¾nosÅ¥ou sÃº menej podstatnÃ©. Ak by ale nestaÄilo, Mangata mÃ¡ niekoÄ¾ko stratÃ©giÃ­ na Å¡kÃ¡lovanie. Jedna z nich umoÅ¾Åuje vyuÅ¾iÅ¥ vÃ½hody polkadotovÃ©ho ekosystÃ©mu. MÃ´Å¾u vytvoriÅ¥ ÄalÅ¡Ã­ blockchain a pripojiÅ¥ ho k polkadotu rovnakÃ½mi mechanizmami, ako je pripojenÃ¡ Mangata na to, aby vykonÃ¡val rovnakÃ© transakcie paralelne. Tento mechanizmus vychÃ¡dza z logiky shardingu, ktorÃ¡ je aplikovanÃ¡ pre Ethereum"
190,287,0.59,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Je zaujÃ­mavÃ©, Å¾e nie vÅ¾dy vieme povedaÅ¥, kto urobil chybu. Ak zadÃ¡vateÄ¾ a vÃ½vojÃ¡r nepracujÃº v rovnakej oblasti, Äasto sa stÃ¡va, Å¾e pouÅ¾Ã­vajÃº rozdielnu terminolÃ³giu alebo si vÃ´bec nerozumejÃº. BÃ½va rovnako Å¥aÅ¾kÃ© pre zadÃ¡vateÄ¾a vyjadriÅ¥, Äo skutoÄne potrebuje ako pre vÃ½vojÃ¡ra pochopiÅ¥, Äo sa mu zadÃ¡vateÄ¾ snaÅ¾Ã­ vysvetliÅ¥. Chyby vÅ¡ak mÃ´Å¾u robiÅ¥ aj manaÅ¾Ã©ri. ProjektovÃ­ manaÅ¾Ã©ri bÃ½vajÃº Äasto tÃ½mi Ä¾uÄmi, ktorÃ­ vypracÃºvajÃº aj plÃ¡ny rizÃ­k a keÄÅ¾e kaÅ¾dÃ½ radÅ¡ej hÄ¾adÃ¡ chyby a problÃ©my mimo seba, rizikÃ¡ tÃ½kajÃºce sa manaÅ¾mentu sa Äasto podceÅujÃº aÅ¾ ignorujÃº. Ak si nedÃ¡me pozor na tieto hrozby uvedenÃ© vyÅ¡Å¡ie, mÃ´Å¾eme sa Ä¾ahko dostaÅ¥ do problÃ©mov spÃ´sobeChyby mÃ´Å¾u nÃ½ch najmÃ¤ tÃ½mito faktormi:"
205,34,0.59,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","2 ZÃ¡klady webu Web je jednÃ½m z Ä¾udskÃ½ch vÃ½tvorov, ale aj napriek tomu je tajomnou a neprebÃ¡danou oblasÅ¥ou. DneÅ¡nÃ½ web sa skladÃ¡ z obrovskÃ©ho mnoÅ¾stva uzlov a prepojenÃ­ a tvorÃ­ tak jednu z najvÃ¤ÄÅ¡Ã­ch grafovÃ½ch sÃºstav. Web si v nedÃ¡vnej minulosti zÃ­skal veÄ¾kÃº popularitu a tak sa tÃ¡to oblasÅ¥ stala veÄ¾mi zaujÃ­mavou nielen pre vÃ½skumnÃ­kov, ale aj pre beÅ¾nÃ½ch pouÅ¾Ã­vateÄ¾ov. VÄaka tomu sa na webe nachÃ¡dza obrovskÃ© mnoÅ¾stvo informÃ¡ciÃ­. SÃº vÅ¡ak publikovanÃ© v neÅ¡truktÃºrovanej forme a je nutnÃ© hÄ¾adaÅ¥ cesty ich spracovania a zÃ­skavania pridanej hodnoty z tÃ½chto Ãºdajov. Okrem toho priÅ¡iel web aj s novÃ½m sociÃ¡lnym rozmerom, ktorÃ½ prinÃ¡Å¡a do oblasti webu veÄ¾kÃ© vÃ½hody, ale aj radu nevÃ½hod v podobe straty sÃºkromia. V dneÅ¡nej dobe sa web stÃ¡va neoddeliteÄ¾nou sÃºÄasÅ¥ou Ä¾udskÃ©ho Å¾ivota. V poÄiatkoch bol poÄÃ­taÄ vecou, ktorÃº vedeli vyuÅ¾Ã­vaÅ¥ iba skutoÄnÃ­ nadÅ¡enci. Postupne sa vÅ¡ak poÄÃ­taÄe stÃ¡le viac udomÃ¡cÅovali v domovoch beÅ¾nÃ½ch Ä¾udÃ­. S prÃ­chodom webu sa tento rozmach dostÃ¡va nielen do domÃ¡cnosti, ale aj do vreciek pouÅ¾Ã­vateÄ¾ov v podobe prenosnÃ½ch (mobilnÃ½ch) zariadenÃ­ ako sÃº tzv. mobily (v minulosti znÃ¡me aj ako mobilnÃ© telefÃ³ny). ObrovskÃ½ rozmach webu je vidieÅ¥ najmÃ¤ od prÃ­chodu âwebu 2.0â. Web od tohto momentu zÃ­skal sociÃ¡lny efekt, Äo ho zakorenilo eÅ¡te hlbÅ¡ie do Ä¾udskÃ½ch Å¾ivotov. Dnes je absolÃºtne beÅ¾nÃ©, Å¾e sÃº Ä¾udia pripojenÃ­ na internet zo svojich mobilov, zverejÅujÃº fotografie alebo videÃ¡ z odÄ¾ahlÃ½ch ÄastÃ­ Zeme alebo zisÅ¥ujÃº aktuÃ¡lnu dopravnÃº situÃ¡ciu priamo na cestÃ¡ch z auta."
190,115,0.59,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V poslednom desaÅ¥roÄÃ­ sa objavil novÃ½ prÃ­stup k prezentÃ¡cii informÃ¡ciÃ­ pouÅ¾Ã­vateÄ¾om. Ide o takzvanÃ© Ãºlohovo orientovanÃ© pouÅ¾Ã­vateÄ¾skÃ© rozhranie (angl. task-based user interface) [1]. Je zaloÅ¾enÃ© na predpoklade, Å¾e pouÅ¾Ã­vateÄ¾ chce maÅ¥ k dispozÃ­cii Å¡irokÃ© spektrum funkciÃ­ v rÃ¡mci jednÃ©ho nÃ¡stroja, ale vÃ¤ÄÅ¡inou potrebuje iba malÃº ÄasÅ¥ celkovej funkcionality. To umoÅ¾Åuje znÃ­Å¾iÅ¥ riziko informaÄnÃ©ho zahltenia a zefektÃ­vÅuje prÃ¡cu v tÃ­me. Samozrejme tento prÃ­stup vyÅ¾aduje, aby Älovek, ktorÃ½ zadÃ¡va Ãºlohy vedel posÃºdiÅ¥ kontext, v ktorom bude musieÅ¥ jeho tÃ­movÃ½ kolega pracovaÅ¥. Ãlohovo nÃ© rozhranie tieÅ¾ nesmie obmedziÅ¥ pouÅ¾Ã­vateÄ¾a v prÃ­stupe ku kompletnÃ½m informÃ¡ciÃ¡m v prÃ­pade potreby. Asi najznÃ¡mejÅ¡Ã­m projektom vyuÅ¾Ã­vajÃºcim tento prÃ­stup vo vÃ¤ÄÅ¡ej miere je Eclipse [3]. TÃ¡to jeho Ärta sa dÃ¡ eÅ¡te posilniÅ¥ napr. rozÅ¡Ã­renÃ­m Mylyn, ktorÃ© moÅ¾no napojiÅ¥ na centrÃ¡lnu sprÃ¡vu Ãºloh a takÃ½mto spÃ´sobom pristupovaÅ¥ jednotnÃ½m spÃ´sobom k ÃºlohÃ¡m od poÄiatoÄnÃ©ho Å¡tÃ¡dia projektu."
43,432,0.59,Objektovo orientovanÃ© programovanie v C++,"9.4 NetypovÃ© parametre Å¡ablÃ³n ZatiaÄ¾ sme si Å¡ablÃ³ny predstavili v spojitosti s dÃ¡tovÃ½mi typmi, ktorÃ© boli ich parametrami. VoliteÄ¾nosÅ¥ dÃ¡tovÃ½ch typov je aj najÄastejÅ¡Ã­m dÃ´vodom pre vyuÅ¾itie Å¡ablÃ³n. V skutoÄnosti vÅ¡ak Å¡ablÃ³ny mÃ´Å¾u maÅ¥ aj inÃ©, netypovÃ© parametre, teda parametre, ktorÃ© nepredstavujÃº dÃ¡tovÃ½ typ, ale nejakÃ½ inÃ½ Ãºdaj, ktorÃ½ sa mÃ´Å¾e meniÅ¥. Vytvorme generickÃº triedu obrazok, ktorÃ¡ bude reprezentovaÅ¥ 2D obrÃ¡zok a bude maÅ¥ tri parametre â typ dÃ¡t obrÃ¡zku T a jeho rozmery m a n, ktorÃ© budÃº typu int. Rozmery obrÃ¡zku budÃº teda netypovÃ½mi parametrami Å¡ablÃ³ny. Trieda bude obsahovaÅ¥ staticky alokovanÃ© dvojrozmernÃ© pole pixel s rozmermi m, n, v ktorom budÃº uloÅ¾enÃ© farby jednotlivÃ½ch pixelov. MetÃ³da Pixel vrÃ¡ti farbu vybranÃ©ho pixelu. template<class T, int n , int m > class obrazok private: T pixel[m][n]; public: T Pixel(int i, int j) {return pixel[i][j];}"
129,7,0.59,Sprievodca licenciami Creative Commons,"utorskÃ© prÃ¡vo1 AkademickÃ© dielo je zvyÄajne chrÃ¡nenÃ© autorskÃ½m zÃ¡konom. Pri tradiÄnÃ½ch modeloch publikovania monografiÃ­ a inÃ½ch predmetov ochrany poÅ¾aduje vydavateÄ¾ od autora buÄ doÄasnÃ© alebo trvalÃ© udelenie autorskÃ½ch prÃ¡v, aby vydavateÄ¾ mohol generovaÅ¥ finanÄnÃ½ zisk z knihy. MedzinÃ¡rodnou ochranou autorskÃ½ch prÃ¡v sa zaoberÃ¡ SvetovÃ¡ organizÃ¡cia duÅ¡evnÃ©ho vlastnÃ­ctva (WIPO, World Intellectual Property Organization) - organizÃ¡cia OSN na ochranu priemyselnÃ©ho vlastnÃ­ctva a prÃ¡v autorov literÃ¡rnych a umeleckÃ½ch diel. Slovensko je Älenom od 1. januÃ¡ra 1993. ZÃ¡klad zmlÃºv WIPO tvorÃ­ ParÃ­Å¾sky dohovor o ochrane priemyslovÃ©ho vlastnÃ­ctva z r. 1883 a BernskÃ½ dohovor o ochrane literÃ¡rnych a umeleckÃ½ch diel z r. 1886 (ÄSR pristÃºpilo k dohovoru v r. 1921, k parÃ­Å¾skemu zneniu Dohovoru z r.1971 pristÃºpilo ÄSSR v roku 1980). Zmluvu WIPO o autorskom prÃ¡ve (WTC), tzv. internetovÃº zmluvu, ratifikovalo Slovensko v roku 1999 a pre SlovenskÃº republiku zmluva nadobudla platnosÅ¥ v r.2002. Zdroje: https://eur-lex.europa.eu/legal-content/SK/LSU/?uri=CELEX:22000A0411(01) https://sk.wikipedia.org/wiki/Bernsk%C3%A1_dohoda_o_ochrane_liter%C3%A1rnych_ a_umeleck%C3%BDch_diel https://sk.wikipedia.org/wiki/Svetov%C3%A1_organiz%C3%A1cia_du%C5%A1evn%C3 %A9ho_vlastn%C3%ADctva"
369,32,0.59,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 1.1. Triedy a asociÃ¡cie RelÃ¡cie medzi dÃ¡tovÃ½mi entitami, ako si vysvetlÃ­me neskÃ´r, mÃ´Å¾u byÅ¥ viacerÃ½ch typov. NajvÅ¡eobecnejÅ¡Ã­m typom relÃ¡cie je asociÃ¡cia nachÃ¡dzajÃºca sa v naÅ¡om diagrame. AsociÃ¡cia patrÃ­ medzi symetrickÃ© relÃ¡cie: MuÅ¾ je v manÅ¾elstve so Å½enou a zÃ¡roveÅ Å½ena je v manÅ¾elstve s tÃ½m istÃ½m MuÅ¾om. Diagram tried mÃ¡ generickÃ½ charakter. Vyjadruje vÅ¡eobecnÃ© skutoÄnosti z reÃ¡lneho sveta, nie ich konkrÃ©tne prÃ­pady. Obsahuje triedy, ktorÃ© reprezentujÃº dÃ¡tovÃ© typy, na rozdiel od ich inÅ¡tanciÃ­ (objektov), ktorÃ© predstavujÃº konkrÃ©tne prvky dÃ¡tovÃ©ho typu. Podobne predstavujÃº relÃ¡cie v diagrame tried typy vzÅ¥ahov, nie ich konkrÃ©tne inÅ¡tancie. Medzi inÅ¡tanciami tried existujÃº inÅ¡tancie relÃ¡ciÃ­ podÄ¾a relÃ¡ciÃ­ definovanÃ½ch v diagrame tried.11 VzÅ¥ah medzi triedami a ich inÅ¡tanciami schematicky znÃ¡zorÅuje nasledujÃºci prÃ­klad (obr. 1.2). V prÃ­klade mÃ¡ trieda MuÅ¾ dve inÅ¡tancie: Miller a Lasica. Dve inÅ¡tancie mÃ¡ aj"
135,79,0.59,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Vzor FarebnÃ© sekcie (obrÃ¡zok 1-13) rÃ´znymi farbami zvÃ½razuje rozdielne podasti rozsiahlejÅ¡ej aplikÃ¡cie alebo webovej strÃ¡nky. PouÅ¾itie rÃ´znych farieb nielen skrÃ¡Å¡uje navrhnutÃ© rozhranie, ale aj uahuje pouÅ¾Ã­vateom orientÃ¡ciu potom, ako si vÅ¾ijÃº zvolenÃ© kombinÃ¡cie farieb a podasti aplikÃ¡cie. FarboslepÃ­ pouÅ¾Ã­vatelia vÅ¡ak mÃ´Å¾u ma problÃ©m orientova sa vÃ½hradne poda farieb a farby by preto nemali by jedinÃ½m rozliÅ¡ovacÃ­m kritÃ©riom. Na zvÃ½raznenie sa mÃ´Å¾e pouÅ¾i aj tunÃ© pÃ­smo."
265,149,0.589,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"HlavnÃ½ cieÄ¾ manaÅ¾mentu projektu je zabezpeÄiÅ¥, aby bol oÄakÃ¡vanÃ½ vÃ½slednÃ½ vÃ½robok alebo sluÅ¾ba dodanÃ½ vÄas, v dohodnutom rozsahu a v rÃ¡mci definovanÃ©ho rozpoÄtu. Inak povedanÃ©, vÃ½robok alebo sluÅ¾bu chceme dodaÅ¥ v zodpovedajÃºcej kvalite (pozor, netÃ½ka sa len produktu, ale aj procesu). VzÅ¥ah medzi tÃ½mito tromi veliÄinami nazÃ½vame aj trojuholnÃ­k manaÅ¾mentu projektu (Obr. 1.9), ktorÃ½ predstavuje akÃ½si model ohraniÄenÃ­ projektu. DodrÅ¾anie tÃ½chto ohraniÄenÃ­ v praxi nie je vÃ´bec jednoduchÃ©. DÃ´vody sÃºvisia so Å¡pecifickÃ½mi vlastnosÅ¥ami softvÃ©ru (alebo problÃ©mami pri tvorbe softvÃ©ru), ktorÃ© sa odrÃ¡Å¾ajÃº aj do problÃ©mov manaÅ¾mentu softvÃ©rovÃ©ho projektu (pozri otÃ¡zku 1.3.12). MÃ´Å¾e sa staÅ¥ (aj sa Äasto stÃ¡va), Å¾e pri rieÅ¡enÃ­ projektu potrebujeme zmeniÅ¥ jednu z troch veliÄÃ­n. Zmena Å¾iadnej veliÄiny sa nezaobÃ­de bez zmeny ostatnÃ½ch dvoch. NaprÃ­klad, ak sa zvÃ¤ÄÅ¡Ã­ rozsah projektu (napr. na podnet zÃ¡kaznÃ­ka), narastie aj Äas a/alebo nÃ¡klady projektu. AkÃ½ veÄ¾kÃ½ bude tento vplyv,"
41,17,0.589,InformaÄnÃ© vzdelÃ¡vanie,"POZNÃMKA: Asi najÄalej v ochrane prÃ¡v autorov, ako aj v odhaÄ¾ovanÃ­ plagiÃ¡torstva sÃº AmeriÄania. Aj my sme sa inÅ¡pirovali ich zisteniami. Najviac sme chceli rozoberaÅ¥ odsek o prÃ­liÅ¡nom spoliehanÃ­ sa na prÃ¡cu inÃ½ch Ä¾udÃ­. A to aj v sÃºvislosti so skriptami. KeÄ sme sa ale pozreli na skriptÃ¡ podobnÃ©ho charakteru, zdalo sa nÃ¡m, Å¾e ich autor ich napÃ­sal ako sÃºpis citÃ¡ciÃ­ a parafrÃ¡zÃ­ inÃ½ch autorov. Neviem, Äo tam bolo vlastnÃ©. Od tej chvÃ­le radi rozprÃ¡vame, Å¾e v informatike, kde je potrebnÃ© do prÃ¡ce vniesÅ¥ veÄ¾kÃº dÃ¡vku kreativity, sa vÃ¡m to staÅ¥ nemÃ´Å¾e."
184,68,0.589,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"naplnenie poÅ¾iadaviek na atribÃºty kvality â vyber atribÃºt a pridaj mechanizmus na jeho splnenie. PraktickÃ© rieÅ¡enia vÅ¡ak nie sÃº priamoÄiare, pretoÅ¾e atribÃºty kvality nie sÃº od seba nezÃ¡vislÃ© â mÃ´Å¾u sa navzÃ¡jom ovplyvÅovaÅ¥ rozliÄnÃ½mi skrytÃ½mi spÃ´sobmi. NÃ¡vrh, ktorÃ½ spÄºÅa poÅ¾iadavky na jeden atribÃºt kvality mÃ´Å¾e maÅ¥ negatÃ­vny dopad na inÃ½ atribÃºt kvality. Napr. vysoko zabezpeÄenÃ½ systÃ©m mÃ´Å¾e byÅ¥ veÄ¾mi Å¥aÅ¾kÃ© aÅ¾ nemoÅ¾nÃ© integrovaÅ¥ do otvorenÃ©ho prostredia. Vysoko dostupnÃ¡ aplikÃ¡cia mÃ´Å¾e vymeniÅ¥ niÅ¾Å¡iu vÃ½konnosÅ¥ za vyÅ¡Å¡iu dostupnosÅ¥. Pochopenie vplyvov a kompromisov medzi jednotlivÃ½mi poÅ¾iadavkami na atribÃºty kvality a nÃ¡vrh rieÅ¡enia, ktorÃ© predstavuje zmysluplnÃ½ kompromis je jednou z najÅ¥aÅ¾Å¡Ã­ch Ãºloh softvÃ©rovÃ©ho architekta. Nie je jednoducho moÅ¾nÃ© nÃ¡jsÅ¥ rieÅ¡enie, ktorÃ© v plnej miere spÄºÅa Ãºplne vÅ¡etky protichodnÃ© poÅ¾iadavky a je prÃ¡ve Ãºlohou architekta identifikovaÅ¥ problÃ©movÃ© miesta a scenÃ¡re, definovaÅ¥ priority a dokumentovaÅ¥ jednotlivÃ© rozhodnutia pri nÃ¡vrhu. Pochopenie a identifikÃ¡cia poÅ¾iadaviek na kvalitu predstavuje vÅ¡ak len nutnÃ½ predpoklad na nÃ¡vrh vhodnÃ©ho rieÅ¡enia. PozÃ­cia architekta je veÄ¾mi komplikovanÃ¡ aj preto, Å¾e architekt predstavuje styÄnÃ½ bod viacerÃ½ch zÃºÄastnenÃ½ch strÃ¡n a musÃ­ nielen podrobne rozumieÅ¥ atribÃºtom kvality a pouÅ¾itÃ½m technolÃ³giÃ¡m ale aj komunikovaÅ¥ s ostatnÃ½mi ÃºÄastnÃ­kmi. Architekt musÃ­ u zÃ¡kaznÃ­ka podrobne identifikovaÅ¥ poÅ¾iadavky na kvalitu, pretoÅ¾e tieto Äasto nie sÃº dostatoÄne zachytenÃ© v Å¡pecifikÃ¡cii poÅ¾iadaviek na systÃ©m. SÃºÄasne je Ãºlohou architekta diskutovaÅ¥ tolerancie v nÃ¡vrhu, identifikovaÅ¥ podmienky, za ktorÃ½ch moÅ¾no znÃ­Å¾iÅ¥ poÅ¾iadavky na kvalitu a jasne predostrieÅ¥ kompromisy jednotlivÃ½m zÃºÄastnenÃ½m stranÃ¡m tak, aby pochopili âdo Äoho idÃºâ."
43,352,0.589,Objektovo orientovanÃ© programovanie v C++,"CviÄenia 1. Vytvorte triedu komplexne cislo rovnako ako v kapitole 7.1. Potom vytvorte triedu kalkulacka, ktorÃ¡ bude poÄÃ­taÅ¥ druhÃº mocninu celÃ©ho (int), reÃ¡lneho (ï¬oat) a komplexnÃ©ho ÄÃ­sla. VÅ¡etky tri metÃ³dy na vÃ½poÄet mocniny by sa mali volaÅ¥ rovnako. 2. Vytvorte triedu tovar, ktorÃ¡ bude maÅ¥ tri Ãºdaje - nÃ¡zov, cena, za ktorÃº sa tovar nakupuje od dodÃ¡vateÄ¾a a cena, za ktorÃº sa predÃ¡va. Hodnoty Ãºdajov sa nastavia v konÅ¡truktore triedy. Raz za nejakÃ½ Äas dodÃ¡vateÄ¾ zmenÃ­ cenu svojho tovaru. Trieda bude maÅ¥ metÃ³du zmen cenu, ktorÃ¡ vykonÃ¡ prÃ­sluÅ¡nÃº zmenu. TÃ¡to metÃ³da by mala maÅ¥ dve verzie: â¢ Verzia s jednÃ½m parametrom - tÃ½mto parametrom bude suma, o ktorÃº sa zmenÃ­ cena od dodÃ¡vateÄ¾a. Tu predpokladÃ¡me, Å¾e cena, za ktorÃº sa tovar predÃ¡va, sa zmenÃ­ presne o rovnakÃº Äiastku. MetÃ³da teda zmenÃ­ obe ceny o tÃº istÃº sumu. â¢ Verzia s dvoma parametrami - tu uvaÅ¾ujeme tak, Å¾e predajnÃ¡ cena sa nemusÃ­ zmeniÅ¥ o rovnakÃº sumu ako cena od dodÃ¡vateÄ¾a. TakÅ¾e metÃ³da bude maÅ¥ dva parametre - sumy, o ktorÃ© sa zmenia jednotlivÃ© ceny. Nakoniec bude maÅ¥ trieda eÅ¡te metÃ³du, ktorÃ¡ vypÃ­Å¡e Ãºdaje o tovare."
115,19,0.588,Algebra a diskrÃ©tna  matematika,"NiÅ¾Å¡ie uvedenÃ¡ forma dÃ´kazu sa nazÃ½va deduktÃ­vny dÃ´kaz, ktorÃ½ obsahuje: systÃ©m elementÃ¡rnych pojmov, ktorÃ© sÃº pouÅ¾Ã­vanÃ© pri formulÃ¡cii zÃ¡kladnÃ½ch zloÅ¾iek deduktÃ­vneho dÃ´kazu, systÃ©m axiÃ³m (zÃ¡kladnÃ© elementÃ¡rne poznatky, ktorÃ© sÃº pokladanÃ© za evidentnÃ©), pravidlÃ¡ odvodzovania (pomocou ktorÃ½ch sa uskutoÄÅuje dÃ´kaz), vety (deduktÃ­vne poznatky â argumenty), ktorÃ© boli odvodenÃ© z axiÃ³m pomocou pravidiel odvodzovania a ktorÃ© podstatne zjednoduÅ¡ujÃº a skracujÃº dÃ´kazy ÄalÅ¡Ã­ch novÃ½ch deduktÃ­vnych poznatkov."
240,121,0.588,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"vykonÃ¡vanÃ­ cyklu skokom na prÃ­kaz krok-u v riadku 7 (i++). Teda vÃ½pis na riadku 11 sa vykonÃ¡ len pre takÃ© hodnoty i, ktorÃ© sÃº nÃ¡sobky ÄÃ­sla 3. ZostÃ¡va urÄiÅ¥, pre ktorÃ© hodnoty i sa bude telo cyklu vykonÃ¡vaÅ¥. InicializÃ¡cia cyklu nastavÃ­ poÄiatoÄnÃº hodnotu i na 20, krok cyklu ju po jednom zvyÅ¡uje. Dokedy ju budeme zvyÅ¡ovaÅ¥? OdpoveÄ je uvedenÃ¡ na riadku 13, teda potom ako hodnotu i deliteÄ¾nÃº 3 vypÃ­Å¡eme skontrolujeme Äi sme vypÃ­sali hodnotu vÃ¤ÄÅ¡iu ako 40, ak Ã¡no"
59,410,0.588,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Na zÃ¡ver mÃ´Å¾eme konÅ¡tatovaÅ¥, Å¾e sÃ©mantickÃ© tablÃ¡ poskytujÃº jednoduchÃ½ a efektÃ­vny prostriedok pre kontrolu vzÅ¥ahu âtautologickÃ©ho vyplÃ½vaniaâ, ï ï¹ , priÄom nemusÃ­me poznaÅ¥ relatÃ­vne zloÅ¾itÃº syntaktickÃº teÃ³riu dÃ´kazu âlogickÃ©ho vyplÃ½vaniaâ. TaktieÅ¾, sÃ©mantickÃ© tablo je vhodnÃ¡ technika na rieÅ¡enie relÃ¡cie tautologickÃ©ho vyplÃ½vania ï»ïª1 ,...,ïªnï½ pomocou âpartikulÃ¡rnychâ rieÅ¡enÃ­ pre jednotlivÃ© otvorenÃ© vetvy dostaneme rieÅ¡enie, ktorÃ© je sÃ©manticky dÃ´sledok teÃ³rie ï ï½ ï»ïª1 ,...,ïªn ï½ ."
184,283,0.588,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"PouÅ¾itie agentovÃ½ch technolÃ³giÃ­ predstavuje ÄalÅ¡Ã­ stupeÅ abstrakcie pri vytvÃ¡ranÃ­ softvÃ©ru. Agenty ako spolupracujÃºce, distribuovanÃ© a aktÃ­vne zasahujÃºce objekty sÃº vhodnÃ© v prÃ­padoch, keÄ je od vyvÃ­janÃ©ho softvÃ©ru poÅ¾adovanÃ© prispÃ´sobivÃ© sprÃ¡vanie v zloÅ¾itÃ½ch distribuovanÃ½ch prostrediach. ZloÅ¾itosÅ¥ sveta, v ktorom agenty existujÃº a konajÃº mÃ´Å¾e spÃ´sobiÅ¥ problÃ©m pri sprÃ¡vnom rozhodovanÃ­ o proaktÃ­vnosti/reaktÃ­vnosti agenta â ak sa agent sprÃ¡va prÃ­liÅ¡ proaktÃ­vne, mÃ´Å¾e ho zamestnaÅ¥ plnenie bezvÃ½znamnÃ½ch cieÄ¾ov. Je preto dÃ´leÅ¾itÃ© urÄiÅ¥, ktorÃ© ciele mÃ¡ agent plniÅ¥ a za akÃ½ch okolnostÃ­ (Jennings, 2000). KeÄÅ¾e agenty predstavujÃº pomerne vysokÃº abstrakciu, je Å¥aÅ¾kÃ© predpovedaÅ¥ ich sprÃ¡vanie v budÃºcnosti vzhÄ¾adom na ich zloÅ¾itÃ© rozhodovacie mechanizmy a spÃ´soby interakcie. PredstavenÃ© rieÅ¡enia sÃº nÃ¡znakom, kam sa mÃ´Å¾e vÃ½voj softvÃ©ru uberaÅ¥ v budÃºcnosti, keÄÅ¾e metafora agentov je stÃ¡le povaÅ¾ovanÃ¡ za vyvÃ­jajÃºcu sa a prepojenie softvÃ©rovÃ©ho inÅ¾inierstva a agentovÃ½ch systÃ©mov je len v zaÄiatoÄnej fÃ¡ze vÃ½voja. JednÃ½m z prÃ­kladom vznikajÃºcej podpory softvÃ©rovÃ½ch agentov v skorÅ¡Ã­ch fÃ¡zach vÃ½voja softvÃ©ru je rozÅ¡Ã­renie jazyka UML nazÃ½vanÃ© Agent UML (Bauer, 2001)."
265,26,0.588,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"RozptyÄ¾ovanie nedorozumenÃ­ VyuÅ¾Ã­vanie tÃ½chto otÃ¡zok na testoch a skÃºÅ¡kach zviditeÄ¾nilo jeden fenomÃ©n. Ak Å¡tudenti robia pri odpovediach na otÃ¡zky nejakÃ© chyby, tieto chyby sa Äasto opakujÃº, akoby boli v nejakom zmysle systematickÃ©. PodobnÃ© sprÃ¡vanie pozorujeme aj pri diskusiÃ¡ch so Å¡tudentmi a prÃ¡ci na praktickÃ½ch ÃºlohÃ¡ch. Uvedomili sme si, Å¾e nie vÅ¡etko sa dÃ¡ ospravedlniÅ¥ nepozornosÅ¥ou alebo nedÃ´slednou prÃ­pravou Å¡tudentov pred testami a cviÄeniami, ale Å¾e niekde na ceste medzi nami (uÄiteÄ¾mi), lÃ¡tkou, ktorÃº uÄÃ­me a Å¡tudentmi, vznikajÃº nedorozumenia. Uvedomili sme si zÃ¡roveÅ, akÃ© zhubnÃ© tieto nedorozumenia sÃº v predmetoch o softvÃ©rovom inÅ¾inierstve. Ide totiÅ¾ o predmety, ktorÃ© vzhÄ¾adom na predchÃ¡dzajÃºce skÃºsenosti Å¡tudentov akoby viseli vo vÃ¡kuu. Na ich zaÄiatku je naprÃ­klad potrebnÃ© Å¡tudentom vysvetliÅ¥, preÄo sa vÃ´bec nejakou analÃ½zou a nÃ¡vrhom softvÃ©ru zaoberaÅ¥, alebo preÄo testovaÅ¥ softvÃ©r. To je zÃ¡sadnÃ¡ komplikÃ¡cia navyÅ¡e, naprÃ­klad oproti vÃ½uÄbe programovania, ktorÃ©ho âproduktyâ sÃº oveÄ¾a hmatateÄ¾nejÅ¡ie a dÃ´vody, preÄo sa ho uÄiÅ¥, sa javia Å¡tudentom silnejÅ¡ie. Å tudenti majÃº s analÃ½zou, nÃ¡vrhom, testovanÃ­m Äi modelovanÃ­m softvÃ©ru len malÃ© alebo Å¾iadne predchÃ¡dzajÃºce skÃºsenosti. To si uvedomujeme, a aj preto v softvÃ©rovo-inÅ¾inierskych predmetoch doslova âzaÄÃ­name od Adamaâ. No po celÃ½ Äas, Äo princÃ­py softvÃ©rovÃ©ho inÅ¾inierstva pred Å¡tudentmi odvÃ­jame, naÅ¡e vysvetlenia stoja na hlinenÃ½ch nohÃ¡ch nÃ¡Å¡ho vlastnÃ©ho vÃ½kladu, nepodporenÃ© skÃºsenosÅ¥ami posluchÃ¡Äov. KeÄ sa potom do takejto situÃ¡cie dostanÃº nedorozumenia, u Å¡tudentov Ä¾ahko vznikÃ¡ nepochopenie, nezÃ¡ujem aÅ¾ odpor voÄi tÃ½mto predmetom. Tieto nedorozumenia sÃº Äasto eÅ¡te zvÃ½raznenÃ© zdieÄ¾anÃ­m poznatkov medzi Å¡tudentmi navzÃ¡jom. SÃºÄasnÃ© komunikaÄnÃ© prostriedky toto zdieÄ¾anie len podporujÃº. To je veÄ¾kÃ¡ vÃ½hoda, keÄÅ¾e komunikÃ¡cia je zÃ¡kladom kaÅ¾dÃ©ho Ãºspechu, ale je to aj vÃ½znamnÃ© riziko, v prÃ­pade Å¡Ã­renia sa nedorozumenÃ­. ÄastÃ© testovanie Å¡tudentov otÃ¡zkami (prakticky kaÅ¾dÃ½ tÃ½Å¾deÅ vÃ½uÄby na predmetoch) nÃ¡m dalo do rÃºk nÃ¡stroj ako s nedorozumeniami bojovaÅ¥. Ak v niektorom tÃ½Å¾dni dopadla niektorÃ¡ otÃ¡zka âzleâ s opakujÃºcou sa Äastou chybou, bola to prÃ­leÅ¾itosÅ¥ nedorozumenie na prednÃ¡Å¡kach rozbiÅ¥. Touto knihou vÅ¡ak chceme zÃ¡jsÅ¥ eÅ¡te Äalej. V odpovediach na otÃ¡zky sa na ÄastÃ© nedorozumenia vyslovene zameriavame, explicitne na ne poukazujeme a uvÃ¡dzame veci na pravÃº mieru. Na tÃºto knihu by sa ÄitateÄ¾ urÄite nemal pozeraÅ¥ ako na prvÃº a poslednÃº zastÃ¡vku v uÄenÃ­ sa o softvÃ©rovom inÅ¾inierstve. OdporÃºÄame primÃ¡rne ÄÃ­taÅ¥ alebo aspoÅ konzultovaÅ¥ vÃ½kladovÃº literatÃºru a v prÃ­pade Å¡tudentov aj nav-"
393,455,0.588,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"nÃ¡vrhovÃ½mi vzormi zodpovedajÃºcimi detailnÃ©mu nÃ¡vrhu v kontexte objektovo orientovanÃ©ho vÃ½voja softvÃ©ru a budeme vychÃ¡dzaÅ¥ najmÃ¤ z katalÃ³gu (Gamma et al., 1995). V zÃ¡sade neexistujÃº Å¾iadne obmedzenia, ktorÃ© by uprednostnili dogmatickÃ½ alebo nedogmatickÃ½ prÃ­stup k nÃ¡vrhovÃ½m vzorom. OtÃ¡zka mÃ´Å¾e znieÅ¥: ako a kedy sa aplikujÃº nÃ¡vrhovÃ© vzory a ktorÃ½ z prÃ­stupov v tom alebo onom prÃ­pade pouÅ¾iÅ¥? OpÃ¤Å¥ sÃº zauÅ¾Ã­vanÃ© dva zÃ¡kladnÃ© prÃ­stupy kedy a ako nÃ¡vrhovÃ© vzory pouÅ¾iÅ¥. PomÃ´ckou alebo akousi metodikou v prÃ­pade pouÅ¾itia nÃ¡vrhovÃ©ho vzoru mÃ´Å¾u byÅ¥ rÃ´zne metÃ³dy pre prÃ¡cu so vzormi napr.: (Dong, 2002, JakubÃ­k, 2005a, Yacoub & Ammar, 2000), ktorÃ© sÃº viac alebo menej zdokumentovanÃ© v rÃ´znych publikÃ¡ciÃ¡ch. NÃ¡vrhovÃ© vzory sa mÃ´Å¾u pouÅ¾iÅ¥ poÄas Å¡tandardnej fÃ¡zy detailnÃ©ho nÃ¡vrhu, kedy sa podÄ¾a poÅ¾iadaviek a predchÃ¡dzajÃºcej analÃ½zy vzory vyberajÃº na rieÅ¡enie konkrÃ©tnych problÃ©mov. Uprednostnenie pouÅ¾itia dogmatickÃ©ho alebo nedogmatickÃ©ho prÃ­stupu Ãºzko zÃ¡visÃ­ od konkrÃ©tneho prÃ­padu. Ak navrhujeme softvÃ©r takpovediac na zelenej lÃºke, zdÃ¡ sa vhodnejÅ¡ie pouÅ¾iÅ¥ dogmatickÃ½ prÃ­stup, poÄas ktorÃ©ho sÃº jasne identifikovanÃ© vzory, jednotlivÃ© roly vo vzoroch ako i funkcionalita spojenÃ¡ s konkrÃ©tnym vzorom. V prÃ­pade vyuÅ¾itia uÅ¾ vytvorenÃ½ch ÄastÃ­ softvÃ©ru, ktorÃ© sa budÃº meniÅ¥ pre potreby aplikÃ¡cie, je asi vhodnejÅ¡ie pouÅ¾iÅ¥ nedogmatickÃ½ prÃ­stup, s ktorÃ½m zjednoduÅ¡Ã­me samotnÃ½ vÃ½voj, umoÅ¾nÃ­me prispÃ´sobiÅ¥ samotnÃ½ vzor konkrÃ©tnemu pouÅ¾itiu, no vyÅ¾adujeme kvalifikovanÃ©ho nÃ¡vrhÃ¡ra ovlÃ¡dajÃºceho definovanÃº skupinu nÃ¡vrhovÃ½ch vzorov. Ak nÃ¡vrhovÃ© vzory pouÅ¾Ã­vame v Äasti refaktoringu a optimalizÃ¡cie (aj keÄ nie vÃ½konnostnej, keÄÅ¾e sÃºÄasnÃ© nÃ¡vrhovÃ© vzory skÃ´r pridÃ¡vajÃº do nÃ¡vrhu ÄalÅ¡ie vrstvy abstrakcie, novÃ© triedy a samotnÃ© vykonanie funkcionality nie je optimalizovanÃ© z hÄ¾adiska Äasu a vÃ½konu) sÃº vzory ÄastokrÃ¡t modifikovanÃ© v existujÃºcom nÃ¡vrhu alebo vkladanÃ© do ÄastÃ­ nÃ¡vrhu, kde vyÅ¾adujeme vyÅ¡Å¡iu generalicitu a vÅ¡eobecnosÅ¥. PridÃ¡vanie genericity a vÅ¡eobecnosti v koneÄnom dÃ´sledku spÃ´sobuje Ä¾ahÅ¡iu rozÅ¡Ã­riteÄ¾nosÅ¥ a jednoduchÅ¡iu konfigurovateÄ¾nosÅ¥ vÃ½slednÃ©ho softvÃ©rovÃ©ho produktu. V tomto prÃ­pade sa zdÃ¡ vhodnejÅ¡Ã­ nedogmatickÃ½ prÃ­stup z dÃ´vodu moÅ¾nÃ½ch modifikÃ¡ciÃ­ vÅ¡eobecnÃ½ch vzorov, bez potreby prÃ­liÅ¡nÃ©ho upravovania uÅ¾ existujÃºcich ÄastÃ­ systÃ©mu. V tabuÄ¾ke 9-2 uvÃ¡dzame vybranÃ© vlastnosti pouÅ¾itia nÃ¡vrhovÃ½ch vzorov v rÃ´znych etapÃ¡ch vÃ½voja softvÃ©ru pri rÃ´znych prÃ­stupoch."
190,157,0.588,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ak sa dokonalÃ½ plÃ¡n urobiÅ¥ dÃ¡, je hudbou budÃºcnosti. My si budeme musieÅ¥ vystaÄiÅ¥ s âdobrÃ½m plÃ¡nomâ. PokÃºsme sa v nasledujÃºcich riadkoch opÃ­saÅ¥, Äo by v takomto plÃ¡ne malo byÅ¥ zahrnutÃ© a Äomu by sme sa mali radÅ¡ej vyhnÃºÅ¥. PlÃ¡novanie mÃ¡ dopad na vÅ¡etky ostatnÃ© fÃ¡zy procesu tvorby softvÃ©ru. Zle vytvorenÃ½ projektovÃ½ plÃ¡n je preto najÄastejÅ¡Ã­m dÃ´vodom zlyhania procesu tvorby softvÃ©ru. Steve McConnell v [3] opisuje tÃ½chto 9 smrteÄ¾nÃ½ch hriechov plÃ¡novania projektu, ktorÃ½ch sa treba vystrÃ­haÅ¥:"
43,78,0.588,Objektovo orientovanÃ© programovanie v C++,"3.4 VÃ½stup na konzolu a vstup pomocou klÃ¡vesnice VÃ½stup na konzolu a vstup pomocou klÃ¡vesnice zabezpeÄuje v C++ kniÅ¾nica iostream. V nej sÃº deï¬novanÃ© dva zÃ¡kladnÃ© objekty, pomocou ktorÃ½ch sa k obrazovke a klÃ¡vesnici pristupuje. â¢ Objekt cout predstavuje Å¡tandardnÃ© vÃ½stupnÃ© zariadenie, Äo je pri beÅ¾nom poÄÃ­taÄi konzola â textovÃ½ terminÃ¡l alebo prostredie Äi okno obrazovky s Äisto textovÃ½m reÅ¾imom. Je to objekt triedy ostream, teda je to vÃ½stupnÃ½ stream. VÅ¡etky operÃ¡cie s tÃ½mto objektom sa prejavia na konzole. â¢ Objekt cin reprezentuje Å¡tandardnÃ© vstupnÃ© zariadenie, pri beÅ¾nom poÄÃ­taÄi je to klÃ¡vesnica. Ide o objekt triedy istream, teda je to vstupnÃ½ stream. KedykoÄ¾vek sa pokÃºsime zÃ­skaÅ¥ dÃ¡ta z tohto streamu, program bude od uÅ¾Ã­vateÄ¾a oÄakÃ¡vaÅ¥ vstup z klÃ¡vesnice. DÃ¡ta teda vypÃ­Å¡eme na konzolu takto cout<<dÃ¡ta;"
301,1,0.588,Ako sprÃ¡vne vybraÅ¥ sprÃ¡vnych Ä¾udÃ­,"Ako sprÃ¡vne vybraÅ¥ sprÃ¡vnych Ä¾udÃ­ ProgramÃ¡tor sa zÃºÄastnÃ­ streleckÃ©ho vÃ½cviku. Dostal bezpeÄnostnÃº inÅ¡truktÃ¡Å¾, puÅ¡ku a nÃ¡boje. VystrieÄ¾al 10 rÃ¡n a muÅ¾ pri cieli hlÃ¡si, Å¾e Å¾iadna nezasiahla terÄ. Strelec pozerÃ¡ na puÅ¡ku, potom na terÄ. Znova na puÅ¡ku a zasa na terÄ. DÃ¡ prst pred Ãºstie hlavne a druhou rukou stlaÄÃ­ spÃºÅ¡Å¥. PozerÃ¡ sa na krvÃ¡cajÃºci zvyÅ¡ok prsta a zavolÃ¡ na muÅ¾a pri terÄi: âTu je vÅ¡etko v poriadku, chyba musÃ­ byÅ¥ na vaÅ¡ej strane...â PouÄenie: V poÅ¾iadavkÃ¡ch zamestnÃ¡vateÄ¾ov Äasto ÄÃ­tame: âanalytickÃ© myslenie vÃ½hodouâ Je to takto vÅ¾dy najlepÅ¡ie?"
190,260,0.588,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Takto presne definovanÃ½mi cieÄ¾mi sa zbavÃ­me Å¥aÅ¾kopÃ¡dnosti CMMI a naviac PSP definuje aj konkrÃ©tne princÃ­py, ktorÃ© nÃ¡s k spomÃ­nanÃ½m cieÄ¾om dovedÃº. Je vÅ¡ak dÃ´leÅ¾itÃ© poznamenaÅ¥, Å¾e kvalita v softvÃ©rovÃ½ch projektoch nie je samostatnÃ½ pojem a zÃ¡visÃ­ od spÃ´sobu riadenia celÃ©ho projektu. Metodiky podobnÃ© alebo sÃºvisiace s klasickÃ½m PMBOK (Project Management Body of Knowledge) ako UP (Unified Process) alebo CMMI mÃ´Å¾eme zjednoduÅ¡iÅ¥ pre menÅ¡ie projekty, aj keÄ pri menÅ¡Ã­ch projektoch Äasto uvaÅ¾ujeme o pouÅ¾itÃ­ agilnÃ½ch metodÃ­k vÃ½voja softvÃ©ru. AgilnÃ© metodiky programovania a riadenia projektov samostatne nedefinujÃº procesy manaÅ¾mentu, ale sÃºstreÄujÃº sa na prÃ­sne zachovanie urÄitÃ½ch princÃ­pov, v ktorÃ½ch sÃº tieto procesy zahrnutÃ©. Spomeniem niekoÄ¾ko princÃ­pov, ktorÃ© by som zaradil medzi princÃ­py ovplyvÅujÃºce kvalitu, a ktorÃ© mÃ´Å¾eme povaÅ¾ovaÅ¥ za vhodnÃ© princÃ­py pri akejkoÄ¾vek metodike riadenia projektu:"
94,253,0.588,Sprievodca svetom vedeckÃ©ho publikovania,"8.1 ArchivÃ¡cia Osoh z poznatkov, ktorÃ© vedci zÃ­skajÃº pri vÃ½skume, nemusÃ­ byÅ¥ len jednorazovÃ½ a nemusia ho ÄerpaÅ¥ len vedci â je vÅ¡ak potrebnÃ© dÃ¡ta (nespracovanÃ© vÃ½sledky) a informÃ¡cie (zmysluplnÃ©, Å¡truktÃºrovanÃ© poznatky zÃ­skanÃ© spracovanÃ­m dÃ¡t) spoÄ¾ahlivo, dlhodobo a v usporiadanej forme uchovaÅ¥, teda archivovaÅ¥. Rozvoj informaÄnÃ½ch technolÃ³giÃ­ a mÃ©diÃ­ prinÃ¡Å¡a novÃ© spÃ´soby, ako Äoraz kvalitnejÅ¡ie analyzovaÅ¥, prezentovaÅ¥ a vyuÅ¾Ã­vaÅ¥ dÃ¡ta pre potreby vÃ½skumu i kaÅ¾dodennej praxe. Preto mÃ¡ zmysel vÃ½sledky archivovaÅ¥ tak, aby boli prÃ­stupnÃ© (vyhÄ¾adateÄ¾nÃ©) a zrozumiteÄ¾nÃ© verejnosti na celom svete. PrimÃ¡rny ÃºÅ¾itok z otvorenÃ©ho archivovania je zrejmÃ½:"
94,136,0.587,Sprievodca svetom vedeckÃ©ho publikovania,"v medzinÃ¡rodnÃ½ch rebrÃ­Äkoch. Ak univerzita disponuje majetkovÃ½mi prÃ¡vami na diela svojich zamestnancov, potenciÃ¡lnou vÃ½hodou je moÅ¾nosÅ¥ zÃ­skaÅ¥ za ne drobnÃ© finanÄnÃ© odmeny za kniÅ¾niÄnÃ© vÃ½poÅ¾iÄky a reprografickÃ© sluÅ¾by od organizÃ¡ciÃ­ zastupujÃºcich prÃ¡va autorov (napr. LITA60). 2.) dielo na objednÃ¡vku (Â§ 91) â vytvorenÃ© na zÃ¡klade zmluvy o dielo alebo v rÃ¡mci verejnej sÃºÅ¥aÅ¾e. Ak autor vytvoril dielo na objednÃ¡vku, udelil objednÃ¡vateÄ¾ovi sÃºhlas s pouÅ¾itÃ­m diela (ale len na dohodnutÃ½ ÃºÄel â pouÅ¾itie diela na inÃ½ ÃºÄel vyÅ¾aduje sÃºhlas autora). Autor smie dielo sÃ¡m pouÅ¾iÅ¥ a udeliÅ¥ sÃºhlas na jeho pouÅ¾itie, ak to neodporuje oprÃ¡vnenÃ½m zÃ¡ujmom objednÃ¡vateÄ¾a. Ak ide o poÄÃ­taÄovÃ½ program, databÃ¡zu alebo kartografickÃ© dielo, mÃ¡ objednÃ¡vateÄ¾ takÃ© prÃ¡va ako zamestnÃ¡vateÄ¾ pri zamestnaneckom diele. 3.) spoloÄnÃ© dielo (Â§ 92) â dielo vytvorenÃ© z iniciatÃ­vy a pod vedenÃ­m konkrÃ©tnej osoby. TÃ¡to osoba mÃ¡ potom podobnÃ© prÃ¡va ako zamestnÃ¡vateÄ¾ v prÃ­pade zamestnaneckÃ©ho diela. TvorivÃ© vklady jednotlivÃ½ch autorov nie je moÅ¾nÃ© samostatne pouÅ¾iÅ¥. 4.) Å¡kolskÃ© dielo (Â§ 93) â dielo vytvorenÃ© Å¾iakom alebo Å¡tudentom za ÃºÄelom plnenia Å¡kolskÃ½ch povinnostÃ­. Autor je povinnÃ½ uzavrieÅ¥ so Å¡kolou licenÄnÃº zmluvu na nekomerÄnÃ© vyuÅ¾itie diela. Ak autor zÃ­ska za dielo odmenu, Å¡kola z nej mÃ´Å¾e Å¾iadaÅ¥ nÃ¡hradu nÃ¡kladov vynaloÅ¾enÃ½ch na vytvorenie diela. Autorstva sa nemoÅ¾no vzdaÅ¥, ale s autorskÃ½mi prÃ¡vami moÅ¾no rÃ´zne nakladaÅ¥ â rozhodovaÅ¥ o spÃ´sobe pouÅ¾Ã­vania diela napr. udelenÃ­m licencie (povolenia na doÄasnÃ© pouÅ¾Ã­vanie za vopred stanovenÃ½ch podmienok). Licencia mÃ´Å¾e byÅ¥ vÃ½hradnÃ¡, alebo nevÃ½hradnÃ¡. Pri vÃ½hradnom udelenÃ­ licencie nemÃ´Å¾e dielo prÃ­sluÅ¡nÃ½m spÃ´sobom pouÅ¾Ã­vaÅ¥ ani sÃ¡m autor. Ak to v zmluve nie je stanovenÃ©, licencia sa povaÅ¾uje za nevÃ½hradnÃº. VydavateÄ¾skÃ© licencie zvyÄajne bÃ½vajÃº vÃ½hradnÃ©, aby vydavateÄ¾ovi neunikal zisk v prÃ­pade, Å¾e by verejnosÅ¥ mala Å¡ancu moÅ¾nosÅ¥ dostaÅ¥ sa k dielu z inÃ½ch zdrojov (v slovenskom Autorskom zÃ¡kone to neplatÃ­ pre dielo vydanÃ© v periodickej publikÃ¡cii). V otvorenom publikovanÃ­ sa medzinÃ¡rodne pouÅ¾Ã­vajÃº verejnÃ© licencie, najÄastejÅ¡ie typu Creative Commons61, v sÃºÄasnosti vo verzii Creative Commons 4.0 (Creative Commons 2017). Od roku 2013 sÃº verejnÃ© licencie upravenÃ© aj v slovenskom Autorskom zÃ¡kone (Â§76 zÃ¡kona Ä. 185/2015 Z. z.) ako bezodplatnÃ©, vÅ¾dy nevÃ½hradnÃ© licencie, udeÄ¾ujÃºce sÃºhlas na pouÅ¾itie diela vopred neurÄenÃ½m osobÃ¡m. UmoÅ¾ÅujÃº teda komukoÄ¾vek legÃ¡lny, voÄ¾nÃ½ prÃ­stup k dielu, bez obmedzenia prÃ¡v autora. Existuje celÃ½ rad typov licenciÃ­ Creative Commons, ktorÃ© rÃ´zne prÃ­sne upravujÃº moÅ¾nosti vyuÅ¾itia diela. Licencia CC BY (attribution) umoÅ¾Åuje pouÅ¾Ã­vateÄ¾ovi nakladaÅ¥ s dielom slobodne (prezeraÅ¥ si ho, rozmnoÅ¾ovaÅ¥, verejne Å¡Ã­riÅ¥, prekladaÅ¥, vytvÃ¡raÅ¥ odvodeniny, dokonca aj na komerÄnÃ© ÃºÄely), jedinou podmienkou je uvedenie mena autora. Skratka NC (non-commercial, naprÃ­klad CC BY-NC) pridÃ¡va podmienku vyuÅ¾Ã­vaÅ¥ dielo iba 60 http://www.lita.sk/ 61 https://creativecommons.org/licenses/by/4.0/"
76,36,0.587,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.10 PrÃ­klad. V Å¡katuli mÃ¡me loptiÄky oÄÃ­slovanÃ© ÄÃ­slami 1 aÅ¾ 9. Realizujme nÃ¡hodnÃ½ vÃ½ber rozsahu 3 bez vrÃ¡tenia a za vÃ½sledok povaÅ¾ujme usporiadanÃº trojicu ÄÃ­sel. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e vÃ½sledok vÃ½beru vytvorÃ­ rastÃºcu postupnosÅ¥? RieÅ¡enie. PoÄet vÅ¡etkÃ½ch moÅ¾nÃ½ch usporiadanÃ½ch vÃ½berov bez vrÃ¡tenia sa rovnÃ¡ sÃºÄinu 9ï8ï7 = 504 (podÄ¾a 1.2.4). Nech A znamenÃ¡ udalosÅ¥, Å¾e vÃ½ber skonÄÃ­ rastÃºcou postupnosÅ¥ou troch ÄÃ­sel. Treba nÃ¡jsÅ¥ |A|. PretoÅ¾e ide o trojice rÃ´znych prvkov, vÅ¾dy Å¡iestim prÃ­padom odpovedÃ¡ jeden, priaznivÃ½ pre udalosÅ¥ A. Napr. trojiciam (1, 3, 4) (1, 4, 3) (3, 1, 4) (3, 4, 1) (4, 1, 3) (4, 3, 1) odpovedÃ¡ jedna rastÃºca trojica (1, 3, 4). KeÄÅ¾e poÄet vÅ¡etkÃ½ch usporiadanÃ½ch trojÃ­c sa rovnÃ¡ V(9, 3), poÄet rastÃºcich trojÃ­c sa rovnÃ¡ V(9, 3)/3! = C(9, 3). To znamenÃ¡, Å¾e |A|= C(9, 3) = 84. Pre P(A) mÃ¡me P(A) = 1.2.11 (NÃ¡hodnÃ© rozmiestnenia â mechanizmus) UvaÅ¾ujme o prieÄinkoch, oÄÃ­slovanÃ½ch od 1 po . Majme obÃ¡lok, ktorÃ© budeme nÃ¡hodne rozmiestÅovaÅ¥ do prieÄinkov. Äo znamenÃ¡ nÃ¡hodne? Predstavme si, Å¾e bokom umiestnime Å¡katuÄ¾u, ktorÃ¡ obsahuje lÃ­stkov s ÄÃ­slami 1 aÅ¾ . NÃ¡hodne Å¥ahÃ¡me prvÃ½ lÃ­stok zo Å¡katule a ÄÃ­slo na lÃ­stku bude znamenaÅ¥ ÄÃ­slo prieÄinku, do ktorÃ©ho dÃ¡me prvÃº obÃ¡lku. DruhÃ¡ obÃ¡lka bude putovaÅ¥ do prieÄinka s takÃ½m ÄÃ­slom, akÃ© bolo uvedenÃ© na druhom vytiahnutom lÃ­stku atÄ. Zrejme na umiestnenie obÃ¡lok bude potrebnÃ½ nÃ¡hodnÃ½ vÃ½ber rozsahu . Budeme diskutovaÅ¥ prÃ­pad, keÄ obÃ¡lky sÃº rozlÃ­Å¡iteÄ¾nÃ© (oznaÄenÃ©) a prÃ­pad, keÄ nie sÃº. ÄalÅ¡ou okolnosÅ¥ou bude, Äi prieÄinok mÃ´Å¾e obsahovaÅ¥ viac ako jednu obÃ¡lku, alebo nie. Rozoberme jednotlivÃ© prÃ­pady."
59,689,0.587,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3. VeÄ¾mi zloÅ¾itÃ© rieÅ¡enie (diabolskÃ©), kde sa aspoÅ raz musÃ­ pouÅ¾iÅ¥ nÃ¡hodnÃ½ vÃ½ber alternatÃ­vnej moÅ¾nosti s moÅ¾nÃ½m nÃ¡vratom do bodu vetvenia, ak sme dostali nekorektnÃº pozÃ­ciu v ÄalÅ¡om predlÅ¾ovanÃ­ rieÅ¡enia (pozri Obr. 14.8). NeexistujÃº pevnÃ© hranice medzi oblasÅ¥ami zloÅ¾itosti hier sudoku, vyÅ¡Å¡ie navrhnutÃ¡ klasifikÃ¡cia vÅ¡ak odrÃ¡Å¾a zÃ¡kladnÃ© princÃ­py zloÅ¾itosti ich rieÅ¡enia. Pre nÃ¡s je vÅ¡ak dÃ´leÅ¾itÃ©, Å¾e navrhnutÃ½ mentÃ¡lny model hry sudoku je dostatoÄne jednoduchÃ½, aby slÃºÅ¾il ako nÃ¡vod k systematickÃ©mu rieÅ¡eniu Ãºloh hier sudoku a taktieÅ¾, ktorÃ½ taktieÅ¾ odrÃ¡Å¾a pomerne verne âexperimentÃ¡lne pozorovanieâ o zloÅ¾itosti ich rieÅ¡enia."
265,87,0.587,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NeuchopiteÄ¾nosÅ¥ (Äi neopÃ­sateÄ¾nosÅ¥) softvÃ©ru znamenÃ¡, Å¾e softvÃ©r nevieme opÃ­saÅ¥ (definovanou mnoÅ¾inou modelov) tak, aby sme zachytili vÅ¡etky jeho aspekty. To nÃ¡m znemoÅ¾Åuje uvedomiÅ¥ si, Äo vÅ¡etko eÅ¡te treba pre dokonÄenie softvÃ©ru (naplnenie Å¡pecifikÃ¡cie) spraviÅ¥. A to mÃ¡ dopad aj na riadenie softvÃ©rovÃ©ho projektu: odrÃ¡Å¾a sa do nerealistickÃ©ho odhadovania, chybÃ¡ch v plÃ¡novanÃ­ Äi nepresnom sledovanÃ­ stavu projektu."
59,677,0.587,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 14.6. (A) ZnÃ¡zornenie explicitnej dvojice, v riadku (alebo stÄºpci alebo podoblasti) sÃº z ostatnÃ½ch buniek odstrÃ¡nenÃ© ÄÃ­sla ï¡ a ï¢. (B) ZnÃ¡zornenie implicitnej dvojice, kde vybranÃ¡ dvojica alternatÃ­vnych moÅ¾nostÃ­ obsahuje spoloÄnÃ© ÄÃ­sla ï¡ a ï¢, ktorÃ© sa nevyskytujÃº v ostatnÃ½ch bunkÃ¡ch, potom tieto z tÃ½chto dvoch mnoÅ¾Ã­n mÃ´Å¾eme odstrÃ¡niÅ¥ prvky odliÅ¡nÃ© od ï¡ a ï¢."
367,30,0.587,CESTA K OTVORENEJ VEDE,"V spoplatnenÃ½ch Äasopisoch sa k ÄlÃ¡nkom dostanÃº len jednotlivci alebo inÅ¡titÃºcie po zaplatenÃ­ predplatnÃ©ho (prÃ­padne jednorazovÃ©ho poplatku za prÃ­stup). Publikovanie v Äasopise s otvorenÃ½m prÃ­stupom, naopak, umoÅ¾nÃ­ kaÅ¾dÃ©mu okamÅ¾itÃ½ a bezplatnÃ½ prÃ­stup k vÃ¡Å¡mu ÄlÃ¡nku. NiektorÃ© Äasopisy s otvorenÃ½m prÃ­stupom vyÅ¾adujÃº od autoÂ­ rov Ãºhradu kompenzaÄnÃ½ch poplatkov za bezplatnÃ© zverejnenie obsahu, avÅ¡ak viacerÃ© Äasopisy (vydÃ¡vanÃ© vÃ½skumnÃ½mi inÅ¡titÃºciami a uÄenÃ½mi spoloÄnosÅ¥ami) si nenÃ¡rokujÃº od autorov Å¾iadne formy poplatkov. Na pokrytie nÃ¡kladov na publikovanie existujÃº rÃ´zne modely financovania. Tieto modely spadajÃº do dvoch hlavnÃ½ch kategÃ³riÃ­, ktorÃ© sa neustÃ¡le vyvÃ­jajÃº: â¢ Model s poplatkami pre autorov: ÃºÄtujÃº sa nÃ¡klady na publikovanie, ktorÃ© sa naÂ­ zÃ½Â­vajÃº poplatky za spracovanie ÄlÃ¡nku (APC, z angl. Article processing charges) alebo knihy (BPC, z angl. Book processing charges) â tzv. zlatÃ¡ cesta k otvorenÃ©mu prÃ­stupu. Tieto nÃ¡klady mÃ´Å¾e uhradiÅ¥ vaÅ¡e pracovisko, vÃ½skumnÃ¡ inÅ¡titÃºcia alebo financovateÄ¾ vÃ½skumu."
240,526,0.587,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÃ½pis vÃ½sledku: Pri vÃ½pise vÃ½sledku musÃ­me na zÃ¡klade Ãºdajov o vÅ¡etkÃ½ch hrÃ¡Äoch vypÃ­saÅ¥ meno vÃ­Å¥aza (vÃ­Å¥azov). NapÃ­Å¡eme funkciu vypis_vitaza(), ktorÃ¡ prejde zÃ¡znamy o hrÃ¡Äoch a urÄÃ­ hodnotu max_zapasy (koÄ¾ko najviac zÃ¡pasov niektorÃ­ z hrÃ¡Äov vyhral). Popri tom si bude udrÅ¾iavaÅ¥ hodnotu max_kola (koÄ¾ko najviac kÃ´l vyhrali hrÃ¡Äi, ktorÃ­ vyhrali najviac zÃ¡pasov). V prÃ­pade, Å¾e nÃ¡jdeme hrÃ¡Äa, ktorÃ½ vyhral viac zÃ¡pasov ako doteraz zistenÃ© ÄÃ­slo max_zapasy, tak hodnotu max_kola prepÃ­Å¡eme poÄtom vyhratÃ½ch zÃ¡pasov, ktorÃ© vyhral aj keÄ by hodnota bola menÅ¡ia ako aktuÃ¡lna hodnota max_kola."
190,94,0.587,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"OdliÅ¡nÃ½ spÃ´sob rozkladu je zameranÃ½ na rozvoj pracovnÃ­kov. Na zvlÃ¡dnutÃ­ takto rozloÅ¾enÃ©ho projektu mÃ¡ obrovskÃ½ vplyv skÃºsenosÅ¥ pracovnÃ­ka, ktorÃ½ tento strom rozloÅ¾enia vytvoril. VedÃºci musÃ­ dobre poznaÅ¥ svojich pracovnÃ­kov, musÃ­ poznaÅ¥, kto Äo vie a Äo dokÃ¡Å¾e. Ako rÃ½chlo sa dokÃ¡Å¾u konkrÃ©tni pracovnÃ­ci nauÄiÅ¥ nieÄo novÃ©, ako sa dokÃ¡Å¾u vyrovnaÅ¥ s tlakom a stresom, ako dokÃ¡Å¾u spolupracovaÅ¥, prÃ­padne uÄiÅ¥ sa od inÃ½ch. UÅ¾ maÅ¥ tieto vedomosti je veÄ¾kÃ© umenie. Älovek, ktorÃ½ mÃ¡ takÃ½to dobrÃ½ odhad a kontrolu nad pracovnÃ­kmi, je nenahraditeÄ¾nÃ½. MusÃ­ Äalej odhadnÃºÅ¥, koÄ¾ko si s pracovnÃ­kmi mÃ´Å¾e dovoliÅ¥ a koÄ¾ko Ãºstupkov mÃ´Å¾e spraviÅ¥ smerom k projektu. MusÃ­ oÄakÃ¡vaÅ¥ rizikÃ¡ spojenÃ© s neskÃºsenosÅ¥ou pracovnÃ­kov, vznikajÃºce konflikty v tÃ­moch. Po zvÃ¡Å¾enÃ­ vÅ¡etkÃ½ch moÅ¾nostÃ­ vznikÃ¡ rozklad kompletnÃ©ho SkÃºsenÃ½ pracovnÃ­k, projektu po najmenÅ¡ie detaily. PodÄ¾a mÅa je ÃºspeÅ¡ne fungujÃºci rozklad ktorÃ½ dokÃ¡Å¾e dobre hotovÃ½m umeleckÃ½m dielom. Predstava zharmonizovanÃ½ch paralelne rozloÅ¾iÅ¥ aj zloÅ¾itÃ½ vykonÃ¡vanÃ½ch Ãºloh vedÃºcich k cieÄ¾u projektu a zÃ¡roveÅ trÃ©ning pra- projekt, by mal byÅ¥ covnÃ­kov sa zdÃ¡ byÅ¥ priam nemoÅ¾nÃ¡. vyvÃ¡Å¾enÃ½ zlatom. PoÄme sa eÅ¡te ale pozrieÅ¥ hlbÅ¡ie do rozkladu Ãºloh. UÅ¾ aj vo vyÅ¡Å¡Ã­ch Ãºrovniach vznikÃ¡ zÃ¡vaÅ¾nÃ½ problÃ©m, ktorÃ½ by sa dal nazvaÅ¥ blokovanie prÃ¡c. Ak je vÃ½sledok jednej prÃ¡ce potrebnÃ½ na zaÄiatok druhej prÃ¡ce, treba, aby bola prvÃ¡ prÃ¡ca ukonÄenÃ¡ pred zaÄatÃ­m druhej. Tieto dve prÃ¡ce nemusÃ­ maÅ¥ pridelenÃ© jedinÃ½ pracovnÃ­k, a tak sa mÃ´Å¾e staÅ¥, Å¾e pracovnÃ­k, ktorÃ½ mÃ¡ vykonaÅ¥ druhÃº Ãºlohu stojÃ­ nad inÃ½m so zaloÅ¾enÃ½mi rukami. Je to zÃ¡vaÅ¾nÃ½ problÃ©m, obrovskÃ© mrhanie zdrojov a strata Äasu. SkÃºsenÃ½ vedÃºci pracovnÃ­k by podÄ¾a mÃ´jho nÃ¡zoru mal tento problÃ©m rieÅ¡iÅ¥ od zaÄiatku procesu rozkladu. Je to sÃ­ce hlavnÃ½ problÃ©m tÃ½kajÃºci sa procesu plÃ¡novania, ale vytvorenie Äo najmenÅ¡Ã­ch zÃ¡vislostÃ­ medzi Ãºlohami mÃ´Å¾e tento problÃ©m podstatne odÄ¾ahÄiÅ¥."
115,25,0.587,Algebra a diskrÃ©tna  matematika,"Z naÅ¡ich predchÃ¡dzajÃºcich vÃ½sledkov vyplÃ½va, Å¾e mÃ´Å¾eme deduktÃ­vny systÃ©m rozÅ¡Ã­riÅ¥ o novÃ½ elementÃ¡rny pojem âkomponentâ, ktorÃ½ popisuje takÃº ÄasÅ¥ grafu, z ktorej vrcholy nie sÃº spojenÃ© cestou pozostÃ¡vajÃºcou z postupnosti hrÃ¡n s vrcholmi z ostatnÃ½ch ÄastÃ­, ale vÅ¾dy existuje cesta medzi Ä¾ubovoÄ¾nou dvojicou vrcholov komponentu. Z obr. 1.1 vyplÃ½va jednoduchÃ¡ veta. VETA 1.3."
240,215,0.586,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"menej porovnanÃ­ (len 2) ale viac priradenÃ­. Priradenie je âlacnejÅ¡iaâ operÃ¡cia, v zmysle, Å¾e poÄÃ­taÄ zvyÄajne potrebujeme menej zdrojov na jej vykonanie, vyÅ¾aduje vÅ¡ak, istÃ½m spÃ´sobom, pomocnÃº pamÃ¤Å¥. VrÃ¡Å¥me sa eÅ¡te k predchÃ¡dzajÃºcemu rieÅ¡eniu s 4 porovnaniami a skÃºsme odstrÃ¡niÅ¥ prebytoÄnÃ© porovnania. V riadku 5 v podmienke (b <= a && b <= c) vykonÃ¡vame uÅ¾ opakovanÃ© porovnanie a a b. RozdeÄ¾me teda zloÅ¾enÃ© podmienky do jednoduchÃ½ch a pokÃºsme sa uÅ¾ raz zistenÃ½ vÃ½sledok porovnania vyuÅ¾iÅ¥, dostÃ¡vame tento kÃ³d:"
393,140,0.586,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"(Polo)automatizovanÃ© spracovanie informÃ¡ciÃ­ z webu so sÃ©mantikou, ktorÃ© potom nasleduje, sa mÃ´Å¾e realizovaÅ¥ pomocou softvÃ©rovÃ½ch agentov, Äo sÃº do urÄitej miery autonÃ³mne inteligentnÃ© programovÃ© komponenty pohybujÃºce sa zvyÄajne v distribuovanom prostredÃ­ schopnÃ© realizovaÅ¥ âpre toho, kto ich poverilâ poÅ¾iadavky na vyhÄ¾adÃ¡vanie informÃ¡ciÃ­ a pod. DÃ´leÅ¾itÃ½m predpokladom webu so sÃ©mantikou je Å¡tandardizovanÃ½ opis webovÃ½ch zdrojov. Ako zdroj sa v tejto sÃºvislosti mÃ´Å¾e chÃ¡paÅ¥ ÄokoÄ¾vek, Äo je obsiahnutÃ© v rÃ¡mci webu (textovÃ© dokumenty, obrÃ¡zky, videosekvencie, zvukovÃ© sÃºbory a pod.). KaÅ¾dÃ½ zdroj by bol vybavenÃ½ rovnakÃ½mi charakteristikami (reprezentujÃºcimi jeho vlastnosti, vzÅ¥ah k okoliu a pod.), Äo by umoÅ¾nilo pouÅ¾Ã­vateÄ¾om pracovaÅ¥ s internetom ako s databÃ¡zou znalostÃ­ prostrednÃ­ctvom dopytovacÃ­ch jazykov (podobnÃ½ch naprÃ­klad SQL). Aby bolo toto moÅ¾nÃ© dosiahnuÅ¥, treba definovaÅ¥ medzivrstvu, ktorÃ¡ by umoÅ¾Åovala opÃ­saÅ¥ obsiahnutÃ© informÃ¡cie. TÃ¡to vrstva sa nazÃ½va metadÃ¡ta. MÃ´Å¾u to byÅ¥ struÄne definovanÃ© (Å¡truktÃºrovanÃ©) dÃ¡ta o dÃ¡tach., ktorÃ© zachycujÃº obsah, kontext a Å¡truktÃºru opisovanÃ½ch dÃ¡t. TechnologickÃ½m zÃ¡kladom webu so sÃ©mantikou by sa podÄ¾a organizÃ¡cie W3C mal staÅ¥ Å¡tandard RDF (Resource Description Framework). PodÄ¾a oficiÃ¡lnej definÃ­cie ide o obecnÃ½ rÃ¡mec pre opis, vÃ½menu a znovu pouÅ¾itie metadÃ¡t. RÃ¡mec RDF poskytuje jednoduchÃ½ model pre opis zdrojov, ktorÃ½ nie je zÃ¡vislÃ½ od konkrÃ©tnej implementÃ¡cie. Tento prÃ­stup zabezpeÄuje urÄitÃ½ stupeÅ Å¡tandardizÃ¡cie. Poskytuje vÅ¡ak dosÅ¥ znaÄnÃº voÄ¾nosÅ¥ pri tvorbe vrstvy metadÃ¡t. MetadÃ¡ta odrÃ¡Å¾ajÃº do veÄ¾kej miery rozdielne prÃ­stupy jednotlivÃ½ch tvorcov. V kombinÃ¡cii so stratovou ontolÃ³giu spÃ´sobili, Å¾e sa tento prÃ­stup zatiaÄ¾ nepresadil a stÃ¡le je v Å¡tÃ¡diu vÃ½skumu. Na zÃ¡klade toho v ÄalÅ¡ej Äasti menujeme a rozoberÃ¡me vlastnosti, ktorÃ© by mal web so sÃ©mantikou zahÅÅaÅ¥, aby ho bolo moÅ¾nÃ© zaviesÅ¥ do praxe."
343,46,0.586,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"prÃ­kladom bola slovenskÃ¡ ÄokolÃ¡da Lyra. MÃ´Å¾ete vidieÅ¥, odkiaÄ¾ prichÃ¡dzajÃº kakaovÃ© bÃ´by, keÄ prichÃ¡dzajÃº z nejakej plantÃ¡Å¾e niekde v Afrike, kam idÃº na spracovanie a kam idÃº Äalej. ÄalÅ¡Ã­m prÃ­kladom je digitÃ¡lna sprÃ¡va identity. MÃ´Å¾ete maÅ¥ identitu na blockchaine a mÃ´Å¾ete na Åu budovaÅ¥ veÄ¾a vecÃ­, Äi uÅ¾ sÃº to pasy na koncerty, alebo len overenie, Å¾e ste to naozaj vy, bez toho, aby niekto vedel, Å¾e ste to naozaj vy. Medzi zaujÃ­mavÃ© prÃ­pady pouÅ¾itia patrÃ­ zdravotnÃ­ctvo a hry. Aj keÄ v zdravotnÃ­ctve je to tak pol na pol. NiektorÃ­ Ä¾udia by mohli argumentovaÅ¥, Å¾e nemusÃ­te nosiÅ¥ starÃº papierovÃº kartiÄku, mÃ´Å¾ete to maÅ¥ v databÃ¡ze, no riziko zneuÅ¾itia dÃ¡t je obrovskÃ©. A potom je tu koncept zdieÄ¾anej ekonomiky. Koncept je o tom, aby jednotlivci alebo firmy mohli zdieÄ¾aÅ¥ zdroje alebo sluÅ¾by medzi Ä¾uÄmi online. Blockchain sa tu pouÅ¾Ã­va na zabezpeÄenie tohto procesu a na vytvorenie nemeniteÄ¾nÃ©ho zÃ¡znamu o tÃ½chto aktÃ­vach. MoÅ¾no ste uÅ¾ niekedy premÃ½Å¡Ä¾ali o tom, Å¾e by ste chceli vymieÅaÅ¥ vernostnÃ© body z rÃ´znych spoloÄnostÃ­ a vytvoriÅ¥ si nad tÃ½m decentralizovanÃº burzu (DEX). NaprÃ­klad, chodÃ­te nakupovaÅ¥ do obchodu, zbierate tam body, ale nikdy ste ich nevyuÅ¾ili a chceli by ste ich vymeniÅ¥ za body v inej spoloÄnosti. V sÃºÄasnosti by ste museli osloviÅ¥ vÅ¡etky tieto spoloÄnosti a povedaÅ¥ im, Äo chcete robiÅ¥. VÃ¤ÄÅ¡ina z nich by vÃ¡s pravdepodobne odmietla, pretoÅ¾e to pre nich nie je vÃ½hodnÃ©. Ale keby to vÅ¡etko bolo na blockchaine, mohli by ste si vytvoriÅ¥ svoj DEX a vymieÅaÅ¥ svoje body. Trh by sÃ¡m naÅ¡iel sprÃ¡vny pomer, za akÃ½ by sa mali body vymieÅaÅ¥. To je skvelÃ© na celom ekosystÃ©me Web3, je otvorenÃ½ a mÃ´Å¾ete nad nÃ­m vytvÃ¡raÅ¥ aplikÃ¡cie akÃ© chcete. OtÃ¡zka je, ako overiÅ¥, Å¾e takÃ©to reprezentovanÃ© aktÃ­va v blockchaine skutoÄne existujÃº v reÃ¡lnom svete, alebo vÅ¡eobecne akÃ½koÄ¾vek dokument? Na to sa pouÅ¾Ã­va tzv. proof of existence. MÃ¡ tri zÃ¡kladnÃ© Äasti: dokÃ¡Å¾e overiÅ¥ vlastnÃ­ctvo bez toho, aby odhalil nejakÃ© dÃ¡ta, overiÅ¥ autenticitu dokumentu alebo vytvoriÅ¥ ÄasovÃº peÄiatku, Å¾e tento dokument skutoÄne existoval. V blockchainoch takisto existujÃº rÃ´zne decentralizovanÃ© ÃºloÅ¾iskÃ¡, ako naprÃ­klad IPFS, Filecoin, Storj a Arweave. KaÅ¾dÃ½ z nich mÃ¡ trochu inÃ½ prÃ­pad pouÅ¾itia. IPFS je Å¡tandard, ktorÃ½ sa pouÅ¾Ã­va na ukladanie sÃºborov na peer-to-peer sieti. Je to nieÄo ako Tor alebo Torrenty. MÃ¡te distribuovanÃ© uzly, ktorÃ© ukladajÃº a obsluhujÃº sÃºbory. Je to odolnÃ© voÄi strate dÃ¡t a vyuÅ¾Ã­va sa na overenie existencie. KaÅ¾dÃ½ obsah je identifikovanÃ½ kryptografickÃ½m hashom. Ak chcete zÃ­skaÅ¥ obsah, pouÅ¾ijete IPFS GET a zadÃ¡te hash. SystÃ©m sa pokÃºsi nÃ¡jsÅ¥ sÃºbor najprv lokÃ¡lne a ak ho nenÃ¡jde, pokÃºsi sa ho nÃ¡jsÅ¥ u peerov. Je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e IPFS nie je na skladovanie, je to systÃ©m na adresovanie. To znamenÃ¡, Å¾e ak obsah nepouÅ¾Ã­vate, bude odstrÃ¡nenÃ½. Ak chcete, aby obsah zostal, musÃ­te ho pouÅ¾Ã­vaÅ¥ alebo pouÅ¾iÅ¥ poskytovateÄ¾a, ako je PiÃ±ata alebo NFT"
76,37,0.586,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.12 (Rozmiestnenie k rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok do n prieÄinkov bez zÃ¡kazu) Skratkou âbez zÃ¡kazuâ budeme oznaÄovaÅ¥ prÃ­pad, keÄ prieÄinok mÃ´Å¾e obsahovaÅ¥ viac obÃ¡lok, hoci aj vÅ¡etky. KoÄ¾ko je v takomto prÃ­pade rÃ´znych rozmiestnenÃ­? Najprv si ujasnime, kedy ide o dve rÃ´zne rozmiestnenia. Prirodzene vtedy, ak existuje aspoÅ jeden prieÄinok, ktorÃ©ho obsah je inÃ½ v prvom a inÃ½ pri druhom rozmiestnenÃ­. To vÅ¡ak znamenÃ¡, Å¾e existuje obÃ¡lka (obÃ¡lka napr. s ÄÃ­slom ), ktorÃ¡ pri prvom rozmiestnenÃ­ putovala do prieÄinku a v druhom rozmiestnenÃ­ do prieÄinku (samozrejme, â  ). PrvÃ¡ obÃ¡lka mÃ´Å¾e byÅ¥ umiestnenÃ¡ do Ä¾ubovoÄ¾nÃ©ho prieÄinku â to je moÅ¾nostÃ­. DruhÃ¡ obÃ¡lka opÃ¤Å¥ do Ä¾ubovoÄ¾nÃ©ho prieÄinku (ide teraz o prÃ­pad bez zÃ¡kazu), takÅ¾e poÄet umiestnenÃ­ dvoch rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok sa rovnÃ¡ . PokraÄujÃºc v Ãºvahe, dostÃ¡vame nakoniec, Å¾e poÄet rozmiestnenÃ­ bez zÃ¡kazu rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok do prieÄinkov sa rovnÃ¡ . Ako by sme realizovali nÃ¡hodnÃ© rozmiestnenie tohoto typu? To sme opÃ­sali v odstavci 1.2.11 â rozmiestÅovanie mÃ´Å¾e byÅ¥ realizovanÃ© prostrednÃ­ctvom nÃ¡hodnÃ©ho vÃ½beru lÃ­stka zo Å¡katule. Len treba upresniÅ¥, Å¾e teraz by iÅ¡lo o usporiadanÃ½ vÃ½ber s vrÃ¡tenÃ­m. Je dobrÃ© maÅ¥ na mysli jedno â jednoznaÄnÃº koreÅ¡podenciu (t. j. bijekciu) medzi usporiadanÃ½mi vÃ½bermi s vrÃ¡tenÃ­m a rozmiestneniami rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok bez zÃ¡kazu. TÃ¡ koreÅ¡podencia (bijekcia) je definovanÃ¡ postupom, mechanizmom rozmiestÅovania, opÃ­sanom v 1.2.11. 1.2.13 (Rozmiestnenie k rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok do n prieÄinkov so zÃ¡kazom) Teraz prieÄinok nesmie obsahovaÅ¥ viac ako jednu obÃ¡lku (teda jednu, alebo Å¾iadnu). MusÃ­ platiÅ¥ , lebo inak sa rozmiestnenie nedÃ¡ realizovaÅ¥. KoÄ¾ko je teraz moÅ¾nÃ½ch rozmiestnenÃ­? PrvÃ¡ obÃ¡lka mÃ´Å¾e putovaÅ¥ do Ä¾ubovoÄ¾nÃ©ho prieÄinku, druhÃ¡ uÅ¾ len do Ä¾ubovoÄ¾nÃ©ho z â 1 prieÄinkov, tretia uÅ¾ len do Ä¾ubovoÄ¾nÃ©ho z â 2 prieÄinkov atÄ. Zrejme poÄet vÅ¡etkÃ½ch rozmiestnenÃ­ sa rovnÃ¡ V( ). RealizovaÅ¥ nÃ¡hodnÃ© rozmiestnenie tohoto typu mÃ´Å¾eme pomocou mechanizmu z 1.2.11, ale teraz by iÅ¡lo o vÃ½bery bez vrÃ¡tenia (aby iÅ¡lo o rozmiestÅovanie so zÃ¡kazom). 1.2.14 PrÃ­klad. (NarodeninovÃ½ paradox) Predstavme si, Å¾e v triede je 30 Å¾iakov a nie sÃº v nej dvojiÄky. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e sÃº medzi Å¾iakmi takÃ­ dvaja, ktorÃ­ majÃº narodeniny v ten istÃ½ deÅ? RieÅ¡enie. Predstavme si 365 prieÄinkov (Äo prieÄinok, to jeden deÅ v roku). Pani NÃ¡hoda pred rokmi nÃ¡hodne rozmiestnila 30 rozlÃ­Å¡iteÄ¾nÃ½ch loptiÄiek do tÃ½ch 365 prieÄinkov. OtÃ¡zka je, akÃ¡ je pravdepodobnosÅ¥ toho, Å¾e existuje prieÄinok, ktorÃ½ obsahuje viac ako jednu loptiÄku. JednoduchÅ¡ie je vÅ¡ak najprv nÃ¡jsÅ¥ pravdepodobnosÅ¥ toho, Å¾e takÃ½ prieÄinok neexistuje. UvÃ¡Å¾me, Å¾e mnoÅ¾ina vÅ¡etkÃ½ch moÅ¾nÃ½ch rozmiestnenÃ­ loptiÄiek do prieÄinkov mÃ¡ prvkov. To preto, lebo prvÃ¡ loptiÄka mohla skonÄiÅ¥ v Ä¾ubovoÄ¾nom prieÄinku, druhÃ¡ tieÅ¾ v hociktorom z 365 prieÄinkov atÄ. a to je 365ï365ï365ï ... ï365 = . KoÄ¾ko z tÃ½chto rozmiestnenÃ­ je takÃ½ch, Å¾e Å¾iaden prieÄinok neobsahuje dve a viac loptiÄiek? TakÃ½ch je 365ï364ï363ï ... ï(365 â 29) = 365ï364ï363ï ... ï336 = V(365, 30) To preto, Å¾e kÃ½m prvÃ¡ loptiÄka mohla skonÄiÅ¥ v Ä¾ubovoÄ¾nom prieÄinku, druhÃ¡ mala len 364 moÅ¾nostÃ­, tretia len 363 atÄ. Preto pravdepodobnosÅ¥ toho, Å¾e Å¾iaden prieÄinok neobsahuje viac ako jednu loptiÄku sa rovnÃ¡"
135,724,0.586,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â PF j pravdepodobnos nasledovania inÃ½ch viel na zdroj c j . Pri dopyte od pouÅ¾Ã­vatea sa vely-agenty snaÅ¾ia nÃ¡js v bÃ¡ze prÃ­padov (zdrojov c1...m ) najlepÅ¡Ã­ zdroj potravy. Na obrÃ¡zku 11-4 je znÃ¡zornenÃ½ model prezentovanÃ½ v (Lorenzi, 2005C). Ã je zloÅ¾enÃ½ z dvoch oddelenÃ­, taniarne a pozorovatene taniarne. BÃ¡za prÃ­padov reprezentuje prÃ­stupnÃ© zdroje nektÃ¡ru (1...m) . KosoÅ¡tvorce reprezentujÃº moÅ¾nosti rozhodovania viel."
59,598,0.586,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"nemÃ´Å¾e byÅ¥ vo vÅ¡eobecnosti urÄenÃ© jednoznaÄne. ÄalÅ¡Ã­ problÃ©m s inverznÃ½m modelom je, Å¾e jeho urÄenie pomocou diagramu A na Obr. 12.7 nie je cieÄ¾ovo orientovanÃ©. To znamenÃ¡, Å¾e nemusÃ­me nÃ¡jsÅ¥ takÃº akciu, ktorÃ¡ produkuje poÅ¾adovanÃ½ vÃ½stup systÃ©mu. UÄenie sa komplexu vytvorenÃ©ho z inverznÃ©ho a z doprednÃ©ho modelu (pozri Obr. 12.7, diagram B) sa mÃ´Å¾e vykonaÅ¥ podobne ako uÄenie sa komplexu obsahujÃºceho agenta a doprednÃ½ model v predchÃ¡dzajÃºcej podkapitole (pozri Obr. 12.4., diagram B). Podobne, ako je umiestnenÃ½ model doprednÃ©ho szstÃ©mu v kognitÃ­vnom orgÃ¡ne agenta, aj inverznÃ½ model je umiestnenÃ½ ako model inverznÃ©ho systÃ©mu v kognitÃ­vnom orgÃ¡ne agenta."
122,41,0.585,Modelovanie softvÃ©ru,"KedykoÄ¾vek sa v systÃ©me ukladÃ¡ objednÃ¡vka, ak by stav zÃ¡sob hociktorÃ©ho vÃ½robku v nej po jej expedovanÃ­ poklesol pod stanovenÃ½ limit: 1. SystÃ©m uloÅ¾Ã­ zÃ¡znam do plÃ¡nu doplnenia zÃ¡sob o potrebe zvÃ½Å¡enia stavu kaÅ¾dÃ©ho vÃ½robku v objednÃ¡vke, ktorÃ©ho stav zÃ¡sob by po jej expedovanÃ­ poklesol pod stanovenÃ½ limit. NevÃ½hodou takÃ©hoto vyjadrenia je, Å¾e zistenie, na ktorÃ© kroky sa vzÅ¥ahuje, vyÅ¾aduje analÃ½zu celÃ©ho modelu prÃ­padov pouÅ¾itia. V tomto mÃ´Å¾e pomÃ´cÅ¥ obmedzenie rozsah platnosti len na urÄitÃ© prÃ­pady pouÅ¾itia â v naÅ¡om prÃ­pade na prÃ­pad pouÅ¾itia Zadaj objednÃ¡vku: PrÃ­pad pouÅ¾itia: Modifikuj plÃ¡n doplnenia zÃ¡sob AlternatÃ­vny tok: Modifikuj plÃ¡n doplnenia zÃ¡sob KedykoÄ¾vek sa v prÃ­pade pouÅ¾itia Zadaj objednÃ¡vku ukladÃ¡ objednÃ¡vka, ak by stav zÃ¡sob hociktorÃ©ho vÃ½robku v nej po jej expedovanÃ­ poklesol pod stanovenÃ½ limit: 1. SystÃ©m uloÅ¾Ã­ zÃ¡znam do plÃ¡nu doplnenia zÃ¡sob o potrebe zvÃ½Å¡enia stavu kaÅ¾dÃ©ho vÃ½robku v objednÃ¡vke, ktorÃ©ho stav zÃ¡sob by po jej expedovanÃ­ poklesol pod stanovenÃ½ limit. DoterajÅ¡ie prÃ­klady prÃ­padov pouÅ¾itia sÃº vyjadrenÃ© v Jacobsonovej notÃ¡cii [JN04]. TakÃ©to deklaratÃ­vne vyjadrenie rozÅ¡Ã­renia je prÃ­znaÄnÃ© pre Cockburnovu notÃ¡ciu [Coc00]. Konvencie a prvky notÃ¡ciÃ­ modelovania prÃ­padov pouÅ¾itia moÅ¾no kombinovaÅ¥ [VuZ13], a tak vytvÃ¡raÅ¥ vlastnÃ© notÃ¡cie."
205,120,0.585,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","6.6 Zhrnutie VyhÄ¾adÃ¡vanie predstavuje Å¡irokÃº oblasÅ¥ vÃ½skumu, ktorÃ¡ si nachÃ¡dza praktickÃ© uplatnenie pri kaÅ¾dodennej prÃ¡ci na webe. Bude zaujÃ­mavÃ© sledovaÅ¥ ÄalÅ¡Ã­ vÃ½voj v tejto oblasti, zrejme smerom k eÅ¡te cielenejÅ¡Ã­m a presnejÅ¡Ã­m vÃ½sledkom na zÃ¡klade znalostÃ­ zÃ¡ujmov pouÅ¾Ã­vateÄ¾ov, ich prÃ­sluÅ¡nosti do rÃ´znych virtuÃ¡lnych skupÃ­n a aktuÃ¡lneho kontextu a v neposlednom rade aj na zÃ¡klade pochopenia sÃ©manticky zadÃ¡vanÃ½ch dopytov a k nim prislÃºchajÃºcim entitÃ¡m. MÃ´Å¾eme tieÅ¾ pozorovaÅ¥ vÃ¤ÄÅ¡Ã­ dÃ´raz na pouÅ¾Ã­vateÄ¾skÃ½ zÃ¡Å¾itok a interakciu so systÃ©mom, ktorÃ½ je zastÃºpenÃ½ v oblasti vÃ½skumu informaÄnÃ©ho hÄ¾adania a prieskumnÃ©ho vyhÄ¾adÃ¡vania."
369,202,0.585,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.50. Vzor Poplatok za balÃ­k produktov FinanÄnÃ¡ organizÃ¡cia mÃ´Å¾e dÃ¡vaÅ¥ zvÃ½hodnenÃ© sadzby poplatkov pre vÃ½znamnÃ½ch klientov. PravidlÃ¡, akÃ© zvÃ½hodnenÃ© sadzby sa dÃ¡vajÃº pre ktorÃ© kategÃ³rie klientov, Äasto zostÃ¡vajÃº roztrÃºsenÃ© v smerniciach a chÃ½bajÃº v softvÃ©rovom systÃ©me. RieÅ¡enÃ­m je agregÃ¡cia poplatkov. Do softvÃ©rovÃ©ho systÃ©mu sa zavedie koncept balÃ­ka poplatkov, ktorÃ½ zahÅÅa zÄ¾avnenÃ© operÃ¡cie alebo poplatky za rÃ´zne produkty a operÃ¡cie. SamotnÃ½ balÃ­k nemÃ¡ svoju sadzbu, sadzby sa viaÅ¾u iba na jeho jednotlivÃ© zloÅ¾ky. BalÃ­k poplatkov moÅ¾no pouÅ¾iÅ¥ pre urÄitÃ© kategÃ³rie klientov. (obr. 3.51). Na operatÃ­vnej Ãºrovni potom kompetentnÃ½ pracovnÃ­k banky zvolÃ­ pre prÃ­sluÅ¡nÃ©ho klienta konkrÃ©tny balÃ­k poplatkov, priÄom systÃ©m mu ako moÅ¾nosti ponÃºka iba balÃ­ky povolenÃ© pre danÃº kategÃ³riu klienta."
43,84,0.585,Objektovo orientovanÃ© programovanie v C++,"Parameter n urÄuje maximÃ¡lnu dÄºÅ¾ku reÅ¥azca. NaÄÃ­tanie prebieha dovtedy, kÃ½m sa zo vstupu nenaÄÃ­ta n-1 znakov. ReÅ¥azec sa potom doplnÃ­ o znak ukonÄenia reÅ¥azca. V prÃ­pade, Å¾e zadanÃ½ reÅ¥azec mÃ¡ dÄºÅ¾ku menÅ¡iu ako maximÃ¡lna povolenÃ¡ dÄºÅ¾ka, ÄÃ­tanie sa skonÄÃ­ vtedy, ak program dospeje na jeho koniec. Typ streamsize je celoÄÃ­selnÃ½ typ, maximÃ¡lna dÄºÅ¾ka je teda celÃ© ÄÃ­slo. Existuje aj obdoba funkcie get, ktorÃ¡ naÄÃ­ta a vzÃ¡pÃ¤tÃ­ vyradÃ­ znak ukonÄenia riadku, ktorÃ½ sa nachÃ¡dza za reÅ¥azcom. Onedlho uvidÃ­me, Å¾e ide o uÅ¾itoÄnÃº vlastnosÅ¥. TÃ¡to funkcia sa nazÃ½va getline. istream& getline(char *s, streamsize n);"
265,223,0.585,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"KtorÃ¡ vlastnosÅ¥ Å¡pecifikÃ¡cie poÅ¾iadaviek je dÃ´leÅ¾itejÅ¡ia â merateÄ¾nosÅ¥ alebo konzistentnosÅ¥? Vysvetlite preÄo. JednoznaÄne merateÄ¾nosÅ¥. Bez tejto vlastnosti nemÃ´Å¾eme vyhodnotiÅ¥ splnenie jednotlivÃ½ch poÅ¾iadaviek a projekt sa tak prakticky nedÃ¡ rieÅ¡iÅ¥ uÅ¾ len preto, Å¾e nemÃ´Å¾me so zÃ¡kaznÃ­kom uzavrieÅ¥ rozumnÃ½ kontrakt. AkÃ¡koÄ¾vek Å¡pecifikÃ¡cia je bez merateÄ¾nosti nepouÅ¾iteÄ¾nÃ¡. KonzistentnosÅ¥ je dÃ´leÅ¾itÃ¡ vlastnosÅ¥, ale pri reÃ¡lnych projektoch s obmedzenÃ½mi zdrojmi sa spravidla nedÃ¡ dosiahnuÅ¥. To neznamenÃ¡, Å¾e sa neusilujeme o konzistentnosÅ¥, ale konzistentnosÅ¥ nie je nevyhnutnÃ¡ a problÃ©my, ktorÃ© nÃ¡m jej nedostatok spÃ´sobÃ­ spravidla vieme vyrieÅ¡iÅ¥."
94,350,0.585,Sprievodca svetom vedeckÃ©ho publikovania,"disciplÃ­n, kombinÃ¡ciou klasifikÃ¡cie a vizualizÃ¡cie vzÅ¥ahov. Zdrojmi Ãºdajov pre mapovanie vedy sÃº publikovanÃ© ÄlÃ¡nky (z databÃ¡zy Scopus, ale aj regionÃ¡lne periodikÃ¡, konferenÄnÃ© materiÃ¡ly a neindexovanÃ© publikÃ¡cie), analÃ½zy a patentovÃ© databÃ¡zy. Na zÃ¡klade prÃ­stupu k zdrojom po ÃºroveÅ ÃºplnÃ©ho textu, ale aj k abstraktom a bibliografickÃ½m zÃ¡znamom sa snaÅ¾ia analyzovaÅ¥ procesy vnÃºtri systÃ©mu a tvoriÅ¥ modely a charakteristiky vedy. VytvÃ¡ranÃ© mapy zahÅÅajÃº vedu, technolÃ³gie aj inovÃ¡cie. Tieto vzÅ¥ahy budujÃº na zÃ¡klade analÃ½zy strategickÃ½ch Å¡tÃºdiÃ­ a business manaÅ¾mentu (stratÃ©gie a inovÃ¡cie, sieÅ¥ vedy, dejiny a filozofia vedy, vyuÅ¾Ã­vanie scientometrie a matematickej lingvistiky)."
195,13,0.585,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄacie systÃ©my zaloÅ¾enÃ© na zdrojovom kÃ³de 1.2.1 RASCAL PrvÃ½ odporÃºÄacÃ­ systÃ©m [17], ktorÃ½ predstavujeme, sa zameriava na predikciu nasledujÃºcej metÃ³dy, ktorÃº mÃ´Å¾e vÃ½vojÃ¡r najbliÅ¾Å¡ie pri vÃ½voji novej Äasti zdrojovÃ©ho kÃ³du zavolaÅ¥. SystÃ©m vyuÅ¾Ã­va tradiÄnÃº metÃ³du kolaboratÃ­vneho odporÃºÄania [10] vychÃ¡dzajÃºcu z predpokladu, Å¾e triedy sa mÃ´Å¾u zhlukovaÅ¥ podÄ¾a podobnosti volanÃ½ch metÃ³d. VoÄi tradiÄnÃ©mu kolaboratÃ­vnemu prÃ­stupu sÃº v tomto prÃ­pade pouÅ¾Ã­vatelia nahradenÃ­ triedami a poloÅ¾ky metÃ³dami. MetÃ³da sa zakladÃ¡ na hÄ¾adanÃ­ triedy volajÃºcej podobnÃ© metÃ³dy ako pouÅ¾Ã­vateÄ¾om aktuÃ¡lne vyvÃ­janÃ¡ trieda. OdporÃºÄaÄ RASCAL sa delÃ­ na 4 Äasti, ktorÃ© sa postupne vyuÅ¾Ã­vajÃº v jednotlivÃ½ch fÃ¡zach procesu odporÃºÄania. PrvÃ¡ ÄasÅ¥ zvanÃ¡ aktÃ­vny pouÅ¾Ã­vateÄ¾ slÃºÅ¾i na identifikÃ¡ciu triedy, ktorÃº pouÅ¾Ã­vateÄ¾ aktuÃ¡lne vyvÃ­ja. DruhÃ¡ ÄasÅ¥ nazÃ½vanÃ¡ zberaÄ histÃ³rie pouÅ¾itia slÃºÅ¾i na automatickÃ© dolovanie zÃ¡znamov o vÃ½voji tried a ich metÃ³d. V tejto fÃ¡ze sa vytvÃ¡ra matica vyuÅ¾Ã­vania metÃ³d triedou a usporiadanÃ½ zoznam metÃ³d vyuÅ¾Ã­vanÃ½ch triedou (ObrÃ¡zok 1.1) pre vÅ¡etky triedy systÃ©mu, nad ktorÃ½m sa odporÃºÄa. KaÅ¾dÃ¡ bunka v matici reprezentuje poÄet volanÃ­ danej metÃ³dy triedou. Triedy (v roli pouÅ¾Ã­vateÄ¾ov"
190,392,0.584,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"UviesÅ¥ do praxe novÃ© metÃ³dy, techniky, Äi nÃ¡stroje, nie je vÃ´bec VÄaka refaktoringu takÃ© jednoduchÃ©, ako by sme si mohli spoÄiatku myslieÅ¥. Firmy sa zdrojovÃ½ kÃ³d doslova Äasto noviniek obÃ¡vajÃº, keÄÅ¾e nechcÃº riskovaÅ¥, Å¾e sa vydajÃº cestou, Å¾ije a vyvÃ­ja sa, nielen ktorÃ¡ sÃ­ce vyzerÃ¡ sÄ¾ubne, ale Äasom sa ukÃ¡Å¾e, Å¾e vedie do slepej nekontrolovane rastie. uliÄky a neprinÃ¡Å¡a im Å¾iadne vÃ½hody. Preto vyÄkÃ¡vajÃº, ako sa situÃ¡cia vyvinie a dovtedy pouÅ¾Ã­vajÃº overenÃ© prostriedky. Za znaÄnÃ½ problÃ©m pri zavÃ¡dzanÃ­ noviniek do praxe pokladÃ¡m nedostatok odbornÃ­kov, ktorÃ­ vedia vyuÅ¾Ã­vaÅ¥ novÃ© prÃ­stupy, Äi pracovaÅ¥ s novÅ¡Ã­mi nÃ¡strojmi a naplno vyuÅ¾iÅ¥ ich potenciÃ¡l. BeÅ¾nÃ© sÃº prÃ­pady, keÄ firma zabezpeÄÃ­ modernÃ½ kvalitnÃ½ softvÃ©r, zamestnanci vÅ¡ak nevyuÅ¾Ã­vajÃº jeho novÃ© moÅ¾nosti, a teda stagnujÃº na rovnakej Ãºrovni kvality. Aj preto sa dnes dobrÃ© univerzity nesnaÅ¾ia Å¡tudentov informatiky nauÄiÅ¥ pracovaÅ¥ s konkrÃ©tnymi nÃ¡strojmi, ale skÃ´r vybudovaÅ¥ u nich schopnosti samostatne sa uÄiÅ¥ stÃ¡le novÃ© veci. Na vÃ½ber je dnes veÄ¾kÃ© mnoÅ¾stvo metÃ³d na zlepÅ¡enie kvality. IdeÃ¡lne by bolo keby sme pouÅ¾ili vÅ¡etky, ktorÃ© sa osvedÄili. SkutoÄnÃ½ stav mÃ¡ od toho ideÃ¡lneho Äaleko. V reÃ¡lnom svete sa totiÅ¾ musÃ­"
94,458,0.584,Sprievodca svetom vedeckÃ©ho publikovania,"13.4.8 Analyticko-diagnostickÃ© sluÅ¾by AmbÃ­ciou kniÅ¾nÃ­c, ktorÃ© pÃ´sobia v akademickom a vedecko-vÃ½skumnom prostredÃ­, musÃ­ byÅ¥ poskytovanie adekvÃ¡tnej informaÄnej podpory nielen pre jednotlivcov, ale aj pre danÃº inÅ¡titÃºciu. PrÃ­stup k ponuke bibliometrickÃ½ch, scientometrickÃ½ch nÃ¡strojov, indikÃ¡torov a ukazovateÄ¾ov, ako aj produktov, ktorÃ© umoÅ¾ÅujÃº rozbor sÃºborov dÃ¡t podÄ¾a zvolenÃ½ch kritÃ©riÃ­ (naprÃ­klad sledovanie citaÄnÃ©ho ohlasu autora, Äasopisu, inÅ¡titÃºcie, vÃ½voj vednÃ©ho odboru a pod.), vytvÃ¡ra predpoklady pre prÃ­pravu podkladov zaloÅ¾enÃ½ch na analÃ½ze a vzÃ¡jomnom porovnÃ¡vanÃ­ ukazovateÄ¾ov na nÃ¡rodnej a medzinÃ¡rodnej Ãºrovni s vÃ½stupmi v rÃ´znych vizualizovanÃ½ch formÃ¡ch. VÃ½znamnÃº informaÄnÃº hodnotu majÃº naprÃ­klad podklady, ktorÃ© sa orientujÃº na bibliometriu a sledovanie vzÃ¡jomnÃ½ch citaÄnÃ½ch vzÅ¥ahov v rÃ¡mci rÃ´znych vednÃ½ch disciplÃ­n. Tieto informÃ¡cie mÃ´Å¾u vedcom uÄ¾ahÄiÅ¥ koncipovanie vedecko-vÃ½skumnÃ©ho plÃ¡nu, nadvÃ¤zovanie kontaktov v oblasti vedeckej spoluprÃ¡ce, ale aj hÄ¾adanie finanÄnej podpory pre vÃ½skumnÃ© Äinnosti. K poÅ¾adovanÃ½m kompetenciÃ¡m pre tÃºto oblasÅ¥ prÃ¡ce patrÃ­ stanovovanie stratÃ©gie rozvoja a obsahovÃ©ho zamerania budovanÃ½ch zbierok a fondov s trendom otvorenÃ©ho prÃ­stupu k informÃ¡ciÃ¡m a zabezpeÄenia vzÃ¡jomnej interoperability systÃ©mov. Na tejto Ãºrovni je veÄ¾mi dÃ´leÅ¾itÃ© stanovenie podielu na ÃºlohÃ¡ch celoÅ¡tÃ¡tnej koncepcie rozvoja knihovnÃ­ctva, takisto tvorba koncepcie a koordinÃ¡cie medzinÃ¡rodnÃ½ch kniÅ¾niÄno-informaÄnÃ½ch systÃ©mov, ako aj Å¡pecializovanÃ½ch knihovnÃ­ckych systÃ©mov. SpoluprÃ¡ca na tvorbe Å¡pecializovanÃ½ch bibliografickÃ½ch a faktografickÃ½ch databÃ¡z, vytvÃ¡ranie nÃ¡rodnÃ½ch a medzinÃ¡rodnÃ½ch Å¡tandardov pre oblasÅ¥ knihovnÃ­ctva a kniÅ¾niÄnej vedy a s tÃ½m spojenej informaÄnej Äinnosti predstavuje samostatnÃº oblasÅ¥ prÃ¡ce. Na nÃ¡rodnej Ãºrovni ide naprÃ­klad o ÃºÄasÅ¥ na vypracovÃ¡vanÃ­ celoÅ¡tÃ¡tnej koncepcie, plÃ¡nov a programov pre oblasÅ¥ tvorby kniÅ¾niÄnÃ½ch a informaÄnÃ½ch zdrojov a sluÅ¾ieb. Predpokladom ÃºspeÅ¡nosti tejto Äinnosti je neustÃ¡le sledovanie a identifikÃ¡cia zmien v oblasti novÃ½ch metÃ³d prÃ¡ce, znalosÅ¥ informaÄnÃ½ch a komunikaÄnÃ½ch technolÃ³giÃ­, ako aj meniaceho sa charakteru pouÅ¾Ã­vateÄ¾skÃ½ch potrieb. Z pohÄ¾adu pouÅ¾Ã­vateÄ¾a je dÃ´leÅ¾itÃ©, aby kniÅ¾niÄno-informaÄnÃ½ pracovnÃ­k pÃ´sobil ako odbornÃ½ konzultant, t. j. aby pomohol pouÅ¾Ã­vateÄ¾om zorientovaÅ¥ sa v rÃ´znych druhoch informaÄnÃ½ch zdrojov, s ohÄ¾adom na efektivitu vyhÄ¾adÃ¡vania a adresnosÅ¥ poÅ¾iadavky. VyÅ¡Å¡ie uvedenÃ© novÃ© sluÅ¾by kniÅ¾nice moÅ¾no realizovaÅ¥ aj novÃ½mi formami, naprÃ­klad pomocou webovÃ½ch inÅ¡truktÃ¡Å¾Ã­, webinÃ¡rmi, kurzmi, blogmi, zapojenÃ­m sa do sociÃ¡lnych sietÃ­ a pod. VirtuÃ¡lne prostredie nadobudlo v poslednom obdobÃ­ aj vÄaka trendom open access novÃ© rozmery v podobe E-science a E-research (interdisciplinÃ¡rnosÅ¥, otvorenosÅ¥, pouÅ¾Ã­vanie sociÃ¡lnych nÃ¡strojov vrÃ¡tane virtuÃ¡lnych rozhovorov, jednotnÃ½ch prÃ­stupov, zdieÄ¾ania a zapojenia sa do spoluprÃ¡ce). Tento jav sa nÃ¡sledne odrÃ¡Å¾a v obsahu spracovÃ¡vanÃ½ch dÃ¡t, ktorÃ½ch archivÃ¡cia ako aj dlhodobÃ© uchovÃ¡vanie odbornÃ½ch vedomostÃ­ a poznatkov predstavuje intelektuÃ¡lne hodnoty a dediÄstvo. AnalÃ½za takÃ½chto zdrojov a nÃ¡slednÃ© formulovanie projektov a dlhodobÃ½ch stratÃ©giÃ­, ktorÃ© berÃº ohÄ¾ad na tÃºto oblasÅ¥ prÃ¡ce"
190,219,0.584,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"nosÅ¥ami ÃºspeÅ¡nÃ©ho produktu a priorÃ­t analÃ½zou alebo odhadom je zrejme veÄ¾mi obtiaÅ¾ne a Ä¾ahko mÃ´Å¾e pri tvorbe plÃ¡nu uÅ¡kodiÅ¥ vytvorenÃ©mu produktu. A aj keÄ vytvorenÃ½ softvÃ©rovÃ½ produkt povaÅ¾ujeme za ÃºspeÅ¡nÃ½, zrejme si nemÃ´Å¾eme byÅ¥ istÃ­, Äi nemohol byÅ¥ projekt ÃºspeÅ¡nejÅ¡Ã­ a neuviazol len na lokÃ¡lnom extrÃ©me â¦ Na plÃ¡n projektu v softvÃ©rovom priemysle do urÄitej miery vplÃ½vajÃº aj nepresnÃ© alebo meniace sa poÅ¾iadavky klienta [4]. DochÃ¡dza k prÃ­padom, kedy poskytovateÄ¾ softvÃ©rovÃ©ho produktu nepochopil poÅ¾iadavky klienta, Äo mÃ´Å¾e vÃ½razne vplÃ½vaÅ¥ na plÃ¡n projektu a na jeho dodrÅ¾anie z hÄ¾adiska zdrojov vyÄlenenÃ½ch na projekt. V sÃºÄasnosti je v komerÄnej sfÃ©re spokojnosÅ¥ zÃ¡kaznÃ­ka najlepÅ¡ia marketingovÃ¡ stratÃ©gia. Tento zdroj problÃ©mu pri dodrÅ¾ovanÃ­ plÃ¡nu je znÃ¡my a pri niektorÃ½ch druhoch softvÃ©ru je skoro beÅ¾nÃ½m javom sprevÃ¡dzajÃºcim jeho vÃ½voj."
43,356,0.584,Objektovo orientovanÃ© programovanie v C++,"8.1 ChrÃ¡nenÃ© dÃ¡ta a metÃ³dy ZatiaÄ¾ sme v rÃ¡mci triedy rozoznÃ¡vali dva typy Ãºdajov a metÃ³d â sÃºkromnÃ© a verejnÃ©. Spolu s dediÄnosÅ¥ou prichÃ¡dza na scÃ©nu eÅ¡te jeden typ prvkov â tzv. chrÃ¡nenÃ© (angl. protected) prvky. Ide o dÃ¡ta a metÃ³dy triedy, ktorÃ© sÃº verejnÃ© pre jej odvodenÃ© triedy, ale sÃºkromnÃ© pre zvyÅ¡ok programu. Takto trieda umoÅ¾nÃ­ svojim potomkom pristupovaÅ¥ k svojim sÃºkromnÃ½m dÃ¡tam a metÃ³dam, ale zachovÃ¡ sa utajenie voÄi ostatnÃ½m Äastiam programu, ktorÃ© nie sÃº s triedou zviazanÃ© pomocou dediÄnosti. ChrÃ¡nenÃ© dÃ¡ta a metÃ³dy sa oznaÄujÃº pomocou kÄ¾ÃºÄovÃ©ho slova protected. Å truktÃºra triedy, ktorÃ¡ bude maÅ¥ nejakÃ½ch potomkov, teda vo vÅ¡eobecnosti bude maÅ¥ takÃ½to tvar class moja trieda private: protected: public:"
40,67,0.584,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"8 PokroÄilÃ¡ verzia uÄiaceho algoritmu TÃºto modifikÃ¡ciu uÄenia navrhli H. Jaeger a H. Haas [4] pre Echo State neurÃ³novÃº sieÅ¥ so spÃ¤tnou vÃ¤zbou (s vÃ¡hami smerujÃºcimi z vÃ½stupnÃ½ch neurÃ³nov spÃ¤Å¥ do dynamickÃ©ho rezervoÃ¡ra W back . Jej podstata spoÄÃ­va v znovu vyuÅ¾itÃ­ vÃ½stupnÃ©ho signÃ¡lu z dynamickÃ©ho rezervoÃ¡ra pre opÃ¤tovnÃ© preuÄenie siete. KeÄ natrÃ©novanÃ¡ sieÅ¥ v procese âÅ¾ivotaâ autonÃ³mne generuje vÃ½stupnÃ½ signÃ¡l, prijÃ­ma svoj vlastnÃ½ vÃ½stupnÃ½ signÃ¡l cez spÃ¤tnovÃ¤zobnÃ© vÃ¡hy. Tento signÃ¡l sa lÃ­Å¡i od pÃ´vodne pouÅ¾itÃ©ho v procese vzorkovania, Äo spÃ´sobÃ­, Å¾e stavy v dynamickom rezervoÃ¡ri budÃº odliÅ¡nÃ© ako v procese uÄenia. Ak by sa poÄas uÄenia siete privÃ¡dzal na vÃ½stupnÃ© neurÃ³ny signÃ¡l podobnÃ½ tomu, ktorÃ½ bude vystupovaÅ¥ z dynamickÃ©ho rezervoÃ¡ra v procese Å¾ivota siete, presnosÅ¥ modelu sa zvÃ½Å¡i. TÃºto myÅ¡lienku moÅ¾no zahrnÃºÅ¥ do procesu uÄenia siete v nasledujÃºcich etapÃ¡ch: 1. Echo State neurÃ³novÃº sieÅ¥ najprv nauÄÃ­me klasickou verziou uÄiaceho algoritmu, ÄÃ­m dostaneme predbeÅ¾nÃ© vÃ½stupnÃ© vÃ¡hy, ktorÃ© si oznaÄÃ­me ako 2. Z pÃ´vodnÃ½ch vzoriek pouÅ¾itÃ½ch na uÄenie siete a predbeÅ¾nÃ½ch vÃ½stupnÃ½ch vÃ¡h vygenerujeme novÃº sÃ©riu trÃ©novacÃ­ch vzoriek d â²(n) pre n > 1 , a to nasledovne: o poloÅ¾Ã­me d â²(1) = d (1) a odÅ¡tartujeme sieÅ¥ z nÃ¡hodnÃ©ho stavu x (1) . Na vÃ½stup siete privedieme d (1) a vypoÄÃ­tame x (2) a y (2) pomocou tÃ½chto vzÅ¥ahov: x (2) = tanh(Wx (1) + Wback d (1)) , 0  y ( 2) = tanh(Wout ( x (2))), a poloÅ¾Ã­me d â²(2) = y (2). o pre ÄalÅ¡ie vzorky d â²(3),..., d â²(n) pouÅ¾ijeme nasledovnÃ© zovÅ¡eobecnenÃ© vzorce:   x (n) = tanh(Wx (n â 1) + Wback d (n â 1)), 0  y (n) = tanh(Wout ( x (n))), a poloÅ¾Ã­me d â²(n) = y (n). 3. Tento proces opakujeme n-krÃ¡t, ÄÃ­m dostaneme novÃº sÃ©riu vzoriek, ktorÃ¡ predstavuje jednokrokovÃº predikciu z pÃ´vodne natrÃ©novanej siete."
369,57,0.584,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 1.14. Postup normalizÃ¡cie do tretej normÃ¡lnej formy TÃ½mto krokom samotnÃ¡ normalizÃ¡cia nekonÄÃ­. KritÃ©riÃ¡ pre normÃ¡lnu formu je potrebnÃ© aplikovaÅ¥ na novovzniknutÃ© triedy. Model na obr. 1.14 nie je v tretej normÃ¡lnej forme, pretoÅ¾e existuje tranzitÃ­vna funkÄnÃ¡ zÃ¡vislosÅ¥ medzi atribÃºtmi ÄÃ­slo vchodu, orientaÄnÃ© ÄÃ­slo a ulica (podobne obec). Inak povedanÃ©, atribÃºty ulica a obec nie sÃº vlastnosÅ¥ami vchodu, ale ÄalÅ¡ej triedy, Äi tried. Po ÄalÅ¡Ã­ch dvoch krokoch normalizÃ¡cie dostÃ¡vame model na obr. 1.15. Model je trochu zloÅ¾itejÅ¡Ã­ neÅ¾ ÄistÃ½ teoretickÃ½ model, pretoÅ¾e obsahuje aj ohraniÄenia typu alebo (presnejÅ¡ie XOR): obec mÃ´Å¾e a nemusÃ­ maÅ¥ ulice (menÅ¡ie obce nemajÃº nÃ¡zvy ulÃ­c). Z modelu sme vypustili umelÃ© primÃ¡rne kÄ¾ÃºÄe tried Vchod, Ulica, Obec."
196,115,0.583,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"zabezpecÌitâ zalomenie riadku. PrÃ­kazov na zalomenie riadku je viacero. UÅ¾itocÌnÃ© mÃ´Å¾u bytâ nasledovnÃ©: â¢ PrÃ­kaz \\ ukoncÌÃ­ predchÃ¡dzajÃºci odsek a zacÌne novÃ½. MÃ¡ volitelânÃ½ argument \\[vertikÃ¡lna-medzera], vertikÃ¡lna medzera urcÌuje, vzdialenostâ k nasledujÃºcemu riadku. â¢ PrÃ­kaz \\* v rÃ¡mci existujÃºceho odseku zacÌne novÃ½ riadok. â¢ PrÃ­kaz \- umoÅ¾nÃ­ zadefinovatâ delenie slova na lâubovolânom mieste. â¢ PrÃ­kaz \linebreak[cÌÃ­slo] predstavuje jemnÃº poÅ¾iadavku \linebreak[0] aÅ¾ dÃ´raznÃº Å¾iadostâ \linebreak[4] v zÃ¡vislosti od cÌÃ­sla v rozsahu 0 aÅ¾ 4. CÌÃ­m je cÌÃ­slo vyÅ¡Å¡ie tÃ½m je poÅ¾iadavka vÃ¡Å¾nejÅ¡ia. â¢ PrÃ­kaz \newline zalamuje riadok v rÃ¡mci odseku. PrÃ­kaz \\ nemÃ¡ koncÌitâ prÃ¡zdnym riadkom. Je vhodnÃ½ len tam, kde nasledovnÃ½ riadok neostane prÃ¡zdny. Na vytvorenie medzery je vhodnÃ© pouÅ¾itâ \bigskip, alebo \medskip."
94,158,0.583,Sprievodca svetom vedeckÃ©ho publikovania,"6.1 Å Ã­renie povedomia (advocacy) Na dosiahnutie akejkoÄ¾vek spoloÄenskej zmeny je nevyhnutnÃ© Ãºsilie na viacerÃ½ch Ãºrovniach. Zmenu myslenia nemoÅ¾no dosiahnuÅ¥ bez komunikÃ¡cie â rozhovorov v okruhu zainteresovanÃ½ch o potrebnosti tejto zmeny, ktorÃ© spravidla vyÃºstia do sformulovania manifestu. Ten potom prenikÃ¡ do Å¡irÅ¡ieho okruhu potenciÃ¡lnych zÃ¡ujemcov o zmenu a ak si ich zÃ­ska, hnutie naberÃ¡ na sile. PrvÃ½m krokom k Å¡Ã­reniu povedomia o otvorenom prÃ­stupe boli formÃ¡lne vyhlÃ¡senia zaÄÃ­najÃºce BudapeÅ¡tianskou iniciatÃ­vou, ku ktorÃ½m sa pripojilo mnoÅ¾stvo organizÃ¡ciÃ­ a odbornÃ½ch spoloÄnostÃ­. Nasledovala propagÃ¡cia prostrednÃ­ctvom informÃ¡ciÃ­ na webovÃ½ch strÃ¡nkach a argumentÃ¡cia v ÄlÃ¡nkoch, blogovÃ½ch prÃ­spevkoch a diskusiÃ¡ch na internete. No najdÃ´leÅ¾itejÅ¡Ã­ proces sa odohrÃ¡va v osobnÃ½ch rozhovoroch, na Ãºrovni jednotlivÃ½ch vÃ½skumnÃ­kov a knihovnÃ­kov. IdeÃ¡lnym spÃ´sobom advokÃ¡cie je poskytnÃºÅ¥ skupine, ktorÃº sa snaÅ¾Ã­me presvedÄiÅ¥, nieÄo praktickÃ© a uÅ¾itoÄnÃ©, ako urobilo naprÃ­klad zdruÅ¾enie SPARC sformulovanÃ­m dodatkov k autorskÃ½m zmluvÃ¡m, ktorÃ© mnohÃ½m vedcom bez prÃ¡vnickÃ©ho vzdelania pomohli zastaÅ¥ sa svojich prÃ¡v (str. 37 a 87)."
130,412,0.583,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 7-15. CentralizovanÃ¡ koordinÃ¡cia ÄiastkovÃ½ch plÃ¡nov. Za koordinÃ¡ciu ÄiastkovÃ½ch plÃ¡nov jednotlivÃ½ch agentov je zodpovednÃ½ jeden agent. KoordinÃ¡tor identifikuje vzÃ¡jomne zÃ¡vislÃ© Äasti plÃ¡nov jednotlivÃ½ch agentov a nÃ¡jde synchronizÃ¡ciu potrebnÃº pre sprÃ¡vne vykonanie jednotlivÃ½ch ÄiastkovÃ½ch plÃ¡nov. MÃ´Å¾e tieÅ¾ preusporiadaÅ¥ Äasti plÃ¡nov, aby minimalizoval negatÃ­vne vzÃ¡jomnÃ© vzÅ¥ahy medzi akciami a naopak maximalizoval pozitÃ­vne ÃºÄinky vzÃ¡jomnÃ½ch vzÅ¥ahov akciÃ­."
190,140,0.583,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"VeÄ¾mi dÃ´leÅ¾itÃ½m aspektom, na ktorÃ½ musÃ­me neustÃ¡le pri tvorbe plÃ¡nu prihliadaÅ¥, je rozsah projektu, pre ktorÃ½ plÃ¡n zostavujeme. Zostavovanie plÃ¡nu bez ohÄ¾adu na rozsah projektu je zÃ¡sadnou chybou, ktorÃ¡ s najvÃ¤ÄÅ¡ou pravdepodobnosÅ¥ou vyÃºsti do vytvorenia prakticky nepouÅ¾iteÄ¾nÃ©ho plÃ¡nu, ktorÃ½ bude slÃºÅ¾iÅ¥ iba ako ÄalÅ¡ia dokumentÃ¡cia a alibi pre manaÅ¾Ã©rov, keÄ sa ich niekto spÃ½ta na to, Äo robili. Tu sa mÃ´Å¾eme stretnÃºÅ¥ s dvoma extrÃ©mami. Ak podcenÃ­me rozsah projektu, mÃ´Å¾eme sa dostaÅ¥ do situÃ¡cie, kedy navrhnutÃ½ plÃ¡n ani zÄaleka nepokrÃ½va potreby projektu, a teda je vysokÃ¡ pravdepodobnosÅ¥, Å¾e sa pri rieÅ¡enÃ­ projektu na nieÄo zabudne. SkÃ´r Äi neskÃ´r tak narazÃ­me na komplikÃ¡cie, ktorÃ© mÃ´Å¾u zÃ¡sadne ovplyvniÅ¥ celÃ½ priebeh rieÅ¡enia. TakÃ½to plÃ¡n vÃ¤ÄÅ¡inou vyÃºsti do oneskorenÃ©ho ukonÄenia projektu a s tÃ½m spojnÃ½m zvyÅ¡ovanÃ­m"
130,533,0.583,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"SystÃ©m tÃ½m, Å¾e redukuje a upravuje moÅ¾nosti navigÃ¡cie, do urÄitej miery preberÃ¡ kontrolu nad pouÅ¾Ã­vateÄ¾om, Äo je v rozpore s pÃ´vodnou koncepciou hypertextu, kde mÃ¡ pouÅ¾Ã­vateÄ¾ ÃºplnÃº kontrolu nad tÃ½m, ktorÃ© odkazy nasleduje a ku ktorÃ½m strÃ¡nkam pristupuje. PouÅ¾Ã­vatelia povaÅ¾ujÃº adaptÃ­vne systÃ©my Äasto ako obmedzujÃºce, nepredvÃ­dateÄ¾nÃ© a mÃ¤tÃºce. AdaptÃ­vne systÃ©my preto musÃ­me navrhovaÅ¥ tak, aby pouÅ¾itÃ© metÃ³dy a techniky prispÃ´sobovania boli pouÅ¾itÃ© sprÃ¡vnym spÃ´sobom, aby ich pouÅ¾itie bolo prÃ­nosom, aby nemiatli pouÅ¾Ã­vateÄ¾a a aby ich pouÅ¾Ã­vateÄ¾ dokÃ¡zal vyuÅ¾iÅ¥. JednÃ½m z problÃ©mov je nestÃ¡losÅ¥ prezentÃ¡cie, teda fakt, Å¾e v dvoch rÃ´znych momentoch mÃ´Å¾e byÅ¥ tÃ¡ istÃ¡ informÃ¡cia prezentovanÃ¡ rÃ´zne. To sÅ¥aÅ¾uje orientÃ¡ciu pouÅ¾Ã­vateÄ¾a. NajvÃ¤ÄÅ¡Ã­m rizikom je zmena spÃ´sobu prezentÃ¡cie informÃ¡ciÃ­, ako aj prispÃ´sobovanie moÅ¾nostÃ­ navigÃ¡cie. Jedno z rieÅ¡enÃ­ tohto problÃ©mu poskytuje systÃ©m SmexWeb (Albrecht, 2000), v ktorom sa zaznamenÃ¡va histÃ³ria zmien modelu pouÅ¾Ã­vateÄ¾a. SpÃ´sob prezentÃ¡cie informÃ¡ciÃ­ sa tak poÄas jednÃ©ho sedenia, kedy pouÅ¾Ã­vateÄ¾ pracuje so systÃ©mom, nemenÃ­."
190,161,0.583,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"5. NekritickÃ© pouÅ¾Ã­vanie vÅ¡eobecne uznÃ¡vanÃ½ch technÃ­k â navzdory tomu, Å¾e unifikovanÃ© procesy alebo agilnÃ© metÃ³dy sÃº odporÃºÄanÃ© postupy, nie je vhodnÃ© ich pouÅ¾Ã­vaÅ¥ bezhlavo na rieÅ¡enie vÅ¡etkÃ½ch druhy problÃ©mov. 6. Dovolenie plÃ¡nu vzdialiÅ¥ sa od reality â akokoÄ¾vek dobre vytvorenÃ½ plÃ¡n sa mÃ´Å¾e vplyvom problÃ©mov odtrhnÃºÅ¥ od reality. NechaÅ¥ takÃ½to plÃ¡n neupravenÃ½, ho robÃ­ nefunkÄnÃ½m. 7. PlÃ¡novanie prÃ­liÅ¡ mnohÃ½ch detailov prÃ­liÅ¡ skoro â ÃºroveÅ abstrakcie musÃ­ byÅ¥ v kaÅ¾dej fÃ¡ze zachovanÃ¡ na prÃ­sluÅ¡nej miere. Snaha naplÃ¡novaÅ¥ v poÄiatoÄnej fÃ¡ze projektu systÃ©m do ÃºplnÃ½ch detailov je takmer rovnako zlÃ¡, ako neplÃ¡novaÅ¥ vÃ´bec. 8. Dobehnutie stratenÃ©ho â ÄastÃ¡ chyba pri zaostÃ¡vanÃ­ za ÄasovÃ½m plÃ¡nom je PodÄ¾a mojich predpoklad, Å¾e sa stratenÃ½ Äas zÃ­skame v ÄalÅ¡ej fÃ¡ze. skÃºsenostÃ­ 9. NepouÄenie sa z minulÃ½ch chÃ½b â toto ani nepotrebuje komentÃ¡r."
135,113,0.582,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.1.5 SpoluprÃ¡ca a sÃºinnos sÃºiastok DistribuovanÃ½ systÃ©m je postavenÃ½ na moÅ¾nosti pouÅ¾Ã­va viacerÃ© sÃºiastky, ktorÃ© sa vykonÃ¡vajÃº na rÃ´znych softvÃ©rovÃ½ch a hardvÃ©rovÃ½ch platformÃ¡ch. Nevyhnutnosou pri komunikÃ¡cii medzi jednotlivÃ½mi sÃºiastkami je sÃºinnos zÃºastnenÃ½ch sÃºiastok. SÃºinnos je zaloÅ¾enÃ¡ na vÃ½mene sprÃ¡v medzi sÃºiastkami na zÃ¡klade stanovenÃ½ch konvenciÃ­. SÃºinnos sÃºiastok je silne zÃ¡vislÃ¡ na ich zloÅ¾itosti. JednoduchÅ¡ie sÃºiastky sÃº menej nÃ¡chylnÃ© na chyby v komunikÃ¡cii. V zÃ¡vislosti od pouÅ¾itia konkrÃ©tneho spÃ¡jajÃºceho softvÃ©ru, mÃ´Å¾e by sÃºinnos realizovanÃ¡ viacerÃ½mi spÃ´sobmi ako:"
41,122,0.582,InformaÄnÃ© vzdelÃ¡vanie,"POZNÃMKA: Kedysi si staÄilo robiÅ¥ poznÃ¡mky na okraji tlaÄenej strÃ¡nky. Ak si na to spomeniem, nedÃ¡ mi si nepovedaÅ¥ â zlatÃ© starÃ© Äasy. MnohokrÃ¡t mÃ¡m pocit, najmÃ¤ pri pretlaku informÃ¡ciÃ­, Å¾e tento spÃ´sob bol vysoko prehÄ¾adnÃ½ a efektÃ­vny. Medzi najznÃ¡mejÅ¡ie patrÃ­: LaTeX â jeden z najzÃ¡kladnejÅ¡Ã­ch a najviac pouÅ¾Ã­vanÃ½ch. Sami tvorcovia ho volajÃº systÃ©mom na prÃ­pravu dokumentov. Je primÃ¡rne urÄenÃ½ na prÃ­pravu technickÃ½ch a vedeckÃ½ch dokumentov. PatrÃ­ do kategÃ³rie free software. To naprÃ­klad znamenÃ¡, Å¾e vÃ½vojÃ¡rsky tÃ­m neposkytuje na tento produkt Å¾iadnu zÃ¡ruku. Zato sÃº ale vÅ¡etky informÃ¡cie a zdrojovÃ© kÃ³dy publikovanÃ©. Od LaTeXu sa vlastne odvÃ­jajÃº mnohÃ© inÃ© nÃ¡stroje pre pÃ­sanie ÄlÃ¡nkov. DÃ´vodom jeho jeho vzniku bola vizuÃ¡lna, aj praktickÃ¡ strÃ¡nka, ale hlavne sprÃ¡vne pÃ­sanie matematickÃ½ch vzorcov tak, aby tlaÄiar, sadzaÄ, nemusel rozmÃ½Å¡Ä¾aÅ¥, kde makÃº byÅ¥ umiestnenÃ© a ako vlastne majÃº byÅ¥ napÃ­sanÃ©. Jeho pÃ´vod siaha do 70-tych rokov. Dnes sÃº distribÃºcie spojenÃ© s LaTeXom previazanÃ© s mnoÅ¾stom vzorov (templates) a dajÃº sa nainÅ¡talovaÅ¥ ako zdieÄ¾anÃ¡ verzia, alebo jedna inÅ¡tancia."
43,385,0.582,Objektovo orientovanÃ© programovanie v C++,"UÅ¾ vieme, Å¾e v konÅ¡truktore odvodenej triedy mÃ´Å¾eme pouÅ¾iÅ¥ niektorÃ½ konÅ¡truktor rodiÄovskej triedy. Rovnako je to aj pri predeï¬novanÃ­ metÃ³dy rodiÄovskej triedy. V predeï¬novanej metÃ³de mÃ´Å¾eme zavolaÅ¥ pÃ´vodnÃº verziu z rodiÄovskej triedy, ÄÃ­m sa postarÃ¡me o vloÅ¾enie vÅ¡etkÃ½ch jej prÃ­kazov a mÃ´Å¾eme tÃ½m skrÃ¡tiÅ¥ kÃ³d. MetÃ³du rodiÄovskej triedy nevolÃ¡me v hlaviÄke predeï¬novanej metÃ³dy odvodenej triedy, ako to bolo v prÃ­pade konÅ¡truktora, ale jej volanie uvedieme medzi prÃ­kazmi predeï¬novanej metÃ³dy. MÃ´Å¾eme to urobiÅ¥ na Ä¾ubovoÄ¾nom mieste â tam, kde chceme prÃ­sluÅ¡nÃ© prÃ­kazy pouÅ¾iÅ¥. MetÃ³da Vypis udaje triedy autobus teda mÃ´Å¾e maÅ¥ naprÃ­klad aj takÃºto podobu"
265,51,0.582,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NajÄastejÅ¡ie je rozliÅ¡ovanie rolÃ­ podÄ¾a etÃ¡p Å¾ivotnÃ©ho cyklu softvÃ©ru: analytik, nÃ¡vrhÃ¡r, programÃ¡tor (ten Äo implementuje), tester, ÃºdrÅ¾bÃ¡r (ten Äo softvÃ©r udrÅ¾iava po jeho nasadenÃ­ do prevÃ¡dzky, angl. maintenance person). Äasto pouÅ¾Ã­vanÃ¡ rola v praxi je âvÃ½vojÃ¡râ (angl. developer). TÃ½mto pojmom sa oznaÄuje predovÅ¡etkÃ½m programÃ¡tor, no Äasto pod neho spadÃ¡ aj nÃ¡vrh, testovanie Äi dokonca analÃ½za. Po odovzdanÃ­ softvÃ©ru do prevÃ¡dzky vstupujÃº do procesu aj operÃ¡tori, administrÃ¡tori, Äi ÄalÅ¡Ã­ podpornÃ½ personÃ¡l na zabezpeÄenie pouÅ¾Ã­vania softvÃ©ru. StretnÃºÅ¥ sa moÅ¾no aj so Å¡pecifickejÅ¡Ã­mi oznaÄeniami rolÃ­, ktorÃ© vyplÃ½vajÃº z toho, Å¾e dotyÄnÃ¡ osoba je Å¡pecialista na urÄitÃº oblasÅ¥. NaprÃ­klad architekt je nÃ¡vrhÃ¡r sÃºstrediaci sa na architektÃºru softvÃ©ru a vÃ´bec celkovÃ½ pohÄ¾ad na softvÃ©r. DatabÃ¡zovÃ½ Å¡pecialista sa sÃºstreÄuje na otÃ¡zky nÃ¡vrhu a implementÃ¡cie mechanizmov sÃºvisiacich s uchovÃ¡vanÃ­m Ãºdajov. NÃ¡vrhÃ¡r pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­ (angl. frontend designer) sa venuje oblastiam ako grafickÃ½ nÃ¡vrh a Å¡tÃ½l rozhrania, informaÄnÃ¡ architektÃºra aplikÃ¡cie, pouÅ¾iteÄ¾nosÅ¥ a pod. S termÃ­nom âÅ¡pecialistaâ sa Äasto spÃ¡ja termÃ­n âkonzultantâ. Konzultant je Å¡pecialista, ktorÃ½ zastÃ¡va predovÅ¡etkÃ½m poradnÃº Ãºlohu. Do projektu je spravidla"
190,77,0.582,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"SoftvÃ©rovÃ½ tÃ­m je Å¡pecifickÃ½m zoskupenÃ­m Ä¾udÃ­, ktorÃ­ sÃº dosÅ¥ Ãºzko Å¡pecializovanÃ­, keÄÅ¾e vykonÃ¡vajÃº znaÄne odliÅ¡nÃ© Äinnosti. Tieto Äinnosti od seba istÃ½m spÃ´sobom zÃ¡visia, avÅ¡ak ich ciele mÃ´Å¾u byÅ¥ navzÃ¡jom v protiklade (napr. vÃ½vojÃ¡r mÃ¡ produkovaÅ¥ kÃ³d bez chÃ½b, tester hÄ¾adÃ¡ chyby). MÃ´Å¾eme teda skonÅ¡tatovaÅ¥, Å¾e aj v softvÃ©rovom tÃ­me, ktorÃ½ prekonal fÃ¡zu kryÅ¡talizÃ¡cie, stÃ¡le sÃº predpoklady na vznik konfliktu. NajÄastejÅ¡ie vyskytujÃºcim sa prÃ­padom je spor medzi vÃ½vojÃ¡rmi a testermi. Zdroj konfliktu je prirodzenÃ½: ich Ãºlohy od seba zÃ¡visia, a pritom sÃº protichodnÃ©. Zdroje"
369,22,0.582,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Modely softvÃ©rovÃ½ch systÃ©mov SoftvÃ©rovÃ© systÃ©my patria medzi najkomplexnejÅ¡ie artefakty (objekty vytvorenÃ© Älovekom). Aby sme dokÃ¡zali lepÅ¡ie porozumieÅ¥ takÃ½mto komplexnÃ½m artefaktom, Äasto vytvÃ¡rame ich zjednoduÅ¡enÃ© verzie, modely. V stavebnÃ­ctve sa naprÃ­klad vytvÃ¡rajÃº makety budov alebo obytnÃ½ch zÃ³n, aby si Ä¾udia vedeli lepÅ¡ie predstaviÅ¥, ako prÃ­sluÅ¡nÃ¡ budova alebo obytnÃ¡ Å¡tvrÅ¥ bude v realite vyzeraÅ¥ a mohla byÅ¥ Äalej skÃºmanÃ¡ z urÄitÃ©ho aspektu (plÃ¡novanÃº obytnÃº Å¡tvrÅ¥ mÃ´Å¾eme skÃºmaÅ¥ naprÃ­klad z hÄ¾adiska dopravnej prÃ­stupnosti alebo vÃ½Å¡kovÃº budovu z hÄ¾adiska odolÃ¡vania silnÃ½m vetrom alebo zemetraseniu). Rozanski a Woods [Rozanski+ 2008] definujÃº softvÃ©rovÃ½ model takto:"
184,125,0.582,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Vzor sprostredkovateÄ¾ je vhodnÃ½ pre aplikÃ¡cie, ktorÃ© vyÅ¾adujÃº spracovanie sprÃ¡v poÄas ich doruÄovania. SprostredkovateÄ¾ umoÅ¾Åuje odosielateÄ¾ovi a prijÃ­mateÄ¾ovi zachovaÅ¥ si vlastnÃ½ formÃ¡t sprÃ¡v a preberÃ¡ zodpovednosÅ¥ za transformÃ¡ciu medzi poÅ¾adovanÃ½mi tvarmi. ZÃ¡roveÅ sa sÃºstredenÃ­m transformÃ¡cie do sprostredkovateÄ¾a sprÃ¡v zvyÅ¡uje jej pochopiteÄ¾nosÅ¥ a modifikovateÄ¾nosÅ¥. ArchitektÃºra koordinÃ¡tor procesu ZÃ¡kladnÃ© prvky vzoru KoordinÃ¡tor procesu sÃº znÃ¡zornenÃ© na obrÃ¡zku 2-19."
240,530,0.582,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"ZostÃ¡va nÃ¡m napÃ­saÅ¥ funkciu nacitaj_zapas() pre spracovanie jednÃ©ho zÃ¡pasu zo sÃºboru. Funkcia bude sÃºbor naÄÃ­tavaÅ¥ podÄ¾a Å¡pecifikÃ¡cie formÃ¡tu v zadanÃ­ Ãºlohy. NajskÃ´r naÄÃ­tame a spracujeme menÃ¡ hrÃ¡Äov, pre kaÅ¾dÃ©ho nÃ¡jdeme podÄ¾a jeho mena index v poli hrÃ¡Äov h[]. Ak sa tam eÅ¡te nenachÃ¡dza, tak sa ho pokÃºsime pridaÅ¥. Pred pridanÃ­m musÃ­me eÅ¡te skontrolovaÅ¥, Äi pole h[] mÃ¡ dostatoÄnÃº kapacitu. Ak nie, tak pole zvÃ¤ÄÅ¡Ã­me na dvojnÃ¡sobnÃº veÄ¾kosÅ¥. TÃ½mto zdvojenÃ­m moÅ¾no vyhradÃ­me viac pamÃ¤te ako bude skutoÄne potrebnÃ© (napr. vyhradÃ­me aÅ¾ 128 prvkov, ale hrÃ¡Äov bude nakoniec len 65). MnoÅ¾stvo pouÅ¾itej pamÃ¤te bude vÅ¡ak k celkovÃ©mu poÄtu hrÃ¡Äov najviac dvojnÃ¡sobnÃ©, Äo je vzhÄ¾adom na oÄakÃ¡vanÃ© poÄty zanedbateÄ¾nÃ½ nedostatok. Naopak, ak by sme pole zvÃ¤ÄÅ¡ovali vÅ¾dy po jednom (o jednÃ©ho novÃ©ho hrÃ¡Äa), tak by neÃºmerne (nÃ¡sobne) narÃ¡stla ÄasovÃ¡ nÃ¡roÄnosÅ¥ naÄÃ­tavania. UrÄenie indexu hrÃ¡Äa v poli h[] podÄ¾a jeho mena implementujeme pomocnou funkciou index_hraca() takto:"
94,174,0.581,Sprievodca svetom vedeckÃ©ho publikovania,"publikovania. PublikÃ¡ciou Open Science Training Handbook propaguje efektÃ­vne praktiky Å¡Ã­renia otvorenÃ©ho prÃ­stupu (FOSTER 2018). Na poli vedeckej komunikÃ¡cie eÅ¡te aj dnes prevlÃ¡dajÃº tradiÄne publikovanÃ© (spoplatnenÃ©) ÄlÃ¡nky, podiel ÄlÃ¡nkov s otvorenÃ½m prÃ­stupom vÅ¡ak stÃ¡le rastie. VÅ¡eobecnÃ¡ prospeÅ¡nosÅ¥ otvorenÃ©ho prÃ­stupu je znÃ¡ma â kniÅ¾nice, univerzity a vÅ¡etci tÃ­, ktorÃ­ museli za prÃ­stup k vÃ½sledkom vÃ½skumu platiÅ¥, uÅ¡etria peniaze a Äas, ktorÃ½ museli venovaÅ¥ hÄ¾adaniu nedostupnÃ½ch ÄlÃ¡nkov. Poznatky sa dostanÃº k vÃ¤ÄÅ¡iemu mnoÅ¾stvu prijÃ­mateÄ¾ov, takÅ¾e vzrastie spoloÄenskÃ½ dopad vÃ½skumu, informovanosÅ¥ verejnosti, aj scientometrickÃ© parametre publikÃ¡ciÃ­. Vedci sa nemusia vzdÃ¡vaÅ¥ autorskÃ½ch prÃ¡v (pouÅ¾Ã­vajÃº licenciu Creative Commons), takÅ¾e majÃº nad svojou prÃ¡cou vÃ¤ÄÅ¡iu kontrolu. OtvorenÃ½ prÃ­stup vÅ¡ak stÃ¡le ÄelÃ­ veÄ¾kÃ½m vÃ½zvam. Prvou z nich je identifikÃ¡cia funkÄnÃ©ho modelu financovania. Druhou a nemenej dÃ´leÅ¾itou je udrÅ¾anie (alebo posilnenie) mechanizmov kontroly kvality na Ãºrovni ÄlÃ¡nkov aj na Ãºrovni Äasopisov."
76,251,0.581,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"DÃ´kaz vety neurobÃ­me, ale obsah musÃ­ byÅ¥ jasnÃ½. Symbol ï²( ) znamenÃ¡ Pearsonov korelaÄnÃ½ koeficient veliÄÃ­n , z definÃ­cie 4.2.11. Symbol ï² znamenÃ¡ parameter, je to piaty parameter rozdelenia ( ), t. j. ï² je symbol v zÃ¡pise N( , , ï³ , ï³ ï²). Z ÄlÃ¡nku 3.2 vieme, Å¾e parameter ï² = 0 prÃ¡ve vtedy, keÄ zloÅ¾ky vektora sÃº nezÃ¡vislÃ© (to nie je Å¥aÅ¾kÃ© ukÃ¡zaÅ¥, to sme urobili). Berme ako fakt (bez dÃ´kazu), Å¾e pri uvedenÃ½ch predpokladoch, vÃ½poÄet Pearsonovho korelaÄnÃ©ho koeficientu ï²( ) vedie k hodnote ï². Z uvedenÃ©ho plynie, Å¾e v prÃ­pade normÃ¡lneho rozdelenia nezÃ¡vislosÅ¥ a nekorelovanosÅ¥ znamenajÃº to istÃ©. Ãlohy 4.2.1 Rozdelenie nÃ¡hodnÃ©ho vektora je danÃ© tabuÄ¾kou"
59,676,0.581,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"TÃ½mto sme vyÄerpali zÃ¡kladnÃ© pravidlÃ¡ pomocou ktorÃ½ch zjednoduÅ¡ujeme poÄiatoÄnÃº pozÃ­ciu hry sudoku doplnenÃº o alternatÃ­vne moÅ¾nosti. AplikovanÃ­m tÃ½chto pravidiel sme vÅ¾dy dostali jednoduchÅ¡iu pozÃ­ciu, ktorÃ¡ mÃ¡ menej alternatÃ­vnych moÅ¾nostÃ­ a aspoÅ v jednej bunke alternatÃ­vne moÅ¾nosti boli zredukovanÃ© na jednu moÅ¾nosÅ¥, ktorÃ¡ je zafixovanÃ¡ pre celÃº zostÃ¡vajÃºcu hru. ÄalÅ¡ie pravidlÃ¡, ktorÃ© budÃº prezentovanÃ© len zjednoduÅ¡ujÃº vÃ½chodiskovÃº pozÃ­ciu bez redukcie podmnoÅ¾iny alternatÃ­vnych moÅ¾nosti na jeden prvok. Pravidlo 3. (ExplicitnÃ¡ dvojica) Ak v i-tom stÄºpci alebo v j-tom riadku alebo v danej podoblasti existujÃº takÃ© dve bunky, ktorÃ© obsahujÃº rovnakÃº podmnoÅ¾nu alternatÃ­vnych moÅ¾nosti ï»ï¡ ,ï¢ï½ , potom ÄÃ­sla ï¡,ï¢ mÃ´Å¾u byÅ¥ odstrÃ¡nenÃ© vo vÅ¡etkÃ½ch inÃ½ch bunkÃ¡ch, ktorÃ© leÅ¾ia v danom riadku, stÄºpci resp. podoblasti (ImplicitnÃ¡ dvojica) Ak v i-tom stÄºpci alebo v j-tom riadku alebo v danej podoblasti existujÃº takÃ© dve bunky, ktorÃ© obsahujÃº alternatÃ­vne moÅ¾nosti ï» A,ï¡ ,ï¢,Bï½ a ï» Aï¢,ï¡ ,ï¢,Bï¢ï½ , kde A, AÂ´, B, BÂ´ alternatÃ­vne moÅ¾nosti rÃ´zne od ï¡,ï¢, priÄom v ostatnÃ½ch polohÃ¡ch v danom riadku, stÄºpci resp. podoblasti sa nevyskytujÃº ÄÃ­sla ï¡,ï¢, potom obe uvedenÃ© podmnoÅ¾iny alternatÃ­vnych moÅ¾nostÃ­ mÃ´Å¾u byÅ¥ zjednoduÅ¡enÃ© na ï»ï¡ ,ï¢ï½ . i-tÃ½ riadok"
265,11,0.581,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Zoznam otÃ¡zok 2.1.24 KtorÃ¡ vlastnosÅ¥ Å¡pecifikÃ¡cie poÅ¾iadaviek je dÃ´leÅ¾itejÅ¡ia â ÃºplnosÅ¥ alebo sledovateÄ¾nosÅ¥? Vysvetlite preÄo. . . . . . . . . . . . . . . . . . . 2.1.25 KtorÃ¡ vlastnosÅ¥ Å¡pecifikÃ¡cie poÅ¾iadaviek je dÃ´leÅ¾itejÅ¡ia â merateÄ¾nosÅ¥ alebo konzistentnosÅ¥? Vysvetlite preÄo. . . . . . . . . . . . . . . . 2.1.26 KtorÃ¡ vlastnosÅ¥ Å¡pecifikÃ¡cie poÅ¾iadaviek je dÃ´leÅ¾itejÅ¡ia â sledovateÄ¾nosÅ¥ alebo zoradenie poÅ¾iadaviek podÄ¾a dÃ´leÅ¾itosti? Vysvetlite preÄo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.1.27 Kto vykonÃ¡va validÃ¡ciu poÅ¾iadaviek na softvÃ©r? . . . . . . . . . . 2.1.28 Ako zabezpeÄujeme konzistentnosÅ¥ poÅ¾iadaviek na softvÃ©r? . . . 2.1.29 Ako zabezpeÄujeme jednoznaÄnosÅ¥ poÅ¾iadaviek na softvÃ©r? . . . 2.1.30 UveÄte problÃ©my vznikajÃºce pri Å¡pecifikÃ¡cii poÅ¾iadaviek na softvÃ©r. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.1.31 AkÃ¡ ÄinnosÅ¥ je, z hÄ¾adiska testovania, neoddeliteÄ¾nou ÄasÅ¥ou tvorby poÅ¾iadaviek na softvÃ©r? . . . . . . . . . . . . . . . . . . . . . . 2.1.32 Vysvetlite, preÄo je dobrÃ© vytvÃ¡raÅ¥ funkcionÃ¡lne testovacie scenÃ¡re poÄas Å¡pecifikÃ¡cie. MÃ¡ to aj nejakÃ© nevÃ½hody? . . . . . . . . . . NÃ¡vrh 2.2.1 AkÃ© Äinnosti vykonÃ¡vame v etape nÃ¡vrhu v softvÃ©rovom projekte? 2.2.2 Äo je vÃ½stupom etapy nÃ¡vrhu v softvÃ©rovom projekte (akÃ© artefakty)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2.3 Äo musÃ­ obsahovaÅ¥ kaÅ¾dÃ½ nÃ¡vrh softvÃ©ru (akÃ© dva kÄ¾ÃºÄovÃ© vÃ½stupy)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2.4 Äo je to architektÃºra softvÃ©ru? Äo ju tvorÃ­? . . . . . . . . . . . . . . 2.2.5 Na Äo nÃ¡m slÃºÅ¾i architektonickÃ½ nÃ¡vrh softvÃ©ru (preÄo ho vytvÃ¡rame)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2.6 Äo je to sÃºdrÅ¾nosÅ¥ softvÃ©rovej sÃºÄiastky a o Äo sa v sÃºvislosti s Åou snaÅ¾Ã­me pri dobrom nÃ¡vrhu? . . . . . . . . . . . . . . . . . . . . . . . 2.2.7 Äo je to zviazanosÅ¥ softvÃ©rovÃ½ch sÃºÄiastok a o Äo sa v sÃºvislosti s Åou snaÅ¾Ã­me pri dobrom nÃ¡vrhu? . . . . . . . . . . . . . . . . . . . 2.2.8 PreÄo je v nÃ¡vrhu softvÃ©ru dÃ´leÅ¾itÃ¡ dekompozÃ­cia? . . . . . . . . . 2.2.9 Ak je v sÃºÄte lacnejÅ¡ie vytvorenie softvÃ©ru po menÅ¡Ã­ch sÃºÄiastkach (oproti vÃ½voju monolitu), preÄo nemÃ´Å¾eme donekoneÄna zniÅ¾ovaÅ¥ veÄ¾kosÅ¥ sÃºÄiastok? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2.10 AkÃ© druhy dekompozÃ­cie softvÃ©ru v nÃ¡vrhu poznÃ¡te? Vysvetlite, Äo znamenajÃº. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2.11 AkÃ½ je rozdiel medzi funkcionÃ¡lnou a udalostnou dekompozÃ­ciou softvÃ©ru pri nÃ¡vrhu? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.2.12 PreÄo pri tvorbe jednÃ©ho softvÃ©ru spravidla potrebujeme uplatniÅ¥ viacerÃ© druhy dekompozÃ­cie? . . . . . . . . . . . . . . . . . . . . . . . 2.2.13 Äo je to nÃ¡vrhovÃ½ vzor? . . . . . . . . . . . . . . . . . . . . . . . ."
393,539,0.581,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Na druhej strane Å¡tandardnÃ© objektovo-orientovanÃ© jazyky ponÃºkajÃº iba zÃ¡kladnÃ© prostriedky pre znovupouÅ¾itie. V mnohÃ½ch prÃ­padoch objektovo-orientovanÃ© jazyky, ktorÃ© patria do tejto skupiny, disponujÃº jazykovo Å¡pecifickÃ½m prostriedkami ako naprÃ­klad generickÃ© triedy alebo viacnÃ¡sobnÃ© dedenie, ktorÃ© sÃº sÃ­ce pomerne jednoducho v danom jazyku pouÅ¾iteÄ¾nÃ©, no pri nutnosti portovania takÃ©hoto rieÅ¡enia na inÃ½ implementaÄnÃ½ jazyk sa vynÃ¡rajÃº problÃ©my spojenÃ© s realizÃ¡ciou tÃ½chto Å¡pecifÃ­k pomocou prostriedkov jazyka, ktorÃ© sÃº k dispozÃ­cii. NavyÅ¡e pri niektorÃ½ch nÃ¡vrhovÃ½ch vzoroch nemusia postaÄovaÅ¥ ani tieto jazykovo Å¡pecifickÃ© prostriedky pre vytvorenie prehÄ¾adnÃ©ho rieÅ¡enia. CelÃ© snaÅ¾enie a zÃ¡very z jednotlivÃ½ch ÄastÃ­ zaoberajÃºcimi sa znovupouÅ¾Ã­tÃ­m ÄastÃ­ nÃ¡vrhovÃ½ch vzorov akoby smerovali k univerzÃ¡lnym rozÅ¡Ã­reniam jazyka, ktorÃ© budÃº realizovateÄ¾nÃ© vo vÃ¤ÄÅ¡ej skupine jazykov a aplikaÄnÃ©mu programÃ¡torovi poskytnÃº rozÅ¡Ã­renÃ© moÅ¾nosti znovupouÅ¾itia tried, metÃ³d a v koneÄnom dÃ´sledku i samotnÃ½ch nÃ¡vrhovÃ½ch vzorov. RieÅ¡enie sa ponÃºka formou znovupouÅ¾itia koncernov s vyuÅ¾itÃ­m adaptÃ¡ciÃ­. AnalÃ½za rieÅ¡enia s prekompilÃ¡torom pre jazyk JAVA ukÃ¡zala, Å¾e ide o pomerne jazykovo nezÃ¡vislÃ© rieÅ¡enie rozÅ¡irujÃºce moÅ¾nosti znovupouÅ¾itia zdrojovÃ©ho kÃ³du ako takÃ©ho. UmoÅ¾nenÃ­m vytvÃ¡rania hierarchiÃ­ adaptÃ©rov a oddelenÃ­m spoloÄnÃ©ho zdrojovÃ©ho kÃ³du od Å¡pecifickÃ©ho sa v koneÄnom dÃ´sledku zvÃ½Å¡i prehÄ¾adnosÅ¥ rieÅ¡enia a jeho udrÅ¾iavateÄ¾nosÅ¥. Na druhej strane sme nemali moÅ¾nosÅ¥ vyskÃºÅ¡aÅ¥ rieÅ¡enie na vlastnom prÃ­klade, a teda nevieme, ako sa prekompilÃ¡tor chovÃ¡ aj v prÃ­pade jednoduchÃ½ch syntaktickÃ½ch chÃ½b v adaptÃ©roch. Prostriedky, s ktorÃ½mi priÅ¡li autori tohto rieÅ¡enia, sa zdajÃº postaÄujÃºce na vytvorenie kniÅ¾nice znovupouÅ¾iteÄ¾nÃ½ch nÃ¡vrhovÃ½ch vzorov, priÄom oddelenie vÅ¡eobecnÃ½ch ÄastÃ­ od domÃ©novo zÃ¡vislÃ½ch ako i pouÅ¾itie nÃ¡vrhovÃ©ho vzoru z kniÅ¾nice by malo zostaÅ¥ prehÄ¾adnÃ©, zrozumiteÄ¾nÃ© a Ä¾ahko udrÅ¾iavateÄ¾nÃ©. Od CASE nÃ¡strojov cez atypickÃ© a Å¡tandardnÃ© objektovo-orientovanÃ© jazyky aÅ¾ k rozÅ¡Ã­reniam objektovo-orientovanÃ½ch jazykov je len vybranÃ¡ skupina moÅ¾nostÃ­ ako znovupouÅ¾iÅ¥ zdrojovÃ½ kÃ³d, resp. ako znovupouÅ¾iÅ¥ zdrojovÃ½ kÃ³d nÃ¡vrhovÃ©ho vzoru. StÃ¡le zostÃ¡va viacero otvorenÃ½ch otÃ¡zok a alternatÃ­vnych moÅ¾nostÃ­, ktorÃ© mÃ´Å¾u vÃ½znamnÃ½m spÃ´sobom uÄ¾ahÄiÅ¥ pouÅ¾itie a znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov."
43,289,0.581,Objektovo orientovanÃ© programovanie v C++,"Hovorili sme si, Å¾e aj keÄ priamo nedeï¬nujeme v triede Å¾iadny konÅ¡truktor, trieda ho v skutoÄnosti bude maÅ¥ a bude to âprÃ¡zdnyâ konÅ¡truktor, teda konÅ¡truktor, ktorÃ½ len vytvorÃ­ objekt a nevykonÃ¡ pri tom nijakÃ© ÄalÅ¡ie prÃ­kazy. Ak vÅ¡ak nejakÃ½ konÅ¡truktor v triede deï¬nujeme, znamenÃ¡ to, Å¾e trieda automaticky strÃ¡ca svoj prÃ¡zdny konÅ¡truktor, program vytvorenie nÃ¡Å¡ho konÅ¡truktora chÃ¡pe tak, akoby sme dopÃ­sali prÃ­kazy do pÃ´vodnÃ©ho prÃ¡zdneho konÅ¡truktora. Ak z nejakÃ©ho dÃ´vodu potrebujeme viac konÅ¡truktorov, z ktorÃ½ch jeden mÃ¡ byÅ¥ prÃ¡zdny, musÃ­me potom tento prÃ¡zdny konÅ¡truktor do triedy znova dopÃ­saÅ¥, automaticky tam nebude. Je to jedna z pomerne ÄastÃ½ch chÃ½b, keÄÅ¾e na metÃ³du, ktorÃ¡ neobsahuje Å¾iadne prÃ­kazy, sa Ä¾ahko zabudne. PrÃ­klad. InternetovÃ½ portÃ¡l ponÃºka vÅ¡etkÃ½m, ktorÃ­ si zaplatia prÃ­stup, stiahnuÅ¥ neobmedzenÃ© mnoÅ¾stvo skladieb vo formÃ¡te mp3 z jeho databÃ¡zy. Zoznam dostupnÃ½ch skladieb je zapÃ­sanÃ½ v sÃºbore mp3.txt, kde je na zaÄiatku uvedenÃ½ poÄet vÅ¡etkÃ½ch skladieb a potom pre kaÅ¾dÃº skladbu jej nÃ¡zov a interpret. NapÃ­Å¡me program, ktorÃ½ uÅ¾Ã­vateÄ¾ovi umoÅ¾nÃ­ zistiÅ¥, Äi skladba, o ktorÃº by mal zÃ¡ujem, je k dispozÃ­cii na stiahnutie. Rozbor rieÅ¡enia. FunkÄnosÅ¥ programu mÃ´Å¾e byÅ¥ rozdelenÃ¡ do dvoch tried. Trieda skladba bude obsahovaÅ¥ dÃ¡ta a metÃ³dy tÃ½kajÃºce sa jednej skladby a trieda databaza potom bude vyhÄ¾adÃ¡vaÅ¥ v databÃ¡ze skladieb. Pozrime sa najskÃ´r na triedu databaza. TÃ¡to trieda bude maÅ¥ dva Ãºdaje â celÃ© ÄÃ­slo pocet predstavujÃºce poÄet skladieb a dynamicky alokovanÃ© pole skladby, ktorÃ© bude obsahovaÅ¥ celÃº databÃ¡zu skladieb. Toto pole sa alokuje a naplnÃ­ dÃ¡tami v konÅ¡truktore, ktorÃ½ bude maÅ¥ ako parameter nÃ¡zov sÃºboru, v ktorom je zoznam skladieb uloÅ¾enÃ½. DeÅ¡truktor potom toto pole dealokuje. ÄalÅ¡ou metÃ³dou triedy bude metÃ³da Hladaj, ktorej parametrom bude objekt triedy skladba predstavujÃºci Å¾iadanÃº skladbu. MetÃ³da prejde celÃ½ zoznam skladieb a zistÃ­, Äi je skladba dostupnÃ¡. Trieda skladba bude maÅ¥ dva Ãºdaje â nazov a interpret, ktorÃ© budÃº musieÅ¥ byÅ¥ prÃ­stupnÃ© triede databaza pri vyhÄ¾adÃ¡vanÃ­, preto sa budÃº zverejÅovaÅ¥ pomocou metÃ³d Nazov a Interpret. Trieda bude maÅ¥ k dispozÃ­cii dva konÅ¡truktory. Jeden z nich umoÅ¾nÃ­ nastaviÅ¥ hodnoty oboch Ãºdajov a druhÃ½ bude prÃ¡zdny. PrÃ¡zdny konÅ¡truktor je potrebnÃ½ preto, Å¾e v triede databaza je dynamickÃ© pole triedy skladba. DruhÃ½ konÅ¡truktor vyuÅ¾ijeme v hlavnom programe, kde vytvorÃ­me objekt reprezentujÃºci hÄ¾adanÃº skladbu. Poslednou metÃ³dou triedy bude metÃ³da Citaj udaje, ktorÃ¡ naÄÃ­ta oba Ãºdaje zo sÃºboru. Odkaz na tento sÃºbor vstÃºpi do metÃ³dy ako parameter."
130,128,0.581,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory FasÃ¡da sa lÃ­Å¡i od sprostredkovateÄ¾a tÃ½m, Å¾e zabstraktnenÃ­m subsystÃ©mu poskytuje vhodnejÅ¡ie rozhranie. Protokol fasÃ¡dy je jednosmernÃ½: objekty FasÃ¡da sa odvolÃ¡vajÃº na systÃ©movÃ© triedy, ale uÅ¾ nie naopak. Na rozdiel od toho SprostredkovateÄ¾ aktivuje kooperatÃ­vne sprÃ¡vanie, ktorÃ© spolupracujÃºce objekty neposkytujÃº Äi poskytovaÅ¥ nemÃ´Å¾u a protokol je viacsmernÃ½. Kolegovia mÃ´Å¾u so sprostredkovateÄ¾om komunikovaÅ¥ pomocou vzoru PozorovateÄ¾."
236,162,0.581,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"V tomto prÃ­klade pouÅ¾Ã­vam oboje: novÃ© prostredie s nÃ¡zvom command, ktorÃ© je zodpovednÃ© za nakreslenie rÃ¡mÄeka okolo prÃ­kazu aj novÃ½ prÃ­kaz \ci, ktorÃ½ vytlaÄÃ­ nÃ¡zov prÃ­kazu a zÃ¡roveÅ vytvorÃ­ odpovedajÃºcu poloÅ¾ku registra. MÃ´Å¾ete sa o tom presvedÄiÅ¥, ak sa pozriete do registra na konci knihy a nÃ¡jdete poloÅ¾ku prÃ­kazu \dum, ukazujÃºcu na kaÅ¾dÃº stranu, kde som sa o prÃ­kaze \dum zmienil. Ak by som sa hocikedy rozhodol, Å¾e uÅ¾ viac nemÃ¡m rÃ¡d prÃ­kazy sÃ¡dzanÃ© v rÃ¡mÄekoch, mÃ´Å¾em jednoducho zmeniÅ¥ definÃ­ciu prostredia command"
59,399,0.58,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"7.6 Model vÃ½rokovej logiky â sÃ©mantickÃ© tablÃ¡ (sÃ©mantickÃ½ prÃ­stup) V predchÃ¡dzajÃºcej kapitole boli formulovanÃ© zÃ¡kladnÃ© princÃ­py syntaktickÃ©ho prÃ­stupu k vÃ½rokovej logike. CieÄ¾om tejto kapitoly bude ukÃ¡zaÅ¥ realizÃ¡ciu sÃ©mantickÃ©ho prÃ­stupu pomocou diagramatickej techniky nazÃ½vanej sÃ©mantickÃ© tablÃ¡ [7,10,12]. V rÃ¡mci tejto metÃ³dy rieÅ¡ime relÃ¡ciu ï ï½ ï»ïª1 ,...,ïªn ï½ ï¹ tak, Å¾e formulu ïª1 ï ... ï ïªn ï ïï¹ rozkladÃ¡me postupne na podformuly, priÄom tento rekurentnÃ½ proces konÄÃ­me vtedy, keÄ podformuly obsahujÃº len atomickÃ© premennÃ© alebo ich negÃ¡cie (tzv. literÃ¡ly), pozri Obr. 7.1."
184,377,0.58,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"AnalÃ½za obsahu a Å¡truktÃºry webu RÃ´zne techniky analÃ½z pouÅ¾Ã­vanÃ½ch v pavÃºkoch sa dajÃº rozdeliÅ¥ do dvoch hlavnÃ½ch kategÃ³riÃ­: analÃ½zy zaloÅ¾enÃ© na obsahu a analÃ½zy zaloÅ¾enÃ© na odkazoch. Pri analÃ½zach zaloÅ¾enÃ½ch na obsahu sa pre odvodenie informÃ¡ciÃ­ o strÃ¡nke analyzuje samotnÃ½ HTML kÃ³d strÃ¡nky. NaprÃ­klad z textovÃ©ho tela strÃ¡nky sa dÃ¡ zistiÅ¥, Äi je strÃ¡nka relevantnÃ¡ pre hÄ¾adanÃº domÃ©nu. Pre zÃ­skanie kÄ¾ÃºÄovÃ½ch konceptov popÃ­sanÃ½ch na strÃ¡nke sa dajÃº pouÅ¾iÅ¥ indexovacie techniky. ÄalÅ¡ie zlepÅ¡enie analÃ½zy sa dÃ¡ dosiahnuÅ¥ pouÅ¾itÃ­m domÃ©novÃ½ch znalostÃ­. DÃ´leÅ¾itÃ½m zdrojom informÃ¡ciÃ­ o strÃ¡nke je aj jej URL adresa, ktorÃ¡ identifikuje adresu servera, domÃ©novÃ© zaradenie web servera (strÃ¡nky v domÃ©ne gov mÃ´Å¾u byÅ¥ povaÅ¾ovanÃ© za dÃ´leÅ¾itejÅ¡ie ako strÃ¡nky v domÃ©ne com), hÄºbku umiestnenia v adresÃ¡rovej Å¡truktÃºre web servera (dÃ´leÅ¾itÃ© strÃ¡nky nebÃ½vajÃº umiestnenÃ© hlboko v adresÃ¡rovej Å¡truktÃºre). DruhÃ¡ skupina analÃ½z vyuÅ¾Ã­va pre zÃ­skanie informÃ¡ciÃ­ odkazy medzi strÃ¡nkami. ZÃ¡kladnÃ½ predpoklad pouÅ¾itÃ½ pri tÃ½chto analÃ½zach je, Å¾e ak autor web strÃ¡nky A umiestnil odkaz na web strÃ¡nku B, tak si myslÃ­, Å¾e strÃ¡nka B je relevantnÃ¡ alebo podobnÃ¡ strÃ¡nke A a je kvalitnÃ¡. Pre odkaz, ktorÃ½ ukazuje na danÃº strÃ¡nku, sa pouÅ¾Ã­va termÃ­n vstupnÃ½ odkaz. Vo vÅ¡eobecnosti platÃ­, Å¾e o Äo je strÃ¡nka lepÅ¡ia, o to viac mÃ¡ vstupnÃ½ch odkazov. Naviac je vhodnÃ© priraÄovaÅ¥ strÃ¡nkam, na ktorÃ© sa odkazujÃº inÃ©"
236,159,0.58,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Text zadanÃ½ ako argument prÃ­kazov typu \caption alebo \section sa mÃ´Å¾e ukazovaÅ¥ v dokumente viackrÃ¡t (naprÃ­klad v obsahu rovnako ako v samotnom texte). NiektorÃ© prÃ­kazy skrachujÃº, ak sÃº pouÅ¾itÃ© ako argument prÃ­kazov typu \section. Tieto prÃ­kazy sa nazÃ½vajÃº krehkÃ© prÃ­kazy. KrehkÃ½ prÃ­kaz je naprÃ­klad \footnote alebo \phantom. Na to, aby tieto prÃ­kazy fungovali, potrebujÃº ochranu (a my vÅ¡etci nie?). MÃ´Å¾ete ich ochrÃ¡niÅ¥ pouÅ¾itÃ­m prÃ­kazu \protect umiestnenÃ½m pred nimi. \protect sa vzÅ¥ahuje len na prÃ­kaz nasledujÃºci bezprostredne za nÃ­m, nevzÅ¥ahuje sa dokonca ani na jeho argumenty. NadbytoÄnÃ½ prÃ­kaz \protect"
190,469,0.58,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Podnik, ktorÃ½ sa rozhodol daÅ¥ sa na cestu manaÅ¾ovania vzÅ¥ahov so zÃ¡kaznÃ­kmi sa musÃ­ zmieriÅ¥ s neustÃ¡lym prehodnocovanÃ­m vÅ¡etkÃ½ch svojich aktivÃ­t, procesov a sluÅ¾ieb z pohÄ¾adu potrieb a Å¾elanÃ­ najhodnotnejÅ¡Ã­ch zÃ¡kaznÃ­kov s cieÄ¾om udrÅ¾aÅ¥ ich a zÃ­skaÅ¥ si ich vernosÅ¥. S ohÄ¾adom na to, Å¾e mnoho spoloÄnostÃ­ sa uÅ¾ tradiÄne orientuje na svoje produkty, vyÅ¾aduje uplatnenie manaÅ¾mentu vzÅ¥ahov so zÃ¡kaznÃ­kmi Äasto kompletnÃº zmenu podnikovej kultÃºry, prehodnotenie vÅ¡etkÃ½ch podnikovÃ½ch Å¡truktÃºr, aktivÃ­t a procesov. HlavnÃ½m zdrojom CRM je teda novÃ¡ marketingovÃ¡ stratÃ©gia, v centre ktorej sa nachÃ¡ziskov pre podnik dza zÃ¡kaznÃ­k. UmoÅ¾Åuje firmÃ¡m pritiahnuÅ¥, obslÃºÅ¾iÅ¥ a udrÅ¾aÅ¥ si najlepje zÃ¡kaznÃ­k, Å¡Ã­ch, teda najziskovejÅ¡Ã­ch zÃ¡kaznÃ­kov a sÃºÄasne robiÅ¥ vÅ¡etko na zÃ­skanie novÃ½ch zÃ¡kaznÃ­kov. Ide vlastne o partnerstvo, kde vy ako obchodnÃ­k, pro- nie produkt. fitujete zo ziskov zÃ¡kaznÃ­ka, a preto sa snaÅ¾Ã­te o maximalizÃ¡ciu jeho ziskov, Äo spÃ´sobÃ­ vyÅ¡Å¡ie uspokojenie jeho potrieb, ktorÃ© sa prejavÃ­ vÃ¤ÄÅ¡ou lojÃ¡lnosÅ¥ou voÄi vÃ¡m. Nejde o jednorazovÃ½, ale o dlhodobÃ½ vzÅ¥ah, ktorÃ½ je jedineÄnÃ½. V praxi to tieÅ¾ znamenÃ¡, Å¾e sa nenahÃ¡Åame len za zvyÅ¡ovanÃ­m svojho podielu na trhu zÃ­skavanÃ­m ÄalÅ¡Ã­ch zÃ¡kaznÃ­kov, Äo je mimoriadne nÃ¡kladnÃ© aÅ¾ zniÄujÃºce. Ale, Å¾e tÃ½m zÃ¡kaznÃ­kom, ktorÃ½ch uÅ¾ mÃ¡me, ponÃºkame stÃ¡le Å¡irÅ¡ie a kvalitnejÅ¡ie doplnkovÃ© produkty, Äi novÃ© a ziskovejÅ¡ie produkty. Preto ani nie je moÅ¾nÃ©, aby konkurencia ,,odkopÃ­rovala"" tento vzÅ¥ah, ako to mÃ´Å¾e urobiÅ¥ naprÃ­klad tÃ½m, Å¾e ponÃºkne inÃº variantu vÃ¡Å¡ho novÃ©ho produktu, Äi dokonca od vÃ½robcu novÃ½ produkt, ktorÃ½ ste objavili, jednoducho tieÅ¾ odkÃºpi [3]."
135,31,0.58,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â sÃºvisiace vzory â vzory, ktorÃ© moÅ¾no pouÅ¾i sÃºasne, priom sa uvedie danÃ½ kontext a obmedzenia. Opis nÃ¡vrhovÃ½ch vzorov mÃ¡ by nezÃ¡vislÃ½ od programovacieho jazyka alebo implementanÃ½ch detailov, pretoÅ¾e nÃ¡vrhovÃ½ vzor je vlastne Å¡ablÃ³nou, poda ktorej moÅ¾no rieÅ¡enie aplikova v rÃ´znych situÃ¡ciÃ¡ch. Ako nÃ¡js nÃ¡vrhovÃ½ vzor ZÃ¡kladnou podmienkou pre âobjavenieâ nÃ¡vrhovÃ©ho vzoru je, aby programÃ¡tor rieÅ¡il danÃ½ problÃ©m sÃ¡m a pritom si robil poznÃ¡mky o tom, ako jednotlivÃ© problÃ©my rieÅ¡il. S pribÃºdajÃºcimi skÃºsenosami zistÃ­me, Å¾e ide stÃ¡le o tie istÃ© typy problÃ©mov. VÅ¾dy, ke sa danÃ½ alebo podobnÃ½ problÃ©m vyskytne, poznaÃ­me si v om je odliÅ¡nÃ½, v om je rovnakÃ½ a ako sme ho v danom prÃ­pade vyrieÅ¡ili. EventuÃ¡lne vytvorÃ­me Å¡tandardnÃ½ spÃ´sob na rieÅ¡enie takÃ©hoto problÃ©mu, ktorÃ½ budeme trvalo pouÅ¾Ã­va. Tak vznikÃ¡ nÃ¡vrhovÃ½ vzor."
111,14,0.58,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Je pouÅ¾Ã­vatelâskÃ½ zÃ¡Å¾itok meratelânÃ½? V beÅ¾nom Å¾ivote kaÅ¾dÃ½ deÅ meriame alebo vyhodnocujeme urÄitÃ© javy alebo veci. Vieme povedaÅ¥, Å¾e predmetnÃ¡ skriÅa je vyÅ¡Å¡ia alebo auto je rÃ½chlejÅ¡ie, lebo sme schopnÃ­ zmeraÅ¥/kvantifikovaÅ¥ nejakÃ© ich vlastnosti, napr. vÃ½Å¡ku alebo rÃ½chlosÅ¥. Ako veci konzistentne a spoÄ¾ahlivo meraÅ¥, si vyÅ¾aduje vÅ¡eobecnÃ½ konsenzus. Jeden centimeter je rovnako dlhÃ½ bez ohÄ¾adu na to, kto ho meria a sekunda trvÃ¡ rovnako dlho bez ohÄ¾adu na to, Äi je meranÃ¡ na dne oceÃ¡nu alebo vo vesmÃ­re (pozn. teÃ³ria relativity Alberta Einsteina). Å tandardy pre tieto miery definuje spoloÄnosÅ¥ a sÃº zaloÅ¾enÃ© na definÃ­ciÃ¡ch. SpÃ´sobu, ako veci/javy meriame alebo vyhodnocujeme hovorÃ­me metrika. Metriky nachÃ¡dzajÃº uplatnenie aj vo vÃ½skume pouÅ¾Ã­vateÄ¾skÃ©ho zÃ¡Å¾itku."
240,217,0.58,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Na vÃ½poÄet min2 mÃ´Å¾eme pouÅ¾iÅ¥ makro (riadok 1), ktorÃ© sa pred kompilÃ¡ciou rozvinie (riadok 6), alebo aj funkciu, princÃ­p zostane rovnakÃ½: v priemere urobÃ­me viac (2,666...) porovnanÃ­: 3 porovnania ak vÃ½sledok je a alebo b, 2 porovnania ak vÃ½sledok je c. V praxi na modernom procesore s vyuÅ¾itÃ­m modernÃ©ho kompilÃ¡tora bude najefektÃ­vnejÅ¡Ã­ postup s Äo najjednoduchÅ¡Ã­mi podmienkami: postup vyuÅ¾Ã­vajÃºci dve priradenia s dvoma porovnaniami, pretoÅ¾e hlbokÃ© vetvenia pri ostatnÃ½ch postupoch spÃ´sobujÃº vÃ¤ÄÅ¡iu zÃ¡Å¥aÅ¾ pri tzv. predpovedi vetvenÃ­, ktorÃ© si vyÅ¾aduje pri vykonÃ¡vanÃ­ od procesora najvÃ¤ÄÅ¡iu nÃ¡mahu. Ãloha 3-2 (rieÅ¡enie) PrvÃ½ krok pri nÃ¡vrhu funkcie je urÄiÅ¥ hlaviÄku: vstupnÃ© a vÃ½stupnÃ© argumenty. VstupnÃ© argumenty urÄÃ­me zo zadania: reÃ¡lne ÄÃ­slo x (typ double) a celÃ© ÄÃ­slo n (typ int), vÃ½stupom bude hodnota mocniny xn (typ double). HlaviÄka teda bude takÃ¡to"
111,64,0.579,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 4.2: Podobne ako v navigaÄnom menu na webovej strÃ¡nke, najskÃ´r respondent vidÃ­ len najvyÅ¡Å¡iu ÃºroveÅ stromu (napr. oznaÄenia/kategÃ³rie ako âTicketsâ a âBus linesâ). KeÄ respondent klikne na jednu z viditeÄ¾nÃ½ch poloÅ¾iek (kategÃ³riu), zobrazia sa potomkovia vybranej poloÅ¾ky."
369,59,0.579,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Pod generalizÃ¡ciou sa rozumie pouÅ¾itie vÅ¡eobecnejÅ¡ej triedy, relÃ¡cie alebo atribÃºtu namiesto konkrÃ©tnejÅ¡ej triedy, relÃ¡cie alebo atribÃºtu. Uplatnenie generalizÃ¡cie zvyÅ¡uje nielen rozÅ¡Ã­riteÄ¾nosÅ¥ systÃ©mu (keÄ pouÅ¾Ã­vateÄ¾ poÅ¾aduje doplnenie ÄalÅ¡Ã­ch Å¡pecializovanÃ½ch typov, na ktorÃ© pri tvorbe Å¡pecifikÃ¡cie nepomyslel), ale zvyÅ¡uje tieÅ¾ opakovanÃº pouÅ¾iteÄ¾nosÅ¥ systÃ©mu (ak sa naprÃ­klad systÃ©m nasadzuje v inej organizÃ¡cii alebo dokonca inej krajine)."
265,55,0.579,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Äo je to softvÃ©rovÃ½ produkt? AkÃ½ je rozdiel medzi programom a softvÃ©rovÃ½m produktom? SoftvÃ©rovÃ½ produkt je program upravenÃ½ do takej podoby, Å¾e je (pohodlne, rozumne) vyuÅ¾iteÄ¾nÃ½ Älovekom inÃ½m, ako je autor programu. UpravenÃ½ je spravidla preto, aby mohol byÅ¥ ponÃºknutÃ½ na trhu na uspokojovanie potrieb a prianÃ­. MÃ¡ pritom podobu sluÅ¾by alebo inÅ¡talovateÄ¾nÃ©ho balÃ­ka. K softvÃ©rovÃ©mu produktu patrÃ­ aj dokumentÃ¡cia, prÃ­ruÄky na poÅ¾Ã­vanie a pod. Program je len ÄasÅ¥ softvÃ©rovÃ©ho produktu. Produkt tieÅ¾ mÃ´Å¾u a Äasto aj upravujÃº inÃ­ Ä¾udia ako autor(i). Je dÃ´leÅ¾itÃ©, aby proces Ãºpravy bol efektÃ­vny, teda aby program bol vhodne vnÃºtorne Å¡truktÃºrovanÃ½ a dokumentovanÃ½. Produkt vnÃ­mame ako nieÄo, Äo moÅ¾no âzabaliÅ¥ do krabice a predÃ¡vaÅ¥â. So softvÃ©rovÃ½m produktom mÃ´Å¾e byÅ¥ Äasto spojenÃ¡ aj podpora zo strany jeho vÃ½robcu."
111,18,0.579,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"implicitnÃº a explicitnÃº spÃ¤tnÃº vÃ¤zbu. ImplicitnÃ¡ spÃ¤tnÃ¡ vÃ¤zba predstavuje neverbÃ¡lne a nepriame informÃ¡cie, ktorÃ© zÃ­skavame pozorovanÃ­m sprÃ¡vania pouÅ¾Ã­vateÄ¾a, ako interaguje s webom, kde mÃ¡ problÃ©my, Äo ho zaujÃ­ma a Äo ho frustruje. NaprÃ­klad mimika (mraÄenie, Ãºsmev, zdvihnutÃ© oboÄie), gestÃ¡ (krÃºtenie hlavou, ukazovanie na obrazovku), zmeny v hlasitosti alebo tÃ³ne hlasu, ale aj Äas strÃ¡venÃ½ na jednotlivÃ½ch ÃºlohÃ¡ch, poÄet chÃ½b. ExplicitnÃ¡ spÃ¤tnÃ¡ vÃ¤zba sÃº priame informÃ¡cie, ktorÃ© pouÅ¾Ã­vateÄ¾ aktÃ­vne poskytuje. ZÃ­skavame ich napr. prostrednÃ­ctvom dotaznÃ­kov (napr. otÃ¡zky tÃ½kajÃºce sa spokojnosti, Ä¾ahkosti pouÅ¾Ã­vania), rozhovorov (napr. otvorenÃ© otÃ¡zky, ktorÃ© umoÅ¾ÅujÃº pouÅ¾Ã­vateÄ¾om vyjadriÅ¥ svoje nÃ¡zory a pocity), alebo rozmÃ½Å¡Ä¾anÃ­ nahlas (napr. pouÅ¾Ã­vateÄ¾ komentuje svoje myÅ¡lienky a rozhodnutia poÄas vykonÃ¡vania Ãºloh, angl. think-aloud protocol)."
190,160,0.579,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ak chceme vytvoriÅ¥ dobrÃ½ plÃ¡n, musÃ­me reÃ¡lne odhadnÃºÅ¥ rizikÃ¡ projektu, potreb- projektovÃ­ nÃ© zdroje, ÄasovÃ½ harmonogram a poÄÃ­taÅ¥ s nepredvÃ­dateÄ¾nÃ½m. CieÄ¾om plÃ¡novamanaÅ¾Ã©ri â nia je okrem inÃ©ho aj manaÅ¾ment rizÃ­k. Uvedomenie si rizÃ­k a kalkulÃ¡cia s nimi optimisti. nÃ¡m umoÅ¾Åuje klÃ¡sÅ¥ dÃ´raz na kritickÃ© aspekty projektu. PodÄ¾a mojich skÃºsenostÃ­ sÃº najhorÅ¡Ã­ projektovÃ­ manaÅ¾Ã©ri optimisti. OptimistickÃ½ projektovÃ½ plÃ¡n zvyÄajne predpokladÃ¡, Å¾e prÃ¡ce na projekte pÃ´jdu ako po masle. TermÃ­ny etÃ¡p sa tvoria s heslom âto je jednoduchÃ©â alebo ânieÄo takÃ© sme uÅ¾ predsa robiliâ. Nie je Å¥aÅ¾kÃ© si predstaviÅ¥ akÃº katastrofu vyvolÃ¡ sebe menÅ¡ia komplikÃ¡cia v procese vÃ½voja. PokÃºsme sa vytvoriÅ¥ dobrÃ½ plÃ¡n. ZaÄnime vytvorenÃ­m realistickÃ©ho plÃ¡nu, v ktorom triezvo zvÃ¡Å¾ime vÅ¡etky aspekty a zahrnieme doÅ manaÅ¾ment rizÃ­k. NÃ¡sledne doÅ vnesme kontrolovanÃ½ zÃ¡van pesimizmu. VerÃ­m, Å¾e prÃ¡ve takto vznikÃ¡ dobrÃ½ plÃ¡n. Venujme sa teraz jednotlivÃ½m etapÃ¡m osobitne."
343,39,0.579,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"chcete hraÅ¥ s altcoinami na mobile, je dobrÃ¡ Coinomi alebo Exodus. KeÄ sa bavÃ­me o tom, Å¾e si vytvorÃ­te akÃºkoÄ¾vek peÅaÅ¾enku, je dÃ´leÅ¾itÃ© si ju zÃ¡lohovaÅ¥. IdeÃ¡lne na papier, alebo na fyzickÃ© ÃºloÅ¾isko ako je naprÃ­klad crypto-steel na obrÃ¡zku 15."
205,244,0.579,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","15 Filtrovanie dokumentov V sÃºÄasnosti, v dobe preÅ¥aÅ¾enia informÃ¡ciami, sa pouÅ¾Ã­va celÃ¡ rada postupov na to, aby sme znÃ­Å¾ili mnoÅ¾stvo nepotrebnÃ½ch alebo neuÅ¾itoÄnÃ½ch informÃ¡ciÃ­, ktorÃ© sÃºperia o naÅ¡u pozornosÅ¥. JednÃ½m z takÃ½chto postupov je filtrovanie dokumentov, ktorÃ©ho Ãºlohou je z prÃºdu dokumentov, ktorÃ© sa na nÃ¡s hrnÃº, vybraÅ¥ len tie, ktorÃ© spÄºÅajÃº nejakÃº vopred stanovenÃº podmienku. TÃ©ma filtrovania dokumentov v ostatnej dobe zÃ­skala pomerne znaÄnÃ© mnoÅ¾stvo pozornosti vÃ½skumnej komunity, ktorÃ¡ navrhla mnoÅ¾stvo prÃ­stupov a aplikÃ¡ciÃ­ pre filtrovanie dokumentov. V tejto prÃ¡ci si opÃ­Å¡eme niektorÃ© z tÃ½chto prÃ­stupov. Filtrovanie dokumentov je pojem, ktorÃ½ svoju najvÃ¤ÄÅ¡iu popularitu zÃ­skal po tom, ako sa mu zaÄala venovaÅ¥ konferencia TREC v roku 1995. Od tohto roku postupne stÃºpal poÄet publikÃ¡ciÃ­, ktorÃ© sa touto tÃ©mou zaoberali a aÅ¾ poÄas ostatnÃ½ch 5 rokov zaÄal poÄet publikÃ¡ciÃ­ kulminovaÅ¥, Äo je viditeÄ¾nÃ© z grafu poÄtu publikÃ¡ciÃ­ pre termÃ­n âdocument filteringâ zÃ­skanÃ½ pomocou vyhÄ¾adÃ¡vaÄa Google Scholar zobrazenÃ­ na obrÃ¡zku 60."
94,204,0.579,Sprievodca svetom vedeckÃ©ho publikovania,"Po koÄ¾kÃ½ch rokoch (k aktuÃ¡lnemu roku) sa 50 % vÅ¡etkÃ½ch citÃ¡ciÃ­ na ÄlÃ¡nky v Äasopise objavÃ­ v citaÄnom registri. HovorÃ­, za akÃ© obdobie sa ÄlÃ¡nky citujÃº, inÃ½mi slovami â ak bol ÄlÃ¡nok citovanÃ½ 150-krÃ¡t, half life ukazuje, za ako dlho dosiahol 75.-tu citÃ¡ciu. Toto ÄÃ­slo je dÃ´leÅ¾itÃ© napr. pre kniÅ¾nice pri nÃ¡kupe informaÄnÃ½ch zdrojov, prÃ­padne pre vydavateÄ¾ov pri urÄovanÃ­ obchodnej stratÃ©gie."
135,268,0.578,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.7.2 Paralelizmus na Ãºrovni procesov Pri hrubej granularite sa zameriavame na paralelizmus vo vykonÃ¡vanÃ­ programu na Ãºrovni samostatne vykonÃ¡vanÃ½ch postupnostÃ­ inÅ¡trukciÃ­, o om pojednÃ¡va tÃ¡to podkapitola. Proces, vlÃ¡kno Proces je artefaktom operanÃ©ho systÃ©mu. Jeden proces vÅ¡ak mÃ´Å¾e prebieha vo viacerÃ½ch vlÃ¡knach (angl. threads). VÃ½hodou tÃ½chto vlÃ¡kien je niÅ¾Å¡ia rÃ©Å¾ia pri ich prepÃ­nanÃ­, pretoÅ¾e sa spÃºÅ¡ajÃº v spolonom adresnom priestore. Na zÃ¡klade tÃ½chto vlastnostÃ­ sa vlÃ¡kna zvyknÃº nazÃ½va aj odahenÃ© procesy. Na druhÃº stranu vyplÃ½va z pouÅ¾itia spolonÃ©ho pamÃ¤ovÃ©ho priestoru menÅ¡ie vzÃ¡jomnÃ© zabezpeenie vlÃ¡kien. Na zÃ¡klade paralelizÃ¡cie vykonÃ¡vania poznÃ¡me:"
129,5,0.578,Sprievodca licenciami Creative Commons,"Publikovanie monografiÃ­ a OAPEN-UK Predaj tlaÄenÃ½ch vedeckÃ½ch monografiÃ­ neustÃ¡le klesÃ¡. V rokoch 1980 aÅ¾ 2000 sa znÃ­Å¾il priemernÃ½ nÃ¡kup monografiÃ­ zo strany kniÅ¾nÃ­c v USA z pribliÅ¾ne 2000 na necelÃ½ch 200. To sa odzrkadlilo na niÅ¾Å¡om poÄte vydanÃ½ch exemplÃ¡rov zo strany vydavateÄ¾ov, ktorÃ­ ich z priemerne 1 000 znÃ­Å¾ili na pribliÅ¾ne 200 â 300. VydÃ¡vanie monografiÃ­ bolo vÅ¾dy chÃºlostivou zÃ¡leÅ¾itosÅ¥ou, zvÃ¤ÄÅ¡a krÃ­Å¾ovo dotovanÃ© z inÃ½ch oblastÃ­ publikovania. PokraÄujÃºci tlak na rozpoÄet kniÅ¾nÃ­c na nÃ¡kup knÃ­h v kombinÃ¡cii s prechodom na elektronickÃ© zdroje situÃ¡ciu eÅ¡te zhorÅ¡uje. To vyvolÃ¡va znepokojenie zo strany vedcov, ktorÃ­ sa obÃ¡vajÃº, Å¾e dÃ´leÅ¾itÃ© akademickÃ© publikÃ¡cie nebudÃº publikovanÃ©, pretoÅ¾e nie sÃº finanÄne rentabilnÃ©, a sÃº presvedÄenÃ­, Å¾e Å¡Ã­renie vÃ½sledkov ich vÃ½skumu je tÃ½m vÃ½razne obmedzenÃ©. Vydavatelia preto experimentujÃº s rÃ´znymi obchodnÃ½mi modelmi v snahe oÅ¾iviÅ¥ trh s monografiami a podporiÅ¥ ich Å¡Ã­renie: jednÃ½m z takÃ½chto modelov je prÃ¡ve otvorenÃ½ prÃ­stup. OAPEN-UK bol kolaboratÃ­vny vÃ½skumnÃ½ projekt, ktorÃ½ zhromaÅ¾Äoval fakty a Ãºdaje s cieÄ¾om pomÃ´cÅ¥ zÃºÄastnenÃ½m stranÃ¡m prijÃ­maÅ¥ kvalifikovanÃ© rozhodnutia o budÃºcnosti publikovania vedeckÃ½ch monografiÃ­ z oblasti humanitnÃ½ch a spoloÄenskÃ½ch vied v reÅ¾ime otvorenÃ©ho prÃ­stupu. Projekt OAPEN-UK financovali Arts and Humanities Research Council (AHRC) a neziskovÃ¡ organizÃ¡cia Jisc [https://www.jisc.ac.uk/]. HlavnÃ½m rieÅ¡iteÄ¾om bol JISC Collections. [Dopl. do slovenskej verzie: VÃ½skumnÃ½ projekt sa realizoval 5 rokov, zÃ¡vereÄnÃ¡ sprÃ¡va bola uverejnenÃ¡ v roku 2016, pozri tu: https://oapen.fra1.digitaloceanspaces.com/ 7a65d73f1087444d80807833a320fa36.pdf]"
135,338,0.578,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ManaÅ¾ment transakciÃ­. Okrem prÃ¡ce s lokÃ¡lnymi, globÃ¡lnymi a vnorenÃ½mi transakciami obsahuje aj podporu pre tzv. bezpenÃ© body transakciÃ­ (angl. transaction safepoints). Spolu s rÃ¡mcom pre prÃ­stup k dÃ¡tovej vrstve je moÅ¾nÃ© transaknÃ½ systÃ©m vÃ½slednej aplikÃ¡cie definova bez previazania na JTA a EJB. VlastnÃ½ rÃ¡mec MVC. CentrÃ¡lnym konceptom je frontÃ¡lny kontrolÃ©r DispatcherServlet, ktorÃ½ poÅ¾iadavky posiela na konkrÃ©tne kontrolÃ©ry, ktorÃ© sÃº obyajnÃ© objekty1 implementujÃºce jednoduchÃ© rozhranie Controller. Medzi vÃ½hody patrÃ­ explicitnÃ© a jasnÃ© definovanie rolÃ­ jednotlivÃ½ch sÃºiastok pre validÃ¡ciu, spracovanie formulÃ¡rov, mapovanie kontrolÃ©rov, voby pohadu, at. RÃ¡mec MVC poskytuje moÅ¾nos konfigurovatenosti pomocou rozhranÃ­ zaloÅ¾enÃ½ch na nÃ¡vrhovom vzore StratÃ©gia. VonÃ© zviazanie nÃ¡vrhu celÃ©ho rÃ¡mca umoÅ¾uje pouÅ¾itie viacerÃ½ch prezentanÃ½ch technolÃ³giÃ­. RÃ¡mec Spring obsahuje aj podporu alÅ¡Ã­ch aspektov vÃ½voja softvÃ©ru (vzdialenÃ½ prÃ­stup, dÃ¡vkovÃ© spracovÃ¡vanie, autentizÃ¡cia a autorizÃ¡cia, testy, at.), o len dokazuje jeho rÃ¡mcovos ako znovupouÅ¾itenÃ©ho systÃ©mu pre tvorbu aplikÃ¡ciÃ­."
195,141,0.578,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"kde w je stÄºpcovÃ½ vektor jednotlivÃ½ch vÃ¡h (vÃ¡ha je ÄÃ­slo vÃ¤ÄÅ¡ie alebo rovnÃ© nule) a E vyjadruje odmeranÃº hodnotu tohto hÄ¾adiska. V prÃ­klade uvaÅ¾ujeme s tromi odporÃºÄaÄmi, ktorÃ© vyuÅ¾Ã­vajÃº rÃ´zne algoritmy odporÃºÄania: - k-najbliÅ¾Å¡Ã­ch susedov (oznaÄenie kNN), - k-najvzdialenejÅ¡Ã­ch susedov (oznaÄenie kFN), - nÃ¡hodnÃ½ odporÃºÄaÄ (oznaÄenie Rnd). Algoritmus kNN je najrozÅ¡Ã­renejÅ¡Ã­ algoritmus, ktorÃ½ odporÃºÄa na zÃ¡klade podobnosti poloÅ¾iek a pouÅ¾Ã­vateÄ¾skÃ½ch preferenciÃ­. PouÅ¾Ã­vateÄ¾ovi odporÃºÄa takÃ© poloÅ¾ky, ktorÃ© vysoko hodnotili inÃ­ pouÅ¾Ã­vatelia s podobnÃ½mi preferenciami. NevÃ½hodou algoritmu je, Å¾e sÃº odporÃºÄania mÃ¡lo rozmanitÃ©. PoloÅ¾ky s vÃ¤ÄÅ¡Ã­m mnoÅ¾stvom kladnÃ½ch odporÃºÄanÃ­ zatienia poloÅ¾ky, ktorÃ© nemajÃº Å¾iadne hodnotenie a Äasto sa stÃ¡va, Å¾e sa do zoznamu odporÃºÄanÃ­ dostÃ¡va len obmedzenÃ¡ mnoÅ¾ina najpopulÃ¡rnejÅ¡Ã­ch poloÅ¾iek. Algoritmus kFN funguje na opaÄnom princÃ­pe ako algoritmus kNN. PouÅ¾Ã­vateÄ¾om odporÃºÄa poloÅ¾ky, ktorÃ© majÃº zÃ¡pornÃ© hodnotenie od pouÅ¾Ã­vateÄ¾ov, ktorÃ­ sa sprÃ¡vajÃº opaÄne. VÃ½hodou algoritmu je, Å¾e sa medzi odporÃºÄanÃ© poloÅ¾ky dostanÃº aj tie, ktorÃ© nikto doteraz kladne nehodnotil, ÄÃ­m sa dosiahne vyÅ¡Å¡ia rozmanitosÅ¥ odporÃºÄania. NÃ¡hodnÃ½ odporÃºÄaÄ vyberÃ¡ poloÅ¾ky nÃ¡hodne. Jeho vÃ½hodou je rÃ½chlosÅ¥ vÃ½beru pri rozmanitosti poloÅ¾iek, nakoÄ¾ko netreba nÃ¡roÄnÃ© vÃ½poÄty. V praxi sa vÅ¡ak pouÅ¾Ã­va len v prÃ­padoch, keÄ eÅ¡te nie sÃº dostupnÃ© informÃ¡cie pre personalizÃ¡ciu odporÃºÄania, napr. pri novÃ½ch pouÅ¾Ã­vateÄ¾och. VstupnÃ© Ãºdaje sÃº zo vzorky 132 pouÅ¾Ã­vateÄ¾ov z prostredia odporÃºÄania filmov [8]. ÄÃ­selnÃ© hodnoty obchodnÃ©ho a pouÅ¾Ã­vateÄ¾skÃ©ho hÄ¾adiska boli zÃ­skanÃ© cez spÃ¤tnovÃ¤zobnÃ½ dotaznÃ­k, kde pouÅ¾Ã­vatelia mohli vyjadriÅ¥ svoju spokojnosÅ¥ s odporÃºÄanÃ½mi nÃ¡vrhmi, a Äi by v budÃºcnosti systÃ©m opÃ¤tovne pouÅ¾Ã­vali. Z technickÃ©ho hÄ¾adiska sa zohÄ¾adÅoval Äas, za ktorÃ½ systÃ©m zobrazil odporÃºÄanÃ© poloÅ¾ky. TabuÄ¾ka 7.1 uvÃ¡za nameranÃ© a vypoÄÃ­tanÃ© hodnoty odporÃºÄaÄov. MaximÃ¡lna (najlepÅ¡ia) moÅ¾nÃ¡ hodnota je 1 (sto percent). StÄºpce tabuÄ¾ky predstavujÃº odporÃºÄacie algoritmy. PrvÃ© tri riadky tabuÄ¾ky sÃº hodnoty jednotlivÃ½ch hÄ¾adÃ­sk a spodnÃ¡ ÄasÅ¥ tabuÄ¾ky obsahuje vÃ½slednÃ© hodnotenie odporÃºÄaÄov na zÃ¡klade vÃ¡hovania jednotlivÃ½ch hÄ¾adÃ­sk. VÅ¡etky tri odpo-"
59,510,0.578,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"v ktorom hÄ¾adÃ¡me globÃ¡lne minimum funkcie f (x) definovanej nad binÃ¡rnymi reÅ¥azcami dÄºÅ¾ky n. PretoÅ¾e poÄet binÃ¡rnych vektorov dÄºÅ¾ky n je 2n, zloÅ¾itosÅ¥ rieÅ¡enia tohto problÃ©mu rastie exponenciÃ¡lne, t. j. Äas potrebnÃ½ na rieÅ¡enie tohto problÃ©mu rastie exponenciÃ¡lne s rastom dimenzie n, tvÃ½poÄtu 2n . To znamenÃ¡, Å¾e pre vÃ¤ÄÅ¡ie n (napr. n = 50 alebo n =100), tento problÃ©m nemÃ¡me Å¡ancu vyrieÅ¡iÅ¥ v rozumnom Äase. PrÃ¡ve v tomto prÃ­pade vystupujÃº nastupujÃº evoluÄnÃ© algoritmy, ktorÃ© na zÃ¡klade darwinovskej metafory evolÃºcie sÃº schopnÃ© nÃ¡jsÅ¥ rieÅ¡enia tohto problÃ©mu, ktorÃ© aj keÄ sa nemusia rovnaÅ¥ globÃ¡lne optimÃ¡lnemu ieÅ¡eniu xopt, ale je mu veÄ¾mi blÃ­zke a v mnohÃ½ch prÃ­padoch pouÅ¾iteÄ¾nÃ© ako globÃ¡lne rieÅ¡enie. Na zÃ¡ver tejto podkapitoly uvedieme jednoduchÃ½ ilustraÄnÃ½ prÃ­klad rozÅ¡Ã­renia genetickÃ©ho algoritmu o âkolektÃ­vnu pamÃ¤Å¥â [24], ktorÃ¡ je realizovanÃ¡ tzv. pravdepodobnostnÃ½m vektorom w ï½ ï¨ w1 ,w2 ,...,wn ï© ï 0,1 , ktorÃ©ho jednotlivÃ© komponenty 0ï£wiï£1 urÄujÃº pravdepodobnosÅ¥ toho, Äi pri mutÃ¡cii replikÃ¡tora x ï½ ï¨ x1 ,x2 ,...,xn ï© ïï»0,1ï½ bude v polohe xi binÃ¡rna hodnota 1 alebo 0. V pÃ´vodnom genetickom algoritme, proces mutÃ¡cie je Ãºplne nÃ¡hodnÃ½, t. j. v replikÃ¡tore v danej polohe pri mutÃ¡cii sa bitovÃ© preklopenie 0ï«1 generuje nÃ¡hodne (pozri Obr. 10.2, diagram B): (1) modifikovanÃ½ genetickÃ½ algoritmus ï¯1 ï¨ random ï£ wi ï© ï¯mutÃ¡cia ï¨ random ï£ Pmut ï© ï½ ï­ (10.2a) xi ï½ ï­ ï®0 ï¨ inÃ¡Ä ï© ï¨ inÃ¡Ä ï© ï® xi (2) pÃ´vodnÃ½ genetickÃ½ algoritmus ï¯1 ï­ xi ï¨ mutÃ¡cia, ak random ï£ Pmut ï© (10.2b) xi ï½ ï­ ï¨ inÃ¡Ä ï© ï® xi Kde random je nÃ¡hodnÃ© ÄÃ­slo s rovnomernou distribÃºciou pravdepodobnosti z intervalu 0,1 . Ãloha, ktorÃ¡ je rieÅ¡enÃ¡ evoluÄnÃ½m prÃ­stupom je hÄ¾adanie globÃ¡lneho minima funkcie f ï¨ x ï© ï½ eï­0.01x sin ï¨8x ï© cos ï¨10 x ï© na intervale ï­10 ï£ x ï£ 10 . TÃ¡to funkcia mÃ¡ na danom intervale 56 minÃ­m, z ktorÃ½ch len jedno je globÃ¡lne, f(xopt)=-0,966565, xopt=0,61288 (pozri diagram A, Obr. 10.4). Nech v danej epoche evolÃºcie populÃ¡cia obsahuje replikÃ¡tor xopt s doÄasne maximÃ¡lnym fitnesom, toto vybranÃ© rieÅ¡enie sa pouÅ¾ije na modifikÃ¡ciu pamÃ¤te algoritmu reprezentovanej pravdepodobnostnÃ½mi vektorom w (pozri diagram B, Obr. 10.2) w : ï½ ï¨1 ï­ ï¬ ï© w ï« ï¬ xopt (10.3)"
41,10,0.578,InformaÄnÃ© vzdelÃ¡vanie,"TerciÃ¡rne informaÄnÃ© pramene sÃº zo vÅ¡etkÃ½ch jednoznaÄne najÅ¥aÅ¾Å¡ie definovateÄ¾nÃ¡ kategÃ³ria. Nie je vÅ¡ak nevyhnutne nutnÃ©, aby Äitatelia jednoznaÄne rozliÅ¡ovali medzi sekundÃ¡rnymi a terciÃ¡rnymi zdrojmi. VÅ¡etky materiÃ¡ly, do ktorÃ½ch boli informÃ¡cie zo sekundÃ¡rnych zdrojov spracovanÃ©, naformÃ¡tovanÃ© a zahustenÃ©, slÃºÅ¾ia jedinÃ©mu ÃºÄelu, aby informÃ¡cie dostali do pohodlnej a Ä¾ahko ÄitateÄ¾nej formy. TerciÃ¡rne informaÄnÃ© pramene/ zdroje obsahujÃº informÃ¡cie selektovanÃ© a zhromaÅ¾denÃ© z primÃ¡rnych a sekundÃ¡rnych zdrojov. PrimÃ¡rnou funkciou terciÃ¡rnych informaÄnÃ½ch zdrojov je napomÃ´cÅ¥ pouÅ¾Ã­vateÄ¾ovi/ÄitateÄ¾ovi, ktorÃ½ vyhÄ¾adÃ¡va informÃ¡cie pri vyuÅ¾Ã­vanÃ­ primÃ¡rnych a sekundÃ¡rnych informaÄnÃ½ch zdrojov. VÃ¤ÄÅ¡ina z tÃ½chto zdrojov neobsahuje konkrÃ©tne vedomosti z hÄ¾adanÃ½ch predmetov. Z dÃ´vodu nÃ¡rastu mnoÅ¾stva informÃ¡ciÃ­ sÃº terciÃ¡rne informaÄnÃ© zdroje Äoraz dÃ´leÅ¾itejÅ¡ie. Ako prÃ­klady terciÃ¡rnych informaÄnÃ½ch zdrojov uvÃ¡dzame: 1. Bibliografie 2. AdresÃ¡re a roÄenky 3. Sprievodcovia v literatÃºre 4. PrehÄ¾ady vÃ½skumov PRÃKLAD: Pre terciÃ¡lne informaÄnÃ© pramene vyuÅ¾ijeme vyhÄ¾adÃ¡vaÄe ako sÃº GOOGLE, prÃ­p. Wikipedia, ktorÃ© prinÃ¡Å¡ajÃº mnoÅ¾stvo vÃ½sledkov na vyhÄ¾adÃ¡vanÃº tÃ©mu, ale tieto vÃ½sledky nie vÅ¾dy musia pochÃ¡dzaÅ¥ z primÃ¡rnych informaÄnÃ½ch"
76,25,0.578,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.1.5 NÃ¡hodnÃ½ pokus spoÄÃ­va v hode tromi oznaÄenÃ½mi mincami. Za vÃ½sledok pokusu povaÅ¾ujeme usporiadanÃº trojicu symbolov Z (znak), C (ÄÃ­slo). Zrejme mnoÅ¾ina ï vÅ¡etkÃ½ch moÅ¾nÃ½ch vÃ½sledkov mÃ¡ 8 bodov. Vyjadrite udalosti z predchÃ¡dzajÃºcej Ãºlohy ako podmnoÅ¾iny mnoÅ¾iny ï a urÄite ich pravdepodobnosti. 1.1.6 SystÃ©m pozostÃ¡va z dvoch blokov typu I a troch blokov typu II. NÃ¡hoda ovplyvÅuje fungovanie, resp. nefungovanie jednotlivÃ½ch blokov. OznaÄme udalosti takto: -tÃ½ blok typu I funguje"
367,5,0.578,CESTA K OTVORENEJ VEDE,"RozhodnÃºÅ¥ sa pre otvorenÃº vedu znamenÃ¡ v prvom rade zabezpeÄiÅ¥, Å¾e vÃ½skum, ktorÃ½ je financovanÃ½ prevaÅ¾ne z verejnÃ½ch zdrojov, musÃ­ svoje zistenia prezentovaÅ¥ verejnosti v najvÃ¤ÄÅ¡ej moÅ¾nej miere. OtvorenosÅ¥ je nevyhnutnou podmienkou reprodukovateÄ¾nosti vedeckÃ½ch vÃ½sledkov a garanciou lepÅ¡ie zdokumentovanÃ©ho a podloÅ¾enÃ©ho vÃ½skumu. ZdieÄ¾anie posilÅuje schopnosÅ¥ vedy stavaÅ¥ na zÃ­skanÃ½ch poznatkoch a posÃºva ju vpred. OtvorenÃ¡ a transparentnÃ¡ veda tieÅ¾ zvyÅ¡uje dÃ´veryhodnosÅ¥ vÃ½skumu v spoloÄnosti â pandÃ©mia v roku 2020 nÃ¡m zreteÄ¾ne pripomenula, akÃ½ dÃ´leÅ¾itÃ½ je tento aspekt. Napokon, otvorenÃ¡ veda napomÃ¡ha zÃ¡sadnÃ©mu posunu smerom k demokratizÃ¡cii poznatkov na prospech organizÃ¡ciÃ­, spoloÄnostÃ­, obÄanov a najmÃ¤ Å¡tudentov, pre ktorÃ½ch je jednoduchÃ½ prÃ­stup k vedomostiam podmienkou Ãºspechu. Politiky otvorenej vedy majÃº v sÃºÄasnosti podporu na najvyÅ¡Å¡Ã­ch Ãºrovniach. Podporuje ich EurÃ³pska Ãºnia, ktorÃ¡ vyÅ¾aduje otvorenÃ½ prÃ­stup k publikÃ¡ciÃ¡m a dÃ¡tam tÃ½kajÃºcim sa vÃ½skumov, ktorÃ© financuje, priÄom od roku 2021 definuje otvorenÃº vedu ako kritÃ©rium vedeckej excelentnosti. Politiky otvorenej vedy celosvetovo podporuje aj G7 a UNESCO. SlovenskÃ¡ vlÃ¡da v roku 2021 schvÃ¡lila NÃ¡rodnÃº stratÃ©giu pre otvorenÃº vedu 2021-2028 a prvÃ½ na Åu viazanÃ½ akÄnÃ½ plÃ¡n s cieÄ¾om vytvoriÅ¥ udrÅ¾ateÄ¾nÃ½ model participÃ¡cie vÅ¡etkÃ½ch aktÃ©rov vedy a vÃ½skumu v SR na implementÃ¡cii globÃ¡lnych princÃ­pov otvorenej vedy.1 V koneÄnom dÃ´sledku sÃº to vÃ½skumnÃ­ci, ktorÃ½ch zÃ¡vÃ¤zky a praktiky stelesÅujÃº otvorenÃº vedu a ktorÃ­ uvÃ¡dzajÃº jej princÃ­py do praxe. KeÄ zaÄnete pripravovaÅ¥ svoju dizertaÄnÃº prÃ¡cu â poslednÃº fÃ¡zu svojho vzdelÃ¡vania a prvÃº fÃ¡zu profesijnÃ©ho Å¾ivota â vyuÅ¾ite tÃºto prÃ­ruÄku ako nÃ¡vod a zÃ¡roveÅ podnet na rozprÃºdenie konverzÃ¡cie v rÃ¡mci vÃ½skumnÃ©ho tÃ­mu. Cesta k otvorenej vede je prÃ­ruÄka navrhnutÃ¡ tak, aby vÃ¡s sprevÃ¡dzala v akomkoÄ¾vek odbore Å¡tÃºdia, na kaÅ¾dom kroku vÃ½skumu, od plÃ¡novania vedeckÃ©ho prÃ­stupu po zverejâ Åovanie vÃ½sledkov vÃ½skumu. Poskytuje sÃºbor nÃ¡strojov a osvedÄenÃ½ch postupov, ktorÃ© mÃ´Å¾ete priamo aplikovaÅ¥ pri vÃ½skume vo vÅ¡etkÃ½ch vednÃ½ch disciplÃ­nach. DÃºfame, Å¾e vÃ¡s tÃ¡to prÃ­ruÄka motivuje a poskytne prostriedky na dosiahnutie cieÄ¾ov otvorenej vedy prostrednÃ­ctvom zdieÄ¾ania vaÅ¡ich vÃ½sledkov a dÃ¡t s Äo najÅ¡irÅ¡Ã­m okruhom zÃ¡ujemcov."
184,348,0.578,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Â Ako zabezpeÄiÅ¥ simultÃ¡nne vykonÃ¡vanie schopnostÃ­ sÃºborov pri ich veÄ¾kom poÄte (stotisÃ­ce na jednom poÄÃ­taÄi)? Â V prÃ­pade, ak by nebolo moÅ¾nÃ© zabezpeÄiÅ¥ vykonÃ¡vanie tÃ½chto schopnostÃ­ sÃºbeÅ¾ne, ako urÄiÅ¥ ktorÃ½ sÃºbor, kedy a preÄo bude vykonÃ¡vanÃ½? Â Ako v prÃ­pade dostatoÄnÃ©ho vÃ½konu (prÃ­padne limitovania poÄtu sÃºborov, ktorÃ© mÃ´Å¾u byÅ¥ v rÃ¡mci sÃºborovÃ©ho systÃ©mu aktÃ­vne) zabezpeÄiÅ¥ distribuovanÃ½ systÃ©m pred moÅ¾nosÅ¥ou vnesenia a vykonÃ¡vania Å¡kodlivÃ©ho kÃ³du?"
190,419,0.577,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Iba jedna Å¡estina softvÃ©rovÃ½ch projektov sa konÄÃ­ ÃºspeÅ¡ne, teda sa pri splnenej funkcionalite zmestÃ­ do svojho pridelenÃ©ho Äasu a prostriedkov [1]. Äo je vÅ¡ak dÃ´vodom takejto nelichotivej miery neÃºspechu? VÃ½voj softvÃ©ru je pohybom v Å¥aÅ¾ko predvÃ­dateÄ¾nom prostredÃ­. PlÃ¡novanie projektu samo o sebe nezaruÄÃ­ Ãºspech. PlÃ¡n je takpovediac nutnou podmienkou Ãºspechu, pretoÅ¾e poskytuje zÃ¡kladnÃ½ kurz a oporu pre vÃ½vojÃ¡rov. Bez efektÃ­vneho vedenia vÅ¡ak nemÃ¡ Å¡ancu na Ãºspech, pretoÅ¾e ho bude treba zmeniÅ¥ hneÄ v prÃ­pade prvej situÃ¡cie, s ktorou sa nepoÄÃ­talo. Aj pri dobrom plÃ¡ne je manaÅ¾ment poÄas vykonÃ¡vania projektu kritickÃ½. Vznik nepredvÃ­danej situÃ¡cie mÃ´Å¾e maÅ¥ fatÃ¡lne nÃ¡sledky a zÃ¡leÅ¾Ã­ od okamÅ¾itÃ½ch rozhodnutÃ­. PrÃ¡ve tu sÃº ÄastÃ© zlyhania manaÅ¾Ã©rov. VznikajÃº stresovÃ© situÃ¡cie, je Ä¾udskÃ© podliehaÅ¥ panike, ktorÃ¡ plodÃ­ rozhodnutia Äasto eÅ¡te zhorÅ¡ujÃºce stav [3]. DÃ´leÅ¾itÃ½m faktorom je tieÅ¾, ako zavÄasu bol problÃ©m v rÃ¡mci projektu rozpoznanÃ½. VÄasne rozpoznanÃ© problÃ©my mÃ¡vajÃº spravidla menÅ¡Ã­ dopad, pokiaÄ¾ sa rieÅ¡ia eÅ¡te v zÃ¡rodku. ÃspeÅ¡nÃ© sa vyrovnanie sa s neoÄakÃ¡vanÃ½m problÃ©mom si vyÅ¾aduje jeho vÄasnÃº identifikÃ¡ciu a podniknutie sprÃ¡vnych krokov na jeho odstrÃ¡nenie. PrvÃ½ moment zÃ¡leÅ¾Ã­ od kvality monitorovania priebehu projektu, druhÃ½ od metodiky rieÅ¡enia krÃ­z softvÃ©rovej spoloÄnosti (ak existuje). Nedostatky v obidvoch fÃ¡zach majÃº za nÃ¡sledok neÃºspechy. SÃºÄasnÃ© trendy indikujÃº, Å¾e v tejto oblasti sÃº naozaj rezervy. Je nejakÃ¡ moÅ¾nosÅ¥ PlÃ¡n je nutnou podmienkou posunÃºÅ¥ tÃºto problematiku Äalej? Domnievam sa, Å¾e Ã¡no."
94,225,0.577,Sprievodca svetom vedeckÃ©ho publikovania,"7.1.4 ZaraÄovanie (indexÃ¡cia) novÃ½ch publikÃ¡ciÃ­ do bibliometrickÃ½ch databÃ¡z Obsah bibliometrickÃ½ch databÃ¡z Web of Science Core Collection/Scopus tvorÃ­ producent, no o zaradenie svojej publikÃ¡cie (indexÃ¡ciu Äasopisu) mÃ´Å¾e externe poÅ¾iadaÅ¥ kaÅ¾dÃ½ vydavateÄ¾. Tento proces je kontrolovanÃ½ a tituly sÃº pred zaradenÃ­m do databÃ¡zy prÃ­sne hodnotenÃ© nezÃ¡vislou komisiou. Z pohÄ¾adu evaluÃ¡cie slovenskej vedy je indexÃ¡cia vedeckej publikÃ¡cie v bibliometrickej databÃ¡ze ukazovateÄ¾om urÄitej kvality, nakoÄ¾ko vÅ¡etky tituly prechÃ¡dzajÃº nezÃ¡vislÃ½m hodnotenÃ­m zahraniÄnÃ½ch odbornÃ­kov."
43,161,0.577,Objektovo orientovanÃ© programovanie v C++,"4.5 DynamickÃ¡ alokÃ¡cia viacrozmernÃ½ch polÃ­ V programoch sÃº Äasto potrebnÃ© polia, ktorÃ© majÃº viac ako jeden rozmer. NaprÃ­klad ak by sme chceli reprezentovaÅ¥ maticu, obrÃ¡zok alebo Å¡achovnicu, najprirodzenejÅ¡Ã­ spÃ´sob reprezentÃ¡cie je dvojrozmernÃ© pole. Ak pracujeme s 3D obrazmi alebo vÅ¡eobecne s bodmi nejakej 3D oblasti, pouÅ¾Ã­vame trojrozmernÃ© polia atÄ. UkÃ¡Å¾me si najskÃ´r, ako mÃ´Å¾eme vytvoriÅ¥ dvojrozmernÃ© dynamicky alokovanÃ© pole. ExistujÃº dva zÃ¡kladnÃ© postupy. â¢ StratÃ©gia po riadkoch. TÃ¡to stratÃ©gia je intuitÃ­vnejÅ¡ia. Ak chceme alokovaÅ¥ dvojrozmernÃ© pole typu T s rozmermi mÃn, vytvorÃ­me najskÃ´r jednorozmernÃ© pole smernÃ­kov na T, t. j. jednorozmernÃ© pole typu *T, s poÄtom prvkov m. Potom kaÅ¾dÃ½ z tÃ½chto smernÃ­kov pouÅ¾ijeme na alokovanie ÄalÅ¡ieho jednorozmernÃ©ho poÄ¾a, tentokrÃ¡t typu T a s rozmerom n. KaÅ¾dÃ½ z tÃ½chto m smernÃ­kov bude teda ukazovaÅ¥ na zaÄiatok jednÃ©ho riadku s n stÄºpcami. Takto usporiadanÃ¡ Å¡truktÃºra spolu vytvorÃ­ dvojrozmernÃ© pole zorganizovanÃ© ako pole riadkov (obr. 4.2). Hoci tieto riadky mÃ´Å¾u byÅ¥ rozmiestnenÃ© na rÃ´znych miestach v pamÃ¤ti, program ich bude chÃ¡paÅ¥ ako jeden celok. Aby sme mohli vytvoriÅ¥ jednorozmernÃ© pole typu *T, potrebujeme smernÃ­k na typ *T, teda premennÃº typu **T. Po vytvorenÃ­ tohto poÄ¾a alokujeme jednotlivÃ© riadky v cykle. AlokÃ¡cia takto usporiadanÃ©ho dvojrozmernÃ©ho poÄ¾a teda prebieha nasledujÃºcim spÃ´sobom. T **pole=new T*[m]; for (i=0;i<m;i++) pole[i]=new T[n];"
76,123,0.577,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.2 SpojitÃ© nÃ¡hodnÃ© veliÄiny a ich rozdelenia Doteraz sme hovorili o nÃ¡hodnÃ½ch veliÄinÃ¡ch, ktorÃ½ch mnoÅ¾ina moÅ¾nÃ½ch hodnÃ´t bola koneÄnÃ¡, alebo ak nekoneÄnÃ¡, tak spoÄÃ­tateÄ¾nÃ¡. Ako vieme, takÃ© veliÄiny nazÃ½vame diskrÃ©tne. Na druhej strane sa Äasto stretÃ¡vame so situÃ¡ciami, keÄ nÃ¡hodnÃ½m je napr. Äas, ktorÃ½ trÃ¡vime ÄakanÃ­m na obsluhu (ÄakanÃ­m vo fronte, Äi uÅ¾ v supermarkete, v banke, alebo na poÅ¡te), resp. nÃ¡hodnÃ½m je Äas bezporuchovÃ©ho fungovania hociakÃ©ho vÃ½robku. V tÃ½chto prÃ­padoch ide o nÃ¡hodnÃ© veliÄiny, ktorÃ½ch potenciÃ¡lne hodnoty sÃº akÃ©koÄ¾vek body intervalu, Äi uÅ¾ ohraniÄenÃ©ho, alebo neohraniÄenÃ©ho (Äasto berieme interval â¨ ) len preto, Å¾e potom sa s modelom dobre pracuje). TakÃ©to nÃ¡hodnÃ© veliÄiny budeme nazÃ½vaÅ¥ spojitÃ© (presnÃ¡ definÃ­cia nasleduje). PripomeÅme znÃ¡my fakt â kaÅ¾dÃ½ interval kladnej dÄºÅ¾ky je nespoÄÃ­tateÄ¾nÃ¡ mnoÅ¾ina. NuÅ¾ a to je dÃ´vod, pre ktorÃ½ pravdepodobnostnÃ½ opis spojitej nÃ¡hodnej veliÄiny nie je moÅ¾nÃ© urobiÅ¥ pomocou pravdepodobnostÃ­ jednotlivÃ½ch vÃ½sledkov (tÃ½ch moÅ¾nÃ½ch vÃ½sledkov je totiÅ¾ nespoÄÃ­tateÄ¾ne veÄ¾a, voÄ¾ne povedanÃ©, prÃ­liÅ¡ veÄ¾a) a naviac â a to vyzerÃ¡ ako paradox â pre pravdepodobnosti jednotlivÃ½ch vÃ½sledkov platÃ­ P( = ) = 0, pre kaÅ¾dÃ© reÃ¡lne . 2.2.1 DefinÃ­cia. Nech (ï, S, P) je pravdepodobnostnÃ½ priestor a je zobrazenie z ï do R. Zobrazenie nazÃ½vame nÃ¡hodnÃ¡ veliÄina, ak pre vÅ¡etky ïR, < , mÃ¡ zmysel hovoriÅ¥ o P({ï·: ï£ (ï·) < }), to znamenÃ¡, Å¾e mnoÅ¾ina {ï·: ï£ (ï·) < } patrÃ­ do S."
135,235,0.577,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"VÃ½hody aj nevÃ½hody architektÃºry klient-server vyplÃ½vajÃº najmÃ¤ z jej centralizovanÃ©ho charakteru. VÅ¡etky dÃ¡ta sÃº uchovÃ¡vanÃ© na serveroch, o umoÅ¾uje vykonÃ¡va striktnÃ© dodrÅ¾iavanie pravidiel pre pristupovanie k nim. Naopak, v prÃ­pade zlyhania kritickej asti servera nie je moÅ¾nÃ© poÅ¾iadavky klientov spracÃºva. TieÅ¾, keÅ¾e sÃº vÅ¡etky poÅ¾iadavky spracÃºvanÃ© centralizovane, vznikÃ¡ riziko preaÅ¾enia centrÃ¡lneho uzla a tak znefunknenia sluÅ¾by pre vÅ¡etkÃ½ch klientov."
184,30,0.577,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Pri stavbe domu sa postupuje podÄ¾a urÄitÃ©ho plÃ¡nu a v sÃºlade s projektom stavebnÃ©ho architekta. Podobne sa aj pri vÃ½voji komplexnejÅ¡Ã­ch softvÃ©rovÃ½ch systÃ©mov ukÃ¡zalo ako kÄ¾ÃºÄovÃ© maÅ¥ k dispozÃ­cii architektÃºru. TÃ¡ predstavuje abstrakciu systÃ©mu, zÃ¡klad o ktorÃ½ sa mÃ´Å¾u oprieÅ¥ vÅ¡etci ÃºÄastnÃ­ci vÃ½voja aplikÃ¡cie. ArchitektÃºra softvÃ©ru je jednou z disciplÃ­n softvÃ©rovÃ©ho inÅ¾inierstva, jej nÃ¡vrh predurÄuje budÃºce vlastnosti softvÃ©ru, jeho prednosti a obmedzenia. Aj keÄ tÃ¡to disciplÃ­na nemÃ¡ svoju jednoznaÄnÃº definÃ­ciu, je dobre definovanÃ¡ tÃ½m, Äo od architektÃºry oÄakÃ¡vame a akÃ© problÃ©my rieÅ¡i. Tvorbu architektÃºry softvÃ©ru zatiaÄ¾ nedokÃ¡Å¾eme automatizovaÅ¥. Aj keÄ sÃº k dispozÃ­ciÃ­ rÃ´zne rokmi overenÃ© architektonickÃ© vzory, tvorba architektÃºry komplexnÃ©ho systÃ©mu predstavuje nÃ¡roÄnÃ½ proces, ktorÃ½ vyÅ¾aduje kreatÃ­vny prÃ­stup. SoftvÃ©rovÃ½ architekt by mal byÅ¥ vynikajÃºci softvÃ©rovÃ½ inÅ¾inier, ktorÃ½ ovlÃ¡da nielen praktiky tohto odboru, ale mÃ¡ aj potrebnÃ© vedomosti z prÃ­sluÅ¡nej domÃ©ny, prehÄ¾ad v technolÃ³giÃ¡ch a vynikajÃºce komunikaÄnÃ© a rozhodovacie schopnosti."
43,238,0.576,Objektovo orientovanÃ© programovanie v C++,"â¢ MetÃ³du Nacitaj, ktorÃ¡ naÄÃ­ta obrÃ¡zok zo sÃºboru. â¢ MetÃ³du Inverzia, ktorÃ¡ invertuje obrÃ¡zok a vÃ½sledok zapÃ­Å¡e do sÃºboru. â¢ MetÃ³du PreklopX, ktorÃ¡ preklopÃ­ obrÃ¡zok podÄ¾a osi x a vÃ½sledok zapÃ­Å¡e do sÃºboru. â¢ MetÃ³du PreklopY, ktorÃ¡ preklopÃ­ obrÃ¡zok podÄ¾a osi y a vÃ½sledok zapÃ­Å¡e do sÃºboru. 5. PrepÃ­Å¡te hru Pexeso (kapitola 4, cviÄenie 6) do objektovo orientovanej podoby. 6. Vytvorte objektovo orientovanÃ½ program, ktorÃ½ bude vedieÅ¥ spracovÃ¡vaÅ¥ objednÃ¡vky tovaru od zÃ¡kaznÃ­kov. Ãdaje o objednÃ¡vkach sÃº uloÅ¾enÃ© v textovom sÃºbore, pre kaÅ¾dÃº z nich je uloÅ¾enÃ© meno zÃ¡kaznÃ­ka, tovar, ktorÃ½ si objednal a objednanÃ© mnoÅ¾stvo (kaÅ¾dÃ½ Ãºdaj je v samostatnom riadku). Dajme tomu, Å¾e objednÃ¡vky sa vybavujÃº presne v takom poradÃ­, v akom prichÃ¡dzajÃº. VÃ¡Å¡ program by mal vedieÅ¥ pridaÅ¥ novÃº objednÃ¡vku na koniec sÃºboru a vymazaÅ¥ z jeho zaÄiatku objednÃ¡vku, ktorÃ¡ uÅ¾ bola vybavenÃ¡. 7. NapÃ­Å¡te objektovo orientovanÃ½ program, ktorÃ½ bude vytvÃ¡raÅ¥ playlisty pre prehrÃ¡vaÄ hudby. Program bude maÅ¥ k dispozÃ­cii niekoÄ¾ko sÃºborov so zoznamami skladieb. Pre kaÅ¾dÃº skladbu sÃº v Åom zapÃ­sanÃ© tri Ãºdaje â nÃ¡zov, interpret a dÄºÅ¾ka v sekundÃ¡ch. Ãdaje pre vÅ¡etky skladby sÃº zapÃ­sanÃ© za sebou, kaÅ¾dÃ½ Ãºdaj je v samostatnom riadku. MÃ´Å¾ete predpokladaÅ¥, Å¾e v Å¾iadnom sÃºbore nie je viac ako 30 skladieb. VÃ¡Å¡ program bude vytvÃ¡raÅ¥ novÃ© playlisty tak, Å¾e vytvorÃ­ novÃ½ textovÃ½ sÃºbor a doÅho uloÅ¾Ã­ novovytvorenÃ½ zoznam skladieb. UÅ¾Ã­vateÄ¾ bude maÅ¥ niekoÄ¾ko moÅ¾nostÃ­: â¢ NÃ¡hodnÃ© preusporiadanie vÅ¡etkÃ½ch skladieb zo vÅ¡etkÃ½ch sÃºborov. â¢ NÃ¡hodnÃ© preusporiadanie vÅ¡etkÃ½ch skladieb z jednÃ©ho sÃºboru. â¢ NÃ¡hodnÃ½ vÃ½ber zadanÃ©ho poÄtu skladieb zo vÅ¡etkÃ½ch sÃºborov alebo len z jednÃ©ho vybranÃ©ho. â¢ VÃ½ber skladieb len od konkrÃ©tneho interpreta. â¢ VÃ½ber skladieb podÄ¾a dÄºÅ¾ky. NapÃ­Å¡te program tak, aby vedel vypÃ­saÅ¥ na obrazovku obsah ktorÃ©hokoÄ¾vek sÃºboru a tieÅ¾ novÃ½ playlist. V tomto vÃ½pise sa dÄºÅ¾ka skladby objavÃ­ v Å¡tandardnom formÃ¡te minÃºty:sekundy. 8. Vytvorte triedu skladba s Ãºdajmi podÄ¾a predchÃ¡dzajÃºceho cviÄenia, ktorÃ© sa budÃº daÅ¥ nastaviÅ¥ v konÅ¡truktore. V hlavnom programe potom vytvorte pole piatich skladieb tak, Å¾e priamo pri vytvÃ¡ranÃ­ poÄ¾a vymenujete vÅ¡etky jeho prvky. NÃ¡jdite potom v tomto poli vÅ¡etky skladby kratÅ¡ie ako tri minÃºty a vypÃ­Å¡te vÅ¡etky informÃ¡cie o nich. 9. NapÃ­Å¡te objektovo orientovanÃ½ program, ktorÃ½ umoÅ¾nÃ­ Å¡tudentom prihlasovaÅ¥ sa na skÃºÅ¡ky z rÃ´znych predmetov. KaÅ¾dÃ½ Å¡tudent mÃ¡ meno, Å¡tudijnÃ½ odbor a roÄnÃ­k, v ktorom prÃ¡ve je. KaÅ¾dÃ½ predmet mÃ¡ svoj textovÃ½ sÃºbor so zoznamom vÅ¡etkÃ½ch termÃ­nov. Pre kaÅ¾dÃ½ termÃ­n zase existuje textovÃ½ sÃºbor, v ktorom je zoznam uÅ¾ prihlÃ¡senÃ½ch Å¡tudentov. Å tudentovi sa na poÅ¾iadanie vypÃ­Å¡u vÅ¡etky termÃ­ny pre zadanÃ½ predmet. Ak si potom vyberie niektorÃ½ z termÃ­nov, vÅ¡etky jeho Ãºdaje sa pripÃ­Å¡u na koniec sÃºboru so Å¡tudentami, ktorÃ­ sÃº uÅ¾ na tento termÃ­n prihlÃ¡senÃ­."
76,108,0.576,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.7.2 Nech nÃ¡hodnÃ½ pokus spoÄÃ­va v trojnÃ¡sobnom hÃ¡dzanÃ­ faloÅ¡nou hracou kockou, ktorej steny (s bodmi 1 aÅ¾ 6) sa objavujÃº s pravdepodobnosÅ¥ami: ZvoÄ¾me nÃ¡hodnÃ© udalosti: A â v prvom hode menej ako 4 body, B â v druhom hode aspoÅ 5 bodov, C â v treÅ¥om hode pÃ¡rny poÄet bodov. a) Stanovte pravdepodobnosti udalostÃ­ A, B, C, AïB, AïBïC. b) Overte, Å¾e udalosti A, B, C sÃº po dvoch nezÃ¡vislÃ©. c) SÃº udalosti A, B, C (ako trojica) nezÃ¡vislÃ©? 1.7.3 FaloÅ¡nou mincou, na ktorej pravdepodobnosÅ¥ padnutia znaku sa rovnÃ¡ 0.55, hodÃ­me desaÅ¥krÃ¡t. AkÃ¡ je pravdepodobnosÅ¥ udalostÃ­ a) A â na minci padne tri razy znak? b) B â na minci padne sedemkrÃ¡t znak? c) C â na minci padne Å¡esÅ¥krÃ¡t ÄÃ­slo? d) D â minca ukÃ¡Å¾e postupne: (Z, Z, Z, Ä, Ä, Ä, Z, Ä, Ä, Ä)? e) E â znak padne aspoÅ sedem rÃ¡z? 1.7.4 FaloÅ¡nou kockou hÃ¡dÅ¾eme pÃ¤Å¥krÃ¡t. JednotlivÃ© body (t. j. steny kocky) padajÃº s pravdepodobnosÅ¥ami"
94,47,0.576,Sprievodca svetom vedeckÃ©ho publikovania,"1.4.12 V sieti je miesta dosÅ¥ Internet umoÅ¾nil vÃ½skumnÃ­kom efektÃ­vnejÅ¡ie vyhÄ¾adÃ¡vaÅ¥, pÃ­saÅ¥, komunikovaÅ¥ a virtuÃ¡lne sa zdruÅ¾ovaÅ¥ (napr. do akademickÃ½ch sociÃ¡lnych sietÃ­ ako Mendeley, Academia.edu, Äi ResearchGate, viac o nich v kapitole 8). Vyjadrenia jednotlivcov nespokojnÃ½ch so stavom publikaÄnÃ©ho priemyslu zÃ­skali naraz Å¡irÅ¡ie publikum. Äoraz viac Ä¾udÃ­ si zaÄalo uvedomovaÅ¥ potrebu otvorenÃ©ho prÃ­stupu k vedeckÃ½m vÃ½sledkom, Äo naÅ¡tartovalo proces neskÃ´r nazvanÃ½"
76,50,0.576,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ako sme naÅ¡li pravdepodobnosti? VÃ½sledok pokusu urÄujÃº vÃ½sledky dvoch akciÃ­: prvou je Å¥ahanie prvej â tu je 6 moÅ¾nostÃ­ (v Å¡katuli je 6 objektov). Druhou akciou je druhÃ½ Å¥ah, priÄom v Å¡katuli je uÅ¾ len 5 objektov (prvÃ¡ vytiahnutÃ¡ sa nevrÃ¡tila do Å¡katule). Bodov pomocnÃ©ho priestoru je preto 30 (= 6ï5). TÃ½ch 30 rÃ´znych usporiadanÃ½ch dvojÃ­c, ktorÃ© mÃ´Å¾u byÅ¥ vytiahnutÃ©, predstavuje 30 bodov pomocnÃ©ho priestoru ï , ktorÃ½ je homogÃ©nny. NaprÃ­klad, vÃ½sledku = (b, b) odpovedÃ¡ 6 bodov pomocnÃ©ho (homogÃ©nneho) priestoru ï : (b1, b2), (b1, b3), (b2, b1), (b2, b3), (b3, b1), (b3, b2). Alebo vÃ½sledku = (b, c) odpovedÃ¡ tÃ½chto Å¡esÅ¥ bodov priestoru ï : (b1, c1), (b1, c2), (b2, c1), (b2, c2), (b3, c1), (b3, c2). Analogicky zÃ­skame aÅ¾ . VÅ¾dy je dobrÃ© overiÅ¥, Å¾e sÃºÄet vÅ¡etkÃ½ch sa rovnÃ¡ jednej. To sÃ­ce nie je zÃ¡ruka toho, Å¾e sme P( ) stanovili sprÃ¡vne, ale ak sÃºÄet sa nerovnÃ¡ 1, tak je istÃ©, Å¾e je v naÅ¡om modelovanÃ­ chyba. 1.3.6 PrÃ­klad. Å katuÄ¾a a jej obsah z predchÃ¡dzajÃºceho prÃ­kladu ostÃ¡vajÃº, ale teraz nÃ¡hodne Å¥ahÃ¡me naraz dve loptiÄky, a preto je prirodzenÃ© za vÃ½sledok pokusu povaÅ¾ovaÅ¥ neusporiadanÃº dvojicu vytiahnutÃ½ch farieb. UrÄime model pokusu. RieÅ¡enie. Model pokusu predstavuje tabuÄ¾ka:"
369,372,0.576,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"a inÃ©ho dopravnÃ©ho prostriedku, na Äo nÃ¡m priÅ¡la vhod generalizÃ¡cia uvedenÃ½ch prvkov do triedy StavebnÃ½ prvok vÃ½robnÃ©ho systÃ©mu. StatickÃº informÃ¡ciu o tom, ktorÃ© stavebnÃ© prvky dokÃ¡Å¾e dopravnÃ½ prostriedok obsluhovaÅ¥, dopÄºÅa dynamickÃ¡ informÃ¡cia, kde sa dopravnÃ½ prostriedok aktuÃ¡lne nachÃ¡dza. TÃºto sme vyjadrili ÄalÅ¡ou relÃ¡ciou medzi dopravnÃ½m prostriedkom a stavebnÃ½m prvkom vÃ½robnÃ©ho systÃ©mu. AktuÃ¡lne miesto potrebujeme poznaÅ¥ nielen pre dopravnÃ½ prostriedok, ale aj mobilnÃ© prvky vÃ½robnÃ©ho systÃ©mu. Paleta sa nachÃ¡dza v niektorom stavebnom prvku:2: v sklade, na pracovisku (spracovÃ¡vajÃº sa komponenty-vÃ½robky, ktorÃ© obsahovala) alebo na dopravnom prostriedku (prÃ¡ve sa dovÃ¡Å¾a na pracovisko alebo do skladu). Komponenty-vÃ½robky sa Å¡tandardne nachÃ¡dzajÃº v paletÃ¡ch. Mimo paliet sÃº iba v Äase svojho obrÃ¡bania, Äi montÃ¡Å¾e na pracovisku."
369,250,0.576,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.13. PrenÃ¡jom bezpeÄnostnej schrÃ¡nky Modely platobnej karty a prenÃ¡jmu bezpeÄnostnej schrÃ¡nky mÃ´Å¾eme zovÅ¡eobecniÅ¥. ÃÄet predstavuje zÃ¡kladnÃ½ pojem v bankovnÃ­ctve, ktorÃ½ slÃºÅ¾i na evidovanie stavu finanÄnÃ½ch prostriedkov a vÅ¡etkÃ½ch vykonanÃ½ch operÃ¡ciÃ­. MnohÃ© bankovÃ© produkty sÃº vÅ¡ak komplexnejÅ¡ie a potrebujÃº evidovaÅ¥ ÄalÅ¡ie informÃ¡cie, naprÃ­klad Ãºdaje o viacerÃ½ch platobnÃ½ch kartÃ¡ch, ich limitoch a pod. PridÃ¡vanie takÃ½chto informÃ¡ciÃ­ priamo do triedy ÃÄet klienta aj pri pouÅ¾itÃ­ relÃ¡cie generalizÃ¡cie zneprehÄ¾adÅuje model a poruÅ¡uje princÃ­py normalizÃ¡cie. Z uvedenÃ©ho dÃ´vodu sa tieto atribÃºty odÄleÅujÃº do triedy Zmluva s jej poloÅ¾kami a predmetmi zmluvy (obr. 4.14). ÃÄet klienta nesie finanÄnÃ© Ãºdaje o urÄitej skutoÄnosti a umoÅ¾Åuje evidovaÅ¥ tak finanÄnÃ© operÃ¡cie s ÃºÄtom ako aj vykonÃ¡vaÅ¥ ÄalÅ¡ie vÃ½poÄty, naprÃ­klad poÄÃ­tanie Ãºrokov a poplatkov. Zmluva a jej poloÅ¾ky dopÄºÅajÃº tieto finanÄnÃ© Ãºdaje o popisnÃ© Ãºdaje. Pri beÅ¾nom alebo termÃ­novanom ÃºÄte tÃ½chto popisnÃ½ch informÃ¡ciÃ­ bolo pomerne mÃ¡lo a pridÃ¡vali sa do triedy ÃÄet. Pri komplexnejÅ¡Ã­ch bankovÃ½ch produktoch sa uÅ¾ evidujÃº oddelene. V porovnanÃ­ s modelmi na obr. 4.10 a 4.13 je model na obr. 4.15 komplexnejÅ¡Ã­ v tom, Å¾e obsahuje vÃ¤zobnÃº triedu PoloÅ¾ka zmluvy, kÃ½m modely na obr. 4.10 a 4.13 majÃº priame asociÃ¡cie zo zmluvy na predmety zmluvy. Trieda PoloÅ¾ka zmluvy vznikla uplatnenÃ­m princÃ­pu normalizÃ¡cie do prvej normÃ¡lnej formy pre prÃ­pady nÃ¡sobnosti mnoho-mnoho medzi zmluvou a predmetmi zmluvy."
265,402,0.576,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Je to stratÃ©gia, kedy najskÃ´r navrhujeme zÃ¡sadnÃ© Ärty softvÃ©ru a postupne sa prepracÃºvame k detailom (inÃ½mi slovami, ideme od abstraktnÃ©ho ku konkrÃ©tnemu). Z pohÄ¾adu Å¡truktÃºry softvÃ©ru je pre tÃºto stratÃ©giu typickÃ©, Å¾e najskÃ´r vypracÃºvame architektonickÃ½ nÃ¡vrh a aÅ¾ nÃ¡sledne jednotlivÃ© komponenty a ich sÃºÄasti. Z pohÄ¾adu dynamiky softvÃ©ru zaÄÃ­name od procesov a funkcionÃ¡lnych poÅ¾iadaviek a postupne odkrÃ½vame a navrhujeme detailnejÅ¡ie, akÃ© procesy a algoritmy majÃº prebiehaÅ¥ vo vnÃºtri softvÃ©ru aÅ¾ sa dostaneme na ÃºroveÅ jednotlivÃ½ch metÃ³d. Po tejto stratÃ©gii siahame predovÅ¡etkÃ½m vtedy, keÄ je jasnÃ¡ Å¡pecifikÃ¡cia celÃ©ho softvÃ©ru. StratÃ©gia mÃ¡ blÃ­zko k vodopÃ¡dovÃ©mu modelu vÃ½voja, preto si musÃ­me byÅ¥ vedomÃ­ aj jej rizÃ­k. Jeden z nich je aj problematickÃ© odhadovanie Ãºsilia (prÃ¡ce) a predvÃ­danie problÃ©mov hlavne v prvÃ½ch fÃ¡zach vÃ½voja, keÄ pracujeme s prÃ­liÅ¡ veÄ¾kÃ½mi, zatiaÄ¾ neznÃ¡mymi komponentmi. Je preto veÄ¾mi vÃ½hodnÃ©, ak rieÅ¡ime dobre znÃ¡my problÃ©m, resp. mÃ¡me skÃºsenosti s podobnÃ½m projektom a mÃ´Å¾eme tak lepÅ¡ie odhadovaÅ¥ a predvÃ­daÅ¥ problÃ©my."
236,103,0.575,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"V tejto Äasti budÃº opÃ­sanÃ© najdÃ´leÅ¾itejÅ¡ie prÃ­kazy. KompletnÃ½ zoznam vÅ¡etkÃ½ch matematickÃ½ch znakov je v podkapitole 3.10 na strane 52. MalÃ© grÃ©cke pÃ­smenÃ¡ sa zadÃ¡vajÃº ako \alpha, \beta, \gamma, . . . , veÄ¾kÃ© pÃ­smenÃ¡2 sa zadÃ¡vajÃº ako \Gamma, \Delta, . . ."
43,343,0.575,Objektovo orientovanÃ© programovanie v C++,"PrvÃ©mu prÃ­padu sme sa uÅ¾ podrobne venovali v Äasti 7.3 a vieme, Å¾e prÃ­padnÃ½m problÃ©mom, ktorÃ© mÃ´Å¾u nastaÅ¥, sa vieme vyhnÃºÅ¥ pomocou kopÃ­rovacieho konÅ¡truktora. DruhÃ¡ situÃ¡cia je trochu odliÅ¡nÃ¡. V tomto prÃ­pade nejde o vytvÃ¡ranie objektu, preto sa ani nezavolÃ¡ nijakÃ½ konÅ¡truktor. Oba objekty uÅ¾ existujÃº a v okamihu priradenia sa objekt objekt1 stane presnou kÃ³piou objektu objekt2. MÃ¡me tu teda ÄalÅ¡Ã­ prÃ­pad, keÄ vznikÃ¡ presnÃ¡ kÃ³pia. Äo znamenÃ¡ vytvorenie presnej kÃ³pie a akÃ© Å¥aÅ¾kosti mÃ´Å¾e so sebou priniesÅ¥ uÅ¾ dobre vieme. V kapitole 5.5 sme si ukÃ¡zali prÃ­klad, keÄ priradenie medzi dvomi objektami a nÃ¡slednÃ¡ existencia dvoch navlas rovnakÃ½ch objektov spÃ´sobÃ­ krach programu. Na rozdiel od inÃ½ch prÃ­padov nÃ¡s v tejto situÃ¡cii nemÃ´Å¾e zachrÃ¡niÅ¥ ani kopÃ­rovacÃ­ konÅ¡truktor, keÄÅ¾e nijakÃ½ konÅ¡truktor sa tu nespÃºÅ¡Å¥a. Äo teda s tÃ½mto problÃ©mom? V kopÃ­rovacom konÅ¡truktore ide o to, Å¾e programu povieme, akÃ½m spÃ´sobom mÃ¡ vytvÃ¡raÅ¥ kÃ³pie objektu, aby nenastali Å¾iadne kolÃ­zie. Äo keby sme aj pri priraÄovanÃ­ povedali programu, ako mÃ¡ priraÄovaÅ¥, aby to bolo bezpeÄnÃ©? To je moÅ¾nÃ©, ak deï¬nujeme vlastnÃ½ operÃ¡tor priradenia, teda operÃ¡tor =. OperÃ¡tor priradenia sa v C++ deï¬nuje tak, Å¾e jeho parametrom je odkaz na objekt danej triedy a rovnakÃ©ho typu je aj nÃ¡vratovÃ¡ hodnota. OperÃ¡tor priradenia pre triedu moja trieda by teda mal takÃºto deklarÃ¡ciu moja trieda& operator=(moja trieda& objekt1);"
190,31,0.575,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V dneÅ¡nej dobe snÃ¡Ä neexistuje vÃ¤ÄÅ¡ia firma, ktorÃ¡ by nejakÃ½m spÃ´sobom nevyuÅ¾Ã­vala metÃ³dy obstarÃ¡vania, Äasto nazÃ½vanÃ© anglickÃ½m outsourcing, ktorÃ½ sa uÅ¾ udomÃ¡cnil v naÅ¡om slovnÃ­ku. OutsourcujÃº sa Ä¾udskÃ© zdroje, know-how, rÃ´zne sluÅ¾by prÃ­padne aj vÃ½poÄtovÃ¡ kapacita. V tejto eseji sa zameriam na outsourcing Ä¾udskÃ½ch zdrojov pri softvÃ©rovÃ½ch projektoch. Prezentujem mÃ´j pohÄ¾ad na vÃ½hody outsourcingu a opisujem, kedy je vhodnÃ© uvaÅ¾ovaÅ¥ nad jeho pouÅ¾itÃ­m. Äalej na konkrÃ©tnom projekte naÄrtnem s akÃ½mi rizikami sa pri outsourcingu mÃ´Å¾eme stretnÃºÅ¥ a Äo sa dÃ¡ spraviÅ¥ na ich eliminÃ¡ciu, prÃ­padne zmiernenie ich nÃ¡sledkov."
41,50,0.575,InformaÄnÃ© vzdelÃ¡vanie,"Obr 1. Typy SOA sluÅ¾ieb [8] EÅ¡te v jednej veci mÃ´Å¾e byÅ¥ SOA nevÃ½hodnÃ¡. Je to nÃ¡roÄnosÅ¥ na zdroje. Preto je potrebnÃ© pri nÃ¡vrhu systÃ©mu a optimalizÃ¡cii zvÃ¡Å¾iÅ¥ viac moÅ¾nostÃ­ na realizÃ¡ciu, Äo v koneÄnom dÃ´sledku mÃ´Å¾e znamenaÅ¥ vÃ¤ÄÅ¡iu prehÄ¾adnosÅ¥ systÃ©mu a jeho Ä¾ahÅ¡iu udrÅ¾ateÄ¾nosÅ¥. BeÅ¾nÃ½m spÃ´sobom SOA architektÃºry je dekompozÃ­cia sluÅ¾ieb, ÄiÅ¾e z jednej veÄ¾kej spravÃ­me niekoÄ¾ko malÃ½ch. To ale mÃ´Å¾e maÅ¥ za nÃ¡sledok aj skomplikovanie a spomalenie systÃ©mu, ak tÃºto dekompozÃ­ciu urobÃ­me na prÃ­liÅ¡ malÃ© sluÅ¾by. SluÅ¾by samotnÃ© spolu komunikujÃº prostrednÃ­ctvom siete. PrÃ­kladom ÃºspeÅ¡nÃ©ho uplatnenia SOA sÃº dnes mobilnÃ© aplikÃ¡cie komunikujÃºce s backendovÃ½mi systÃ©mami a poskytujÃºce rÃ½chle odpovede na ich âvolaniaâ. SOA je prepojenÃ¡ na procesy a ich riadenie. BPM (Business Process Management) a SOA patria k sebe. Vytvorenie a riadenie procesov a ich nÃ¡slednÃ¡ realizÃ¡cia cez SOA sluÅ¾by vie zjednoduÅ¡iÅ¥ fungovanie organizÃ¡cie, podaÅ¥ sluÅ¾bu prijateÄ¾nejÅ¡ie na"
369,133,0.574,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"VzÅ¥ahy k inÃ½m vzorom OperÃ¡cie vo veÄ¾kej miere sÃºvisia s predchÃ¡dzajÃºcimi aspektmi firmy: 1. ÃÄastnÃ­ci â ÃºÄastnÃ­ci podieÄ¾ajÃºci sa na plÃ¡novanÃ­ a realizÃ¡ciÃ­ operÃ¡ciÃ­ majÃº za tieto operÃ¡cie rÃ´zne zodpovednosti a inÃ©. 2. Objekty â operÃ¡cie sa tÃ½kajÃº objektov (naprÃ­klad vÃ½roba vÃ½robkov), pouÅ¾Ã­vajÃº sa pri nich rÃ´zne zariadenia a inÃ©. 3. ZÃ¡vÃ¤zky â so zÃ¡vÃ¤zkami sa realizujÃº rÃ´zne operÃ¡cie: schvaÄ¾ovanie zÃ¡vÃ¤zkov, plnenie zÃ¡vÃ¤zkov, zmena zÃ¡vÃ¤zkov a inÃ©. OperÃ¡cia sa Äasto tÃ½ka jednÃ©ho ÃºÄastnÃ­ka, ktorÃ½ ju realizuje alebo je za Åu zodpovednÃ½ (obr. 2.62). Ak je ÃºÄastnÃ­kov viac, Äasto vystupujÃº v rÃ´znych rolÃ¡ch. VÅ¡eobecnÃ© rieÅ¡enie poskytuje typovanie relÃ¡ciÃ­ (obr. 2.63)."
43,314,0.574,Objektovo orientovanÃ© programovanie v C++,"V tomto okamihu sa musÃ­ program rozhodnÃºÅ¥, ktorÃº z dvoch verziÃ­ mÃ¡ spustiÅ¥. Na zÃ¡klade argumentu, ktorÃ½ sme dodali, to vÅ¡ak nie je moÅ¾nÃ© â nie je jasnÃ©, Äi je uvedenÃ© ÄÃ­slo typu ï¬oat alebo double. V tomto prÃ­pade je moÅ¾nÃ©, Å¾e program prejde kompilÃ¡ciou a kompilÃ¡tor vyberie niektorÃº z verziÃ­. Nie je to vÅ¡ak zaruÄenÃ© pri vÅ¡etkÃ½ch kompilÃ¡toroch a vo vÅ¡etkÃ½ch podobnÃ½ch prÃ­padoch, preto by sme sa mali takejto situÃ¡cii radÅ¡ej vyhnÃºÅ¥. Ako druhÃ½ prÃ­klad skÃºsme vytvoriÅ¥ dve verzie funkcie na poÄÃ­tanie absolÃºtnej hodnoty ÄÃ­sla typu int. PrvÃ¡ verzia absolÃºtnu hodnotu ÄÃ­sla len vypoÄÃ­ta a vrÃ¡ti, druhÃ¡ verzia zadanÃ© ÄÃ­slo nahradÃ­ jeho absolÃºtnou hodnotou."
135,264,0.574,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.7 ArchitektÃºry sÃºbeÅ¾nÃ©ho softvÃ©ru RÃ´zne architektÃºry sÃº aplikovatenÃ© na rozlinÃ© triedy problÃ©mov. NiektorÃ© problÃ©my, i uÅ¾ z hadiska svojej povahy alebo z dÃ´vodov vyplÃ½vajÃºcich z prostredia, do ktorÃ©ho budÃº nasadenÃ©, sÃº vhodnÃ½mi kandidÃ¡tmi na sÃºbeÅ¾nÃ© spracovanie vo viacerÃ½ch vlÃ¡knach i procesoch."
369,15,0.574,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ArchitektÃºra softvÃ©rovÃ©ho systÃ©mu Pojem architektÃºra softvÃ©rovÃ©ho systÃ©mu patrÃ­ medzi najÅ¥aÅ¾Å¡ie definovateÄ¾nÃ© pojmy v informatike. UvedenÃ½ pojem vznikol prenesenÃ­m zo stavebnÃ­ctva, kde je architektÃºra chÃ¡panÃ¡ ako umenie esteticky a ÃºÄelne navrhovaÅ¥ budovy a ich sÃºbory (obytnÃ©, administratÃ­vne a inÃ©). Existuje mnoho definÃ­ciÃ­ tohto pojmu pre oblasÅ¥ softvÃ©rovÃ½ch systÃ©mov: od jednoduchÃ½ch aÅ¾ po komplexnÃ©. Medzi tie najjednoduchÅ¡ie patrÃ­ naprÃ­klad definÃ­cia z [Allen 1997], ktorÃ¡ hovorÃ­, Å¾e âsoftvÃ©rovÃ¡ architektÃºra poskytuje model Å¡trukturÃ¡lnych vlastnostÃ­ systÃ©mu, ktorÃ© sÃº veÄ¾kej granularityâ. Azda najlepÅ¡ia definÃ­cia pojmu softvÃ©rovÃ¡ architektÃºra pochÃ¡dza z InÅ¡titÃºtu softvÃ©rovÃ©ho inÅ¾inierstva (Software Engineering Institute, SEI) pri Carnegie-Mellon univerzite v Pittsburgu [Rozanski+ 2008]:"
393,7,0.574,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"maÄnÃ© systÃ©my majÃº vÄaka moÅ¾nostiam, ktorÃ© poskytuje naprogramovanÃ½ poÄÃ­taÄ, vÃ½hody, ktorÃ© sa ruÄnÃ½m spracovanÃ­m nedajÃº dosiahnuÅ¥. Toto je sÃºÄasne aj argumentom pre Ãºzke prepojenie vÃ½skumu v oboch oblastiach â ako softvÃ©rovÃ©ho inÅ¾inierstva, tak aj informaÄnÃ½ch systÃ©mov. Å tÃºdie sÃº vÃ½sledkom prÃ¡ce doktorandov v rÃ¡mci ich doktorandskÃ©ho Å¡tÃºdia. MoÅ¾no nezaÅ¡kodÃ­ pripomenÃºÅ¥, Å¾e doktorandskÃ© Å¡tÃºdium sa konÃ¡ pod vedenÃ­m Å¡koliteÄ¾a. Na kaÅ¾dej Å¡tÃºdii mÃ¡ preto podiel aj prÃ­sluÅ¡nÃ½ Å¡koliteÄ¾. Napriek tomu vÅ¡ak povaÅ¾ujeme za korektnÃ©, aby sme oznaÄili ako jedinÃ½ch autorov jednotlivÃ½ch Å¡tÃºdiÃ­ doktorandov, ktorÃ­ im dali pÃ­somnÃº podobu a ktorÃ­ ich predloÅ¾ili a ÃºspeÅ¡ne obhÃ¡jili ako pÃ­somnÃº ÄasÅ¥ svojej dizertaÄnej skÃºÅ¡ky. Autori sa podieÄ¾ali na jednotlivÃ½ch kapitolÃ¡ch takto: Â Modelovanie pouÅ¾Ã­vateÄ¾a v aplikÃ¡ciÃ¡ch opierajÃºcich sa o web: Anton Andrejko (Å¡koliteÄ¾ prof. MÃ¡ria BielikovÃ¡) Â ParalelnÃ¡ a distribuovanÃ¡ simulÃ¡cia systÃ©mov s diskrÃ©tnymi udalosÅ¥ami: Viliam SolÄÃ¡ny (Å¡koliteÄ¾: prof. JiÅÃ­ Å afaÅÃ­k) Â Å truktÃºry komunÃ­t v sieÅ¥ach: GyÃ¶rgy Frivolt (Å¡koliteÄ¾ prof. MÃ¡ria BielikovÃ¡) Â ZnovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov na Ãºrovni zdrojovÃ©ho kÃ³du: Jaroslav JakubÃ­k (Å¡koliteÄ¾ prof. Pavol NÃ¡vrat) DÃºfame, Å¾e tÃ¡to kniÅ¾ka poslÃºÅ¾i zÃ¡ujemcom o poznanie programovÃ½ch a informaÄnÃ½ch systÃ©mov. UmoÅ¾Åuje spoloÄne vyuÅ¾iÅ¥ vÃ½sledky Å¡tÃºdia v tejto oblasti. TeÅ¡Ã­me sa na prÃ­padnÃ© odozvy alebo pripomienky."
43,136,0.573,Objektovo orientovanÃ© programovanie v C++,"PrÃ­klad. V sÃºbore SkupinaF.txt je uloÅ¾enÃ½ zoznam vÃ½sledkov zÃ¡pasov v skupine F majstrovstiev sveta vo futbale. Pre kaÅ¾dÃ½ zÃ¡pas sÃº najskÃ´r uloÅ¾enÃ© nÃ¡zvy krajÃ­n vo forme Krajina1-Krajina2, v ÄalÅ¡om riadku dÃ¡tum, kedy zÃ¡pas prebehol, v Å¡tandardnej forme a v nasledujÃºcom riadku vÃ½sledok zÃ¡pasu. Vytvorme program, ktorÃ½ naÄÃ­ta Ãºdaje zo sÃºboru a vypÃ­Å¡e ich na obrazovku do tabuÄ¾ky, v ktorej budÃº Ãºdaje zarovnanÃ© zÄ¾ava. TabuÄ¾ka bude maÅ¥ aj okraje a stÄºpce oddelenÃ© zvislÃ½mi Äiarami. NaÅ¡a tabuÄ¾ka bude maÅ¥ tri stÄºpce a Å¡esÅ¥ riadkov, keÄÅ¾e medzi Å¡tyrmi muÅ¾stvami prebehne Å¡esÅ¥ zÃ¡pasov. PrvÃ½ stÄºpec bude maÅ¥ Å¡Ã­rku 25, druhÃ½ 12 a tretÃ­ 7. Na zarovnanie zÄ¾ava pouÅ¾ijeme manipulÃ¡tor left. ZvislÃ© Äiary vytvorÃ­me pomocou znaku â|â a vodorovnÃ© pomocou znaku â-â, ktorÃ½ vypÃ­Å¡eme 48-krÃ¡t, Äo je celkovÃ¡ Å¡Ã­rka tabuÄ¾ky. To dosiahneme tak, Å¾e nastavÃ­me vypÄºÅacÃ­ znak na â-â a Å¡Ã­rku vypisovanÃ©ho argumentu na 48. Potom staÄÃ­ znak â-â vypÃ­saÅ¥ len raz. #include <iostream> #include <iomanip> #include <fstream> using namespace std; int main() string zapas, datum, skore; cout<<setfill(â-â)<<setw(48)<<""-""<<endl; cout<<setfill(â â)<<left<<""|""<<setw(25); cout<<""Zapas""<<""|""<<setw(12)<<""Datum""<<""|""<<setw(7)<<""Skore""<<""|""; cout<<endl; cout<<setfill(â-â)<<setw(48)<<""-""<<endl; fstream subor(""SkupinaF.txt"", fstream::in); for (int i=1;i<=6;i++) getline(subor,zapas); getline(subor,datum); getline(subor,skore); cout<<setfill(â â)<<""|""<<setw(25); cout<<zapas<<""|""<<setw(12)<<datum<<""|""<<setw(7)<<skore<<""|""<<endl; cout<<setfill(â-â)<<setw(48)<<""-""<<endl; subor.close();"
240,214,0.573,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Na zaÄiatok (riadok 2) uvaÅ¾ujeme len jedno ÄÃ­slo a, ktorÃ© je zÃ¡roveÅ aj minimum. UvaÅ¾ujme, teraz ÄalÅ¡ie ÄÃ­slo b (riadky 3-4), ak doterajÅ¡ie minimum (a) je vÃ¤ÄÅ¡ie ako novÃ© ÄÃ­slo (b), uloÅ¾Ã­me si novÃ© minimum (b). PokraÄujeme s ÄalÅ¡Ã­m ÄÃ­slo (c) podobne (riadky 6-7), nakoniec funkcia vrÃ¡ti hodnotu minima (a). Tento postup pouÅ¾ije sÃ­ce"
130,138,0.573,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"SÃºÄasti Klient â prÃ­klad klienta pristupujÃºceho (vyuÅ¾Ã­vajÃºceho) k biznis sluÅ¾bÃ¡m. TÃ½mto klientom mÃ´Å¾e byÅ¥ i vyÅ¡Å¡ia vrstva aplikÃ¡cie, napr. prezentaÄnÃ¡ vrstva. KlientBiznisAbstrakt â samotnÃ¡ klientska abstrakcia biznis sluÅ¾by. Kontroluje a chrÃ¡ni biznis vrstvu pred klientmi. Pre lokalizÃ¡ciu samotnej sluÅ¾by v zloÅ¾itej spleti biznis logiky mÃ´Å¾e, ale nemusÃ­, vyuÅ¾Ã­vaÅ¥ sluÅ¾by LokalizaÄnÃ¡SluÅ¾ba. BiznisSluÅ¾ba â konkrÃ©tna biznis sluÅ¾ba, resp. systÃ©m biznis sluÅ¾ieb, ktorÃ© majÃº byÅ¥ sprÃ­stupnenÃ© klientom. LokalizaÄnÃ¡SluÅ¾ba â nepovinnÃ¡ sÃºÄasÅ¥ vzoru umoÅ¾ÅujÃºca oddeliÅ¥ a centralizovaÅ¥ mechanizmy lokalizÃ¡cie biznis sluÅ¾ieb. VyuÅ¾Ã­va sa pri distribuovanej realizÃ¡ciÃ­ biznis logiky."
240,309,0.573,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"znakov z jednÃ©ho reÅ¥azca do druhÃ©ho. Funkcia strcat() na pripojenie znakov reÅ¥azca na koniec druhÃ©ho reÅ¥azca. Funkcia strtok() na rozdeÄ¾ovanie reÅ¥azca podÄ¾a rozdeÄ¾ovaÄa (reÅ¥azec) na menÅ¡ie Äasti. Celkovo pri pouÅ¾itÃ­ reÅ¥azcovÃ½ch funkciÃ­ je absolÃºtne nevyhnutnÃ© zaruÄiÅ¥, Å¾e spracovanÃ© reÅ¥azce sÃº ukonÄenÃ© 0 a majÃº dostatoÄnÃº maximÃ¡lnu dÄºÅ¾ku na vykonanie operÃ¡cie (napr. na nakopÃ­rovanie alebo pripojenie znakov z inÃ©ho reÅ¥azca). NedostatoÄnÃ¡ dÄºÅ¾ka polÃ­ (reprezentujÃºcich reÅ¥azce, ktorÃ© vstupujÃº do tÃ½chto funkciÃ­) je zdrojom veÄ¾kÃ©ho mnoÅ¾stva bezpeÄnostnÃ½ch chÃ½b v softvÃ©rovÃ½ch systÃ©moch. Ãloha 4-9 UrÄite vÃ½stup, ktorÃ½ vypÃ­Å¡e nasledujÃºci program. Na pomoc si zoberte aj tabuÄ¾ku ASCII kÃ³dov znakov."
369,347,0.573,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"TechnologickÃ½ proces Pri komplexnejÅ¡Ã­ch zÃ¡kazkÃ¡ch sa individuÃ¡lne riadi proces ich realizÃ¡cie. Tento proces sa zvyÄajne odvÃ­ja od pouÅ¾itej technolÃ³gie. Proces (obr. 6.6) pozostÃ¡va z postupnosti ÄinnostÃ­ (vÅ¡eobecnÃ½ vzor z obr. 2.58 alebo obr. 2.59), resp. Ãºloh4. ÄinnosÅ¥, resp. Ãºloha sa mÃ´Å¾u ÄleniÅ¥ na detailnejÅ¡ie Äinnosti, resp. Ãºlohy (vzor z obr. 2.54 alebo obr. 2.55). VÃ½sledkom Äinnosti/Ãºlohy mÃ´Å¾e byÅ¥ parciÃ¡lny alebo vÃ½slednÃ½ vÃ½robok. Äinnosti/Ãºlohy sa zÃºÄastÅujÃº pracovnÃ­ci v urÄitÃ½ch rolÃ¡ch (vzor z obr. 2.63). HlavnÃ½mi rolami sÃº zadÃ¡vateÄ¾ Äinnosti/Ãºlohy a zodpovednÃ½ za jej realizÃ¡ciu. Na Ãºrovni ÄinnostÃ­/Ãºloh moÅ¾no evidovaÅ¥ vyuÅ¾itie zariadenÃ­ a pouÅ¾itie zdrojov (aplikÃ¡cie vzoru z obr. 2.65)."
393,237,0.573,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"SpomenutÃ© algoritmy (HITS, komunity) predpokladajÃº vzÅ¥ah medzi entitami jednÃ©ho typu. OtÃ¡zka do budÃºcnosti je v tom, ako kombinovaÅ¥ viacerÃ© typy entÃ­t. FiremnÃ© aplikÃ¡cie manaÅ¾mentu znalostÃ­ vyÅ¾adujÃº, aby systÃ©m kombinoval implicitnÃ© odkazy (dvaja pouÅ¾Ã­vatelia pozerajÃº ten istÃ½ dokument) a explicitnÃ© odkazy (dvaja pouÅ¾Ã­vatelia v tej istej pracovnej skupine pravdepodobne sa budÃº zaujÃ­maÅ¥ o tÃº istÃº informÃ¡ciu). OtÃ¡zka do budÃºcnosti je v tom, ako skombinovaÅ¥ tieto dva prÃ­stupy. ÄalÅ¡Ã­ smer vÃ½skumu je informaÄnÃ¡ bezpeÄnosÅ¥. InformaÄnÃ¡ bezpeÄnosÅ¥ je Å¡irÅ¡Ã­ pojem ako dÃ¡tovÃ¡ bezpeÄnosÅ¥. Ako sa menÃ­ sprÃ¡vanie pouÅ¾Ã­vateÄ¾a, keÄ poskytuje informÃ¡cie o sebe do systÃ©mu? VyhÄ¾adÃ¡vaÄe sa dajÃº vylepÅ¡iÅ¥ tak, Å¾e si modelujÃº pouÅ¾Ã­vateÄ¾a, jeho zÃ¡ujmy, poÅ¾iadavky na vyhÄ¾adÃ¡vanie. Ako to mÃ´Å¾e prospieÅ¥ ostatnÃ½m pouÅ¾Ã­vateÄ¾om? InformaÄnÃ¡ bezpeÄnosÅ¥ vo firemnÃ½ch systÃ©moch zahÅÅa aj zoznam prÃ­stupovÃ½ch prÃ¡v pouÅ¾Ã­vateÄ¾ov alebo skupÃ­n pouÅ¾Ã­vateÄ¾ov k dokumentom."
130,118,0.573,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory Interpret mÃ´Å¾e spolupracovaÅ¥ so vzormi ZloÅ¾enina, MuÅ¡ia vÃ¡ha, IterÃ¡tor a NÃ¡vÅ¡tevnÃ­k. AbstraktnÃ½ syntaktickÃ½ strom je inÅ¡tanciou vzoru ZloÅ¾enina, vzor MuÅ¡ia vÃ¡ha mÃ¡ uplatnenie pri zdieÄ¾anÃ­ koncovÃ½ch symbolov a vzor NÃ¡vÅ¡tevnÃ­k je moÅ¾nÃ© pouÅ¾iÅ¥ k udrÅ¾iavaniu sprÃ¡vania v kaÅ¾dom uzle abstraktnÃ©ho syntaktickÃ©ho stromu v jednej triede."
240,297,0.572,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"poÄ¾a navrhnite aj rekurzÃ­vne rieÅ¡enie bez pouÅ¾itia cyklov. DoplÅujÃºca Ãºloha: Modifikujte rieÅ¡enie tak, aby pracovalo pre inÃ© povolenÃ© Å¥ahy (poÄty kamienkov, ktorÃ© je dovolenÃ© z kÃ´pky odobraÅ¥ v jednom Å¥ahu): napr. 3, 5, 7 alebo 9 kamienkov. Ãloha 4-5 NapÃ­Å¡te zdrojovÃ½ kÃ³d funkcie vypis_histogram(), ktorÃ¡ dostane pole celÃ½ch ÄÃ­sel reprezentujÃºcich znÃ¡mky, ktorÃ© Å¡tudenti zÃ­skali v predmete a na vÃ½stup vypÃ­Å¡e histogram zÃ­skanÃ½ch znÃ¡mok a dosiahnutÃ© poÄty do zÃ¡tvorky podÄ¾a ukÃ¡Å¾ky niÅ¾Å¡ie. KaÅ¾dÃ¡ znÃ¡mka vo vstupnom poli znamky[] je vo vÃ½slednom histograme reprezentovanÃ¡ jednou hviezdiÄkou. Vstup: znamky[] = { 3,1,2,3,5,2,1,2,2,1,2,3,2,3,5,2,3,1,2,2,3,5 } VÃ½stup:"
43,377,0.572,Objektovo orientovanÃ© programovanie v C++,"RovnakÃ½ prÃ­kaz je aj prvÃ½m prÃ­kazom konÅ¡truktora triedy vydavatelstvo. Ak sa teda rozhodneme v konÅ¡truktore triedy vydavatelstvo pouÅ¾iÅ¥ konÅ¡truktor triedy ï¬rma s parametrami, dÃ´jde k opakovaniu tohto prÃ­kazu, Äo nie je prÃ¡ve najefektÃ­vnejÅ¡Ã­ nÃ¡vrh programu. VhodnÃ© by bolo vÅ¡etky prÃ­kazy uvedenÃ© v konÅ¡truktore triedy ï¬rma z konÅ¡truktora triedy vydavatelstvo vynechaÅ¥. TÃ½m sa zaruÄÃ­, Å¾e kaÅ¾dÃ½ prÃ­kaz sa vykonÃ¡ len raz a takisto sa skrÃ¡ti dÄºÅ¾ka kÃ³du, Äo je jeden z naÅ¡ich cieÄ¾ov. NovÃ¡ podoba konÅ¡truktora triedy vydavatelstvo by teda bola takÃ¡to vydavatelstvo::vydavatelstvo (string n,string s,int h m,int h v,string t d,float c d,bool p) :firma(n,s,h m,h v) typ disku=t d; cena disku=c d; potlac=p;"
393,221,0.572,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Medze redukcie latencie PredprÃ­prava mÃ¡ znaÄnÃ½ potenciÃ¡l na znÃ­Å¾enie oneskorenia, ktorÃ© vnÃ­ma zÃ¡kaznÃ­k. MnoÅ¾stvo Å¡tÃºdiÃ­ skÃºmalo potenciÃ¡lne vylepÅ¡enie webu, ktorÃ© sa mÃ´Å¾e dosiahnuÅ¥ prÃ¡ve predprÃ­pravou. Oneskorenia pri prÃ­stupe k webovÃ½m strÃ¡nkam mÃ´Å¾eme rozdeliÅ¥ na internÃ© oneskorenia na lokÃ¡lnych sieÅ¥ach a externÃ© oneskorenia na globÃ¡lnych sieÅ¥ach. RÃ´zne Å¡tÃºdie preukÃ¡zali, Å¾e externÃ© oneskorenia tvoria viac ako 88% vÅ¡etkÃ½ch oneskorenÃ­ v rÃ¡mci siete. Tieto Å¡tÃºdie poukÃ¡zali aj na niektorÃ© ÄalÅ¡ie fakty. NaprÃ­klad pasÃ­vna predprÃ­prava s nelimitovanÃ½m diskovÃ½m priestorom pre predpripravenÃ© dÃ¡ta mÃ´Å¾e redukovaÅ¥ oneskorenie pribliÅ¾ne o 26%. Na druhej strane, predprÃ­prava zaloÅ¾enÃ¡ na lokÃ¡lnych informÃ¡ciÃ¡ch zÃ­skava 41% pri zniÅ¾ovanÃ­ oneskorenia. PridanÃ­m hodnotenia zo strany servera mÃ´Å¾eme znÃ­Å¾iÅ¥ oneskorenie aÅ¾ o 57%."
240,127,0.572,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"zistÃ­me nasledovnÃ½m prÃ­kazom: printf(""%lu\n"", (unsigned long)-1); Zamyslite sa nad tÃ½m, preÄo to funguje. Pri vÅ¡etkÃ½ch dÃ¡tovÃ½ch typoch bez znamienka (unsigned) platÃ­, Å¾e keÄ najvÃ¤ÄÅ¡ie ÄÃ­slo, ktorÃ© dokÃ¡Å¾u reprezentovaÅ¥ zvÃ½Å¡ime o 1, tak sa dostaneme naspÃ¤Å¥ na 0 (najmenÅ¡ie ÄÃ­slo). V naÅ¡om prÃ­pade to vyuÅ¾ijeme âv opaÄnom smereâ, teda zoberieme najmenÅ¡ie ÄÃ­slo, ktorÃ© dokÃ¡Å¾u reprezentovaÅ¥ (0), odpoÄÃ­tame 1, ÄÃ­m sa dostaneme k najvÃ¤ÄÅ¡iemu ÄÃ­slu. DÃ´leÅ¾itÃ© upozornenie: V prÃ­pade typov so znamienkom (signed) je takÃ©to preteÄenie (najvÃ¤ÄÅ¡ia hodnota + 1) alebo podteÄenie (najmenÅ¡ia hodnota â 1)"
135,10,0.572,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"a procesy podporenÃ© poÃ­taom alebo nie, oraz viac sa zvÃ¤Å¡uje praktickÃ½ vÃ½znam informanÃ½ch systÃ©mov, ktorÃ© sÃº realizovanÃ© pomocou programovÃ½ch systÃ©mov (a tie samozrejme pomocou poÃ­taovÃ½ch systÃ©mov alebo inÃ½ch technickÃ½ch systÃ©mov, zah ajÃºcich poÃ­tae). Je to najmÃ¤ preto, Å¾e softvÃ©rovo podporenÃ© informanÃ© systÃ©my majÃº vaka moÅ¾nostiam, ktorÃ© poskytuje naprogramovanÃ½ poÃ­ta, vÃ½hody, ktorÃ© sa runÃ½m spracovanÃ­m nedajÃº dosiahnu. Toto je sÃºasne aj argumentom pre Ãºzke prepojenie vÃ½skumu v oboch oblastiach â ako softvÃ©rovÃ©ho inÅ¾inierstva, tak aj informanÃ½ch systÃ©mov. Å tÃºdie sÃº vÃ½sledkom prÃ¡ce doktorandov v rÃ¡mci ich doktorandskÃ©ho Å¡tÃºdia. MoÅ¾no nezaÅ¡kodÃ­ pripomenÃº, Å¾e doktorandskÃ© Å¡tÃºdium sa konÃ¡ pod vedenÃ­m Å¡kolitea. Na kaÅ¾dej Å¡tÃºdii mÃ¡ preto podiel aj prÃ­sluÅ¡nÃ½ Å¡kolite. Napriek tomu vÅ¡ak povaÅ¾ujeme za korektnÃ©, aby sme oznaili ako jedinÃ½ch autorov jednotlivÃ½ch Å¡tÃºdiÃ­ doktorandov. Oni im dali pÃ­somnÃº podobu, predloÅ¾ili a aj ÃºspeÅ¡ne obhÃ¡jili ako pÃ­somnÃº as svojej dizertanej skÃºÅ¡ky. Autori sa podieali na jednotlivÃ½ch kapitolÃ¡ch takto:"
236,46,0.572,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"VÃ¤ÄÅ¡inou sa knihy tlaÄia tak, Å¾e kaÅ¾dÃ½ riadok mÃ¡ rovnakÃº dÄºÅ¾ku. LATEX lÃ¡me riadky a vkladÃ¡ medzery medzi slovÃ¡ tak, aby dosiahol optimÃ¡lny vzhÄ¾ad celÃ©ho odseku. V prÃ­pade, Å¾e je to nutnÃ©, slovÃ¡, ktorÃ© sa nezmestia pohodlne do riadku, rozdelÃ­. Od druhu dokumentu zÃ¡visÃ­, ako sÃº odseky sÃ¡dzanÃ©. NormÃ¡lne je prvÃ½ riadok odseku pevne stanovenÃ½ a medzi dvoma odsekmi nie je Å¾iadne voÄ¾nÃ© miesto. Viac informÃ¡ciÃ­ nÃ¡jdete v kapitole 5.3.2. V Å¡peciÃ¡lnych prÃ­padoch mÃ´Å¾eme prikÃ¡zaÅ¥ LATEXu, aby zlomil riadok (ukonÄil ho) v danom mieste: \\ alebo \newline"
94,180,0.571,Sprievodca svetom vedeckÃ©ho publikovania,"ObrÃ¡zok 7.2 MetÃ³dy hodnotenia VaV podÄ¾a pozÃ­cie hodnotiteÄ¾a v sektore VaV. KlastrovÃ¡ analÃ½za je analytickÃ¡ metÃ³da, ktorÃ¡ heterogÃ©nne zdrojovÃ© dÃ¡ta podÄ¾a zvolenÃ½ch charakteristÃ­k zdruÅ¾Ã­ do homogÃ©nnych dÃ¡tovÃ½ch mnoÅ¾Ã­n (klastrov). Z vyÅ¡Å¡ie uvedenÃ©ho vyplÃ½va, Å¾e bibliometria dnes predstavuje na Slovensku kÄ¾ÃºÄovÃº metÃ³du pre hodnotenie vedecko-vÃ½skumnej Äinnosti. Bibliometria je disciplÃ­na, ktorÃ¡ prostriedkami Å¡tatistiky kvantitatÃ­vne analyzuje tlaÄenÃ© i elektronickÃ© publikaÄnÃ© vÃ½stupy z vedeckej Äinnosti (knihy, ÄasopiseckÃ© ÄlÃ¡nky, prÃ­spevky v konfereÄnÃ½ch zbornÃ­koch). NachÃ¡dza sa na prieniku informaÄnej vedy a matematickÃ½ch a Å¡tatistickÃ½ch metÃ³d. UmoÅ¾Åuje hodnotenie rÃ´znych vednÃ½ch odborov, krajÃ­n, autorov, Äasopisov â najrÃ´znejÅ¡Ã­ch entÃ­t a javov"
111,115,0.571,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"SpÃ´soby, akÃ½mi si vÃ½vojÃ¡ri a dizajnÃ©ri produktov predstavujÃº, Å¾e sa bude ich aplikÃ¡cia pouÅ¾Ã­vaÅ¥ a spÃ´soby, akÃ½mi s nÃ­m pouÅ¾Ã­vatelia nÃ¡sledne skutoÄne pracujÃº, sa niekedy (a aj dosÅ¥ Äasto) lÃ­Å¡ia. NahrÃ¡vanie sedenÃ­ (SR) ako metÃ³du v oblasti UX mÃ´Å¾ete pouÅ¾iÅ¥ na zÃ­skavanie poznatkov o pouÅ¾Ã­vateÄ¾skom zÃ¡Å¾itku od skutoÄnÃ½ch pouÅ¾Ã­vateÄ¾ov (vaÅ¡ich nÃ¡vÅ¡tevnÃ­kov), a to nenÃ¡padne a na vÅ¡etkÃ½ch typoch zariadenÃ­. V nahrÃ¡vkach uvidÃ­te podrobne (na Ãºrovni pohybov kurzora) ako interagujÃº s vaÅ¡ou webovou strÃ¡nkou, uvidÃ­te pohÄ¾ad na vÃ¡Å¡ produkt ich oÄami. Je to veÄ¾mi mocnÃ½ nÃ¡stroj. 9.3.2"
76,352,0.571,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ako vidÃ­me, znÃ­Å¾ili sme sÃ­ce pravdepodobnosÅ¥ chyby 2. druhu (aj keÄ nie dostatoÄne), ale dÃ´sledkom je zvÃ½Å¡enie pravdepodobnosti chyby 1. druhu. Je zrejmÃ©, Å¾e zlepÅ¡enie testu dosiahneme len tak, keÄ zvÃ½Å¡ime rozsah nÃ¡hodnÃ©ho vÃ½beru (Ãºloha 8.5.1). Ak rozsah nÃ¡hodnÃ©ho vÃ½beru je danÃ½, pevnÃ½, tak pravdepodobnosti chÃ½b 1. druhu a 2. druhu sa chovajÃº ako âspojenÃ© nÃ¡dobyâ. ZmenÅ¡enie jednej z nich mÃ¡ za nÃ¡sledok zvÃ¤ÄÅ¡enie druhej (v rÃ¡mci prÃ­kladu 8.1.2, resp. tejto poznÃ¡mky, zmenÅ¡enie ï¢ z 0.936 na 0.648, malo za nÃ¡sledok nÃ¡rast ï¡ z 0.008 na 0.104). Treba sa rozhodnÃºÅ¥, Äo zvolÃ­me za kritÃ©rium optimality testu. V naÅ¡ej situÃ¡cii je celkom logickÃ©, snaÅ¾iÅ¥ sa minimalizovaÅ¥ sÃºÄet pravdepodobnostÃ­ oboch chÃ½b, t. j. nÃ¡jsÅ¥ kritickÃº oblasÅ¥ tak, aby sÃºÄet ï¡ + ï¢ bol Äo najmenÅ¡Ã­. V takom prÃ­pade test zaloÅ¾enÃ½ na kritickej oblasti L je lepÅ¡Ã­, ako test zaloÅ¾enÃ½ na oblasti K ( pretoÅ¾e 0.104 + 0.648 < 0.008 + 0.936 ). Vezmime na vedomie, Å¾e v reÃ¡lnom testovanÃ­ ide o testy, v ktorÃ½ch aspoÅ jedna hypotÃ©za je zloÅ¾enou a ako ukÃ¡Å¾eme v ÄalÅ¡om, postavenie hypotÃ©z nie je takÃ© symetrickÃ© ako v naÅ¡ej (elementÃ¡rnej) situÃ¡cii. Preto sa prijala inÃ¡ koncepcia optimality rozhodovania. Å tandardnÃ½ test prebieha tak, Å¾e stanovÃ­me hranicu ï¡ pre pravdepodobnosÅ¥ chyby 1. druhu a spomedzi vÅ¡etkÃ½ch oblastÃ­ veÄ¾kosti nanajvÃ½Å¡ ï¡ vyberieme tÃº, pri ktorej mÃ¡ test najmenÅ¡iu pravdepodobnosÅ¥ chyby 2. druhu (mÃ¡ teda najvÃ¤ÄÅ¡iu silu). TakÃ©to uvaÅ¾ovanie vedie k pojmu najsilnejÅ¡ej kritickej oblasti veÄ¾kosti ï¡, ktorÃ½ je vÅ¡ak uÅ¾ mimo rÃ¡mca tohoto textu."
59,319,0.571,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"KombinÃ¡cia sÃºÄtovej a asociatÃ­vnej pamÃ¤ti UkÃ¡Å¾eme, Å¾e aj kombinÃ¡cia sÃºÄtovej a asociatÃ­vnej pamÃ¤ti je spoÄ¾ahlivo rekognoskovateÄ¾nÃ¡, Äo sa ukÃ¡Å¾e v naÅ¡ich ÄalÅ¡Ã­ch aplikÃ¡ciÃ¡ch ako vÃ½hodnÃ¡ Ärta holografickej reprezentÃ¡cie. Predpokladajme, Å¾e mÃ¡me 10 konceptuÃ¡lnych vektorov a, b, c, d, ..., i, j, pomocou prvÃ½ch Å¡tyroch zostrojÃ­me kombinÃ¡ciu sÃºÄtovej a asociatÃ­vnej pamÃ¤ti takto (6.30) t ï½ a ï« b ï« a ïc ï« b ïd Pomocou procedÃºry âÄisteniaâ zÃ­skame, Å¾e vektor t obsahuje ako zloÅ¾ky vektory a a b, ktorÃ© v nÃ¡slednom kroku odstrÃ¡nim z vektora t (6.31) tï¢ ï½ t ï­ a ï­ b ï½ a ï c ï« b ï d Z odstrÃ¡nenej aditÃ­vnej Äasti pouÅ¾itÃ­m techniky rekognoskÃ¡cia asociatÃ­vnej pamÃ¤ti zistÃ­me, Å¾e obsahuje dve dvojice a c a b d , pozri Obr. 6.8."
76,247,0.571,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"PodÄ¾a bodu 5 z nezÃ¡vislosti , vyplÃ½va nekorelovanosÅ¥ (to sme urobili v dÃ´kaze bodu 5 vety 4.2.5). OpaÄnÃ¡ imlikÃ¡cia (vo vÅ¡eobecnosti) neplatÃ­, ako ukazuje nasledujÃºci prÃ­klad. 4.2.18 PrÃ­klad. Nech ~ R{ -1, 0, 1 }, = a uvaÅ¾ujme o nÃ¡hodnom vektore ( ). Äo je moÅ¾nÃ© povedaÅ¥ o zÃ¡vislosti zloÅ¾iek vektora, o kovariancii a o korelaÄnom koeficiente? RieÅ¡enie. Aj keÄ je vektor ( ) umelo vytvorenÃ½, je to nÃ¡hodnÃ½ vektor a Ä¾ahko nÃ¡jdeme tabuÄ¾ku jeho pravdepodobnostnej funkcie:"
76,75,0.571,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.5.8 PrÃ­klad. UvaÅ¾ujme dve Å¡katule z prÃ­kladu 1.5.3, teda Ä¾avÃ¡ obsahuje 3 biele a 2 Äierne, pravÃ¡ jednu bielu a Å¡tyri Äierne loptiÄky. NÃ¡hodnÃ½ pokus spoÄÃ­va v nÃ¡hodnej voÄ¾be Å¡katule a nÃ¡hodnom Å¥ahanÃ­ loptiÄky z nej. K voÄ¾be Å¡katule pouÅ¾ijeme hraciu kocku. Ak na kocke padne menej ako 5, volÃ­me Ä¾avÃº Å¡katuÄ¾u, inak pravÃº. S akou pravdepodobnosÅ¥ou bude a) vytiahnutÃ¡ loptiÄka biela a bude Å¥ahanÃ¡ z Ä¾avej Å¡katule? b) vytiahnutÃ¡ loptiÄka Äierna a bude Å¥ahanÃ¡ z pravej Å¡katule? c) vytiahnutÃ¡ loptiÄka biela? RieÅ¡enie. OznaÄme â loptiÄku Å¥ahÃ¡me z Ä¾avej Å¡katule, â loptiÄku Å¥ahÃ¡me z pravej Å¡katule. Nech B je udalosÅ¥ â vytiahnutÃ¡ je biela, resp. C â vytiahnutÃ¡ je Äierna. Na zodpovedanie prvÃ½ch dvoch otÃ¡zok niÄ novÃ© nepotrebujeme. Teda postupujeme ako doteraz. a) P(Bï"
122,87,0.571,Modelovanie softvÃ©ru,"5.4 Komponenty a kompozitnÃ¡ Å¡truktÃºra BalÃ­ky by mohli poslÃºÅ¾iÅ¥ na vyjadrenie vysokoÃºrovÅovej Å¡truktÃºry systÃ©mu bez toho, aby sa muselo Ã­sÅ¥ aÅ¾ na ÃºroveÅ tried, a niekedy sa takto aj pouÅ¾Ã­vajÃº. ProblÃ©mom je, Å¾e balÃ­ky v UML predstavujÃº iba zoskupenia prvkov, a nie celky, ktorÃ© moÅ¾no pokladaÅ¥ za aktÃ­vne a vyjadrovaÅ¥ aj interakciu ich inÅ¡tanciÃ­. TaktieÅ¾, vnÃºtro balÃ­kov sÃº vÅ¾dy triedy a rozhrania, ktorÃ© zahÅÅa. NemÃ´Å¾eme ho skÃºmaÅ¥ na vyÅ¡Å¡ej Ãºrovni abstrakcie. UML za tÃ½mto ÃºÄelom ponÃºka komponenty a kompozitnÃº Å¡truktÃºru, ktorÃ© umoÅ¾ÅujÃº konceptuÃ¡lne uvaÅ¾ovaÅ¥ nad Å¡truktÃºrou bez viazania sa na presnÃ½ spÃ´sob implementÃ¡cie. V prvom priblÃ­Å¾enÃ­ je moÅ¾nÃ© proste vymenovaÅ¥ komponenty a naznaÄiÅ¥ ich prepojenia vo forme asociÃ¡ciÃ­, ako ukazuje obrÃ¡zok 5.21."
59,628,0.571,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 13.1. RÃ´zne typy pÃ­smena A [2], ktorÃ© v niektorÃ½ch prÃ­padoch len veÄ¾mi Å¥aÅ¾ko moÅ¾no identifikovaÅ¥ ako rovnakÃ© pÃ­smeno. Pre kaÅ¾dÃº dvojicu typov existuje homomorfnÃ© zobrazenie, ktorÃ© priradÃ­ vybranÃ© Ärty jednÃ©ho pÃ­smena na Ärty druhÃ©ho pÃ­smena. Ak poÄet tÃ½chto âpriradenÃ­â prekroÄÃ­ urÄitÃº prahovÃº hodnotu, mÃ´Å¾eme povedaÅ¥, Å¾e vybranÃ© typy sÃº analogickÃ©, reprezentujÃº rovnakÃ© pÃ­smeno A."
393,453,0.571,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Z teoretickÃ©ho pohÄ¾adu mÃ´Å¾eme hovoriÅ¥ o dvoch hlavnÃ½ch moÅ¾nostiach prÃ­stupu k pouÅ¾itiu vzorov. ProblÃ©m vÃ½beru konkrÃ©tneho prÃ­stupu je ale tieÅ¾ ovplyvnenÃ½ i mnoÅ¾inou vzorov, pre ten ktorÃ½ prÃ­stup v tej ktorej fÃ¡ze vÃ½voja softvÃ©ru. VÅ¡eobecne sa dÃ¡ povedaÅ¥, Å¾e nedogmatickÃ½ prÃ­stup je v zÃ¡sade pouÅ¾iteÄ¾nÃ½ v Ä¾ubovoÄ¾nej fÃ¡ze a Ãºrovni abstrakcie pouÅ¾itia vzorov. DogmatickÃ½ prÃ­stup vyÅ¾aduje k svojmu pouÅ¾itiu vÃ¤ÄÅ¡iu mnoÅ¾inu vzorov ako i formÃ¡lnejÅ¡iu definÃ­ciu samotnÃ½ch vzorov. V zÃ¡sade budeme v Äalej hovoriÅ¥ o nedogmatickom prÃ­stupe k vzorom, priÄom hlavnÃº snahu sÃºstredÃ­me na kombinÃ¡ciu tÃ½chto dvoch prÃ­stupov. UmoÅ¾niÅ¥ modifikovaÅ¥ to, Äo sa lÃ­Å¡i od inÅ¡tancie k inÅ¡tancii a umoÅ¾niÅ¥ znovupouÅ¾itie vÅ¡eobecnÃ½ch ÄastÃ­ vzorov."
190,83,0.57,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"majÃº naopak vÃ¤ÄÅ¡Ã­ prehÄ¾ad o reÃ¡lnom nasadenÃ­ aplikÃ¡cie a vedia, akÃ© moÅ¾nÃ© situÃ¡cie mÃ´Å¾u nastaÅ¥ pri jej pouÅ¾Ã­vanÃ­. Tieto rozdiely sa prejavujÃº v efektivite testov na Ãºrovni jednotiek softvÃ©ru (angl. unit testing), kde mÃ´Å¾e byÅ¥ znaÄnÃ½ rozdiel medzi testom pripravenÃ½m vÃ½vojÃ¡rom a testom od testera. Toto odliÅ¡nÃ© myslenie mÃ´Å¾e predstavovaÅ¥ bariÃ©ru v efektÃ­vnej komunikÃ¡cii vÃ½vojÃ¡rov a testerov. InÃ½m problÃ©mom zaradenÃ½m do tejto vrstvy je tzv. personalizovanie kÃ³du. VeÄ¾a vÃ½vojÃ¡rov berie osobne fakt, Å¾e niekto nÃ¡jde v ich kÃ³de chybu. Äasto si chyby odmietajÃº uznaÅ¥, hÄ¾adajÃº chybu prÃ¡ve v testerovi. Z Ä¾udskÃ©ho hÄ¾adiska na vzÅ¥ahy urÄite negatÃ­vne vplÃ½va aj to, Å¾e vÃ½vojÃ¡ri a testeri spolu komunikujÃº najmÃ¤ vtedy, keÄ tester vÃ½vojÃ¡rovi VeÄ¾a vÃ½vojÃ¡rov oznamuje chybu. To je pre vÃ½vojÃ¡ra dosÅ¥ neprÃ­jemnÃ¡ situÃ¡cia. Aj keÄ vÃ½vojÃ¡r berie osobne, chybu objektÃ­vne uznÃ¡, podvedome sa mu osoba testera spÃ¡ja iba keÄ niekto s neprÃ­jemnÃ½mi zÃ¡Å¾itkami. To mÃ´Å¾e viesÅ¥ k vybudovaniu negatÃ­vneho vzÅ¥ahu nÃ¡jde v ich k testerovi a moÅ¾nÃ½m veÄ¾mi vÃ¡Å¾nym konfliktom. ManaÅ¾Ã©r, ktorÃ½ ignoruje tÃºto âÄ¾udskÃºâ vrstvu zdrojov konfliktu, sa mÃ´- kÃ³de chybu. Å¾e vo svojom tÃ­me veÄ¾mi Ä¾ahko ocitnÃºÅ¥ medzi dvoma nenÃ¡vidiacimi sa skupinami. Preto sa treba o vzÅ¥ah medzi tÃ½mito dvoma skupinami staraÅ¥, zabezpeÄiÅ¥ stretnutia tÃ­mu a komunikÃ¡ciu aj mimo prÃ¡ce. Ak sa tieto dve skupiny spoznajÃº aj v inÃ½ch situÃ¡ciÃ¡ch ako prÃ¡ve pri oznamovanÃ­ chÃ½b, budÃº si lepÅ¡ie rozumieÅ¥ aj v prÃ¡ci. ÄalÅ¡ou moÅ¾nosÅ¥ou je aj zorganizovanie Å¡peciÃ¡lneho kurzu o zvlÃ¡danÃ­ konfliktnÃ½ch situÃ¡ciÃ­ pre Älenov tÃ­mu. Okrem toho, Å¾e si ÃºÄastnÃ­ci kurzu osvoja schopnosti, ktorÃ© im pomÃ´Å¾u lepÅ¡ie komunikovaÅ¥ a zvlÃ¡daÅ¥ konfliktnÃ© situÃ¡cie sa zÃ¡roveÅ spoznajÃº aj z inej strÃ¡nky ako pracovnej, Äo urÄite zlepÅ¡Ã­ ich vzÃ¡jomnÃ© vzÅ¥ahy. ProblÃ©my komunikÃ¡cie a personalizovania kÃ³du by sa mohli daÅ¥ rieÅ¡iÅ¥ aj vhodnÃ½m pÃ¡rovanÃ­m vÃ½vojÃ¡ra s testerom, ktorÃ½ testuje jeho kÃ³d. PredpokladÃ¡m, Å¾e starÅ¡Ã­ a skÃºsenejÅ¡Ã­ tester mÃ´Å¾e pri komunikÃ¡cii chÃ½b mladÅ¡iemu vÃ½vojÃ¡rovi ÄerpaÅ¥ zo svojich skÃºsenostÃ­ a naopak, skÃºsenejÅ¡Ã­ vÃ½vojÃ¡r by uÅ¾ nemusel trpieÅ¥ prÃ­liÅ¡nÃ½m zosobÅovanÃ­m kÃ³du a mÃ´Å¾e prijaÅ¥ svoje chyby objektÃ­vne."
135,61,0.57,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.3.3 AbstraktnejÅ¡Ã­ pohad: vzor RukovÃ¤-Teleso VrÃ¡me sa teraz do prostredia objektovo orientovanÃ½ch programov a pozrime sa na vzor Obaova (resp. AdaptÃ©r poda GoF) abstraktnejÅ¡Ã­m pohadom. Tento vzor je sÃºasou Å¡irÅ¡ej mnoÅ¾iny vzorov, oznaovanej niekedy ako vzor RukovÃ¤-Teleso (angl. Handle-Body Pattern)3. Charakteristickou rtou tÃ½chto vzorov je, Å¾e implementÃ¡cia nieoho (teleso, angl. body) je oddelenÃ¡ od rozhrania, s ktorÃ½m pracujÃº klienti (rukovÃ¤, angl. handle). Volania, zachytenÃ© rukovÃ¤ou, sÃº Å¡tandardne poslanÃ© na spracovanie telesu, avÅ¡ak mÃ´Å¾u by predtÃ½m upravenÃ©, prÃ­padne aj Ãºplne potlaenÃ©. RukovÃ¤ teda istÃ½m spÃ´sobom obauje teleso, preto sa vzoru RukovÃ¤-Teleso tieÅ¾ niekedy hovorÃ­ Obaova. Vzor RukovÃ¤-Teleso zah a, okrem inÃ½ch, nasledujÃºce vzory (nÃ¡zvy poda GoF): 1. AdaptÃ©r (angl. Adapter), ktorÃ½ upravuje rozhranie triedy do poÅ¾adovanÃ©ho tvaru (povedanÃ© naÅ¡ou terminolÃ³giou, rieÅ¡i situÃ¡cie, kedy R Râ, priom F a Fâ mÃ´Å¾u, avÅ¡ak nemusia by rovnakÃ©). 2. DekoratÃ©r (angl. Decorator), ktorÃ½ pridÃ¡va triede dodatonÃº funknos bez zmeny rozhrania (t.j. F Fâ, R = Râ). 3. Most (angl. Bridge), ktorÃ½ umoÅ¾uje dynamicky meni implementÃ¡ciu realizujÃºcu danÃ© rozhranie (t.j. F = Fâ, R = Râ, avÅ¡ak sÃºiastku B vieme poas vykonÃ¡vania nahradi sÃºiastkou C poskytujÃºcou funknos F prostrednÃ­ctvom rozhrania R). 4. ZÃ¡stupca (angl. Proxy), ktorÃ½ modifikuje alebo dop a niektorÃ© vlastnosti triedy nie priamo sÃºvisiace s jej funknosou (ako sÃº vzdialenÃ½ prÃ­stup, neskorÃ¡ inicializÃ¡cia, ochrana a inÃ©) â t.j. mohli by sme poveda, Å¾e F = Fâ, R = Râ, s tÃ½m, Å¾e menia sa niefunknÃ© aspekty poskytovanej sluÅ¾by."
190,235,0.57,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Predstavme si, Å¾e nÃ¡s prÃ¡ve prijali na prÃ¡cu na projekte. Nech na Åom pracuje eÅ¡te niekoÄ¾ko ÄalÅ¡Ã­ch Ä¾udÃ­. NemusÃ­ ich byÅ¥ veÄ¾a, staÄÃ­ dvaja, traja. Nie je dÃ´leÅ¾itÃ©, ÄÃ­m sa projekt zaoberÃ¡. DÃ´leÅ¾itÃ© je, Å¾e preÅ nebol vytvorenÃ½ Å¾iaden plÃ¡n alebo bol vytvorenÃ½ len veÄ¾mi hrubÃ½ plÃ¡n, ktorÃ½ ani zÄaleka nepokrÃ½va vÅ¡etky nutnÃ© nÃ¡leÅ¾itosti. ManaÅ¾Ã©r zvolal poradu, kde vÅ¡etkÃ½m oznÃ¡mil, o Äo pribliÅ¾ne v projekte ide a Å¾e od kaÅ¾dÃ©ho oÄakÃ¡va, aby sa zapojil."
205,128,0.57,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Aj vzhÄ¾adom na rÃ½chly rast webu sÃº mnohÃ© z tÃ½chto problÃ©mov doposiaÄ¾ aktuÃ¡lne a vyÅ¾adujÃº aktÃ­vny vÃ½skum. ExistujÃº vÅ¡ak viacerÃ© rieÅ¡enia, ktorÃ© sa snaÅ¾ia s tÃ½mito problÃ©mami vysporiadaÅ¥. Na inicializÃ¡ciu preliezania sa zvyknÃº pouÅ¾Ã­vaÅ¥ webovÃ© adresÃ¡re ako Yahoo, Äi ODP. Pri rozhodovanÃ­, ktorÃ© strÃ¡nky sa majÃº navÅ¡tÃ­viÅ¥ skÃ´r, sa zvykne pouÅ¾iÅ¥ niekoÄ¾ko alternatÃ­v: - prehliadanie do Å¡Ã­rky (tzv. FIFO princÃ­p â angl. first-in-first-out) - strÃ¡nky, ktorÃ© sa menia ÄastejÅ¡ie - populÃ¡rne strÃ¡nky (napr. podÄ¾a hodnoty PageRank). Pasce na preliezaÄe sÃº nekoneÄnÃ© grafy dynamicky prepojenÃ½ch strÃ¡nok ako napr. kalendÃ¡r. TakÃ½mto pasciam sa preliezaÄ dokÃ¡Å¾e vyhnÃºÅ¥ najmÃ¤ reÅ¡pektovanÃ­m spomÃ­nanÃ©ho robotickÃ©ho protokolu. S cieÄ¾om preliezania hlbokÃ©ho webu sa vytvÃ¡rajÃº inteligentnÃ© preliezaÄe, ktorÃ© nie sÃº len obyÄajnÃ© sÅ¥ahovaÄe webovÃ½ch strÃ¡nok, ale vedia strÃ¡nku Ãºplne interpretovaÅ¥ rovnako ako webovÃ½ prehliadaÄ a dokÃ¡Å¾u interagovaÅ¥ aj s aktÃ­vnymi prvkami (rozliÄnÃ© technolÃ³gie ako Adobe Flash), Äi vypÄºÅaÅ¥ formulÃ¡re na strÃ¡nke, ktorÃ© sprÃ­stupÅujÃº inak skrytÃº ÄasÅ¥ hlbokÃ©ho webu."
122,135,0.57,Modelovanie softvÃ©ru,"9.2 Viazanie vlastnostÃ­ a konfigurovanie modelu vlastnostÃ­ Zahrnutie alebo viazanie (angl. binding) vlastnostÃ­ mÃ¡ svoj obraz v kÃ³de. VlastnosÅ¥ nemusÃ­ byÅ¥ implementovanÃ¡ na jednom mieste ako akÃ½si komponent, ktorÃ½ staÄÃ­ pripojiÅ¥ alebo odpojiÅ¥, ale dÃ¡ sa urÄiÅ¥, ako jej zahrnutie vplÃ½va na vÃ½slednÃ½ kÃ³d. Na prepojenie vlastnostÃ­ a kÃ³du sa dajÃº pouÅ¾iÅ¥ nÃ¡stroje, akÃ½mi sÃº naprÃ­klad pure::variants1 alebo FeatureIDE2 . Rozhodnutie o tom, Å¾e danÃ¡ variabilnÃ¡ vlastnosÅ¥ je zahrnutÃ¡, t. j. viazanÃ¡ (angl. bound) mÃ´Å¾e prÃ­sÅ¥ v rÃ´znych Äasoch tvorby zdrojovÃ©ho kÃ³du [Vp06]. V diagrame vlastnostÃ­ na obrÃ¡zku 9.1 sÃº pri variabilnÃ½ch vlastnostiach vyznaÄenÃ© dva Äasy viazania (angl. binding time): source time, t. j. Äas tvorby zdrojovÃ©ho kÃ³du, a run time, t."
190,36,0.57,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"nu produktov, sluÅ¾ieb, know-how, ktorÃ© tvoria jej hlavnÃ½ biznis, a ktorÃ© vie tvoriÅ¥ kvalitne a efektÃ­vne. ExistujÃº rÃ´zne typy firiem. SÃº takÃ©, ktorÃ© presne poznajÃº svoje vÃ½stupy, priÄom tÃºto mnoÅ¾inu mÃ´Å¾u rozÅ¡irovaÅ¥ alebo zuÅ¾ovaÅ¥, ale vÅ¾dy vedia, Äo ju v danom momente tvorÃ­. Na druhej strane existuje veÄ¾a najmÃ¤ menÅ¡Ã­ch firiem, ktorÃ© fungujÃº spÃ´sobom ad-hoc a robia vÅ¡etko, Äo si myslia, Å¾e sa im prÃ¡ve oplatÃ­. Pri hÄ¾adanÃ­ prvej prÃ­Äiny, preÄo firmy pouÅ¾Ã­vajÃº outsourcing, budeme uvaÅ¾ovaÅ¥ najmÃ¤ prvÃº skupinu firiem."
59,224,0.57,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"naÅ¡li sprÃ¡vne rieÅ¡enie (t. j. ihlu v kope sena), musÃ­me prekontrolovaÅ¥ vÅ¡etky prÃ­pustnÃ© rieÅ¡enia, Äo je vlastne ten najhorÅ¡Ã­ moÅ¾nÃ½ algoritmus rieÅ¡enia danÃ©ho problÃ©mu. AvÅ¡ak, ak pouÅ¾Ã­vame efektÃ­vne fitnes, ktorÃ© je nenulovÃ© aj v blÃ­zkom okolÃ­ hÄ¾adanÃ©ho rieÅ¡enia, mÃ¡me podstatne vÃ¤ÄÅ¡iu Å¡ancu nÃ¡jsÅ¥ sprÃ¡vne rieÅ¡enie. MÃ´Å¾eme povedaÅ¥, Å¾e efektÃ­vne fitnes nÃ¡s proces prehÄ¾adÃ¡vania naviguje smerom, kde sÃº vÃ¤ÄÅ¡ie hodnoty efektÃ­vneho fitnes. fitnes"
190,37,0.57,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ak by sme chceli maÅ¥ vo firme pre kaÅ¾dÃº oblasÅ¥ Å¡piÄkovÃ©ho odbornÃ­ka, museli by sme maÅ¥ zÃ¡roveÅ dostatoÄnÃ© mnoÅ¾stvo projektov, aby boli vÅ¡etci primerane vyÅ¥aÅ¾enÃ­. ZÃ¡roveÅ treba, aby sa vÅ¡etci tÃ­to Ä¾udia venovali problÃ©mom na najvyÅ¡Å¡ej Ãºrovni zloÅ¾itosti alebo problÃ©mom, ktorÃ½ch zlÃ© rieÅ¡enie mÃ´Å¾e maÅ¥ veÄ¾mi vÃ¡Å¾ne dopady na projekt. Ak by sa nÃ¡m podarilo zabezpeÄiÅ¥ takÃ½to stav, mÃ´Å¾eme pokojne uvaÅ¾ovaÅ¥ nad zamestnanÃ­m potrebnÃ©ho poÄtu Outsorcovanie Å¡piÄkovÃ½ch odbornÃ­kov na plnÃ½ pracovnÃ½ ÃºvÃ¤zok. MyslÃ­m si vÅ¡ak, Å¾e najmÃ¤ Å¡piÄkovÃ©ho v oblasti IT je takÃ½to stav dosiahnuteÄ¾nÃ½ len veÄ¾mi Å¥aÅ¾ko a zamestnÃ¡vaÅ¥ vÃ¤ÄodbornÃ­ka je Å¡iu skupinu Å¡piÄkovÃ½ch odbornÃ­kov si mÃ´Å¾u dovoliÅ¥ len veÄ¾kÃ© firmy. Äasto lepÅ¡Ã­m spÃ´sobom, ako pristupovaÅ¥ k angaÅ¾ovaniu Å¡piÄkovÃ©ho Äasto lepÅ¡ie ako odbornÃ­ka, je zvÃ¡Å¾enie jeho outsourcovania. Samozrejme outsourcovanie jeho priame takÃ©hoto Äloveka bude z krÃ¡tkodobÃ©ho pohÄ¾adu eÅ¡te drahÅ¡ie ako keby bol angaÅ¾ovanie. v naÅ¡ej firme normÃ¡lne zamestnanÃ½, ale takÃ½mto spÃ´sobom Å¡etrÃ­m peniaze v Äase, keÄ takto kvalifikovanÃº pracovnÃº silu nepotrebujem a bez problÃ©mov si vystaÄÃ­m s terajÅ¡Ã­mi zamestnancami. Peniaze investovanÃ© do outsourcingu by sa mali vrÃ¡tiÅ¥ pridanou hodnotou, ktorÃº prenajatÃ½ Älovek vyprodukuje a ak je to skutoÄne Å¡piÄkovÃ½ odbornÃ­k a je nasadenÃ½ na sprÃ¡vny problÃ©m, mÃ´Å¾em hovoriÅ¥ o viac ako ÃºspeÅ¡nom obchode. Vo firme, kde pracujem, pouÅ¾Ã­vame tento spÃ´sob outsourcingu relatÃ­vne Äasto. Pri novÃ½ch, vÃ¤ÄÅ¡Ã­ch projektoch sa nÃ¡m osvedÄilo outsourcovaÅ¥ analÃ½zu problÃ©movej oblasti na Å¡piÄkovÃ©ho odbornÃ­ka a myslÃ­m si, Å¾e prÃ¡ve kvalita jeho analÃ½z, na ktorÃ½ch nÃ¡sledne stojÃ­ celÃ½ ÄalÅ¡Ã­ projekt, je dostatoÄnou pridanou hodnotou za cenu, ktorÃº takÃ©to outsourcovanie stojÃ­. Len na margo spomeniem, Å¾e tÃ¡to forma outsourcingu so sebou uÅ¾ prinÃ¡Å¡a oveÄ¾a vÃ¤ÄÅ¡ie rizikÃ¡ ako v prvom prÃ­pade. Outsourcujeme totiÅ¾ oblasti, ktorÃ© mÃ´Å¾u tvoriÅ¥ nÃ¡Å¡ hlavnÃ½ biznis, kde hrozÃ­"
129,46,0.57,Sprievodca licenciami Creative Commons,"SÃº dÃ¡ta vÅ¾dy chrÃ¡nenÃ© autorskÃ½m prÃ¡vom? Treba maÅ¥ na pamÃ¤ti, Å¾e v mnohÃ½ch situÃ¡ciÃ¡ch dÃ¡ta nepodliehajÃº autorskÃ©mu prÃ¡vu a sÃºvisiacim zÃ¡konom. Medzi takÃ©to dÃ¡ta patria fakty, menÃ¡, ÄÃ­sla. Ide o Ãºdaje, ktorÃ© sa povaÅ¾ujÃº za ânepÃ´vodnÃ©â (non-original) a za sÃºÄasÅ¥ verejnej domÃ©ny, ÄiÅ¾e nie sÃº predmetom ochrany autorskÃ©ho prÃ¡va. VaÅ¡a databÃ¡za (Å¡truktÃºrovanÃ½ sÃºbor dÃ¡t) sa mÃ´Å¾e tieÅ¾ povaÅ¾ovaÅ¥ za ânepÃ´vodnÃºâ, ÄiÅ¾e takÃº, ktorÃ¡ nepodlieha autorskÃ©mu prÃ¡vu a ktorÃ¡ mÃ´Å¾e byÅ¥ dodatoÄne vylÃºÄenÃ¡ aj z inÃ½ch foriem ochrany (napr. ochrana nepÃ´vodnÃ½ch/netvorivÃ½ch databÃ¡z na zÃ¡klade prÃ¡va sui generis v EU, znÃ¡me aj ako SGDR, sui generis database rights) V takomto prÃ­pade by pouÅ¾itie licenciÃ­ Creative Commons ako CC BY mohlo signalizovaÅ¥, Å¾e si nÃ¡rokujte autorskÃ© prÃ¡vo k nepÃ´vodnÃ½m dÃ¡tam napriek zÃ¡konu, a moÅ¾no aj napriek vÃ¡Å¡mu pÃ´vodnÃ©mu zÃ¡meru. Ak sÃº vaÅ¡e dÃ¡ta prÃ­stupnÃ© vo verejnej domÃ©ne celosvetovo, mÃ´Å¾ete jednoducho viditeÄ¾ne oznaÄiÅ¥ svoj materiÃ¡l vyhlÃ¡senÃ­m, Å¾e Å¾iadne obmedzenia nebrÃ¡nia opÃ¤tovnÃ©mu vyuÅ¾itiu dÃ¡t a pouÅ¾iÅ¥ oznaÄenie âPublic Domainâ (pozri ÄasÅ¥ âÄo je licencia Creative Commons?\Public Domain Mark)."
265,232,0.57,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"AkÃ¡ ÄinnosÅ¥ je, z hÄ¾adiska testovania, neoddeliteÄ¾nou ÄasÅ¥ou tvorby poÅ¾iadaviek na softvÃ©r? Vytvorenie a naplÃ¡novanie akceptaÄnÃ½ch testov. AkceptaÄnÃ© testy zo svojej podstaty musia vzniknÃºÅ¥ pred uzavretÃ­m kontraktu so zÃ¡kaznÃ­kom, pretoÅ¾e definujÃº za akÃ½ch okolnostÃ­ zÃ¡kaznÃ­k uznÃ¡, Å¾e softvÃ©r bol vytvorenÃ½ a mal by ho prebraÅ¥. AkceptaÄnÃ© testy potvrdzujÃº merateÄ¾nosÅ¥ poÅ¾iadaviek (bez nej by sa ani nedali vytvoriÅ¥). MnohÃ© kontrakty sa opierajÃº prÃ¡ve o akceptaÄnÃ© testy ako o âtvrdÃ½â dokument Å¡pecifikÃ¡cie a âklasickÃºâ Å¡pecifikÃ¡ciu (zoznam funkcionÃ¡lnych a nefunkcionÃ¡lnych poÅ¾iadaviek) vnÃ­majÃº len ako doplnkovÃ½ dokument."
184,27,0.57,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"NÃ¡vrh architektÃºry sa nedÃ¡ efektÃ­vne validovaÅ¥ a testovaÅ¥ predtÃ½m, ako sa vyvinÃº aspoÅ zÃ¡kladnÃ© Äasti systÃ©mu. Prototypovanie tento problÃ©m rieÅ¡i iba ÄiastoÄne a nemusÃ­ dÃ¡vaÅ¥ ÃºplnÃº istotu o vhodnosti nÃ¡vrhu. Z tohto dÃ´vodu sa architekti spoliehajÃº na odskÃºÅ¡anÃ© prÃ­stupy k rieÅ¡eniu skupÃ­n problÃ©mov â architektonickÃ© vzory. ArchitektonickÃ½ vzor vÅ¡ak predstavuje abstraktnÃ© rieÅ¡enie, ktorÃ© vznikne generalizovanÃ­m niekoÄ¾kÃ½ch konkrÃ©tnych prÃ­stupov k rieÅ¡eniu problÃ©mu. Toto abstraktnÃ© rieÅ¡enie nie je spustiteÄ¾nÃ© na poÄÃ­taÄi a je Ãºlohou softvÃ©rovÃ½ch inÅ¾inierov vytvoriÅ¥ zo vzoru jeho konkrÃ©tnu pouÅ¾iteÄ¾nÃº implementÃ¡ciu. NajÄastejÅ¡ie pouÅ¾Ã­vanÃ© vzory sÃº podporovanÃ© verejne dostupnÃ½mi aplikÃ¡ciami, ktorÃ© poskytujÃº poÅ¾adovanÃº funkcionalitu a sÃº pritom znovupouÅ¾iteÄ¾nÃ© a aplikaÄne nezÃ¡vislÃ©. VÃ½vojovÃ½ tÃ­m teda nemusÃ­ nanovo vyvÃ­jaÅ¥ vÅ¡etky komponenty systÃ©mu, ale mÃ´Å¾e niektorÃ© Äasti pokryÅ¥ existujÃºcimi komerÄnÃ½mi alebo voÄ¾ne dostupnÃ½mi rieÅ¡eniami. Ãlohou softvÃ©rovÃ©ho architekta je vybraÅ¥ najvhodnejÅ¡Ã­ produkt na trhu, priÄom musÃ­ uvaÅ¾ovaÅ¥ rÃ´zne aspekty ako je cena, kvalita a funkcionalita. Takmer Å¾iadna aplikÃ¡cia neposkytuje presne to, Äo si Å¾iada nÃ¡Å¡ nÃ¡vrh. NÃ¡kupom aplikÃ¡cie buÄ zaplatÃ­me aj za funkcionalitu, ktorÃº nepoÅ¾adujeme (ktorÃº nikdy nepouÅ¾ijeme aj keÄ sme si za Åu zaplatili) alebo nÃ¡m naopak funkcionalita bude chÃ½baÅ¥ (priÄom rieÅ¡enÃ­m je doplnenie chÃ½bajÃºcich ÄastÃ­ alebo zmena nÃ¡vrhu). SoftvÃ©rovÃ½ architekt musÃ­ zvÃ¡Å¾iÅ¥ vÅ¡etky vÃ½hody a nevÃ½hody jednotlivÃ½ch produktov a vykonaÅ¥ sprÃ¡vnu voÄ¾bu."
43,19,0.569,Objektovo orientovanÃ© programovanie v C++,"KeÄ si lepÅ¡ie pozrieme tento prÃ­klad, mÃ´Å¾eme si uvedomiÅ¥, Å¾e v naÅ¡ich dvoch triedach sÃº Ãºdaje, ktorÃ© vyuÅ¾Ã­va len samotnÃ¡ trieda, ktorÃ¡ ich obsahuje, a na druhej strane takÃ©, ktorÃ© sÃº potrebnÃ© aj mimo triedy, naprÃ­klad na komunikÃ¡ciu s druhou triedou. RovnakÃ© rozdelenie by mohlo platiÅ¥ aj pre metÃ³dy, hoci v naÅ¡om prÃ­pade sa v hlavnom programe alebo v druhej triede pouÅ¾Ã­vajÃº vÅ¡etky. Z toho vyplÃ½va ÄalÅ¡Ã­ zo zÃ¡kladnÃ½ch princÃ­pov objektovo orientovanÃ©ho programovania. Pri nÃ¡vrhu objektovo orientovanÃ©ho programu mÃ¡me pri kaÅ¾dej triede moÅ¾nosÅ¥ rozhodnÃºÅ¥, ktorÃ© dÃ¡ta a metÃ³dy budÃº sÃºkromnÃ© (angl. private), teda prÃ­stupnÃ© len v rÃ¡mci samotnej triedy a pre ostatnÃ© Äasti programu nepouÅ¾iteÄ¾nÃ©, a ktorÃ© budÃº verejnÃ© (angl. public), ÄiÅ¾e prÃ­stupnÃ© a pouÅ¾iteÄ¾nÃ© kdekoÄ¾vek v programe. KorektnÃ½ a v praxi zauÅ¾Ã­vanÃ½ spÃ´sob nÃ¡vrhu sa nazÃ½va technika ukrÃ½vania dÃ¡t (angl. data hiding). V reÃ¡lnom svete kaÅ¾dÃ½ Älovek poznÃ¡"
393,518,0.569,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ObrÃ¡zok 9-15. Diagram tried predstavenÃ©ho rieÅ¡enia pre transparentnÃº skladbu. OtÃ¡zka na druhÃº stranu znie, Äi je vÃ´bec moÅ¾nÃ© znovupouÅ¾iÅ¥ Äasti vzoru bez fyzickÃ©ho rozdelenia tried spÃ¡jajÃºcich vÅ¡eobecnÃº a domÃ©novo zÃ¡vislÃº ÄasÅ¥ vzoru? Ako uvidÃ­me v Äasti 9.6, je to moÅ¾nÃ© s pomocou Å¡peciÃ¡lnych rozÅ¡Ã­renÃ­. TÃ¡to ÄasÅ¥ mala za cieÄ¾ poukÃ¡zaÅ¥ na netriviÃ¡lnosÅ¥ realizÃ¡cie dekompozÃ­cie vzoru pomocou Å¡tandardnÃ½ch prostriedkov jazyka C++. NavyÅ¡e sa podarilo poukÃ¡zaÅ¥ na nutnosÅ¥ prijatia poruÅ¡enÃ­ v obmedzeniach modelu rolÃ­ v kontexte nÃ¡vrhovÃ©ho vzoru Composite s cieÄ¾om oddeliÅ¥ vÅ¡eobecnÃº ÄasÅ¥ od domÃ©novo zÃ¡vislej Äasti vzoru (napr. v podobe obsadenia role Component triedami ConcreteComponent a CommonComponent, ÄÃ­m sa poruÅ¡ili obmedzenia na poÄet tried obsadenÃ½ch v danej roli)."
369,309,0.569,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"poistnÃ½ch objektov. PoistnÃ½ produkt a typ poistnÃ©ho rizika mÃ´Å¾u bliÅ¾Å¡ie urÄovaÅ¥ povolenÃ© roly partnerov. ZloÅ¾itejÅ¡ie bÃ½va na metaÃºrovni vyjadrenie sadzieb poistnÃ©ho. Vo vÅ¡eobecnosti zÃ¡visÃ­ sadzba poistnÃ©ho od produktu, typu poistnÃ©ho rizika a typu poistnÃ©ho objektu (obr. 5.2). UvedenÃ© zÃ¡kladnÃ© parametre vÅ¡ak dopÄºÅajÃº ÄalÅ¡ie parametre pri jednotlivÃ½ch poistnÃ½ch produktoch. NaprÃ­klad sadzba zÃ¡konnÃ©ho poistenia motorovÃ©ho vozidla mÃ´Å¾e Äalej zÃ¡visieÅ¥ od vÃ½konu motora, veku vodiÄa8, regiÃ³nu a inÃ½ch parametrov. VÃ½poÄet poistnÃ©ho je eÅ¡te zloÅ¾itejÅ¡Ã­ v prÃ­pade Å¾ivotnÃ©ho poistenia. Vtedy sa vychÃ¡dza nielen zo sadzby produktu, ale tieÅ¾ zo Å¡tatistickÃ½ch ÃºmrtnostnÃ½ch tabuliek, ktorÃ© uvÃ¡dzajÃº (odliÅ¡ne pre muÅ¾ov a pre Å¾eny) roÄnÃº mieru Ãºmrtnosti v zÃ¡vislosti od veku. PoistnÃ© sa poÄÃ­ta z Ãºdajov poistenej osoby (vek, pohlavie) a poistnej zmluvy (poistnÃ© obdobie, sadzba produktu) pouÅ¾itÃ­m matematickÃ½ch vzorcov poistnej matematiky (pozri napr. [BilÃ­kovÃ¡+ 1997]). Model na vÃ½ber (inkaso) poistnÃ©ho vznikne uplatnenÃ­m Å¡pecializovanÃ½ch finanÄnÃ½ch vzorov NÃ¡rokovanie zÃ¡vÃ¤zku (obr. 3.9), Platba zÃ¡vÃ¤zku (obr. 3.19) a SpÃ´soby platieb zÃ¡vÃ¤zku (obr. 3.22). PoisÅ¥ovÅa v pravidelnÃ½ch intervaloch (naprÃ­klad kaÅ¾dÃº noc alebo jedenkrÃ¡t tÃ½Å¾denne)9 vytvÃ¡ra tzv. predpisy poistnÃ©ho. Predpis poistnÃ©ho predstavuje pohÄ¾adÃ¡vku poisÅ¥ovne v stanovenej vÃ½Å¡ke voÄi platiteÄ¾ovi poistnÃ©ho za urÄitÃ© obdobie, ktorÃ¡ je splatnÃ¡ do urÄitej doby. Z hÄ¾adiska Å¡pecializovanÃ½ch finanÄnÃ½ch vzorov je predpis poistnÃ©ho opakujÃºcim sa nÃ¡rokom viazanÃ½m na poistnÃº zmluvu, ktorÃ¡ predstavuje bÃ¡zickÃ½ zÃ¡vÃ¤zok. Generuje sa automaticky podÄ¾a dÃ¡tumu zaÄiatku poistenia a periÃ³dy splÃ¡tky. Ak mÃ¡ poistnÃ­k dohodnutÃ½ spÃ´sob platby poÅ¡tovou poukÃ¡Å¾kou, poisÅ¥ovÅa ju s uvedenou vÃ½Å¡kou posiela na adresu platiteÄ¾a poistnÃ©ho. Na vÃ½ber poistnÃ©ho mÃ¡ poisÅ¥ovÅa v banke zriadenÃ½ beÅ¾nÃ½ ÃºÄet. Na tento platitelia poistnÃ©ho uhrÃ¡dzajÃº poistnÃ© bezhotovostnÃ½m prevodom zo svojho ÃºÄtu, poÅ¡tovou poukÃ¡Å¾kou, prÃ­padne udelia poisÅ¥ovni sÃºhlas s inkasom zo svojho beÅ¾nÃ©ho ÃºÄtu. PoisÅ¥ovne v sÃºÄasnosti umoÅ¾ÅujÃº tieÅ¾ uhradiÅ¥ poistnÃ© (naprÃ­klad prvÃ© poistnÃ© pri uzavretÃ­ nÃ¡vrhu poistnej zmluvy) v hotovosti. RÃ´zne spÃ´soby platieb zÃ¡vÃ¤zku vedÃº k uplatneniu vzoru SpÃ´soby platieb zÃ¡vÃ¤zku (obr. 3.22)."
265,328,0.569,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"dolÃ³gie vo fÃ¡ze ÃºdrÅ¾by mÃ´Å¾e byÅ¥ niekedy nÃ¡roÄnÃ©. NiektorÃ© techniky sÃº veÄ¾mi Å¥aÅ¾ko pouÅ¾iteÄ¾nÃ©, napr. fixnÃ¡ dÄºÅ¾ka Å¡printu (pretoÅ¾e chybu je potrebnÃ© odstrÃ¡niÅ¥ hneÄ), refaktoring kÃ³du medzi jednotlivÃ½mi iterÃ¡ciami (Äasto nemoÅ¾nÃ© pri pohotovostnej oprave), a pod. Podmienky sÃº eÅ¡te nÃ¡roÄnejÅ¡ie, ak tÃ­m pracuje na cudzom kÃ³de, prÃ­p. ak ide o ÃºdrÅ¾bu nejakÃ©ho zanechanÃ©ho systÃ©mu."
276,76,0.569,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"ZÃ¡kladnÃ© Ãºlohy 1. Prepojte zariadenia podÄ¾a topolÃ³gie na Obr. 5.1. Overte, Äi na nich nie je uloÅ¾enÃ¡ konfigurÃ¡cia, prÃ­padne ju vymaÅ¾te a zariadenia reÅ¡tartujte. 2. MÃ¡te pridelenÃº sieÅ¥ 192.168.6.0/23, ktorÃº potrebujete rozdeliÅ¥ na menÅ¡ie podsiete (tzv. subnetting) tak, aby v kaÅ¾dej sieti bolo Äo najmenej nevyuÅ¾itÃ½ch adries. PoÄet zariadenÃ­ v jednotlivÃ½ch sieÅ¥ach:"
43,495,0.569,Objektovo orientovanÃ© programovanie v C++,"V ÄalÅ¡om prÃ­klade si predvedieme pouÅ¾itie Å¡truktÃºry mapa (map). PrÃ­klad. NapÃ­Å¡me program, ktorÃ½ umoÅ¾nÃ­ pridÃ¡vaÅ¥ do telefÃ³nneho zoznamu novÃ© poloÅ¾ky. KaÅ¾dÃ¡ poloÅ¾ka obsahuje meno a telefÃ³nne ÄÃ­slo a zoznam je usporiadanÃ½ abecedne podÄ¾a mena. Rozbor rieÅ¡enia. V programe vytvorÃ­me triedu telefonny zoznam, ktorÃ¡ bude obsahovaÅ¥ zoznam mien a ÄÃ­sel. KeÄÅ¾e tu ide o uchovÃ¡vanie dvojÃ­c Ãºdajov, priÄom celÃ½ zoznam je usporiadanÃ½ podÄ¾a prvÃ©ho prvku dvojice (meno), ide o klasickÃº situÃ¡ciu, v ktorej sa dÃ¡ pouÅ¾iÅ¥ Å¡truktÃºra mapa. PridÃ¡vanie novÃ½ch poloÅ¾iek do zoznamu zabezpeÄÃ­ metÃ³da Pridaj a zoznam sa vypÃ­Å¡e prostrednÃ­ctvom metÃ³dy Vypis."
369,385,0.569,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 7.9. Vzor cestnÃ¡ sieÅ¥ Na obr. 7.10 nie je znÃ¡zornenÃ© Älenenie cestnÃ½ch objektov do vÅ¡eobecnÃ½ch kategÃ³riÃ­ uvedenÃ½ch v Äasti 6.4, ktorÃ© je relatÃ­vne priamoÄiare. PrÃ­kladmi obsahu jednotlivÃ½ch kategÃ³riÃ­ 1. KonÅ¡trukÄnÃ© objekty: most, tunel, podjazd, priepust, stena/mÃºr a ÄalÅ¡ie. 2. Objekty zvyÅ¡ujÃºce kvalitatÃ­vne parametre siete: zÃ¡chytnÃ© bezpeÄnostnÃ© zariadenie osvetlenie, odvodnenie, kanalizÃ¡cia, hlÃ¡ska SOS a ÄalÅ¡ie. 3. Riadiace objekty: svetelnÃ¡ signalizÃ¡cia, dopravnÃ¡ znaÄka. 4. Monitorovacie objekty: meraÄ teploty, hlÃ¡siÄ nÃ¡mrazy, videosnÃ­maÄ, sÄÃ­taÄ dopravy, vÃ¡ha a ÄalÅ¡ie."
265,306,0.569,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Pri odovzdÃ¡vanÃ­ softvÃ©ru do pouÅ¾Ã­vania. Nie je samozrejme vylÃºÄenÃ©, naopak, je prirodzenÃ©, aby si vÃ½vojÃ¡ri naneÄisto prechÃ¡dzali scenÃ¡re akceptaÄnÃ½ch testov uÅ¾ poÄas vÃ½voja. Vtedy vÅ¡ak o akceptaÄnÃ© testovanie, v zmysle definÃ­cie eÅ¡te nejde."
190,390,0.569,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KeÄ dÃ¡me Ä¾uÄom do rÃºk dokonalejÅ¡ie nÃ¡stroje, rozdiely medzi nimi sa zaÄnÃº zmenÅ¡ovaÅ¥. Aj keÄ posun kvality vÄaka softvÃ©rovÃ½m nÃ¡strojom nie je vÃ½raznÃ½, je urÄite prÃ­nosom. Zistilo sa, Å¾e v oblasti databÃ¡zovÃ½ch technolÃ³giÃ­ vzrÃ¡stla kvalita (hodnotenÃ¡ na zÃ¡klade oznÃ¡mkovania urÄenÃ½ch vlastnostÃ­) o 30 % v obdobÃ­ 1997-2002 oproti obdobiu 1992-1997, Äo pripisuje kvalitnejÅ¡Ã­m nÃ¡strojom na vÃ½voj [1]. ModernÃ© vÃ½vojÃ¡rske nÃ¡stroje naznaÄili pozitÃ­vny trend v oblasti zlepÅ¡ovania kvality. DneÅ¡nÃ© kompilÃ¡tory dokÃ¡Å¾u automaticky oznaÄiÅ¥ mnoÅ¾stvo potenciÃ¡lnych chÃ½b, ktorÃ© by inak unikli pozornosti. PrÃ­pady ako nepouÅ¾itÃ© premennÃ©, neinicializovanÃ© premennÃ©, nedostupnÃ½ kÃ³d, funkcie s vetvami bez definovanÃ©ho vÃ½stupu a mnohÃ© ÄalÅ¡ie sÃº dnes potlaÄenÃ© na minimum. Osobne by som uvÃ­tal nÃ¡stroje, ktorÃ© by automaticky sledovali, ktorÃ© sÃºÄiastky mÃ´Å¾u byÅ¥ potenciÃ¡lne ovplyvnenÃ© uskutoÄnenÃ½mi zmenami v kÃ³de. Na prvÃ½ch prieÄkach v zozname by boli tie sÃºÄiastky, ktorÃ© sÃº zmenami ovplyvnenÃ© v najvÃ¤ÄÅ¡ej miere. OznaÄenÃ© by boli miesta, kde mÃ´Å¾e teoreticky dÃ´jsÅ¥ k problÃ©mom a tÃ½mto by som ako programÃ¡tor mohol venovaÅ¥ viac pozornosti. PredpokladÃ¡m, Å¾e automatickÃ© inteligentnÃ© odhaÄ¾ovanie chÃ½b a potenciÃ¡lnych problÃ©mov v programe sa bude Äalej vyvÃ­jaÅ¥, a tak umoÅ¾nÃ­ zlepÅ¡iÅ¥ kvalitu vÃ½stupov slabÅ¡Ã­ch programÃ¡torov, Äi odstrÃ¡niÅ¥ prehliadnutÃ© nedostatky v kÃ³de skÃºsenÃ½ch vÃ½vojÃ¡rov."
122,42,0.568,Modelovanie softvÃ©ru,"3.5 TranasformÃ¡cia zahrnutia na rozÅ¡Ã­renie a naopak RozÅ¡Ã­renie moÅ¾no veÄ¾mi jednoducho transformovaÅ¥ na zahrnutie: PrÃ­pad pouÅ¾itia: Zadaj objednÃ¡vku ZÃ¡kladnÃ½ tok: Zadaj objednÃ¡vku 1. ZÃ¡kaznÃ­k zvolÃ­ zadanie objednÃ¡vky. 2. Aktivuje sa prÃ­pad pouÅ¾itia VyhÄ¾adaj vÃ½robok, jeho rovnomennÃ½ podtok. 3. SystÃ©m vloÅ¾Ã­ zvolenÃ½ vÃ½robok do koÅ¡Ã­ka."
130,122,0.568,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory IterÃ¡tory sa Äasto aplikujÃº na rekurzÃ­vne Å¡truktÃºry, ktorÃ© sa podobajÃº vzoru ZloÅ¾enina. PozÃ­cia v Å¡truktÃºre mÃ´Å¾e dosiahnuÅ¥ niekoÄ¾ko ÃºrovnÃ­. ExternÃ½ iterÃ¡tor si musÃ­ cestu skladbou ukladaÅ¥, aby sledoval aktuÃ¡lny objekt. VÃ½robnÃ¡ metÃ³da sa pouÅ¾Ã­va pri tvorbe inÅ¡tanciÃ­ podtried triedy IterÃ¡tor pri polymorfnÃ½ch iterÃ¡toroch. K zachyteniu stavu iterÃ¡cie je moÅ¾nÃ© pouÅ¾iÅ¥ vzor Memento."
43,354,0.568,Objektovo orientovanÃ© programovanie v C++,"â¢ ZadanÃ­m v podobe znakovÃ©ho reÅ¥azca v tvare axâ§ 3+bxâ§ 2+cx+d, kde pÃ­Å¡eme aj hodnoty 1 a 0, t.j. napr. -3xâ§ 3+2xâ§ 2-1x+5 1.2xâ§ 3+0xâ§ 2-4x+0 VÃ¡Å¡ program bude vedieÅ¥ vykonÃ¡vaÅ¥ nasledujÃºce operÃ¡cie: â¢ VÃ½poÄet hodnoty polynÃ³mu v zadanom bode x. â¢ VÃ½poÄet hodnoty derivÃ¡cie v zadanom bode x. â¢ VÃ½poÄet derivÃ¡cie v symbolickom tvare, ktorÃ½ sa vypÃ­Å¡e na obrazovku v rovnakom tvare, v akom sa zadÃ¡va znakovÃ½ reÅ¥azec reprezentujÃºci polynÃ³m. â¢ UrÄenie rovnice dotyÄnice grafu funkcie f(x) v zadanom bode. 6. CieÄ¾om tohto programu bude vyhÄ¾adÃ¡vaÅ¥ knihu v katalÃ³gu. Vytvorte triedu kniha, ktorÃ¡ bude maÅ¥ tri Ãºdaje â nazov, autor a rok vydania. Okrem toho bude maÅ¥ trieda dva konÅ¡truktory: â¢ PrÃ¡zdny konÅ¡truktor, aby sme mohli vytvÃ¡raÅ¥ dynamicky alokovanÃ© pole knÃ­h. â¢ KonÅ¡truktor s tromi parametrami, podÄ¾a ktorÃ½ch sa nastavia Ãºdaje o knihe. V sÃºbore je uloÅ¾enÃ½ zoznam knÃ­h, ktorÃ© kniÅ¾nica vlastnÃ­. Ãdaje sÃº zapÃ­sanÃ© za sebou, kaÅ¾dÃ½ v novom riadku a na zaÄiatku programu je zapÃ­sanÃ½ poÄet vÅ¡etkÃ½ch knÃ­h. NaÄÃ­tajte Ãºdaje zo sÃºboru do dynamicky alokovanÃ©ho poÄ¾a typu kniha. Potom vytvorte jeden objekt triedy kniha, Ãºdaje o Åom nech zadÃ¡ nÃ¡vÅ¡tevnÃ­k kniÅ¾nice. VÃ¡Å¡ program vyhÄ¾adÃ¡, Äi kniÅ¾nica tÃºto knihu vlastnÃ­. Aby bolo moÅ¾nÃ© zistiÅ¥ zhodu knÃ­h, deï¬nujte v triede kniha operÃ¡tor ==. 7. V predchÃ¡dzajÃºcom prÃ­klade deï¬nujte pre triedu kniha aj operÃ¡tory << a >> a pouÅ¾ite ich na naÄÃ­tanie a vÃ½pis informÃ¡ciÃ­ o knihÃ¡ch. 8. Vytvorte triedu datum podÄ¾a prÃ­kladu z kapitoly 7.6.1. Potom pre Åu deï¬nujte operÃ¡tory â (rozdiel dvoch dÃ¡tumov v dÅoch), a <, >, == (za menÅ¡Ã­ je povaÅ¾ovanÃ½ dÃ¡tum, ktorÃ½ nastal skÃ´r). 9. Vytvorte triedu vektor, ktorej cieÄ¾om bude uchovÃ¡vaÅ¥ dynamicky alokovanÃ© pole prvkov typu, ktorÃ½ si vyberte sami. Trieda teda bude obsahovaÅ¥ dynamicky alokovanÃ© pole a Ãºdaj o jeho dÄºÅ¾ke. AlokÃ¡cia poÄ¾a a nastavenie dÄºÅ¾ky prebehne v konÅ¡truktore, dealokÃ¡cia v deÅ¡truktore. Äalej bude v triede metÃ³da na vÃ½pis vÅ¡etkÃ½ch prvkov, metÃ³da na zmenu vybranÃ©ho prvku a operÃ¡tor [ ], ktorÃ½ vrÃ¡ti vybranÃ½ prvok. Potom vytvorte triedu kalkulacka, ktorÃ¡ bude maÅ¥ len jednu metÃ³du - Nasobok. TÃ¡to metÃ³da bude maÅ¥ ako parameter objekt V triedy vektor odovzdÃ¡vanÃ½ hodnotou a reÃ¡lne ÄÃ­slo d. MetÃ³da vrÃ¡ti objekt typu vektor, ktorÃ½ bude nÃ¡sobkom pÃ´vodnÃ©ho vektora, teda vektor d.V. Vytvorte jeden objekt triedy Vektor a vypoÄÃ­tajte naprÃ­klad jeho trojnÃ¡sobok."
130,500,0.568,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 8-8. PrincÃ­p automatizovanÃ©ho zberu informÃ¡ciÃ­ pomocou GRDDL. PrincÃ­p extrakcie informÃ¡ciÃ­ je schematicky naznaÄenÃ½ na obrÃ¡zku 8-8. Vstupom do procesu extrakcie je vo vÅ¡eobecnosti XML dokument, najÄastejÅ¡ie je to vÅ¡ak (X)HTML strÃ¡nka obsahujÃºca metadÃ¡ta (napr. Dublin Core [DC], Creative Commons [CC], Friend-Of-A-Friend [FOAF], GeoURL), ktorÃ© sa nachÃ¡dzajÃº buÄ v hlaviÄke dokumentu alebo priamo v jeho tele. XHTML dokument pripravenÃ½ pre extrakciu metadÃ¡t, resp. informÃ¡ciÃ­ ktorÃ© sÃº v dokumente urÄenÃ© metadÃ¡tami konkrÃ©tnej ontolÃ³gie (a patriaci pod âaktÃ­vneâ webovÃ© sÃ­dlo), je zobrazenÃ½ v prÃ­klade 8-8. <html xmlns=âhttp://www.w3.org/1999/xhtmlâ> <head profile=âhttp://www.w3.org/...â> <meta http-equiv=âContent-Typeâ content=âtext/html; charset=windows-1250â /> <title>Domovska stranka Jozefa Mrkvicku [prÃ­klad RDF v XHTML]</title> <link rel=âschema.DCâ href=âhttp://purl.org/dcâ /> <link rel=âmetaâ type=âapplication/rdf+xmlâ title=âFOAFâ href=âhttp://www.w3.org/2000/06/webdata/xslt? xslfile=http://www.firma.sk/~mrkvicka/foaf.xsl; xmlfile=http://www.firma.sk/~mrkvicka/index.htmlâ /> <!-- Dublin Core --> <meta name=âDC.Titleâ xml:lang=âenâ lang=âenâ content=âDomovska stranka Jozefa Mrkvickuâ /> <meta name=âDC.Creatorâ content=âJozef Mrkvickaâ /> <meta name=âDC.Descriptionâ xml:lang=âenâ lang=âenâ content=â...â /> <meta name=âDC.Publisherâ content=âFirma.sk - http://www.firma.skâ /> <link rel=âtransformationâ href=âFOAF.xslâ /> <link rel=âtransformationâ href=âCC.xslâ /> <link rel=âtransformationâ href=âGeoURL.xslâ /> </head>"
129,19,0.568,Sprievodca licenciami Creative Commons,"PodobnÃ¡ ako CC BY, ibaÅ¾e ÄalÅ¡Ã­ pouÅ¾Ã­vatelia nesmÃº vytvÃ¡raÅ¥ novÃ© verzie, meniÅ¥, ani akokoÄ¾vek pracovaÅ¥ s vaÅ¡Ã­m dielom na komerÄnÃ© ÃºÄely. Hoci odvodenÃ© diela musia uvÃ¡dzaÅ¥ autora a mÃ´Å¾u byÅ¥ pouÅ¾itÃ© len na nekomerÄnÃ© ÃºÄely, nemusia byÅ¥ Å¡Ã­renÃ© pod rovnakou licenciou. TÃ¡to licencia umoÅ¾Åuje ostatnÃ½m vytvÃ¡raÅ¥ novÃ© verzie, meniÅ¥ a akokoÄ¾vek pracovaÅ¥ s vaÅ¡Ã­m dielom len na nekomerÄnÃ© ÃºÄely, s uvedenÃ­m autora a musia byÅ¥ Å¡Ã­renÃ© pod rovnakou licenciou."
240,483,0.568,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"A. Maximum Proces tvorby rieÅ¡enia zahÅÅa rÃ´zne nepredvÃ­danÃ© situÃ¡cie a rozhodnutia, ktorÃ© musÃ­ programÃ¡tor spraviÅ¥, aby dospel k nejakÃ©mu uspokojivÃ©mu rieÅ¡eniu. PokÃºsime sa na prÃ­klade pomerne jednoduchej Ãºlohy spolu preskÃºmaÅ¥ a objaviÅ¥ moÅ¾nosti, ktorÃ© sa otvÃ¡rajÃº, pri rieÅ¡enÃ­ aj takejto zdanlivo jednoduchej Ãºlohy. Zadanie: Na vstupe je postupnosÅ¥ reÃ¡lnych ÄÃ­sel, ktorÃ© chceme analyzovaÅ¥."
135,308,0.568,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â rÃ¡mce podnikovÃ½ch aplikÃ¡ciÃ­ â slÃºÅ¾ia na vÃ½voj aplikÃ¡ciÃ­ a produktov pre koncovÃ©ho pouÅ¾Ã­vatea. PouÅ¾Ã­vajÃº sa aj pri vÃ½voji domÃ©novo-Å¡pecifickÃ½ch aplikÃ¡ciÃ­, napr. pre vedu, letectvo a pod. DruhÃ½m spÃ´sobom klasifikÃ¡cie poda FS je klasifikÃ¡cia, kde je ako kritÃ©rium stanovenÃ½ spÃ´sob, akÃ½m sa rÃ¡mec mÃ´Å¾e adaptova alebo upravova, aby sp al poÅ¾iadavky na zmeny v domÃ©ne:"
184,341,0.568,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 4-14. HlavnÃ¡ ÄasÅ¥ architektÃºry WinFS. Toto jednoduchÃ© rozÅ¡Ã­renie sÃºborovÃ©ho systÃ©mu UNIX vÅ¡ak v podstate len menÃ­ vyhÄ¾adÃ¡vanie zo stavu: program, ktorÃ½ prehÄ¾adÃ¡va poÅ¾adovanÃ© sÃºbory (vÅ¡etky otvorÃ­ a prezrie) na: program, ktorÃ½ otvorÃ­ kaÅ¾dÃ½ sÃºbor a tento vyhÄ¾adÃ¡vacÃ­ program podstrÄÃ­ tomuto sÃºboru aby nieÄo naÅ¡iel (pre kaÅ¾dÃ½ jeden sÃºbor zvlÃ¡Å¡Å¥). OtÃ¡zkou teda mÃ´Å¾e byÅ¥, Äo tento prÃ­stup prinÃ¡Å¡a, Äo v sÃºÄasnosti nie je moÅ¾nÃ© spraviÅ¥ inÃ½mi (jednoduchÅ¡Ã­mi) prostriedkami."
369,253,0.568,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"kartovej spoloÄnosti. InÅ¡tancia triedy ZÃ¡kladnÃ½ produkt pre platobnÃº kartu je nadstavbou inej inÅ¡tancie triedy ZÃ¡kladnÃ½ produkt, ktorÃ¡ reprezentuje beÅ¾nÃ½ ÃºÄet. ï· PrenÃ¡jom bezpeÄnostnej schrÃ¡nky â inÅ¡tancia triedy ZÃ¡kladnÃ½ produkt s asociÃ¡ciou na Typ predmetu zmluvy, ktorou je BezpeÄnostnÃ¡ schrÃ¡nka. KeÄÅ¾e potenciÃ¡lne mÃ´Å¾e byÅ¥ viacero typov ÃºÄtov klienta, resp. viacero typov predmetov zmluvy, relÃ¡cia na ne zo zÃ¡kladnÃ©ho produktu mÃ´Å¾e maÅ¥ nÃ¡sobnosÅ¥ mnoho. PrÃ­kladmi balÃ­kov produktov sÃº: ï· BeÅ¾nÃ½ ÃºÄet s elektronickou debetnou platobnou kartou â vytvorÃ­ sa inÅ¡tancia triedy BalÃ­k produktov, ktorÃ¡ agreguje dve inÅ¡tancie triedy ZÃ¡kladnÃ½ produkt: beÅ¾nÃ½ ÃºÄet a debetnÃº platobnÃº kartu. DebetnÃ¡ platobnÃ¡ karta je nadstavbovÃ½ produkt nad beÅ¾nÃ½m ÃºÄtom. InÅ¡tancia triedy ZÃ¡kladnÃ½ produkt zodpovedajÃºca beÅ¾nÃ©mu ÃºÄtu mÃ¡ asociÃ¡ciu na inÅ¡tanciu triedy Typ ÃºÄtu klienta, ktorÃ¡ predstavuje âtechnickÃ½â beÅ¾nÃ½ ÃºÄet. ï· BeÅ¾nÃ½ ÃºÄet s elektronickou debetnou platobnou kartou a kreditnou platobnou kartou â inÅ¡tancia triedy BalÃ­k produktov agreguje Å¡tyri inÅ¡tancie triedy ZÃ¡kladnÃ½ produkt: pre beÅ¾nÃ½ ÃºÄet, pre ÃºverovÃ½ ÃºÄet, pre elektronickÃº debetnÃº platobnÃº kartu a pre kreditnÃº platobnÃº kartu. ElektronickÃ¡ debetnÃ¡ platobnÃ¡ karta je nadstavbou beÅ¾nÃ©ho ÃºÄtu a kreditnÃ¡ platobnÃ¡ karta je nadstavbou ÃºverovÃ©ho ÃºÄtu. ï· Sporiaci ÃºÄet s embosovanou debetnou platobnou kartou a kreditnou platobnou kartou â inÅ¡tancia triedy BalÃ­k produktov agreguje pÃ¤Å¥ inÅ¡tanciÃ­ triedy ZÃ¡kladnÃ½ produkt: pre beÅ¾nÃ½ ÃºÄet, sporiaci ÃºÄet, ÃºverovÃ½ ÃºÄet, embosovanÃº debetnÃº platobnÃº kartu a kreditnÃº platobnÃº kartu. Sporiaci ÃºÄet je nadstavba beÅ¾nÃ©ho ÃºÄtu, embosovanÃ¡ debetnÃ¡ platobnÃ¡ karta je nadstavba toho istÃ©ho beÅ¾nÃ©ho ÃºÄtu a kreditnÃ¡ platobnÃ¡ karta je nadstavba ÃºverovÃ©ho ÃºÄtu."
135,69,0.568,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ProblÃ©my mÃ´Å¾e spÃ´sobi aj nekonzistencia stavu entity pri odoslanÃ­ notifikÃ¡cie o jeho zmene. MÃ´Å¾e sa sta, Å¾e notifikÃ¡cia sa odoÅ¡le v ase, ke eÅ¡te nedoÅ¡lo k Ãºplnej zmene stavu, a nastane konflikt. PrÃ¡ve z tohto dÃ´vodu bÃ½va metÃ³da notifikujPozorovatele() niekedy zapuzdrenÃ¡ ako privÃ¡tna metÃ³da. NÃ¡strahou pouÅ¾itia vzoru je aj vÃ½konnos metÃ³dy aktualizuj(), do ktorej je sÃºstredenÃ¡ celÃ¡ logika reakcie na zmenu stavu predmetu pozorovania."
184,200,0.568,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Rad vÃ½robkov ICDE NÃ¡beh na SPL vÃ½voj nebol pre ICDE tÃ­m len otÃ¡zkou architektÃºry. KaÅ¾dÃ½ produkt mal skupinu Ä¾udÃ­ riadenÃº zÃ¡kaznÃ­kom, ktorÃ¡ bola zainteresovanÃ¡ do definovania poÅ¾iadaviek pre novÃ© produkty. KeÄÅ¾e kaÅ¾dÃ½ produkt vychÃ¡dzal z toho istÃ©ho jadra bolo potrebnÃ© jednotlivÃ© poÅ¾iadavky skombinovaÅ¥, aby nevznikali kolÃ­zie a ani naopak veÄ¾a poÅ¾iadaviek nebolo rovnakÃ½ch a nevznikali duplicity. Preto bolo nevyhnutnÃ© vytvoriÅ¥ rozhranie pre zber poÅ¾iadaviek. SpoloÄnÃ© rozhranie pre sprÃ¡vu poÅ¾iadaviek od jednotlivÃ½ch zÃ¡kaznÃ­kov nebolo moÅ¾nÃ© realizovaÅ¥, pretoÅ¾e tÃ­m nechcel aby naprÃ­klad zÃ¡kaznÃ­k z finanÄnÃ©ho sektora vedel detaily o spravodajskom systÃ©me a naopak. Preto sa ICDE tÃ­m rozhodol zriadiÅ¥ oddelenÃ© systÃ©my pre zber poÅ¾iadaviek zÃ¡kaznÃ­kov. Tieto systÃ©my boli priamo prepojenÃ© na internÃ½ systÃ©m pre zber poÅ¾iadaviek, ktorÃ½ spravoval vÅ¡etky poÅ¾iadavky od vÃ½vojÃ¡rov aÅ¾ po zÃ¡kaznÃ­kov. Takto boli vÅ¡etky poÅ¾iadavky prÃ­stupnÃ© na jednom mieste, ÄÃ­m sa vytvoril efektÃ­vny nÃ¡stroj na rieÅ¡enie duplicÃ­t a konfliktov. StratÃ©giou ICDE tÃ­mu bolo vydaÅ¥ z 3 pripravovanÃ½ch produktov ten najjednoduchÅ¡Ã­ ako prvÃ½. Bol nÃ­m produkt pre vlÃ¡dny sektor, na ktorom krÃ¡tko po vydanÃ­ naÅ¡iel zÃ¡kaznÃ­k niekoÄ¾ko chÃ½b. ICDE tÃ­m dokÃ¡zal reagovaÅ¥ veÄ¾mi pruÅ¾ne a nÃ¡jdenÃ© chyby rÃ½chlo odstrÃ¡nil. Dobrou sprÃ¡vou bolo, Å¾e jedna z nÃ¡jdenÃ½ch chÃ½b bola chybou jadra, konkrÃ©tne v komponente Data Collection, ktorÃº vyuÅ¾Ã­vajÃº vÅ¡etky tri aplikÃ¡cie a na ktorÃº by narazili aj ostatnÃ­ zÃ¡kaznÃ­ci, Äo bol jeden zo skorÃ½ch prÃ­nosov vÃ½voja SPL. ZlÃ¡ sprÃ¡va priÅ¡la ihneÄ po vydanÃ­ zvyÅ¡nÃ½ch produktov. ZÃ¡kaznÃ­k z finanÄnÃ©ho sektora objavil defekt produktu, ktorÃ½ bol spÃ´sobenÃ½ chybou v komponente Data Analysis. Chyba bola rieÅ¡iteÄ¾nÃ¡ jednoduchÃ½m zÃ¡sahom do jadra. AvÅ¡ak zÃ¡kaznÃ­k z prostredia vlÃ¡dy mal dokonÄenÃ© akceptaÄnÃ© testy a produkt uÅ¾ vyuÅ¾Ã­val v praxi. Zmena jadra by znamenala aj zmenu aplikÃ¡cie pre vlÃ¡dny sektor, ÄÃ­m by bol zÃ¡kaznÃ­k nÃºtenÃ½ eÅ¡te raz vykonaÅ¥ vÅ¡etky akceptaÄnÃ© testy, Äo by stÃ¡lo Äas a peniaze. Pritom nÃ¡jdenÃ¡ chyba ovplyvÅovala iba funkcionalitu produktu pre finanÄnÃ½ sektor. ICDE tÃ­m mal veÄ¾kÃ½ zÃ¡ujem odstrÃ¡niÅ¥ chybu modifikovanÃ­m jadra a zÃ¡roveÅ chcel uspokojiÅ¥ kaÅ¾dÃ©ho zÃ¡kaznÃ­ka. RozmÃ½Å¡Ä¾ali o obÃ­denÃ­ modifikÃ¡cie jadra modifikÃ¡ciou"
184,330,0.567,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 4-10. PrÃ­klad vÃ½stupu transformÃ¡torov. Rozhranie asociatÃ­vneho prÃ­stupu k sÃ©mantickÃ©mu sÃºborovÃ©mu systÃ©mu je zaloÅ¾enÃ© na dopytoch, ktorÃ© opisujÃº poÅ¾adovanÃ© atribÃºty entÃ­t (alebo znaÄiek). Dopyt je teda opisom poÅ¾adovanÃ½ch atribÃºtov, ktorÃ© umoÅ¾ÅujÃº vysokÃ½ stupeÅ selektivity pri lokalizÃ¡cii poÅ¾adovanej entity. VÃ½sledkom dopytu je mnoÅ¾ina sÃºborov a/alebo adresÃ¡rov ktorÃ© obsahujÃº opÃ­sanÃ© entity. SÃ©mantickÃ½ sÃºborovÃ½ systÃ©m sa povaÅ¾uje za dopytovo konzistentnÃ½, keÄ zaruÄuje takÃ½ vÃ½sledok dopytu, ktorÃ½ koreÅ¡ponduje s aktuÃ¡lnym obsahom sÃºborovÃ©ho systÃ©mu. Ak sÃº ukonÄenÃ© aktualizÃ¡cie obsahu sÃ©mantickÃ©ho sÃºborovÃ©ho systÃ©mu, tak mÃ´Å¾e spÄºÅaÅ¥ poÅ¾iadavky na dopytovÃº konzistenciu. TÃ¡to vlastnosÅ¥ je znÃ¡ma ako konvergentnÃ¡ konzistencia. V prÃ­pade, Å¾e sa v sÃ©mantickom sÃºborovom systÃ©me pouÅ¾Ã­vajÃº vhodnÃ© atomickÃ© transakcie je moÅ¾nÃ© dosiahnuÅ¥ stÃ¡lu dopytovÃº konzistenciu. V (Gifford et al., 1991) tvoria poloÅ¾ky adresÃ¡ra s menom atribÃºtu virtuÃ¡lne adresÃ¡re hodnÃ´t. VirtuÃ¡lny adresÃ¡r hodnÃ´t obsahuje jednu poloÅ¾ku pre kaÅ¾dÃ½ sÃºbor (alebo adresÃ¡r), ktorÃ½ spÄºÅa vlastnosti popÃ­sanÃ© menom atribÃºtu a hodnotou. VirtuÃ¡lny adresÃ¡r /sfs/owner:/neo teda bude v adresÃ¡ri /sfs poskytovaÅ¥ poloÅ¾ky sÃºborov, ktorÃ© vlastnÃ­ pouÅ¾Ã­vateÄ¾ Neo. KaÅ¾dÃ¡ poloÅ¾ka je symbolickÃ½m odkazom na skutoÄnÃ½ sÃºbor."
369,212,0.567,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"KategÃ³rie klientov Z prÃ¡vneho hÄ¾adiska sa klienti banky Älenia do niekoÄ¾kÃ½ch kategÃ³riÃ­: ï· obyvateÄ¾stvo (fyzickÃ© osoby), ï· podnikatelia (Å¾ivnostnÃ­ci a fyzickÃ© osoby, ktorÃ© podnikajÃº na zÃ¡klade licencie, koncesie a pod. ako naprÃ­klad lekÃ¡ri, prÃ¡vnici alebo umelci), ï· podniky a organizÃ¡cie, ï· orgÃ¡ny Å¡tÃ¡tnej sprÃ¡vy, verejnoprÃ¡vne organizÃ¡cie a orgÃ¡ny miestnej samosprÃ¡vy, ï· inÃ© peÅaÅ¾nÃ© Ãºstavy a inÅ¡titÃºcie. Banky si vÅ¡ak zvyÄajne vytvÃ¡rajÃº vlastnÃº kategorizÃ¡ciu klientov, kde viac ako prÃ¡vnu formu zohÄ¾adÅujÃº finanÄnÃ© hÄ¾adisko: ï· fyzickÃ© osoby, ï· podnikatelia, ï· prÃ¡vnickÃ© osoby s niÅ¾Å¡Ã­m finanÄnÃ½m obratom (malÃ© a strednÃ© firmy, orgÃ¡ny miestnej samosprÃ¡vy s niÅ¾Å¡Ã­m obratom a inÃ©), ï· prÃ¡vnickÃ© osoby s vysokÃ½m finanÄnÃ½m obratom (veÄ¾kÃ© firmy, orgÃ¡ny miestnej samosprÃ¡vy veÄ¾kÃ½ch miest a inÃ©), ï· inÃ© peÅaÅ¾nÃ© Ãºstavy a inÅ¡titÃºcie. Å peciÃ¡lnu kategÃ³riu klientov tvorÃ­ tzv. privÃ¡tne bankovnÃ­ctvo, kde klienta poznÃ¡ a eviduje iba Ãºzky okruh osÃ´b a pre ostatnÃ½ch pracovnÃ­kov banky aj v softvÃ©rovÃ½ch systÃ©moch banky vystupuje ako anonymnÃ½ klient. UvedenÃ© kategÃ³rie sa mÃ´Å¾u eÅ¡te detailnejÅ¡ie ÄleniÅ¥ na podkategÃ³rie, napr. fyzickÃ© osoby s pravidelnÃ½m mesaÄnÃ½m prÃ­jmom do urÄitej sumy, fyzickÃ© osoby s pravidelnÃ½m mesaÄnÃ½m prÃ­jmom vyÅ¡Å¡Ã­m ako uvedenÃ¡ suma, fyzickÃ© osoby â zamestnanci banky, Å¡tudenti, dÃ´chodcovia a ÄalÅ¡ie podkategÃ³rie. Na zÃ¡klade kategorizÃ¡cie klientov sa banka zvyÄajne ÄlenÃ­ aj organizaÄne: fyzickÃ© osoby, podnikatelia a prÃ¡vnickÃ© osoby z niÅ¾Å¡Ã­m finanÄnÃ½m obratom patria do organizaÄnej zloÅ¾ky tzv. retailovÃ© (maloobchodnÃ©) bankovnÃ­ctvo. PrÃ¡vnickÃ© osoby s vysokÃ½m finanÄnÃ½m obratom tvoria organizaÄnÃº zloÅ¾ku tzv. korporÃ¡tne (firemnÃ©) bankovnÃ­ctvo. KategorizÃ¡cia klientov relatÃ­vne mÃ¡lo ovplyvÅuje dÃ¡tovÃ© modely operatÃ­vnej Ãºrovne. Naopak, z dÃ´vodu univerzÃ¡lneho spracovania by Ãºstrednou snahou mala byÅ¥ reprezentÃ¡cia klienta jednou vÅ¡eobecnou triedou s prÃ­padnou relÃ¡ciou pre fyzickÃ© a prÃ¡vnickÃ© osoby10"
195,171,0.567,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"9.4 Zhrnutie VÄaka open source projektom a ich voÄ¾nÃ©mu prÃ­stupu k veÄ¾kÃ©mu zdroju dÃ¡t zdrojovÃ½ch kÃ³dov, otvorila sa pre softvÃ©rovÃ© inÅ¾inierstvo cesta ku skvalitneniu vÃ½voja softvÃ©ru za pomoci vytvorenia odporÃºÄacÃ­ch systÃ©mov, ktorÃ© dokÃ¡Å¾u analyzovaÅ¥ predchÃ¡dzajÃºce vytvorenÃ© sÃºÄasti a podÄ¾a potrieb navrhnÃºÅ¥ ich znovupouÅ¾itie. TÃ½mto by sa docielil jednoduchÅ¡Ã­ a hlavne rÃ½chlejÅ¡Ã­ vÃ½voj. BohuÅ¾iaÄ¾, odporÃºÄacie systÃ©my snaÅ¾iac sa tÃºto myÅ¡lienku zrealizovaÅ¥ vznikali a eÅ¡te aj dnes vznikajÃº hlavne na akademickej pÃ´de a v praxi sa len malÃ© mnoÅ¾stvo z nich aj reÃ¡lne uplatnÃ­. Mnoho odporÃºÄacÃ­ch systÃ©mov, ktorÃ© boli v minulosti vytvorenÃ© sa kvÃ´li nedostatku kapacÃ­t nepodarilo udrÅ¾aÅ¥ v aktuÃ¡lnosti a zostarli â ÄiastoÄne ich algoritmus a ÄiastoÄne aj zoznam uÅ¾itoÄnÃ½ch kusov kÃ³du. Do budÃºcna sa otvÃ¡ra otÃ¡zka, ako Äo moÅ¾no najlepÅ¡ie vytvoriÅ¥ odporÃºÄacÃ­ systÃ©m, ktorÃ½ by bol vÅ¡eobecne prijÃ­manÃ½, udrÅ¾ovateÄ¾nÃ½ a dostatoÄne uÅ¾itoÄnÃ½. Okrem mnohÃ½ch moÅ¾nÃ½ch realizÃ¡ciÃ­ odporÃºÄacieho systÃ©mu sme rozobrali aj jednu z nich, kde sme nÃ¡Å¡ odporÃºÄacÃ­ systÃ©m rozdelili na moduly z ktorÃ½ch kaÅ¾dÃ½ plnil svoju ÄiastkovÃº Ãºlohou pre koneÄnÃ½ vÃ½sledok, t.j. navrhnutie znovupouÅ¾iteÄ¾nÃ½ch ÄastÃ­."
265,429,0.567,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"AkÃ¡ je zÃ¡kladnÃ¡ âfilozofiaâ modelovania v UML (sÃºvisÃ­ s iteratÃ­vno-inkrementÃ¡lnym prÃ­stupom)? ZÃ¡kladnÃ¡ filozofia modelovania v UML je postupnÃ¡ konkretizÃ¡cia a modelovanie Äoraz jemnejÅ¡Ã­ch detailov softvÃ©ru. ZaÄÃ­na sa vÅ¾dy s najhrubÅ¡Ã­mi a najdÃ´leÅ¾itejÅ¡Ã­mi Ärtami a detaily sa pokiaÄ¾ moÅ¾no rieÅ¡ia aÅ¾ nakoniec. Nie je prekvapujÃºce, Å¾e takto sa pokÃºÅ¡ame vytvÃ¡raÅ¥ softvÃ©r ako takÃ½, nielen jeho modely â ide totiÅ¾ o najbezpeÄnejÅ¡Ã­ postup v ktorom nÃ¡s najmenej budÃº bolieÅ¥ prÃ­padnÃ© zmeny Å¡pecifikÃ¡cie. PrÃ­klad tejto stratÃ©gie mÃ´Å¾e byÅ¥ naprÃ­klad modelovanie Ãºdajov diagramom tried. Ako prvÃ© identifikujeme, akÃ© entity vÃ´bec budeme uvaÅ¾ovaÅ¥. Potom (aÅ¾ keÄ mÃ¡me rozumnÃº mieru istoty, Å¾e sme na Å¾iadnu nezabudli) urÄÃ­me vzÅ¥ahy medzi nimi a atribÃºty a ich typy urÄÃ­me aÅ¾ nakoniec. Ak by sme k detailom (vzÅ¥ahom ale najmÃ¤ atribÃºtom a typom) preÅ¡li hneÄ, zbytoÄne sa vystavÃ­me riziku ich zmien v dÃ´sledku identifikovania novÃ½ch entÃ­t."
130,149,0.567,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Vzor Abstrakcia biznis sluÅ¾ieb, v angliÄtine znÃ¡my ako Session Facade, slÃºÅ¾i podobne ako predchÃ¡dzajÃºci vzor na oddelenie klienta od biznis sluÅ¾ieb, priÄom za klienta mÃ´Å¾e byÅ¥ povaÅ¾ovanÃ¡ i vyÅ¡Å¡ia vrstva aplikÃ¡cie. VyuÅ¾Ã­va sa v prÃ­pade, Å¾e aplikaÄnÃ¡ logika alebo klientska aplikÃ¡cia vyÅ¾aduje volanie biznis vrstvy. Vzor podobne ako predchÃ¡dzajÃºce vzory zniÅ¾uje nÃ¡roky na vyÅ¥aÅ¾enie siete."
40,96,0.567,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"S pohybem agentÅ¯ se pojÃ­ takÃ© dalÅ¡Ã­ problÃ©my neÅ¾ jen reprezentace prostÅedÃ­. NovÃ© problÃ©my pÅinÃ¡Å¡Ã­ napÅÃ­klad velikÃ© virtuÃ¡lnÃ­ svÄty, ve kterÃ½ch jsou klasickÃ© algoritmy na hledÃ¡nÃ­ nejkratÅ¡Ã­ cesty v grafu pomalÃ©. ProblÃ©my zpÅ¯sobujÃ­ vÃ½tahy, dveÅe Äi schody, pÅi kterÃ½ch se musÃ­ klÃ¡st zvÃ½Å¡enÃ¡ opatrnost pÅi spouÅ¡tÄnÃ­ animacÃ­, a v neposlednÃ­ ÅadÄ problÃ©my pÅinÃ¡Å¡Ã­ takÃ© koordinace pohybu velkÃ©ho poÄtu agentÅ¯ Äi pohyb skupinek agentÅ¯ ve formacÃ­ch. Pokud prostÅedÃ­ zaÄne bÃ½t pÅÃ­liÅ¡ velkÃ©, ÅeÅ¡Ã­ se vyhledÃ¡vÃ¡nÃ­ cesty v grafu pomocÃ­ hierarchickÃ©ho plÃ¡novÃ¡nÃ­ cest [4]. VÃ½tahy, dveÅe a schody lze ÅeÅ¡it napÅÃ­klad speciÃ¡lnÃ­mi navigaÄnÃ­mi body, ve kterÃ½ch se animace synchronizujÃ­ a pohyb velkÃ©ho poÄtu agentÅ¯ lze elegantnÄ ÅeÅ¡it jiÅ¾ zmÃ­nÄnÃ½m steeringem."
190,312,0.567,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Kvalita produktu je danÃ¡ tÃ½m, do akej miery spÄºÅa jednotlivÃ© charakteristiky. Je pomerne nÃ¡roÄnÃ© urÄiÅ¥, ktorÃ© z nich sÃº pre stanovenie celkovej kvality najdÃ´leÅ¾itejÅ¡ie. No je pomerne jednoduchÃ© urÄiÅ¥, ktorÃ© z tÃ½chto vlastnostÃ­ sÃº prioritnÃ© pre jednotlivÃ© skupiny Ä¾udÃ­ pracujÃºcich so softvÃ©rom. Priority pouÅ¾Ã­vateÄ¾a sÃº, aby program robil to Äo mÃ¡, fungoval bez vÃ½padkov a najmÃ¤, aby sa s nÃ­m dobre pracovalo. Teda pre beÅ¾nÃ©ho pouÅ¾Ã­vateÄ¾a nie je dÃ´leÅ¾itÃ©, Äi dokÃ¡Å¾e bez problÃ©mov doprogramovaÅ¥ do svojho textovÃ©ho editora modul pre spoluprÃ¡cu s expertnÃ½m systÃ©mom, ale Äi bude vedieÅ¥ pohodlne a Ä¾ahko pridaÅ¥ do svojho dokumentu obrÃ¡zok, bez toho, aby mu program zamrzol a spadol. A chybovÃ¡ sprÃ¡va na Ãºrovni kÃ³du, ktorÃ¡ sa po spadnutÃ­ ukÃ¡Å¾e moÅ¾no pomÃ´Å¾e programÃ¡torovi lokalizovaÅ¥ a odstrÃ¡niÅ¥ chybu, ale normÃ¡lne pouÅ¾Ã­vateÄ¾a len eÅ¡te viac nahnevÃ¡. PouÅ¾ijÃºc jazyk normy ISO/IEC 9126: pouÅ¾iteÄ¾nosÅ¥, funkÄnosÅ¥ a bezporuchovosÅ¥. Na druhej strane, vÃ½vojÃ¡r bude pri programovanÃ­ dbaÅ¥ na to, aby bol program Äo najprehÄ¾adnejÅ¡ie napÃ­sanÃ½, aby sa s jeho jednotlivÃ½mi ÄasÅ¥ami dalo pekne jednoducho manipulovaÅ¥, meniÅ¥ ich a prispÃ´sobovaÅ¥ tomu Äo prÃ¡ve potrebuje do programu pridaÅ¥, odstrÃ¡niÅ¥ alebo zmeniÅ¥. Inak povedanÃ© udrÅ¾ovateÄ¾nosÅ¥ a prenosnosÅ¥. JedinÃ¡ poloÅ¾ka, ktorÃ¡ zostala nepovÅ¡imnutÃ¡ je efektivita. Aj napriek tomu, Å¾e efektivita je veÄ¾mi dÃ´leÅ¾itÃ¡, podÄ¾a mÃ´jho nÃ¡zoru je aÅ¾ niekde na chvoste Priority rebrÃ­Äka dÃ´leÅ¾itosti tÃ½chto charakteristÃ­k. ProgramÃ¡tor totiÅ¾ ako tvor lenivÃ½, pouÅ¾Ã­vateÄ¾a sÃº samozrejme aÅ¾ na svetlÃ© vÃ½nimky, radÅ¡ej oÅ¾elie nejakÃº tu inÅ¡trukciu alebo inÃ© ako priority prÃ­kaz navyÅ¡e, ako by mal zmeniÅ¥ ÄasÅ¥ alebo celÃ½ program. Samozrejme nevÃ½vojÃ¡ra. hovorÃ­me tu o bohapustom plytvanÃ­ strojovÃ©ho Äasu, ale ruku na srdce, vÃ¤ÄÅ¡ina Ä¾udÃ­ predsa len Å¾ije a aj programuje cestou menÅ¡ieho odporu. PouÅ¾Ã­vateÄ¾ tieÅ¾ rÃ¡d odpustÃ­ svojmu obÄ¾ÃºbenÃ©mu programu to, Å¾e Å¡tartuje o nejakÃº tÃº sekundiÄku dlhÅ¡ie, Å¾e vÃ½poÄet sa nevykonÃ¡ tak rÃ½chlo ako u inÃ©ho programu, podstatnÃ© je, Å¾e tento program robÃ­ to Äo robiÅ¥ mÃ¡, a Å¾e s nÃ­m je aj napriek jeho muchÃ¡m zÅ¾itÃ½ a vie s nÃ­m pracovaÅ¥ bez vÃ¤ÄÅ¡ej nÃ¡mahy. Napriek tomu sa prÃ¡ve efektivita stala povestnou ÄereÅ¡niÄkou na torte, ktorÃ¡ oddeÄ¾uje dobrÃ½ch od najlepÅ¡Ã­ch a najlepÅ¡Ã­ch od excelentnÃ½ch. Paradoxne charakteristika, nad ktorou vÃ¤ÄÅ¡ina Ä¾udÃ­ privrie oko a mÃ¡vne rukou je tÃ½m, podÄ¾a Äoho si kaÅ¾dÃ½ trochu rozumnÃ½ pouÅ¾Ã­vateÄ¾ nakoniec vyberie medzi dvoma softvÃ©rovÃ½mi produktami, ktorÃ© poskytujÃº rovnakÃº funkcionalitu, stabilitu a pouÅ¾Ã­vateÄ¾skÃº prÃ­vetivosÅ¥. VÃ½vojÃ¡ri budÃº zase na druhej strane celÃ­ pyÅ¡nÃ­ na to, akÃ½ optimÃ¡lny program sa im podarilo napÃ­saÅ¥ a v dokumentÃ¡cii k projektu nezabudnÃº priloÅ¾iÅ¥ sÃ©riu grafov, z ktorÃ½ch je jasne vidno, Å¾e pri spracovanÃ­ Ãºdajov na beÅ¾nej vstupnej mnoÅ¾ine prÃ¡ve ten ich program pracuje presne o 0,7223 sekundy rÃ½chlejÅ¡ie, ako ostatnÃ© programy, ktorÃ© navyÅ¡e zoÅ¾erÃº o celÃ© dva megabajty pamÃ¤te viac."
130,404,0.567,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"TÃ¡to kapitola sa pokÃºsi poskytnÃºÅ¥ prehÄ¾ad zÃ¡kladnÃ½ch metÃ³d plÃ¡novania a niektorÃ½ch ich modifikÃ¡ciÃ­ s prihliadnutÃ­m na ich moÅ¾nÃ© pouÅ¾itie v multiagentovÃ½ch systÃ©moch. ProblÃ©m plÃ¡novania je jednÃ½m z najstarÅ¡Ã­ch problÃ©mov umelej inteligencie. ProblÃ©m plÃ¡novania moÅ¾no vyjadriÅ¥ ako hÄ¾adanie ÄinnostÃ­ (Äi uÅ¾ zoradenÃ½ch sekvenÄne alebo Äasovo sa prekrÃ½vajÃºcich), ktorÃ© pre danÃ© zadanie spÃ´sobia jeho vyrieÅ¡enie. NavyÅ¡e, klasickÃ¡ umelÃ¡ inteligencia na plÃ¡novanie kladie ÄalÅ¡ie poÅ¾iadavky, a to racionalitu a zdÃ´vodniteÄ¾nosÅ¥ rozhodnutÃ­ a vÃ½beru ÄinnostÃ­, ktorÃ© sa budÃº vykonÃ¡vaÅ¥. ProblÃ©m vytvÃ¡rania plÃ¡nov nie je triviÃ¡lny ani v prÃ­pade, Å¾e vykonÃ¡vanie plÃ¡nu nie je distribuovanÃ© a plÃ¡n sa vykonÃ¡va sekvenÄne. NÃ¡jdenie optimÃ¡lneho plÃ¡nu (optimÃ¡lnej postupnosti krokov, ktorÃ© treba vykonaÅ¥) je vo vÅ¡eobecnosti nerozhodnuteÄ¾nÃ½"
76,256,0.567,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"pretoÅ¾e je sÃºÄtom nÃºl a jednotiek. Nie je problÃ©m urÄiÅ¥ aj rozdelenie veliÄiny avÅ¡ak najprv objasnime, kedy ide o situÃ¡cie, v ktorÃ½ch mÃ¡me do Äinenia s postupnosÅ¥ou ( ), ktorej Äleny sÃº nezÃ¡vislÃ© veliÄiny s tÃ½m istÃ½m, alternatÃ­vnym rozdelenÃ­m. 5.1.2 Predstavme si nÃ¡hodnÃ½ pokus, ktorÃ½ spoÄÃ­va v -nÃ¡sobnom nezÃ¡vislom opakovanÃ­ nejakÃ©ho (jednoduchÃ©ho) pokusu. V tom jednoduchom pokuse pozorujeme nastatie, resp. nenastatie nejakej nÃ¡hodnej udalosti A. Tak ako uÅ¾ viackrÃ¡t predtÃ½m (Äl. 2.4) s -tÃ½m opakovanÃ­m pokusu spojÃ­me predstavu veliÄiny , ktorÃ¡ je indikÃ¡torom udalosti A. To znamenÃ¡, Å¾e nadobÃºda hodnotu 1 prÃ¡ve vtedy, ak udalosÅ¥ A v -tom opakovanÃ­ pokusu nastane a nadobÃºda hodnotu 0 prÃ¡ve vtedy, ak A v -tom opakovanÃ­ pokusu nenastane. Takto mÃ¡me ~ A( ), kde = P(A), pre = 1, 2, ... , , ... . VÄaka tomu, Å¾e ide o nezÃ¡vislÃ© opakovanie pokusu, sÃº veliÄiny nezÃ¡vislÃ©. PretoÅ¾e udalosÅ¥ A, teda"
236,53,0.566,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Na vytvorenie Ãºvodzoviek sa nepouÅ¾Ã­va prÃ­kaz "", ako na pÃ­sacom stroji. Pri tlaÄi existujÃº Å¡peciÃ¡lne otvÃ¡racie a zatvÃ¡racie Ãºvodzovky. V LATEXu sa pouÅ¾Ã­vajÃº dva znaky â na otvorenie a dva â na zatvorenie Ãºvodzoviek.4"
369,144,0.566,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Ako naznaÄili situÃ¡cie pre modely na obr. 3.7 a 3.8, vo vÅ¡eobecnosti rozliÅ¡ujeme dva typy nÃ¡rokovania zÃ¡vÃ¤zku: 1. Å½iadanÃ½ nÃ¡rok â nÃ¡rokovanie inicializuje externÃ½ partner a zvyÄajne ho sprevÃ¡dza podanie nejakÃ©ho dokumentu. PrÃ­kladom je podanÃ¡ objednÃ¡vka partnera. 2. OpakujÃºci sa nÃ¡rok â nÃ¡rokovanie sa vyvolÃ¡va automaticky v pravidelnÃ½ch ÄasovÃ½ch intervaloch. PrÃ­kladom je pravidelnÃ¡ mesaÄnÃ¡ zÃºÄtovacia faktÃºra. Posudzovania zÃ¡vÃ¤zkov."
196,82,0.566,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Potrebujeme ho napÃ­satâ po slovensky a teda vrÃ¡tane interpunkcie ale aj Å¡peciÃ¡lnych znakov cÌi symbolov. TÃºto informÃ¡ciu musÃ­me posunÃºtâ programu, aby vedel, akÃ© kÃ³dovanie pouÅ¾Ã­va vstupnÃ½ dokument (input encoding). Inak LATEX sprÃ¡vne nerozpoznÃ¡ slovenskÃ½ text. UrobÃ­me tak pouÅ¾itÃ­m balÃ­ka inputenc [19], ktorÃ½ sa o to postarÃ¡. V hranatÃ½ch zÃ¡tvorkÃ¡ch uvedieme pouÅ¾itÃ© kÃ³dovanie. Vzhlâadom na rÃ´znorodostâ rieÅ¡enÃ­ a prednastavenÃ½ch kÃ³dovanÃ­ je preto vhodnÃ© povedatâ prekladacÌu ako mÃ¡ cÌÃ­tatâ vstupnÃ½ dokument . NasledovnÃ½ riadok hovorÃ­, Å¾e vstup (jednotlivÃ© znaky v texte) bude prekladacÌ cÌÃ­tatâ ako znaky znakovej sady utf8 . \usepackage[utf8]{inputenc} V konecÌnom dÃ´sledku je dÃ´leÅ¾itÃ©, aby nastavenie kÃ³dovania editora sedelo s kÃ³dovanÃ­m uvedenÃ½m v inputenc vytvÃ¡ranÃ©ho dokumentu. NasledovnÃ½ MWE plnohodnotne nerieÅ¡i slovenskÃº diakritiku, a prednastavenÃ¡ sadzba v LATEXu nie je korektnÃ¡ pre vÅ¡etky pÃ­smenÃ¡ Å¡peciÃ¡lne: dâ, tâ, lâ ako to vidno na obr. 3.2."
43,49,0.566,Objektovo orientovanÃ© programovanie v C++,"2.2 Filozoï¬a jazyka C++ Stroustrup si pri tvorbe svojho novÃ©ho jazyka vytÃ½Äil niekoÄ¾ko cieÄ¾ov, ktorÃ½mi sa po celÃ½ Äas riadil. Dokonca hovorÃ­, Å¾e ako nadÅ¡enÃ½ fanÃºÅ¡ik ï¬lozoï¬e sa inÅ¡piroval nielen svojimi programÃ¡torskÃ½mi skÃºsenosÅ¥ami, ale v rovnakej miere aj dielami svojich obÄ¾ÃºbenÃ½ch ï¬lozofov. Jazyk, ktorÃ©ho predstava sa mu postupne formovala v hlave, nemal teda len rieÅ¡iÅ¥ konkrÃ©tne praktickÃ© problÃ©my, s ktorÃ½mi zÃ¡pasil, ale mal maÅ¥ aj akÃºsi svoju ï¬lozoï¬u prÃ­buznÃº jeho vlastnÃ½m ï¬lozoï¬ckÃ½m ideÃ¡lom. Jazyk C++ jednoznaÄne vÄaÄÃ­ za svoj Ãºspech a popularitu prÃ¡ve spÃ´sobu, akÃ½m pracuje a akÃ½m bol navrhnutÃ½, a jeho zÃ¡kladnÃ© princÃ­py z neho robia silnÃ½, efektÃ­vny a v podstate univerzÃ¡lny prostriedok pre tvorbu poÄÃ­taÄovÃ½ch programov. O nÃ¡vrhu a vÃ½voji C++ sa podrobne hovorÃ­ v Stroustrupovej knihe [6]. Tu uvÃ¡dzame niekoÄ¾ko najdÃ´leÅ¾itejÅ¡Ã­ch princÃ­pov, ktorÃ© urÄili charakter tohto programovacieho jazyka. â¢ C++ musÃ­ byÅ¥ univerzÃ¡lne pouÅ¾iteÄ¾nÃ½ jazyk, nie jazyk urÄenÃ½ pre nejakÃ½ konkrÃ©tny typ aplikÃ¡ciÃ­."
94,138,0.566,Sprievodca svetom vedeckÃ©ho publikovania,"5.1.1 MedzinÃ¡rodnÃ¡ ochrana autorskÃ½ch prÃ¡v Pri vedeckom publikovanÃ­ sa autor Äasto pohybuje na medzinÃ¡rodnej pÃ´de a zÃ¡kony rÃ´znych krajÃ­n sa prirodzene lÃ­Å¡ia aj v miere rozsahu ochrany autorskÃ½ch prÃ¡v. Kedysi nebolo samozrejmosÅ¥ou reÅ¡pektovaÅ¥ autorskÃ© prÃ¡va cudzÃ­ch Å¡tÃ¡tnych prÃ­sluÅ¡nÃ­kov. VydavateÄ¾ mohol naprÃ­klad vydaÅ¥ preklad diela zahraniÄnÃ©ho autora bez jeho povolenia Äi vyplatenia honorÃ¡ra. Text mohol dokonca Ä¾ubovoÄ¾ne upraviÅ¥ (naprÃ­klad prvÃ© anglickÃ© preklady romÃ¡nov Julesa Vernea trpeli vynechanÃ½mi, ale aj svojvoÄ¾ne pridanÃ½mi pasÃ¡Å¾ami). Tento pre autorov neprÃ­jemnÃ½ stav zmenil aÅ¾ v roku 1886 BernskÃ½ dohovor o ochrane literÃ¡rnych a umeleckÃ½ch diel (WIPO 1886), ktorÃ½ sa vzÅ¥ahuje aj na diela vedeckÃ©. Å tÃ¡ty dohovoru sa zaviazali chrÃ¡niÅ¥ autorskÃ© prÃ¡va prÃ­sluÅ¡nÃ­kov ostatnÃ½ch Å¡tÃ¡tov dohovoru tak, akoby to boli ich vlastnÃ­ obÄania. O vznik dohody sa vÃ½znamne zaslÃºÅ¾il Victor Hugo v Äele MedzinÃ¡rodnej literÃ¡rnej a umeleckej asociÃ¡cie (Association LittÃ©raire et Artistique Internationale, ALAI), vÄaka Äomu BernskÃ½ dohovor nesie vplyv francÃºzskeho autorskÃ©ho prÃ¡va. KÃ½m anglo-americkÃ½ pojem copyright sa zaoberÃ¡ najmÃ¤ ekonomickou strÃ¡nkou autorstva, francÃºzsky koncept droit dâauteur odliÅ¡uje majetkovÃ© a osobnostnÃ© prÃ¡va, ako ich poznÃ¡me aj v slovenskom zÃ¡kone. BernskÃ½ dohovor zaruÄuje zÃ¡kladnÃº, minimÃ¡lnu ochranu autorskÃ½ch prÃ¡v, zvyÅ¡ok ponechÃ¡va na zÃ¡konoch jednotlivÃ½ch krajÃ­n. VÃ½chodiskom pre posudzovanie ochrany diela je krajina pÃ´vodu, kde bolo dielo prvÃ½ raz uverejnenÃ©. Ak bolo sÃºÄasne (v rozmedzÃ­ 30 dnÃ­) uverejnenÃ© vo viacerÃ½ch krajinÃ¡ch, urÄuje sa lehota ochrany diela podÄ¾a krajiny s najniÅ¾Å¡ou lehotou (aspoÅ 50 rokov po smrti autora). Dohovor vÅ¡ak nebrÃ¡ni jednotlivÃ½m Å¡tÃ¡tom urÄiÅ¥ si prÃ­snejÅ¡ie pravidlÃ¡, naprÃ­klad v EurÃ³pskej Ãºnii sÃº podÄ¾a smernice 2006/116/EC diela chrÃ¡nenÃ© 70 rokov po smrti autora. BernskÃ½ dohovor bol od svojho vzniku niekoÄ¾kokrÃ¡t revidovanÃ½ (naposledy v ParÃ­Å¾i v roku 1971). Od roku 1967 zaÅ zodpovedÃ¡ SvetovÃ¡ organizÃ¡cia duÅ¡evnÃ©ho vlastnÃ­ctva (World Intellectual Property Organization, WIPO) pri OSN. Dnes je BernskÃ½ dohovor ratifikovanÃ½ takmer na celom svete s vÃ½nimkou niekoÄ¾kÃ½ch africkÃ½ch a Ã¡zijskÃ½ch krajÃ­n. Slovensko pristÃºpilo k BernskÃ©mu dohovoru v roku 1921 a ako sÃºÄasÅ¥ Äeskoslovenska ratifikovalo aj vÅ¡etky revÃ­zie (zÃ¡kon Ä. 133/1980 Z. z., v znenÃ­ vyhlÃ¡Å¡ky Ä. 19/1985 Z. z.) a ÄalÅ¡ie vÃ½znamnÃ© medzinÃ¡rodnÃ© dohody tÃ½kajÃºce sa autorskÃ½ch prÃ¡v, ako Å¾enevskÃ½ VÅ¡eobecnÃ½ dohovor o autorskom prÃ¡ve (1952, revidovanÃ½ v ParÃ­Å¾i 1971 a pre Slovensko ratifikovanÃ½ vyhlÃ¡Å¡kou ministerstva zahraniÄnÃ½ch vecÃ­ Ä. 134/1980 Z. z.). NeskÃ´r ako samostatnÃ½ Å¡tÃ¡t ratifikovalo Dohodu o obchodnÃ½ch aspektoch prÃ¡v duÅ¡evnÃ©ho vlastnÃ­ctva (Agreement on Trade Related Aspects of Intellectual Property Rights â TRIPS,"
240,141,0.566,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"do obrazca pridaÅ¥. Napr. pridanÃ­m podmienky i < n/2 do vÃ½razu v riadku 13 by sme (bodkami) vyplnili aj plochu hornej polovice Å¡tvorca. Ãloha 2-15 (rieÅ¡enie) NajskÃ´r musÃ­me definovaÅ¥ premennÃ©, ktorÃ© sÃº v programe pouÅ¾itÃ©. V riadku 6 do premennej n naÄÃ­tavame cez formÃ¡tovacÃ­ reÅ¥azec %d celÃ© ÄÃ­slo typu int. Äalej v programe pracujeme s dvoma riadiacimi premennÃ½mi cyklu (i a j), ktorÃ© rozsahom (rÃ¡dovo) zodpovedajÃº rozmeru hviezdy (2*n+1), preto vÅ¡etky pouÅ¾itÃ© premennÃ© mÃ´Å¾eme definovaÅ¥ ako typ int. Program by mal vykresliÅ¥ obrazec rozmerov 2*n+1 riadkov a 2*n+1 stÄºpcov, preto poÄet opakovanÃ­ cyklov v riadkoch 7 a 9 zodpovedÃ¡ tomuto rozmeru. ZostÃ¡va nÃ¡m doplniÅ¥ podmienky urÄujÃºce, ktorÃ½ znak sa vypÃ­Å¡e v i-tom riadok a j-tom stÄºpci obrazca. Podmienka v riadku 10 urÄuje Äi sa vypÃ­Å¡e znak #. Znaky # vo vÃ½stupe tvoria spojenie dvoch Äiar, preto v zloÅ¾enej podmienke pouÅ¾ijeme logickÃ© vÃ½razy rovnosti (==): stredovÃ½ riadok (i==n) a stredovÃ½ stÄºpec (j==n). Podmienka v riadku 12 potom urÄuje, kde sa vypÃ­Å¡e znak o. Znaky o vo vÃ½stupe tvoria dve plochy, preto pouÅ¾ijeme logickÃ© vÃ½razy nerovnosti: Ä¾avÃ½-hornÃ½ kvadrant (i<n && j<n) a pravÃ½ dolnÃ½ kvadrant (i>n && j>n). VÃ½slednÃ½ doplnenÃ½ program vyzerÃ¡ takto:"
43,294,0.566,Objektovo orientovanÃ© programovanie v C++,"kde moj objekt je objekt triedy moja trieda. V takomto prÃ­pade sa pri vykonÃ¡vanÃ­ prÃ­kazu return vytvorÃ­ kÃ³pia objektu moj objekt a tÃ¡to kÃ³pia sa odoÅ¡le na miesto, odkiaÄ¾ bola funkcia volanÃ¡. PÃ´vodnÃ½ objekt moj objekt v tomto okamihu zanikÃ¡ a kÃ³pia zanikÃ¡ po jej pouÅ¾itÃ­ na mieste volania funkcie. KeÄ hovorÃ­me o kÃ³piÃ¡ch, mÃ¡me na mysli presnÃ© kÃ³pie, kde sa skutoÄne presne skopÃ­ruje hodnota kaÅ¾dÃ©ho Ãºdaja. V kapitole 6.4 sme vÅ¡ak videli, Å¾e takÃ©to kopÃ­rovanie sa programu mÃ´Å¾e staÅ¥ osudnÃ½m, ak trieda obsahuje smernÃ­ky. DÃ´vodom je, Å¾e Äo bolo raz dynamicky alokovanÃ©, musÃ­ sa aj dealokovaÅ¥. Pri vytvorenÃ­ kÃ³pie vzniknÃº dva objekty so smernÃ­kmi ukazujÃºcimi na to istÃ© miesto v pamÃ¤ti a v istÃ½ch momentoch sa oba objekty pokÃºsia toto miesto uvoÄ¾niÅ¥. Objekt, ktorÃ½ sa o to pokÃºsi ako prvÃ½, mÃ¡ Å¡Å¥astie â dealokÃ¡cia prebehne bez problÃ©mov. DruhÃ½ objekt vÅ¡ak bude chcieÅ¥ uvoÄ¾niÅ¥ uÅ¾ uvoÄ¾nenÃ© miesto a program sa v tomto okamihu dostane do problematickej situÃ¡cie. Ak teda narÃ¡bame s objektami triedy, ktorÃ¡ obsahuje smernÃ­ky, musÃ­me zabrÃ¡niÅ¥ vytvÃ¡raniu ich presnÃ½ch kÃ³piÃ­. Ak je objekt parametrom funkcie, dÃ¡ sa to vyrieÅ¡iÅ¥ tak, Å¾e ho nebudeme odovzdÃ¡vaÅ¥ hodnotou, ale smernÃ­kom alebo odkazom. To sme si uÅ¾ ukÃ¡zali. Ak je objekt nÃ¡vratovou hodnotou funkcie, vzniku presnej kÃ³pie sa dÃ¡ takisto vyhnÃºÅ¥. Pri inicializÃ¡cii priradenÃ­m vÅ¡ak v skutoÄnosti kÃ³piu vytvoriÅ¥ chceme â prÃ­kaz priradenia hovorÃ­, Å¾e chceme maÅ¥ dva objekty s rovnakÃ½mi Ãºdajmi. V niektorÃ½ch situÃ¡ciÃ¡ch by sa nÃ¡m hodilo, keby sme mohli vytvoriÅ¥ kÃ³piu, ktorÃ¡ by bola âskoro presnÃ¡â. To znamenÃ¡, Å¾e by sa skopÃ­rovalo vÅ¡etko s vÃ½nimkou adries. Ak by teda naprÃ­klad objekt obsahoval dynamicky alokovanÃ© pole, jeho kÃ³pia by tieÅ¾ obsahovala dynamicky alokovanÃ© pole s presne rovnakou veÄ¾kosÅ¥ou aj obsahom, ale umiestnenÃ© na inom mieste v pamÃ¤ti. VÅ¡eobecne, objekt aj jeho kÃ³pia by mali zapÃºzdrovaÅ¥ Ãºplne rovnakÃ© hodnoty, nikdy by vÅ¡ak nemali obsahovaÅ¥ smernÃ­ky ukazujÃºce na to istÃ© miesto v pamÃ¤ti. KopÃ­rovanie, s ktorÃ½m sme sa doteraz stretli, takto nefunguje. Chceli by sme maÅ¥ teda moÅ¾nosÅ¥ povedaÅ¥ programu, ako mÃ¡ vytvÃ¡raÅ¥ kÃ³pie objektov. C++ nÃ¡m takÃºto moÅ¾nosÅ¥ ponÃºka a je Åou vytvorenie tzv. kopÃ­rovacieho konÅ¡truktora (angl. copy constructor). KopÃ­rovacÃ­ konÅ¡truktor je konÅ¡truktor, ktorÃ½ deï¬nuje, akÃ½m spÃ´sobom sa mÃ¡ vytvoriÅ¥ kÃ³pia objektu danej triedy. Ak je tento konÅ¡truktor deï¬novanÃ½, automaticky sa spustÃ­ vo vÅ¡etkÃ½ch troch spomÃ­nanÃ½ch prÃ­padoch â ak vykonÃ¡vame inicializÃ¡ciu priradenÃ­m a ak je objekt parametrom alebo nÃ¡vratovou hodnotou funkcie. Inak povedanÃ©, vÅ¾dy, keÄ sa v programe vytvÃ¡ra kÃ³pia nejakÃ©ho objektu, program zistÃ­, Äi prÃ­sluÅ¡nÃ¡ trieda mÃ¡ kopÃ­rovacÃ­ konÅ¡truktor. Ak Ã¡no, tak ho spustÃ­, a ak nie, tak sa vyrobÃ­ presnÃ¡ kÃ³pia objektu. Ako program spoznÃ¡, ktorÃ½ konÅ¡truktor je kopÃ­rovacÃ­? KopÃ­rovacÃ­ konÅ¡truktor sa vyznaÄuje tÃ½m, Å¾e mÃ¡ jedinÃ½ parameter â odkaz na objekt triedy, ku ktorej patrÃ­. Ide vlastne o odkaz na objekt, z ktorÃ©ho sa vytvÃ¡ra kÃ³pia. DeklarÃ¡cia kopÃ­rovacieho konÅ¡truktora triedy moja trieda by teda vyzerala takto moja trieda(moja trieda &objekt1);"
111,134,0.566,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"InterpretÃ¡cia vÃ½sledkov HlavnÃ½m vÃ½stupom pouÅ¾Ã­vateÄ¾skÃ©ho testovania by mali byÅ¥ videonahrÃ¡vky (alebo nahrÃ¡vky sedenÃ­), ktorÃ© zachytÃ¡vajÃº ako respondenti realizovali jednotlivÃ© Ãºlohy. Pri analÃ½ze vÃ½sledkov nemoderovanÃ©ho testovania nemÃ¡te k dispozÃ­cii Ãºdaje, ktorÃ© zachytÃ¡vajÃº vaÅ¡u (moderÃ¡torovu) komunikÃ¡ciu/interakciu s respondentom. V zÃ¡vislosti od nastavenia pouÅ¾Ã­vateÄ¾skej Å¡tÃºdie, nahrÃ¡vka mÃ´Å¾e obsahovaÅ¥ hlas respondenta (rozmÃ½Å¡Ä¾anie nahlas), prÃ­p. aj tvÃ¡r. Pozorne si pozrite celÃ© video. Analyzujte, ako pouÅ¾Ã­vatelia postupovali, ako rieÅ¡il jednotlivÃ© Ãºlohy, Äo hovorili, akÃ© prvky (Äasti rozhrania) ich zaujali a upÃºtali ich pozornosÅ¥. Z Äoho mali pozitÃ­vne dojmy, a naopak, z Äoho boli zmÃ¤tenÃ­ (Äo ich frustrovalo). Na zÃ¡klade videonahrÃ¡vok identifikujte konkrÃ©tne problÃ©my, s ktorÃ½mi sa pouÅ¾Ã­vatelia stretli. Zoskupte podobnÃ© problÃ©my alebo spÃ¤tnÃº vÃ¤zbu do tÃ©m. Vyberte si konkrÃ©tne citÃ¡ty, ktorÃ© ilustrujÃº problÃ©my alebo pozitÃ­vne aspekty. Zapojte do analÃ½zy aj ostatnÃ½ch Älenov tÃ­mu, aby ste zÃ­skali rÃ´zne pohÄ¾ady. BuÄte objektÃ­vni, snaÅ¾te sa vyhnÃºÅ¥ osobnÃ½m nÃ¡zorom a sÃºstreÄte sa na fakty. Zamerajte sa na pouÅ¾Ã­vateÄ¾a, myslite na to, Äo pouÅ¾Ã­vateÄ¾ cÃ­ti a preÅ¾Ã­va. Sledujte neverbÃ¡lne signÃ¡ly, ako je mraÄenie, povzdychy alebo komentÃ¡re, ktorÃ© vyjadrujÃº frustrÃ¡ciu. NajmÃ¤ pri nemoderovanom testovanÃ­, vyhodnoÅ¥te odpovede na otÃ¡zky v dotaznÃ­ku. Zamerajte sa na otvorenÃ© otÃ¡zky, ktorÃ© vÃ¡m poskytnÃº viac detailnÃ½ch informÃ¡ciÃ­. Svoje zistenia a nÃ¡vrhy podporte aj kvantitatÃ­vnymi Ãºdajmi, napr.: â¢ Äas na dokonÄenie Ãºlohy â Zmerajte, koÄ¾ko Äasu trvalo pouÅ¾Ã­vateÄ¾om dokonÄenie jednotlivÃ½ch Ãºloh."
40,37,0.566,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"   ZjednoduÅ¡ene mÃ´Å¾eme povedaÅ¥, Å¾e (trÃ©novanÃ¡) neurÃ³novÃ¡ sieÅ¥ (W in ,W ,W out ,W back )    je Echo State neurÃ³novou sieÅ¥ou ak jej netrÃ©novanÃ© âjadroâ (W in ,W ,W back ) mÃ¡ schopnosÅ¥ dosiahnuÅ¥ echo stavy vzhÄ¾adom na vstupno-vÃ½stupnÃº sekvenciu z Ä¾ubovoÄ¾nÃ©ho kompaktnÃ©ho intervalu U Ã D . Existuje mnoho inÃ½ch podmienok, ktorÃ© sÃº ekvivalentnÃ© s podmienkami potrebnÃ½mi pre dosiahnutie echo stavov. Uvedieme eÅ¡te jednu definÃ­ciu ekvivalentnÃº s definÃ­ciou 1. Podrobne v [2]."
236,191,0.565,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Å¡Ã­rka urÄuje Å¡Ã­rku vÃ½slednÃ©ho boxu videnÃ©ho zvonku.8 Oddelene od dÄºÅ¾kovÃ½ch vÃ½razov mÃ´Å¾ete pouÅ¾iÅ¥ aj \width, \height, \depth a \totalheight v parametri Å¡Ã­rky. Tieto sa nastavia podÄ¾a hodnÃ´t zÃ­skanÃ½ch meranÃ­m vytlaÄenÃ©ho textu. Parameter pozÃ­cia nadobÃºda jednu z hodnÃ´t: centrovanie, left flush (zarovnanie naÄ¾avo), right flush (zarovnanie vpravo) alebo s, ktorÃ½ roztiahne text, obsiahnutÃ½ v boxe, na celÃº Å¡Ã­rku boxu. PrÃ­kaz \framebox funguje presne tak ako \makebox, ale navyÅ¡e nakreslÃ­ okolo textu rÃ¡mÄek. NasledujÃºci prÃ­klad vÃ¡m ukÃ¡Å¾e niektorÃ© veci, ktorÃ© mÃ´Å¾ete robiÅ¥ prÃ­kazmi \makebox a \framebox."
130,137,0.565,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Vzor Klientska abstrakcia biznis sluÅ¾ieb, v angliÄtine znÃ¡my ako Business Delegate, je urÄenÃ½ pre oddelenie biznis logiky od vyÅ¡Å¡Ã­ch vrstiev a poskytnutie sluÅ¾ieb rÃ´znym klientom alebo prezentaÄnej vrstve. Vzor sa vyuÅ¾Ã­va pri Äasto sa meniacich poÅ¾iadavkÃ¡ch na biznis logiku, pretoÅ¾e definuje rozhrania pre vyÅ¡Å¡ie vrstvy, ktorÃ© by mali byÅ¥ odolnÃ© voÄi zmenÃ¡m biznis logiky. Vzor umoÅ¾Åuje implementÃ¡ciu klientskej vyrovnÃ¡vacej pamÃ¤ti pre minimalizÃ¡ciu volanÃ­ vzdialenÃ½ch metÃ³d, ÄÃ­m redukuje sieÅ¥ovÃ© zaÅ¥aÅ¾enie."
265,272,0.565,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Na ilustrÃ¡ciu uvÃ¡dzame 3 prÃ­klady, kedy moÅ¾no potenciÃ¡lne pouÅ¾iÅ¥ len jeden jazyk, no nie je to vÃ½hodnÃ©: 1. Pri webovÃ½ch aplikÃ¡ciÃ¡ch, pri ktorÃ½ch oÄakÃ¡vame veÄ¾kÃº zÃ¡Å¥aÅ¾, niekedy potrebujeme jeden komponent najvyÅ¡Å¡ej Ãºrovne, naprÃ­klad controller vnÃºtorne Å¡truktÃºrovaÅ¥ na niekoÄ¾ko sub-komponentov a kaÅ¾dÃ½ napÃ­saÅ¥ v inom jazyku. NaprÃ­klad, naÅ¡Ã­m rÃ¡mcovÃ½m jazykom mÃ´Å¾e byÅ¥ python (pretoÅ¾e v Åom je napÃ­sanÃ½ framework v ktorom sa dÃ¡ rÃ½chlo vyvÃ­jaÅ¥), no niektorÃ© algoritmy mÃ´Å¾eme kvÃ´li vÃ½poÄtovej efektÃ­vnosti chcieÅ¥ implementovaÅ¥ v C (ktorÃ© by sme ale na celÃº aplikÃ¡ciu nepouÅ¾ili, lebo jej vÃ½voj by bol neÃºmerne prÃ¡cnejÅ¡Ã­). 2. InÃ½ prÃ­klad vÃ½hodnÃ©ho vyuÅ¾itia viacerÃ½ch jazykov sÃº expertnÃ© systÃ©my (systÃ©my na podporu rozhodovania Ä¾udÃ­ vo vedÃºcich pozÃ­ciÃ¡ch). Tie spravidla potrebujÃº pracovaÅ¥ s mnoÅ¾inou pravidiel, ktorÃ½mi sa ich rozhodnutia riadia (naprÃ­klad mÃ´Å¾e Ã­sÅ¥ o sÃºbor pravidiel, za akÃ½ch okolnostÃ­ mÃ¡ byÅ¥ zÃ¡kaznÃ­kovi banky pridelenÃ¡ hypotÃ©ka). TakÃ©to pravidlÃ¡ je vÃ½hodnÃ© programovaÅ¥ v logickom programovacom jazyku (napr. Prolog), pretoÅ¾e sa Ä¾ahÅ¡ie udrÅ¾ujÃº a kÃ³d je ÄistejÅ¡Ã­. AvÅ¡ak programovaÅ¥ celÃ½ controller v logickom programovacom jazyku by moÅ¾no trvalo eÅ¡te dlhÅ¡ie ako v predchÃ¡dzajÃºcom prÃ­klade. Preto je v takomto prÃ­pade logickÃ© programovaÅ¥ len rozhodovacÃ­ stroj a ostatnÃº obaÄ¾ujÃºcu a podpornÃº funkcionalitu programovaÅ¥ v nieÄom inom. 3. InÃ½ prÃ­klad zbytoÄnej Å¥aÅ¾kej prÃ¡ce spÃ´sobenej pouÅ¾itÃ­m jednÃ©ho jazyka je generovanie kÃ³du pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­ pri webovÃ½ch aplikÃ¡ciÃ¡ch. DneÅ¡nÃ© webovÃ© aplikÃ¡cie sa zvyÄajne neskladajÃº len zo statickÃ½ch strÃ¡nok. O konkrÃ©tnej podobe strÃ¡nky rozhoduje aplikaÄnÃ½ kÃ³d na serveri. A prÃ¡ve tu je k dispozÃ­cii uÅ¾ viac moÅ¾nostÃ­, ako vÃ½slednÃ½ HTML kÃ³d pripraviÅ¥. PrvÃ¡ moÅ¾nosÅ¥ je, Å¾e by aplikaÄnÃ½ kÃ³d, pÃ­sanÃ½ v niektorom âvÅ¡eobecnom programovacom jazykuâ (napr. Java, C#, Ruby Äi Python) mohol Å¾iadanÃ© HTML dokumenty vygenerovaÅ¥ kompletne algoritmicky spÃ¡janÃ­m reÅ¥azcov obsahujÃºcich kusy HTML kÃ³du. Vtedy by sme mohli vÃ­Å¥azoslÃ¡vne prehlÃ¡siÅ¥, Å¾e na vÅ¡etko pouÅ¾Ã­vame jeden jazyk (zanedbajme teraz fakt, Å¾e eÅ¡te treba nejako vyrieÅ¡iÅ¥ prÃ­stup k dÃ¡tam, kde spravidla potrebujeme opÃ¤Å¥ inÃ½ jazyk, SQL). Na druhej strane, takto programovaÅ¥ generovanie rozhrania by bolo zbytoÄne zloÅ¾itÃ© a namÃ¡havÃ©. PrÃ¡ve preto sa vyuÅ¾Ã­va druhÃ¡ moÅ¾nosÅ¥, a sÃ­ce Å¡peciÃ¡lne jazyky, ktorÃ© majÃº deklaratÃ­vny charakter (napr. mutÃ¡cie XML). Tieto jazyky oveÄ¾a prirodzenejÅ¡ie definujÃº podobu pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania no zÃ¡roveÅ povoÄ¾ujÃº vkladanie kÃºskov aplikaÄnÃ©ho kÃ³du na tÃ½ch miestach Å¡truktÃºry, ktorÃ© sÃº dynamickÃ© (teda aÅ¾ v Äase poÅ¾iadavky sa pomocou nich dopoÄÃ­ta, ako majÃº"
76,13,0.565,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.1.3 PrÃ­klad. Nech pokus spoÄÃ­va v nÃ¡hodnom Å¥ahanÃ­ guÄ¾ky zo Å¡katule, ktorÃ¡ obsahuje 100 guliek, avÅ¡ak teraz vieme len to, Å¾e farby guliÄiek sÃº alebo biela, alebo modrÃ¡, alebo ÄervenÃ¡ (teda nevieme, koÄ¾ko ktorÃ½ch). VÃ½sledok pokusu je opÃ¤Å¥ farba vytiahnutej guÄ¾ky. ÄÃ­m sa takÃ½to pokus lÃ­Å¡i od pokusu z 1.1.2? Zrejme ï, S sÃº rovnakÃ©, ale urÄiÅ¥ P je nieÄo novÃ©, lebo zloÅ¾enie Å¡katule nepoznÃ¡me. Ako teraz modelovaÅ¥ pravdepodobnosÅ¥ spojenÃº s pokusom? Je nutnÃ© zamyslieÅ¥ sa nad tÃ½m, Äo je pravdepodobnosÅ¥. Na otÃ¡zku, preÄo verÃ­me postupom v predchÃ¡dzajÃºcich odstavcoch, odpovedÃ¡me takto: Keby sme opakovane realizovali pokus z 1.1.2 (nÃ¡hodne Å¥ahÃ¡me guÄ¾ku, poznaÄÃ­me si jej farbu a vrÃ¡time ju spÃ¤Å¥), tak v dlhom rade opakovanÃ­ pokusu zistÃ­me pribliÅ¾nÃº zhodu medzi stanovenou pravdepodobnosÅ¥ou P a relatÃ­vnymi poÄetnosÅ¥ami vÃ½skytu jednotlivÃ½ch vÃ½sledkov, resp. udalostÃ­. Ak totiÅ¾ v 1.1.2 napr. P({b}) = 0.5, tak v 1000 opakovaniach pokusu pribliÅ¾ne v polovici z nich, t. j. pribliÅ¾ne v 500 prÃ­padoch, pozorujeme vytiahnutie bielej. InÃ½mi slovami, verÃ­me, Å¾e frekvencia vÃ½sledku {b} kolÃ­Å¡e okolo 0.5. KeÄÅ¾e ale teraz zloÅ¾enie Å¡katule nepoznÃ¡me, neostÃ¡va niÄ inÃ©, len vykonaÅ¥ experiment. Opakujme nÃ¡Å¡ pokus (napr. 60-krÃ¡t) a predpokladajme, Å¾e sme zÃ­skali takÃ©to vÃ½sledky:"
184,442,0.564,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"LexikÃ¡lne analyzÃ¡tory Proces rozdelenie textu na zÃ¡kladnÃ© znaÄky je tieÅ¾ nazÃ½vanÃ½ lexikÃ¡lna analÃ½za textu. Lexery, systÃ©my vykonÃ¡vajÃºce lexikÃ¡lnu analÃ½zu, majÃº v rÃ¡mci informatiky tradiÄnÃ© vyuÅ¾ite pri tvorbe kompilÃ¡torov programovacÃ­ch jazykov, kde sÃº zodpovednÃ© za predspracovanie a oznaÄkovanie textu (kÃ³du) pre generÃ¡tor kompilÃ¡toru. Lexery si svoje vyuÅ¾itie naÅ¡li aj v systÃ©moch na zÃ­skavanie informÃ¡ciÃ­. GenerovanÃ© znaÄky (tokens) priradzujÃº jednotlivÃ½m Äastiam textu dodatoÄnÃº informÃ¡ciu o ich lexikÃ¡lnom vÃ½zname. Pre ilustrÃ¡ciu uvÃ¡dzame niekoÄ¾ko prÃ­kladov dvojÃ­c - reÅ¥azca znakov a jeho lexikÃ¡lnej znaÄky: (mroÅ¾, WORD); (17.3, FLOAT); (; , SEMICOLON); (16.05.1993, DATE); (http://google.com/, LINK). LexikÃ¡lne analyzÃ¡tory sÃº zvÃ¤ÄÅ¡a zloÅ¾enÃ© z dvoch ÄastÃ­, a to zo snÃ­maÄa a znaÄkovaÄa. SnÃ­maÄ, zvÃ¤ÄÅ¡a realizovanÃ½ ako koneÄnÃ½ automat, obsahuje pravidlÃ¡ o moÅ¾nÃ½ch postupnostiach znakov na zÃ¡klade, ktorÃ½ch delÃ­ text na atomickÃ© reÅ¥azce spracovÃ¡vanÃ© znaÄkovaÄom. ZnaÄkovaÄ klasifikuje podreÅ¥azce textu a prideÄ¾uje im znaÄky z definovanej mnoÅ¾iny prÃ­pustnÃ½ch znaÄiek. NaprÃ­klad veta: âMrzutÃ½ mroÅ¾ monotÃ³nne mruÄal o 10:00â, by mohla byÅ¥ rozdelenÃ¡ na nasledujÃºcu mnoÅ¾inu hodnota-znaÄka: (mrzutÃ½, WORD); (mroÅ¾, WORD); (monotÃ³nne, WORD); (mruÄal, WORD); (o, WORD); (10:00, TIME). Pri tvorbe lexeru pre IR systÃ©my je vÃ½hodnÃ© adresovaÅ¥ aj nasledujÃºce funkcie zÄ¾ahÄujÃºce spracovanie ÄalÅ¡Ã­m modulom: redukcia dokumentu (odstrÃ¡nenie"
135,217,0.564,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Na obrÃ¡zku sÃº zobrazenÃ© filtre (obd Å¾niky) a dÃ¡tovody realizujÃºce spojenia medzi nimi. Opis jednotlivÃ½ch dÃ¡tovodov zodpovedÃ¡ typu Ãºdajov, ktorÃ© sÃº danÃ½m dÃ¡tovodom prenÃ¡Å¡anÃ©. Zdroj Ãºdajov a dÃ¡tovÃ© spotrebie nie sÃº znÃ¡zornenÃ©. VÅ¡imnime si, Å¾e tÃ¡to abstraktnÃ¡ schÃ©ma architektÃºry nehovorÃ­ ni o spÃ´sobe realizÃ¡cie filtrov a dÃ¡tovodov. Tieto mÃ´Å¾u by implementovanÃ© naprÃ­klad ako procedÃºry v rÃ¡mci programu, spojenÃ© tradinÃ½mi vola-"
135,246,0.564,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Posudzovanie systÃ©mov s udalosami Posudzova ubovonÃ½ zloÅ¾itÃ½ systÃ©m nie je nikdy jednoduchÃ©, lebo v kaÅ¾dom Å¡pecifickom prÃ­pade je potrebnÃ© uvÃ¡Å¾i, ktorÃ© vlastnosti sÃº prÃ¡ve dÃ´leÅ¾itejÅ¡ie a ktorÃ½m nie je potrebnÃ© priradi aÅ¾ takÃº vÃ¡hu. Preto je vhodnÃ© ma prehad, akÃ© vlastnosti by nÃ¡s mali zaujÃ­ma a preo. SynchrÃ³nnos riadiaceho toku. Tu sa myslÃ­ nezÃ¡vislos prÃ¡ce smerovaa a ostatnÃ½ch sÃºiastok. VÃ¤Å¡ina sÃºasnÃ½ch systÃ©mov je asynchrÃ³nna â oddeuje prÃ¡cu manaÅ¾Ã©ra a prÃ­jemcu udalosti. Napriek tomu stÃ¡le mÃ´Å¾u existova jednoduchÃ© synchrÃ³nne systÃ©my kde staÃ­, ke sa spracuje len jedna udalos v danom ase. TakÃ½to prÃ­stup je vhodnÃ½, ak sa udalosti spracovÃ¡vajÃº v rÃ¡mci jednÃ©ho procesu. StatickÃ¡ alebo dynamickÃ¡ registrÃ¡cia a moÅ¾nos odregistrovania sa. JednoduchÅ¡ie systÃ©my mÃ´Å¾u ma zadefinovanÃ© pripojenia uÅ¾ v ase implementÃ¡cie a nie je ich potrebnÃ© rekonfigurova poas vykonÃ¡vania aplikÃ¡cie. asy rozdeovania a spracovania udalostÃ­. as rozdeovania je potrebnÃ½ na rozpoznanie vzniku udalosti, zistenie akÃ©ho je typu a odovzdanie udalosti na spracovanie. as spracovania udalosti uÅ¾ zÃ¡visÃ­ od prÃ­jemcu udalosti. Spracovanie vÃ½nimiek. i smerova rozpoznÃ¡ neznÃ¡mu alebo chybnÃº udalos a o s ou vie urobi. ChybnÃ© udalosti vznikajÃº zvyajne poruchou hardvÃ©ru. SoftvÃ©rovÃ¡ sÃºiastka mÃ´Å¾e tieÅ¾ generova udalos, ktorÃº nemÃ¡ zaregistrovanÃº. Udalos je vÅ¡ak jej hlavnÃ½ vÃ½stup a preto sa tento problÃ©m zvyajne vyrieÅ¡i uÅ¾ poas vÃ½voja sÃºiastky. Å kÃ¡lovatenos. ZÃ¡visÃ­ od modelu distribuovania udalostÃ­ a konÅ¡trukcie smerovaa. Pri horizontÃ¡lne distribuovanÃ½ch smerovaoch sa zÃ¡aÅ¾ znÃ­Å¾i tÃ½m, Å¾e kaÅ¾dÃ¡ jednotka smerovaa sa venuje len menÅ¡iemu potu typov udalostÃ­. Spracovanie je vemi rÃ½chle, ale je tu limit na maximÃ¡lny poet jednotiek â toko, koko je typov udalostÃ­. VertikÃ¡lne distribuovanÃ© smerovae sÃº vlastne rozdelenÃ© hierarchicky. ZniÅ¾uje sa tu poet prÃ­jemcov sprÃ¡vy na jednotku smerovaa. NevÃ½hodou je, Å¾e udalos prechÃ¡dza cez viacero smerovaov a narastÃ¡ as rozdeovania udalostÃ­. Bezpenos. JednotlivÃ© typy udalostÃ­ a udalosti z rÃ´znych zdrojov mÃ´Å¾u ma rÃ´zne Ãºrovne oprÃ¡vnenia. PrÃ­jemcovia udalostÃ­ mÃ´Å¾u zÃ­ska len tie sprÃ¡vy, na ktorÃ© majÃº oprÃ¡vnenia. PouÅ¾itie vyrovnÃ¡vacej pamÃ¤te. ZvyÅ¡uje Å¡ancu spracovania vÅ¡etkÃ½ch udalostÃ­ ale spomauje prÃ¡cu manaÅ¾Ã©ra. Je potrebnÃ© definova as âpreÅ¾itiaâ udalosti, to znamenÃ¡, po akom ase uÅ¾ nemÃ¡ vÃ½znam na udalos reagova. Kvalita sluÅ¾ieb. Pod tÃ½mto nÃ¡zvom sÃº zahrnutÃ© ostatnÃ© vlastnosti systÃ©mu, ako je spoahlivos doruenia udalostÃ­, rekonfigurovatenos, automatickÃ© vyvÃ¡Å¾enie zÃ¡aÅ¾e smerovaov, moÅ¾nosti Ãºpravy sprÃ¡v a alÅ¡ie. VÃ½hody a nevÃ½hody systÃ©mov zaloÅ¾enÃ½ch na udalostiach Medzi vÃ½hody patrÃ­ vysokÃ¡ rekonfigurovatenos tÃ½chto systÃ©mov. SÃºiastky sa mÃ´Å¾u pripÃ¡ja a odpÃ¡ja bez toho, aby to funkne ovplyvnilo zvyÅ¡ok systÃ©mu. Tieto systÃ©my vÃ½razne podporujÃº znovupouÅ¾itie. Od sÃºiastky sa vyÅ¾aduje len sprÃ¡vne rozhranie na prÃ­jem alebo posielanie udalostÃ­ a nie je dÃ´leÅ¾itÃ© ako je vytvorenÃ¡ ani v akom prostredÃ­ sa vykonÃ¡va. VÃ½hodou je tieÅ¾, Å¾e sÃºiastka poznÃ¡ len manaÅ¾Ã©r udalostÃ­ a nemusÃ­ pozna ni inÃ©. Ãdaje prichÃ¡dzajÃº vo forme akÃº poznÃ¡ a odosiela ich rovnako. Pri vytvÃ¡ranÃ­ sÃºiastky nie"
240,76,0.564,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V tejto Ãºlohe je potrebnÃ© vnÃ­maÅ¥ obmedzenie dÃ¡tovÃ©ho typu unsigned char, ktorÃ½ mÃ¡ veÄ¾kosÅ¥ 1 bajt (8 bitov), a preto dokÃ¡Å¾e reprezentovaÅ¥ nanajvÃ½Å¡ 256 rÃ´znych hodnÃ´t: v tomto prÃ­pade ÄÃ­sla z mnoÅ¾iny {0, ..., 255}. Do premennej a teda nie je moÅ¾nÃ© v riadku 2 inicializovaÅ¥ hodnotu 300 ale jej hodnota po inicializÃ¡cii bude 300 mod 256 = 44. V riadku 4 pripoÄÃ­tavame k aktuÃ¡lnej hodnote premennej k (220) ÄÃ­slo 1020. VÃ½slednÃ½ sÃºÄet (1240) vÅ¡ak nie je moÅ¾nÃ© v dÃ¡tovom type unsigned char reprezentovaÅ¥. Do premennej k sa zapÃ­Å¡e hodnota najniÅ¾Å¡Ã­ch 8 bitov sÃºÄtu: 1240 modulo 256 = 216. V riadku 5 priraÄujeme do premennej v typu int (veÄ¾kosti 4 bajty), priÄom premennÃ© vo vÃ½raze na pravej strane priradenia sÃº typu unsigned char"
190,58,0.564,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Postupom Äasu, pribliÅ¾ne po dvoch rokoch sa spÃ´sob mojej prÃ¡ce zaÄal meniÅ¥. Zmeny sÃºviseli predovÅ¡etkÃ½m s mojÃ­m nÃ¡padom na prechod sÃºÄasnÃ©ho projektu na novÃº technolÃ³giu. Tento nÃ¡pad bol schvÃ¡lenÃ½ a spolu s eÅ¡te jednÃ½m kolegom sme boli Å¡peciÃ¡lne vyÄlenenÃ­ mimo tÃ­mu, aby sme sa venovali tejto prÃ¡ci kontinuÃ¡lne poÄas toho ako ostatnÃ­ pracujÃº na pÃ´vodnej verzii projektu. Je dÃ´leÅ¾itÃ© spomenÃºÅ¥, Å¾e projekt je dlhodobÃ©ho charakteru a jeho vÃ½voj zaÄal pribliÅ¾ne pred desiatimi rokmi. V podstate sme vlastne vytvorili malÃ½ tÃ­m skupinovÃ©ho archetypu."
369,89,0.564,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Mnoho softvÃ©rovÃ½ch systÃ©mov potrebuje evidovaÅ¥ (aspoÅ ÄasÅ¥) zamestnancov firmy vrÃ¡tane ich pracovnÃ©ho zaradenia. KÄ¾ÃºÄovÃ½m problÃ©mom takejto evidencie je, Å¾e pracovnÃ© zaradenie zamestnancov vo firme sa Äasom menÃ­ a v istÃ½ch intervaloch sa menÃ­ tieÅ¾ organizaÄnÃ¡ Å¡truktÃºra firmy. V typickej firme bÃ½va presne definovanÃ¡ hierarchia vzÅ¥ahov nadriadenÃ½-podriadenÃ½. ZvyÄajne existuje organizaÄnÃ½ diagram, ktorÃ½ vo svojej podstate zodpovedÃ¡ diagramu objektov. V Åom sÃº zakreslenÃ© jednotlivÃ© pozÃ­cie: (generÃ¡lny, vÃ½konnÃ½) riaditeÄ¾, riaditelia jednotlivÃ½ch divÃ­ziÃ­, vedÃºci odborov, oddelenÃ­ a pod. PriamoÄiarou reprezentÃ¡ciou takejto hierarchie diagramom tried dostÃ¡vame obr. 2.1. V modeli sa pracovnÃ­k stane inÅ¡tanciou triedy podÄ¾a pozÃ­cie, ktorÃº zastÃ¡va."
265,39,0.564,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"IntuÃ­cia nÃ¡m spravidla Å¡epkÃ¡ za softvÃ©r povaÅ¾ovaÅ¥ programy (aplikÃ¡cie), resp. ich zdrojovÃ© kÃ³dy. Pojem softvÃ©r je vÅ¡ak Å¡irÅ¡Ã­ a zahÅÅa aj postupy (niekedy celÃ© metodolÃ³gie), ako tento softvÃ©r pouÅ¾Ã­vaÅ¥. Rovnako tak zahÅÅa aj dokumentÃ¡ciu k tÃ½mto programom a postupom spolu so Å¡pecifikÃ¡ciou, scenÃ¡rmi pouÅ¾itia, testovacÃ­mi scenÃ¡rmi, opismi nÃ¡vrhu, testovacÃ­mi Ãºdajmi a prÃ­ruÄkami."
265,388,0.564,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UvedenÃ© otÃ¡zky majÃº spoloÄnÃ©ho menovateÄ¾a: modelovanie je v nich prostriedkom na odstraÅovanie neistoty a predchÃ¡dzaniu rizikÃ¡m. PlatÃ­ teda, Å¾e ÄÃ­m rizikovejÅ¡Ã­ a neistejÅ¡Ã­ je charakter projektu, tÃ½m mÃ´Å¾eme ÄakaÅ¥ viac modelovania. PoznÃ¡mka: Mieru modelovania mÃ´Å¾e ovplyvniÅ¥ eÅ¡te jedna dÃ´leÅ¾itÃ¡ Ärta projektu, a to je metodolÃ³gia vÃ½voja: naprÃ­klad pri tradiÄnÃ½ch metodolÃ³giÃ¡ch (zaloÅ¾enÃ½ch na vodopÃ¡dovom Äi iteratÃ­vno-inkrementÃ¡lnom prÃ­stupe) moÅ¾no oÄakÃ¡vaÅ¥ viac modelovania ako pri agilnÃ½ch."
76,12,0.564,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"rÃ­me aditivita. Je uÅ¾itoÄnÃ© sledovaÅ¥, ako budeme argumentovaÅ¥ pri obhajovanÃ­ toho, Å¾e kaÅ¾dÃ¡ pravdepodobnosÅ¥ je aditÃ­vna. 1.1.2 PrÃ­klad. Nech pokus spoÄÃ­va v nÃ¡hodnom Å¥ahanÃ­ guÄ¾ky zo Å¡katule, ktorÃ¡ obsahuje 10 guliek: 5 bielych, 3 modrÃ© a 2 ÄervenÃ©. Za vÃ½sledok opÃ¤Å¥ povaÅ¾ujeme farbu vytiahnutej guÄ¾ky. ÄÃ­m sa takÃ½to pokus lÃ­Å¡i od pokusu z 1.1.1? Zrejme ï, S sÃº rovnakÃ© ako v 1.1.1, ale P bude inÃ¡, veÄ vytiahnutie bielej mÃ¡ vÃ¤ÄÅ¡iu pravdepodobnosÅ¥, ako vytiahnutie modrej, alebo Äervenej. KeÄÅ¾e vytiahnutie kaÅ¾dej (z tÃ½ch desiatich guliek) je rovnako moÅ¾nÃ©, tak kladieme P({b}) = 0.5 (pretoÅ¾e 5 z desiatich realizujÃº udalosÅ¥ {b}), P({m})= 0.3 (pretoÅ¾e 3 z desiatich realizujÃº udalosÅ¥ {m}), P({Ä}) = 0.2 (pretoÅ¾e 2 z desiatich realizujÃº udalosÅ¥ {Ä}). TakÃ½to postup je zaiste v zhode s intuÃ­ciou, resp. so skÃºsenosÅ¥ou. MÃ´Å¾eme povedaÅ¥ aj to, Å¾e postupujeme v zhode so znÃ¡mou Laplaceovou definÃ­ciou (mimochodom, s oznaÄenÃ­m definÃ­cia sa dÃ¡ v tomto prÃ­pade polemizovaÅ¥), ktorÃº vÅ¡ak vzÅ¥ahujeme na pomocnÃ½ priestor ï , ktorÃ½ mÃ¡ 10 rovnako moÅ¾nÃ½ch âprvotnÃ½ch vÃ½sledkovâ: ï = {b1, b2, b3, b4, b5, m1, m2, m3, Ä1, Ä2}. Analogicky ako v 1.1.1 (odvolÃ¡vajÃºc sa na aditivitu P), urÄÃ­me pravdepodobnosti udalostÃ­ A = {b, m}, B = {b, Ä}, C = {m, Ä}. Teraz pravdepodobnosÅ¥ P urÄuje tabuÄ¾ka"
369,27,0.564,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"3. NeformÃ¡lne notÃ¡cie (nÃ¡Ärty) â neformÃ¡lne notÃ¡cie pouÅ¾Ã­vajÃº rÃ´zne ad hoc ikony, pomocou ktorÃ½ch tvorcovia znÃ¡zorÅujÃº najdÃ´leÅ¾itejÅ¡ie elementy architektÃºry. TakÃ©to nÃ¡Ärty bÃ½vajÃº uÅ¾itoÄnÃ© v poÄiatoÄnÃ½ch etapÃ¡ch vÃ½voja systÃ©mu. V neskorÅ¡Ã­ch etapÃ¡ch by vÅ¡ak mali byÅ¥ nahradenÃ© presnejÅ¡Ã­mi modelmi vytvorenÃ½mi v niektorej Å¡tandardizovanej notÃ¡cii. V tejto uÄebnici budeme na modelovanie architektÃºry systÃ©mu z dÃ´vodu jeho rozÅ¡Ã­renosti pouÅ¾Ã­vaÅ¥ jazyk UML. Jazyk UML v skutoÄnosti tvorÃ­ viacero modelovacÃ­ch jazykov, ktorÃ© na modelovanie architektÃºr softvÃ©rovÃ½ch systÃ©mov moÅ¾no pouÅ¾iÅ¥ nasledovnÃ½m spÃ´sobom: 1. Diagram tried (angl. class diagram) â diagram tried tvorÃ­ mnoÅ¾ina tried, rozhranÃ­ a ich vzÅ¥ahov. Z hÄ¾adiska architektÃºr ide o hlavnÃ½ jazyk na modelovanie informaÄnÃ©ho pohÄ¾adu na softvÃ©rovÃ½ systÃ©m. Diagram tried vÅ¡ak modeluje iba statickÃº Å¡truktÃºru a nezahÅÅa dynamickÃº Å¡truktÃºru informaÄnÃ©ho pohÄ¾adu. 2. Diagram objektov (angl. object diagram) â diagram objektov obsahuje mnoÅ¾inu objektov (inÅ¡tanciÃ­) a ich vzÅ¥ahov. Z hÄ¾adiska architektÃºry ide o doplnkovÃ½ jazyk, ktorÃ½ sa v urÄitÃ½ch prÃ­padoch pouÅ¾Ã­va na tvorbu prÃ­kladov vzÅ¥ahov inÅ¡tanciÃ­ podÄ¾a diagramu tried. 3. Diagram pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov7 (angl. use case diagram) â zobrazuje mnoÅ¾inu pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov a ich aktÃ©rov. Je doplnkovÃ½m jazykom na modelovanie funkÄnÃ©ho pohÄ¾adu. Diagram pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov sa vÅ¡ak pouÅ¾Ã­va predovÅ¡etkÃ½m na opis funkcionality v poÄiatoÄnÃ½ch etapÃ¡ch analÃ½zy pred dekompozÃ­ciou na elementy architektÃºry. 4. SekvenÄnÃ½ diagram (angl. sequence diagram) â ukazuje interakcie medzi objektmi, ktorÃ© majÃº formu posielania sprÃ¡v. Je Å¡peciÃ¡lnym prÃ­padom interakÄnÃ©ho diagramu s dÃ´razom na ÄasovÃº postupnosÅ¥ posielania sprÃ¡v. MÃ´Å¾e slÃºÅ¾iÅ¥ ako doplnkovÃ½ jazyk na modelovanie funkÄnÃ©ho pohÄ¾adu. SekvenÄnÃ½ diagram sa vÅ¡ak pouÅ¾Ã­va najmÃ¤ na modelovanie priebehu interakcie medzi elementmi na nÃ­zkej Ãºrovni (objektmi tried)."
115,26,0.563,Algebra a diskrÃ©tna  matematika,"Ak mÃ¡ graf dva komponenty, potom jeden z komponentov obsahuje len jednu hranu. Z definÃ­cie komponentu vyplÃ½va, Å¾e mnoÅ¾ina vrcholov je separovanÃ¡ na dve disjunktnÃ© podmnoÅ¾iny vrcholov, ktorÃ© nie sÃº prepojenÃ© spoloÄnou hranou a pre kaÅ¾dÃº hranu existujÃº prÃ¡ve dva vrcholy, ktorÃ© na nej leÅ¾ia. Z tÃ½chto dvoch skutoÄnostÃ­ vyplÃ½va, Å¾e toto disjunktnÃ© rozdelenie mnoÅ¾iny vrcholov je moÅ¾nÃ© len na dve podmnoÅ¾iny, ktorÃ© obsahujÃº dva a tri vrcholy. PodmnoÅ¾ina s dvoma vrcholmi reprezentuje komponent."
265,124,0.563,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"zjednocujÃºcu virtualizaÄnÃº vrstvu. TÃ¡ nÃ¡m umoÅ¾nÃ­ aplikÃ¡ciu napÃ­saÅ¥ raz a potom ju pouÅ¾Ã­vaÅ¥ na rÃ´znych platformÃ¡ch Äi uÅ¾ s pomocou interpretÃ¡cie alebo prekladu kÃ³du do natÃ­vnych jazykov platforiem. Oba tieto prÃ­stupy zabezpeÄenia prenosnosti vÅ¡ak spÃ´sobia, Å¾e aplikÃ¡cia bude menej vÃ½poÄtovo efektÃ­vna (buÄ z dÃ´vodu extra rÃ©Å¾ie spÃ´sobenej interpretÃ¡ciou, alebo nevhodnÃ½m prekladom). â¢ BezpeÄnosÅ¥ â Interoperabilita: SchopnosÅ¥ softvÃ©ru spolupracovaÅ¥ s inÃ½mi softvÃ©rmi si spravidla vyÅ¾aduje otvorenie viacerÃ½ch komunikaÄnÃ½ch kanÃ¡lov Äi rozhranÃ­. ÄÃ­m viac rozhranÃ­ softvÃ©r mÃ¡ (napr. ÄÃ­m sÃº zloÅ¾itejÅ¡ie), tÃ½m sa zvyÅ¡uje riziko, Å¾e budÃº obsahovaÅ¥ bezpeÄnostnÃ© diery. â¢ PouÅ¾iteÄ¾nosÅ¥ â ModifikovateÄ¾nosÅ¥: VysokÃ¡ pouÅ¾iteÄ¾nosÅ¥ je spravidla vÃ½sledkom prepracovanÃ©ho nÃ¡vrhu. Aj malÃ© zmeny rozhrania mÃ´Å¾u pouÅ¾iteÄ¾nosÅ¥ znaÄne ârozhÃ¡dzaÅ¥â. Na zachovanie pouÅ¾iteÄ¾nosti je preto pri zmenÃ¡ch potrebnÃ© postupovaÅ¥ obozretne a kroky overovaÅ¥. To samozrejme znamenÃ¡ znÃ­Å¾enÃº modifikovateÄ¾nosÅ¥ softvÃ©ru. â¢ SprÃ¡vnosÅ¥ â UdrÅ¾ovateÄ¾nosÅ¥, modifikovateÄ¾nosÅ¥: KeÄÅ¾e dosahovanie sprÃ¡vnosti softvÃ©ru znamenÃ¡ v princÃ­pe pridÃ¡vanie funkcionality, dochÃ¡dza pri Åom k degradÃ¡cii Å¡truktÃºry a prehÄ¾adnosti softvÃ©ru, ÄÃ­m klesÃ¡ jeho udrÅ¾ovateÄ¾nosÅ¥ a modifikovateÄ¾nosÅ¥."
369,19,0.563,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ArchitektonickÃ© pohÄ¾ady na systÃ©m Prax ukazuje, Å¾e architektÃºra softvÃ©rovÃ©ho systÃ©mu bÃ½va prÃ­liÅ¡ zloÅ¾itÃ¡ na to, aby sa dala opÃ­saÅ¥ jednoduchÃ½m jazykom a obsahovala vÅ¡etko podstatnÃ©. Podobne sa aj v stavebnÃ­ctve nevytvÃ¡ra iba jeden architektonickÃ½ plÃ¡n budovy, ale existuje plÃ¡n prieÄelia, podloÅ¾Ã­, elektrickej inÅ¡talÃ¡cie, klimatizÃ¡cie, rozvodov vody a inÃ©. V softvÃ©rovom inÅ¾inierstve sa za uvedenÃ½m cieÄ¾om vytvÃ¡rajÃº tzv. architektonickÃ© pohÄ¾ady. PodÄ¾a [Rozanski+ 2008]: ArchitektonickÃ½ pohÄ¾ad2 je reprezentÃ¡cia jednÃ©ho alebo niekoÄ¾kÃ½ch Å¡trukturÃ¡lnych aspektov, ktorÃ© ukazujÃº, ako architektÃºra rieÅ¡i jednu alebo niekoÄ¾ko poÅ¾iadaviek3 zÃ¡kaznÃ­ka4. Za hlavnÃ© architektonickÃ© pohÄ¾ady sa povaÅ¾ujÃº [Rozanski+ 2008]: 1. FunkÄnÃ½ pohÄ¾ad â opisuje funkÄnÃ© elementy systÃ©mu, ich zodpovednosti, rozhrania (angl. interface) a interakcie. 2. InformaÄnÃ½ pohÄ¾ad â opisuje spÃ´sob, ako systÃ©m ukladÃ¡, spravuje a distribuuje informÃ¡cie (dÃ¡ta). 3. KonkurenÄnÃ½ pohÄ¾ad â identifikuje elementy systÃ©mu, ktorÃ© sa vykonÃ¡vajÃº paralelne a sÃºÅ¥aÅ¾ia o rovnakÃ© zdroje, spolu so spÃ´sobom riadenia tohto konkurenÄnÃ©ho sprÃ¡vania. 4. VÃ½vojovÃ½ pohÄ¾ad â opisuje elementy (moduly), do ktorÃ½ch je ÄlenenÃ½ kÃ³d programu a vzÃ¡jomnÃ© vÃ¤zby tÃ½chto elementov. 5. PohÄ¾ad zavÃ¡dzania systÃ©mu â opisuje prostredie, do ktorÃ©ho bude systÃ©m zavedenÃ½, vrÃ¡tane zÃ¡vislostÃ­, ktorÃ© mÃ¡ systÃ©m na tomto prostredÃ­."
76,333,0.563,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"7.2.4 PoznÃ¡mka. PrÃ¡ve sme ukÃ¡zali, Å¾e vieme rozhodnÃºÅ¥, ktorÃ½ z dvoch uvaÅ¾ovanÃ½ch nevychÃ½lenÃ½ch odhadov je lepÅ¡Ã­. Rovnako by sme vybrali najlepÅ¡Ã­ spomedzi troch, Äi Å¡tyroch nevychÃ½lenÃ½ch odhadov. PokiaÄ¾ sa obmedzÃ­me na nevychÃ½lenÃ© odhady, tak nÃ¡jsÅ¥ najlepÅ¡Ã­ nevychÃ½lenÃ½ odhad znamenÃ¡ nÃ¡jsÅ¥ ten z nich, ktorÃ©ho variancia je (spomedzi vÅ¡etkÃ½ch nevychÃ½lenÃ½ch odhadov) najmenÅ¡ia moÅ¾nÃ¡. TÃ¡to problematika vÅ¡ak uÅ¾ presahuje rÃ¡mec tohoto textu. Nakoniec poznamenajme, Å¾e mierne vychÃ½lenÃ½ odhad ( ) nie je treba ignorovaÅ¥, pokiaÄ¾ jeho MSE( ) je menÅ¡ia ako variancia konkurenÄnÃ©ho nevychÃ½lenÃ©ho odhadu, pretoÅ¾e MSE( ) je vskutku dobrÃ½ ukazovateÄ¾ kvality odhadu. 7.2.5 PrÃ­klad. Nech odhadoch parametrov"
195,159,0.563,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"9 OdporÃºÄacie systÃ©my orientovanÃ© na znovupouÅ¾itie kÃ³du PoÄas vÃ½voja softvÃ©ru bÃ½va snahou vÃ½vojÃ¡rov minimalizovaÅ¥ opakovanie pÃ­sania rovnakÃ©ho zdrojovÃ©ho kÃ³du. VÄaka analÃ½ze uÅ¾ predtÃ½m vytvorenÃ½ch artefaktov zdrojovÃ©ho kÃ³du nÃ¡m mÃ´Å¾e odporÃºÄacÃ­ systÃ©m navrhnÃºÅ¥ znovupouÅ¾itie celÃ½ch kniÅ¾nÃ­c, prÃ­padne iba jej niektorÃ½ch ÄastÃ­. S vyuÅ¾itÃ­m existujÃºcich ÄastÃ­ zdrojovÃ©ho kÃ³du je moÅ¾nÃ½ rÃ½chlejÅ¡Ã­ vÃ½voj softvÃ©ru. V tejto kapitole sÃº prezentovanÃ© princÃ­py a zÃ¡klady odporÃºÄacieho systÃ©mu orientovanÃ©ho na znovupouÅ¾itie kÃ³du. ZÃ¡roveÅ sa predstavÃ­ aj jeden z moÅ¾nÃ½ch architektonickÃ½ch nÃ¡vrhov pre vytvorenie odporÃºÄacieho systÃ©mu. UrÄite kaÅ¾dÃ½ vÃ½vojÃ¡r softvÃ©ru si pri svojej prÃ¡ci aspoÅ raz uvedomil, Å¾e aktuÃ¡lne vytvÃ¡ranÃº ÄasÅ¥ zdrojovÃ©ho kÃ³du uÅ¾ predtÃ½m niekde vytvoril, a preto ak by ju naÅ¡iel a opÃ¤Å¥ pouÅ¾il, tak by sa vyhol znÃ¡memu vÃ½roku âznova vynÃ¡jdeniu kolesaâ [1]. Aby vÃ½vojÃ¡ri vyhÄ¾adali uÅ¾itoÄnÃ© Äasti zdrojovÃ½ch kÃ³dov, musia preruÅ¡iÅ¥ aktuÃ¡lnu ÄinnosÅ¥ (teda vyvÃ­jaÅ¥) a investovaÅ¥ Ãºsilie a Äas do vyhÄ¾adÃ¡vania. VÃ½sledok ich hÄ¾adania nemusÃ­ byÅ¥ vÅ¾dy prÃ­nosnÃ½, niektorÃ© nÃ¡jdenÃ© Äasti nemusia vyhovujÃº podmienkam Äi potrebÃ¡m a pre pouÅ¾itie inÃ½ch je zas potrebnÃ© prispÃ´sobiÅ¥ zdrojovÃ½ kÃ³d. Dokonca je moÅ¾nÃ©, Å¾e niekedy sa vhodnÃ© Äasti ani nenÃ¡jdu. Ak chceme navrhnÃºÅ¥ efektÃ­vny systÃ©m umoÅ¾ÅujÃºci znovupouÅ¾itie existujÃºceho ÄastÃ­ kÃ³du, musÃ­me vyrieÅ¡iÅ¥ tri hlavnÃ© problÃ©my: - problÃ©m repozitÃ¡ra â kde nÃ¡jsÅ¥ dostatoÄnÃ© mnoÅ¾stvo znovupouÅ¾iteÄ¾nÃ©ho materiÃ¡lu, - problÃ©m reprezentÃ¡cie â ako uchovaÅ¥ a reprezentovaÅ¥ znovupouÅ¾iteÄ¾nÃ½ materiÃ¡l, - problÃ©m zÃ­skavania â ako formulovaÅ¥ a realizovaÅ¥ dopyty na repozitÃ¡r v jednoduchom a presnom spÃ´sobe."
195,169,0.563,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Bez ohÄ¾adu na pouÅ¾itie vyÅ¡Å¡ie spomÃ­nanÃ½ch technÃ­k v module pre vyberanie a usporiadanie, pre presnejÅ¡ie usporiadanie je dobrÃ© pouÅ¾iÅ¥ aj dodatoÄnÃ© techniky, podÄ¾a ktorÃ½ch sa jednotlivÃ© nÃ¡jdenÃ© kusy zdrojovÃ½ch kÃ³dov zoradia, napr. podÄ¾a dÄºÅ¾ky Äasu vykonÃ¡vania, cyklickej komplexity20, alebo poÄtu riadkov kÃ³du. PraktickÃ¡ integrÃ¡cia odporÃºÄania PoslednÃ½m modulom v architektÃºre odporÃºÄaÄa je koncovÃ© rozhranie, prostrednÃ­ctvom ktorÃ©ho pouÅ¾Ã­vateÄ¾ pracuje s odporuÄenÃ½mi vÃ½sledkami kusov zdrojovÃ½ch kÃ³dov. Z hÄ¾adiska vnÃ­mania informÃ¡ciÃ­ je pre pouÅ¾Ã­vateÄ¾a dÃ´leÅ¾itÃ©, aby odporÃºÄaÄ nepÃ´sobil ruÅ¡ivo na jeho ÄinnosÅ¥. Vo vÃ¤ÄÅ¡ine vÃ½vojovÃ½ch prostredÃ­ existuje funkcionalita automatickÃ©ho dopÄºÅania textu, ktorÃ¡ pouÅ¾Ã­vateÄ¾ovi automaticky doplnÃ­ slovo, ktorÃ© uÅ¾ raz napÃ­sal. V prÃ­pade, Å¾e novo pÃ­sanÃ© slovo sa podobÃ¡ na viac ako jedno predtÃ½m napÃ­sanÃ©, ponÃºkne sa mu zoznam slov, z ktorÃ½ch si vyberie. Toto sprÃ¡vanie je moÅ¾nÃ© vyuÅ¾iÅ¥ aj pre zakomponovanie odporÃºÄaÄa. Ak teda pouÅ¾Ã­vateÄ¾ pri budovanÃ­ nejakej triedy sa rozhodne, Å¾e skÃºsi vyhÄ¾adaÅ¥ Äi uÅ¾ nieÄo podobnÃ© neexistuje, tak odporÃºÄaÄu dÃ¡ vedieÅ¥, Å¾e chce vyhÄ¾adÃ¡vaÅ¥, napr. stlaÄenÃ­m klÃ¡vesovej skratky. Na pozadÃ­ sa vykonajÃº vÅ¡etky procesy opÃ­sanÃ© v predchÃ¡dzajÃºcich Äastiach. ObrÃ¡zok 9.2 znÃ¡zorÅuje zobrazenie odporÃºÄania pouÅ¾Ã­vateÄ¾ovi formou ponuky doplnenia kÃ³du."
94,37,0.563,Sprievodca svetom vedeckÃ©ho publikovania,"1.4.6 ZaÄiatky Elsevieru Aj najvÃ¤ÄÅ¡ie vydavateÄ¾skÃ© domy zaÄÃ­nali skromne. SpoloÄnosÅ¥ Elsevier, ktorÃ¡ dnes dominuje trhu s akademickÃ½mi publikÃ¡ciami, vznikla v roku 1880 a nesie meno znÃ¡mej rodiny knÃ­hkupcov, tlaÄiarov a vydavateÄ¾ov Elzevirovcov, ktorej Älenovia pÃ´sobili v Holandsku v 16. â 18. storoÄÃ­ a vyrÃ¡bali prvotriedne knihy. Hoci zakladateÄ¾ firmy Jacobus George Robbers s nimi nebol v prÃ­buzenskom vzÅ¥ahu, prevzal znak rodiny, ktorÃ½ vyobrazuje starÃ©ho muÅ¾a stojaceho pod brestom ovinutÃ½m viniÄom a nÃ¡pis âNon Solusâ (nie sÃ¡m). MÃ¡ symbolizovaÅ¥ vzÅ¥ah medzi vydavateÄ¾om a uÄencom, ako povedal Erazmus na tÃ©mu klasickÃ©ho podobenstva o strome a viniÄi: âAko viniÄ, ktorÃ½, hoci najuÅ¡Ä¾achtilejÅ¡ia zo vÅ¡etkÃ½ch drevÃ­n, potrebuje podporu tyÄÃ­, stÄºpov alebo inÃ½ch stromov, ktorÃ© neplodia ovocie, tak mocnÃ­ a uÄenÃ­ potrebujÃº pomoc prostÃ½ch Ä¾udÃ­.â (Elsevier11). SpoÄiatku sa Elsevieru veÄ¾mi nedarilo â eÅ¡te v roku 1930 sa topil v dlhoch, no riaditeÄ¾ J. P. Klautz vycÃ­til Å¡ancu v potenciÃ¡li nemeckÃ½ch autorov, ktorÃ­ pre rozmach nacizmu nemohli publikovaÅ¥ doma. KeÄÅ¾e s beletristami uÅ¾ pracovali inÃ© vydavateÄ¾stvÃ¡, Elsevier sa zaÄal orientovaÅ¥ na uÄebnice a vedeckÃº literatÃºru. NemeckÃ© vydania prÃ­liÅ¡ nevynÃ¡Å¡ali, hoci eÅ¡te v 19. storoÄÃ­ patrila nemÄina spolu s francÃºzÅ¡tinou a angliÄtinou k trojici najpouÅ¾Ã­vanejÅ¡Ã­ch âjazykov vedyâ a v chÃ©mii dokonca dominovala. No hrÃ´zy prvej svetovej vojny zanechali jazvy aj v kedysi apolitickej republike listov. BelgickÃ­, francÃºzski a britskÃ­ vedci vyhlÃ¡sili bojkot nemecko-rakÃºskych vedcov. V niektorÃ½ch Å¡tÃ¡toch USA dokonca (napriek poÄetnÃ½m nemecky hovoriacim komunitÃ¡m) zaÄiatkom 20. storoÄia platili zÃ¡kony, ktorÃ© zakazovali verejne pouÅ¾Ã­vaÅ¥ nemeckÃ½ jazyk a uÄiÅ¥ deti mladÅ¡ie ako desaÅ¥ rokov po nemecky. S rastom politickÃ©ho vplyvu USA sa ako medzinÃ¡rodnÃ½ jazyk vedeckej komunikÃ¡cie etablovala angliÄtina (Gordin 2015). Bol to prÃ¡ve anglickÃ½ preklad nemeckej chemickej encyklopÃ©die, Äo zÃ­skalo Elsevieru poÄiatoÄnÃ½ kredit vo vedeckom svete. VÄaka tomuto poÄinu oslovil vydavateÄ¾stvo po druhej svetovej vojne aj holandskÃ½ biochemik Hendrik Westenbrink s myÅ¡lienkou prvÃ©ho medzinÃ¡rodnÃ©ho vedeckÃ©ho Äasopisu Biochimica et Biophysica Acta, ktorÃ½ zaÄal vychÃ¡dzaÅ¥ v roku 1947. Publikoval naprÃ­klad dÃ´leÅ¾itÃ© ÄlÃ¡nky o enzÃ½moch a ribonukleovÃ½ch kyselinÃ¡ch. Odvtedy sa rozrÃ¡stol na celÃº skupinu Äasopisov BBA tematicky zameranÃ½ch okrem vÅ¡eobecnej biochemicko-biofyzikÃ¡lnej lÃ­nie na bioenergetiku, membrÃ¡ny, lipidy, proteÃ­ny, regulÃ¡ciu gÃ©nov a molekulÃ¡rne mechanizmy chorÃ´b. Z hÄ¾adiska otvorenÃ©ho prÃ­stupu tieto Äasopisy uplatÅujÃº hybridnÃº stratÃ©giu â fungujÃº na bÃ¡ze predplatnÃ©ho, ale za poplatok (3000 â 4000 Eur, podÄ¾a Äasopisu) ponÃºkajÃº autorom otvorenÃ© publikovanie ÄlÃ¡nku. MedzinÃ¡rodnÃ½ trh pre vedeckÃ© publikÃ¡cie v angliÄtine rÃ¡stol. VlÃ¡dy si zaÄali uvedomovaÅ¥ vÃ½znam vzdelania a vedy pre rozvoj spoloÄnosti, jej Å¾ivotnÃº ÃºroveÅ, konkurencieschopnosÅ¥"
195,18,0.563,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"V treÅ¥om kroku odporÃºÄacieho procesu systÃ©m odporÃºÄa vÅ¡etky vygenerovanÃ© pravidlÃ¡ pre triedu, ktorÃº vÃ½vojÃ¡r prÃ¡ve vytvÃ¡ra â ObrÃ¡zok 1.3. PravidlÃ¡ vÅ¡ak musia vychÃ¡dzaÅ¥ z predpokladov, ktorÃ© v systÃ©me skutoÄne nastali."
190,475,0.562,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,ZÃ¡kladom pre definovanie optimÃ¡lnej zÃ¡kaznÃ­cky orientovanej a diferencovanej stratÃ©gie a pre vybudovanie dlhodobÃ©ho ziskovÃ©ho vzÅ¥ahu s konkrÃ©tnymi zÃ¡kaznÃ­kmi je nÃ¡jdenie optimÃ¡lnej rovnovÃ¡hy medzi tromi kÄ¾ÃºÄovÃ½mi charakteristikami vzÅ¥ahu zÃ¡kaznÃ­k â spoloÄnosÅ¥ [4]:
393,133,0.562,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"VeÄ¾a webovÃ½ch pavÃºkov vyvinuli na pomoc jednotlivÃ½m pouÅ¾Ã­vateÄ¾om pri vyhÄ¾adÃ¡vanÃ­ uÅ¾itoÄnÃ½ch informÃ¡ciÃ­ na webe. KeÄÅ¾e vÃ¤ÄÅ¡inou tieto pavÃºky sa vykonÃ¡vajÃº na klientskÃ½ch poÄÃ­taÄoch, majÃº k dispozÃ­cii pre vyhÄ¾adÃ¡vacÃ­ proces vÃ¤ÄÅ¡Ã­ vÃ½poÄtovÃ½ vÃ½kon a pamÃ¤Å¥. TaktieÅ¾ tieto nÃ¡stroje poskytujÃº pouÅ¾Ã­vateÄ¾ovi vÃ¤ÄÅ¡ie moÅ¾nosti pri riadenÃ­ a personalizÃ¡cii vyhÄ¾adÃ¡vacieho procesu. NajznÃ¡mejÅ¡Ã­m skorÃ½m prÃ­kladom osobnÃ©ho webovÃ©ho pavÃºka je program tueMosaic (De Bra & Post, 1994). V programe tueMosaic pouÅ¾Ã­vateÄ¾ zadal kÄ¾ÃºÄovÃ© slovÃ¡, Å¡Ã­rku a hÄºbku hÄ¾adania a spustil pavÃºka, aby zaÄal sÅ¥ahovaÅ¥ strÃ¡nky zo zadanej Å¡tartovacej strÃ¡nky. Program pouÅ¾Ã­va âfish searchâ algoritmus, Äo je pozmenenÃ½ ânajlepÅ¡Ã­ najprvâ vyhÄ¾adÃ¡vacÃ­ algoritmus. NeskÃ´r vÃ½voj pavÃºkov prebiehal rÃ´znymi smermi. NaprÃ­klad TkWWW robot bol vyhÄ¾adÃ¡vaÄ integrovanÃ½ do prehliadaÄa TkWWW, pavÃºk SPHINX (Miller & Bharat, 1998) robil prehÄ¾adÃ¡vanie do Å¡Ã­rky a zobrazoval vÃ½sledok ako dvojrozmernÃ½ graf, CI Spider vykonÃ¡val jazykovÃº analÃ½zu a zhlukovanie nÃ¡jdenÃ½ch vÃ½sledkov. V inÃ½ch Å¡tÃºdiÃ¡ch pouÅ¾Ã­vajÃº pavÃºky v procese hÄ¾adania pokroÄilejÅ¡ie algoritmy, naprÃ­klad Itsy Bitsy Spider (Chen et al., 1998) hÄ¾adÃ¡ pomocou najlepÅ¡Ã­ najprv prehÄ¾adÃ¡vania a genetickÃ©ho algoritmu. KaÅ¾dÃ© URL sa modeluje ako jedinec poÄiatoÄnej populÃ¡cie. KrÃ­Å¾enie sa definuje ako vÃ½ber URL, na ktorÃ© ukazujÃº zaÄiatky viacerÃ½ch URL. MutÃ¡cia sa modeluje pomocou naÄÃ­tania nÃ¡hodnÃ©ho URL z adresÃ¡ra Yahoo. PretoÅ¾e genetickÃ½ algoritmus je optimalizaÄnÃ½ proces, je vhodnÃ½ pre hÄ¾adanie strÃ¡nok na webe podÄ¾a urÄitÃ½ch kritÃ©riÃ­. V ÄalÅ¡Ã­ch pavÃºkoch sa pouÅ¾Ã­valo simulovanÃ© Å¾Ã­hanie, naivnÃ½ bayesovskÃ½ klasifikÃ¡tor a ÄalÅ¡ie algoritmy."
41,2,0.562,InformaÄnÃ© vzdelÃ¡vanie,"1. InformaÄnÃ© pramene InformaÄnÃ½ prameÅ (rovnako oznaÄovanÃ½ ako informaÄnÃ½ zdroj) mÃ´Å¾e byÅ¥ pozorovanie, prejav Ä¾udÃ­, rÃ´zne dokumenty, obrÃ¡zky alebo pozorovanie, pre niekoho zdroj informÃ¡ciÃ­ je ÄokoÄ¾vek, Äo by mohlo Äloveka o nieÄom informovaÅ¥, poskytnÃºÅ¥ niekomu nejakÃº vedomosÅ¥. RÃ´zne vedeckÃ© teÃ³rie majÃº odliÅ¡nÃ© nÃ¡zory na dÃ´leÅ¾itosÅ¥ rÃ´znych druhov informaÄnÃ½ch prameÅov/zdrojov. Empirizmus povaÅ¾uje zmyslovÃ© Ãºdaje za najvyÅ¡Å¡ie informaÄnÃ© zdroje, zatiaÄ¾ Äo inÃ© vednÃ© teÃ³rie majÃº odliÅ¡nÃ© nÃ¡zory (Kragh 1989). RÃ´zne typy informaÄnÃ½ch zdrojov moÅ¾no rozdeliÅ¥ do dvoch Å¡irokÃ½ch kategÃ³riÃ­: A. DokumentÃ¡rne zdroje B. NedokumentÃ¡rne zdroje 2. DokumentÃ¡rne zdroje Spravidla ide o publikovanÃ© alebo zaznamenanÃ© dokumenty o vedomostiach. SÃº to texty, nahrÃ¡vky, Å¡tandardy, vÃ½skumnÃ© prÃ¡ce, fotografie, listy, knihy a podobne. Dokument (z angl. document) svojim charakterom mÃ´Å¾e maÅ¥ listinnÃº, Äi elektronickÃº podobu. Predstavuje dÃ´kaz, rovnako aj vyjadrenie myÅ¡lienky, Äi je formou povolenia. Dokument je ucelenÃ½ sÃºbor informÃ¡ciÃ­, tvorenÃ½ prevaÅ¾ne textom, ale mÃ´Å¾e obsahovaÅ¥ aj tabuÄ¾ky a inÃ© prvky. PodÄ¾a pÃ´vodnosti obsahu dokumentÃ¡rne informaÄnÃ© zdroje delÃ­me na: - primÃ¡rne informaÄnÃ© pramene (prinÃ¡Å¡ajÃº vlastnÃ©, vÃ¤ÄÅ¡inou aj pÃ´vodnÃ© informÃ¡cie alebo dÃ¡ta) - sekundÃ¡rne informaÄnÃ© pramene (informujÃº o existencii primÃ¡rnych informaÄnÃ½ch prameÅov) - terciÃ¡rne informaÄnÃ© pramene (informujÃº o existencii sekundÃ¡rnych informaÄnÃ½ch prameÅov)"
59,714,0.562,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 15.3. (A) Priebeh nÃ¡vÅ¡tevnosti baru El Farol pre jednotlivÃ© epochy. Algoritmus bol iniciovanÃ½ tak, Å¾e kaÅ¾dÃ½ agent mal stratÃ©giu (11111111), t. j. za kaÅ¾dÃ½ch podmienok vo Å¡tvrtok navÅ¡tÃ­vil bar. Proces uÄenia sa stratÃ©giÃ­ umoÅ¾nil vznik novÃ½m stratÃ©giÃ¡m, ktorÃ© uÅ¾ poskytovali priemernÃº nÃ¡vÅ¡tevnosÅ¥ okolo 60 hostÃ­ (Äo je optimÃ¡lny vÃ½sledok). (B) Frakcie pouÅ¾Ã­vania jednotlivÃ½ch histÃ³riÃ­ v stratÃ©giÃ¡ch celej populÃ¡cie. Z grafu vyplÃ½va, Å¾e sa ustÃ¡lil ârovnovÃ¡Å¾nyâ stav, kde kaÅ¾dÃ¡ histÃ³ria (UUU, ..., CCC) sa vyuÅ¾Ã­va pribliÅ¾nÃ© na 60 %. (C) ZnÃ¡zornenie priebehov frekvencie nÃ¡vÅ¡tev jednotlivÃ½ch agentov. PriemernÃ¡ nÃ¡vÅ¡tevnosÅ¥ je pribliÅ¾ne 60 %, avÅ¡ak existujÃº agenti, ktorÃ­ na zÃ¡klade svojej stratÃ©gie navÅ¡tevujÃº bar ÄastejÅ¡ie (zriedkavejÅ¡ie). (D) ZnÃ¡zornenie priebehu nÃ¡vÅ¡tevnosti baru, ak sa nÃ¡vÅ¡tevnÃ­ci rozhodujÃº tak, Å¾e si vygenerujÃº nÃ¡hodnÃ© ÄÃ­slo 0 ï£ rand ï£ 1 , ak toto ÄÃ­slo spÄºÅa (nespÄºÅa) podmienku rand ï£ 0.6 , tak bar navÅ¡tÃ­vi (nenavÅ¡tÃ­vi). VÃ½sledkom tohto jednoduchÃ©ho rozhodovacieho procesu je, Å¾e priemernÃ¡ nÃ¡vÅ¡tevnosÅ¥ rÃ½chlo konverguje k 60 %, avÅ¡ak na rozdiel od rozhodovania so stratÃ©giou (pozri diagramy A a B) sÃº v tomto prÃ­pade veÄ¾mi veÄ¾kÃ© fluktuÃ¡cie."
41,92,0.562,InformaÄnÃ© vzdelÃ¡vanie,"PÃ´vodne bola gramotnosÅ¥ chÃ¡panÃ¡ ako schopnosÅ¥ hovoriÅ¥, spievaÅ¥, spoloÄensky konverzovaÅ¥. Postupne sa k tÃ½mto schopnostiam pridalo aj vedieÅ¥ ÄÃ­taÅ¥ a pÃ­saÅ¥. AÅ¾ nastal rozvoj informaÄnÃ½ch technolÃ³giÃ­, ktorÃ½ priniesol celkom novÃ© pohÄ¾ady na chÃ¡panie gramotnosti, ako aj podstatnÃ© rozÅ¡Ã­renie pojmov, ktorÃ© sa k nej viaÅ¾u. Tapio Varis rozÅ¡iruje koncept gramotnosti pre 21. storoÄie a vymedzuje kompetencie s ohÄ¾adom na vÅ¡eobecnÃ© charakteristiky globÃ¡lneho informaÄnÃ©ho prostredia reÅ¡pektujÃºc i dÃ´sledky mÃ©diÃ­ a IKT, a to nasledovne: â¢ technologickÃ¡ gramotnosÅ¥ (Technology Literacy) â schopnosÅ¥ vyuÅ¾Ã­vaÅ¥ novÃ© mÃ©diÃ¡ a IKT na prÃ­stup k informÃ¡ciÃ¡m a ich komunikÃ¡ciu; â¢ informaÄnÃ¡ gramotnosÅ¥ (Information Literacy) â schopnosÅ¥ zhromaÅ¾ÄovaÅ¥, organizovaÅ¥ a hodnotiÅ¥ informÃ¡cie, schopnosÅ¥ tvorby logickÃ½ch Ãºsudkov, sÃºdov, nÃ¡zorov na ich zÃ¡klade; â¢ mediÃ¡lna gramotnosÅ¥ (Media Literacy) â vyjadruje narastajÃºce rozmery, kapacity dispozÃ­cie Äloveka na produkovanie a distribÃºciu obsahov v rozliÄnej forme; â¢ globÃ¡lna gramotnosÅ¥ (Global Literacy) â predstavuje porozumenie a vzÃ¡jomnÃº ÃºstretovosÅ¥ medzi Ä¾uÄmi a nÃ¡rodmi, obsahuje schopnosÅ¥ interaktivity a spoluprÃ¡ce medzi kultÃºrami; â¢ gramotnosÅ¥ a sociÃ¡lna zodpovednosÅ¥ â sociÃ¡lne kompetencie (Literacy with Responsibility) â schopnosÅ¥ zvaÅ¾ovaÅ¥ a hodnotiÅ¥ sociÃ¡lne dÃ´sledky mÃ©diÃ­ z hÄ¾adiska bezpeÄnosti, sÃºkromia a pod. [19] Pre chÃ¡panie informaÄnÃ©ho procesu v kontexte informaÄnej gramotnosti sa definuje Å¡esÅ¥ krokov informaÄnÃ©ho procesu â Å¡esÅ¥ zÃ¡kladnÃ½ch segmentov informaÄnej gramotnosti: 1. VÃ½ber tÃ©my a zameranie sa na tÃ©mu / schopnosÅ¥ adekvÃ¡tneho vÃ½beru tÃ©my a zamerania sa na tÃ©mu. 2. VoÄ¾ba zdroja informÃ¡ciÃ­ / schopnosÅ¥ voÄ¾by vhodnÃ½ch zdrojov informÃ¡ciÃ­. 3. Rozvoj vyhÄ¾adÃ¡vacÃ­ch stratÃ©giÃ­ / schopnosÅ¥ rozvoja vyhÄ¾adÃ¡vacÃ­ch stratÃ©giÃ­. 4. ZÃ­skavanie informÃ¡ciÃ­ / schopnosÅ¥ zÃ­skavania informÃ¡ciÃ­. 5. Vyhodnotenie informÃ¡ciÃ­ / schopnosÅ¥ efektÃ­vneho a sprÃ¡vneho vyhodnocovania informÃ¡ciÃ­."
190,171,0.562,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Tri horizontÃ¡lne pÃ¡sy opisujÃº modifikÃ¡cie plÃ¡nu projektu. Biele pole je odhadnutÃ½ reÃ¡lny plÃ¡n projektu. Å edÃ© pole je skrytÃ© oneskorenie plÃ¡nu. Å rafovanÃ© pole je oneskorenie projektu v jednotlivÃ½ch fÃ¡zach. Pre prÃ¡ce na projekte je vÅ¾dy aktuÃ¡lny biely plÃ¡n. Pre zÃ¡kaznÃ­ka je aktuÃ¡lnym plÃ¡nom celÃ¡ dÄºÅ¾ka stÄºpca. PotenciÃ¡lnym problÃ©mom takÃ©hoto modelu je, Å¾e ani zÃ¡kaznÃ­k ani tÃ­m pracujÃºci na projekte sa nesmie dozvedieÅ¥ o tom, Å¾e existujÃº dva plÃ¡ny. ZÃ¡kaznÃ­k by poÅ¾adoval dodaÅ¥ softvÃ©r k skorÅ¡iemu dÃ¡tumu, lebo by predpokladal, Å¾e sme schopnÃ­ prÃ¡cu stihnÃºÅ¥ skÃ´r neÅ¾ bola dohoda. TÃ­m by si prÃ¡cu prispÃ´sobil uvoÄ¾nenejÅ¡iemu plÃ¡nu, a tak by sa manaÅ¾ment rizÃ­k obsiahnutÃ½ v tejto metÃ³de stratil. Äo ak sa o plÃ¡ne prezentovanom zÃ¡kaznÃ­kovi dozvie projektovÃ½ tÃ­m? Nebude sa cÃ­tiÅ¥ podvedenÃ½? Zrejme Ã¡no, ale vÅ¾dy je tu moÅ¾nosÅ¥ vysvetliÅ¥ pohnÃºtky, ktorÃ© nÃ¡s k tomuto kroku viedli."
265,90,0.562,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ExistujÃº samozrejme aj metÃ³dy a techniky, ktorÃ© Å¡kÃ¡lovanÃ­m veÄ¾kosti projektu dotknutÃ© nie sÃº (pouÅ¾Ã­vajÃº sa rovnako, nezÃ¡visle od veÄ¾kosti projektu). PrÃ­kladom mÃ´Å¾e byÅ¥ refaktoring, udrÅ¾iavanie pokrytia zdrojovÃ©ho kÃ³du testami Äi prototypovanie na zahodenie. Äalej, mnohÃ© techniky modelovania softvÃ©ru sa Å¡kÃ¡lovanÃ­m nemusia meniÅ¥: napr. opis pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov (prÃ­pady pouÅ¾itia) budeme v princÃ­pe robiÅ¥ rovnako aj v projekte s piatimi vÃ½vojÃ¡rmi aj v projekte s piatimi tisÃ­cami vÃ½vojÃ¡rov. Podobne nezmenenÃ© bude aj modelovanie Å¾ivotnÃ©ho cyklu dÃ¡tovej entity (stavovÃ½m modelom) Äi opis biznis procesu (diagram aktivÃ­t)."
40,87,0.562,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"zpÅ¯sob, kterÃ½m ÄlovÄk dokÃ¡Å¾e sdÄlit topenÃ­, jakou teplotu mÃ¡ ve svÃ©m okolÃ­ udrÅ¾ovat. TopenÃ­ se tak stÃ¡vÃ¡ âchytrÃ½mâ, je schopnÃ© autonomnÄ reagovat na zmÄny teploty ve svÃ©m okolÃ­ a podle potÅeby se samo zapnout nebo vypnout. NasadÃ­me-li si âagentÃ­â brÃ½le, mÅ¯Å¾eme takovÃ©to topenÃ­ s termostatem vnÃ­mat jako autonomnÃ­ho agenta, jehoÅ¾ svÄt je tvoÅen jedinou veliÄinou (teplotou okolÃ­). ÄlovÄk takovÃ©muto agentu Åekne, jakou teplotu mÃ¡ udrÅ¾ovat v domÄ, a agent jiÅ¾ sÃ¡m podnikÃ¡ potÅebnÃ© akce k dosaÅ¾enÃ­ tohoto cÃ­le. KdyÅ¾ vÅ¡ak brÃ½le sundÃ¡me, vidÃ­me mÃ­sto agenta kus Å¾eleza, co hÅeje. Lze jej nazvat inteligentnÃ­m? A o to se, zjednoduÅ¡enÄ ÅeÄeno, prÃ¡vÄ vedou spory. Do definice âbÃ½t inteligentnÃ­â nakonec Äasto spadnou Å¾ivÃ© organismy, roboti2 a mnoho programÅ¯ â napÅÃ­klad prohledÃ¡vaÄÅ¯ webu. Pojem lze ovÅ¡em nejen upÅesÅovat, ale takÃ© zjemÅovat a vytvÃ¡Ået vÅ¡elijakÃ© podskupiny, napÅ. softwarovÃ© agenty nebo inteligentnÃ­ softwarovÃ© agenty a pod. KonkrÃ©tnÄ ti pyÅ¡nÃ­cÃ­ se adjektivem âinteligentnÃ­â tvoÅÃ­ samostatnou, pomÄrnÄ rozsÃ¡hlou vÃ½zkumnou oblast (blÃ­Å¾e viz [58]). Pro nÃ¡Å¡ typ agentÅ¯ je klÃ­ÄovÃ© adjektivum âvirtuÃ¡lnÃ­â. OdrÃ¡Å¾Ã­ se v nÄm dvÄ vÄci: fakt, Å¾e majÃ­ virtuÃ¡lnÃ­ tÄlo, a fakt, Å¾e bydlÃ­ ve virtuÃ¡lnÃ­m svÄtÄ. NapÅÃ­klad svÄtem mnoha inteligentnÃ­ch softwarovÃ½ch agentÅ¯ je Internet a Å¾Ã¡dnÃ© tÄlo v naÅ¡em smyslu nemajÃ­. O vztahu virtuÃ¡lnÃ­ch agentÅ¯ k jinÃ½m agentÅ¯m se vÃ­ce pÃ­Å¡e v [10], [7]. V kontextu virtuÃ¡lnÃ­ch agentÅ¯ lze o autonomii ÅÃ­ci nÃ¡sledujÃ­cÃ­. PÅi nÃ¡vrhu a tvorbÄ virtuÃ¡lnÃ­ho agenta, aÅ¥ uÅ¾ mluvÃ­me o jeho vizuÃ¡lnÃ­ podobÄ nebo o jeho chovÃ¡nÃ­, je tÅeba mÃ­t na pamÄti, k jakÃ©mu ÃºÄelu ho konstruujeme. VÄtÅ¡inou nenÃ­ naÅ¡Ã­m cÃ­lem simulace reality ale napodobenÃ­ reality, vytvoÅenÃ­ virtuÃ¡lnÃ­ho svÄta, kterÃ½ zprostÅedkuje divÃ¡kovi iluzi, Å¾e se nachÃ¡zÃ­ ve funkÄnÃ­m a fungujÃ­cÃ­m svÄtÄ. Toho je zpravidla jednoduÅ¡Å¡Ã­ dosÃ¡hnout vhodnÃ½m zjednoduÅ¡enÃ­m problÃ©mu neÅ¾ jeho plnou simulacÃ­. VezmÄme si jako pÅÃ­klad hru, kde hrÃ¡Ä mÅ¯Å¾e chodit nebo jezdit po mÄstÄ, v zÃ¡sadÄ libovolnÃ½m zpÅ¯sobem (jako je napÅ. GTA nebo Mafie). Bylo by moÅ¾nÃ© simulovat automobilovÃ½ provoz v celÃ©m mÄstÄ, s tisÃ­ci nebo deseti tisÃ­ci agenty, kteÅÃ­ by mÄli svoje autonomnÃ­ cÃ­le a jejich interakcÃ­ pÅi dosahovÃ¡nÃ­ tÄchto cÃ­lÅ¯ by emergentnÄ vznikal automobilovÃ½ provoz. Nebo je moÅ¾nÃ© simulovat provoz jenom v okolÃ­ hrÃ¡Äe a celÃ½ ho bude ÅÃ­dit jeden âloutkÃ¡Åâ, pohybujÃ­cÃ­ jednotlivÃ½mi auty jako loutkami (a kterÃ½ bude mÃ­t nÄjakÃ¡ pravidla, jak mÃ¡ hustota provozu a typ aut zÃ¡viset na mÃ­stÄ a dennÃ­ dobÄ). DruhÃ½ zpÅ¯sob je zatÃ­m stÃ¡le mnohem schÅ¯dnÄjÅ¡Ã­ a pouÅ¾Ã­vanÄjÅ¡Ã­. K tomuto problÃ©mu se jeÅ¡tÄ vrÃ¡tÃ­me na konci kapitoly."
195,31,0.562,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov ich zabudnÃº uviesÅ¥ do zÃ¡znamu. ChÃ½bajÃºce hodnoty v poliach mÃ´Å¾u vÃ½razne ovplyvÅovaÅ¥ kvalitu vydolovanÃ½ch informÃ¡cii a tÃ½m pÃ¡dom aj kvalitu samotnÃ½ch odporÃºÄanÃ­. Duplicita â Je pravdepodobnÃ©, Å¾e chybu objavÃ­ viacero pouÅ¾Ã­vateÄ¾ov. ZÃ¡kladnÃ¡ chyba mÃ´Å¾e byÅ¥ rovnakÃ¡, ale prejavuje sa rÃ´znymi spÃ´sobmi (prejavÃ­ sa v rÃ´znom Äase v zÃ¡vislosti od prÃ¡ce, ktorÃº pouÅ¾Ã­vateÄ¾ vykonal) a preto je Å¥aÅ¾kÃ© identifikovaÅ¥, Å¾e ide o duplicitu. Å kodlivosÅ¥ duplicÃ­t v zÃ¡znamoch je diskutabilnÃ¡. VÃ½vojÃ¡ri ju vo vÅ¡eobecnosti nepokladajÃº za vÃ¡Å¾ny problÃ©m, prÃ¡ve naopak. DuplicitnÃ© zÃ¡znamy obsahujÃº viac informÃ¡cii, ktorÃ© mÃ´Å¾u pomÃ´cÅ¥ pri rieÅ¡enÃ­. Len mÃ¡lo systÃ©mov na sledovanie chÃ½b mÃ¡ v sebe implementovanÃ½ odporÃºÄaÄ, ktorÃ½ by upozorÅoval spravodajcu chyby na prÃ­tomnosÅ¥ podobnÃ½ch chÃ½b, aby sa prediÅ¡lo vzniku potenciÃ¡lnych duplicÃ­t. Duplicity v zÃ¡znamoch spÃ´sobujÃº komplikÃ¡cie poÄas analÃ½zy a dolovania, pretoÅ¾e zaprÃ­ÄiÅujÃº skreslenie vÃ½sledkov. Existuje viacero prÃ­stupov, ktorÃ© sa venujÃº odhaÄ¾ovaniu duplicÃ­t [6,7]. SÃº zaloÅ¾enÃ© na hÄ¾adanÃ­ podobnostÃ­ jednotlivÃ½ch polÃ­ zÃ¡znamov pomocou rÃ´znych porovnÃ¡vacÃ­ch algoritmov a metÃ³d spracovania prirodzenÃ©ho jazyka. NÃ¡sledne sa zÃ¡znamy oznaÄujÃº ako duplicitnÃ© a mÃ´Å¾u sa spojiÅ¥ do jednÃ©ho super zÃ¡znamu. RuÄnÃ© upravenie a predspracovanie zÃ¡znamov mÃ´Å¾e vÃ½raznÃ½m spÃ´sobom prispieÅ¥ k zvÃ½Å¡eniu kvality finÃ¡lnych odporÃºÄanÃ­."
129,22,0.562,Sprievodca licenciami Creative Commons,"Licencie Creative Commons vÃ¡m ako tvorcovi obsahu umoÅ¾ÅujÃº presne urÄiÅ¥, ako inÃ­ pouÅ¾Ã­vatelia mÃ´Å¾u a nemÃ´Å¾u pouÅ¾Ã­vaÅ¥ vaÅ¡e dielo. Licencie sÃº dostatoÄne flexibilnÃ© na to, aby jasne zadefinovali, Äo je a Äo nie je dovolenÃ©. VÅ¡etky licencie Creative Commons by mali byÅ¥ pouÅ¾Ã­vanÃ© v nezmenenej podobe. MÃ´Å¾ete si vybraÅ¥ jednu zo Å¡iestich uvedenÃ½ch, potom vÅ¡ak uÅ¾ nesmiete meniÅ¥ ich znenie. OrganizÃ¡cia Creative Commons vyvinula nÃ¡stroj (CC0 Public Domain Dedication6, ]), pomocou ktorÃ©ho mÃ´Å¾ete darovaÅ¥ svoje diela tzv. verejnej domÃ©ne. Darovanie sa realizuje prostrednÃ­ctvom prÃ¡vneho textu (legal code) hosÅ¥ovanÃ©ho organizÃ¡ciou Creative Commons (tak ako sÃº aj ostatnÃ© licencie), ktorÃ½m sa vzdÃ¡vate vÅ¡etkÃ½ch autorskÃ½ch prÃ¡v a sÃºvisiacich prÃ¡v, naprÃ­klad morÃ¡lnych, k dielu, a to v rozsahu, v akom je moÅ¾nÃ© sa ich vzdaÅ¥. V takomto prÃ­pade ktokoÄ¾vek, kto vaÅ¡u prÃ¡cu akokoÄ¾vek pouÅ¾ije, nie je povinnÃ½ uviesÅ¥ vÃ¡s ako autora, hoci citovanie autora sa napriek tomu odporÃºÄa. Tento nÃ¡stroj je moÅ¾nÃ© vyuÅ¾iÅ¥ za urÄitÃ½ch okolnostÃ­, najmÃ¤ ak ide o dÃ¡ta. [Dopl. do slovenskej verzie: âCC0 (Creative Commons Zero), skratka oznaÄujÃºca Public Domain Dedication, je oznaÄenie, ktorÃ© vyjadruje, Å¾e na databÃ¡zu alebo inÃ½ predmet sa nevzÅ¥ahujÃº Å¾iadne vÃ½luÄnÃ© prÃ¡va. Ide primÃ¡rne o situÃ¡ciu, keÄ sa nositeÄ¾ vzdÃ¡ svojich prÃ¡v. CC0 aplikuje mnoÅ¾stvo inÅ¡titÃºciÃ­, z ktorÃ½ch mÃ´Å¾eme menovaÅ¥ British Library, CERN Library, Europeana, Netherlands Government, EurÃ³psku komisiu a mnohÃ© ÄalÅ¡ie. Treba vÅ¡ak upozorniÅ¥, Å¾e podÄ¾a slovenskÃ©ho prÃ¡vneho poriadku sa nemoÅ¾no vzdaÅ¥ autorskÃ½ch prÃ¡v. V tÃ½ch prÃ­padoch, keÄ obsah databÃ¡zy tvoria autorskÃ© diela, alebo keÄ je Å¡truktÃºra data bÃ¡zy chrÃ¡nenÃ¡ autorskÃ½m prÃ¡vom, nie je aplikÃ¡cia CC0 v slovenskÃ½ch podmienkach vhodnÃ¡.â7 Okrem nÃ¡stroja CC0 (âCC Zeroâ) existuje aj nÃ¡stroj Public Domain Mark (PDM) [ ], pouÅ¾Ã­va sa na oznaÄenie diel, ktorÃ½ch pouÅ¾Ã­vanie uÅ¾ nie je obmedzovanÃ© autorskÃ½mi prÃ¡vami â podÄ¾a slovenskÃ©ho autorskÃ©ho zÃ¡kona tomu zodpovedÃ¡ pojem voÄ¾nÃ© dielo]."
130,377,0.562,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PodriadenosÅ¥ agentov Z hÄ¾adiska vzÃ¡jomnej podriadenosti agentov existuje veÄ¾kÃ© mnoÅ¾stvo rÃ´znych stupÅov a spÃ´sobov jej realizÃ¡cie. Agent je inÃ©mu agentu podriadenÃ½ v prÃ­pade, Å¾e jeho sprÃ¡vanie mÃ´Å¾e byÅ¥ Ãºmyselne ovplyvÅovanÃ© nadradenÃ½m agentom. StupeÅ ovplyvÅovania vÅ¡ak mÃ´Å¾e byÅ¥ rÃ´zny. NajprÃ­snejÅ¡Ã­m vzÅ¥ahom podriadenosti je statickÃ© podriadenie. V takomto prÃ­pade nadradenÃ½ agent mÃ´Å¾e dÃ¡vaÅ¥ prÃ­kazy podriadenÃ©mu a podriadenÃ½ agent nemÃ´Å¾e odmietnuÅ¥ vykonanie takÃ©hoto prÃ­kazu. TakÃ©to vzÅ¥ahy sa pouÅ¾Ã­vajÃº na vytvÃ¡ranie prÃ­sne hierarchickÃ½ch Å¡truktÃºr riadenia vojenskÃ©ho typu, mÃ´Å¾u sa vÅ¡ak vyskytnÃºÅ¥ aj v inej neÅ¾ hierarchickej Å¡truktÃºre. Na druhej strane stoja organizÃ¡cie s rovnocennÃ½mi vzÅ¥ahmi, kde nie je Å¾iadny agent podriadenÃ½ inÃ©mu a na vÃ½slednom rozhodnutÃ­ sa podieÄ¾ajÃº vÅ¡etci rovnakou mierou. Agenty v tomto prÃ­pade mÃ´Å¾u vyuÅ¾Ã­vaÅ¥ vzÅ¥ah dynamickÃ©ho podriadenia, kedy agent mÃ´Å¾e poÅ¾iadaÅ¥ inÃ©ho agenta o vykonanie nejakej akcie, poÅ¾iadanÃ½ agent ale mÃ´Å¾e jej vykonanie bez akejkoÄ¾vek penalizÃ¡cie odmietnuÅ¥."
369,173,0.561,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V ÃºÄtovnÃ­ctve sa rozliÅ¡ujÃº tieto zÃ¡kladnÃ© druhy (kategÃ³rie) ÃºÄtov: 1. Formy majetku (aktÃ­va) â reprezentujÃº skladbu majetku. Patria sem ÃºÄty pre budovy, stroje, materiÃ¡l na sklade, peniaze v banke, peniaze v pokladni, pohÄ¾adÃ¡vky10 a inÃ©. 2. Zdroje majetku (pasÃ­va) â vyjadrujÃº, z Äoho je majetok obstaranÃ½. PasÃ­va zahÅÅajÃº napr. poÄiatoÄnÃ½ vklad majiteÄ¾ov do firmy, zisk z Äinnosti firmy, bankovÃ© Ãºvery, zÃ¡vÃ¤zky11 a inÃ©. 3. NÃ¡klady â spadajÃº pod ne napr. spotreba materiÃ¡lu, nÃ¡klady za energie, mzdy pracovnÃ­kov, nÃ¡jomnÃ©, dane, Ãºroky z Ãºverov a inÃ©. 4. VÃ½nosy â zahÅÅajÃº trÅ¾by z predaja vÃ½robkov alebo sluÅ¾ieb, Ãºroky na bankovÃ½ch ÃºÄtoch a inÃ©. ÃÄty foriem a zdrojov majetku sa nazÃ½vajÃº spoloÄnÃ½m menom sÃºvahovÃ©12 ÃºÄty. KeÄÅ¾e formy majetku a zdroje majetku ukazujÃº dvojakÃ½ pohÄ¾ad na ten istÃ½ majetok, platÃ­ zÃ¡kladnÃ¡, tzv. sÃºvahovÃ¡ rovnica: SÃºÄet hodnÃ´t foriem majetku = SÃºÄet hodnÃ´t zdrojov majetku. ÃÄty nÃ¡kladov a vÃ½nosov sa spoloÄne nazÃ½vajÃº vÃ½sledkovÃ© ÃºÄty, pretoÅ¾e zobrazujÃº vÃ½sledok hospodÃ¡renia danej firmy. ÃÄet je jednoznaÄne identifikovanÃ½ ÄÃ­slom ÃºÄtu. V minulosti vlÃ¡da (Ministerstvo financiÃ­) predpisovala zoznam ÃºÄtov, tzv. ÃºÄtovÃº osnovu13 so zÃ¡vÃ¤znÃ½m ÄÃ­slom a spÃ´sobom pouÅ¾itia. Firma mohla pouÅ¾Ã­vaÅ¥ iba ÃºÄty podÄ¾a predpÃ­sanej ÃºÄtovej14 osnovy a ÃºÄtovnÃ­ctvo viesÅ¥ iba v domÃ¡cej mene. Mohla si vÅ¡ak z ÃºÄtovej osnovy vybraÅ¥ iba tie ÃºÄty, ktorÃ© potrebovala15 a prÃ­padne ich Äalej Å¡trukturalizovaÅ¥. TakÃ½to upravenÃ½ zoznam ÃºÄtov firmy sa nazÃ½va ÃºÄtovÃ½ rozvrh. V sÃºÄasnosti v sÃºlade s legislatÃ­vou EurÃ³pskej Ãºnie sÃº uÅ¾ pravidlÃ¡ voÄ¾nejÅ¡ie, ale zo zvykovÃ½ch dÃ´vodov si firmy reÃ¡lne ÃºÄtovÃ© rozvrhy prÃ­liÅ¡ nemenili. ÃÄty podÄ¾a ich ÃºÄelu moÅ¾no rozdeliÅ¥ do dvoch skupÃ­n: ÃºÄtovacie a sumaÄnÃ©. ÃÄtovacÃ­ ÃºÄet vyjadruje hodnotu urÄitÃ©ho objektu (skutoÄnosti) a ako ukÃ¡Å¾eme neskÃ´r, vykonÃ¡va sa na neho ÃºÄtovanie. SumaÄnÃ½ ÃºÄet zoskupuje Å¡pecifikovanÃ© ÃºÄty za ÃºÄelom globÃ¡lnejÅ¡ieho"
130,45,0.561,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DÃ´sledky Medzi zÃ¡kladnÃ© vÃ½hody vzoru Prototyp patrÃ­ moÅ¾nosÅ¥ dynamickÃ©ho pridÃ¡vania novÃ½ch inÅ¡tanciÃ­ a moÅ¾nosÅ¥ prispÃ´sobenia existujÃºcich inÅ¡tanciÃ­ poÄas behu aplikÃ¡cie. VytvÃ¡ranÃ© objekty sÃº Äasto realizovanÃ© pomocou vzoru ZloÅ¾enina (pozri kapitolu 2.3). SkrÃ½va pred klientom, skutoÄnÃ© triedy inÅ¡tanciÃ­, ktorÃ© sa budÃº vytvÃ¡raÅ¥ a pouÅ¾Ã­vaÅ¥. PoÄas behu aplikÃ¡cie je moÅ¾nÃ© Ä¾ahko pridÃ¡vaÅ¥ a odoberaÅ¥ novÃ© produkty zaregistrovanÃ­m a odregistrovanÃ­m novÃ½ch inÅ¡tanciÃ­ produktov:"
135,247,0.561,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"je nutnÃ© vedie, odkia Ãºdaje prichÃ¡dzajÃº, ani kam odchÃ¡dzajÃº. Hlavnou nevÃ½hodou tÃ½chto systÃ©mov je, Å¾e sÃºiastka nevie, i niekto na jej udalos vÃ´bec odpovie. Ak je potrebnÃ© zareagova na kaÅ¾dÃº udalos, musÃ­ sa to realizova inÃ½m typom systÃ©mu. SÃºiastka nevie, ako dlho budÃº trva jednotlivÃ© odpovede, preto je to nevhodnÃ© pri pouÅ¾itÃ­ naprÃ­klad zdieanÃ½ch dÃ¡tovÃ½ch Å¡truktÃºr, kde sa vÃ½hody potlaia nÃºtenou synchronizÃ¡ciou. NevÃ½hodou je, Å¾e komunikÃ¡cia prebieha cez jedno hrdlo. ProblÃ©my nastÃ¡vajÃº pri presunoch vÃ¤Å¡ieho mnoÅ¾stva informÃ¡ciÃ­ vzahujÃºcich sa k jednej udalosti. Toto nevie vyrieÅ¡i ani distribuovanÃ½ smerova. Na prenos vekÃ©ho mnoÅ¾stva Ãºdajov sa potom pouÅ¾Ã­va inÃ¡ technolÃ³gia, ale to uÅ¾ vytvÃ¡ra zloÅ¾itÃ½ systÃ©m s viacerÃ½mi technolÃ³giami."
94,356,0.561,Sprievodca svetom vedeckÃ©ho publikovania,"CelÃ½ tento proces obsahuje niekoÄ¾ko etÃ¡p: vÃ½ber potrebnÃ½ch dÃ¡t, vÃ½ber ukazovateÄ¾ov, ktorÃ© sÃº zaujÃ­mavÃ© v kontexte vybranej metriky aplikovanej na hodnotenie vÃ½skumu a vedy, porovnanie prÃ­buznÃ½ch metrÃ­k, zasadenie dÃ¡t do konkrÃ©tneho obsahu a zvÃ¡Å¾enie prÃ­padnÃ½ch obmedzenÃ­, aplikÃ¡cia bibliometrickej analÃ½zy a interpretÃ¡cia zÃ­skanÃ½ch dÃ¡t. BibliometrickÃ© analÃ½zy moÅ¾no o. i. vyuÅ¾iÅ¥ pri porovnÃ¡vanÃ­ produktivity vÃ½skumu a jeho dopadu na danÃ½ vednÃ½ odbor od regionÃ¡lnej aÅ¾ po celosvetovÃº ÃºroveÅ. Takisto moÅ¾no pomocou takÃ½chto analÃ½z sledovaÅ¥ vÃ½voj medzinÃ¡rodnej spoluprÃ¡ce, alebo zÃ­skaÅ¥ prehÄ¾ad o produktivite vedeckÃ½ch pracovÃ­sk (metrika: normalizovanÃ½ citaÄnÃ½ dopad). Bibliometria mÃ¡ vÅ¡ak aj svoje limity, preto ju nemoÅ¾no aplikovaÅ¥ odtrhnutÃº od kontextu a cieÄ¾ov posudzovanÃ©ho pracoviska. Bibliometria leÅ¾Ã­ na prieseÄnÃ­ku zviditeÄ¾Åovania, vizualizÃ¡cie a hodnotenia vedy a vÃ½skumu. BliÅ¾Å¡ie sa vyuÅ¾itÃ­m a limitmi rÃ´znych metrÃ­k na kvantifikÃ¡ciu publikaÄnÃ©ho vÃ½konu zaoberÃ¡ kapitola 7."
240,408,0.561,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"musÃ­ rozlÃ­Å¡iÅ¥, Äi priraÄovaÅ¥ z poÄ¾a a[] alebo z poÄ¾a b[], a preto zrejme bude vzÃ¡jomne porovnÃ¡vaÅ¥ aktuÃ¡lny prvok z poÄ¾a a[] (a[ia]) s aktuÃ¡lnym prvkom z poÄ¾a b[] (b[ib]) a podÄ¾a vÃ½sledku porovnania vykonÃ¡ priradenie z poÄ¾a, ktorÃ©ho aktuÃ¡lny prvok je menÅ¡Ã­. V prÃ­pade riadkov 11 a 13 ide o doÄerpanie zvyÅ¡nÃ½ch prvkov v poli, priÄom v ostatnom poli uÅ¾ prvky nie sÃº a preto nie je potrebnÃ© porovnanie hodnÃ´t prvkov ale postaÄuje porovnanie indexu s poÄtom prvkov v poli: ia < na v riadku 11 a ib < nb v riadku 13. VÃ½slednÃ½ doplnenÃ½ program je takÃ½to:"
369,14,0.561,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V kapitole vysvetlÃ­me vÃ½znam modelovania pri tvorbe softvÃ©rovÃ©ho systÃ©mu a dÃ´leÅ¾itosÅ¥ dÃ¡tovÃ©ho modelu pri Å¡pecifikÃ¡cii systÃ©mu v etape analÃ½zy. StruÄne uvedieme notÃ¡ciu pre dÃ¡tovÃ© modelovanie. Äalej opÃ­Å¡eme zÃ¡kladnÃ© princÃ­py dobrÃ©ho dÃ¡tovÃ©ho modelovania. KvalitnÃ½ dÃ¡tovÃ½ model vedie k softvÃ©rovÃ©mu systÃ©mu, ktorÃ½ zmenÅ¡uje mnoÅ¾stvo chÃ½b pri jeho pouÅ¾Ã­vanÃ­, uÄ¾ahÄuje zmeny systÃ©mu a poskytuje ÄiastoÄne vÅ¡eobecnejÅ¡ie rieÅ¡enie, ktorÃ© umoÅ¾Åuje rozÅ¡Ã­riteÄ¾nosÅ¥ systÃ©mu. UvedenÃ© vlastnosti sa dosahujÃº predovÅ¡etkÃ½m normalizÃ¡ciou modelu, generalizÃ¡ciou tried a relÃ¡ciÃ­ a vyuÅ¾itÃ­m rekurzie."
265,381,0.561,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Asi najznÃ¡mejÅ¡Ã­ jazyk na modelovenie softvÃ©ru je UML (Unified Modeling Language). Vznikol zjednotenÃ­m viacerÃ½ch modelovacÃ­ch jazykov v 90. rokoch minulÃ©ho storoÄia, odkedy sa kontinuÃ¡lne vyvÃ­ja. Je zaloÅ¾enÃ½ na objektovo-orientovanom poÅatÃ­ softvÃ©ru a sÃºvisÃ­ najmÃ¤ s metÃ³dami objektovo-orientovanej analÃ½zy a nÃ¡vrhu. Viac o UML sa doÄÃ­tate v podkapitole 4.3. InÃ½ znÃ¡my modelovacÃ­ jazyk je BPMN (Business Process Model and Notation), ktorÃ½ sa pouÅ¾Ã­va na modelovanie biznis procesov. PrimÃ¡rne slÃºÅ¾i na podporu manaÅ¾mentu biznis procesov (pre manaÅ¾Ã©rov). Pri tvorbe softvÃ©ru sa vyuÅ¾Ã­va najmÃ¤ vo etape biznis analÃ½zy (pozri otÃ¡zka 2.0.1). Jazykom na inej Ãºrovni abstrakcie je SOMF (Service-oriented modeling framework). Ten sa zameriava na modelovanie sluÅ¾bovo-orientovanÃ½ch softvÃ©rovÃ½ch rieÅ¡enÃ­ rÃ´znej mierky v celom ich Å¾ivotnom cykle. Vo vÅ¡eobecnosti, modelovacie jazyky mÃ´Å¾eme rozdeliÅ¥ na textovÃ© a grafickÃ©. V prvom prÃ­pade na modelovanie staÄÃ­ formalizovanÃ½ umelÃ½ jazyk (prÃ­kladom mÃ´Å¾e byÅ¥ Å¡pecifikaÄnÃ½ jazyk Z, ktorÃ½ na Å¡pecifikÃ¡ciu algoritmov vyuÅ¾Ã­va mnoÅ¾inovÃº algebru). GrafickÃ© modelovacie jazyky vyuÅ¾Ã­vajÃº grafickÃ© konÅ¡trukcie na lepÅ¡iu vizualizÃ¡ciu modelovanÃ©ho. Sem spadajÃº predoÅ¡lÃ© prÃ­klady jazykov (UML, BPMN, SOMF)."
122,24,0.56,Modelovanie softvÃ©ru,"2.3 ÃÄastnÃ­ci V prÃ­pade pouÅ¾itia Zadaj objednÃ¡vku vystupuje zÃ¡kaznÃ­k. V prÃ­pade pouÅ¾itia Vytvor vÃ½robok by vystupoval obchodnÃ­k. NestaÄÃ­ hovoriÅ¥ proste âpouÅ¾Ã­vateÄ¾â? ProstrednÃ­ctvom ÃºÄastnÃ­kov prÃ­padov pouÅ¾itia si ujasÅujeme, kto a ako bude pouÅ¾Ã­vaÅ¥ systÃ©m, ale nemodelujeme tÃ½m priamo pouÅ¾Ã­vateÄ¾skÃ© prÃ¡va. V prÃ­padoch pouÅ¾itia ako ÃºÄastnÃ­k vystupuje aj systÃ©m alebo jeho Äasti."
59,138,0.56,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.9. ReplikÃ¡tor je charakterizovanÃ½ tak genotypom, ako aj fenotypom. Fitnes replikÃ¡tora je urÄenÃ½ schopnosÅ¥ou fenotypu preÅ¾Ã­vaÅ¥ v danom prostredÃ­ a vstupovaÅ¥ do vÃ½hodnÃ½ch interakciÃ­ s inÃ½mi replikÃ¡tormi z populÃ¡cie."
135,505,0.56,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"V tabulâke 7-3 je uvedenÃ½ prehlâad postupov vÃ½pocÌtu ohodnotenia grafu jednotlivÃ½mi algoritmami. Pre uvedenÃ© algoritmy (s vÃ½nimkou modelu deravÃ©ho kondenzÃ¡tora) je zrejmÃ© vyuÅ¾itie vÃ½pocÌtu hlâadania vlastnÃ©ho vektora matice iteracÌnou mocninovou metÃ³dou.2 V uvedenÃ½ch algoritmoch je z hlâadiska vÃ½pocÌtu eÅ¡te jeden zÃ¡sadnÃ½ rozdiel. Zatialâ cÌo algoritmy PageRank, HITS potrebujÃº na vÃ½pocÌet poznatâ celÃº incidencÌnÃº maticu grafu, tak pri algoritmoch Å¡Ã­renie aktivÃ¡cie a NodeRanking je pre vÃ½pocÌet potrebnÃ© iba okolie jednotlivÃ½ch vrcholov. DruhÃ¡ skupina algoritmov sa ukazuje bytâ vhodnejÅ¡ia na distribuovanÃ½ vÃ½pocÌet, pretoÅ¾e nemusÃ­ dochÃ¡dzatâ k synchronizÃ¡ciam po kaÅ¾dej iterÃ¡cii."
184,181,0.56,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Vo veÄ¾kÃ½ch spoloÄnostiach zasahujÃº dÃ´leÅ¾itÃ© obchodnÃ© procesy do viacerÃ½ch oblastÃ­ obchodovania podporovanÃ© nezÃ¡vislÃ½mi aplikÃ¡ciami vo vysoko heterogÃ©nnej IT infraÅ¡truktÃºre. V takomto prostredÃ­ nadobÃºdajÃº nÃ¡stroje a technolÃ³gie pre definovanie a ukotvenie obchodnÃ½ch procesov kriticky dÃ´leÅ¾itÃ½ vÃ½znam. Inak povedanÃ© to znamenÃ¡, Å¾e technolÃ³gie orchestrÃ¡cie obchodnÃ½ch procesov sa stÃ¡vajÃº kritickÃ½mi komponentmi v mnohÃ½ch spoloÄnostiach."
393,505,0.56,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Autori sa vzhÄ¾adom na prostriedky ponÃºkanÃ© jazykom Beta rozhodli pre zabezpeÄenie znovupouÅ¾itia ÄastÃ­ nÃ¡vrhovÃ½ch vzorov formou kniÅ¾nice vzorov LDP. KniÅ¾nica LDP sÃºstreÄuje znovupouÅ¾iteÄ¾nÃ© Äasti nÃ¡vrhovÃ½ch vzorov, ktorÃ© sÃº v aplikÃ¡cii ohÃ½banÃ© rÃ´znymi prostriedkami. ParametrizÃ¡cia vzorov je z veÄ¾kej miery zabezpeÄenÃ¡ virtuÃ¡lnymi neterminÃ¡lmi, virtuÃ¡lnymi triedami a ÄalÅ¡Ã­mi moÅ¾nosÅ¥ami jazyka Beta. Autori sa nevyhli pouÅ¾itiu viacnÃ¡sobnÃ©ho dedenia, ku ktorÃ©mu ale uviedli alternatÃ­vu vo forme pouÅ¾itia kompozÃ­cie. VhodnosÅ¥ vÃ½beru sprÃ¡vneho jazyka sa prejavÃ­ najmÃ¤ pri znovupouÅ¾Ã­vanÃ­ ÄastÃ­ nÃ¡vrhovÃ½ch vzorov. KniÅ¾nica LDP obsahuje niekoÄ¾ko nÃ¡vrhovÃ½ch vzorov podÄ¾a (Gamma et al., 1995) a poukazuje na moÅ¾nosÅ¥ vytvorenia takejto kniÅ¾nice. CieÄ¾ v podobe vytvorenia prostriedku pre znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov bol naplnenÃ½, no nÃ¡jsÅ¥ rieÅ¡enie vyuÅ¾Ã­vajÃºce tÃºto kniÅ¾nicu je Å¥aÅ¾kÃ©, ak vÃ´bec nejakÃ© existuje. PouÅ¾itie takejto kniÅ¾nice vzorov so sebou prinÃ¡Å¡a vÃ½hody i nevÃ½hody. Medzi vÃ½hody urÄite patrÃ­ moÅ¾nosÅ¥ znovupouÅ¾ia ÄastÃ­ vzorov, priÄom nie je potrebnÃ© zaoberaÅ¥ sa implementÃ¡ciou opakujÃºcich sa ÄastÃ­. ÄalÅ¡ou z vÃ½hod je moÅ¾nosÅ¥ vÃ½raznejÅ¡ej dokumentÃ¡cie a priradeniu tried k vzorom. JednoduchÃ½m spÃ´sobom mÃ´Å¾eme identifikovaÅ¥ participantov v inÅ¡tancii konkrÃ©tneho vzoru. DokumentÃ¡cia mÃ´Å¾e byÅ¥ generovanÃ¡ poloautomatickÃ½m spÃ´sobom. K nevÃ½hodÃ¡m patrÃ­ nemoÅ¾nosÅ¥ modifikovaÅ¥, resp. ohÃ½baÅ¥ vzor inÃ½m, ako v kniÅ¾nici definovanÃ½m (naznaÄenÃ½m a povolenÃ½m) spÃ´sobom. Vzor je uloÅ¾enÃ½ v kniÅ¾nici a sprÃ­stupnenÃ© sÃº len jeho Äasti, priÄom aj tie je moÅ¾nÃ© modifikovaÅ¥ iba spÃ´sobmi, ktorÃ© poskytuje konkrÃ©tny implementaÄnÃ½ jazyk. Gamma vo svojej monografii (Gamma et al., 1995) v prÃ­pade viacerÃ½ch vzorov opÃ­sal rÃ´zne spÃ´soby ohÃ½bania vzoru. IstÃ¡ moÅ¾nosÅ¥ ako sprÃ­stupniÅ¥ viacero smerov v ohÃ½banÃ­ vzoru je v umiestenÃ­ do kniÅ¾nice viacero kÃ³piÃ­ vzoru, priÄom v kaÅ¾dej kÃ³pii vzoru bude povolenÃ½ inÃ½ smer ohÃ½bania. Ale opÃ¤Å¥ sa tÃ½m zniÅ¾uje moÅ¾nosÅ¥ a voÄ¾nosÅ¥ vlastnej modifikÃ¡cie vzoru podÄ¾a potreby konkrÃ©tnej aplikÃ¡cie. Na druhej strane, ak identifikujeme zÃ¡kladnÃ© spÃ´soby ohÃ½bania vzoru, mÃ´Å¾eme vylÃºÄiÅ¥ chyby, ktorÃ© mÃ´Å¾u nastaÅ¥ nepovolenou a nesprÃ¡vnou modifikÃ¡ciou vzoru. ÄalÅ¡ou z nevÃ½hod mÃ´Å¾e byÅ¥ prÃ­padnÃ¡ nutnosÅ¥ pouÅ¾itia vÅ¡eobecnÃ©ho nÃ¡zvoslovia, ktorÃ© sÃ­ce vo viacerÃ½ch spÃ´soboch vyjadruje jasnÃº prÃ­sluÅ¡nosÅ¥ k tomu ktorÃ©mu vzoru, no na druhej strane v prÃ­pade konkrÃ©tnej domÃ©ny mÃ´Å¾e byÅ¥ prÃ­liÅ¡ vÅ¡eobecnÃ© a niekedy aÅ¾ mÃ¤tÃºce. Autorom sa podarilo preskÃºmaÅ¥ zÃ¡vislosti u vÅ¡etkÃ½ch 17 vzorov, ktorÃ© neoznaÄili za idiÃ³my s vÃ½nimkou Adapter, Proxy a Chain of responsibility. VÃ½sledky vyhodnotenia moÅ¾nostÃ­ uloÅ¾enia vzoru do kniÅ¾nice sÃº zobrazenÃ© v tabuÄ¾ke 9-6. HlavnÃ½m dÃ´vodom neuloÅ¾enia niektorÃ½ch vzorov do kniÅ¾nice LDP je veÄ¾kosÅ¥ vÅ¡eobecnej Äasti konkrÃ©tneho vzoru. TÃ¡to veÄ¾kosÅ¥ bola prÃ­liÅ¡ malÃ¡ a znovupouÅ¾itie by bolo zanedbateÄ¾ne malÃ©. Aj napriek vÃ½razne malÃ©mu znovupouÅ¾itiu, koncentrovanÃ­m niektorÃ½ch vzorov, resp. ich ÄastÃ­ do kniÅ¾nice by sa podporila viditeÄ¾nosÅ¥ v celkovom nÃ¡vrhu."
115,41,0.56,Algebra a diskrÃ©tna  matematika,"ExistujÃº jednoduchÃ© modifikÃ¡cie schÃ©m usudzovania modus ponens a modus tollens, ktorÃ© nie sÃº korektnÃ©. PrvÃ¡ nekorektnÃ¡ schÃ©ma sa nazÃ½va potvrdenie dÃ´sledku (affirming the consequent) (1.6a) DruhÃ¡ sa nazÃ½va popretie predpokladu (denying the antecedent) (1.6b) PrvÃ¡ schÃ©ma âpopretie predpokladuâ je ilustrovanÃ¡ prÃ­kladom vydala som sa ak som peknÃ¡, tak sa vydÃ¡m som peknÃ¡ ZÃ¡ver nie je korektnÃ½, mÃ´Å¾e sa vydaÅ¥ aj vtedy, keÄ nie je peknÃ¡. DruhÃ¡ schÃ©ma âpotvrdenie dÃ´sledkuâ mÃ´Å¾e byÅ¥ ilustrovanÃ¡ podobnÃ½m prÃ­kladom nie som peknÃ¡ ak som peknÃ¡, tak sa vydÃ¡m nevydÃ¡m sa"
393,187,0.56,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"WebovÃ¡ pospolitosÅ¥ MyFreddy zbiera veÄ¾kÃ© mnoÅ¾stvo dÃ¡t, ktorÃ© sa musia nejakÃ½m spÃ´sobom analyzovaÅ¥. PotenciÃ¡lnymi cieÄ¾mi analÃ½zy dÃ¡t sÃº: Â ponÃºknuÅ¥ objekty prÃ­buznÃ© aktuÃ¡lne prezentovanÃ©mu, Â vybraÅ¥ ÄalÅ¡ie objekty, ktorÃ© by sa pouÅ¾Ã­vateÄ¾ovi mohli pÃ¡ÄiÅ¥, Â predpovedaÅ¥ pouÅ¾Ã­vateÄ¾ovo hlasovanie, Â odporuÄiÅ¥ Älenov komunity s podobnÃ½mi preferenciami."
135,316,0.56,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"VÃ½hody a nevÃ½hody rÃ¡mcov PouÅ¾Ã­vanie rÃ¡mcov v mnohom uahuje tvorbu softvÃ©ru. Ide vÅ¡ak o dos rozsiahle a zloÅ¾itÃ© nÃ¡stroje, ktorÃ© sa dajÃº efektÃ­vne vyuÅ¾Ã­va aÅ¾ potom, o sa s nimi pouÅ¾Ã­vate oboznÃ¡mi. Potreba rozsiahlejÅ¡ieho uenia sa prÃ¡ci s rÃ¡mcami je hlavnou nevÃ½hodou pri ich pouÅ¾Ã­vanÃ­. Naproti tomu, hlavnÃ½mi vÃ½hodami sÃº:"
369,279,0.559,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.31. Vzor ZabezpeÄenia a odkladacie podmienky Ãºveru ZloÅ¾itosÅ¥ hypotekÃ¡rnych Ãºverov je dÃ´sledkom viacerÃ½ch skutoÄnosti: ï· Charakteru zabezpeÄenia â nehnuteÄ¾nosti sÃº evidovanÃ© v katastri nehnuteÄ¾nostÃ­ po tzv. listoch vlastnÃ­ctva, priÄom list vlastnÃ­ctva predstavuje pomerne komplikovanÃº Å¡truktÃºru umoÅ¾ÅujÃºcu evidenciu stavieb, pozemkov a ich vlastnÃ­kov. ï· Presnosti evidencie na katastri nehnuteÄ¾nostÃ­ â v obdobÃ­ socializmu doÅ¡lo k vyvlastneniu veÄ¾kÃ©ho mnoÅ¾stva nehnuteÄ¾nostÃ­, ktorÃ© po roku 1989, naopak, boli predmetom komplikovanÃ½ch reÅ¡titÃºciÃ­. NavyÅ¡e, evidencia nehnuteÄ¾nostÃ­ v katastri nehnuteÄ¾nostÃ­ bola v obdobÃ­ socializmu zanedbÃ¡vanÃ¡. K tomuto pristupujÃº rÃ´zne snahy o podvody, sÃºdne spory a pod. ï· NehnuteÄ¾nosti vo vÃ½stavbe â klient mÃ´Å¾e hypotekÃ¡rny Ãºver ÄerpaÅ¥ aj na nehnuteÄ¾nosÅ¥ vo vÃ½stavbe (naprÃ­klad rodinnÃ½ dom vo vÃ½stavbe), priÄom zakladÃ¡ postupne postavenÃ© Äasti nehnuteÄ¾nosti. V tomto prÃ­pade je potrebnÃ© posudzovaÅ¥ aj viacerÃ© Äasti projektovej dokumentÃ¡cie stavby. ï· Ohodnotenia sÃºÄasnej hodnoty nehnuteÄ¾nosti â hodnota nehnuteÄ¾nosti sa poÄÃ­ta podÄ¾a pomerne komplikovanÃ©ho vzorca, ktorÃ©ho parametrami sÃº v prÃ­pade stavby nielen jej vek, lokalita, plocha, ale aj pouÅ¾itÃ© materiÃ¡ly. OhodnocovaÅ¥ stavby mÃ´Å¾e iba znalec v odbore oceÅovania nehnuteÄ¾nostÃ­. ï· Ohodnotenie budÃºcej hodnoty nehnuteÄ¾nosti â aj keÄ hodnota nehnuteÄ¾nosti najÄastejÅ¡ie stÃºpa, hypotekÃ¡rna a finanÄnÃ¡ krÃ­za v rokoch 2008 a 2009 poskytuje dostatoÄ-"
265,134,0.559,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"v podobnÃ½ch prÃ­padoch), absolvuje ho. DÃ¡ sa preto ÄakaÅ¥, Å¾e v tomto prÃ­pade nebude maÅ¥ pouÅ¾iteÄ¾nosÅ¥ prioritu. SoftvÃ©r vo vÃ½robnÃ½ch podnikoch Äasto fyzicky manipuluje so svojÃ­m okolÃ­m. V prÃ­pade vÃ½roby Ã¡ut si moÅ¾no predstaviÅ¥ napr. robotickÃº vÃ½robnÃº linku. FyzickÃ¡ manipulÃ¡cia s okolÃ­m nesie vÃ½znamnÃ© rizikÃ¡. SoftvÃ©r mÃ´Å¾e potenciÃ¡lne spÃ´sobiÅ¥ Å¡kody, ujmu na zdravÃ­ Äi dokonca smrÅ¥ osÃ´b (staÄÃ­ si spomenÃºÅ¥ na vÃ½buchy rakiet Äi prÃ­pady smrteÄ¾nÃ©ho oÅ¾iarenia pacientov pri CT vyÅ¡etreniach). BezpeÄnosÅ¥ voÄi okoliu by preto v prÃ­pade nÃ¡Å¡ho softvÃ©ru bola na stole absolÃºtnou prioritou. S bezpeÄnosÅ¥ou voÄi okoliu je do znaÄnej miery previazanÃ¡ aj vlastnosÅ¥ robustnosti, teda schopnosti softvÃ©ru sa zotaviÅ¥ z neoÄakÃ¡vanÃ½ch, resp. chybnÃ½ch stavov (Äasto vznikajÃºcich z chybnÃ½ch podnetov z okolia, napr. od pouÅ¾Ã­vateÄ¾ov). Ak chceme softvÃ©r vytvoriÅ¥ bezpeÄnÃ½ pre svoje okolie, pravdepodobne sa budeme snaÅ¾iÅ¥ identifikovaÅ¥ a dÃ´kladne oÅ¡etriÅ¥ moÅ¾nÃ© chybovÃ© stavy, ÄÃ­m do znaÄnej miery zabezpeÄÃ­me aj jeho robustnosÅ¥. PoslednÃ¡ vlastnosÅ¥, ktorej dÃ´leÅ¾itosÅ¥ treba urÄiÅ¥, je modifikovateÄ¾nosÅ¥ takÃ©hoto softvÃ©ru. Od nej zÃ¡visÃ­, Äi sa v budÃºcnosti bude daÅ¥ vÃ½roba prispÃ´sobiÅ¥ novÃ½m postupom Ä¾ahko, resp. Äi tÃ½mto zmenÃ¡m nÃ¡Å¡ softvÃ©r nebude zbytoÄne klÃ¡sÅ¥ odpor pre svoju zlÃº Å¡truktÃºru. InvestovaÅ¥ do modifikovateÄ¾nosti sa preto mÃ´Å¾e oplatiÅ¥. Mieru dÃ´razu na modifikovateÄ¾nosÅ¥ ale zrejme bez ÄalÅ¡Ã­ch informÃ¡ciÃ­ nemÃ´Å¾eme sprÃ¡vne urÄiÅ¥ (zÃ¡visÃ­ to najmÃ¤ od toho, kam vÅ¡ade mÃ¡ softvÃ©r vo vÃ½robe zasahovaÅ¥). Je naprÃ­klad otÃ¡zne, Äi sa budÃºce zmeny vÃ½robnÃ½ch procesov nedajÃº postihnÃºÅ¥ len vhodnou parametrizÃ¡ciou. Zrejme vÅ¡ak vieme urÄiÅ¥ relatÃ­vnu pozÃ­ciu modifikovateÄ¾nosti oproti ostatnÃ½m skÃºmanÃ½m vlastnostiam. Nebude maÅ¥ vyÅ¡Å¡iu prioritu ako bezpeÄnosÅ¥ voÄi okoliu a robustnosÅ¥ (ktorÃ© sÃº jasne kritickÃ© pre tento typ softvÃ©ru), no vÄaka svojim jasnejÅ¡Ã­m ekonomickÃ½m implikÃ¡ciÃ¡m by dostala prednosÅ¥ pred pouÅ¾iteÄ¾nosÅ¥ou."
135,384,0.559,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"5.3.1 Vzorovo orientovanÃ¡ analÃ½za a nÃ¡vrh PrÃ¡ca Vzorovo orientovanÃ¡ analÃ½za a nÃ¡vrh (Pattern Oriented Analysis and Design - POAD) [38] [39] predstavuje systematickÃ½ prÃ­stup ku kompozÃ­ciÃ­ nÃ¡vrhovÃ½ch vzorov. VychÃ¡dza pritom z myÅ¡lienky, Å¾e zÃ¡kladnÃ½mi stavebnÃ½mi blokmi softvÃ©ru by mali by spolupracujÃºce inÅ¡tancie nÃ¡vrhovÃ½ch vzory, ktorÃ© dokÃ¡Å¾u poskytnÃº funkne overenÃ© rieÅ¡enia. Aby sa zjednoduÅ¡il proces vÃ½voja obdobnÃ½m spÃ´sobom, prÃ¡ca POAD predstavuje metodolÃ³giu, ktorÃ¡ vedie vÃ½vojÃ¡rov od poiatonÃ½ch analÃ½z k optimalizovanÃ©mu OO nÃ¡vrhu, ktorÃ½ je zaloÅ¾enÃ½ na pouÅ¾itÃ­ kooperujÃºcich inÅ¡tanciÃ¡ch nÃ¡vrhovÃ½ch vzorov. V rÃ¡mci POAD sa pozerÃ¡me na nÃ¡vrhovÃ½ vzor ako na komponent nÃ¡vrhu, ktorÃ½ je s ostatnÃ½mi komponentmi i inÃ½mi elementmi nÃ¡vrhu spojenÃ½ pomocou rozhranÃ­. Vzor mÃ¡ teda definovanÃ© rozhrania, pomocou ktorÃ½ch mÃ´Å¾e spolupracova s inÃ½mi vzormi. TakÃ½ prÃ­stup so sebou prinÃ¡Å¡a nasledujÃºce vÃ½hody:"
190,426,0.559,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Äo je vÃ½sledkom monitorovania? SumÃ¡rne sprÃ¡vy a v nich indÃ­cie o nesprÃ¡vne fungujÃºcich zloÅ¾kÃ¡ch, âpodozreniaâ. K identifikÃ¡cii problÃ©mu eÅ¡te kus cesty. TÃº uÅ¾ musÃ­ prekonaÅ¥ Älovek. Å irokÃ½ zÃ¡ber systÃ©mu â pokrytie celÃ©ho projektu mu dÃ¡va dobrÃ½ zÃ¡klad. Aj neskÃºsenÃ©mu manaÅ¾Ã©rovi poskytne vÃ½chodiskovÃ½ bod, kde zaÄaÅ¥ hÄ¾adaÅ¥. Potom mÃ´Å¾e nasledovaÅ¥ analÃ½za doplÅujÃºcich materiÃ¡lov, ako spomÃ­nanÃ© sprÃ¡vy zamestnancov. UÅ¾ bude maÅ¥ na stole len tie relevantnÃ©. S vyuÅ¾itÃ­m priamej komunikÃ¡cie s podriadenÃ½mi potom mÃ´Å¾e dospieÅ¥ k identifikÃ¡cii problÃ©mu oveÄ¾a rÃ½chlejÅ¡ie. BohuÅ¾iaÄ¾ ani dodanÃ© podklady ÄastokrÃ¡t nepomÃ´Å¾u, rozhodujÃºce sÃº skÃºsenosti."
236,47,0.558,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"robia presne to, Äo hovoria ich nÃ¡zvy. UmoÅ¾ÅujÃº autorovi ovplyvniÅ¥ ich ÄinnosÅ¥ pomocou parametra n. Tento parameter mÃ´Å¾e nadobÃºdaÅ¥ hodnoty od 0 do 4. NastavenÃ­m parametra n na hodnotu niÅ¾Å¡iu ako 4, nechÃ¡vate LATEXu moÅ¾nosÅ¥ ignorovaÅ¥ vÃ¡Å¡ prÃ­kaz v prÃ­pade, ak by vÃ½stup vyzeral veÄ¾mi zle. NepleÅ¥te si tieto âbreakÃ¿ prÃ­kazy s prÃ­kazmi ânewÃ¿. Hoci zadÃ¡vate prÃ­kaz âbreakÃ¿ (ukonÄi), LATEX sa stÃ¡le pokÃºÅ¡a vyrovnaÅ¥ pravÃ½ okraj strany a vytvoriÅ¥ stranu s poÅ¾adovanou celkovou dÄºÅ¾kou, ako to bude popÃ­sanÃ©"
130,84,0.558,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"NezabraÅuje klientom priamo pouÅ¾Ã­vaÅ¥ triedy subsystÃ©mu, keÄ je to naozaj nevyhnutnÃ©. To, Äi fasÃ¡du pouÅ¾ijete alebo nie, je na vÃ¡s. MÃ´Å¾te si zvoliÅ¥ pohodlie (prÃ­stup cez fasÃ¡du) alebo vÅ¡eobecnosÅ¥ (priamy prÃ­stup k objektom, ktorÃ© reprezentujÃº prÃ­sluÅ¡nÃ½ subsystÃ©m)."
184,97,0.558,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"TechnolÃ³gie pre spojovacÃ­ softvÃ©r vo vÅ¡eobecnosti slÃºÅ¾ia na urÃ½chlenie a zjednoduÅ¡enie nÃ¡vrhu a implementÃ¡cie aplikÃ¡ciÃ­. Tieto technolÃ³gie vznikli z dvoch hlavnÃ½ch dÃ´vodov: Â UmoÅ¾ÅujÃº jednoduchÅ¡Ã­ vÃ½voj komplexnÃ½ch a distribuovanÃ½ch aplikÃ¡ciÃ­. Â Podporou vzorov a overenÃ½ch praktÃ­k v nÃ¡strojoch pomÃ¡hajÃº ich zavÃ¡dzaniu a rozÅ¡Ã­reniu do praxe. SoftvÃ©rovÃ­ architekti majÃº neÄ¾ahkÃº Ãºlohu vo vÃ½bere a kombinÃ¡cii rÃ´znych architektÃºr a technolÃ³gii pre spojovacÃ­ softvÃ©r tak, aby vhodne splnili poÅ¾iadavky aplikÃ¡ciÃ­ a zohÄ¾adÅovali pri tom softvÃ©rovÃ©, hardvÃ©rovÃ©, finanÄnÃ© Äi Ä¾udskÃ© ohraniÄenia."
367,50,0.558,CESTA K OTVORENEJ VEDE,"Ukladanie v dÃ¡tovom repozitÃ¡ri mÃ´Å¾e byÅ¥ bezplatnÃ©, alebo platenÃ© v zÃ¡vislosti od obchodnÃ©ho modelu konkrÃ©tneho repozitÃ¡ra. V niektorÃ½ch prÃ­padoch mÃ´Å¾u prevÃ¡dzkovÃ© nÃ¡klady repozitÃ¡ra hradiÅ¥ inÅ¡titÃºcie. qZenodo: multidisciplinÃ¡rny vÅ¡eobecnÃ½ repozitÃ¡r pre eurÃ³pske vÃ½skumy qDryad: datadryad.org pre vedy o Å¾ivej prÃ­rode, agronÃ³mii, vedy o Zemi qre3data.org: register dÃ¡tovÃ½ch repozitÃ¡rov pre vÅ¡etky odbory"
369,198,0.558,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.47. Vzor SpÃ´soby vÃ½poÄtu poplatkov S operÃ¡ciou sa mÃ´Å¾e viazaÅ¥ viacero poplatkov. NaprÃ­klad pri vklade hotovosti na ÃºÄet to mÃ´Å¾u byÅ¥: poplatok za âÃºÄtovnÃº poloÅ¾kuâ (t. j. fixnÃ½ poplatok, ktorÃ½ si banka ÃºÄtuje za kaÅ¾dÃº operÃ¡ciu s beÅ¾nÃ½m ÃºÄtom), poplatok, ktorÃ½ znÃ¡Å¡a vkladateÄ¾ (naprÃ­klad vklad na ÃºÄet dodÃ¡vateÄ¾a elektrickej energie neplatÃ­ dodÃ¡vateÄ¾ elektrickej energie ale vkladateÄ¾), poplatok za zmenÃ¡renskÃº operÃ¡ciu21, poplatok za vklad nadlimitnÃ©ho mnoÅ¾stva mincÃ­ a inÃ©. Model poplatku za operÃ¡ciu ukazuje obr. 3.48. Zavazok"
130,561,0.558,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Ako sme uviedli vyÅ¡Å¡ie, odkaz sa modeluje ako Å¡peciÃ¡lny typ komponentu, ktorÃ½ mÃ¡ okrem vyÅ¡Å¡ie uvedenÃ½ch sÃºÄastÃ­ navyÅ¡e definovanÃ½ zoznam najmenej dvoch Å¡pecifikÃ¡torov urÄujÃºcich komponenty, ktorÃ© danÃ½ odkaz prepÃ¡ja. DefinÃ­cia Å¡pecifikÃ¡tora zahÅÅa:"
369,61,0.558,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"GeneralizÃ¡ciu triedy ilustruje obr. 1.16. Triedy Å tÃ¡t, Kraj, Okres, Obec, Miestna ÄasÅ¥, Ulica, Vchod a pod. sme nahradili vÅ¡eobecnejÅ¡ou triedou Lokalita. Lokalita, podobne ako jej Å¡pecializovanejÅ¡ie prÃ­pady, mÃ¡ svoj nÃ¡zov a geografickÃ© hranice. Ako ukÃ¡Å¾eme neskÃ´r, tÃ¡to generalizÃ¡cia umoÅ¾Åuje flexibilnÃ© budovanie hierarchie lokalÃ­t. NavyÅ¡e osoby a inÃ© objekty mÃ´Å¾u uvÃ¡dzaÅ¥ svoje geografickÃ© umiestnenie na Ä¾ubovoÄ¾nej Ãºrovni v hierarchii podÄ¾a potreby."
43,191,0.558,Objektovo orientovanÃ© programovanie v C++,"5.2 KonÅ¡truktor a deÅ¡truktor UÅ¾ sme si hovorili, Å¾e konÅ¡truktor a deÅ¡truktor sÃº metÃ³dy so Å¡peciÃ¡lnym postavenÃ­m, ktorÃ© sa spÃºÅ¡Å¥ajÃº automaticky a iba raz. KonÅ¡truktor sa spustÃ­ vÅ¾dy v okamihu, keÄ vznikÃ¡ objekt danej triedy a pouÅ¾Ã­va sa na poÄiatoÄnÃ© nastavenia Ãºdajov, alokÃ¡ciu pamÃ¤te, ktorÃº bude objekt potrebovaÅ¥ a pod. DeÅ¡truktor sa zase spustÃ­ pri zÃ¡niku objektu â na konci programu, resp. na konci bloku v ktorom bol objekt vytvorenÃ½ ako lokÃ¡lna premennÃ¡, alebo v okamihu, keÄ dealokujeme dynamicky alokovanÃ½ objekt. Ako vytvorÃ­me konÅ¡truktor a deÅ¡truktor v C++? KonÅ¡truktor je metÃ³da, ktorÃ¡ mÃ¡ rovnakÃ½ nÃ¡zov ako trieda a nemÃ¡ nÃ¡vratovÃ½ typ. MÃ´Å¾e aj nemusÃ­ maÅ¥ parametre. NÃ¡zov deÅ¡truktora vytvorÃ­me pridanÃ­m znaku ââ¼â pred nÃ¡zov triedy. DeÅ¡truktor nemÃ¡ nÃ¡vratovÃ½ typ ani parametre. KonÅ¡truktor aj deÅ¡truktor sÃº verejnÃ© metÃ³dy. Trieda moja trieda s konÅ¡truktorom a deÅ¡truktorom nadobudne takÃºto podobu class moja trieda private: T1 Ãºdaj1; T2 Ãºdaj2; TNS1 SÃºkromnÃ¡ MetÃ³da1(...); TNS2 SÃºkromnÃ¡ MetÃ³da2(...); public: moja trieda(...); â¼ moja trieda(); TNV1 VerejnÃ¡ MetÃ³da1(...); TNV2 VerejnÃ¡ MetÃ³da2(...);"
190,26,0.558,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ZÃ­skanÃ© poznatky som sa snaÅ¾il aplikovaÅ¥ z hÄ¾adiska nÃ¡Å¡ho tÃ­mu v tÃ­movom projekte, ktorÃ½ je sÃºÄasÅ¥ou inÅ¾inierskeho Å¡tÃºdia na Fakulte informatiky a informaÄnÃ½ch technolÃ³giÃ­ Slovenskej technickej univerzity. Älenom tÃ­mu som dal vyplniÅ¥ on-line testovacie dotaznÃ­ky dostupnÃ© na strÃ¡nke [3]. Vyhodnotenie vÃ½sledkov je v tabuÄ¾ke 4 a obsahuje moje hodnoty a hodnoty ÄalÅ¡Ã­ch Å¡tyroch Älenov tÃ­mu."
76,274,0.558,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"mery v celkovej produkcii sa prakticky nezmenili (piaty vÃ½robok vyberÃ¡me za rovnakÃ½ch okolnostÃ­ ako prvÃ½). Preto sa na vÃ½ber bez vrÃ¡tenia mÃ´Å¾eme pozeraÅ¥ ako na vÃ½ber s vrÃ¡tenÃ­m. VÃ½ber chÃ¡peme ako 10-nÃ¡sobnÃ© nezÃ¡vislÃ© opakovanie toho istÃ©ho pokusu â tÃ½m pokusom je nÃ¡hodnÃ½ vÃ½ber vÃ½robku z celkovej produkcie. UrÄime pravdepodobnosÅ¥ toho, Å¾e a) Å¾ivotnosÅ¥ kaÅ¾dÃ©ho vybratÃ©ho bude aspoÅ 300 hod. b) Å¾ivotnosÅ¥ aspoÅ jednÃ©ho vybratÃ©ho prevÃ½Å¡i 1500 hod. RieÅ¡enie. Toto je typickÃ¡ pravdepodobnostnÃ¡ Ãºloha, keÄ predpokladÃ¡me, Å¾e rozdelenie Å¾ivotnosti je exponenciÃ¡lne rozdelenie (so znÃ¡mym parametrom). AnalogickÃº situÃ¡ciu sme rozoberali v kapitole 3 (pozri 3.2.4 a 3.2.5). V Äl. 6.2 vysvetlÃ­me, Å¾e nÃ¡hodnÃ½ vÃ½ber budeme modelovaÅ¥ 10-ticou , , ..., nezÃ¡vislÃ½ch nÃ¡hodnÃ½ch veliÄÃ­n , pre ktorÃ© â podÄ¾a predpokladu â platÃ­: ~ Exp(ï¬), kde ï¬ = 0.001. Teraz chceme urÄiÅ¥ a) P( â b) P( â Zrejme P(â resp. P(â"
240,419,0.557,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-9 (rieÅ¡enie) Program po znakoch vypisuje znaky odvodenÃ© od reÅ¥azcovÃ½ch konÅ¡tÃ¡nt. PrvÃ½ vypÃ­sanÃ½ znak (riadok 3) je znak, ktorÃ©ho hodnotu dostaneme, keÄ od prvÃ©ho znaku reÅ¥azca ""abc"" (znak 'a', kÃ³d 97) odpoÄÃ­tame kÃ³d znaku ' ' (medzera, kÃ³d 32), teda 97-32 = 65, Äo zodpovedÃ¡ kÃ³du znaku 'A'. V riadku 4 program vypÃ­Å¡e znak 'e' posunutÃ½ o 3 (znak 'h'), a znak 'm' zvÃ½Å¡enÃ½ o dva (znak 'o'). V riadku 5 program vypÃ­Å¡e poslednÃ½ jeden znak, ktorÃ½ zÃ­skame komplikovanÃ½m vÃ½poÄtom: prvÃ½ znak reÅ¥azca ""slnko"" (znak 's', kÃ³d 115) znÃ­Å¾enÃ½ o hodnotu znaku '0' (kÃ³d 48) deleno 5 (48/5=9), teda vÃ½slednÃ½ znak 'j'. ÄalÅ¡ie znaky (ako napr. :)) uÅ¾ program nevypÃ­Å¡e, lebo formÃ¡tovacÃ­ reÅ¥azec je (predÄasne) ukonÄenÃ½ znakom '\0'. Ãloha 4-10 (rieÅ¡enie) V riadku 13 do premennej x priradÃ­me smernÃ­k na reÅ¥azcovÃº konÅ¡tantu ""kamen"". NÃ¡sledne 47-krÃ¡t vykonanÃ­m funkcie hraj() a priradenÃ­m vÃ½sledku do x upravÃ­ hodnotu premennej x. Porovnania reÅ¥azcov pomocou == mÃ´Å¾u vzbudzovaÅ¥ podozrenie, Å¾e sa reÃ¡lne neporovnÃ¡vajÃº hodnoty reÅ¥azcov, ale len smernÃ­ky, a to je aj pravda, v tomto programe nie je potrebnÃ© porovnÃ¡vaÅ¥ reÅ¥azce po znakoch, pretoÅ¾e staÄÃ­ porovnaÅ¥ smernÃ­ky reÅ¥azcovÃ½ch konÅ¡tÃ¡nt, ktorÃ© sÃº rovnakÃ© pre rovnakÃ© reÅ¥azce a rÃ´zne pre rozdielne reÅ¥azce. V prÃ­pade x = ""kamen"" je vÃ½sledok hraj(x) == ""papier"", v nasledujÃºcom prÃ­pade x = ""papier"" je vÃ½sledok hraj(x) == ""noznice"" a v nasledujÃºcom prÃ­pade x = ""noznice"" je vÃ½sledok hraj(x) == ""kamen"", ÄÃ­m premennÃ¡ x (po kaÅ¾dÃ½ch"
59,578,0.557,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"12 Riadenie zloÅ¾itÃ½ch systÃ©mov a ich modely 12.1 ÃvodnÃ© poznÃ¡mky ProblÃ©m riadenia zloÅ¾itÃ½ch systÃ©mov (napr. banky, systÃ©mu zÃ¡sobovania veÄ¾komesta, vysokej pece na vÃ½robu Å¾eleza, ...), ktorÃ½ch modely dobre nepoznÃ¡me (ak poznÃ¡me, tak len vo veÄ¾mi nedokonalej forme), sÃº tradiÄnÃ½ problÃ©m umelej inteligencie a kognitÃ­vnej vedy. MetÃ³dy modernej umelej inteligencie sÃº schopnÃ© poskytnÃºÅ¥ novÃ½ pohÄ¾ad na tento Å¡tandardnÃ½ problÃ©m informatiky, poskytujÃº nielen jeho novÃº interpretÃ¡ciu, ale umoÅ¾ÅujÃº aj jeho implementÃ¡ciu pomocou neurÃ³novÃ½ch sietÃ­. Podobne, ako v predchÃ¡dzajÃºcich Äastiach naÅ¡ej prednÃ¡Å¡ky, z dÃ´vodov neutrality naÅ¡ich Ãºvah budeme pouÅ¾Ã­vaÅ¥ termÃ­n âagentâ na oznaÄenie inteligentnÃ©ho jedinca s kognitÃ­vnym orgÃ¡nom (mozgom), ktorÃ©ho cieÄ¾om je riadiÅ¥ zloÅ¾itÃ½ systÃ©m. KognitÃ­vny orgÃ¡n agenta (informatickÃ½ termÃ­n pre Ä¾udskÃ½ mozog) je schopnÃ½ vykonÃ¡vaÅ¥ zloÅ¾itÃ© kognitÃ­vne aktivity, akÃ½mi sÃº uÄenie, plÃ¡novanie, vyhodnocovanie, rieÅ¡enie problÃ©mov, vnÃ­manie okolia, a pod. Tieto schopnosti kognitÃ­vneho orgÃ¡nu sa vyuÅ¾Ã­vajÃº pri tvorbe vnÃºtornÃ½ch modelov riadenÃ©ho systÃ©mu, ktorÃ© tvoria ÃºstrednÃº zloÅ¾ku vyuÅ¾Ã­vanÃº pri riadenÃ­ zloÅ¾itÃ½ch systÃ©mov. V tejto prednÃ¡Å¡ke budeme Å¡tudovaÅ¥ model distanÄnÃ©ho uÄenia (angl. distal learning), ktorÃ½ bol navrhnutÃ½ poÄiatkom 90. rokov americkÃ½mi informatikmi a kognitÃ­vnymi vedcami, Michaleom Jordanom a Davidom Rumelhartom [2], ktorÃ­ sa zaslÃºÅ¾ili o rozvoj modernÃ½ch konekcionistickÃ½ch metÃ³d a ich aplikÃ¡cie v umelej inteligencii a kognitÃ­vnej vede. DistanÄnÃ© uÄenie slÃºÅ¾i ako urÄitÃ¡ alternatÃ­va k uÄeniu s odmenou a trestom (pozri prednÃ¡Å¡ku 5), poskytuje rieÅ¡enia, ktorÃ© sÃº pre psycholÃ³gov uÄenia akceptovateÄ¾nejÅ¡ie ako vÃ½sledky poskytovanÃ© uÄenÃ­m s odmenou a trestom a taktieÅ¾ mÃ´Å¾u slÃºÅ¾iÅ¥ ako priamy nÃ¡vod na implementÃ¡ciu systÃ©mov riadenia zloÅ¾itÃ½ch systÃ©mov. stav systÃ©mu stav systÃ©mu"
393,19,0.557,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"World Wide Web, ktorÃ½ bol navrhnutÃ½ ako jednoduchÃ½ komunikaÄnÃ½ systÃ©m pre vÃ½menu hypertextovÃ½ch strÃ¡nok, sa stal v poslednom Äase veÄ¾mi ÃºspeÅ¡nÃ½m systÃ©mom a Äoraz viac sa pouÅ¾Ã­va nielen pre zobrazovanie statickÃ½ch informÃ¡ciÃ­, ale aj ako pouÅ¾Ã­vateÄ¾skÃ© rozhranie pre prÃ­stup k webovÃ½m informaÄnÃ½m sluÅ¾bÃ¡m. Tieto sluÅ¾by pokrÃ½vajÃº Å¡irokÃ© spektrum oblastÃ­ od elektronickÃ©ho obchodu, cez vyhÄ¾adÃ¡vacie a encyklopedickÃ© systÃ©my aÅ¾ po poÄÃ­taÄovÃ© hry. Ich spoloÄnou charakteristikou okrem toho, Å¾e sÃº prÃ­stupnÃ© cez web, je ich nÃ¡roÄnÃ© automatizovanÃ© spracovanie 1 . KomunikÃ¡cia a interakcia s nimi je navrhnutÃ¡ pre Ä¾udÃ­, nie pre poÄÃ­taÄe. Jeden zo smerov Ãºtoku na tento veÄ¾kÃ½ problÃ©m je web so sÃ©mantikou (Antoniou & van Harmelen, 2004), ktorÃ½ sa snaÅ¾Ã­ o zmenu webu tak, aby bol prÃ­stupnÃ½ pomocou technÃ­k umelej inteligencie. DAML-S (Ankolekar et al., 2002) je ontolÃ³giou opÃ­sanou v jazyku DAML+OIL2, navrhnutou pre opis webovÃ½ch sluÅ¾ieb. ÄlÃ¡nok (Bryson et al., 2003) obsahuje prehÄ¾ad aktuÃ¡lneho stavu prÃ¡c na DAML-S a softvÃ©rovÃ©ho inÅ¾inierstva zaloÅ¾enÃ©ho na agentoch. Poskytuje zÃ¡klady tvorby inteligentnÃ½ch agentov, priÄom sa"
76,128,0.557,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ak funkciu zÃ­skame z funkcie tak, Å¾e zmenÃ­me len v koneÄne mnohÃ½ch argumentoch, tak aj bude hustotou . To preto, lebo z matematickej analÃ½zy je znÃ¡me, Å¾e ak a sa lÃ­Å¡ia len v koneÄne veÄ¾a bodoch, tak platÃ­"
66,62,0.557,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"3.9 PrÃ¡ca s viacerÃ½mi tabuÄ¾kami PretoÅ¾e relaÄnÃ½ model funguje na princÃ­pe tabuliek, medzi ktorÃ½mi sÃº definovanÃ© vzÅ¥ahy, je Å¾iadÃºce, aby bolo moÅ¾nÃ© uskutoÄÅovaÅ¥ dopyty nad viacerÃ½mi tabuÄ¾kami. Preto je potrebnÃ© definovaÅ¥, z ktorÃ½ch tabuliek budÃº zÃ­skavanÃ© dÃ¡ta a na zÃ¡klade, Äoho budÃº prepojenÃ©. Na"
76,135,0.557,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.3.4 PoznÃ¡mka. DÃ¡ sa dokÃ¡zaÅ¥, Å¾e kaÅ¾dÃº funkciu G: R ï® â© âª, ktorÃ¡ mÃ¡ vlastnosti 1, 2, 3 z vety 2.3.3, mÃ´Å¾eme povaÅ¾ovaÅ¥ za distribuÄnÃº funkciu nejakej nÃ¡hodnej veliÄiny. MoÅ¾no totiÅ¾ zostrojiÅ¥ (ï, S, P) a definovaÅ¥ na Åom tak, aby funkcia G bola distribuÄnou funkciou veliÄiny . Ak teda zadanie Ãºlohy zaÄÃ­na slovami ânech je distribuÄnou funkciouâ (veliÄiny ), staÄÃ­ overiÅ¥, Å¾e mÃ¡ vlastnosti 1, 2, 3 a akceptujeme, Å¾e takÃ¡ nÃ¡hodnÃ¡ veliÄina (ktorej je distribuÄnÃ¡ funkcia) naozaj existuje (aj keÄ ju nemÃ¡me zadanÃº). 2.3.5 Veta. Nech je diskrÃ©tna veliÄina s pravdepodobnostnou funkciou mnoÅ¾inou ( ) = { â¦ }. Potom pre jej distribuÄnÃº funkciu platÃ­ ( ) pre vÅ¡etky xïR. Ak"
393,22,0.557,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ZÃ¡kladnÃ© pojmy, ktorÃ© ÄlÃ¡nok (Bryson et al., 2003) pouÅ¾Ã­va, sÃº: Â WebovÃ¡ sluÅ¾ba â program alebo zariadenie, ktorÃ© je prÃ­stupnÃ© cez web. Â ZloÅ¾enÃ¡ sluÅ¾ba â sluÅ¾ba, ktorÃ¡ kombinuje preddefinovanÃ© ÄiastkovÃ© sluÅ¾by spÃ´sobom vÃ½hodnÃ½m pre pouÅ¾Ã­vateÄ¾a. Pomocou hierarchie sluÅ¾ieb, ako napr. v DAML-S, nie je potrebnÃ© presne Å¡pecifikovaÅ¥ ÄiastkovÃ© sluÅ¾by, aby mohli byÅ¥ skombinovanÃ©, staÄÃ­ iba Å¡pecifikovaÅ¥ poÅ¾adovanÃ© vlastnosti. Â Agent â relatÃ­vne autonÃ³mny systÃ©m s mnoÅ¾inami: o cieÄ¾ov â podmienky, ktorÃ© sa snaÅ¾Ã­ agent splniÅ¥, o zÃ¡merov â ciele a podciele, ktorÃ© agent v sÃºÄasnosti vykonÃ¡va, o presvedÄenÃ­ â znalosti agenta o svete (ktorÃ© sÃº nutne ohraniÄenÃ© a pravdepodobne nepresnÃ©), o sprÃ¡vanÃ­ â akcie, ktorÃ© je agent schopnÃ½ vykonaÅ¥. Vo vÅ¡eobecnosti sa na agenty pozerÃ¡ ako na pouÅ¾Ã­vateÄ¾ov sluÅ¾ieb, ale v ÄlÃ¡nku sa zdÃ´razÅuje, Å¾e sa na vÃ½sledky sluÅ¾ieb dÃ¡ pozeraÅ¥ aj ako na akcie, ktorÃ© mÃ´Å¾e pouÅ¾iÅ¥ agent pre dosiahnutie svojich cieÄ¾ov."
59,573,0.557,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"11.6 AutoepistemickÃ¡ logika AutoepistemickÃ¡ logika bola vytvorenÃ¡ americkÃ½m informatikom Robertom C. Mooreom [8], ktorÃ½ navrhol Å¡peciÃ¡lny typ modÃ¡lnej logiky, ktorÃ¡ elegantne rieÅ¡i mnohÃ© vnÃºtornÃ© problÃ©my nemonotÃ³nnej logiky. NavrhnutÃ¡ logika mÃ´Å¾e byÅ¥ alternatÃ­vne interpretovanÃ¡ ako spÃ´sob ideÃ¡lneho racionÃ¡lneho agenta vytvoriÅ¥ mnoÅ¾inu poznatkov na zÃ¡klade danÃ½ch poÄiatoÄnÃ½ch poznatkov. V naÅ¡om teoretickom prÃ­stupe budeme predpokladaÅ¥, Å¾e jazyk modÃ¡lnej logiky LK je vytvorenÃ½ nad danou mnoÅ¾inou atomickÃ½ch vÃ½rokovÃ½ch premennÃ½ch P ï½ ï» p,q,..., pï¢,qï¢,...ï½ a mnoÅ¾inou logickÃ½ch spojok C ï½ ï»ï, ï,ï ,ï, ïº,K ï½ , ktorÃ¡ vznikla jednoduchÃ½m rozÅ¡Ã­renÃ­m mnoÅ¾iny logickÃ½ch spojok vÃ½rokovej logiky o modÃ¡lnu spojku K, ktorÃº pre danÃº formulu ï¨ K ïªï© ï LK ÄÃ­tame âagent vie, Å¾e platÃ­ ïªâ. Pre zjednoduÅ¡enie naÅ¡ich Ãºvah zavedieme duÃ¡lnu spojku K k modÃ¡lnej spojke K , K ïª ï½def ïK ïïª , Äo ÄÃ­tame ako âagent nevie, Å¾e neplatÃ­ ïªâ, Äo mÃ´Å¾eme s trochou fantÃ¡zie parafrÃ¡zovaÅ¥ ako âagent tuÅ¡Ã­, Å¾e platÃ­ ïªâ. PrÃ­klad 11.7. UkÃ¡Å¾eme aplikÃ¡ciu modÃ¡lnej logiky k jednoduchej simulÃ¡cii nemonotÃ³nneho usudzovania. Majme pravidlo, Å¾e ak Dr. Johanides je univerzitnÃ½ profesor, potom obvykle aj uÄÃ­ (vÃ½nimku z tohto pravidla mÃ´Å¾e byÅ¥ situÃ¡cia, Å¾e Dr. Johanides je dekan fakulty). Nato, aby sme vyjadrili toto pravidlo pomocou modÃ¡lne logiky, zavedieme atomickÃ© vÃ½rokovÃ© premennÃ© p = âDr. Johanides je univerzitnÃ½ profesorâ q = âDr. Johanides mÃ¡ v tomto akad. roku 2 prednÃ¡Å¡kyâ Pravidlo vyjadrÃ­me pomocou formuly modÃ¡lnej logiky (11.21) ï¨ p ï Kq ï© ï q ktorÃ© ÄÃ­tame âak Dr. Johanides je univerzitnÃ½ profesorâ a âtuÅ¡Ã­m, Å¾e mÃ¡ v tomto akad. roku 2 prednÃ¡Å¡kyâ, potom âDr. Johanides mÃ¡ v tomto akad. roku 2 prednÃ¡Å¡kyâ. Pomocou formuly (11.21) racionÃ¡lny agent zistÃ­, Å¾e Dr. Johanides mÃ¡ prednÃ¡Å¡ky (t. j. uÄÃ­). Toto jednoduchÃ© pravidlo mÃ´Å¾eme vyjadriÅ¥ pomocou defaultu p : Kq (11.22) V defaultovej logike, ak poloÅ¾Ã­me teÃ³riu ï ï½ ï» pï½ , potom defaultovÃ¡ teÃ³ria ï¨ ï ï½ ï» pï½ , p : Kq q ï© poskytuje zÃ¡ver q."
195,77,0.557,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"4 Modelovanie programÃ¡tora v odporÃºÄacÃ­ch systÃ©moch Na personalizÃ¡ciu akÃ©hokoÄ¾vek obsahu potrebujeme poznaÅ¥ zÃ¡ujmy a preferencie pouÅ¾Ã­vateÄ¾a, ktorÃ©mu obsah prispÃ´sobujeme. Preferencie pouÅ¾Ã­vateÄ¾ov treba zachytÃ¡vaÅ¥ v nepretrÅ¾itom procese, aby sme dokÃ¡zali identifikovaÅ¥ charakteristickÃ© Ärty sprÃ¡vania danÃ©ho pouÅ¾Ã­vateÄ¾a. Model obsahujÃºci zachytenÃ© informÃ¡cie sa Å¡tandardne oznaÄuje ako model pouÅ¾Ã­vateÄ¾a. V domÃ©ne odporÃºÄania v softvÃ©rovom inÅ¾inierstve vÅ¡ak rozliÅ¡ujeme pouÅ¾Ã­vateÄ¾ov vyvÃ­janÃ½ch systÃ©mov a pouÅ¾Ã­vateÄ¾ov odporÃºÄacÃ­ch systÃ©mov, ktorÃ­ sÃº zÃ¡roveÅ vÃ½vojÃ¡rmi vyvÃ­janÃ½ch systÃ©mov. OdporÃºÄacie systÃ©my v softvÃ©rovom inÅ¾inierstve slÃºÅ¾ia na podporu prÃ¡ce druhej menovanej skupiny. Pre jednoznaÄnosÅ¥ procesu budeme Äalej v kapitole hovoriÅ¥ o modelovanÃ­ vÃ½vojÃ¡ra softvÃ©ru a o modeli vÃ½vojÃ¡ra. OdporÃºÄacie systÃ©my v softvÃ©rom inÅ¾inierstve (OSSI) slÃºÅ¾ia na pomoc pri vÃ½voji a ÃºdrÅ¾be softvÃ©ru. Z tohto pohÄ¾adu vieme odporÃºÄanie rozdeliÅ¥ na personalizovanÃ© a nepersonalizovanÃ© v zÃ¡vislosti od typu Ãºlohy, napr. pomoc pri hÄ¾adanÃ­ miesta v kÃ³de, ktorÃ© spÃ´sobuje chybu, personalizÃ¡ciu nevyÅ¾aduje, pretoÅ¾e vÃ½sledok je jednoznaÄnÃ½. V inÃ½ch prÃ­padoch je vÅ¡ak vhodnÃ¡ pomoc zÃ¡vislÃ¡ od miery znalosti konkrÃ©tneho vÃ½vojÃ¡ra. NovÃ©mu vÃ½vojÃ¡rovi odporuÄÃ­me kniÅ¾nicu, ktorÃº jeho skÃºsenÃ©mu kolegovi pripomÃ­naÅ¥ netreba, nakoÄ¾ko ju pravidelne vyuÅ¾Ã­va sÃ¡m. V takomto prÃ­pade je preto personalizÃ¡cia opodstatnenÃ¡."
240,244,0.556,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"cyklu to mÃ´Å¾eme realizovaÅ¥ dodatoÄnÃ½m argumentom p, ktorÃ½ bude reprezentovaÅ¥ koÄ¾kÃº iterÃ¡ciu âcyklu pre pâ prÃ¡ve realizujeme. RekurzÃ­vne volanie pre zniÅ¾ujÃºce sa k si mÃ´Å¾eme predstaviÅ¥ ako vnÃ¡ranie smerom dolu, rekurzÃ­vne volanie pre zvyÅ¡ujÃºcu sa hodnotu p si mÃ´Å¾eme predstaviÅ¥ ako vnÃ¡ranie smerom doprava, vzÃ¡jomnÃ¡ sÃºhra oboch vnÃ¡ranÃ­ v jednej funkcii je znÃ¡zornenÃ¡ na nasledujÃºcom obrÃ¡zku (Ãºpravy x neuvÃ¡dzame):"
94,314,0.556,Sprievodca svetom vedeckÃ©ho publikovania,"osobne vysvetliÅ¥ odbornÃ© otÃ¡zky, pretoÅ¾e ak vedeckÃ© vÃ½sledky interpretuje novinÃ¡r bez vzdelania v prÃ­sluÅ¡nej vednej disciplÃ­ne, Äasto dochÃ¡dza ku skresleniu. IdeÃ¡lne je spolupracovaÅ¥ a kombinovaÅ¥ Å¾urnalistickÃº schopnosÅ¥ prÃ­Å¥aÅ¾livo a zrozumiteÄ¾ne formulovaÅ¥ myÅ¡lienky s presnosÅ¥ou a vhÄ¾adom vedca. KvalitnÃ© informovanie verejnosti je v kaÅ¾dom prÃ­pade cennÃ½m prÃ­spevkom vede, pretoÅ¾e postoj verejnosti mÃ¡ prostrednÃ­ctvom volenÃ½ch zÃ¡stupcov vÃ½znamnÃ½ vplyv na ÃºroveÅ financovania vÃ½skumu. VerejnosÅ¥ je pre vedu nielen finanÄnÃ½m, ale aj personÃ¡lnym zdrojom â akademickÃ©mu sektoru by malo zÃ¡leÅ¾aÅ¥ na tom, aby sa nadanÃ­ mladÃ­ Ä¾udia v obdobÃ­ rozhodovania o svojej budÃºcnosti mohli stretnÃºÅ¥ s dostatkom podnetov, ktorÃ© im dajÃº dÃ´vod nadchnÃºÅ¥ sa pre vedeckÃº kariÃ©ru (a s dostatkom spoÄ¾ahlivÃ½ch informÃ¡ciÃ­, ktorÃ© im umoÅ¾nia urobiÅ¥ si o prÃ¡ci vedca realistickÃ½ obraz)."
43,436,0.556,Objektovo orientovanÃ© programovanie v C++,"10.1 Obsah STL Å ablÃ³ny, ktorÃ© nÃ¡jdeme v STL, sa delia do troch zÃ¡kladnÃ½ch ÄastÃ­. â¢ DÃ¡tovÃ© Å¡truktÃºry. DÃ¡tovÃ© Å¡truktÃºry â Å¡ablÃ³ny pre triedy â sÃº nosnÃ½m prvkom STL a obsahom vÃ¤ÄÅ¡iny kniÅ¾nÃ­c patriacich do STL je prÃ¡ve deï¬nÃ­cia tÃ½chto generickÃ½ch tried. KaÅ¾dÃ¡ z tÃ½chto tried uchovÃ¡va prvky voliteÄ¾nÃ©ho typu nejakÃ½m charakteristickÃ½m spÃ´sobom. Okrem samotnÃ©ho uchovania dÃ¡t obsahujÃº generickÃ© triedy STL aj zÃ¡kladnÃº funkÄnosÅ¥ â metÃ³dy, ktorÃ© umoÅ¾ÅujÃº prÃ¡cu s danou Å¡truktÃºrou. SÃº to naprÃ­klad funkcie, ktorÃ© vrÃ¡tia poÄet prvkov v Å¡truktÃºre, vloÅ¾ia alebo vymaÅ¾Ãº prvok zo Å¡truktÃºry a podobne. â¢ Algoritmy. SÃºÄasÅ¥ou STL sÃº aj generickÃ© funkcie, ktorÃ© sÃº urÄenÃ© na komplikovanejÅ¡iu prÃ¡cu s dÃ¡tovÃ½mi Å¡truktÃºrami â triedenie, vyhÄ¾adÃ¡vanie, hÄ¾adanie maxima a minima a podobne. â¢ IterÃ¡tory. OpÃ¤Å¥ ide o generickÃ© triedy, ktorÃ© sÃº v podstate rozÅ¡Ã­renÃ½mi smernÃ­kmi a umoÅ¾ÅujÃº prÃ­stup k prvkom dÃ¡tovÃ½ch Å¡truktÃºr."
369,99,0.556,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ï· Osoba mÃ¡ zodpovednosÅ¥ za doÄasne vytvorenÃº organizaÄnÃº jednotku (naprÃ­klad projektovÃ½ tÃ­m). ï· Osoba mÃ¡ zodpovednosÅ¥ voÄi celej organizÃ¡cii â zodpovednosÅ¥ou je pracovnÃ¡ zmluva. Pojem zodpovednosÅ¥ je vÅ¡eobecnejÅ¡Ã­ ako pojem pracovnÃ½ vzÅ¥ah a vzor ZodpovednosÅ¥ tak mÃ¡ aj Å¡irÅ¡ie vyuÅ¾itie, naprÃ­klad: ï· Ãloha danÃ¡ pracovnÃ­kovi inÃ½m pracovnÃ­kom (zvyÄajne nadriadenÃ½m). ï· PracovnÃ½ prÃ­kaz pracovnÃ­kovi inÃ½m pracovnÃ­kom â podobne ako Ãºloha. UvedenÃ½ vzor dokonca umoÅ¾Åuje reprezentovaÅ¥ vonkajÅ¡ie vzÅ¥ahy, t. j. vzÅ¥ahy presahujÃºce hranice firmy, naprÃ­klad: ï· Zmluva urÄujÃºca zodpovednosÅ¥ jednej organizÃ¡cie voÄi druhej organizÃ¡cii. ï· Zmluva uzatvorenÃ¡ medzi zÃ¡kaznÃ­kom a firmou na kÃºpu tovaru. ï· DaÅovÃ¡ povinnosÅ¥ osoby alebo firmy voÄi daÅovÃ©mu Ãºradu ï· a inÃ©. OpÃ­sanÃ© moÅ¾nosti vzoru ZodpovednosÅ¥ vedÃº k inÃ©mu vÅ¡eobecnÃ©mu problÃ©mu v oblasti vzorov: voÄ¾by Ãºrovne generalizÃ¡cie. Vysoko generalizovanÃ© vzory majÃº zvyÄajne Å¡irokÃ© vyuÅ¾itie. PouÅ¾itÃ© pojmy v nich vÅ¡ak bÃ½vajÃº natoÄ¾ko vÅ¡eobecnÃ©, Å¾e analytikovi uÅ¾ nenapovedajÃº kedy a akÃ½m spÃ´sobom vzor pouÅ¾iÅ¥. V tejto uÄebnici sa budeme preto pridÅÅ¾aÅ¥ skÃ´r niÅ¾Å¡ej Ãºrovni abstrakcie, aby mal ÄitateÄ¾ (aspoÅ ten skÃºsenejÅ¡Ã­ ï) predstavu o Äom ÄÃ­ta. Z uvedenÃ©ho dÃ´vodu nebudeme v uÄebnici pouÅ¾Ã­vaÅ¥ vzor ZodpovednosÅ¥ v jeho najvÅ¡eobecnejÅ¡ej forme a radÅ¡ej ho v ÄalÅ¡Ã­ch podkapitolÃ¡ch skonkrÃ©tnime na jednotlivÃ© prÃ­pady Äi uÅ¾ pracovnÃ½ch vzÅ¥ahov v rÃ¡mci organizÃ¡cie alebo vonkajÅ¡Ã­ch obchodnÃ½ch vzÅ¥ahov firmy. Na druhej strane mÃ¡ aj vÅ¡eobecnÃ½ vzor ZodpovednosÅ¥ svoj kontext (hranice pouÅ¾iteÄ¾nosti). Pojem zodpovednosÅ¥ mÃ¡ urÄitÃº sÃ©mantiku. V jeho pozadÃ­ je explicitnÃ½ dokument (zmluva, zÃ¡kon, smernica, pÃ­somnÃ½ pracovnÃ½ prÃ­kaz), ktorÃ½ zodpovednosÅ¥ medzi ÃºÄastnÃ­kmi stanovuje. Tento vzor nezahÅÅa akÃ½koÄ¾vek vzÅ¥ah medzi ÃºÄastnÃ­kmi, naprÃ­klad sÃºrodeneckÃ½ vzÅ¥ah medzi osobami alebo konkurenÄnÃ½ vzÅ¥ah medzi firmami. ZodpovednosÅ¥ sa v urÄitÃ½ch prÃ­padoch mÃ´Å¾e tÃ½kaÅ¥ viac neÅ¾ dvoch ÃºÄastnÃ­kov. Ako prÃ­klad slÃºÅ¾ia niektorÃ© zmluvy medzi firmami. Zmluvu podpisujÃº Å¡tatutÃ¡rni zÃ¡stupcovia firiem, ktorÃ½ch mÃ´Å¾e byÅ¥ na kaÅ¾dej strane viac. NavyÅ¡e mÃ´Å¾e zmluva uvÃ¡dzaÅ¥ oprÃ¡vnenÃ© osoby, ktorÃ© majÃº na starosti jej technickÃ© zabezpeÄenie. Podobne, ako sme pÃ´vodne na obr. 2.2 zamÃ½Å¡Ä¾ali pridÃ¡vaÅ¥ ÄalÅ¡ie Å¡pecializovanÃ© relÃ¡cie, to mÃ´Å¾eme urobiÅ¥ aj v modeli na obr. 2.10. VÅ¡eobecnejÅ¡ie rieÅ¡enie, podobne ako na obr. 2.3, spoÄÃ­va v generalizÃ¡ciÃ­ pÃ´vodnÃ½ch dvoch relÃ¡ciÃ­ medzi ÃÄastnÃ­kom a ZodpovednosÅ¥ou formou typovania relÃ¡ciÃ­. Triedu, ktorÃ¡ reprezentuje generalizovanÃº relÃ¡ciu, nazveme Rola ÃºÄastnÃ­ka. Vzor MnohostrannÃ¡ zodpovednosÅ¥, ktorÃ½ vznikol zovÅ¡eobecnenÃ­m vzoru ZodpovednosÅ¥, ukazuje obr. 2.11."
205,249,0.556,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","15.3 Filtrovanie dokumentov ako jednoduchÃ½ SPAM filter V tejto Äasti si ukÃ¡Å¾eme prÃ­klad, ako sa dÃ¡ pouÅ¾iÅ¥ filtrovanie dokumentov ako jednoduchÃ½ spamfilter. Detekcia spamu sa dÃ¡ povaÅ¾ovaÅ¥ za problÃ©m kategorizÃ¡cie dokumentov do dvoch tried: je to spam alebo nie je to spam. Pre potreby tohto prÃ­kladu budeme pouÅ¾Ã­vaÅ¥ naivnÃ½ Bayesov klasifikÃ¡tor, na ktorom si ukÃ¡Å¾eme fÃ¡zu trÃ©novania klasifikÃ¡tora a fÃ¡zu klasifikÃ¡cie dokumentu na jednoduchom prÃ­klade. Na vstupe nÃ¡Å¡ho algoritmu mÃ¡me trÃ©novaciu mnoÅ¾inu dokumentov, o ktorÃ½ch vieme, Äi je to spam alebo nie. âWe should watch moreâ ï  OK âDo more good to othersâ ï  OK âPoker, blackjack, and casinoâ ï  Spam âMake more money at the online casinoâ ï  Spam âWatch one more timeâ ï  OK"
184,319,0.556,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"vÅ¡ak prinÃ¡Å¡a problÃ©my, ktorÃ© vznikajÃº vtedy, keÄ si klient lokÃ¡lne modifikuje sÃºbor vo svojej medzipamÃ¤ti a krÃ¡tko po tom inÃ½ klient poÅ¾iada o ÄÃ­tanie tohto sÃºboru zo servera â v takomto prÃ­pade dostane tento klient neplatnÃ½ sÃºbor ako je to znÃ¡zornenÃ© na obrÃ¡zku 4-8. JednÃ½m spÃ´sobom ako prekonaÅ¥ tento problÃ©m je prenÃ¡Å¡anie vÅ¡etkÃ½ch zmien sÃºborov z lokÃ¡lnych medzipamÃ¤tÃ­ okamÅ¾ite spÃ¤Å¥ na server. Hoci je tento prÃ­stup konceptuÃ¡lne jednoduchÃ½ je neefektÃ­vny. AlternatÃ­vnym rieÅ¡enÃ­m je povoliÅ¥ sÃ©mantiku zdieÄ¾ania sÃºborov. Namiesto toho aby sa poÅ¾adovalo, aby operÃ¡cia Read vrÃ¡tila hodnoty po vÅ¡etkÃ½ch predchÃ¡dzajÃºcich operÃ¡ciÃ¡ch Write je moÅ¾nÃ© zaviesÅ¥ pravidlo: âZmeny na otvorenom sÃºbore sÃº spoÄiatku viditeÄ¾nÃ© len pre procesy (prÃ­padne poÄÃ­taÄ) ktorÃ½ modifikuje sÃºbor. Pre ostatnÃ© procesy (prÃ­padne poÄÃ­taÄe) budÃº zmeny viditeÄ¾nÃ© aÅ¾ po zatvorenÃ­ sÃºboruâ. Osvojenie tohto pravidla nemenÃ­ niÄ na situÃ¡cii z obrÃ¡zku 117-8, avÅ¡ak predefinuje aktuÃ¡lne sprÃ¡vanie (B zÃ­ska pÃ´vodnÃº hodnotu zo sÃºboru) na korektnÃ©. KeÄ A zatvorÃ­ sÃºbor, poÅ¡le jeho kÃ³piu na server a tak ÄalÅ¡ie operÃ¡cie Read vrÃ¡tia novÃº hodnotu. Toto pravidlo je Äasto implementovanÃ© a je znÃ¡me pod menom session sÃ©mantika. Klient 1"
393,496,0.556,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PrÃ­klad 9-3. Naviazanie virtuÃ¡lnych neterminÃ¡lov na Äasti zdrojovÃ©ho kÃ³du. Autori sa v (Agerbo & Cornils, 1997) zavÃ¤zujÃº pouÅ¾Ã­vaÅ¥ notÃ¡ciu OMT (Object Modeling Technique) (predchodcu sÃºÄasne pouÅ¾Ã­vanÃ©ho UML), no vzhÄ¾adom na moÅ¾nosti jazyka Beta im tÃ¡to notÃ¡cia nepostaÄuje, a tak navrhli rozÅ¡Ã­renia OMT pre potreby zÃ¡pisu modelov implementovanÃ½ch v jazyku Beta pomocou Å¡peciÃ¡lnych konÅ¡trukciÃ­ jazyka Beta. Äalej si uvedieme len niektorÃ© zÃ¡kladnÃ© rozÅ¡Ã­renia."
76,35,0.555,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.9 PrÃ­klad. V Å¡katuli mÃ¡me 30 vÃ½robkov a medzi nimi je 5 nepodarkov. NÃ¡hodne vyberme naraz 4. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e medzi vybratÃ½mi bude prÃ¡ve jeden nepodarok? RieÅ¡enie. VybraÅ¥ naraz Å¡tyri je to istÃ©, ako realizovaÅ¥ neusporiadanÃ½ vÃ½ber rozsahu 4 bez vrÃ¡tenia. PoÄet moÅ¾nÃ½ch vÃ½berov sa rovnÃ¡ C(30, 4) = 27 405 a vÅ¡etky sÃº rovnako pravdepodobnÃ©. Nech A je udalosÅ¥, Å¾e medzi vybratÃ½mi je jeden nepodarok. KoÄ¾ko prvkov mÃ¡ mnoÅ¾ina A? Jeden nepodarok z piatich nepodarkov moÅ¾no vybraÅ¥ piatimi spÃ´sobmi. PoÄet moÅ¾nostÃ­ ako vybraÅ¥ 3 dobrÃ© vÃ½robky z 25 dobrÃ½ch sa rovnÃ¡ C(25, 3) = 2300. KaÅ¾dÃ½ z tÃ½ch piatich spÃ´sobov vytvorÃ­ s kaÅ¾dou z tÃ½ch 2300 moÅ¾nostÃ­ priaznivÃº Å¡tvoricu pre nastatie A. Preto poÄet prvkov A sa rovnÃ¡ 5 ï C(25, 3) = 5 ï 2300 = 11 500. Nakoniec P(A) ="
66,12,0.555,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"2 DÃ¡tovÃ½ model Pri dÃ¡tovÃ½ch modeloch je potrebnÃ© rozliÅ¡ovaÅ¥ pojmy dÃ¡tovÃ½ model a schÃ©ma v rÃ¡mci konkrÃ©tneho dÃ¡tovÃ©ho modelu. DÃ¡tovÃ½ model predstavuje sÃºbor princÃ­pov/pravidiel pre popÃ­sanie dÃ¡t, ktorÃ© majÃº byÅ¥ uchovÃ¡vanÃ© v databÃ¡ze. Tieto pravidla definujÃº, ako sÃº dÃ¡ta reprezentovanÃ© v dÃ¡tovom modeli, akÃ© dÃ¡ta je moÅ¾nÃ© uchovÃ¡vaÅ¥, ako sÃº definovanÃ© vzÅ¥ahy medzi dÃ¡tami atÄ. SchÃ©ma je viazanÃ¡ na konkrÃ©tny dÃ¡tovÃ½ model s tÃ½m, Å¾e sa viaÅ¾e na konkrÃ©tne dÃ¡ta a ich popis. Neobsahuje vÅ¡ak konkrÃ©tne dÃ¡ta, iba popisuje, Å¾e takÃ©to typy a vzÅ¥ahy mÃ¡ danÃ¡ databÃ¡za. KonkrÃ©tne dÃ¡ta mÃ´Å¾u byÅ¥ oznaÄovanÃ© ako zÃ¡znam alebo je moÅ¾nÃ© pouÅ¾iÅ¥ oznaÄenie inÅ¡tancia databÃ¡zy (z angl. database instance), Äo predstavuje snapshot, konkrÃ©tnej databÃ¡zy v urÄitom Äase. V rÃ¡mci databÃ¡zovÃ½ch systÃ©mov existujÃº rÃ´zne dÃ¡tovÃ© modely a samotnÃ© implementÃ¡cie databÃ¡zovÃ½ch systÃ©mov sa viaÅ¾u na konkrÃ©tny dÃ¡tovÃ½ model. NiektorÃ© databÃ¡zovÃ© systÃ©my ponÃºkajÃº rozÅ¡Ã­renia, ktorÃ© umoÅ¾nÃ­ aplikovanie rÃ´znych dodatoÄnÃ½ch funkcionalÃ­t vyuÅ¾Ã­vanÃ½ch inÃ½mi databÃ¡zovÃ½mi systÃ©mami. ExistujÃº rÃ´zne dÃ¡tovÃ© modely, ktorÃ© mÃ´Å¾u byÅ¥ nasledovnÃ©:"
76,174,0.555,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"a) NÃ¡jdime pravdepodobnostnÃ© funkcie zloÅ¾iek. b) UrÄime P(1 ï£ < 3, 2 ï£ < 4) . c) UrÄime P( < ). RieÅ¡enie. PodÄ¾a bodu (b) vety 3.1.4, sÄÃ­tanÃ­m v riadkoch, resp. v stÄºpcoch, tabuÄ¾ky zÃ­skame rozdelenia zloÅ¾iek. Tak vznikli okraje v tabuÄ¾ke vpravo. Äalej P(1 ï£"
76,175,0.555,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"3.1.7 PrÃ­klad. VÃ½robnÃ½ automat vykonÃ¡ na blatnÃ­ku auta dva zvary a nituje ho na troch miestach. OznaÄme poÄet nekvalitnÃ½ch zvarov a poÄet nekvalitnÃ½ch nitov na blatnÃ­ku. Zrejme ( ) = {0, 1, 2}, ( ) = {0, 1, 2, 3}. Sledovali sme vÃ½robu 1000 blatnÃ­kov a na kaÅ¾dom z nich sme zistili hodnoty a . VÃ½sledky uvÃ¡dza tabuÄ¾ka poÄetnostÃ­, ktorej sa hovorÃ­ kontingenÄnÃ¡ tabuÄ¾ka. Na kaÅ¾dom objekte, v naÅ¡om prÃ­pade na kaÅ¾dom blatnÃ­ku, zisÅ¥ujeme sÃºÄasne hodnotu dvoch veliÄÃ­n a ."
94,57,0.555,Sprievodca svetom vedeckÃ©ho publikovania,"OdbornÃ¡ literatÃºra obsahuje celÃ© more vedeckÃ½ch ÄlÃ¡nkov. Kedy vÅ¡ak mÃ´Å¾eme ÄlÃ¡nok oznaÄiÅ¥ za kvalitnÃ½? V prvom rade vtedy, keÄ spÄºÅa zÃ¡kladnÃ½ ÃºÄel â precÃ­zne a pravdivo informuje o skÃºmanej problematike, o tom, Äo a ako vedec robil, Äo zistil a Äo z toho vyplÃ½va. V ideÃ¡lnom prÃ­pade rozprÃ¡va prÃ­beh vÃ½skumu takÃ½m spÃ´sobom, aby mal Älovek po jeho preÄÃ­tanÃ­ pocit zmysluplne strÃ¡venÃ©ho Äasu, pocit, Å¾e sa nieÄo nauÄil a rÃ¡d by zistil eÅ¡te viac. KvalitnÃ½ vedeckÃ½ text predovÅ¡etkÃ½m prinÃ¡Å¡a informaÄnÃ½ ÃºÅ¾itok â objasÅuje podstatu, nezahmlieva, nezamlÄÃ­ niÄ dÃ´leÅ¾itÃ©, ale zÃ¡roveÅ nezabÃ­ja zÃ¡ujem ÄitateÄ¾a vymenÃºvanÃ­m podruÅ¾nÃ½ch skutoÄnostÃ­, korektne interpretuje dÃ¡ta, neuvÃ¡dza ÄitateÄ¾a (vedome Äi z nedbalosti) do omylu. Okrem toho vÅ¡ak mÃ´Å¾e motivovaÅ¥ k Å¡tÃºdiu, naÄrtnÃºÅ¥ zaujÃ­mavÃº cestu pre ÄalÅ¡Ã­ vÃ½skum a povznÃ¡Å¡aÅ¥ Ä¾udskÃ©ho ducha. NapÃ­saÅ¥ dobrÃ½ ÄlÃ¡nok je veda a umenie zÃ¡roveÅ. Vedci oceÅujÃº prÃ­nos ÄlÃ¡nku tÃ½m, Å¾e ho citujÃº vo svojich prÃ¡cach. SamotnÃ¡ citovanosÅ¥ vÅ¡ak nemÃ´Å¾e byÅ¥ jedinÃ½m meradlom kvality textu ani autora. Ohlas ovplyvÅujÃº aj faktory nezÃ¡vislÃ© od kvality spracovania (Grim 2009), naprÃ­klad:"
205,37,0.555,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","ZÃ¡klady webu Trust1. Mentormi tejto iniciatÃ­vy sÃº: Daniel - Sir Nigel Shadbolt, J. Weitzner - Sir Tim Berners-Lee, - Wendy HallovÃ¡, - James Hendler, Na univerzite MIT sa zaoberÃ¡ tÃ©mou decentralizÃ¡cie Ãºdajov - Daniel J Weizner. a otvorenÃ½ch Ãºdajov. Je ÄleIniciatÃ­va WSRI sa najviac sÃºstredila na: nom skupiny W3C. 1. formulovanie vÃ½skumnÃ©ho programu pre Å¡irÅ¡iu vedeckÃº komunitu, 2. koordinovanie vÃ½voja vzdelÃ¡vacÃ­ch materiÃ¡lov a Å¡tudijnÃ½ch programov, 3. zapÃ¡janie sa do vedenia tohto rÃ½chlo sa vyvÃ­jajÃºceho vednÃ©ho oboru. HlavnÃ½m krÃ©dom tejto skupiny sa stalo: Web treba Å¡tudovaÅ¥ a pochopiÅ¥ a pritom ho treba vyvÃ­jaÅ¥. (angl. Web needs to be studied and understood, and it needs to be engineered). DÃ´vody, preÄo by mala vzniknÃºÅ¥ tÃ¡to vednÃ¡ disciplÃ­na a oblasti, ktorÃ½m by sa mala venovaÅ¥, publikovali vo svojom ÄlÃ¡nku v roku 2008 [4]. Tu hovoria o webovede ako novej vednej disciplÃ­ne, ktorÃ¡ ma Å¡irokÃ½ zÃ¡ber a vyuÅ¾Ã­va poznatky z mnohÃ½ch inÃ½ch vednÃ½ch disciplÃ­n. TaktieÅ¾ tu hovoria o aktuÃ¡lnych problÃ©moch webu, a teda najmÃ¤ o jeho momentÃ¡lnej zloÅ¾itosti a neÅ¡truktÃºrovanom charaktere. Tu sa dotÃ½kajÃº sÃ©mantickÃ©ho webu, ako ÄalÅ¡ieho nÃ¡stupcu, ktorÃ½ by mohol priniesÅ¥ do dneÅ¡nÃ½ch neÅ¡truktÃºrovanÃ½ch informÃ¡ciÃ­ novÃ½ poriadok."
76,178,0.555,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"DÃ¡ sa ukÃ¡zaÅ¥ (podÄ¾a 3.1.9 b), Å¾e ak ( ) ~ N( , , , ï²), tak pre rozdelenia zloÅ¾iek platÃ­ ~ N( , ), ~ N( , ). ZloÅ¾ky mÃ´Å¾u, ale aj nemusia, byÅ¥ nezÃ¡vislÃ©. InformÃ¡cia o tom je skrytÃ¡ v parametri ï². O jeho Ãºlohe, resp. vÃ½zname, sa dozvieme v ÄlÃ¡nku 3.2 a v kapitole 4."
393,168,0.555,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"jednoduchÃ¡. DefinovaÅ¥ regulÃ¡rny vÃ½raz, ktorÃ½ zahÅÅa znovuvyskytujÃºce sa vÃ½razy a mapuje vÃ½sledky vÃ½razov k sÃ©mantickej Å¡truktÃºre. PrÃ­klad: tieto prÃ­klady poskytujÃº vzorku vzorov, ktorÃ© sÃº zaloÅ¾enÃ© na scenÃ¡ri ontologickej extrakcie. NaprÃ­klad v (Hearst, 1992) jeden lexikÃ¡lno-syntaktickÃ½ vzor sa uvaÅ¾uje v tvare: â¦NP { ,NP } * { , } or other NP â¦ Ak aplikujeme tento vzor na vetu, mÃ´Å¾eme dospieÅ¥ k zÃ¡veru, Å¾e NPs, ktorÃ© sa vzÅ¥ahujÃº na zÃ¡kladnÃº myÅ¡lienku naÄ¾avo od or other sÃº podmnoÅ¾iny zÃ¡kladnej myÅ¡lienky NP, ktorÃ¡ je napravo od or other. NaprÃ­klad veta: Modriny, rany, zlomenÃ© kosti alebo inÃ© zranenia sÃº beÅ¾nÃ©. ExtrahovanÃ© taxonomickÃ© relÃ¡cie sÃº: ( modrina, zranenie ), ( rana, zranenie ), ( zlomenÃ¡ kosÅ¥, zranenie ). V (Hearst, 1992) sa vzory definovali manuÃ¡lne, Äo zaberalo veÄ¾a Äasu a vznikalo veÄ¾a chÃ½b. V (Morin, 1999) bola prÃ¡ca navrhnutÃ¡, podÄ¾a (Hearst, 1992) a rozÅ¡Ã­renÃ¡ pouÅ¾itÃ­m symbolickÃ½ch nÃ¡strojov strojovÃ©ho uÄenia na zlepÅ¡enie lexikÃ¡lno-syntaktickÃ½ch vzorov. V tejto zÃ¡kladnej myÅ¡lienke prezentovali systÃ©m PROMETHEE, ktorÃ½ podporuje poloautomatickÃ© zÃ­skavanie sÃ©mantickÃ½ch relÃ¡ciÃ­ a zlepÅ¡enie lexikÃ¡lno-syntaktickÃ½ch vzorov. PrÃ¡ca (Assadi, 1999) nÃ¡m podÃ¡va sprÃ¡vu o praktickom experimente konÅ¡trukcie regionÃ¡lnej ontolÃ³gie plÃ¡novania elektrickÃ½ch komunikaÄnÃ½ch sietÃ­. OpÃ­sal zhlukovacÃ­ prÃ­stup, ktorÃ½ kombinuje lingvistickÃ© a konceptuÃ¡lne zÃ¡sadnÃ© kritÃ©riÃ¡. PrÃ­kladom je vzor NP,line, ktorÃ©ho vÃ½sledkom po modifikÃ¡cii sÃº dve kategÃ³rie. Faure a Nedellec v (Faure & Nedellec, 1998) prezentovali systÃ©m strojovÃ©ho uÄenia nazvanÃ½ ASSIUM, ktorÃ½ umoÅ¾Åuje zÃ­skavanie taxonomickÃ½ch relÃ¡ciÃ­ zo syntaktickÃ½ch rozborov. ASSIUM sa zakladÃ¡ na konceptuÃ¡lnom zhlukovacom algoritme. ZÃ¡kladnÃ© zhluky sÃº formovanÃ© na zÃ¡kladnÃ½ch slovÃ¡ch, ktorÃ© sa vyskytujÃº s rovnakÃ½m slovesom a po rovnakej predloÅ¾ke. ASSIUM ÃºspeÅ¡ne zhromaÅ¾Äuje zhluky na formovanie novÃ½ch konceptov a hierarchie konceptov z ontolÃ³gie."
59,616,0.555,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"v prednÃ¡Å¡ke 12.4 pomocou doprednÃ½ch neurÃ³novÃ½ch sietÃ­, t. j. na subsymbolickej â konekcionistickej Ãºrovni. DruhÃ½ prÃ­stup bol Å¡tudovanÃ½ v tejto prednÃ¡Å¡ke 12.5 (pozri tieÅ¾ prednÃ¡Å¡ku 2.2), je ukÃ¡zanÃ©, Å¾e oba modely mÃ´Å¾u byÅ¥ vyjadrenÃ© pomocou Minskeho koneÄnostavovÃ½ch strojov (nazÃ½vanÃ½ch tieÅ¾ Mealyho automaty), t. j. pomocou symbolickÃ©ho prÃ­stupu. MusÃ­me zdÃ´razniÅ¥, Å¾e oba tieto prÃ­stupy sÃº navzÃ¡jom ekvivalentnÃ©, t. j. vÃ½hodnosÅ¥ jednÃ©ho formalizmu pred druhÃ½m je len zdanlivÃ¡ a hlavne je to zÃ¡leÅ¾itosÅ¥ uÅ¾Ã­vateÄ¾a, ktorÃº reprezentÃ¡ciu pouÅ¾ije."
367,60,0.555,CESTA K OTVORENEJ VEDE,"DOBRÃ VEDIEÅ¤ Ak mÃ´Å¾ete, poÅ¡lite svoj ÄlÃ¡nok do Äasopisu s otvorenÃ½m prÃ­stupom. Ukladajte svoje publikÃ¡cie v otvorenom repozitÃ¡ri: â¢ ponechajte si najnovÅ¡iu verziu schvÃ¡lenÃº recenzentami, ale pred redakÄnÃ½mi Ãºpravami vydavateÄ¾a, â¢ poÅ¾iadajte spoluautorov o sÃºhlas, â¢ uloÅ¾te najnovÅ¡iu verziu, ktorÃ¡ preÅ¡la recenznÃ½m konanÃ­m, v otvorenom repozitÃ¡ri. ZÃºÄastnite sa vo svojej odbornej komunite diskusiÃ­ o preprintoch uloÅ¾enÃ½ch v otvorenÃ½ch repozitÃ¡roch. Dokumentujte a zdieÄ¾ajte svoje vÃ½skumnÃ© dÃ¡ta a/alebo zdrojovÃ½ kÃ³d: â¢ dÃ¡ta ukladajte v trvalom systÃ©me alebo formÃ¡te v sÃºlade s politikou svojho tÃ­mu alebo inÅ¡titÃºcie, â¢ dokumentujte dÃ¡ta metadÃ¡tami, aby sa dali opakovanie pouÅ¾iÅ¥, â¢ sÃºbory dÃ¡t sÃºvisiace s publikÃ¡ciami ukladajte v online repozitÃ¡ri, â¢ kÃ³d ukladajte v Å¡pecializovanom trvalom otvorenom repozitÃ¡ri,ako je naprÃ­klad qSoftware Heritage, GitHub, BitLocker alebo GitLab atÄ. (vÃ½ber vhodnÃ©ho repozitÃ¡ra zdrojovÃ½ch kÃ³dov). DrÅ¾te krok s najnovÅ¡Ã­mi trendmi v oblasti otvorenej vedy a aktÃ­vne sa zapÃ¡jajte!"
369,17,0.554,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"UvedenÃ¡ definÃ­cia je zaloÅ¾enÃ¡ na niekoÄ¾kÃ½ch zÃ¡kladnÃ½ch pojmoch: 1. ArchitektonickÃ½ element â predstavuje zÃ¡kladnÃ½ prvok, uvaÅ¾ovanÃ½ na Ãºrovni architektÃºry systÃ©mu. ArchitektonickÃ½m elementom mÃ´Å¾e byÅ¥ podsystÃ©m, modul, trieda, databÃ¡za, databÃ¡zovÃ¡ tabuÄ¾ka a inÃ©. Namiesto pojmu architektonickÃ½ element sa Äasto pouÅ¾Ã­vajÃº pojmy ako komponent alebo modul, tieto vÅ¡ak majÃº svoj Å¡pecifickÃ½ vÃ½znam v urÄitÃ½ch softvÃ©rovÃ½ch prostrediach (naprÃ­klad komponent v prostrediach JEE alebo .NET), preto v uvedenej definÃ­cii neboli pouÅ¾itÃ©. 2. Å truktÃºra systÃ©mu â definuje nÃ¡vrhovÃº (design-time) alebo vykonÃ¡vaciu (run-time) organizÃ¡ciu systÃ©mu: architektonickÃ© elementy, ich vzÅ¥ahy a interakcie. 3. Vlastnosti systÃ©mu â zahÅÅajÃº zvonku (t. j. externÃ½m pozorovateÄ¾om) viditeÄ¾nÃ© vlastnosti systÃ©mu, ktorÃ© nie sÃº funkÄnÃ½mi vlastnosÅ¥ami, ako naprÃ­klad vÃ½konnosÅ¥, rozÅ¡Ã­riteÄ¾nosÅ¥ alebo bezpeÄnosÅ¥. SamotnÃº Å¡truktÃºru systÃ©mu mÃ´Å¾eme rozdeliÅ¥ na dve Äasti: 1. StatickÃ¡ Å¡truktÃºra â definuje internÃ© nÃ¡vrhovÃ© elementy systÃ©mu a ich organizÃ¡ciu. TÃ½mito elementmi mÃ´Å¾u byÅ¥: ï­ softvÃ©rovÃ© elementy, ako naprÃ­klad moduly, balÃ­ky (package), triedy objektov, uloÅ¾enÃ© databÃ¡zovÃ© procedÃºry, sluÅ¾by a inÃ©, ï­ dÃ¡tovÃ© elementy, naprÃ­klad triedy, databÃ¡zovÃ© tabuÄ¾ky alebo dÃ¡tovÃ© sÃºbory, ï­ sÃºvisiace hardvÃ©rovÃ© elementy1, naprÃ­klad poÄÃ­taÄe a ich Äasti (disky, CPU) a sieÅ¥ovÃ© elementy (sieÅ¥ovÃ© smerovaÄe a inÃ©). OrganizÃ¡cia definuje vzÅ¥ahy medzi tÃ½mito elementmi, naprÃ­klad, Å¾e modul A zÃ¡visÃ­ od sluÅ¾ieb modulu B alebo, Å¾e tabuÄ¾ka X mÃ¡ vÃ¤zbu (vyjadrenÃº cudzÃ­m kÄ¾ÃºÄom) na tabuÄ¾ku Y. 2. DynamickÃ¡ Å¡truktÃºra â definuje elementy v Äase vykonÃ¡vania programu a ich interakcie. TÃ½mito interakciami mÃ´Å¾e byÅ¥ tok informÃ¡ciÃ­ medzi elementmi (element A poÅ¡le sprÃ¡vu elementu B), sekvenÄnÃ© alebo paralelnÃ© vykonanie vnÃºtornej Ãºlohy (element X vyvolÃ¡ procedÃºru elementu Y) alebo akcie na dÃ¡tach (vytvorenie zÃ¡znamu Z). Vo vÅ¡eobecnosti sÃº vonkajÅ¡ie charakteristiky systÃ©mu urÄenÃ© jeho vnÃºtornÃ½mi charakteristikami: ï· Zvonku pozorovateÄ¾nÃ© sprÃ¡vanie systÃ©mu (Äo systÃ©m robÃ­) je urÄenÃ© kombinÃ¡ciou funkÄnÃ©ho sprÃ¡vania jeho vnÃºtornÃ½ch elementov."
94,416,0.554,Sprievodca svetom vedeckÃ©ho publikovania,"AgregÃ¡tory KniÅ¾nica sa mÃ´Å¾e rozhodnÃºÅ¥ kÃºpiÅ¥ urÄitÃ½ obsah prostrednÃ­ctvom veÄ¾kÃ½ch agregÃ¡torov ako je napr. ProQuest alebo EBSCO. AgregÃ¡tor na zÃ¡klade zmluvnÃ©ho vzÅ¥ahu kupuje od vÃ½znamnÃ½ch producentov databÃ¡z a vydavateÄ¾ov Äasopisov obsah, ktorÃ½ potom zdruÅ¾uje (agreguje) do rÃ´znych balÃ­kov a modulov a na trhu ponÃºka v rÃ¡mci vlastnÃ©ho vyhÄ¾adÃ¡vacieho rozhrania. Porovnanie Å¡tatistÃ­k od producentov jednotlivÃ½ch EIZ a od agregÃ¡torov umoÅ¾Åuje zÃ­skaÅ¥ komplexnÃ½ obraz o najvyuÅ¾Ã­vanejÅ¡om obsahu z ponuky EIZ kniÅ¾nice."
190,154,0.554,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V princÃ­pe mÃ´Å¾eme povedaÅ¥, Å¾e ak sme sa rozhodli riadiÅ¥ projekt plÃ¡nom, mali by sme sa toho drÅ¾aÅ¥ poÄas celÃ©ho obdobia rieÅ¡enia projektu, a teda by sme vytvorenÃ½ plÃ¡n mali nÃ¡leÅ¾ite udrÅ¾iavaÅ¥. Istotne si mnohÃ­ povedia, Å¾e udrÅ¾iavanie plÃ¡nu je Äasovo nÃ¡roÄnÃ©, ale ak sa nad problÃ©mom zamyslÃ­me hlbÅ¡ie, zistÃ­me, Å¾e plÃ¡n projektu vonkoncom nie je vec statickÃ¡, a teda sa postupom Äasu mÃ´Å¾e meniÅ¥. Z toho logicky vyplÃ½va, Å¾e sa poÄas celÃ©ho obdobia rieÅ¡enia projektu nemÃ´Å¾eme spoliehaÅ¥ na plÃ¡n, ktorÃ½ sme vytvorili na zaÄiatku projektu a nÃ¡sledne ho neudrÅ¾iavali. TakÃ½to plÃ¡n, aj keÄ bol v momente vzniku priam dokonalÃ½, strÃ¡ca hodnotu a vÃ½znam. Z dokonalÃ©ho plÃ¡nu sa stÃ¡va iba legenda o dokonalom plÃ¡ne."
184,329,0.554,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"sÃºbor viac atribÃºtov s rovnakÃ½m menom atribÃºtu. Na vÃ½ber transformÃ¡tora pre konkrÃ©tny typ sÃºboru sa Äasto pouÅ¾Ã­va pouÅ¾Ã­vateÄ¾om rozÅ¡Ã­riteÄ¾nÃ¡ tabuÄ¾ka transformÃ¡torov (Gifford et al., 1991). InÃ½m prÃ­stupom mÃ´Å¾e byÅ¥ oznaÄkovanie obsahu sÃºborov, kde mÃ´Å¾u byÅ¥ pouÅ¾itÃ© znaÄkovacie ontolÃ³gie ako naprÃ­klad v sÃºborovÃ½ch systÃ©moch TagFS (Bloehdorn et al., 2006) a FlickrFS 11. Tento prÃ­stup navyÅ¡e umoÅ¾Åuje kompletnÃ© exportovanie metadÃ¡t, ktorÃ© sa potom mÃ´Å¾u zdieÄ¾aÅ¥ medzi pouÅ¾Ã­vateÄ¾mi. Pre prispÃ´sobenie rÃ´znym typom sÃºborov (ako naprÃ­klad sÃºbory elektronickej poÅ¡ty), ktorÃ© zvyÄajne obsahujÃº viacerÃ© objekty sa v niektorÃ½ch systÃ©moch zovÅ¡eobecÅuje jednotka asociatÃ­vneho prÃ­stupu a tak sa nepristupuje len k sÃºborom ako k celku â namiesto toho sa pristupuje k jednotlivÃ½m objektom v nich. V (Gifford et al., 1991) nazvali autori tieto jednotky asociatÃ­vneho prÃ­stupu entitami. Tieto entity potom mohli pozostÃ¡vaÅ¥ z celÃ©ho sÃºboru, objektu vo vnÃºtri sÃºboru alebo adresÃ¡ra. VÃ½stup transformÃ¡torov mÃ´Å¾e pre jednotlivÃ© sÃºbory potom vyzeraÅ¥ tak, ako je to znÃ¡zornenÃ© na obrÃ¡zku 4-10."
184,100,0.554,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 2-13. Vstupy a vÃ½stupy pre urÄenie poÅ¾iadaviek na architektÃºru. TypickÃ½m prÃ­kladom poÅ¾iadavky na architektÃºru je: âKomunikÃ¡cia medzi komponentmi musÃ­ garantovaÅ¥ bezstratovÃ© zasielanie sprÃ¡v.â PrÃ­klad ohraniÄujÃºcej poÅ¾iadavky je nasledovnÃ½: âSystÃ©m musÃ­ na spracovanie poÅ¾iadaviek pouÅ¾Ã­vaÅ¥ webovÃ½ server zaloÅ¾enÃ½ na IIS a ASP.â NefunkcionÃ¡lne poÅ¾iadavky a ohraniÄenia obmedzujÃº architekta pri vÃ½bere rieÅ¡enÃ­ a tvorbe architektÃºry. V tabuÄ¾ke 2-1 uvÃ¡dzame prÃ­klady niektorÃ½ch poÅ¾iadaviek na architektÃºru systÃ©mu, typickÃ© prÃ­klady obmedzenÃ­ kladenÃ½ch na architektÃºru znÃ¡zorÅuje tabuÄ¾ka 2-2."
195,148,0.554,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov zbieraÅ¥ reÃ¡lne dÃ¡ta a navrhovaÅ¥ jednoduchÃ© rieÅ¡enia. PraktickÃ­ softvÃ©rovÃ­ vÃ½vojÃ¡ri na druhej strane mÃ´Å¾u Å¥aÅ¾iÅ¥ z vÃ½stupov oblastnej Å¡tÃºdie, ako sÃº odporÃºÄacie systÃ©my a repozitÃ¡re dÃ¡t. V tejto prÃ¡ci opÃ­Å¡eme kroky, ktorÃ© sÃº potrebnÃ© spraviÅ¥ k vedeniu oblastnej Å¡tÃºdie. OboznÃ¡mime sa aj s hlavnÃ½mi vÃ½zvami, ktorÃ© sÃº spojenÃ© s vedenÃ­m oblastnej Å¡tÃºdie."
94,332,0.554,Sprievodca svetom vedeckÃ©ho publikovania,"9.2.2 AkademickÃ© sociÃ¡lne mÃ©diÃ¡ VedeckÃ¡ komunita vyuÅ¾Ã­va sociÃ¡lne siete na zverejÅovanie vedeckÃ½ch informÃ¡ciÃ­ ako aj neformÃ¡lnu komunikÃ¡ciu, zÃ­skavanie kontaktov, vylepÅ¡enie alebo udrÅ¾anie prehÄ¾adu v spleti online zdrojov a ÃºÄinnÃº prezentÃ¡ciu svojich vÃ½sledkov. Od vzniku prvÃ½ch akademickÃ½ch sociÃ¡lnych sietÃ­ ResearchGate (mÃ¡j 2008), Mendeley (august 2008) a Academia.edu (september 2008) tÃ¡to oblasÅ¥ zaÅ¾ila veÄ¾kÃ½ boom. Rodina sociÃ¡lnych mÃ©diÃ­, ktorÃ© sÃº nejakÃ½m spÃ´sobom relevantnÃ© pre akademickÃ½ Å¾ivot, mÃ¡ niekoÄ¾ko desiatok Älenov a stÃ¡le sa dynamicky vyvÃ­ja (prehÄ¾ad napr. Miah (2017)). PrincÃ­p fungovania vÅ¡ak zostal rovnakÃ½: profil si mÃ´Å¾e bezplatne zaloÅ¾iÅ¥ ktokoÄ¾vek (resp. akÃ½koÄ¾vek Älen akademickej obce â ResearchGate vyÅ¾aduje od perspektÃ­vnych pouÅ¾Ã­vateÄ¾ov e-mailovÃº adresu akademickej inÅ¡titÃºcie alebo potvrdenie, Å¾e vedecky publikovali). NiektorÃ© siete ponechÃ¡vajÃº vÅ¡etky sluÅ¾by voÄ¾ne dostupnÃ©, inÃ© spoplatÅujÃº nadstavbovÃ½ servis (napr. vÃ¤ÄÅ¡iu kapacitu pre ukladanie dokumentov). Online sociÃ¡lne siete moÅ¾no struÄne definovaÅ¥ ako sluÅ¾by zaloÅ¾enÃ© na bÃ¡ze webu, ktorÃ© umoÅ¾ÅujÃº Ä¾uÄom (Boyd a Ellison 2007):"
59,516,0.553,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"rozdielnymi etnickÃ½mi skupinami, pokiaÄ¾ nezavedieme administrÃ¡tora pokutujÃºceho akty nespoluprÃ¡ce. KeÄ etnickÃ© skupiny majÃº veÄ¾mi rozdielne veÄ¾kosti, princÃ­p kolektÃ­vnej viny mÃ´Å¾e byÅ¥ veÄ¾mi devastujÃºci pre menÅ¡iu etnickÃº skupinu, v ktorej mÃ´Å¾e zaniknÃºÅ¥ aj vnÃºtroetnickÃ¡ spoluprÃ¡ca. DruhÃ¡ pouÅ¾itÃ¡ stratÃ©gia na podporu spoluprÃ¡ce je tzv. osobnÃ¡ zodpovednosÅ¥, keÄ Älen skupiny, ktorÃ½ nespolupracuje v rÃ¡mci medzietnickÃ½ch interakciÃ­, je potrestanÃ½ osobne v rÃ¡mci svojej etnickej skupiny. To znamenÃ¡, Å¾e na rozdiel od princÃ­pu kolektÃ­vnej viny, v tejto stratÃ©gii existuje len jeden typ âpotrestaniaâ, Älenovia sÃº oznaÄenÃ­ penalizÃ¡ciou osobne. SimulaÄnÃ© vÃ½poÄty spolu s teoretickou analÃ½zou ukazujÃº, Å¾e v tomto prÃ­pade mÃ´Å¾e emergovaÅ¥ medzietnickÃ¡ spoluprÃ¡ca."
184,418,0.553,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"frekvencia vÃ½skytu) v dokumente d j a n je veÄ¾kosÅ¥ mnoÅ¾iny termov popisujÃºcej dokument (Salton-Buckley 1988). VÃ¡hu mÃ´Å¾eme vypoÄÃ­tavaÅ¥ rÃ´znymi spÃ´sobmi. NajznÃ¡mejÅ¡Ã­ je vÃ½poÄet vÃ¡hy na zÃ¡klade poÄtu vÃ½skytov termov. Z analÃ½z je znÃ¡me (Salton, 1975) Å¾e vÃ¡ha termu zaloÅ¾enÃ¡ na poÄte vÃ½skytov je vhodnÃ¡ najmÃ¤ v systÃ©moch kde chceme zÃ­skaÅ¥ Äo najviac relevantnÃ½ch vÃ½sledkov â vysokÃ© pokrytie (recall), kÃ½m termy s nÃ­zkym poÄtom vÃ½skytov nÃ¡m zasa mÃ´Å¾u zvyÅ¡ovaÅ¥ presnosÅ¥ (precision). VzÃ¡jomnÃ¡ podobnosÅ¥ dokumentov alebo dokumentu D j a dopytu q = ( q1 , q2 ,..., qn ) sa zistÃ­ metÃ³dou kosÃ­nusovej korelÃ¡cie vektorov d j a q :"
122,25,0.553,Modelovanie softvÃ©ru,"2.4 PrÃ­pad pouÅ¾itia je koncept vedomia koncovÃ©ho pouÅ¾Ã­vateÄ¾a SpÃ­sanie typickÃ½ch interakciÃ­ s vytvÃ¡ranÃ½m systÃ©mom na Ãºrovni sledovania cieÄ¾ov pouÅ¾Ã­vateÄ¾a, t. j. prÃ­padov pouÅ¾itia systÃ©mu, umoÅ¾Åuje odhaliÅ¥ skutoÄnÃ½ zÃ¡mer klienta a vyjadriÅ¥ ho zrozumiteÄ¾ne, ale predsa blÃ­zko ku kÃ³du. PrÃ­pad pouÅ¾itia formulujeme na zÃ¡klade informÃ¡ciÃ­ od klienta alebo â eÅ¡te lepÅ¡ie â koncovÃ©ho pouÅ¾Ã­vateÄ¾a. Inak povedanÃ©, prÃ­pad pouÅ¾itia je koncept vedomia koncovÃ©ho pouÅ¾Ã­vateÄ¾a, resp. je sÃºÄasÅ¥ou jeho mentÃ¡lneho modelu [CB10]. Predstava o prÃ­pade pouÅ¾itia na strane vÃ½vojÃ¡rov sa mÃ´Å¾e podstatne lÃ­Å¡iÅ¥ od oÄakÃ¡vanÃ­ klienta. NaprÃ­klad, mÃ´Å¾eme domnievaÅ¥, Å¾e sa objednÃ¡vky majÃº expedovaÅ¥ jednotlivo, ako aj indikuje nÃ¡zov prÃ­padu pouÅ¾itia Expeduj objednÃ¡vku. MoÅ¾no to tak klient chce, ale mohol by chcieÅ¥ aj nieÄo inÃ©: expedovaÅ¥ viac objednÃ¡vok naraz, aby mohol prioritne priradiÅ¥ deficitÃ¡rny vÃ½robok k hodnotnejÅ¡Ã­m objednÃ¡vkam alebo vÃ½znamnejÅ¡Ã­m klientom. V takom prÃ­pade by sa prÃ­sluÅ¡nÃ½ prÃ­pad pouÅ¾itia mal volaÅ¥ skÃ´r Expeduj objednÃ¡vky. ProstÃ½m odsledovanÃ­m krokov prÃ­padu pouÅ¾itia klient zistÃ­, Äi by mu plÃ¡novanÃ¡ implementÃ¡cia vyhovovala alebo nie. PrÃ­pady pouÅ¾itia sÃº skutoÄne veÄ¾mi lacnou, avÅ¡ak mimoriadne ÃºÄinnou technikou modelovania softvÃ©ru."
122,113,0.553,Modelovanie softvÃ©ru,"zabezpeÄuje prÃ­sluÅ¡nÃº kontrolu na vstupe. Podobne by mohla byÅ¥ zabezpeÄenÃ¡ aj kontrola na vÃ½stupe. Keby v reÅ¥azovom spracovanÃ­ kaÅ¾dÃ½ stroj bol robustnÃ½, zbytoÄne by to zvyÅ¡ovalo zloÅ¾itosÅ¥ ich umiestnenia a transparentnosÅ¥ procesu, lebo by sme stroje aj zreÅ¥azili tak, aby vÃ½stup z jednÃ©ho vyhovoval vstupu na nadvÃ¤zujÃºcom stroji. AnalogickÃ¡ situÃ¡cia vznikÃ¡ aj medzi operÃ¡ciami (funkciami, metÃ³dami, procedÃºrami. . . ) v programovanÃ­. ObrÃ¡zok 7.4 pripomÃ­na prvky, ktorÃ© sa tÃ½kajÃº objednÃ¡vania v e-obchode. Pre jednoduchosÅ¥ neberieme do Ãºvahy balÃ­ky, ako ani priebeh ceny v Äase. PredpokladÃ¡me, Å¾e produkt mÃ¡ len jednu cenu. Order"
265,438,0.553,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Diagram prÃ­padov pouÅ¾itia je graf (prÃ­klad diagramu je na Obr. 4.8). Tvoria ho vrcholy a hrany viacerÃ½ch typov. PrvÃ½ typ vrcholu je prÃ­pad pouÅ¾itia, znÃ¡zorÅovanÃ½ ako ovÃ¡l, druhÃ½m je aktÃ©r, znÃ¡zorÅovanÃ½ ako panÃ¡Äik. AktÃ©rov a prÃ­pady pouÅ¾itia spÃ¡jajÃº interakcie (sÃºvislÃ© neorientovanÃ© Äiary). Medzi aktÃ©rmi navzÃ¡jom a medzi prÃ­padmi pouÅ¾itia navzÃ¡jom moÅ¾no definovaÅ¥ vzÅ¥ah generalizÃ¡cie (orientovanÃ¡ sÃºvislÃ¡ Äiara zakonÄenÃ¡ trojuholnÃ­kovou Å¡Ã­pkou). Medzi prÃ­padmi pouÅ¾itia moÅ¾no tieÅ¾ definovaÅ¥ zÃ¡vislosÅ¥ (orientovanÃº preruÅ¡ovanÃº Äiaru zakonÄenÃº jednoduchou Å¡Ã­pkou). ZÃ¡vislosÅ¥ pritom v diagrame prÃ­padov pouÅ¾itia rozliÅ¡ujeme v dvoch stereotypoch: include (ak je scenÃ¡r cieÄ¾ovÃ©ho prÃ­padu"
115,22,0.552,Algebra a diskrÃ©tna  matematika,"A3. MÃ¡me prÃ¡ve 5 vrcholov. Tento axiomatickÃ½ systÃ©m mÃ´Å¾e maÅ¥ rÃ´zne interpretÃ¡cie. InterpretÃ¡cia, v ktorej sÃº axiÃ³my pravdivÃ© vÃ½roky, sa nazÃ½va model axiomatickÃ©ho systÃ©mu. UÅ¾ pouÅ¾itÃ¡ terminolÃ³gia navodzuje zavedenie modelu grafu2, kde vrchol je bod a hrana je Äiara obsahujÃºca na svojich koncoch dva vrcholy, pozri obr. 1.1. DokÃ¡Å¾eme tieto dve vety, ktorÃ© vyplÃ½vajÃº z axiomatickÃ©ho systÃ©mu. VETA 1.1."
135,158,0.552,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.5.2 SOM objekty SOM oddeuje rozhranie objektov od ich implementÃ¡cie pomocou jazykovo nezÃ¡vislÃ©ho objektovÃ©ho modelu. KniÅ¾nica a (klientska) aplikÃ¡cia pouÅ¾Ã­vajÃºca tÃºto kniÅ¾nicu tak mÃ´Å¾u by implementovanÃ© v rÃ´znych programovacÃ­ch jazykoch a pokia zmena nevyÅ¾aduje Ãºpravu zdrojovÃ©ho kÃ³du klientskej aplikÃ¡cie, novÃ¡ verzia triedy sa mÃ´Å¾e nasadi bez nutnosti rekompilÃ¡cie klientskej aplikÃ¡cie."
130,386,0.552,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Å truktÃºra zaloÅ¾enÃ¡ na vÃ½sledkoch V organizÃ¡cii sÃº urÄenÃ© iba zÃ¡kladnÃ© ciele, ktorÃ© je potrebnÃ© dosiahnuÅ¥. Je urÄenÃ¡ Å¡truktÃºra vÃ½sledkov akÃ© majÃº jednotlivÃ© agenty dodÃ¡vaÅ¥, avÅ¡ak nie spÃ´sob ich dosiahnutia. KaÅ¾dÃ½ agent mÃ¡ vo svojej kompetencii spÃ´sob (teda aj svoje ÄiastkovÃ© ciele a Ãºlohy), akÃ½m dosiahne poÅ¾adovanÃ½ vÃ½sledok. TakÃ¡to Å¡truktÃºra je typickÃ¡ pre zabezpeÄovanie vÃ½sledkov kvantitatÃ­vnou metÃ³dou, tÃº istÃº Ãºlohu rieÅ¡i veÄ¾kÃ© mnoÅ¾stvo agentov a kvalita vÃ½sledku je spravidla ÃºmernÃ¡ poÄtu agentov, ktorÃ© sa na jej rieÅ¡enÃ­ podieÄ¾a. ÄalÅ¡ie pouÅ¾itie Å¡truktÃºry zaloÅ¾enej na vÃ½sledkoch je rieÅ¡enie veÄ¾kÃ©ho poÄtu Ãºloh s rovnakou Å¡truktÃºrou vÃ½sledku. V takomto prÃ­pade kaÅ¾dÃ½ agent dostÃ¡va inÃ© Ãºlohy a generuje vÃ½sledky s pevne danou Å¡truktÃºrou. PrÃ­kladom mÃ´Å¾e byÅ¥ predaj vÃ½robkov alebo sluÅ¾ieb, kedy mÃ¡ kaÅ¾dÃ½ agent za Ãºlohu predaÅ¥ Äo najviac vÃ½robkov. ÄinnosÅ¥ jednotlivÃ½ch predajcov je potom pomerne nezÃ¡vislÃ¡ a o spÃ´sobe maximalizÃ¡cie svojho predaja rozhoduje kaÅ¾dÃ½ agent individuÃ¡lne."
236,122,0.552,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"VÅ¡imnite si, Å¾e na oboch stranÃ¡ch strednÃ©ho stÄºpca, znaku rovnosti, je veÄ¾a voÄ¾nÃ©ho miesta. Ako uvidÃ­te v nasledujÃºcom prÃ­klade, toto voÄ¾nÃ© miesto mÃ´Å¾e byÅ¥ zmenÅ¡enÃ© prÃ­kazom \setlength\arraycolsep{2pt}. DlhÃ© rovnice nie sÃº automaticky rozdeÄ¾ovanÃ© na peknÃ© Äasti. Autor musÃ­ sÃ¡m urÄiÅ¥, kde sa majÃº rozdeliÅ¥ a nakoÄ¾ko ich treba odsadiÅ¥. Na dosiahnutie tohoto sa najÄastejÅ¡ie pouÅ¾Ã­vajÃº nasledujÃºce dve metÃ³dy:"
135,42,0.552,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.2.2 PouÅ¾itie vzoru Z prÃ­kladov uvedenÃ½ch v predchÃ¡dzajÃºcej asti moÅ¾no vytuÅ¡i Ãºel pouÅ¾itia vzoru AbstraktnÃ¡ tovÃ¡re. AbstraktnÃº tovÃ¡re pouÅ¾ijeme v prÃ­pade, ak chceme vytvÃ¡ra skupiny sÃºvisiacich objektov a pritom nechceme Å¡pecifikova konkrÃ©tne triedy vytvÃ¡ranÃ½ch objektov. TakÃ¡ situÃ¡cia mÃ´Å¾e nasta vo viacerÃ½ch prÃ­padoch:"
122,83,0.552,Modelovanie softvÃ©ru,"5.2 PrierezovÃ© diagramy tried CelkovÃ½ diagram tried bÃ½va prÃ­liÅ¡ rozsiahly, kÃ½m diagramy tried balÃ­kov zobrazujÃº iba ich vlastnÃ© prvky. Na pochopenie sÃºvislosti medzi prvkami Å¡truktÃºry potrebujeme prierezovÃ© diagramy tried: takÃ©, ktorÃ© zobrazia charakteristickÃ© prepojenia prvkov Å¡truktÃºry s urÄitÃ½m zÃ¡merom. V e-obchode moÅ¾no identifikovaÅ¥ viac takÃ½chto charakteristickÃ½ch prepojenÃ­ prvkov Å¡truktÃºry: obrÃ¡zok 5.14 zobrazuje objednÃ¡vanie, obrÃ¡zok 5.15 zobrazuje objednÃ¡vanie, obrÃ¡zok 5.16 zobrazuje vyhÄ¾adÃ¡vanie, a obrÃ¡zok 5.17 zobrazuje aplikÃ¡ciu vzoru Observer v pouÅ¾Ã­vateÄ¾skom rozhranÃ­."
76,121,0.552,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.1.6 Pokus spoÄÃ­va v hÃ¡dzanÃ­ piatimi mincami, ktorÃ½ch ruby, resp. lÃ­ca sme oznaÄili ÄÃ­slami jedna, resp. dva. Nech predstavuje sÃºÄet ÄÃ­sel, ktorÃ© padli na minciach. NÃ¡jdite tabuÄ¾ku rozdelenia veliÄiny a urÄte P(3 ï£ < 8). 2.1.7 Na terÄ striedavo strieÄ¾ajÃº dvaja strelci a zasahujÃº ho na sebe nezÃ¡visle s pravdepodobnosÅ¥ami = 0.8 a = 0.7. Predpokladajme, Å¾e kaÅ¾dÃ½ strieÄ¾a 2 razy. Nech je celkovÃ½ poÄet zÃ¡sahov. NÃ¡jdite rozdelenie veliÄiny a urÄte P( â¥ 3). 2.1.8 Predpokladajme, Å¾e tri sÃºÄiastky zlyhÃ¡vajÃº poÄas doby T s danÃ½mi pravdepodobnosÅ¥ami = 0.3, = 0.4 a = 0.5, priÄom udalosti zlyhania sÃº nezÃ¡vislÃ©. Nech oznaÄuje poÄet zlyhanÃ½ch poÄas doby T. UrÄte rozdelenie veliÄiny . 2.1.9 V Å¡katuli mÃ¡me 10 vÃ½robkov a medzi nimi sÃº Å¡tyri nepodarky. NÃ¡hodne vyÅ¥ahujeme vÃ½robok, aÅ¾ kÃ½m nevytiahneme dobrÃ½ (vytiahnutÃ© vÃ½robky spÃ¤Å¥ nevraciame). Nech je poÄet vytiahnutÃ½ch v pokuse. UrÄte rozdelenie veliÄiny . 2.1.10 UvaÅ¾ujme o obmene predchÃ¡dzajÃºcej Ãºlohy â pokraÄujeme vo vÃ½bere, aÅ¾ kÃ½m nevytiahneme dva dobrÃ©. Nech znamenÃ¡ poÄet vytiahnutÃ½ch vÃ½robkov v pokuse. UrÄte rozdelenie veliÄiny . 2.1.11 V Å¡katuli mÃ¡me pÃ¤Å¥ loptiÄiek s ÄÃ­slami 1, 2, â¦ , 5. NÃ¡hodne vyberieme naraz tri. Nech je najvÃ¤ÄÅ¡ie z vytiahnutÃ½ch ÄÃ­sel, je najmenÅ¡ie a nech je sÃºÄet ÄÃ­sel na vytiahnutÃ½ch loptiÄkÃ¡ch. NÃ¡jdite rozdelenie veliÄÃ­n , a . 2.1.12 Z balÃ­Äka 52 francÃºzskych kariet sme nÃ¡hodne vybrali 5 kariet (vÃ½berom bez vrÃ¡tenia). Nech predstavuje poÄet figÃºr medzi vybranÃ½mi (keÄÅ¾e za figÃºry povaÅ¾ujeme J, Q, K, A, balÃ­Äek obsahuje 16 figÃºr). NÃ¡jdite rozdelenie veliÄiny . 2.1.13 HrÃ¡Ä hrÃ¡ hru, v ktorej s pravdepodobnosÅ¥ou zÃ­skava bod a s pravdepodobnosÅ¥ou bod strÃ¡ca (teda zÃ­skava ï­1 bod), priÄom zrejme + = 1. Nech predstavuje hrÃ¡Äovo skÃ³re po piatich kolÃ¡ch tejto hry. NÃ¡jdite rozdelenie veliÄiny . (Ak napr. hrÃ¡Ä bol dva razy ÃºspeÅ¡nÃ½ a tri razy neÃºspeÅ¡nÃ½, = ï­1). 2.1.14 Milan a Cyril hrajÃº hazardnÃº hru: Milan hÃ¡dÅ¾e modrou a Cyril Äervenou kockou. 10 centov zÃ­skava od sÃºpera ten, komu padne vÃ¤ÄÅ¡ie ÄÃ­slo (ak padnÃº rovnakÃ© ÄÃ­sla, hra konÄÃ­ remÃ­zou a nikto nikomu niÄ neplatÃ­). Predpokladajme, Å¾e kaÅ¾dÃ½ z nich zaÄÃ­na hraÅ¥ s 30-timi centami (teda zaÄiatoÄnÃ½ kapitÃ¡l kaÅ¾dÃ©ho je 30 centov). Nech predstavuje kapitÃ¡l Milana po troch kolÃ¡ch tejto hry. NÃ¡jdite rozdelenie veliÄiny . 2.1.15 Nech nÃ¡hodnÃ½ pokus spoÄÃ­va v 6-nÃ¡sobnom nezÃ¡vislom opakovanÃ­ hodu riadnou mincou. Za vÃ½sledok pokusu povaÅ¾ujeme usporiadanÃº 6-ticu symbolov C, Z (ÄÃ­slo, znak). KeÄÅ¾e minca je riadna, t. j. symetrickÃ¡ a homogÃ©nna, kaÅ¾dÃ½ zo 64 vÃ½sledkov mÃ¡ rovnakÃº pravdepodobnosÅ¥. Nech predstavuje poÄet zmien v 6-tici. Napr. ak vÃ½sledok pokusu je ï·, ï· = (C, Z, Z, C, Z, C), tak (ï·) = 4. Keby vÃ½sledkom bol (C, Z, Z, Z, C, C), tak sa realizuje hodnotou 2. Zrejme je nÃ¡hodnÃ¡ veliÄina a ( ) = {0, 1, â¦ , 5}. UrÄte rozdelenie veliÄiny . Viete nÃ¡jsÅ¥ rozdelenie aj pre prÃ­pad -nÃ¡sobnÃ©ho hodu (riadnou) mincou?"
40,115,0.552,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"dlouho bude pouÅ¾Ã­vat je Kniha PÅedpisÅ¯ (nebo jejÃ­ analogie), doplnÄnÃ¡ o navigaÄnÃ­ pravidla a mechanismy pro hledÃ¡nÃ­ cesty v grafu. PokroÄilejÅ¡Ã­ techniky umÄlÃ© inteligence, jako napÅÃ­klad neuronovÃ© sÃ­tÄ nebo plÃ¡novÃ¡nÃ­, se zatÃ­m pÅÃ­liÅ¡ nepouÅ¾Ã­vajÃ­, a to zejmÃ©na dÃ­ky komplexnosti a dynamice virtuÃ¡lnÃ­ch svÄtÅ¯. ObecnÄ platÃ­, Å¾e tyto techniky jsou vyzkouÅ¡eny jen v malÃ½ch a statickÃ½ch svÄtech (vÃ½jimky samozÅejmÄ existujÃ­). Koho zajÃ­mÃ¡, jak bude pÅÃ­bÄh virtuÃ¡lnÃ­ch agentÅ¯ pokraÄovat, nechÅ¥ sleduje vhodnÃ© konference a fÃ³ra. ZejmÃ©na lze doporuÄit konference Intelligent Virtual Agents, Artificial Intelligence for Interactive Digital Entertainment, Computational Intelligence and Games, Computer Animation and Social Agents, Autonomous Agents and Multiagent Systems a Interactive Digital Storytelling. ZajÃ­mavÃ© fÃ³rum je aigamedev.com a relevantnÃ­ Å¾urnÃ¡l IEEE Transactions on Computational Intelligence and AI in Games. Kdo by si chtÄl vyzkouÅ¡et sÃ¡m programovat virtuÃ¡lnÃ­ agenty, mÅ¯Å¾e zaÄÃ­t s projektem Pogamut [16]. Pro Ãºplnost dodejme, Å¾e nÄkterÃ½m problÃ©mÅ¯m jsme se zde nevÄnovali, napÅÃ­klad problematice sociÃ¡lnÃ­ho chovÃ¡nÃ­ nebo modelovÃ¡nÃ­ emocÃ­. NÄkterÃ© z tÄchto tÃ©mat jsou rozvinuty v [2], [10]. DalÅ¡Ã­ komplexnÃ­ ÃºvodnÃ­ texty k problematice virtuÃ¡lnÃ­ch agentÅ¯ jsou [7], [47]. PodÄkovÃ¡nÃ­: Tato kapitola vznikla za podpory projektu CZ.2.17/3.1.00/31162, kterÃ½ je financovÃ¡n EvropskÃ½m SociÃ¡lnÃ­m Fondem, rozpoÄtem ÄeskÃ© Republiky a rozpoÄtem hl. m. Prahy. NÃ¡Å¡ vlastnÃ­ vÃ½zkum tÃ½kajÃ­cÃ­ se virtuÃ¡lnÃ­ch agentÅ¯ je podpoÅen projektem P103/10/1287 (GA ÄR), vÃ½zkumnÃ½m zÃ¡mÄrem MSM0021620838 MÅ MT ÄR, grantem 201/09/H057 a GAUK 21809. Autorem obrÃ¡zkÅ¯ 1-8 je ZbynÄk Krulich, jemuÅ¾ patÅÃ­ velkÃ½ dÃ­k."
205,234,0.552,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","14.1 Ohodnotenie Ãºdajov Na to, aby bolo moÅ¾nÃ© Ãºdaje nej akÃ½m spÃ´sobom rozÄleniÅ¥ do zhlukov, treba tieto zhlukovanÃ© poloÅ¾ky nejakÃ½m spÃ´sobom ohodnotiÅ¥ - urÄiÅ¥ im ÄÃ­selnÃ© skÃ³re, ktorÃ© ich ""opisuje"". NaprÃ­klad: ï· zÃ¡kaznÃ­kov moÅ¾no opÃ­saÅ¥ mnoÅ¾stvom nÃ¡kupov za mesiac ï· filmy moÅ¾no opÃ­saÅ¥ ohodnotenÃ­m od kritikov ï· dokumenty moÅ¾no ohodnotiÅ¥ poÄtom pouÅ¾itÃ½ch urÄitÃ½ch slov. Na ohodnotenie Ãºdajov mÃ´Å¾eme aplikovaÅ¥ mnoÅ¾stvo vzÅ¥ahov, ktorÃ© nÃ¡m kvantitatÃ­vne ohodnotia podobnosÅ¥ resp. vzdialenosÅ¥ Ãºdajov. Vo vÅ¡eobecnosti platÃ­, Å¾e ÄÃ­m sÃº dva objekty od seba vzdialenejÅ¡ie, tÃ½m sÃº si menej podobnÃ©. Na ohodnocovanie mÃ´Å¾eme pouÅ¾iÅ¥ naprÃ­klad: - euklidovskÃº vzdialenosÅ¥ - manhattanovskÃº vzdialenosÅ¥ - korelaÄnÃ½ koeficient (Pearson's r) - kosÃ­nusovÃº podobnosÅ¥ - Jaccardov koeficient - a inÃ©... Existuje mnoho metÃ³d pouÅ¾iteÄ¾nÃ½ch na zhlukovanie Ãºdajov. V tomto texte si bliÅ¾Å¡ie opÃ­Å¡eme dve: metÃ³du hierarchickÃ©ho zhlukovania a metÃ³du K-priemerov (anglicky K-means, slovensky tieÅ¾ K-jadier) zhlukovania."
184,132,0.552,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ZÃ¡kladnÃ½m rÃ¡mcom aplikÃ¡cie je zasielanie sprÃ¡v. Pri rieÅ¡enÃ­ boli vyuÅ¾itÃ© Å¡tyri novÃ© komponenty: Â Vstup objednÃ¡vok: MÃ¡ zodpovednosÅ¥ za prÃ­stup do databÃ¡zy novÃ½ch objednÃ¡vok, zapuzdruje logiku spracovania a zapisuje do radu objednÃ¡vok. Â ValidÃ¡cia: ZabezpeÄuje validÃ¡ciu v spoluprÃ¡ci s existujÃºcim zÃ¡kaznÃ­ckym systÃ©mom. V prÃ­pade chybnej objednÃ¡vky zaznamenÃ¡va informÃ¡cie pomocou logovania chÃ½b. Â UchovÃ¡vanie: Spolupracuje so systÃ©mom objednÃ¡vok a ukladÃ¡ dÃ¡ta objednÃ¡vok. Â Zasielanie sprÃ¡v: VyberÃ¡ sprÃ¡vy z radu, vytvÃ¡ra email a zasiela ho zÃ¡kaznÃ­kovi prostrednÃ­ctvom mailovÃ©ho servera. Zapuzdruje znalosti o formÃ¡te emailu a prÃ­stupu k mailovÃ©mu serveru. KaÅ¾dÃ½ komponent mÃ¡ jasnÃ© zÃ¡vislosti a malÃº mnoÅ¾inu zodpovednostÃ­, vytvÃ¡rajÃºc tak slabo previazanÃ©, vysoko sÃºdrÅ¾nÃ© rieÅ¡enie."
369,136,0.551,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V kapitole uvedieme Å¡pecializovanÃ© vzory pre finanÄnÃº oblasÅ¥. Vyjdeme z prÃ­kladu malej obchodnej firmy, na ktorej ukÃ¡Å¾eme aplikÃ¡cie vÅ¡eobecnÃ½ch analytickÃ½ch vzorov. UvedenÃ½ model obchodnej firmy budeme nÃ¡sledne rozÅ¡irovaÅ¥ pre prÃ­pady neÃºplnÃ©ho plnenia zÃ¡vÃ¤zkov, nÃ¡rokovania a posudzovania zÃ¡vÃ¤zkov a platieb zÃ¡vÃ¤zkov. JednÃ½m zo spÃ´sobov sledovania platieb zÃ¡vÃ¤zkov je vytvorenie ÃºÄtov partnerov. ZovÅ¡eobecnenie ÃºÄtov partnerov vedie k modelu podvojnÃ©ho ÃºÄtovnÃ­ctva. Na zÃ¡ver kapitoly sa budeme venovaÅ¥ cennÃ­kom a poplatkom, ktorÃ© Äasto vedÃº k zloÅ¾itÃ½m dÃ¡tovÃ½m modelom."
115,15,0.551,Algebra a diskrÃ©tna  matematika,"1 METÃDY MATEMATICKÃHO DÃKAZU DEDUKTÃVNY DÃKAZ â¢ ZÃKLADNÃ PRAVIDLÃ USUDZOVANIA â¢ MATEMATICKÃ INDUKCIA V tejto kapitole budeme Å¡tudovaÅ¥ dva dÃ´leÅ¾itÃ© problÃ©my: (1) Za akÃ½ch podmienok je matematickÃ½ dÃ´kaz korektnÃ½ a (2) akÃ© metÃ³dy mÃ´Å¾u byÅ¥ pouÅ¾itÃ© pri konÅ¡trukcii matematickÃ½ch dÃ´kazov. MetÃ³dy dÃ´kazu diskutovanÃ© v tejto kapitole sÃº dÃ´leÅ¾itÃ© nielen pre tvorbu korektnÃ½ch dÃ´kazov v matematike, ale aj v samotnej informatike. V teoretickej informatike sa napr. Å¡tudujÃº rÃ´zne metÃ³dy verifikÃ¡cie korektnosti programu, alebo Äi operaÄnÃ½ systÃ©m je bezpeÄnÃ½. V umelej inteligencii pri odvodzovanÃ­ novÃ½ch faktov z danej databÃ¡zy poznatkov (mnoÅ¾iny vÃ½rokovÃ½ch formÃºl, ktorÃ¡ sa vo vÃ½rokovej logike nazÃ½va teÃ³ria) je dÃ´leÅ¾itÃ© maÅ¥ zabezpeÄenÃ©, aby danÃ¡ databÃ¡za bola konzistentnÃ¡ (korektnÃ¡), teda aby z nej sÃºÄasne nevyplÃ½val nejakÃ½ vÃ½rok a taktieÅ¾ aj jeho negÃ¡cia. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e zvlÃ¡dnutie metÃ³d matematickÃ©ho dÃ´kazu je dÃ´leÅ¾itÃ© nielen v matematike, ale aj v informatike."
367,58,0.551,CESTA K OTVORENEJ VEDE,"Potreba zmeniÅ¥ proces hodnotenia sa odrÃ¡Å¾a hlavne v Sanfranciskej deklarÃ¡cii (DORA) z roku 2013 a jej prvom odporÃºÄanÃ­ â metriky, ako je impakt faktor, ktorÃ© sÃº urÄenÃ© pre Äasopisy, by sa nemali vyuÅ¾Ã­vaÅ¥ na hodnotenie vÃ½skumnÃ­kov. NovÃ© Å¡tandardy hodnotenia vÃ½skumu zaloÅ¾enÃ© na princÃ­poch otvorenej vedy musia: â¢ podporovaÅ¥ neobmedzenÃ© Å¡Ã­renie vedeckÃ½ch vÃ½stupov, â¢ zohÄ¾adÅovaÅ¥ vÅ¡etky aspekty vÃ½skumnej aktivity. NovÃ© Å¡tandardy musia v koneÄnom dÃ´sledku zohÄ¾adÅovaÅ¥ zÃ¡sady otvorenej vedy a presadzovaÅ¥ tieto postupy: â¢ zverejnenie vÃ½sledkov v reÅ¾ime otvorenÃ©ho prÃ­stupu, a to aj vtedy, ak sÃº negatÃ­vne, â¢ publikovanie prÃ¡c, ktorÃ© pozostÃ¡vajÃº z reprodukovateÄ¾nÃ½ch experimentov, â¢ zverejnenie vÃ½skumnÃ½ch dennÃ­kov (laboratÃ³rnych knÃ­h), ktorÃ© popisujÃº jednotlivÃ© fÃ¡zy tvorby vedeckÃ©ho prÃ­stupu, â¢ sprÃ­stupnenie online databÃ¡zy textovÃ½ch a ikonografickÃ½ch zdrojov, zaslanie vÃ½skumÂ­ nÃ½ch protokolov na recenznÃ© konanie pred experimentmi a pod. Reforma hodnotenia vedy (Research Assessment Reform) ZaÄiatkom roku 2022 sa zaÄal proces spoluvytvÃ¡rania navrhovanej reformy hodnotenia vÃ½skumu pod gesciou Science Europe a EurÃ³pskej asociÃ¡cie univerzÃ­t (EUA), v spoluprÃ¡ci s Dr. Karen Stroobants, konzultantkou v oblasti politiky a stratÃ©gie vÃ½skumu, a EurÃ³pskou komisiou. VÃ½sledkom je dokument definujÃºci Å¥aÅ¾iskovÃ© poÅ¾iadavky a princÃ­py, ktorÃ© by mali byÅ¥ aplikovanÃ© pri procese transformovania doterajÅ¡Ã­ch hodnotiacich kritÃ©riÃ­ vedy a vÃ½skumu â Dohoda o reforme hodnotenia vÃ½skumu. Text dohody zohÄ¾adÅuje prÃ­spevky a nÃ¡vrhy viac ako 350 vÃ½skumnÃ½ch organizÃ¡ciÃ­ z viac ako 40 krajÃ­n. OrganizÃ¡cie zapojenÃ© do hodnotenia vÃ½skumu so sÃ­dlom v EurÃ³pe alebo mimo nej sÃº povzbudzovanÃ©, aby podpÃ­sali dohodu a nÃ¡sledne sa pripojili ku koalÃ­cii. SignatÃ¡ri sa zaviaÅ¾u k spoloÄnej vÃ­zii, ktorÃ¡ spoÄÃ­va v tom, Å¾e hodnotenie vÃ½skumu, vÃ½skumnÃ­kov a vÃ½skumnÃ½ch organizÃ¡ciÃ­ uznÃ¡va rÃ´znorodÃ© vÃ½stupy, postupy a Äinnosti, ktorÃ© maximalizujÃº kvalitu a vplyv vÃ½skumu. To si vyÅ¾aduje zaloÅ¾iÅ¥ hodnotenie predovÅ¡etkÃ½m na kvalitatÃ­vnom Ãºsudku, pre ktorÃ½ je ÃºstrednÃ½m bodom vzÃ¡jomnÃ© hodnotenie (âpeer reviewâ), podporenÃ© zodpovednÃ½m pouÅ¾Ã­vanÃ­m kvantitatÃ­vnych ukazovateÄ¾ov."
369,231,0.551,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.6. OperÃ¡cia s ÃºÄtom (zjednoduÅ¡ene) ZÃ¡kladnÃ½ diagram mÃ´Å¾eme rozÅ¡Ã­riÅ¥ o ÄalÅ¡ie Äasti. PrvÃ½m rozÅ¡Ã­renÃ­m sÃº menovÃ© operÃ¡cie, t. j. operÃ¡cie s ÃºÄtom realizovanÃ© v inej mene, neÅ¾ akÃ¡ je mena ÃºÄtu. UvedenÃ© rozÅ¡Ã­renie moÅ¾no do modelu priamoÄiaro doplniÅ¥ aplikovanÃ­m vzoru Platba v zahraniÄnej mene na obr. 3.25. MenovÃ½mi operÃ¡ciami na bankovom ÃºÄte vedenom v domÃ¡cej mene sÃº naprÃ­klad: ï· Prevod z ÃºÄtu v inej mene ako je mena ÃºÄtu â pri tejto operÃ¡cii sa pouÅ¾ije kurz devÃ­za nÃ¡kup (banka nakupuje doÅ¡lÃ© elektronickÃ© zahraniÄnÃ© peniaze klientovi). ï· Vklad hotovosti v inej mene ako je mena ÃºÄtu â pouÅ¾ije sa kurz valuta nÃ¡kup (banka nakupuje zahraniÄnÃº hotovosÅ¥ od klienta). ï· VÃ½ber hotovosti z ÃºÄtu â pouÅ¾ije sa kurz valuta predaj (banka predÃ¡va zahraniÄnÃº hotovosÅ¥ klientovi). UvedenÃ© pravidlÃ¡ vÅ¡ak neplatia absolÃºtne. NaprÃ­klad pri vysokej sume operÃ¡cie mÃ¡ klient zvyÄajne moÅ¾nosÅ¥ si dohodnÃºÅ¥ individuÃ¡lny kurz, ktorÃ½ je, podÄ¾a typu operÃ¡cie, niekde v intervale predaj-stred (pri predaji cudzej meny bankou), resp. nÃ¡kup-predaj (pri nÃ¡kupe cudzej meny bankou). Podobne mÃ´Å¾e maÅ¥ vÃ½znamnÃ½ klient alebo zamestnanec banky vÃ½hodnejÅ¡Ã­ kurz inÃ½ ako je uvedenÃ½ v Å¡tandardnom kurzovom lÃ­stku. Model na obr. 3.25 je potrebnÃ© rozÅ¡Ã­riÅ¥ o moÅ¾nosÅ¥ pouÅ¾itia dvojice kurzov (alebo jednÃ©ho krÃ­Å¾ovÃ©ho kurzu, ktorÃ½ vznikne ich kombinÃ¡ciou). Dvojica kurzov sa vyuÅ¾ije v prÃ­pade, ak je ÃºÄet klienta vedenÃ½ v inej mene ako domÃ¡ca mena a operÃ¡cia je v inej mene ako je domÃ¡ca mena a aj inej mene ako mena ÃºÄtu. V takomto prÃ­pade sa suma operÃ¡cie najprv prevedie na sumu v domÃ¡cej mene a tÃ¡ sa nÃ¡sledne prevedie na sumu v mene ÃºÄtu. NaprÃ­klad pri vklade hotovosti v zahraniÄnej mene, ktorÃ¡ je inÃ¡ ako je mena ÃºÄtu, ktorÃ½ je vedenÃ½"
115,59,0.551,Algebra a diskrÃ©tna  matematika,"Ako vidieÅ¥ z uvedenÃ½ch prÃ­kladov, dÃ´kazy formÃºl obsahujÃºcich kvantifikÃ¡tory sÃº zmesou aplikÃ¡ciÃ­ schÃ©m usudzovania tak z vÃ½rokovej, ako aj predikÃ¡tovej logiky. TÃ¡to skutoÄnosÅ¥ vyplÃ½va z faktu, Å¾e predikÃ¡tovÃ¡ logika je vlastne zovÅ¡eobecnenÃ­m vÃ½rokovej logiky, ktorÃ¡ je âvnorenÃ¡â do predikÃ¡tovej logiky; vÅ¡etky zÃ¡kony vÃ½rokovej logiky sÃº aj zÃ¡konmi predikÃ¡tovej logiky."
184,291,0.551,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"VÃ¤ÄÅ¡ina sÃºborovÃ½ch systÃ©mov pouÅ¾Ã­va nejakÃº formu dvojÃºrovÅovÃ©ho pomenovania sÃºborov a adresÃ¡rov. SÃºbory (a ostatnÃ© objekty) majÃº symbolickÃ© menÃ¡, ako naprÃ­klad program.c (niektorÃ© operaÄnÃ© systÃ©my priamo vynucujÃº zloÅ¾enie mena z dvoch ÄastÃ­) pre jednoduchÃ© pouÅ¾itie pouÅ¾Ã­vateÄ¾mi, majÃº vÅ¡ak tieÅ¾ internÃ© â binÃ¡rne menÃ¡ pre pouÅ¾Ã­vanie systÃ©mom samotnÃ½m. AdresÃ¡re v skutoÄnosti prevÃ¡dzajÃº mapovanie medzi tÃ½mito dvomi ÃºrovÅami pomenovania (Tanenbaum, 2001, Levy & Silberschatz, 1991). Pre pouÅ¾Ã­vateÄ¾ov a programy je pohodlnÃ© pouÅ¾Ã­vanie symbolickÃ½ch (ASCII) mien, pre pouÅ¾itie systÃ©mom samotnÃ½m sÃº vÅ¡ak tieto menÃ¡ prÃ­liÅ¡ dlhÃ© a Å¥aÅ¾kopÃ¡dne. V prÃ­pade, Å¾e pouÅ¾Ã­vateÄ¾ otvorÃ­ sÃºbor alebo sa naÅ inak odkazuje pouÅ¾itÃ­m"
236,32,0.551,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"PoÄas pÃ­sania dokumentu pravdepodobne nÃ¡jdete miesta, kde samotnÃ½ zÃ¡kladnÃ½ LATEX nemÃ´Å¾e vyrieÅ¡it vÃ¡Å¡ problÃ©m. KeÄ chcete do vÃ¡Å¡ho dokumentu vloÅ¾iÅ¥ grafiku, farebnÃ½ text alebo zdrojovÃ½ text zo sÃºboru, musÃ­te zvÃ¤ÄÅ¡iÅ¥ schopnosti LATEXu. TakÃ©to rozÅ¡Ã­renia sa nazÃ½vajÃº balÃ­ky makier. Tieto balÃ­ky sa aktivujÃº pomocou prÃ­kazu \usepackage[voÄ¾by]{balÃ­k }"
205,61,0.551,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","ArchitektÃºra webu k webovÃ½m strÃ¡nkam a ÄalÅ¡Ã­m zdrojom na webe. PrvÃ¡ verzia (verzia 0.9) tohto protokolu vznikla v roku 1991. TÃ¡to verzia poskytovala len najzÃ¡kladnejÅ¡ie funkcie: umoÅ¾Åoval na zÃ¡klade URL adresy zÃ­skaÅ¥ odpoveÄ. V roku 1996 vznikla verzia 1.0, ktorÃ¡ tento protokol obohatila o mnoÅ¾stvo funkciÃ­. Jednou z najdÃ´leÅ¾itejÅ¡Ã­ch bola hlaviÄka, ktorÃ¡ poskytuje informÃ¡cie o kaÅ¾dej sprÃ¡ve, ktorÃ¡ sa pomocou tohto protokolu prenÃ¡Å¡a. To umoÅ¾nilo posielaÅ¥ pomocou protokolu ÄalÅ¡ie formÃ¡ty Ãºdajov, ako sÃº naprÃ­klad obrÃ¡zky a podobne. V tejto verzii pribudli tieÅ¾ stavovÃ© kÃ³dy, ktorÃ© umoÅ¾nili informovaÅ¥ o rÃ´znych stavoch, ktorÃ© nastali pri spracovÃ¡vanÃ­ poÅ¾iadavky ako naprÃ­klad kÃ³d 200, ktorÃ½ oznaÄuje bezchybne vykonanÃ½ dopyt, kÃ³dy skupiny 3xx, ktorÃ© oznaÄujÃº rÃ´zne typy presmerovania, skupiny 4xx, ktorÃ© oznaÄujÃº problÃ©my s prÃ­stupom alebo kÃ³dy skupiny 5xx, ktorÃ© oznaÄujÃº problÃ©my na strane servera. Verzia 1.1 z roku 1999 sa stala Å¡tandardom, ktorÃ½ sa pouÅ¾Ã­va dodnes a pridala do protokolu ÄalÅ¡ie populÃ¡rne vlastnosti, ako je naprÃ­klad kompresia odpovedÃ­. 3.3.1 ModernÃ© webovÃ© protokoly Od roku 1999, keÄ vznikla aktuÃ¡lne pouÅ¾Ã­vanÃ¡ verzia HTTP protokolu, sa pri vytvÃ¡ranÃ­ webovÃ©ho obsahu a pristupovanÃ­ k nemu veÄ¾a zmenilo. S nÃ¡stupom takzvanÃ©ho Webu 2.0 sa vo veÄ¾kej miere zaÄala pouÅ¾Ã­vaÅ¥ technolÃ³gia AJAX, ktorÃ¡ sÃ­ce nie je sÃºÄasÅ¥ou HTTP protokolu, ale vÃ½znamne zmenila spÃ´sob, ako pracujeme s webovÃ½mi strÃ¡nkami. S pouÅ¾itÃ­m AJAXu je moÅ¾nÃ© dynamicky meniÅ¥ obsah strÃ¡nky po tom, ako bola po prvÃ½krÃ¡t vykreslenÃ¡, Äo umoÅ¾nilo vznik mnoÅ¾stva zaujÃ­mavÃ½ch aplikÃ¡ciÃ­ a sluÅ¾ieb. V sÃºÄasnosti sa do popredia dostÃ¡va mnoÅ¾stvo ÄalÅ¡Ã­ch protokolov, ktorÃ© poskytujÃº ÄalÅ¡ie moÅ¾nosti pre zobrazovanie obsahu a pre interakciu s obsahom. V tejto Äasti opisujeme len krÃ¡tky vÃ½ber najpouÅ¾Ã­vanejÅ¡Ã­ch z tÃ½chto protokolov: ï· WebSockets protokol naprÃ­klad umoÅ¾Åuje obojsmernÃº komunikÃ¡ciu medzi klientom a serverom v reÃ¡lnom Äase. KomunikÃ¡cia sa zabezpeÄuje prostrednÃ­ctvom stÃ¡le otvorenÃ©ho spojenia, Äo vÃ½razne zniÅ¾uje Äasy potrebnÃ© na doruÄenie jednotlivÃ½ch sprÃ¡v. Tento protokol si naÅ¡iel uplatnenie v rÃ´znych aplikÃ¡ciÃ¡ch, ktorÃ© vyÅ¾adujÃº rÃ½chlu komunikÃ¡ciu, od rÃ´znych sluÅ¾ieb na posielanie sprÃ¡v cez sluÅ¾by na online editovanie dokumentov aÅ¾ po rÃ´zne hry. ï· WebGL je protokol, ktorÃ½ umoÅ¾Åuje v prehliadaÄi zobrazovaÅ¥ zloÅ¾itÃ© grafickÃ© objekty, priÄom tieto sa vytvÃ¡rajÃº na strane klienta s pouÅ¾itÃ­m jeho grafickej karty. Tento protokol sa pouÅ¾Ã­va v rÃ´znych grafickÃ½ch aplikÃ¡ciÃ¡ch ale naprÃ­klad aj pre vykresÄ¾ovanie mÃ¡p. ï· WebRTC je protokol a rozhranie pre jazyk javascript, ktorÃ© umoÅ¾ÅujÃº tvorbu aplikÃ¡ciÃ­, ktorÃ© vyuÅ¾Ã­vajÃº komunikÃ¡ciu (audio, video) v reÃ¡lnom Äase. Pomocou tohto rozhrania je moÅ¾nÃ© pomerne jednoducho vytvoriÅ¥ aplikÃ¡ciu, ktorÃ¡ vyuÅ¾Ã­va audiovizuÃ¡lnu komunikÃ¡ciu medzi jej pouÅ¾Ã­vateÄ¾mi."
130,450,0.551,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Ãlohou ontolÃ³giÃ­ je reprezentovaÅ¥ znalosti takÃ½m spÃ´sobom, aby bolo moÅ¾nÃ© komunikovaÅ¥ medzi rÃ´znymi strojmi a medzi strojmi a Ä¾uÄmi na Ãºrovni znalostÃ­, na rozdiel od sÃºÄasnosti, kedy vzÃ¡jomnÃ¡ komunikÃ¡cia prebieha na Ãºrovni Ãºdajov.18 TÃ¡to kapitola sa snaÅ¾Ã­ priblÃ­Å¾iÅ¥ ontolÃ³gie a prestaviÅ¥ ich najmÃ¤ tak, ako ich v priebehu Äasu chÃ¡pali âinformaticiâ, ako sa menila ich definÃ­cia, akÃ© typy ontolÃ³giÃ­ poznÃ¡me, resp. ako ich moÅ¾no a podÄ¾a akÃ½ch kritÃ©riÃ­ rozdeliÅ¥."
76,263,0.551,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"5.1.4 HÃ¡dÅ¾eme riadnou hracou kockou dovtedy, kÃ½m nepadne Å¡estka 20-krÃ¡t. S akou pravdepodobnosÅ¥ou budeme hÃ¡dzaÅ¥ aspoÅ 151-krÃ¡t? 5.1.5 PravdepodobnosÅ¥ udalosti A v pokuse sa rovnÃ¡ 0.6. UrÄte pravdepodobnosÅ¥ toho, Å¾e v sÃ©rii 200 opakovanÃ­ pokusu sa udalosÅ¥ A objavÃ­ aspoÅ 111-krÃ¡t, a pritom menej ako 130krÃ¡t."
236,38,0.551,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Veci, ktorÃ© potrebujete vedieÅ¥ .idx Ak vÃ¡Å¡ dokument obsahuje register. LATEX sem ukladÃ¡ vÅ¡etky slovÃ¡, ktorÃ© sa majÃº objaviÅ¥ v registri. Tento sÃºbor musÃ­ byÅ¥ spracovanÃ½ programom makeindex. ÄalÅ¡iu informÃ¡ciu o tvorbe indexu nÃ¡jdete v oddiele 4.4 na strane 63. .ind Je to vÃ½sledok spracovania sÃºboru .idx pripravenÃ½ na zaradenie do vÃ¡Å¡ho dokumentu poÄas nasledujÃºceho kompilaÄnÃ©ho cyklu. .ilg SÃºbor hlÃ¡senÃ­ o priebehu programu makeindex."
393,129,0.551,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"kde d je tlmiaci faktor v rozmedzÃ­ od 0 po 1 a c(p) je poÄet vÃ½stupnÃ½ch odkazov na strÃ¡nke q. IntuitÃ­vne sa dÃ¡ povedaÅ¥, Å¾e strÃ¡nka bude maÅ¥ vysokÃ© PageRank skÃ³re, ak na Åu odkazuje veÄ¾a strÃ¡nok tieÅ¾ s vysokÃ½m PageRank hodnotenÃ­m. Algoritmus PageRank sa zakladÃ¡ na modeli nÃ¡hodnÃ©ho chodenia â skÃ³re strÃ¡nky je ÃºmernÃ© pravdepodobnosti, Å¾e pouÅ¾Ã­vateÄ¾, ktorÃ½ nÃ¡hodne klikÃ¡ na odkazy, sa dostane na tÃºto strÃ¡nku. Algoritmus sa ÃºspeÅ¡ne pouÅ¾Ã­va vo vyhÄ¾adÃ¡vacom systÃ©me Google. Jeho hlavnou nevÃ½hodou je vysokÃ¡ vÃ½poÄtovÃ¡ nÃ¡roÄnosÅ¥. HITS (hyper-link-induced topic search) algoritmus sa podobÃ¡ algoritmu PageRank. V algoritme HITS sa strÃ¡nky obsahujÃºce informÃ¡cie relevantnÃ© k prÃ­sluÅ¡nej problÃ©movej oblasti alebo vyhÄ¾adÃ¡vaciemu dotazu oznaÄujÃº ako autoritatÃ­vne strÃ¡nky. Prepojovacie strÃ¡nky nemusia byÅ¥ autoritatÃ­vnymi strÃ¡nkami, ale obsahujÃº odkazy na inÃ© autoritatÃ­vne strÃ¡nky. StrÃ¡nka, na ktorÃº sa odkazuje veÄ¾a inÃ½ch strÃ¡nok, by mala byÅ¥ dobrou autoritatÃ­vnou strÃ¡nkou. StrÃ¡nka, ktorÃ¡ obsahuje odkazy na veÄ¾a inÃ½ch strÃ¡nok, by mala byÅ¥ dobrou prepojovacou strÃ¡nkou. Na zÃ¡klade tÃ½chto myÅ¡lienok HITS algoritmus poÄÃ­ta dve skÃ³re pre kaÅ¾dÃº strÃ¡nku:"
76,51,0.551,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Teraz je vÃ½sledkom neusporiadanÃ¡ dvojica farieb. Farby sÃº tri, ale objektov je 6. KeÄ pouÅ¾ijeme opÃ¤Å¥ pomocnÃ© indexovanie, tak je zrejmÃ©, Å¾e kÃ½m k vÃ½sledku (c-c) vedie len jedna dvojica ÄervenÃ½ch (sÃº tam len dve ÄervenÃ©), tak k vÃ½sledku (b-c) vedie 6 prvotnÃ½ch vÃ½sledkov: {b1, c1}, {b1, c2}, {b2, c1}, {b2, c2}, {b3, c1}, {b3, c2}. Tentoraz prvotnÃ© vÃ½sledky chÃ¡peme ako neusporiadanÃ© dvojice. PomocnÃ½m homogÃ©nnym priestorom je priestor vÅ¡etkÃ½ch moÅ¾nÃ½ch neusporiadanÃ½ch dvojÃ­c. Zrejme mÃ¡ 15 (= C(6, 2) ) bodov. 1.3.7 PrÃ­klad. NÃ¡hodnÃ½ pokus spoÄÃ­va v hÃ¡dzanÃ­ mincou dovtedy, kÃ½m nepadne znak (akonÃ¡hle na minci padne znak, pokus skonÄil). Navrhnime priestor moÅ¾nÃ½ch vÃ½sledkov tak, aby sme mohli modelovaÅ¥ udalosti a) A â v pokuse sa bude hÃ¡dzaÅ¥ aspoÅ tri razy, b) B â poÄet hodov v pokuse bude pÃ¡rne ÄÃ­slo. UrÄime pravdepodobnoti jednotlivÃ½ch vÃ½sledkov a nÃ¡jdime P(A), resp. P(B). RieÅ¡enie. Teraz mnoÅ¾ina moÅ¾nÃ½ch vÃ½sledkov pokusu je nekoneÄnÃ¡ (ale spoÄÃ­tateÄ¾nÃ¡), pretoÅ¾e ... } = { (Z) (C Z) (C C Z) (C C C Z) â¦ (C C â¦ C Z) â¦ }. Pre udalosti mÃ¡me"
393,101,0.55,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"XTROS dokÃ¡zal vygenerovaÅ¥ obaÄ¾ovaÄe pre 8 z 10 strÃ¡nok. Pre 2 z nich nebolo generovanie ÃºspeÅ¡nÃ©, nakoÄ¾ko informÃ¡cie na strÃ¡nkach sa neposkytovali vo forme znaÄkovanÃ½ch dokumentov, ale vo forme tabuÄ¾ky. VÃ½sledky extrahovania dosiahli pri vÃ¤ÄÅ¡ine 100% ÃºspeÅ¡nosÅ¥. ProblÃ©my robili najmÃ¤ neÅ¡tandardnÃ© prÃ­pady, naprÃ­klad: Â â6 (full) 1(half) Bathsâ â zÃ¡znamy neboli vo formÃ¡te ÄÃ­sel, ako sa oÄakÃ¡valo, Â â- Beds, - Bathsâ â zÃ¡znamy neobsahovali Å¾iadne relevantnÃ© hodnoty, Â â1 Bathâ â znaÄka na extrahovanej strÃ¡nke sa odliÅ¡ovala od znaÄky z testovacÃ­ch strÃ¡nok (obaÄ¾ovaÄ oÄakÃ¡val âBathsâ)."
265,170,0.55,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"RozmenenÃ© na drobnÃ© (pozor: nejde o vÅ¡etky moÅ¾nÃ© typy dokumentÃ¡cie): vÃ½sledkom analÃ½zy je najskÃ´r opis problÃ©movej oblasti, cieÄ¾ov a biznis procesov, domÃ©novÃ½ model. V Äasti Å¡pecifikÃ¡cie poÅ¾iadaviek sÃº vÃ½sledkom zoznamy poÅ¾iadaviek, modely pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov, akceptaÄnÃ© testy. V nÃ¡vrhu vytvÃ¡rame naprÃ­klad opisy architektÃºry a v implementÃ¡cii sa snaÅ¾Ã­me dokumentovaÅ¥ samotnÃ½ zdrojovÃ½ kÃ³d komentÃ¡rmi a v referenÄnÃ½ch prÃ­ruÄkÃ¡ch. V etape nasadenia musÃ­me dokumentovaÅ¥ vÃ½sledky akceptaÄnÃ½ch testov, ako aj postupy inÅ¡talÃ¡cie, vytvÃ¡rame tieÅ¾ pouÅ¾Ã­vateÄ¾skÃ© prÃ­ruÄky. Po nasadenÃ­ (etapa prevÃ¡dzky a ÃºdrÅ¾by) zasa zaznamenÃ¡vame vÃ½skyt chÃ½b a poÅ¾iadaviek na zmeny."
94,288,0.55,Sprievodca svetom vedeckÃ©ho publikovania,"diela z vlastnÃ½ch fondov, ak ÃºÄelom vyhotovenia rozmnoÅ¾eniny je uspokojenie poÅ¾iadavky fyzickej osoby, ktorÃ¡ ju pouÅ¾ije na vzdelÃ¡vacie alebo vedecko-vÃ½skumnÃ© ÃºÄely vÃ½hradne v priestoroch kniÅ¾nice alebo archÃ­vu,"
240,529,0.55,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"z hlavnej funkcie main(), ktorÃ¡ bude otvÃ¡raÅ¥ sÃºbory s nÃ¡zvami zapas_i.txt pre i idÃºce od 1 do nekoneÄna, priÄom pre kaÅ¾dÃ½ ÃºspeÅ¡ne otvorenÃ½ sÃºbor zavolÃ¡ funkciu nacitaj_zapas(), ktorÃ¡ Ãºdaje naÄÃ­ta a spracuje do zÃ¡znamov o hrÃ¡Äoch (h[]). PredpokladÃ¡me, Å¾e sa turnaja zÃºÄastnilo nenulovÃ½ poÄet hrÃ¡Äov a preto alokujeme poÄiatoÄnÃº kapacitu poÄ¾a (h[]) pre 8 hrÃ¡Äov. Nakoniec funkcia vypÃ­Å¡e vÃ­Å¥aza (resp. vÃ­Å¥azov). ImplementÃ¡cia hlavnej funkcie main() je takÃ¡to:"
76,139,0.55,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.3.2 Uistite sa, Å¾e ku vÅ¡etkÃ½m rozdeleniam z ÄlÃ¡nku 2.2 viete nÃ¡jsÅ¥ prÃ­sluÅ¡nÃ© distribuÄnÃ© funkcie. V kaÅ¾dej situÃ¡cii overte, Å¾e zÃ­skanÃ¡ funkcia mÃ¡ vlastnosti uvedenÃ© vo vete 2.3.3. 2.3.3 Uistite sa, Å¾e ku vÅ¡etkÃ½m rozdeleniam z ÄlÃ¡nku 2.2 viete nÃ¡jsÅ¥ kvantily, t. j. viete urÄiÅ¥ tak, aby platilo: ( ) = . V ktorÃ½ch ÃºlohÃ¡ch, teda pre ktorÃ© rozdelenia, je problÃ©m rieÅ¡iÅ¥ rovnicu ( ) = ? V ÃºlohÃ¡ch 2.2.6 a 2.2.7 ide o kubickÃ© rovnice (algebraickÃ© rovnice tretieho stupÅa), ktorÃ© vieme rieÅ¡iÅ¥ len numerickÃ½mi metÃ³dami. 2.3.4 Funkcia"
195,10,0.55,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄacie systÃ©my zaloÅ¾enÃ© na zdrojovom kÃ³de vÃ½ber podmnoÅ¾iny relevantnÃ½ch dÃ¡t z prvej fÃ¡zy, urÄenie ich podobnosti, frekvencie Äi skÃ³re z hÄ¾adiska vhodnosti odporÃºÄania [4, 6, 12, 17, 24]. 1.1.6 DetailnÃ½ vstup/vÃ½stup Z hÄ¾adiska interakcie pouÅ¾Ã­vateÄ¾a s odporÃºÄacÃ­m systÃ©mom nÃ¡s vo fÃ¡ze implementÃ¡cie zaujÃ­ma primÃ¡rne zvolenie konkrÃ©tnych vstupov a vÃ½stupov metÃ³dy. Zvolenie konkrÃ©tneho vstupu sa skladÃ¡ z voÄ¾by spÃ´sobu, akÃ½m z vyhÄ¾adÃ¡vacieho dopytu pouÅ¾Ã­vateÄ¾a vyberieme entity zdrojovÃ©ho kÃ³du, ktorÃ© sÃº relevantnÃ© pre pouÅ¾Ã­vateÄ¾ovu aktuÃ¡lnu Ãºlohu a ktorÃ© sa nÃ¡sledne dajÃº dobre pouÅ¾iÅ¥ pre samotnÃ© odporÃºÄanie. VoÄ¾bu konkrÃ©tneho vÃ½stupu chÃ¡peme tak, Å¾e nÃ¡s zaujÃ­ma konkrÃ©tny jednotlivÃ½ vÃ½sledok. Teda neodporÃºÄame vÅ¡etky potenciÃ¡lne vhodnÃ© poloÅ¾ky, ale len niekoÄ¾ko najrelevantnejÅ¡Ã­ch. Takto sa vyhneme hrozbe zahltenia pouÅ¾Ã­vateÄ¾a informÃ¡ciami, kedy by vÃ½sledky odporÃºÄania v nevhodne zvolenom mnoÅ¾stve mohli spÃ´sobovaÅ¥ eÅ¡te vÃ¤ÄÅ¡ie zahltenie, ako bez ich pouÅ¾itia. Riskujeme sÃ­ce vynechanie niektorÃ©ho z relevantnÃ½ch vÃ½sledkov, avÅ¡ak vyplÃ½vajÃºce vÃ½hody sÃº vÃ½razne prijateÄ¾nejÅ¡ie. Do mnoÅ¾iny vÃ½sledkov totiÅ¾ zahrnieme skÃ´r relevantnÃ© odporÃºÄania. Tu v praxi rieÅ¡ime skÃ´r problÃ©my s prioritizÃ¡ciou poloÅ¾iek ako so zahltenÃ­m pouÅ¾Ã­vateÄ¾a. 1.1.7 Podpora Po dokonÄenÃ­ implementÃ¡cie odporÃºÄacieho systÃ©mu nasleduje Å¡tandardne validÃ¡cia vytvorenÃ©ho produktu. Pri vÃ½bere spÃ´sobu overenia jeho vlastnostÃ­ nÃ¡s z hÄ¾adiska samotnÃ©ho odporÃºÄacieho systÃ©mu zaujÃ­ma prÃ­nos pouÅ¾Ã­vateÄ¾ovi, ako mu nejakÃ½m spÃ´sobom napomohol pri rieÅ¡enÃ­ Ãºloh. V prvom rade v tomto kroku hÄ¾adÃ¡me samotnÃ½ spÃ´sob overenia, ktorÃ½m vieme kvantifikovaÅ¥, ako dobre systÃ©m vykonÃ¡va urÄenÃº Ãºlohu. Na to sa typicky vyuÅ¾Ã­vajÃº prÃ­padovÃ© Å¡tÃºdie [11, 15, 19] Äi porovnania s inÃ½mi systÃ©mami [3, 7, 11, 12, 13], respektÃ­ve voÄi situÃ¡cii bez odporÃºÄaÄa [12]. TaktieÅ¾ je moÅ¾nÃ© vyuÅ¾iÅ¥ A/B testovanie, simulÃ¡cie pouÅ¾itia systÃ©mu Äi kontrolovanÃ© experimenty so zÃ¡vislÃ½mi a nezÃ¡vislÃ½mi premennÃ½mi. Po identifikovanÃ­ spÃ´sobu overenia meriame rozliÄnÃ© vlastnosti, pomocou ktorÃ½ch stanovujeme kvalitu odporÃºÄania [4, 15, 24]. Meriame a sledujeme uÅ¾itoÄnosÅ¥ odporÃºÄania, teda mieru, akou rada prispela k vyrieÅ¡eniu Ãºlohy [6, 12, 16]. S tÃ½m sÃºvisÃ­ tieÅ¾ Äasto meranÃ¡ schopnosÅ¥ dokonÄiÅ¥ Ãºlohu na zÃ¡klade odporÃºÄania a taktieÅ¾ rÃ½chlosÅ¥ vyrieÅ¡enia Ãºlohy [16]. OdporÃºÄanie vÅ¡ak mÃ´Å¾e napomÃ¡haÅ¥ aj inÃ½m spÃ´sobom a preto je v urÄitÃ½ch prÃ­padoch vhodnÃ© meraÅ¥ skÃ´r mieru intelektuÃ¡lnej nÃ¡mahy pouÅ¾Ã­vateÄ¾a, kedy odporÃºÄacÃ­ systÃ©m pouÅ¾Ã­vateÄ¾ovi pomÃ¡ha znÃ­Å¾iÅ¥ rozsah nÃ¡mahy nutnej pre dokonÄenie Ãºlohy. VyrieÅ¡enie Ãºlohy sa vo vÃ¤ÄÅ¡ine prÃ­padov dÃ¡ dosiahnuÅ¥ rozliÄnÃ½mi spÃ´sobmi a rovnako finÃ¡lne rieÅ¡enie sa mÃ´Å¾e znaÄne lÃ­Å¡iÅ¥. RieÅ¡enia tieÅ¾ mÃ´Å¾u dosahovaÅ¥ rozdielnu mieru kvality Äi sprÃ¡vnosti. Oprava chyby mÃ´Å¾e spÃ´sobiÅ¥ chybnÃ© sprÃ¡vanie v inej situÃ¡cii, prÃ­padne mÃ´Å¾e neÃºmerne spomaliÅ¥ vÃ½kon systÃ©mu. Preto je v istÃ½ch situÃ¡ciÃ¡ch vhodnÃ© validovaÅ¥ mieru sprÃ¡vnosti rieÅ¡enÃ­ dosiahnutÃ½ch na zÃ¡klade odporÃºÄanÃ­. Okrem sprÃ¡vnosti je moÅ¾nÃ© meraÅ¥ tieÅ¾ relevanciu odporÃºÄania. V tomto prÃ­pade vÅ¡ak ide o subjektÃ­vnu metriku, ktorÃ¡ sa nedÃ¡ vyhodnotiÅ¥ kvantitatÃ­vne."
205,136,0.55,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Algoritmus HITS postupuje v tÃ½chto krokoch: 1. Zober strÃ¡nky najrelevantnejÅ¡ie pre danÃ½ vyhÄ¾adÃ¡vacÃ­ dopyt â koreÅovÃ¡ mnoÅ¾ina (pozri ObrÃ¡zok 28) 2. Zober strÃ¡nky, ktorÃ© sÃº prepojenÃ© s koreÅovou mnoÅ¾inou â zÃ¡kladnÃ¡ mnoÅ¾ina (pozri ObrÃ¡zok 28) 3. PoÄÃ­taj iteratÃ­vne hodnoty autorÃ­t a centier nad vÅ¡etkÃ½mi uzlmi v podgrafe 4. Na konci mÃ¡ kaÅ¾dÃ½ uzol hodnotu autority a centra"
76,271,0.549,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"5.2.2 Riadnou hracou kockou hodÃ­me 36-krÃ¡t. UrÄte (resp. aproximujte) pravdepodobnosÅ¥ toho, Å¾e sÃºÄet bodov, ktorÃ© padnÃº v pokuse, bude aspoÅ 144. NÃ¡jdite chybu v Ãºvahe: PretoÅ¾e 144/36 = 4, priÄom na kocke padnÃº aspoÅ 4 body s pravdepodobnosÅ¥ou 0.5, tak (vÄaka nezÃ¡vislosti) hÄ¾adanÃ¡ pravdepodobnosÅ¥ sa rovnÃ¡ = 1.46 5.2.3 Teraz uvaÅ¾ujme o (hypoteticky) faloÅ¡nej kocke, na ktorej jednotlivÃ© steny s bodmi 1, 2, 3, ..., 6 padajÃº s pravdepodobnosÅ¥ami: (0.1, 0.1, 0.1, 0.1, 0.2, 0.4). Predstavme si, Å¾e takouto kockou hodÃ­me 36-krÃ¡t. UrÄte (resp. aproximujte) pravdepodobnosÅ¥ toho, Å¾e sÃºÄet bodov, ktorÃ© padnÃº v pokuse, bude aspoÅ 144. 5.2.4 Å½ivotnosÅ¥ batÃ©rie istÃ©ho typu je veliÄina so strednou hodnotou 55 (hod.) a smerodajnou odchÃ½lkou 8 (hod.). KeÄ batÃ©ria doÅ¾ije, je vzÃ¡pÃ¤tÃ­ nahradenÃ¡ novou rovnakÃ©ho typu. Aproximujte pravdepodobnosÅ¥ toho, Å¾e 20 batÃ©riÃ­ nÃ¡m postaÄÃ­ na aspoÅ 1000 hodÃ­n prÃ¡ce. 5.2.5 Nech ( ) je postupnosÅ¥ nezÃ¡vislÃ½ch veliÄÃ­n s rozdelenÃ­m N(0, 1). Vieme, Å¾e veliÄiny uÅ¾ nemajÃº normÃ¡lne rozdelenie (pozri 2.5.11). ZdÃ´vodnite, preÄo nÃ¡hodnÃ© veliÄiny majÃº pre veÄ¾kÃ© pribliÅ¾ne normÃ¡lne rozdelenie. OtÃ¡zka znie: AkÃ© sÃº parametre toho normÃ¡lneho rozdelenia? (VyuÅ¾ite fakt, ktorÃ½ sme nedokazovali: Ak N(0, 1), tak E( ) = 3)."
111,34,0.549,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Karty SkÃ´r ako zaÄnete vytvÃ¡raÅ¥ karty, mali by ste si zostaviÅ¥ zoznam vÅ¡etkÃ½ch poloÅ¾iek, funkciÃ­, obsahu atÄ., ktorÃ© povaÅ¾ujete za dÃ´leÅ¾itÃ© pre ÃºÄely vÃ¡Å¡ho triedenia kariet. KeÄ zhromaÅ¾dÃ­te vÅ¡etky pojmy, mÃ´Å¾ete zaÄaÅ¥ konkretizovaÅ¥, priÄom sa najprv zamerajte na najdÃ´leÅ¾itejÅ¡ie aspekty zo zoznamu. Po urÄitom spresnenÃ­ by ste mali byÅ¥ schopnÃ­ zÃ­skaÅ¥ karty, ktorÃ© vziÅ¡li z pÃ´vodnÃ½ch konceptov. NiekoÄ¾ko nÃ¡vrhov, kde hÄ¾adaÅ¥ nÃ¡pady: â¢ Od vaÅ¡ich kolegov â Brainstormujte. VÅ¡etko, Äo chcete, aby bolo na vaÅ¡ej webovej strÃ¡nke, mÃ´Å¾e byÅ¥ dÃ´leÅ¾itÃ©. â¢ Od vaÅ¡ich stakeholderov â NiektorÃ­ z vaÅ¡ich stakeholderov uÅ¾ mÃ´Å¾u maÅ¥ zoznam vÅ¡etkÃ©ho, Äo chcÃº maÅ¥ na webovej strÃ¡nke. â¢ Z vaÅ¡ej spoloÄnosti â PouÅ¾ite vÅ¡etky dokumenty, ktorÃ© mÃ¡te k dispozÃ­cii, napr.: softvÃ©rovÃº Å¡pecifikÃ¡ciu vaÅ¡ej webovej strÃ¡nky/aplikÃ¡cie/produktu, obchodnÃ½ plÃ¡n, organizaÄnÃº schÃ©mu, sÃºpis produktov. â¢ Z vaÅ¡ej webovej strÃ¡nky â Urobte obsahovÃ½ audit vaÅ¡ej existujÃºcej webovej strÃ¡nky a vyberte z neho niekoÄ¾ko zmysluplnÃ½ch poloÅ¾iek. â¢ Od vaÅ¡ich pouÅ¾Ã­vateÄ¾ov â Zozbierajte spÃ¤tnÃº vÃ¤zbu od vaÅ¡ich pouÅ¾Ã­vateÄ¾ov o tom, akÃ½ obsah a funkcie by chceli vidieÅ¥. â¢ Od konkurencie â PreÅ¡tudujte webovÃ© strÃ¡nky inÃ½ch podobnÃ½ch spoloÄnostÃ­, najmÃ¤ svojich konkurentov."
240,77,0.549,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"(veÄ¾kosÅ¥ 1 bajt). V rÃ¡mci jednÃ©ho prÃ­kazu sa premennÃ© menÅ¡ej veÄ¾kosti implicitne typovo prevedÃº na typ s najvÃ¤ÄÅ¡ou veÄ¾kosÅ¥ou vo vÃ½raze (v tomto prÃ­pade int), a teda sÃºÄet a+k (44+216 = 260) bude bez straty informÃ¡cie priradenÃ½ do premennej v. Ãloha 1-6 (rieÅ¡enie) PriebeÅ¾nÃ© Ãºpravy hodnÃ´t premennÃ½ch uvÃ¡dzame v komentÃ¡roch na konci riadkov:"
195,186,0.549,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"10.4 Vyhodnotenie MÃ´Å¾eme pouÅ¾iÅ¥ tri techniky vyhodnocovania odporÃºÄacieho systÃ©mu [4]. PrvÃ¡ z nich je zaloÅ¾enÃ¡ na metrikÃ¡ch kvality. MeranÃ­m pred aplikÃ¡ciou refaktoringu a po aplikÃ¡cii refaktoringu mÃ´Å¾eme vyhodnotiÅ¥, Äi refaktoring mal zmysel, napr. meranie vzÅ¥ahov medzi triedami zaloÅ¾enÃ© na volaniach (MPC) priamo koreluje s ÃºsilÃ­m, ktorÃ© treba vynaloÅ¾iÅ¥ na ÃºdrÅ¾bu [16]. Meranie vzÅ¥ahov medzi metÃ³dami zaloÅ¾enÃ© na sÃ©mantike (CCBC) â pravdepodobnosÅ¥ kedy nastane zmena, ak som zmenil podobnÃº metÃ³du, zniÅ¾uje Äas potrebnÃ½ na nÃ¡jdenie zmeny [20]. DruhÃ¡ technika mÃ´Å¾e byÅ¥ vyhodnotenie zaloÅ¾enÃ© na historickej informÃ¡cii [4]. Tu ako prvÃ© identifikujeme refaktorovacie operÃ¡cie programÃ¡torom. Potom aplikujeme refaktorovaciu operÃ¡ciu. Identifikujeme refaktorovacie operÃ¡cie strojom pred aplikÃ¡ciou a meriame zhodu. PoslednÃ¡ tretia technika je vyhodnotenie s programÃ¡tormi [4], kedy sa porovnÃ¡vajÃº hodnotenia odporÃºÄanÃ­ pÃ´vodnÃ½mi a externÃ½mi programÃ¡tori."
135,419,0.549,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â Uri vhodnÃ½ spÃ´sob ako modelova softvÃ©r tak, aby sa v jednom modeli zlÃºili informÃ¡cie o nasadenÃ½ch inÅ¡tanciÃ¡ch vzorov (v podobe hrÃ¡ov rolÃ­ danej inÅ¡tancie spolu) s ostatnÃ½mi elementmi nÃ¡vrhu, ktorÃ© nie sÃº sÃºasou Å¾iadnej inÅ¡tancie. To znamenÃ¡ presne zadefinova metamodel, ktorÃ½ bude opisova sÃ©mantickÃ© moÅ¾nosti vytvÃ¡ranÃ½ch modelov. Okrem toho je vhodnÃ© definova vhodnÃ½ spÃ´sob grafickÃ©ho zachytenia modelu, ktorÃ½ by v konenom dÃ´sledku umoÅ¾nil prehadne zmieÅ¡a dve rÃ´zne Ãºrovne abstrakcie obsiahnutÃ© v modeli."
40,54,0.549,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"PouÅ¾ijeme Äo moÅ¾no najvÃ¤ÄÅ¡Ã­ dynamickÃ½ rezervoÃ¡r. Toto je najefektÃ­vnejÅ¡ia a vÅ¡eobecne aplikovateÄ¾nÃ¡ metÃ³da, ale vyÅ¾aduje dostatoÄne veÄ¾kÃº trÃ©novaciu mnoÅ¾inu. PouÅ¾ijeme malÃ© hodnoty vstupnÃ½ch vÃ¡h. TÃ½m zabezpeÄÃ­me, Å¾e neurÃ³novÃ¡ sieÅ¥ bude pracovaÅ¥ takmer v lineÃ¡rnom rozsahu. Tu sa ale mÃ´Å¾eme dostaÅ¥ do konfliktu s nelineÃ¡rnou charakteristikou Ãºlohy. PouÅ¾ijeme lineÃ¡rne aktivaÄnÃ© funkcie neurÃ³nov v dynamickom rezervoÃ¡ri. OpÃ¤Å¥ nÃ¡m hrozÃ­ ten istÃ½ problÃ©m ako v predchÃ¡dzajÃºcom bode. PouÅ¾ijeme Å¡peciÃ¡lne pripravenÃ½ dynamickÃ½ rezervoÃ¡r s takmer jednotkovou vÃ¡hovou maticou (bliÅ¾Å¡ie informÃ¡cie v [3]). PouÅ¾ijeme spektrÃ¡lny polomer matice blÃ­zky hodnote 1. Takto vytvorenÃ¡ Echo State neurÃ³novÃ¡ sieÅ¥ bude fungovaÅ¥ ÃºspeÅ¡ne iba pri ÃºlohÃ¡ch s pomalou dynamikou."
240,503,0.549,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"2. Ako upraviÅ¥ inicializÃ¡ciu premennej max tak, aby sme mohli zachovaÅ¥ pÃ´vodnÃº podmienku if (max < d) na porovnanie (v riadku 11)? 3. MoÅ¾no program zjednoduÅ¡iÅ¥ tak, Å¾e nepouÅ¾ijeme riadiacu premennÃº cyklu i? 4. Ako by sa zmenil program, keby sme pouÅ¾ili inÃº reprezentÃ¡ciu vÃ½sledku: rieÅ¡enie (maximum ÄÃ­sel zo vstupu) by sme reprezentovali ako index (poradie) ÄÃ­sla vo vstupnej postupnosti? 5. Ako by sa zmenil program, ak by poÄet ÄÃ­sel postupnosti nebol na vstupe vopred zadanÃ½, ale chceli by sme spracovaÅ¥ vÅ¡etky ÄÃ­sla aÅ¾ do konca vstupu? 6. Ako by sa zmenil program, ak by sme chceli urÄiÅ¥ aj minimum? RieÅ¡enie Ãºloh na zamyslenie 1. GlobÃ¡lne a statickÃ© premennÃ© sÃº inicializovanÃ© na hodnotu 0, ale premennÃº max (priebeÅ¾nÃº hodnotu maxima) treba inicializovaÅ¥ na prvÃ© ÄÃ­slo postupnosti, nie hodnotu 0. NavrhovanÃ¡ Ãºprava by teda vÃ´bec nepomohla. 2. Ak chceme zachovaÅ¥ podmienku if (max > d), musÃ­me prvÃ© priradenie do max vykonaÅ¥ eÅ¡te pred cyklom. KÃ³d upravÃ­me takto:"
184,199,0.549,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Vo vÃ½voji je moÅ¾nÃ© vyuÅ¾Ã­vaÅ¥ ktorÃ½koÄ¾vek prÃ­stup, priÄom mÃ¡ kaÅ¾dÃ¡ zo stratÃ©giÃ­ rÃ´znu rÃ©Å¾iu, prÃ­nosy a rizikÃ¡. VÃ½ber je ovplyvnenÃ½ zÃ¡mermi spoloÄnosti. NajÄastejÅ¡ie sa vyuÅ¾Ã­va kombinÃ¡cia jednotlivÃ½ch prÃ­stupov. TabuÄ¾ka 3-1 sumarizuje niektorÃ© rozdiely jednotlivÃ½ch prÃ­stupov."
43,369,0.549,Objektovo orientovanÃ© programovanie v C++,"PrÃ­klad. Obchod s fotoaparÃ¡tmi mÃ¡ vo svojej ponuke kompakty a zrkadlovky, ich zoznamy sÃº uloÅ¾enÃ© v sÃºboroch kompakty.txt a zrkadlovky.txt. Pre kaÅ¾dÃ½ fotoaparÃ¡t je v sÃºbore uloÅ¾enÃ½ jeho vÃ½robca, nÃ¡zov, cena a rozlÃ­Å¡enie v Mpx. Kompakty majÃº navyÅ¡e uvedenÃ© eÅ¡te parametre optickÃ½ a digitÃ¡lny zoom, pri zrkadlovkÃ¡ch je zase uvedenÃ½ aj objektÃ­v, ktorÃ½ je zahrnutÃ½ v cene. Na zaÄiatku kaÅ¾dÃ©ho sÃºboru je poÄet fotoaparÃ¡tov. NapÃ­Å¡me program, ktorÃ½ umoÅ¾nÃ­ uÅ¾Ã­vateÄ¾ovi vyhÄ¾adÃ¡vaÅ¥ buÄ v zozname"
43,165,0.548,Objektovo orientovanÃ© programovanie v C++,"VÅ¡imnime si, v Äom je vÃ½hoda takÃ©hoto postupu. Pri alokÃ¡cii po riadkoch sme operÃ¡tor new[ ] volali (m+1)-krÃ¡t a rovnako potom operÃ¡tor delete[ ]. Pri stratÃ©gii jednÃ©ho bloku sa oba operÃ¡tory volajÃº len dvakrÃ¡t, Äo Å¡etrÃ­ Äas hlavne pri vÃ¤ÄÅ¡Ã­ch poliach. PrÃ­stup k jednotlivÃ½m prvkom poÄ¾a je takisto rÃ½chlejÅ¡Ã­, ak sÃº prvky v pamÃ¤ti umiestnenÃ© za sebou v jednom sÃºvislom bloku. Jedinou nevÃ½hodou tohto prÃ­stupu je, Å¾e v operaÄnej pamÃ¤ti, ktorÃ¡ je fragmentovanÃ¡, nemusÃ­ byÅ¥ vÅ¾dy voÄ¾nÃ© miesto pre sÃºvislÃ½ blok s poÅ¾adovanou veÄ¾kosÅ¥ou, hoci jednotlivÃ© riadky by si svoje miesta naÅ¡li. PrincÃ­p stratÃ©gie jednÃ©ho bloku je znÃ¡zornenÃ½ na obr. 4.3."
184,300,0.548,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"SÃºborovÃ½ systÃ©m Reiser 4 SÃºborovÃ½ systÃ©m Reiser 49 predstavuje zaujÃ­mavÃ½ koncept medzi diskovÃ½mi sÃºborovÃ½mi systÃ©mami. V sÃºÄasnosti je vÅ¡eobecne povaÅ¾ovanÃ½ za najrÃ½chlejÅ¡Ã­ sÃºborovÃ½ systÃ©m (Benchmarks Of ReiserFS Version 4, 2006). Medzi jeho vÃ½znamnÃ© vlastnosti patria: Â ÃºÄinnejÅ¡ie Å¾urnÃ¡lovanie prostrednÃ­ctvom preskupujÃºcich sa logovÃ½ch zÃ¡znamov Â rÃ½chlejÅ¡ia prÃ¡ca s adresÃ¡rmi obsahujÃºcimi veÄ¾kÃ© mnoÅ¾stvÃ¡ sÃºborov Â ÃºÄinnejÅ¡ia podpora pre malÃ© sÃºbory a to, ako z pohÄ¾adu Å¡etrenia diskovÃ©ho priestoru, tak aj z pohÄ¾adu rÃ½chlosti Â dynamicky optimalizovanÃ© rozvrhnutie disku prostrednÃ­ctvom oneskorenej alokÃ¡cie podobne ako v sÃºborovom systÃ©me XFS (Sweeney et al., 1996) Â podpora pre atomickÃ© transakcie NajvÃ½znamnejÅ¡Ã­m (aj keÄ zatiaÄ¾ nie moc viditeÄ¾nÃ½m) prÃ­nosom tohto sÃºborovÃ©ho systÃ©mu vÅ¡ak je zavedenie infraÅ¡truktÃºry zÃ¡suvnÃ½ch modulov do sÃºborovÃ©ho systÃ©mu. Autori sÃºborovÃ©ho systÃ©mu sÄ¾ubujÃº, Å¾e okrem sÃºÄasnÃ½ch zÃ¡kladnÃ½ch zÃ¡suvnÃ½ch modulov (pre sÃºbory, adresÃ¡re a pod.) bude v budÃºcnosti moÅ¾nÃ© prostrednÃ­ctvom tÃ½chto modulov zavÃ¡dzanie Å¡peciÃ¡lnych typov metadÃ¡t, Å¡ifrovanie, kompresia a mnoÅ¾stvo ÄalÅ¡Ã­ch funkciÃ­. V sÃºÄasnosti sÃº k dispozÃ­cii len moduly, ktorÃ© poskytujÃº funkcionalitu, ktorÃ¡ sa vyskytovala aj v predchÃ¡dzajÃºcej verzii tohto sÃºborovÃ©ho systÃ©mu â Reiser 3."
76,183,0.548,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"3.2 NezÃ¡vislosÅ¥ nÃ¡hodnÃ½ch veliÄÃ­n V kapitole 1 sme definovali nezÃ¡vislosÅ¥ nÃ¡hodnÃ½ch udalostÃ­. Vieme, Å¾e udalosti A, B sÃº nezÃ¡vislÃ© (t. j. stochasticky nezÃ¡vislÃ©) prÃ¡ve vtedy, ak platÃ­: P(AïB) = P(A) P(B). Ak nÃ¡hodnÃ© veliÄiny (na tom istom pravdepodobnostnom priestore), tak je prirodzenÃ© povaÅ¾ovaÅ¥ ich za nezÃ¡vislÃ© prÃ¡ve vtedy, keÄ udalosti vyjadrenÃ© prostrednÃ­ctvom veliÄiny , t. j. udalosti typu { ï£ < }, sÃº nezÃ¡vislÃ© s udalosÅ¥ami typu { ï£ < }, t. j. s udalosÅ¥ami, ktorÃ© vypovedajÃº len o veliÄine . TakÃ¡to skutoÄnosÅ¥ je obsahom nasledujÃºcej definÃ­cie. 3.2.1 DefinÃ­cia. VeliÄiny (definovanÃ© na tom istom pravdepodobnostnom priestore) sÃº nezÃ¡vislÃ© prÃ¡ve vtedy, keÄ pre vÅ¡etky ïR platÃ­ P( ï£"
130,37,0.548,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DÃ´sledky Eliminuje potrebu previazania aplikaÄne Å¡pecifickÃ©ho kÃ³du s infraÅ¡trukturÃ¡lnym kÃ³dom (abstraktnÃ½m, spoloÄnÃ½m, kÃ³dom univerzÃ¡lneho rÃ¡mca). infraÅ¡trukturÃ¡lnym kÃ³dom rozumieme ÄasÅ¥ kÃ³du, ktorÃ¡ je definovanÃ¡ mimo aplikaÄnÃ©ho kÃ³du, predstavuje jadro funkcionality, ktorÃº chceme vyuÅ¾iÅ¥ a rozÅ¡Ã­riÅ¥ v naÅ¡ej aplikÃ¡ciÃ­ a Äasto je dodÃ¡vanÃ¡ prostrednÃ­ctvom kniÅ¾nÃ­c. Na obrÃ¡zku 1-5 predstavujÃº infraÅ¡trukturÃ¡lny kÃ³d triedy VÃ½robca a Produkt a aplikaÄnÃ½ kÃ³d zvyÅ¡nÃ© tri triedy. V kÃ³de triedy VÃ½robca sa predpokladÃ¡ pouÅ¾itie rozhrania Produkt, a teda nie je potrebnÃ© vedieÅ¥ niÄ o aplikaÄnej triede KonkrÃ©tnyProdukt. UmoÅ¾Åuje podtriedam triedy VÃ½robca predefinovaÅ¥ Å¡tandardnÃº implementÃ¡ciu metÃ³dy vytvorProdukt. Podtriedy tak mÃ´Å¾u jednoduchÃ½m spÃ´sobom prispÃ´sobiÅ¥ (meniÅ¥ a rozÅ¡irovaÅ¥) sprÃ¡vanie nadtriedy. UmoÅ¾Åuje prepojiÅ¥ paralelnÃ© hierarchie tried, t.j. mÃ¡me hierarchiu tried, ktorÃ½ch inÅ¡tancie vytvÃ¡rame v aplikaÄnom kÃ³de. S tÃ½mito triedami sÃºvisia inÃ© triedy, ktorÃ© pouÅ¾Ã­vame, priÄom tieto triedy sÃº organizovanÃ© v podobnej hierarchii. V princÃ­pe platÃ­, Å¾e kaÅ¾dÃ¡ trieda z prvej hierarchie sÃºvisÃ­ s nejakou triedou z paralelnej druhej hierarchie. Na prepojenie vyuÅ¾ijeme vÃ½robnÃº metÃ³du v prvej hierarchii, kde vÃ½sledkom jej volania bude inÅ¡tancia nejakej triedy z druhej hierarchie. NÃºti aplikÃ¡ciu, aby vytvÃ¡rala ÄalÅ¡ie triedy KonkrÃ©tnyVÃ½robca z nadtriedy VÃ½robca iba kvÃ´li tomu, Å¾e chceme vytvÃ¡raÅ¥ inÅ¡tancie ÄalÅ¡ej (inej) triedy KonkrÃ©tnyProdukt."
130,372,0.548,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ktorÃ© agenty so zdrojom vykonÃ¡vajÃº. V takomto prÃ­pade je potrebnÃ© prÃ­stup agentov ku zdroju koordinovaÅ¥. Dostatok schopnostÃ­. V prÃ­pade, Å¾e agent nemÃ¡ dostatok schopnostÃ­ na dosiahnutie svojho cieÄ¾a, musÃ­ na jeho dosiahnutÃ­ spolupracovaÅ¥ s inÃ½mi agentmi. Ide naprÃ­klad o vyuÅ¾itie sluÅ¾ieb experta na rieÅ¡enie urÄitej Ãºlohy alebo o dosiahnutie kvalitatÃ­vnych vÃ½sledkov pouÅ¾itÃ­m kvantitatÃ­vnych metÃ³d (skupina agentov mÃ¡ schopnosti, ktorÃ© samostatne nemÃ¡ Å¾iadny z nich)."
130,93,0.548,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory NÃ¡vrhovÃ½ vzor MuÅ¡ia vÃ¡ha je Äasto kombinovanÃ½ s nÃ¡vrhovÃ½m vzorom ZloÅ¾enina. Za ÃºÄelom implementovania Å¡truktÃºry s logickou hierarchiou (ako orientovanÃ½ acyklickÃ½ graf, ktorÃ©ho listy predstavujÃº zdieÄ¾anÃ© objekty). Äasto je vÃ½hodnÃ© implementovaÅ¥ nÃ¡vrhovÃ½ vzor Stav a StratÃ©giu ako muÅ¡ie vÃ¡hy."
184,374,0.548,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"systÃ©m Google (Brin, 1998), ktorÃ½ bol zo zaÄiatku koncipovanÃ½ ako akademickÃ½ webovÃ½ vyhÄ¾adÃ¡vacÃ­ systÃ©m. VyhÄ¾adÃ¡vacÃ­ systÃ©m sa skladÃ¡ z troch ÄastÃ­: indexovaÄa, sÅ¥ahovaÄa a dopytovacieho servera. SÅ¥ahovaÄ zbiera strÃ¡nky z webu. IndexovaÄ spracÃºva stiahnutÃ© strÃ¡nky a reprezentuje ich ako dÃ¡tovÃ© Å¡truktÃºry vhodnÃ© pre efektÃ­vne vyhÄ¾adÃ¡vanie. DopytovacÃ­ server prijÃ­ma poÅ¾iadavky od pouÅ¾Ã­vateÄ¾a a vracia strÃ¡nky identifikovanÃ© pomocou vyhÄ¾adÃ¡vacÃ­ch dÃ¡tovÃ½ch Å¡truktÃºr. V systÃ©me Google sÃº tieto pri Äasti rozdelenÃ© a vysoko paralizovanÃ© medzi sadu serverov tak, ako je znÃ¡zornenÃ© na (obrÃ¡zok 5-6). V systÃ©me je sÅ¥ahovanie rozdelenÃ© medzi viacerÃ© distribuovanÃ© sÅ¥ahovaÄe. Zoznam adries, ktorÃ© majÃº byÅ¥ stiahnutÃ©, sa do sÅ¥ahovaÄov dostane z URLServera. KaÅ¾dÃ¡ strÃ¡nka je po stiahnutÃ­ poslanÃ¡ do ukladacieho servera, tento danÃº strÃ¡nku skomprimuje pomocou DEFLATE kompresnÃ©ho algoritmu (Deutsch, 1996) a takto ju uloÅ¾Ã­ do ÃºloÅ¾iska. KaÅ¾dÃ¡ web strÃ¡nka mÃ¡ priradenÃ© identifikaÄnÃ© ÄÃ­slo oznaÄovanÃ© ako docID, toto je vygenerovanÃ© zakaÅ¾dÃ½m, ako je zÃ­skanÃ¡ novÃ¡ URL z webstrÃ¡nky. Indexovacia funkcia je realizovanÃ¡ pomocou indexovaÄa a triediÄa. IndexovaÄ vykonÃ¡va tieto kroky: prechÃ¡dza cez dokumenty uloÅ¾enÃ© v ÃºloÅ¾isku, dekomprimuje ich a vykonÃ¡va ich syntaktickÃº analÃ½zu. KaÅ¾dÃ½ dokument je prevedenÃ½ na mnoÅ¾inu vÃ½skytov slov nazÃ½vanÃ½ch zÃ¡sahy. ZÃ¡sah obsahuje slovo, jeho polohu v dokumente, pribliÅ¾nÃº veÄ¾kosÅ¥ pÃ­sma a informÃ¡ciu o tom, Äi sa skladÃ¡ z veÄ¾kÃ½ch pÃ­smen alebo nie. IndexovaÄ rozdeÄ¾uje tieto zÃ¡sahy medzi sadu ,,sudov``, ÄÃ­m vytvÃ¡ra ÄiastoÄne usporiadanÃ½ doprednÃ½ index. Okrem toho indexovaÄ identifikuje odkazy vo vÅ¡etkÃ½ch web strÃ¡nkach a ukladÃ¡ informÃ¡cie o nich do linkovÃ©ho sÃºboru. Tento obsahuje vÅ¡etky potrebnÃ© informÃ¡cie pre urÄenie toho, odkiaÄ¾ a kam danÃ½ odkaz ukazuje a akÃ½ je text odkazu. URLrieÅ¡iÄ (angl. URLresolver) ÄÃ­ta linkovÃ½ sÃºbor a prevÃ¡dza relatÃ­vne URL adresy na absolÃºtne URL adresy a tie nÃ¡sledne na docID. UkladÃ¡ text odkazu spolu docID na, ktorÃ© odkaz ukazuje, do doprednÃ©ho indexu. TaktieÅ¾ generuje databÃ¡zu odkazov reprezentovanÃ½ch ako pÃ¡ry docID. TÃ¡to databÃ¡za je pouÅ¾Ã­vanÃ¡ pri vÃ½poÄte PageRank vÅ¡etkÃ½ch dokumentov. TriediÄ zoberie obsah sudov, ktorÃ½ je zoradenÃ½ podÄ¾a docID, znovu ho zoradÃ­ podÄ¾a wordID, Äi vytvorÃ­ inverznÃ½ index. Toto triedenie sa robÃ­ na mieste tak, aby pre tÃºto operÃ¡ciu bolo nutnÃ© iba malÃ© mnoÅ¾stvo dodatoÄnej pamÃ¤te. NÃ¡sledne program DumpLexicon zoberie tento zoznam a spolu s lexikÃ³nom vygenerovanÃ½m indexovaÄom vytvorÃ­ novÃ½ lexikÃ³n, ktorÃ½ pouÅ¾Ã­va vyhÄ¾adÃ¡vaÄ. VyhÄ¾adÃ¡vaÄ je spÃºÅ¡Å¥anÃ½ webovÃ½m serverom a pouÅ¾Ã­va lexikÃ³n vytvorenÃ½ programom DumpLexicon spolu s inverznÃ½m indexom a hodnotenÃ­m vytvorenÃ½m pomocou PageRank algoritmu pre zodpovedanie dopytov kladenÃ½ch pouÅ¾Ã­vateÄ¾mi. Opis kompletnÃ©ho vyhÄ¾adÃ¡vacieho systÃ©mu WebCrawler je uvedenÃ½ v dizertaÄnej prÃ¡ci (Pinkerton, 2000). Tento systÃ©m bol prvÃ½ plno-textovÃ½ vyhÄ¾adÃ¡vacÃ­ systÃ©m a pÃ´vodne bol navrhovanÃ½ ako samostatnÃ½ vyhÄ¾adÃ¡vacÃ­ stroj s vlastnou databÃ¡zou. NeskÃ´r bol upravenÃ½ na meta-vyhÄ¾adÃ¡vacÃ­ stroj, ktorÃ½ poskytuje kombinÃ¡ciu oddelene identifikovanÃ½ch platenÃ½ch a neplatenÃ½ch vÃ½sledkov hÄ¾adania z najobÄ¾ÃºbenejÅ¡Ã­ch vyhÄ¾adÃ¡vacÃ­ch systÃ©mov."
129,26,0.548,Sprievodca licenciami Creative Commons,"Ako je uvedenÃ© v TabuÄ¾ke 1, CC BY je najliberÃ¡lnejÅ¡ou licenciou Creative Commons, ktorÃ¡ umoÅ¾Åuje zdieÄ¾anie, opÃ¤tovnÃ© komerÄnÃ© pouÅ¾itie a Ãºpravy, pod podmienkou, Å¾e pÃ´vodnÃ½ autor je riadne uvedenÃ½, a skutoÄnosÅ¥, Å¾e v pÃ´vodnom diele boli urobenÃ© zmeny, je jasne deklarovanÃ¡. Jej zÃ¡stancovia tvrdia, Å¾e dÃ¡va pouÅ¾Ã­vateÄ¾om maximÃ¡lny stupeÅ flexibility a umoÅ¾Åuje (okrem inÃ©ho) komerÄnÃ½m spoloÄnostiam vyuÅ¾Ã­vaÅ¥ takto zverejnenÃ© vÃ½sledky vÃ½skumu, a tÃ½m potenciÃ¡lne podporovaÅ¥ inovÃ¡cie a hospodÃ¡rsky rast."
240,477,0.548,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"opakujÃºce sa bloky podobnÃ©ho kÃ³du, ktorÃ© zodpovedajÃº jednotlivÃ½m smerom (riadkom, stÄºpcom a diagonÃ¡lam). VÅ¡imnime si malÃ½ rozdiel, Å¾e v riadku 7 cyklus zaÄÃ­na o 1, teda ako keby sme 0-tÃ½ riadok (alebo stÄºpec) nepreÅ¡li. Ako je to moÅ¾nÃ©? Jednoducho. PredtÃ½m ako budeme kontrolovaÅ¥, Äi sÃºÄet ÄÃ­sel v riadkoch, stÄºpcoch alebo diagonÃ¡lach je rovnakÃ½, musÃ­me hodnotu sÃºÄtu urÄiÅ¥: napr. podÄ¾a 0-tÃ©ho riadku. V riadku 5 preto doplnÃ­me a[0][j], ÄÃ­m v cykle v riadkoch 4-5 urÄÃ­me do premennej (sucet) sÃºÄet ÄÃ­sel, voÄi ktorÃ©mu budeme ostatnÃ© sÃºÄty porovnÃ¡vaÅ¥ (sucet). PrehliadnutÃ­m zostÃ¡vajÃºceho programu si vÅ¡imneme, Å¾e sÃºÄty v riadkoch, stÄºpcoch a diagonÃ¡lach si v cykloch poÄÃ­tame do premennej k, ktorÃº by sme mali porovnaÅ¥ voÄi referenÄnÃ©mu sÃºÄtu (sucet). Ak je hodnota rÃ´zna, tak Å¡tvorec nie je magickÃ½ (return 0 â doplnÃ­me v riadkoch 12, 20, 26 a 31), nakoniec v riadku 33 vieme, Å¾e je magickÃ½ (return 1). V riadkoch 11, 19, 25 a 30 doplnÃ­me porovnanie zistenÃ©ho sÃºÄtu s referenÄnÃ½m sÃºÄtom (k != sucet). ZostÃ¡va doplniÅ¥ chÃ½bajÃºce miesta v riadkoch 10, 18, 24 a 29, v ktorÃ½ch budeme postupne poÄÃ­taÅ¥ sÃºÄty pre riadky, stÄºpce, hlavnÃº a vedÄ¾ajÅ¡iu diagonÃ¡lu. V riadku 10 doplnÃ­me a[i][j], v riadku 18 tieÅ¾ a[i][j], v riadku 24 doplnÃ­me a[i][i] a v riadku 29 doplnÃ­me a[i][n-i-1]."
265,372,0.548,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Model by mal maÅ¥ sprÃ¡vnu ÃºroveÅ podrobnosti a zachytÃ¡vaÅ¥ iba to, Äo prÃ¡ve potrebujeme. InÃ½mi slovami, nemali by sme zbytoÄne rozpracÃºvaÅ¥ detaily, ktorÃ© rozpracovanÃ© eÅ¡te nemusia byÅ¥ (tzv. lean prÃ­stup), no zÃ¡roveÅ musÃ­me spraviÅ¥ model takÃ½ podrobnÃ½, aby splnil cieÄ¾, pre ktorÃ½ sme ho vytvÃ¡rali. PoznÃ¡mka: tÃ¡to otÃ¡zka a odpoveÄ na Åu znejÃº takmer triviÃ¡lne, no vÃ½vojÃ¡ri sa prekvapivo Äasto uvedenÃ©ho odporÃºÄania nedrÅ¾ia. NedostatoÄnÃ¡ ÃºroveÅ detailov modelov je naprÃ­klad charakteristickÃ¡ pre prÃ­pady, keÄ vÃ½vojÃ¡r vytvÃ¡ra model ako podklad pre inÃ©ho vÃ½vojÃ¡ra. Vtedy vznikÃ¡ problÃ©m nejednoznaÄnosti. Na druhej strane, k prÃ­liÅ¡nÃ©mu âpredbiehaniuâ dochÃ¡dza naprÃ­klad z dÃ´vodov zlÃ©ho manaÅ¾mentu prÃ¡ce alebo z nedostatoÄnej disciplinovanosti vÃ½vojÃ¡rov. ZbytoÄnÃ©, dopredu rozpracovanÃ© detaily, sa potom Äasto musia meniÅ¥, pretoÅ¾e neboli dostatoÄne overenÃ© zÃ¡klady, na ktorÃ½ch stoja."
59,625,0.547,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"HovorÃ­me, Å¾e domÃ©na relÃ¡cie S bola rozÅ¡Ã­renÃ¡. ZnÃ¡my prÃ­klad tejto analÃ³gie je Ruthefordov planetÃ¡rny model atÃ³mu. RelÃ¡cia S (slnko, planÃ©ta) bola zavedenÃ¡ Kopernikom, podÄ¾a ktorej planÃ©ty obiehajÃº okolo slnka. Rutheford pouÅ¾il âpodobnostiâ slnkoï¾atÃ³movÃ© jadro a planÃ©taï¾elektrÃ³n k tomu, aby mohol rozÅ¡Ã­riÅ¥ domÃ©nu kopernikovskej relÃ¡cie S aj pre model atÃ³mu, tÃ¡to analÃ³gia Kopernikovho modelu sa nazÃ½va Ruthefordov planetÃ¡rny model atÃ³mu. 2. SpÃ´sobom usudzovania zaloÅ¾enÃ©ho na predpoklade, Å¾e ak dva objekty a1 a a2, sÃº podobnÃ© vzhÄ¾adom k vybranÃ½m aspektom, potom tieto dva objekty sÃº si pravdepodobne podobnÃ© aj vzhÄ¾adom k inÃ½m aspektom:"
122,49,0.547,Modelovanie softvÃ©ru,"3.9 SekundÃ¡rny ÃºÄastnÃ­k V jednom prÃ­pade pouÅ¾itia mÃ´Å¾e vystupovaÅ¥ viac ÃºÄastnÃ­kov. Predstavme si, Å¾e objednÃ¡vku mÃ¡ potvrdiÅ¥ obchodnÃ­k. Äi to tak mÃ¡ byÅ¥, zÃ¡visÃ­ od klienta, t. j. prevÃ¡dzkovateÄ¾a e-obchodu. PrÃ­pad pouÅ¾itia Zadaj objednÃ¡vku by potom vyzeral takto: PrÃ­pad pouÅ¾itia: Zadaj objednÃ¡vku"
94,170,0.547,Sprievodca svetom vedeckÃ©ho publikovania,"Äasopisy so spoplatnenÃ½m prÃ­stupom, no Äo pokiaÄ¾ ide o princÃ­povy DORA (Sanfranciskej deklarÃ¡cie, kritizujÃºcej pouÅ¾Ã­vanie ÄasopiseckÃ½ch metrÃ­k ako je impakt faktor na hodnotenie vÃ½konu vedcov, viac na str. 24), ich aplikÃ¡ciu iba odporÃºÄa, nevyÅ¾aduje. Slabinou plÃ¡nu mÃ´Å¾e byÅ¥ aj preferovanie zlatej cesty k otvorenÃ©mu prÃ­stupu oproti zelenej (prakticky zahradÃ­ insolventnÃ½m autorom cestu k publikovaniu v kvalitnÃ½ch Äasopisoch, ak v ich odbore nie je dosÅ¥ platinovÃ½ch Äasopisov na vyÅ¡Å¡ej Ãºrovni) a nedostatoÄnÃ© zohÄ¾adnenie potreby otvorenej (open source) infraÅ¡truktÃºry pre eurÃ³psku vedu."
135,334,0.547,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ziÃ¡ch tohto vÃ½vojovÃ©ho rÃ¡mca reprezentovali distribuovanÃ© objekty, ktorÃ© mali perzistentnÃ½ stav uloÅ¾enÃ½ v dÃ¡tovom ÃºloÅ¾isku. Okrem rozhrania definuje JPA tieÅ¾ vlastnÃ½ dopytovacÃ­ jazyk (Java Persistence Query Language; JPQL) a Å¡pecifikuje podobu objektovo-relanÃ½ch metadÃ¡t. KÃºovÃ½m architektonickÃ½m prvkom rÃ¡mca JEE je tzv. EJB kontajner, ktorÃ½ sa starÃ¡ o Å¾ivotnÃ½ cyklus bÃ´bov (pozri obr. âSchematickÃ½ nÃ¡rt kontajnera EJB v architektÃºre modelu EJBâ v kapitole 2-4). VÃ½vojovÃ½ rÃ¡mec JEE je robustnÃ½ systÃ©m pre podporu vÃ½voja komplexnÃ½ch aplikÃ¡ciÃ­ pomocou jazyka Java. ProstrednÃ­ctvom definovanej architektÃºry umoÅ¾uje oddelenie prezentanej a domÃ©novej logiky. RÃ¡mec podporuje distribuovanÃ© nasadenie a integrÃ¡ciu s inÃ½mi platformami nezÃ¡vislÃ½mi od jazyka Java. Koncept sÃºiastok prevÃ¡dzkovanÃ½ch v kontajneri, ktorÃ½ rieÅ¡i alÅ¡ie aspekty vÃ½voja aplikÃ¡cie, akÃ½mi sÃº napr. bezpenos, spracovanie transakciÃ­, spracovanie viacerÃ½ch vlÃ¡ken, alokÃ¡cia vlÃ¡ken, vÃ½razne uahuje prÃ¡cu programÃ¡tora, vÃ½vojÃ¡ra aplikÃ¡cie."
94,85,0.547,Sprievodca svetom vedeckÃ©ho publikovania,"editor Umberto32 dokonca existuje aj pre slovenskÃ½ jazyk. OceniÅ¥ ho mÃ´Å¾u Å¡tudenti pri pÃ­sanÃ­ zÃ¡vereÄnÃ½ch prÃ¡c, Äi autori uÄebnÃ­c, ktorÃ­ chcÃº aj v odbornom texte udrÅ¾aÅ¥ priamoÄiary, Ä¾ahko pochopiteÄ¾nÃ½ Å¡tÃ½l). PoÄÃ­taÄovÃ½ program prirodzene nenahradÃ­ Å¾ivÃ©ho ÄitateÄ¾a. VeÄ¾kÃº vÃ½hodu znamenÃ¡ kolega (alebo priateÄ¾ z akademickej sociÃ¡lnej siete), ktorÃ½ ovlÃ¡da angliÄtinu ako rodenÃ½ reÄnÃ­k. Ak vedec nikoho takÃ©ho nepoznÃ¡, mÃ´Å¾e sa pokÃºsiÅ¥ nÃ¡jsÅ¥ profesionÃ¡lneho korektora â ideÃ¡lne takÃ©ho, ktorÃ½ rozumie vedeckÃ©mu Å¾argÃ³nu z danÃ©ho odboru. Do oblasti elektronickÃ©ho vedeckÃ©ho publikovania zaÄalo vstupovaÅ¥ takÃ© mnoÅ¾stvo autorov z krajÃ­n mimo anglofÃ³nneho priestoru, Å¾e vytvorili dostatoÄne veÄ¾kÃ½ trh pre vznik segmentu editaÄnÃ½ch sluÅ¾ieb Å¡pecializovanÃ½ch na vedeckÃ© rukopisy33. Tieto sluÅ¾by sÃº spoplatnenÃ©: za gramatickÃº korektÃºru ÄlÃ¡nku v rozsahu do 6000 slov zaplatÃ­ autor 200 â 400 Eur (minimÃ¡lna taxa). Okrem gramatickÃ©ho a Å¡tylistickÃ©ho skultivovania ÄlÃ¡nku ponÃºkajÃº editaÄnÃ© firmy v rÃ¡mci rozÅ¡Ã­renÃ½ch sluÅ¾ieb aj technickÃ© Ãºpravy, vytvorenie reprezentatÃ­vnych obrÃ¡zkov podÄ¾a nÃ¡vrhu autora, kontrolu Å¡tatistickÃ©ho spracovania, pomoc pri vÃ½bere Äasopisu, napÃ­sanie sprievodnÃ©ho listu, alebo pomoc pri komunikÃ¡cii s redakciou. EditaÄnÃ© sluÅ¾by tieÅ¾ podliehajÃº vlastnÃ©mu etickÃ©mu kÃ³dexu. Ich vÃ½pomoc by nemala dosahovaÅ¥ ÃºroveÅ autorskÃ©ho prÃ­nosu, pri Å¡tylistickÃ½ch ÃºpravÃ¡ch by nemali zasahovaÅ¥ do obsahu, Äi neprimerane posÃºvaÅ¥ vyznenie textu. V Å¾iadnom prÃ­pade by sa nemali podieÄ¾aÅ¥ na fabrikÃ¡cii dÃ¡t alebo prekrÃºcanÃ­ vÃ½sledkov. Pri komunikÃ¡cii s redakciami by nemali prepisovaÅ¥ autorskÃ© prÃ¡va k ÄlÃ¡nku na vydavateÄ¾a v mene autorov. Pre slovenskÃ©ho vÃ½skumnÃ­ka s obmedzenÃ½mi zdrojmi na publikovanie sÃº editaÄnÃ© sluÅ¾by zvÃ¤ÄÅ¡a nedostupnÃ©, no na ich strÃ¡nkach sa dajÃº aj bezplatne nÃ¡jsÅ¥ uÅ¾itoÄnÃ© redaktorskÃ© tipy a triky, prÃ­padne varovania pred ÄastÃ½mi chybami."
94,317,0.547,Sprievodca svetom vedeckÃ©ho publikovania,"9.2 E-veda â veda rozvÃ­janÃ¡ prostriedkami digitÃ¡lnej revolÃºcie Prechod vedy z tlaÄenÃ½ch do prevaÅ¾ne elektronickÃ½ch mÃ©diÃ­ (âe-scienceâ/âe-vedaâ, âcyberscienceâ (Nentwich 2003), âe-researchâ, âveda 2.0â) umoÅ¾Åuje vytvÃ¡ranie bezbariÃ©rovÃ©ho prÃ­stupu k overenÃ½m systematicky budovanÃ½m zbierkam recenzovanÃ½ch vedeckÃ½ch informÃ¡ciÃ­ ako protivÃ¡hu voÄi takzvanÃ©mu informaÄnÃ©mu smogu, informaÄnÃ©mu pretlaku a mnoÅ¾stvu neoverenÃ½ch informÃ¡ciÃ­, ktorÃ© sa prezentujÃº ako seriÃ³zne vedeckÃ© zdroje. NovÃ© technologickÃ© moÅ¾nosti otvÃ¡rajÃº novÃ© polia vÃ½skumu, rozÅ¡irujÃº diapazÃ³n pouÅ¾iteÄ¾nÃ½ch metÃ³d a moÅ¾nosti spoluprÃ¡ce (napr. vyuÅ¾itie Grid Computingu), ÄÃ­m zÃ¡roveÅ modifikujÃº charakter vÃ½skumnej prÃ¡ce. NajintenzÃ­vnejÅ¡ie to pociÅ¥ujÃº vÃ½skumnÃ© oblasti pracujÃºce s veÄ¾kÃ½mi objemami dÃ¡t (ÄasticovÃ¡ fyzika, genomika, bioinformatika), ale napr. aj sociÃ¡lne vedy, ktorÃ© majÃº prÃ­leÅ¾itosÅ¥ skÃºmaÅ¥ âdigitÃ¡lne odtlaÄkyâ a sprÃ¡vanie Ä¾udÃ­ v elektronickom prostredÃ­. NeoddeliteÄ¾nou sÃºÄasÅ¥ou e-vedy je aj internetovÃ¡ etika. ZaujÃ­manie postojov k dÃ´leÅ¾itÃ½m spoloÄenskÃ½m otÃ¡zkam, rieÅ¡enie postavenia Å¾ien, minorÃ­t, ochrany Å¾ivotnÃ©ho prostredia alebo prejavy morÃ¡lnej a spoloÄenskej zodpovednosti (naprÃ­klad reakcia vedenia univerzity na plagiÃ¡torskÃ½ Å¡kandÃ¡l vysoko postavenÃ©ho funkcionÃ¡ra) tieÅ¾ patria k formÃ¡m zviditeÄ¾nenia vedca alebo vÃ½skumnej inÅ¡titÃºcie, ktorÃ© sÃ­ce nemusia priamo ovplyvÅovaÅ¥ bibliometrickÃ© ukazovatele, ale dotvÃ¡rajÃº atmosfÃ©ru, pracovnÃ½ Ã©tos a pomÃ¡hajÃº Å¡tudentom Äi vedcom rozhodnÃºÅ¥ sa o prÃ­padnej spoluprÃ¡ci, Å¡tudijnÃ½ch alebo profesionÃ¡lnych ambÃ­ciÃ¡ch v sÃºvislosti s danou inÅ¡titÃºciou. TakÃ©to informÃ¡cie sa predtÃ½m Å¡Ã­rili skÃ´r lokÃ¡lnymi periodikami a Ãºstnym podanÃ­m medzi akademickÃ½mi pracovnÃ­kmi, no v elektronickej dobe sÃº voÄ¾ne prÃ­stupnÃ© kaÅ¾dÃ©mu zÃ¡ujemcovi. GlobalizÃ¡cia vedy vyÅ¾aduje funkÄnÃ© prepÃ¡janie dÃ¡t, naprÃ­klad vo forme tzv. Linked Data, alebo Linked Open Data. Pre odbornÃ½ch informaÄnÃ½ch pracovnÃ­kov predstavuje aj potrebu budovania novej Å¡truktÃºry dÃ¡t, ich zdieÄ¾ania a tvorby novÃ½ch znalostnÃ½ch systÃ©mov. IlustraÄnÃ½m prÃ­kladom takÃ½chto snÃ¡h je PlanetData project147 s cieÄ¾om vytvorenia trvalej eurÃ³pskej komunity vedcov a prezentÃ¡cie vedeckÃ½ch vÃ½stupov na webe v zodpovedajÃºcej forme s interdisciplinÃ¡rnym obsahovÃ½m zameranÃ­m. EU Open Data Portal148 je ÄalÅ¡Ã­ prÃ­klad"
59,391,0.547,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"7.5 TeÃ³ria dÃ´kazu â prirodzenÃ¡ dedukcia (syntaktickÃ½ prÃ­stup) KlasickÃ½ spÃ´sob rieÅ¡enia logickÃ©ho dÃ´kazu vo vÃ½rokovej logike je Hilbertova axiomatickÃ¡ metÃ³da [2,5,7,10,16], ktorÃ¡ postuluje systÃ©m 10 axiÃ³m a jednÃ©ho pravidla usudzovania. Aj keÄ je tento syntaktickÃ½ prÃ­stup elegantnÃ½ a v zÃ¡sade jednoduchÃ½, jeho pouÅ¾itie na dÃ´kaz novÃ½ch zÃ¡konov vÃ½rokovej logiky (ktorÃ© nie sÃº obsiahnutÃ© v mnoÅ¾ine axiÃ³m) v mnohÃ½ch prÃ­padoch je netriviÃ¡lna zÃ¡leÅ¾itosÅ¥, ktorÃ¡ obvykle vyÅ¾aduje mnoÅ¾stvo âjemnÃ½châ trikov a postupov, aby sme dokÃ¡zali aj pomerne jednoduchÃ© zÃ¡kony vÃ½rokovej logiky (napr. p ï p ). AlternatÃ­vny prÃ­stup ku konÅ¡trukcii teÃ³rie dÃ´kazu je Gentzenova prirodzenÃ¡ dedukcia z r. 1935 [15], ktorÃ¡ je zaloÅ¾enÃ¡ na jednej triviÃ¡lnej axiÃ³me (napr. p ï p alebo p ï ïp ) a okolo tuctu pravidiel odvodzovania). PravidlÃ¡ usudzovania v prirodzenej dedukcii sÃº tvorenÃ© schÃ©mou (pozri Tab. 3) predpoklad1 .................... ...... predpoklad n (7.2) ï n zÃ¡ver ktorÃ¡ obsahuje n predpokladov ï ï½ ï»ïª1 ,...,ïªn ï½ a jeden zÃ¡ver ï¹. TÃ¡to schÃ©ma usudzovania je formalizovanÃ¡ pomocou ârelÃ¡cieâ ï logickÃ©ho dÃ´kazu (alebo vyplÃ½vania)"
240,21,0.547,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"12-13 priraÄuje do poÄ¾a sito na prÃ­sluÅ¡nÃ© miesta sito[j] hodnoty 1. OtÃ¡zka: Do ktorÃ½ch miest v poli sito cyklus zapÃ­Å¡e hodnotu 1? Pre j = 2i, 3i, â¦, n (ak je n deliteÄ¾nÃ© i), teda kaÅ¾dÃ½ nÃ¡sobok j ÄÃ­sla i bude maÅ¥ v prvku sito[j] uloÅ¾enÃº hodnotu 1 a pri neskorÅ¡ej kontrole v riadku 9 toto (zloÅ¾enÃ©) ÄÃ­slo v cykle pre i preskoÄÃ­me. InÃ½mi slovami, pre nÃ¡sobky nÃ¡jdenÃ½ch prvoÄÃ­sel do poÄ¾a sito uloÅ¾Ã­me 1 a teda ich pri ÄalÅ¡om hÄ¾adanÃ­ vÃ¤ÄÅ¡Ã­ch prvoÄÃ­sel preskoÄÃ­me. PrvoÄÃ­slo je v tomto programe takÃ© ÄÃ­slo, ktorÃ© nebolo vyznaÄenÃ© ako nÃ¡sobok nejakÃ©ho inÃ©ho menÅ¡ieho prvoÄÃ­sla. UvedenÃ½ postup (algoritmus) sa nazÃ½va Eratostenovo sito. OtÃ¡zka: Oba uvedenÃ© programy pre zadanÃ© ÄÃ­slo n do 1 000 000 vypÃ­Å¡u rovnakÃº (sprÃ¡vnu) postupnosÅ¥ prvoÄÃ­sel, ktorÃ½ z nich je lepÅ¡Ã­?"
195,184,0.546,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"10.3 VytvÃ¡ranie odporÃºÄacieho systÃ©mu pre refaktoring Na vytvorenie odporÃºÄacieho systÃ©mu najskÃ´r potrebujeme poznaÅ¥ vzÅ¥ahy medzi komponentmi kÃ³du. Potom z nich mÃ´Å¾eme poÄÃ­taÅ¥ nejakÃ½m algoritmom informÃ¡ciu, ktorÃº mÃ´Å¾eme odporuÄiÅ¥. TÃ¡to sekcia sa venuje tomu, ako vytvoriÅ¥ takÃ½ odporÃºÄacÃ­ systÃ©m. 10.3.1 ZachytÃ¡vanie vzÅ¥ahov medzi komponentmi kÃ³du MÃ´Å¾eme pouÅ¾iÅ¥ nasledovnÃ© zdroje informÃ¡cii pre zÃ­skavanie vzÅ¥ahov medzi komponentmi [4]: - volania metÃ³d, - zdieÄ¾anÃ© premennÃ©, - vzÅ¥ah dediÄnosti, - informÃ¡cia o pÃ´vodnej dekompozÃ­cii, - sÃ©mantickÃ¡ podobnosÅ¥. Ako uÅ¾ bolo spomenutÃ©, tieto informÃ¡cie mÃ´Å¾u byÅ¥ pouÅ¾itÃ© na zÃ­skanie dÃ¡t, z ktorÃ½ch mÃ´Å¾eme nieÄo vyvodiÅ¥ podÄ¾a algoritmu a tak pomÃ´cÅ¥ programÃ¡torovi, napr. urobiÅ¥ odporÃºÄanie. 10.3.2 Algoritmus na generovanie odporÃºÄanÃ­ pre refaktoring RÃ´zne prÃ­stupy sa dajÃº pouÅ¾iÅ¥ na rÃ´zne refaktorovacie operÃ¡cie. Ako sme uÅ¾ ukÃ¡zali v prÃ¡ci, mÃ¡me klastrovo-zaloÅ¾enÃ©, grafovo-zaloÅ¾enÃ©, heuristicky-zaloÅ¾enÃ©, zaloÅ¾enÃ© na vyhÄ¾adÃ¡vanÃ­,"
184,56,0.546,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"KaÅ¾dÃ½ schopnÃ½ architekt vie, Å¾e v praxi bude kaÅ¾dÃº aplikÃ¡ciu skÃ´r Äi neskÃ´r nutnÃ© zmeniÅ¥ tak, aby sa prispÃ´sobila novÃ½m poÅ¾iadavkÃ¡m. Z tohto dÃ´vodu je vhodnÃ© pri nÃ¡vrhu architektÃºry zohÄ¾adniÅ¥ pravdepodobnÃ© budÃºce zmeny aplikÃ¡cie. ÄÃ­m flexibilnejÅ¡Ã­ je nÃ¡vrh architektÃºry na zaÄiatku, tÃ½m jednoduchÅ¡ie a lacnejÅ¡ie bude zavedenie budÃºcich zmien. ModifikovateÄ¾nosÅ¥ (modifiability) ako atribÃºt kvality predstavuje mieru nÃ¡roÄnosti zavedenia zmien do existujÃºceho nÃ¡vrhu â udÃ¡va ako nÃ¡roÄnÃ© mÃ´Å¾e byÅ¥ zapracovanie novÃ½ch funkcionÃ¡lnych a nefunkcionÃ¡lnych poÅ¾iadaviek. DÃ´leÅ¾itÃ© je uvedomiÅ¥ si, Å¾e"
135,2,0.546,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"S rozvojom informatiky a informanÃ½ch technolÃ³giÃ­ sa posiluje potreba odbornÃ­kov v Å¡pecializovanÃ½ch oblastiach, schopnÃ½ch samostatne rieÅ¡i otvorenÃ© problÃ©my, ktorÃ© nemajÃº doteraz znÃ¡me rieÅ¡enia. PrÃ¡ve doktorandi sa na takÃºto Ãºlohu pripravujÃº svojÃ­m doktorandskÃ½m Å¡tÃºdiom. Z inÃ©ho pohadu ide totiÅ¾ o vÃ½skum, ktorÃ½ je podstatnou nÃ¡plou ich Å¡tÃºdia. JednÃ½m z prejavov fungujÃºcej vÃ½skumnej innosti na pracovisku je seminÃ¡r. SeminÃ¡re, ktorÃ© sa uskutoujÃº na Fakulte informatiky a informanÃ½ch technolÃ³giÃ­ Slovenskej technickej univerzity v Bratislave v rÃ¡mci doktorandskÃ©ho Å¡tÃºdia sa zameriavajÃº na rÃ´zne oblasti programovÃ½ch a informanÃ½ch systÃ©mov. V prvom zvÃ¤zku Å tÃºdiÃ­ sme podchytili seminÃ¡r venovanÃ½ nÃ¡vrhovÃ½m vzorom a v druhom seminÃ¡r venovanÃ½ webovej inteligencii. V treom sa seminÃ¡r sÃºstreoval na podstatu softvÃ©rovej architektÃºry. V tomto zvÃ¤zku sme zostali pri tÃ©me softvÃ©rovÃ½ch systÃ©mov. Zvolili sme pohad, v ktorom je architektÃºra sÃ­ce vÃ½znamnÃ½m, ale len jednÃ½m z viacerÃ½ch podstatnÃ½ch pojmov. Pohad, ktorÃ½ sme v tejto knihe podrobili skÃºmaniu, nazerÃ¡ na tvorbu softvÃ©rovÃ½ch systÃ©mov cez prizmu softvÃ©rovÃ½ch paradigiem. NaÅ¡ou ambÃ­ciou bolo sprÃ­stupni zÃ¡ujemcom o softvÃ©rovÃ© inÅ¾inierstvo vybranÃ© tÃ©my a tÃ½m zdiea vÃ½sledky seminÃ¡rov a tvorivÃ©ho prÃ­stupu Å¡tudentov k jednotlivÃ½m tÃ©mam v rÃ¡mci diskusiÃ­. VÃ½skumnÃ© texty v tejto publikÃ¡cii sÃº vhodnÃ© aj pre Å¡tudentov alÅ¡Ã­ch Å¡tudijnÃ½ch programov v odboroch ako napr. informatika, aplikovanÃ¡ informatika, informanÃ© systÃ©my, i umelÃ¡ inteligencia a to v Å¡tudijnÃ½ch programoch uskutoovanÃ½ch na Slovenskej technickej univerzite v Bratislave a aj na inÃ½ch univerzitÃ¡ch. PublikÃ¡cia pozostÃ¡va z dvoch dielov. V prvom (Diel 1: SoftvÃ©rovÃ© paradigmy) sa sÃºstreujeme na prevlÃ¡dajÃºce spÃ´soby opisu a navrhovania softvÃ©rovÃ½ch systÃ©mov na rÃ´znych Ãºrovniach abstrakcie. DruhÃ½ (Diel 2: VybranÃ© tÃ©my programovÃ½ch a informanÃ½ch systÃ©mov) obsahuje sedem Å¡tÃºdiÃ­, ktorÃ© diskutujÃº a analyzujÃº vybranÃ© otvorenÃ© vedeckÃ© problÃ©my z dynamicky sa rozvÃ­jajÃºcej oblasti programovÃ½ch systÃ©mov so Å¡peciÃ¡lnym dÃ´razom na programovÃ© informanÃ© systÃ©my aj v spojitosti s Internetom."
43,214,0.546,Objektovo orientovanÃ© programovanie v C++,"5.4 StatickÃ© polia objektov Predstavme si, Å¾e chceme vytvoriÅ¥ statickÃ© jednorozmernÃ© pole objektov triedy moja trieda s poÄtom prvkov n. Ako to urobÃ­me? OdpoveÄ zÃ¡visÃ­ od toho, ako vyzerÃ¡ konÅ¡truktor triedy. 1. Ak mÃ¡ trieda konÅ¡truktor bez parametrov, vytvorÃ­me pole typu moja trieda jednoducho tak, ako vytvÃ¡rame pole Ä¾ubovoÄ¾nÃ©ho inÃ©ho dÃ¡tovÃ©ho typu, t. j. moja trieda pole[n];"
240,35,0.546,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Povzbudenie na zÃ¡ver Programy uvedenÃ© v tejto kapitole sÃº ako ukÃ¡Å¾ka pestrosti problÃ©mov, ktorÃ© moÅ¾no programovanÃ­m (v jazyku C) rieÅ¡iÅ¥. V nasledujÃºcich kapitolÃ¡ch budeme na ukÃ¡Å¾kovÃ½ch prÃ­kladoch a ÃºlohÃ¡ch pre samostatnÃº prÃ¡cu spoznÃ¡vaÅ¥ prvky programovania v jazyku C. PreberanÃ© princÃ­py nie sÃº Å¡pecifickÃ© len pre jazyk C ale sÃº do veÄ¾kej miery pouÅ¾iteÄ¾nÃ© aj pri programovanÃ­ v inÃ½ch programovacÃ­ch jazykoch, nielen preto, Å¾e jazyk C poslÃºÅ¾il ako zÃ¡klad mnohÃ½m ÄalÅ¡Ã­m jazykom, ale najmÃ¤ preto, Å¾e koncepty ako premennÃ¡, podmienka, iterÃ¡cia (cyklus), funkcia, rekurzia, pole, reÅ¥azec a smernÃ­k sÃº vÅ¡eobecnÃ© âplatnÃ©â koncepty, ktorÃ© sa pouÅ¾Ã­vajÃº prakticky vÅ¡ade aj v kaÅ¾dodennom Å¾ivote. Nakoniec priateÄ¾skÃ© upozornenie: âProgramovanie nie je Å¡port pre divÃ¡kov.â, inÅ¡pirovanÃ© vÃ½rokom (o matematike), ktorÃ½ vyslovil svetoznÃ¡my maÄarskÃ½ matematik GyÃ¶rgy PÃ³lya (1887-1985). LepÅ¡ie programovaÅ¥ sa nauÄÃ­te jedine tak, Å¾e prestanete byÅ¥ divÃ¡kmi, ktorÃ­ len ÄÃ­tajÃº knihy a internetovÃ© fÃ³ra, ale zaÄnete pÃ­saÅ¥ zdrojovÃ½ kÃ³d vlastnÃ½mi rukami, nohami, nosom alebo akokoÄ¾vek inak bez toho, aby ste hotovÃ© kÃ³dy opisovali z knÃ­h alebo kopÃ­rovali z internetu... Prajeme veÄ¾a Ãºspechov!"
59,351,0.546,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Oba konceptuÃ¡lne vektory t Pï¨ x ï© a tï¨ï¢x ï© Pï¨ x ï© mÃ´Å¾u byÅ¥ rekognoskovanÃ© pomocou âÄistiacejâ procedÃºry. Pre naÅ¡e ÄalÅ¡ie ÃºÄely Å¡tÃºdia procesov uvaÅ¾ovania v rÃ¡mci predikÃ¡tovej logiky a ich distribuovanej reprezentÃ¡cie je tento prÃ­stup zbytoÄne zloÅ¾itÃ½, pouÅ¾Ã­vanie konceptuÃ¡lneho vektora t(ï¢x) pre reprezentÃ¡ciu symbolu (ï¢x) v podstate len zbytoÄne komplikuje proces rekognoskÃ¡cie zloÅ¾enÃ½ch konceptuÃ¡lnych vektorov obsahujÃºcich ako zloÅ¾ku t(ï¢x). Preto opustÃ­me od explicitnÃ©ho pouÅ¾Ã­vania symbolu (ï¢x), jeho vÃ½znam bude substituovanÃ½ pouÅ¾Ã­vanÃ­m âuniverzÃ¡lnej premennejâ x, t. j. predikÃ¡t P(x) obsahujÃºci univerzÃ¡lnu premennÃº x sa interpretuje ako ï¨ ï¢x ï© P ï¨ x ï© , mÃ´Å¾eme teda s urÄitou obozretnosÅ¥ou pouÅ¾Ã­vaÅ¥ âformuluâ"
66,14,0.546,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"2.1 RelaÄnÃ½ dÃ¡tovÃ½ model RelaÄnÃ½ dÃ¡tovÃ½ model bol predstavenÃ½ matematikom Edgarom Frankom Coddom v roku 1970 a je popÃ­sanÃ½ v ÄlÃ¡nku [1]. V rÃ¡mci relaÄnÃ©ho modelu uvaÅ¾ujeme o neusporiadanej mnoÅ¾ine, kde dÃ¡ta sÃº uloÅ¾enÃ© v relÃ¡ciÃ¡ch/tabuÄ¾kÃ¡ch (z angl. relation). V tejto Äasti skript budÃº pouÅ¾Ã­vanÃ© obidva pojmy (relÃ¡cia, tabuÄ¾ka) kvÃ´li zÃ­skaniu prehÄ¾adu aj druhÃ©ho nÃ¡zvoslovia, ktorÃ© je viazanÃ© na relaÄnÃ½ dÃ¡tovÃ½ model. V Äasti, kde je popÃ­sanÃ© SQL a fungovanie databÃ¡zovÃ½ch systÃ©mov je pouÅ¾Ã­vanÃ½ uÅ¾ len pojem tabuÄ¾ka. Medzi zÃ¡kladnÃ½ komponent, z ktorÃ©ho sa skladÃ¡ relaÄnÃ½ dÃ¡tovÃ½ model je relÃ¡cia/tabuÄ¾ka. KaÅ¾dÃ¡ relÃ¡cia/tabuÄ¾ka musÃ­ v rÃ¡mci databÃ¡zy obsahovaÅ¥ unikÃ¡tne meno. Nie je moÅ¾nÃ© aby dve relÃ¡cie/tabuÄ¾ky obsahovali rovnakÃ© meno. Medzi zÃ¡kladnÃ© pojmy v rÃ¡mci relÃ¡cie sÃº:"
369,166,0.546,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.26. SumÃ¡rna zÃºÄtovacia faktÃºra InÃ½m prÃ­kladom je faktoringovÃ¡ spoloÄnosÅ¥ (pozri 5. kapitolu), ktorÃ¡ mÃ¡ s partnerom uzavretÃ½ch viacero zmlÃºv podÄ¾a krajiny vÃ½vozu tovaru (pre kaÅ¾dÃº krajinu mÃ´Å¾u platiÅ¥ inÃ© obchodnÃ© podmienky a rizikÃ¡ financovania). Partnerovi vÅ¡ak mÃ´Å¾e mesaÄne posielaÅ¥ jednu zÃºÄtovaciu faktÃºru, ktorÃ¡ obsahuje zÃ¡vÃ¤zky za jednotlivÃ© zmluvy. Ako ÄalÅ¡Ã­ prÃ­klad mÃ´Å¾e slÃºÅ¾iÅ¥ vÃ½plata Å¡tÃ¡tnych prÃ­spevkov poberateÄ¾ovi prÃ­spevkov. PoberateÄ¾ mÃ´Å¾e poberaÅ¥ viacero Å¡tÃ¡tnych prÃ­spevkov (naprÃ­klad prÃ­davky na deti, rodiÄovskÃ½ prÃ­spevok, prÃ­spevok na bÃ½vanie a inÃ©). Pre organizÃ¡ciu, ktorÃ¡ vyplÃ¡ca Å¡tÃ¡tne prÃ­spevky, by z dÃ´vodu bankovÃ½ch poplatkov bolo neekonomickÃ© posielaÅ¥ kaÅ¾dÃ½ prÃ­spevok osobitnou platbou. Z uvedenÃ©ho dÃ´vodu sa vytvÃ¡ra sumÃ¡rny prÃ­spevok, ktorÃ½ spoÄÃ­ta vÃ½Å¡ky jednotlivÃ½ch prÃ­spevkov v danom obdobÃ­. Tento sumÃ¡rny prÃ­spevok zahÅÅa aj zÃ¡vÃ¤zky poberateÄ¾a prÃ­spevkov, naprÃ­klad neoprÃ¡vnene vyplatenÃ© prÃ­spevky v predchÃ¡dzajÃºcich obdobiach (keÄ naprÃ­klad jedno z detÃ­ predÄasne ukonÄilo Å¡tÃºdium a rodiÄia tÃºto skutoÄnosÅ¥ nahlÃ¡sili aÅ¾ neskÃ´r). Obr. 3.27 poskytuje vzor na zÃºÄtovanie zÃ¡vÃ¤zkov, v ktorom trieda ZÃ¡vÃ¤zok reprezentuje oba druhy zÃ¡vÃ¤zkov: zÃ¡vÃ¤zok partnera aj zÃ¡vÃ¤zok voÄi partnerovi. Obr. 3.28 ukazuje variant vzoru, v ktorom sÃº tieto druhy zÃ¡vÃ¤zkov evidovanÃ© osobitne."
94,266,0.546,Sprievodca svetom vedeckÃ©ho publikovania,"8.2.1 DlhodobÃ© uchovÃ¡vanie dÃ¡t Z hÄ¾adiska dlhodobÃ©ho skladovania je elektronickÃ¡ podoba informÃ¡ciÃ­ eÅ¡te krehkejÅ¡ia ako papierovÃ¡. Kniha vytlaÄenÃ¡ na kvalitnom papieri vydrÅ¾Ã­ storoÄia, Äo zÄaleka neplatÃ­ pre CD nosiÄe, pevnÃ© disky a vÃ¤ÄÅ¡inu mÃ©diÃ­, na ktorÃ½ch sa uchovÃ¡vajÃº elektronickÃ© sÃºbory. MalÃ¡ chyba spÃ´sobenÃ¡ poÅ¡kodenÃ­m alebo starnutÃ­m materiÃ¡lu mÃ´Å¾e znehodnotiÅ¥ veÄ¾kÃ© mnoÅ¾stvo dÃ¡t. Jednou z ciest, ako zabrÃ¡niÅ¥ degradÃ¡cii elektronickÃ½ch dÃ¡t, je systÃ©m LOCKSS121 (Lots of Copies Keep Stuff Safe â mnoho kÃ³piÃ­ zaruÄuje sÃºborom bezpeÄnosÅ¥), projekt Stanfordovej univerzity z roku 1999, ktorÃ½ funguje na bÃ¡ze otvorenÃ©ho softvÃ©ru. KniÅ¾nice zapojenÃ© do aliancie LOCKSS spoloÄnÃ½mi silami spravujÃº elektronickÃ½ obsah (naprÃ­klad elektronickÃ© vedeckÃ© Äasopisy po ukonÄenÃ­ predplatnÃ©ho) uskladnenÃ½ na rÃ´znych miestach v mnohÃ½ch kÃ³piÃ¡ch, priÄom tieto kÃ³pie sa neustÃ¡le porovnÃ¡vajÃº, aby sa zistili a mohli opraviÅ¥ prÃ­padnÃ© chyby v dokumentoch. LOCKSS tieÅ¾ zabezpeÄuje neustÃ¡ly prÃ­stup k obsahu aj v prÃ­pade, Å¾e by bol zo strÃ¡nok vydavateÄ¾a z akÃ½chkoÄ¾vek prÃ­Äin nedostupnÃ½. Okrem toho systÃ©m LOCKSS zabezpeÄuje dynamickÃº migrÃ¡ciu dokumentov do novÃ½ch formÃ¡tov, aby sa aj po rokoch dali"
393,113,0.545,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Predspracovanie dÃ¡t Hlavnou Ãºlohou predspracovania dÃ¡t je transformÃ¡cia zaznamenanÃ½ch zÃ¡znamov do pouÅ¾iteÄ¾nej formy pre neskorÅ¡ie pouÅ¾itie. S tÃ½mto cieÄ¾om sÃºvisÃ­ najmÃ¤ preÄistenie a kompresia dÃ¡t. PreÄistenie dÃ¡t vymaÅ¾e takÃ© poloÅ¾ky webovÃ½ch zÃ¡znamov, ktorÃ© sÃº irelevantnÃ© pre Ãºlohy dolovania v dÃ¡tach. V Å¡tandardnom prÃ­pade sa maÅ¾Ãº dva typy dÃ¡t. PrvÃ½ typ sÃº poloÅ¾ky zaznamenanÃ© z dÃ´vodu prÃ­stupu ku grafickÃ½m, zvukovÃ½m, video a mnoÅ¾stvu inÃ½ch multimediÃ¡lnych sÃºborov. ÄalÅ¡Ã­m typom poloÅ¾iek na zmazanie sÃº poloÅ¾ky generovanÃ© webovÃ½mi agentami, resp. webovÃ½mi pavÃºkmi. TaktieÅ¾ je moÅ¾nÃ© zo zÃ¡znamov vylÃºÄiÅ¥ niektorÃ© typy sÃºborov ako aj metÃ³dy transferu GET/POST/HEAD."
393,540,0.545,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"V zÃ¡sade sa dÃ¡ povedaÅ¥, Å¾e sme rozdelili pohÄ¾ad na znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov na dve zÃ¡kladnÃ© skupiny, od ktorÃ½ch sa odvÃ­jajÃº rÃ´zne problÃ©my. KonkrÃ©tne ide o: Â znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov formou CASE nÃ¡strojov a Â znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov, resp. ich ÄastÃ­ pomocou samotnÃ©ho implementaÄnÃ©ho jazyka. Postupne sme identifikovali problÃ©my s viditeÄ¾nosÅ¥ou vzorov v celkovom nÃ¡vrhu, Äo je spojenÃ© s nÃ¡vrhom a implementÃ¡ciou prehÄ¾adnej a Å¡iroko pouÅ¾iteÄ¾nej notÃ¡cie a s pouÅ¾itÃ­m mikroarchitektÃºr, ktorÃ© sÃº eÅ¡te i dnes pomerne nejasne definovanÃ© vo vÅ¡eobecnosti a tieÅ¾ chÃ½ba definÃ­cia, Äi uÅ¾ formÃ¡lna alebo semiformÃ¡lna, skupÃ­n spolupracujÃºcich vzorov vo forme definÃ­ciÃ­ mikroarchitektÃºr. ZaujÃ­mavÃ© sa zdÃ¡ vytvorenie katalÃ³gu mikroarchitektÃºr ako skupÃ­n spolupracujÃºcich vzorov, priÄom Å¡truktÃºra katalÃ³gu by mohla byÅ¥ podobnÃ¡ Å¡truktÃºre sÃºÄasnÃ½ch katalÃ³gov nÃ¡vrhovÃ½ch vzorov."
195,71,0.545,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Spomedzi najÄastejÅ¡ie zaznamenÃ¡vanÃ½ch interakciÃ­ programÃ¡tora vo vÃ½vojovom prostredÃ­ mÃ´Å¾eme spomenÃºÅ¥ nasledujÃºce, rozdelenÃ© podÄ¾a ÄastÃ­ alebo pouÅ¾itia nÃ¡stroja, kedy ich sledujeme: - Editor zdrojovÃ©ho kÃ³du: o pozÃ­cia textovÃ©ho kurzora v sÃºbore zdrojovÃ©ho kÃ³du, o aktuÃ¡lne zvolenÃ½ element zdrojovÃ©ho kÃ³du (metÃ³da, trieda, premennÃ¡), o aktuÃ¡lne zobrazenÃ½ rozsah riadkov sÃºboru, o zmena znaku, riadku alebo elementu v sÃºbore, o navigÃ¡cia k definÃ­cii pouÅ¾itÃ©ho elementu, o kopÃ­rovanie, prilepenie alebo vystrihnutie fragmentu zdrojovÃ©ho kÃ³du. - Strom Å¡truktÃºry projektu: o zaloÅ¾enie novÃ©ho projektu, o otvorenie projektu alebo sÃºboru zdrojovÃ©ho kÃ³du, o pridanie novÃ©ho sÃºboru, zmazanie sÃºboru, o prepnutie sa medzi sÃºbormi zdrojovÃ©ho kÃ³du. - VyhÄ¾adÃ¡vanie: o vyhÄ¾adanie vÃ½razu, zÃ­skanie vÃ½sledkov, o prezeranie vÃ½sledkov a navigÃ¡cia zo zvolenÃ©ho vÃ½sledku do zdrojovÃ©ho kÃ³du, o nahradenie vÃ½razov novÃ½m vÃ½razom. - Ladenie zdrojovÃ©ho kÃ³du: o odchytenie miesta zdrojovÃ©ho kÃ³du (angl. breakpoint), o posunutie sa o krok Äalej, o zaloÅ¾enie sledovania premennej, o zmena hodnoty premennej poÄas vykonÃ¡vania."
94,246,0.545,Sprievodca svetom vedeckÃ©ho publikovania,"Hranice medzi tÃ½mito oblasÅ¥ami moÅ¾no niekedy len Å¥aÅ¾ko oddeliÅ¥ (naprÃ­klad Ãºspechy v medicÃ­nskych vÃ½skumoch vedÃº k lepÅ¡ej kvalite Å¾ivota a nepriamo ovplyvnia aj produktivitu prÃ¡ce v spoloÄnosti). Tieto aktivity sa realizujÃº od polovice 20. storoÄia a impulzom bolo zrejme aj poznanie, Å¾e nie vÅ¡etky vÃ½stupy publikovanÃ© vo vedeckÃ½ch Äasopisoch s vysokÃ½m citaÄnÃ½m impaktom prinÃ¡Å¡ajÃº spoloÄnosti benefity ÃºmernÃ© ich akademickÃ©mu oceneniu. VedeckÃ½ vÃ½skum je do veÄ¾kej miery zÃ¡vislÃ½ od Ãºrovne financovania, preto je potrebnÃ© vziaÅ¥ do Ãºvahy aj kvalitu vzÅ¥ahov s hodnotiacou a decÃ­znou sfÃ©rou. Klasicky uvÃ¡dzanÃ½m prÃ­kladom je vzÅ¥ah rozvojovÃ½ch krajÃ­n k Å¾ivotnÃ©mu prostrediu, ktorÃ½ sa menÃ­ na uvedomelejÅ¡Ã­ vÄaka Å¡irokej spoloÄenskej diskusii, prezentÃ¡ciÃ¡m, filmom a aktivizmu, priÄom len samotnÃ© zverejnenie vÃ½stupov environmentÃ¡lnych vÃ½skumov nepostaÄovalo. KolektÃ­v vedcov zo skupiny britskÃ½ch univerzÃ­t Russel Group (Mollas-Gallart et al. 2002) vyvÃ­jal a uverejnil sÃºbor analytickÃ½ch ukazovateÄ¾ov, tzv. SMART metriky, ktorÃ© sÃº jednoduchÃ©, merateÄ¾nÃ©, vÅ¡eobecne akceptovateÄ¾nÃ©, relevantnÃ©, spoÄ¾ahlivÃ© a reprodukovateÄ¾nÃ© a moÅ¾no pomocou nich zmeraÅ¥ multidimenzionÃ¡lnosÅ¥ spoloÄenskÃ©ho dosahu vedy. Pri stanovovanÃ­ vhodnÃ½ch vÅ¡eobecne uplatniteÄ¾nÃ½ch indikÃ¡torov je potrebnÃ© vziaÅ¥ do Ãºvahy mnoho ÄalÅ¡Ã­ch faktorov, naprÃ­klad: vzÅ¥ah sÃºkromnÃ©ho a verejnÃ©ho sektora, vzÅ¥ah internacionÃ¡lneho a nÃ¡rodnÃ½ch Å¡pecifÃ­k, ÄasovÃ½ rozmer hodnotenia, t. j. prÃ­nos v kratÅ¡om alebo dlhÅ¡om Äasovom horizonte atÄ., priÄom odbornÃ½mi posudzovateÄ¾mi mÃ´Å¾u byÅ¥ len tÃ­my zloÅ¾enÃ© so zÃ¡stupcov viacerÃ½ch profesiÃ­. Okrem konkrÃ©tnej Å¡pecifickej vednej disciplÃ­ny je potrebnÃ© aj sociologickÃ© a historickÃ© posÃºdenie sledovanÃ½ch dÃ¡t a realizovanÃ½ch analÃ½z. NovÃ½ prÃ­stup k vyuÅ¾itiu vedy v prÃ­pade posudzovania neistÃ½ch faktov a vzÃ¡jomne spornÃ½ch hodnÃ´t v situÃ¡ciÃ¡ch vyÅ¾adujÃºcich naliehavÃ© rozhodnutia predstavuje post-normal science (post-normÃ¡lna veda), alebo âkritickÃ¡ vedaâ, âveda preÅ¾itiaâ. TermÃ­n definovali v devÃ¤Å¥desiatych rokoch minulÃ©ho storoÄia Silvio Funtowicz a Jerome R. Ravetz ako moÅ¾nÃº reakciu na analÃ½zy rizÃ­k, nÃ¡kladov a prÃ­nosov vedeckÃ©ho vÃ½skumu. AmerickÃ½ projekt zameranÃ½ na meranie vplyvu vÃ½skumu na inovÃ¡cie a konkurencieschopnosÅ¥ v oblasti vedy a novÃ½ch technolÃ³giÃ­ STAR METRICS106 sleduje okrem inÃ©ho efektivitu investÃ­ciÃ­ federÃ¡lnej vlÃ¡dy USA do vÃ½skumu a vÃ½voja (pre"
130,528,0.545,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Online informaÄnÃ© systÃ©my. MÃ´Å¾e Ã­sÅ¥ napr. o veÄ¾kÃ© informaÄnÃ© portÃ¡ly, ktorÃ© slÃºÅ¾ia ako bÃ¡za znalostÃ­ v nejakej korporÃ¡cii. Zamestnanci, ktorÃ­ tento systÃ©m pouÅ¾Ã­vajÃº sa zrejme Å¡pecializujÃº iba na urÄitÃº oblasÅ¥ a je preto vhodnÃ©, aby pre nich systÃ©m dokÃ¡zal filtrovaÅ¥ len relevantnÃ© informÃ¡cie."
130,36,0.545,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"SÃºÄasti Produkt â vÃ½sledok volania vÃ½robnej metÃ³dy â abstraktnÃ¡ nadtrieda vytvÃ¡ranÃ½ch objektov (produktov) alebo rozhranie, ktorÃ© implementujÃº vytvÃ¡ranÃ© objekty. KonkrÃ©tnyProdukt â konkrÃ©tna trieda, ktorej inÅ¡tancie vytvÃ¡ra konkrÃ©tny vÃ½robca. VÃ½robca â nadtrieda, ktorÃ¡ definuje vÃ½robnÃº metÃ³du, ktorÃ¡ musÃ­ byÅ¥ implementovanÃ¡, resp. mÃ´Å¾e byÅ¥ prepÃ­sanÃ¡ (override) konkrÃ©tnymi vÃ½robcami (nutnosÅ¥ prepÃ­sania tejto metÃ³dy zÃ¡visÃ­ od toho Äi je abstraktnÃ¡, alebo mÃ¡ implicitnÃº implementÃ¡ciu). KonkrÃ©tnyVÃ½robca â implementuje alebo prepisuje vÃ½robnÃº metÃ³du, v ktorej realizuje tvorbu objektov (produktov)."
205,96,0.545,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy GNU Wget6 je program vytvorenÃ½ v roku 1996, ktorÃ½ podporuje sÅ¥ahovanie sÃºborov cez HTTP, HTTPS a FTP protokoly. MÃ¡ podobnÃº funkcionalitu ako HTTrack, nemÃ¡ vÅ¡ak grafickÃ© rozhranie [4]. 5.6.2 WebovÃ© archÃ­vy JednoduchÃ½m typom archÃ­vu je sÃºborovÃ½ systÃ©m, kde sa odkazy na dokumenty konvertujÃº na relatÃ­vne. Je zaloÅ¾enÃ½ na archivovanÃ­ sÃºborov. HypertextovÃ¡ navigÃ¡cia sa vykonÃ¡va v rÃ¡mci lokÃ¡lneho sÃºborovÃ©ho systÃ©mu. VyuÅ¾Ã­va sa na archivovanie jednej strÃ¡nky alebo len v malom meradle. Pre archivovanie vo veÄ¾kom sa vyuÅ¾Ã­vajÃº archÃ­vy zaloÅ¾enÃ© na odpovediach servera. Odpovede zo servera sÃº uloÅ¾enÃ© kontajnerovÃ½ch sÃºboroch vo formÃ¡te WARC. Ide o Å¡tandardizovanÃ½ formÃ¡t, ktorÃ½ agreguje viacerÃ© zdroje do jednÃ©ho sÃºboru. Tento prÃ­stup vyÅ¾aduje webovÃ½ server, ktorÃ½ vytiahne zo sÃºborov obsah a zobrazÃ­ pouÅ¾Ã­vateÄ¾ovi. SchÃ©ma nÃ¡zvov (ako aj parametrov dynamickÃ½ch strÃ¡nok) sa zachovÃ¡va a umoÅ¾Åuje navigÃ¡ciu po strÃ¡nkach tak, ako ju preliezli [7]. 5.6.3 Prehliadanie a vyhÄ¾adÃ¡vanie vo webovÃ½ch archÃ­voch Na prehliadanie uloÅ¾enÃ©ho obsahu v podobe WARC sÃºborov slÃºÅ¾i nÃ¡stroj wayback7. Ide o implementÃ¡ciu aplikÃ¡cie The Internet Archive Wayback Machine napÃ­sanÃº v jazyku java. ProdukÄnÃº verziu Wayback Machine implementovali v jazyku perl, priÄom vznikla motivÃ¡cia verejnej distribÃºcie aplikÃ¡cie ako open-source a v roku 2005 vznikla prvÃ¡ voÄ¾ne dostupnÃ¡ verzia. AplikÃ¡cia dokÃ¡Å¾e pracovaÅ¥ vo viacerÃ½ch mÃ³doch, ako samotnÃ¡ aplikÃ¡cia na jednom uzle, tak aj ako distribuovanÃ½ systÃ©m s archÃ­vmi na viacerÃ½ch uzloch. Zobrazenie, resp. vyhÄ¾adanie strÃ¡nky sa uskutoÄÅuje na zÃ¡klade URL adresy. TextovÃ© vyhÄ¾adÃ¡vanie vo webovÃ½ch archÃ­voch umoÅ¾Åuje nÃ¡stroj NutchWAX8, ktorÃ½ beÅ¾Ã­ na platforme Hadoop. Je potrebnÃ© vytvoriÅ¥ index z WARC sÃºborov, nad ktorÃ½m sa vykonÃ¡vajÃº dopyty. 5.6.4 Archivovanie hlbokÃ©ho webu NÃ¡stroj DeepArc9 vyvinula iniciatÃ­va National Library of France na archivovanie databÃ¡z zo strÃ¡nok, ktorÃ© poskytujÃº prÃ­stup k digitÃ¡lnym objektom (knihy, ÄlÃ¡nky, obrÃ¡zky atÄ.) - tzv. dokumentÃ¡rne brÃ¡ny. Opisy a identifikÃ¡tory objektov sÃº uloÅ¾enÃ© v relaÄnej databÃ¡ze a samotnÃ© objekty sÃº uloÅ¾enÃ© v sÃºborovom systÃ©me. DeepArc musÃ­ byÅ¥ nainÅ¡talovanÃ½ na serveri vlastnÃ­ka strÃ¡nok, ktorÃ½ pomocou nÃ¡stoja zmigruje Å¡truktÃºru a obsah databÃ¡zy na cieÄ¾ovÃ½ otvorenÃ½ a Å¡trukturovanÃ½ formÃ¡t XML. NÃ¡sledne moÅ¾no zÃ­skaÅ¥ metaÃºdaje s prÃ­sluÅ¡nÃ½mi objektami zo strÃ¡nky. PrÃ­stup k takejto XML databÃ¡ze potom poskytuje nÃ¡stroj Xing10. Vytvorili ho v rÃ¡mci"
43,155,0.545,Objektovo orientovanÃ© programovanie v C++,"PrÃ­klad. Naprogramujme jednoduchÃº hru pre dvoch hrÃ¡Äov, v ktorej jeden zadÃ¡ nejakÃ© slovo a poÄet pokusov a druhÃ½ sa potom snaÅ¾Ã­ toto slovo uhÃ¡dnuÅ¥ tak, Å¾e tipuje pÃ­smenÃ¡, priÄom nesmie prekroÄiÅ¥ danÃ½ poÄet pokusov. Program zorganizujme tak, Å¾e hlavnÃ½ program bude komunikovaÅ¥ s hrÃ¡Äom, ktorÃ½ zadÃ¡va slovo, potom sa obrazovka vymaÅ¾e a spustÃ­ sa samostatnÃ¡ funkcia Hra pre druhÃ©ho hrÃ¡Äa, ktorÃ½ bude slovo hÃ¡daÅ¥. Funkcia Hra bude maÅ¥ dva parametre â reÅ¥azec s, ktorÃ½ reprezentuje hÃ¡danÃ© slovo, a celÃ© ÄÃ­slo pocet, ktorÃ© urÄuje maximÃ¡lny poÄet pokusov. Funkcia dynamicky alokuje jednorozmernÃ© pole znakov hadanka s rovnakou dÄºÅ¾kou, ako mÃ¡ parameter s. Na zaÄiatku sÃº vÅ¡etky znaky v Åom rovnÃ© znaku â.â a postupne sa prepisujÃº pÃ­smenami, ktorÃ© hrÃ¡Ä uÅ¾ uhÃ¡dol. V kaÅ¾dom kroku"
393,520,0.545,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Jazyk JAVA prebral istÃ© vlastnosti z jazyka Beta, detailnejÅ¡ie sÃº tieto vlastnosti opÃ­sanÃ© v Äasti 9.4 v analÃ½ze prostriedkov jazyka Beta. Jazyk JAVA umoÅ¾Åuje rÃ´zne spÃ´soby jeho rozÅ¡Ã­renia napr. s vyuÅ¾itÃ­m reflexie. Autori ÄlÃ¡nku (Lahire & Quintian, 2003) identifikujÃº istÃ© moÅ¾nosti rozÅ¡Ã­renia jazyka JAVA, priÄom tieto rozÅ¡Ã­renia nie sÃº priamo urÄenÃ© pre podporu nÃ¡vrhovÃ½ch vzorov, ale pre podporu znovupouÅ¾itia v objektovo â orientovanÃ½ch jazykoch vÅ¡eobecne. JednotlivÃ© rozÅ¡Ã­renia jazyka pre podporu znovupouÅ¾itia sÃº navrhnutÃ© tak, aby klÃ¡dli Äo najmenÅ¡ie nÃ¡roky na implementaÄnÃ½ jazyk. TestovacÃ­ prototyp je vytvorenÃ½ pre jazyk JAVA a v kontexte tohto jazyka boli vyberanÃ© i identifikÃ¡tory novodefinovanÃ½ch operÃ¡ciÃ­ a atribÃºtov. NÃ¡zvoslovie je prÃ­buznÃ© s jazykom JAVA, priÄom priamo jazyk JAVA je pouÅ¾itÃ½ iba v Äastiach opisujÃºcich konkrÃ©tnu funkcionalitu danÃ©ho elementu. V nasledujÃºcich Äastiach prejdeme niektorÃ© z rozÅ¡Ã­renÃ­ a uvedieme ich v kontexte znovupouÅ¾itia nÃ¡vrhovÃ½ch vzorov. CieÄ¾om opÃ¤Å¥ bude oddeliÅ¥ vÅ¡eobecnÃ© Äasti vzoru do kniÅ¾nice a pomocou novonavrhnutÃ½ch prostriedkov ich sprÃ­stupniÅ¥ v konkrÃ©tnej aplikÃ¡cii. Autori v ÄlÃ¡nku uvÃ¡dzajÃº prÃ­klad ohÃ½bania vzoru Observer do aplikÃ¡cie s jednoduchÃ½m grafickÃ½m rozhranÃ­m."
190,232,0.544,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Vo svojom kaÅ¾dodennom Å¾ivote si neustÃ¡le vytvÃ¡rame plÃ¡ny, ba dokonca Äasto bez toho, aby sme si to uvedomovali. PlÃ¡nujeme, kedy vstaneme, plÃ¡nujeme kedy sa pÃ´jdeme najesÅ¥ alebo kedy si zapneme televÃ­zor a Äo tam budeme pozeraÅ¥. PlÃ¡nujeme si, Äo a kedy budeme robiÅ¥, ako to budeme robiÅ¥ a akÃ½ vÃ½sledok od danej Äinnosti oÄakÃ¡vame. KeÄ pocÃ­time smÃ¤d automaticky si naplÃ¡nujeme, ako tento problÃ©m vyrieÅ¡iÅ¥. NaplÃ¡nujeme si, Å¾e pÃ´jdeme do kuchyne, kde si nalejeme vodu do pohÃ¡ra a nepijeme sa. Od tohto procesu oÄakÃ¡vame uhasenie smÃ¤du. Bez plÃ¡novania by sme sa nikdy nenapili. PodÄ¾a [2] predchÃ¡dza plÃ¡novanie kaÅ¾dej Äinnosti (pozri obrÃ¡zok 1). Po ukonÄenÃ­ prÃ¡ce zisÅ¥ujeme, Äi sme dosiahli plÃ¡novanÃ½ vÃ½sledok. Ak sa objavili odchÃ½lky, analyzujÃº sa. Z toho nÃ¡sledne plynÃº opatrenia, ktorÃ© by mali v budÃºcnosti priniesÅ¥ lepÅ¡ie plÃ¡novanie a aj vykonanie prÃ¡c."
94,103,0.544,Sprievodca svetom vedeckÃ©ho publikovania,"ZnÃ¡my zoznam predÃ¡torskÃ½ch Äasopisov a vydavateÄ¾ov podozrivÃ½ch z predÃ¡torskÃ½ch praktÃ­k zostavil v roku 2010 knihovnÃ­k Jeffrey Beall z University of Colorado, ktorÃ½ hnutiu otvorenÃ©ho prÃ­stupu vyÄÃ­tal prÃ¡ve konflikt zÃ¡ujmov spojenÃ½ so zlatou cestou (rÃ´zne druhy âpoplatkov za stranuâ vyberajÃº aj mnohÃ© Äasopisy zaloÅ¾enÃ© na predplatnom, tie vÅ¡ak neboli predmetom Beallovho zÃ¡ujmu). Zoznam Äasopisov a vydavateÄ¾ov, vrÃ¡tane kritÃ©riÃ­, podÄ¾a ktorÃ½ch vyberal, zverejnil J. Beall na blogu Scholarly Open Access. Aktualizoval ho (lebo predÃ¡torskÃ© Äasopisy rÃ½chlo vznikajÃº a zanikajÃº) aÅ¾ do januÃ¡ra roku 2017, kedy ho, pravdepodobne kvÃ´li hrozbÃ¡m sÃºdnymi spormi zo strany vydavateÄ¾ov, zruÅ¡il. Svoje skÃºsenosti so svetom predÃ¡torskÃ©ho publikovania opÃ­sal v ÄlÃ¡nku (Beall 2017). Po januÃ¡ri 2017 zostala dostupnÃ¡ iba archÃ­vna verzia zoznamu. Na jej zÃ¡klade vytvorili a aktualizujÃº predÃ¡torskÃ© zoznamy (uÅ¾ anonymne) jednotlivci i skupiny44 (napr. iniciatÃ­va Stop Predatory Journals). V Äeskej republike vznikol projekt AntipredÃ¡tor/Mellivora45, odhaÄ¾ujÃºci pochybnÃ© publikÃ¡cie, ktorÃ© zÃ­skali body v Äeskom systÃ©me hodnotenia vedy. Beallov zoznam a najmÃ¤ jeho extrÃ©mne vyjadrenia Äelili kritike nielen zo strany samotnÃ½ch predÃ¡torskÃ½ch vydavateÄ¾ov, ale aj v rÃ¡mci akademickej a knihovnÃ­ckej obce (Crawford 2014). DÃ´vera v spoÄ¾ahlivosÅ¥ zoznamu poklesla, keÄ medzi skutoÄnÃ½ch predÃ¡torov zaradil aj niektorÃ© poctivÃ©, nÃ­zkonÃ¡kladovÃ© Äasopisy z chudobnejÅ¡Ã­ch krajÃ­n. KÃ½m bol Beallov zoznam"
205,107,0.544,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","VyhÄ¾adÃ¡vanie na webe vÃ©ho adresÃ¡ra bol Yahoo! (Yet Another Hierarchical Officious Oracle)17, ktorÃ½ vznikol roku 1994. WebovÃ© adresÃ¡re vÃ¤ÄÅ¡inou zahÅÅali len hlavnÃº strÃ¡nku a nie jej podstrÃ¡nky. KeÄÅ¾e nedokÃ¡zali udrÅ¾aÅ¥ krok s exponenciÃ¡lnym rastom obsahu na webe, v sÃºÄasnosti sa uÅ¾ masovo nepouÅ¾Ã­vajÃº, hoci podobnÃ© iniciatÃ­vy existujÃº dodnes, ako napr. Open Directory Project18. WebovÃ© adresÃ¡re postupom Äasu nahradili vyhÄ¾adÃ¡vaÄmi, ktorÃ© sÃº zaloÅ¾enÃ© na (invertovanom) indexe dokumentov, t. j. webovÃ½ch strÃ¡nok. StrÃ¡nky pritom nie je potrebnÃ© zadÃ¡vaÅ¥ ruÄne, ale vyuÅ¾Ã­vajÃº sa Å¡pecializovanÃ© programy, tzv. preliezaÄe (angl. web crawler), ktorÃ© ich automaticky prechÃ¡dzajÃº a sÅ¥ahujÃº. PouÅ¾Ã­vatelia zadÃ¡vajÃº dopyty pomocou postupnosti kÄ¾ÃºÄovÃ½ch slov, Äo je v sÃºÄasnosti najrozÅ¡Ã­renejÅ¡ou paradigmou vyhÄ¾adÃ¡vania. JednÃ½m z prvÃ½ch vyhÄ¾adÃ¡vaÄov bol dnes uÅ¾ neexistujÃºci vyhÄ¾adÃ¡vaÄ AltaVista (vznikol v roku 1995). NajznÃ¡mejÅ¡Ã­m a najpouÅ¾Ã­vanejÅ¡Ã­m vyhÄ¾adÃ¡vaÄom sÃºÄasnosti je Google19 (vznikol v roku 1998). KonkurovaÅ¥ sa mu snaÅ¾Ã­ Bing20 od Microsoftu (vznikol v roku 2009, predtÃ½m bol znÃ¡my ako Live Search, resp. MSN Search)."
265,281,0.544,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NÃ¡stroje na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov sa Äasto pouÅ¾Ã­vajÃº nesprÃ¡vne. AkÃ© chyby Äi nedbalosti sa v praxi Äasto vyskytujÃº? Medzi ÄastÃ© chyby a âzlozvykyâ patrÃ­ naprÃ­klad: â¢ NeuvÃ¡dzanie Å¾iadnych (alebo uvÃ¡dzanie nevhodnÃ½ch) commit sprÃ¡v. KaÅ¾dÃ© odovzdanie zdrojovÃ©ho kÃ³du prirodzene reprezentuje nejakÃº zmenu oproti predchÃ¡dzajÃºcemu stavu. Commit sprÃ¡va slÃºÅ¾i na opis tejto zmeny. PokiaÄ¾ tieto opisy nevytvÃ¡rame, prichÃ¡dzame o prehÄ¾ad zmien. â¢ OdovzdÃ¡vanie âviacerÃ½ch vecÃ­ narazâ. Commit by mal byÅ¥ ucelenÃ½ (nemali by sme odovzdÃ¡vaÅ¥ poloviÄatÃ© zmeny), no zÃ¡roveÅ by sa mal venovaÅ¥ len jednej zÃ¡leÅ¾itosti. Niekedy sa vÅ¡ak stÃ¡va, Å¾e do jednÃ©ho odovzdania vÃ½vojÃ¡ri zapracujÃº aj viacero zÃ¡leÅ¾itostÃ­, ktorÃ© spolu vzÃ¡jomne aÅ¾ tak nesÃºvisia. Ak potom chceme vrÃ¡tiÅ¥ zmeny v niektorej z tÃ½chto zÃ¡leÅ¾itostÃ­, musÃ­me vrÃ¡tiÅ¥ aj zmeny v zÃ¡leÅ¾itostiach, ktorÃ© sÃº s Åou zviazanÃ©, ale inak ich vracaÅ¥ nepotrebujeme. â¢ NepouÅ¾Ã­vanie vetiev. Vetvenie verziÃ­ zdrojovÃ©ho kÃ³du je po odovzdaniach (commits) ÄalÅ¡Ã­m uÅ¾itoÄnÃ½m nÃ¡strojom ako oddeliÅ¥ zmeny zdrojovÃ©ho kÃ³du, ktorÃ© spolu nesÃºvisia. PoskytujÃº moÅ¾nosÅ¥ paralelnÃ©ho vÃ½voja a poskytujÃº tak vÃ¤ÄÅ¡iu flexibilitu aj Äo sa tÃ½ka prijÃ­mania zmien do hlavnej vetvy. Ak sa vetvenie nepouÅ¾Ã­va, je sprÃ¡va zdrojovÃ©ho kÃ³du podstatne menej flexibilnÃ¡ a mÃ´Å¾e dochÃ¡dzaÅ¥ k ÄastejÅ¡Ã­m konfliktom. RozpracovanÃ© zmeny Äasto nemÃ´Å¾u byÅ¥ uzatvÃ¡ranÃ© dostatoÄne rÃ½chlo a mÃ´Å¾u blokovaÅ¥ ostatnÃ½ch vÃ½vojÃ¡rov, ktorÃ­ na projekte pracujÃº."
190,377,0.544,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"SpÃ´sob ako zabezpeÄiÅ¥ absolÃºtnu bezchybnosÅ¥ softvÃ©rovÃ½ch produktov v dneÅ¡nej dobe nepoznÃ¡me. Existuje vÅ¡ak mnoÅ¾stvo metÃ³d na zvÃ½Å¡enie kvality produkovanÃ©ho softvÃ©ru. Napriek tomu sa systematicky nevyuÅ¾Ã­vajÃº, najmÃ¤ v malÃ½ch firmÃ¡ch. DÃ´sledkom sÃº problÃ©my s testovanÃ­m a nedostatoÄnÃ¡ kvalita produktov, ktorÃ¡ sa prejavuje sa najmÃ¤ prÃ­tomnosÅ¥ou vÃ¤ÄÅ¡ieho poÄtu chÃ½b. Preto je veÄ¾kou vÃ½zvou pre celÃº informatickÃº komunitu nielen vymÃ½Å¡Ä¾anie novÃ½ch lepÅ¡Ã­ch metÃ³d testovania a zlepÅ¡ovania kvality, ale aj hÄ¾adanie spÃ´sobov ako ich preniesÅ¥ do praxe. Cesta k vÅ¡eobecne kvalitnejÅ¡iemu softvÃ©ru by mohla viesÅ¥ cez skvalitÅovanie nÃ¡strojov pouÅ¾Ã­vanÃ½ch pri jeho vÃ½voji, pretoÅ¾e to, Äo dÃ¡va Ä¾uÄom silu v najrÃ´znejÅ¡Ã­ch oblastiach, sÃº najmÃ¤ efektÃ­vne nÃ¡stroje znÃ¡sobujÃºce schopnosti jednotlivÃ½ch osÃ´b."
195,125,0.544,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Charakteristiky a metriky na vyhodnocovanie odporÃºÄaÄov me vyuÅ¾Ã­vaÅ¥ aspoÅ implicitnÃº spÃ¤tnÃº vÃ¤zbu, ktorÃ¡ spoÄÃ­va v sledovanÃ­ pouÅ¾Ã­vateÄ¾skÃ½ch akciÃ­ (napr. ako Äasto pouÅ¾Ã­vateÄ¾ vyuÅ¾Ã­va alebo odmieta jednotlivÃ© odporÃºÄania). 6.1.5 SpoÄ¾ahlivosÅ¥ Typ charakteristiky: kvalitatÃ­vna, kvantitatÃ­vna SpoÄ¾ahlivosÅ¥ vyjadruje, Äi je systÃ©m schopnÃ½ ponÃºknuÅ¥ aspoÅ nejakÃ© odporÃºÄanie, teda do akej miery sa mÃ´Å¾e pouÅ¾Ã­vateÄ¾ spoÄ¾ahnÃºÅ¥ na to, Å¾e systÃ©m nieÄo odporuÄÃ­. Aby bol odporÃºÄaÄ schopnÃ½ poskytnÃºÅ¥ odporÃºÄanie pri rÃ´znych aktivitÃ¡ch pouÅ¾Ã­vateÄ¾a, musÃ­ najskÃ´r sledovaÅ¥ sprÃ¡vanie pouÅ¾Ã­vateÄ¾a. Takto funguje aj odporÃºÄanie webovÃ½ch strÃ¡nok, keÄ webovÃ½ prehliadaÄ navrhuje strÃ¡nky na zÃ¡klade histÃ³rie navÅ¡tÃ­venÃ½ch odkazov, prÃ­padne histÃ³rie jemu podobnÃ½ch Ä¾udÃ­. Ak systÃ©m nemÃ¡ Å¾iadne informÃ¡cie o pouÅ¾Ã­vateÄ¾ovi, musÃ­ si poradiÅ¥ na zÃ¡klade inÃ½ch dostupnÃ½ch atribÃºtov, napr. informÃ¡cii o prostredÃ­, kde pouÅ¾Ã­vateÄ¾ pracuje (lokalita, jazykovÃ© nastavenia systÃ©mu, verzia operaÄnÃ©ho systÃ©mu a pod.). 6.1.6 NovosÅ¥ Typ charakteristiky: kvalitatÃ­vna, kvantitatÃ­vna NovosÅ¥ predstavuje schopnosÅ¥ odporÃºÄaÄa vysporiadaÅ¥ sa s novÃ½mi vecami. NajÄastejÅ¡ie ide o prÃ­pady, kedy nemÃ¡ eÅ¡te systÃ©m pouÅ¾Ã­vateÄ¾a zmapovanÃ©ho, alebo keÄ pouÅ¾Ã­vateÄ¾ odrazu zmenÃ­ svoj model sprÃ¡vania. Reakcia na prudkÃ© zmeny sprÃ¡vania pouÅ¾Ã­vateÄ¾a je nÃ¡roÄnÃ¡. Jedno z moÅ¾nÃ½ch rieÅ¡enÃ­ je odstrÃ¡niÅ¥ sÃºÄasnÃº bÃ¡zu dÃ¡t a vytvoriÅ¥ si novÃ½ obraz o pouÅ¾Ã­vateÄ¾ovi. TrvalÃ© odstrÃ¡nenie vÅ¡ak nemusÃ­ byÅ¥ vyhovujÃºce, lebo sa mÃ´Å¾e staÅ¥, Å¾e zmena sprÃ¡vania je len doÄasnÃ¡, napr. keÄ je pouÅ¾Ã­vateÄ¾ unavenÃ½ alebo systÃ©m pouÅ¾Ã­va doÄasne inÃ½ pouÅ¾Ã­vateÄ¾. V takom prÃ­pade je vÃ½hodnejÅ¡ie vytvoriÅ¥ novÃ½ model pouÅ¾Ã­vateÄ¾a a priebeÅ¾ne porovnÃ¡vaÅ¥ aktivity s aktivitami v predchÃ¡dzajÃºcom pouÅ¾Ã­vateÄ¾skom modeli. 6.1.7 PriaznivosÅ¥ Typ charakteristiky: kvalitatÃ­vna, kvantitatÃ­vna PriaznivosÅ¥ hovorÃ­ o tom, do akej miery je systÃ©m schopnÃ½ poskytnÃºÅ¥ neoÄakÃ¡vanÃ© a zÃ¡roveÅ sprÃ¡vne odporÃºÄania. Ide o situÃ¡cie, kedy pouÅ¾Ã­vateÄ¾ netuÅ¡Ã­, Äo mÃ¡ robiÅ¥ a odporÃºÄaÄ mu pomÃ´Å¾e pokraÄovaÅ¥. Na rozdiel od novosti, kde sa systÃ©m snaÅ¾Ã­ zmapovaÅ¥ pouÅ¾Ã­vateÄ¾skÃ© preferencie, je pri tomto parametri dÃ´leÅ¾itÃ¡ sprÃ¡vnosÅ¥ odporÃºÄania (v prÃ­pade novosti je skÃ´r dÃ´leÅ¾itÃ© vytvÃ¡ranie modelu pouÅ¾Ã­vateÄ¾a, pri priaznivosti to mÃ´Å¾eme nazvaÅ¥ nÃ¡hoda). Meranie sa uskutoÄÅuje podÄ¾a poÄtu priaznivÃ½ch odporÃºÄanÃ­ poÄas urÄitej doby pouÅ¾Ã­vania systÃ©mu."
111,89,0.543,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"DotaznÃ­ky sÃº jednoduchÃ½m a ÃºÄinnÃ½m spÃ´sobom zÃ­skavania informÃ¡ciÃ­ o pouÅ¾Ã­vateÄ¾och. Äoraz ÄastejÅ¡ie ich vyuÅ¾Ã­vajÃº nielen marketÃ©ri alebo stratÃ©govia, ale aj vÃ½skumnÃ­ci pouÅ¾Ã­vateÄ¾skÃ©ho zÃ¡Å¾itku. MÃ´Å¾u poskytnÃºÅ¥ cennÃ© informÃ¡cie o postojoch, preferenciÃ¡ch, problÃ©moch a skÃºsenostiach pouÅ¾Ã­vateÄ¾ov a poradiÅ¥, ako zlepÅ¡iÅ¥ pouÅ¾Ã­vateÄ¾skÃ½ zÃ¡Å¾itok (UX) vaÅ¡ich webov (produktov Äi sluÅ¾ieb). MÃ´Å¾ete ho pouÅ¾iÅ¥ na rÃ½chle zÃ­skanie informÃ¡ciÃ­ od veÄ¾kej vzorky respondentov, overenie hypotÃ©z, pri rozhodovanÃ­ o ÄalÅ¡Ã­ch funkciÃ¡ch produktu alebo ho mÃ´Å¾ete pouÅ¾iÅ¥ ako prostriedok na uspokojenie zainteresovanÃ½ch strÃ¡n, naprÃ­klad pri prijÃ­manÃ­ rozhodnutÃ­ s vyÅ¡Å¡Ã­m rizikom. To, Äo pouÅ¾Ã­vatelia hovoria, Å¾e robia a to, Äo skutoÄne robia, sa Äasto nezhoduje. Preto by dotaznÃ­ky mali byÅ¥ doplnenÃ© o ÄalÅ¡ie Ãºdaje z inÃ½ch metÃ³d, ktorÃ© sÃº vhodnejÅ¡ie na zachytenie sprÃ¡vania (napr. testovanie pouÅ¾iteÄ¾nosti, test prvÃ©ho kliknutia alebo test hierarchickej Å¡truktÃºry) a Ãºdaje z analÃ½zy webovÃ½ch strÃ¡nok, ak nejakÃ© mÃ¡te. VytvoriÅ¥ dobrÃ½ dotaznÃ­k nie je triviÃ¡lne. NavyÅ¡e, keÄ sa Äasto pouÅ¾Ã­vajÃº nadmerne, spÃ´sobuje to, Å¾e pouÅ¾Ã­vatelia majÃº Äoraz menÅ¡iu motivÃ¡ciu zÃºÄastniÅ¥ sa na vaÅ¡om, alebo akomkoÄ¾vek inom, prieskume. Existuje niekoÄ¾ko webovÃ½ch UX nÃ¡strojov, ktorÃ© vÃ¡m umoÅ¾nia realizovaÅ¥ preferenÄnÃ½ test jednoducho a rÃ½chlo, napr. UXtweak [21], Lyssna [11]."
265,111,0.543,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"KtorÃ© hÄ¾adiskÃ¡ kvality vÃ½voja softvÃ©ru sÃº spravidla fixnÃ© (fixovanÃ©) v prÃ­pade zÃ¡kaznÃ­ckeho softvÃ©ru? Neexistuje jednoznaÄnÃ¡ odpoveÄ, ale istÃ© trendy prevaÅ¾ujÃº. KeÄÅ¾e potreba obstarania novÃ©ho softvÃ©ru bÃ½va Äasto naliehavÃ¡, bÃ½va fixnÃ½m ohraniÄenÃ­m predovÅ¡etkÃ½m Äas (termÃ­n dodania hotovÃ©ho softvÃ©ru)."
59,47,0.543,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 2.5. TrojvrstvovÃ¡ neurÃ³novÃ¡ sieÅ¥, ktorÃ¡ simuluje Booleovu funkciu zadanou primÃ¡rne Tab. 2.2, z ktorej je zostrojenÃ½ pomocou formule (2.9) ja âanalytickÃ½â tvar (2.10). SkrytÃ© neurÃ³ny reprezentujÃº jednotlivÃ© klauzuly z Tab. 2.2, ich disjunkcia je realizovanÃ¡ pomocou vÃ½stupnÃ©ho neurÃ³nu. TÃ¡to neurÃ³novÃ¡ sieÅ¥ mÃ´Å¾e byÅ¥ zjednoduÅ¡enÃ¡ tak, Å¾e prvÃ© dve klauzuly sa spoja do jednej jednoduchÅ¡ej klauzuly, pozri (2.11-12)."
76,42,0.543,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.3 DiskrÃ©tny pravdepodobnostnÃ½ priestor Z ÄlÃ¡nku 1.1 vieme, Å¾e model nÃ¡hodnÃ©ho pokusu je trojica symbolov: (ï, S, P). ï predstavuje mnoÅ¾inu vÅ¡etkÃ½ch potenciÃ¡lne moÅ¾nÃ½ch vÃ½sledkov pokusu, S je systÃ©m podmnoÅ¾Ã­n mnoÅ¾iny ï a modeluje nÃ¡hodnÃ© udalosti. PovedaÅ¥, Å¾e A je nÃ¡hodnÃ¡ udalosÅ¥, je to istÃ©, ako napÃ­saÅ¥ AïS. Symbol P predstavuje pravdepodobnosÅ¥. Pritom P chÃ¡peme ako zobrazenie, ktorÃ© udalostiam A (t. j. prvkom systÃ©mu S) priraÄuje ich pravdepodobnosÅ¥ P(A). ZdÃ´razÅujeme, Å¾e ï· jedna vec je pre udalosti konkrÃ©tneho pokusu vedieÅ¥ stanoviÅ¥ ich pravdepodobnosti, teda pre AïS vedieÅ¥ stanoviÅ¥ hodnotu P(A) tak, aby model sprÃ¡vne popisoval skutoÄnosÅ¥ a ï· druhÃ¡ vec je â poznaÅ¥ vlastnosti, ktorÃ© mÃ¡ kaÅ¾dÃ¡ pravdepodobnosÅ¥. PrvÃ¡ vec je nÃ¡roÄnejÅ¡ia. Aj preto, Å¾e nie je vÅ¾dy jednoduchÃ© postrehnÃºÅ¥, Å¾e v naÅ¡om modelovanÃ­ je nieÄo zlÃ©, Å¾e nieÄo nesedÃ­. Äo sa tÃ½ka druhej veci, teda vlastnostÃ­ pravdepodobnosti vo vÅ¡eobecnosti, tÃº prÃ¡cu uÅ¾ urobili inÃ­. Budeme si vÅ¡Ã­maÅ¥, Äo o tom hovoria vety tejto kapitoly. V tomto ÄlÃ¡nku bude mnoÅ¾ina ï alebo koneÄnÃ¡, alebo ak nekoneÄnÃ¡, tak spoÄÃ­tateÄ¾nÃ¡. Za systÃ©m S mÃ´Å¾eme v tÃ½chto prÃ­padoch vziaÅ¥ systÃ©m vÅ¡etkÃ½ch podmnoÅ¾Ã­n mnoÅ¾iny ï. AkÃ© vlastnosti mÃ¡ (kaÅ¾dÃ¡) pravdepodobnosÅ¥ P na systÃ©me S? MotivÃ¡ciou pre nasledujÃºcu definÃ­ciu sÃº vlastnosti tÃ½ch konkrÃ©tnych pravdepodobnostÃ­, ktorÃ© sme rozoberali v ÄlÃ¡nkoch 1.1 a 1.2. ZÃ­skali sme ich buÄ uplatnenÃ­m klasickej Laplaceovej definÃ­cie, alebo pravdepodobnosti sme chÃ¡pali ako limity postupnostÃ­ relatÃ­vnych poÄetnostÃ­. V oboch prÃ­padoch â keÄ P chÃ¡peme ako zobrazenie â je pravdepodobnosÅ¥ P aditÃ­vna. V definÃ­cii 1.3.1 pouÅ¾ijme zÃ¡pis P( ) namiesto presnÃ©ho P({ }) a toto zjednoduÅ¡enie budeme pouÅ¾Ã­vaÅ¥ aj Äalej. 1.3.1 DefinÃ­cia. PravdepodobnostnÃ½ priestor (ï, S, P) sa nazÃ½va diskrÃ©tny, ak ï je koneÄnÃ¡, t. j. ï = { }, alebo nekoneÄnÃ¡, ale spoÄÃ­tateÄ¾nÃ¡, t. j. ï = { S je systÃ©m vÅ¡etkÃ½ch podmnoÅ¾Ã­n mnoÅ¾iny ï, P: S â â© âª je zobrazenie s vlastnosÅ¥ami: 1. â"
94,248,0.543,Sprievodca svetom vedeckÃ©ho publikovania,"AnalÃ½za prÃ­padovÃ½ch Å¡tÃºdiÃ­ ukÃ¡zala, Å¾e kÄ¾ÃºÄom k ÃºspeÅ¡nÃ©mu zhodnoteniu vedeckÃ½ch poznatkov je Ãºzka interakcia medzi vedou (vedcami) a spoloÄnosÅ¥ou (zainteresovanÃ½mi stranami). ProduktÃ­vne interakcie mÃ´Å¾u byÅ¥ priame (priame kontakty), nepriame (prostrednÃ­ctvom rÃ´znych prezentaÄnÃ½ch aktivÃ­t ako sÃº vÃ½stavy, modely alebo filmy) a finanÄnÃ© (vzÃ¡jomnÃ¡ ekonomickÃ¡ vÃ½mena). Bornmann (2013) uvÃ¡dza zaujÃ­mavÃ© prÃ­klady vÃ½voja novÃ½ch kritÃ©riÃ­ merania prÃ­nosu vedy a vÃ½skumu aj v akademickom prostredÃ­: Spaapen a kol. (Spaapen et al. 2007) navrhli Research Embedment and Performance Profile (REPP), t. j. posudzovanie nasledovnÃ½ch dimenziÃ­ tohto procesu:"
43,319,0.543,Objektovo orientovanÃ© programovanie v C++,"6. PrvkovÃ© operÃ¡tory. Pomocou tÃ½chto operÃ¡torov pristupujeme k prvkom polÃ­, Å¡truktÃºr, tried a objektov. [ ], ., â>, :: 7. SmernÃ­kovÃ© operÃ¡tory. SÃº to operÃ¡tory, pomocou ktorÃ½ch zÃ­skame adresu premennej alebo hodnotu uloÅ¾enÃº na adrese. &, * 8. OperÃ¡tory vstupu a vÃ½stupu. >>, << 9. ÄalÅ¡ie operÃ¡tory. napr. () (volanie funkcie), new, new[ ], delete, delete[ ], sizeof MoÅ¾nosÅ¥ preÅ¥aÅ¾iÅ¥ operÃ¡tory je uÅ¾itoÄnou a zaujÃ­mavou moÅ¾nosÅ¥ou, ktorÃº nÃ¡m C++ ponÃºka. VÄaka nej mÃ´Å¾eme aj s premennÃ½mi naÅ¡ich vlastnÃ½ch dÃ¡tovÃ½ch typov narÃ¡baÅ¥ tak, ako sme zvyknutÃ­ pri Å¡tandardnÃ½ch dÃ¡tovÃ½ch typoch. Vysvetlime si bliÅ¾Å¡ie, o Äo ide. Je naprÃ­klad jasnÃ©, Å¾e dve ÄÃ­sla a a b typu int mÃ´Å¾eme sÄÃ­taÅ¥ tak, Å¾e napÃ­Å¡eme"
369,225,0.543,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ï· AkÃ© sÃº povolenÃ© frekvencie vÃ½pisov pre jednotlivÃ© typy ÃºÄtov. NaprÃ­klad beÅ¾nÃ© ÃºÄty pre prÃ¡vnickÃ© osoby majÃº dennÃ© alebo mesaÄnÃ© vÃ½pisy, zÄ¾avnenÃ© typy beÅ¾nÃ½ch ÃºÄtov majÃº iba mesaÄnÃ© alebo Å¡tvrÅ¥roÄnÃ© vÃ½pisy, ÃºÄty vkladnÃ½ch kniÅ¾iek nemajÃº vÃ½pisy a termÃ­novanÃ© ÃºÄty majÃº vÃ½pisy podÄ¾a doby splatnosti vkladu. ï· AkÃ© sÃº povolenÃ© typ vzÅ¥ahu klienta k ÃºÄtu. NaprÃ­klad beÅ¾nÃ© ÃºÄty majÃº majiteÄ¾a ÃºÄtu, spolumajiteÄ¾a ÃºÄtu (v zÃ¡vislosti od bankovÃ©ho systÃ©mu), disponenta, koreÅ¡pondenta, kÃ½m ÃºÄet vkladnej kniÅ¾ky koreÅ¡pondenta nemÃ¡."
43,383,0.543,Objektovo orientovanÃ© programovanie v C++,"aj poÄet parametrov a takisto typ nÃ¡vratovej hodnoty. Inak povedanÃ© â musÃ­ Ã­sÅ¥ skutoÄne o tÃº istÃº metÃ³du, ktorej deklarÃ¡cia tÃ½m pÃ¡dom musÃ­ byÅ¥ zhodnÃ¡ ako deklarÃ¡cia uvedenÃ¡ v rodiÄovskej triede. Ak by sa zmenila hlaviÄka metÃ³dy, Å¡lo by uÅ¾ o vytvorenie novej verzie metÃ³dy, Äo znamenÃ¡, Å¾e v odvodenej triede by bola stÃ¡le prÃ­tomnÃ¡ aj pÃ´vodnÃ¡ verzia z rodiÄovskej triedy, aj novovytvorenÃ¡ verzia. To mÃ´Å¾e byÅ¥ v istÃ½ch situÃ¡ciÃ¡ch naÅ¡Ã­m cieÄ¾om, ale nejde uÅ¾ o predeï¬novanie metÃ³dy rodiÄovskej triedy. VrÃ¡Å¥me sa k triedam dopravny prostriedok a autobus z kapitoly 8.2. Do triedy dopravny prostriedok pridÃ¡me konÅ¡truktor a deï¬nujeme jej metÃ³du Vypis udaje. class dopravny prostriedok protected: string nazov; int pocet kolies; public: dopravny prostriedok(string n,int p k) {nazov=n; pocet kolies=p k;} void Vypis udaje(); void dopravny prostriedok::Vypis udaje() cout<<nazov<<"" s ""<<pocet kolies<<"" kolesami""<<endl;"
265,30,0.543,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"v porovnanÃ­ naprÃ­klad s programovanÃ­m, sÃº na niÅ¾Å¡ej Ãºrovni abstrakcie ako zÃ¡kladnÃ© koncepty spojenÃ© so softvÃ©rom, jeho vlastnosti, kvalita, modely Å¾ivotnÃ©ho cyklu softvÃ©ru, metÃ³dy tvorby softvÃ©ru. A hoci pri skÃºÅ¡anÃ­ Å¡tudentov prÃ¡ve otÃ¡zky z tÃ½chto fundamentÃ¡lnych konceptov predstavujÃº minoritnÃº ÄasÅ¥, ich pochopenie urÄuje ÃºspeÅ¡nosÅ¥ pri pochopenÃ­ a pouÅ¾Ã­vanÃ­ ÄalÅ¡Ã­ch, tÃ½ch praktickejÅ¡Ã­ch konceptov. Preto sme sa v prvom vydanÃ­ knihy sÃºstredili prÃ¡ve na tÃ©my okolo fundamentÃ¡lnych konceptov vÃ½voja softvÃ©ru. Kniha vo viacerÃ½ch otÃ¡zkach zasahuje do oblasti manaÅ¾mentu softvÃ©rovÃ½ch projektov. Opisujeme softvÃ©rovÃ© procesy, venujeme sa kvalite v softvÃ©rovom inÅ¾inierstve, diskutujeme ciele manaÅ¾mentu projektu. Je to urÄitÃ¡ prÃ­prava na plÃ¡novanÃ© tretie pokraÄovanie knihy zameranej na zÃ¡klady manaÅ¾mentu v softvÃ©rovom inÅ¾inierstve. SoftvÃ©rovÃ© inÅ¾inierstvo so svojou takmer polstoroÄnou histÃ³riou je stÃ¡le veÄ¾mi mladÃ¡ disciplÃ­na v porovnanÃ­ s ostatnÃ½mi inÅ¾inierskymi disciplÃ­nami. VeÄ¾mi rÃ½chlo sa menÃ­, vznikajÃº novÃ© technolÃ³gie, novÃ© otÃ¡zky a aj odpovede na ne. MnohÃ© zo zÃ¡kladnÃ½ch konceptov, myslÃ­m vÃ¤ÄÅ¡ina, vÅ¡ak ostÃ¡va. Za 20 rokov pÃ´sobenia v predmetoch softvÃ©rovÃ©ho inÅ¾inierstva som veÄ¾akrÃ¡t zmenila obsah prednÃ¡Å¡ok, zmenili sa metÃ³dy, ktorÃ© sa pouÅ¾Ã­vajÃº, menia sa nÃ¡stroje, vÅ¡etko veÄ¾mi rÃ½chlo. Ale mnohÃ© zÃ¡sadnÃ© veci vydrÅ¾ali aj celÃ© toto obdobie, naprÃ­klad problÃ©my s tvorbou softvÃ©ru sÃº napodiv vo svojej podstate takmer rovnakÃ© po celÃ½ tento Äas. NiektorÃ© sa posÃºvajÃº tÃ½m, ako lepÅ¡ie chÃ¡peme sÃºvislosti aj s vonkajÅ¡Ã­m svetom, naprÃ­klad akceptovanie neustÃ¡lych zmien okolia, rozÅ¡Ã­renie agilnÃ©ho vÃ½voja zmenilo pohÄ¾ad na problÃ©m meniacich sa poÅ¾iadaviek, ale nijako tento problÃ©m neodstrÃ¡nilo. Pochopenie jednotlivÃ½ch fenomÃ©nov otvÃ¡ra dvere k vlastnÃ½m prÃ­spevkom k budÃºcnosti. Mnoho z toho, Äo tu vysvetÄ¾ujeme je veÄ¾mi prirodzenÃ© a aplikovateÄ¾nÃ© aj v beÅ¾nom Å¾ivote, Äi inÃ½ch disciplÃ­nach. Alebo naopak, mnohÃ© sme v softvÃ©rovom inÅ¾inierstve prevzali a odpozorovali z beÅ¾nÃ©ho Å¾ivota. VeÄ hlavnÃ½ vÃ½sledok â softvÃ©rovÃ½ systÃ©m â vytvÃ¡rame pre Ä¾udÃ­, Ä¾udÃ­ rÃ´znych kultÃºr a potrieb. MÃ¡ria BielikovÃ¡"
94,137,0.543,Sprievodca svetom vedeckÃ©ho publikovania,"na nekomerÄnÃ© ÃºÄely. Skratka ND (no derivatives) zakazuje pouÅ¾Ã­vateÄ¾ovi vytvÃ¡raÅ¥ odvodeniny a SA (share alike) vytvÃ¡ranie odvodenÃ­n umoÅ¾Åuje, ale len za podmienky pouÅ¾itia rovnakej licencie ako mÃ¡ pÃ´vodnÃ© dielo. Tieto podmienky moÅ¾no rÃ´zne kombinovaÅ¥ (napr. CC BY-NC-SA â pouÅ¾Ã­vateÄ¾ musÃ­ uviesÅ¥ autora, nesmie dielo vyuÅ¾Ã­vaÅ¥ komerÄne a prÃ­padnÃ© odvodeniny musÃ­ Å¡Ã­riÅ¥ pod rovnakou licenciou) (AdamovÃ¡ 2013)."
240,110,0.542,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 2-13 Chceli by sme vytvoriÅ¥ tzv. nekoneÄnÃ½ cyklus, teda takÃ½ prÃ­kaz cyklu, ktorÃ½ v beÅ¾nom prÃ­pade neskonÄÃ­, resp. program (v Å¾iadnom prÃ­pade) nebude pokraÄovaÅ¥ na prÃ­kaz za takÃ½mto cyklom. Analyzujte nasledujÃºce kÃ³dy a zistite, ktorÃ© z nich predstavujÃº nekoneÄnÃ½ cyklus. SkÃºste vymyslieÅ¥ aj vlastnÃ© spÃ´soby. PremennÃ¡ i je typu unsigned int. BodkoÄiarka za cyklom predstavuje prÃ¡zdne telo cyklu."
130,414,0.542,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 7-16: DistribuovanÃ¡ koordinÃ¡cia ÄiastkovÃ½ch plÃ¡nov. VytvÃ¡ranie plÃ¡nov aj ich koordinÃ¡cia prebieha distribuovane. K distribuovanej koordinÃ¡cii existujÃº dva zÃ¡kladnÃ© prÃ­stupy. Prvou moÅ¾nosÅ¥ou je, Å¾e agenty oznamujÃº ostatnÃ½m agentom svoje Ãºmysly (svoje plÃ¡ny) a zÃ¡roveÅ sa snaÅ¾ia prispÃ´sobiÅ¥ svoje plÃ¡ny Ãºmyslom ostatnÃ½ch agentov. Po viacerÃ½ch vÃ½menÃ¡ch informÃ¡ciÃ­ o svojich Ãºmysloch by mali plÃ¡ny jednotlivÃ½ch agentov skonvergovaÅ¥ do stavu, kedy tvoria jeden konzistentnÃ½ plÃ¡n. Tento prÃ­stup vyuÅ¾Ã­va naprÃ­klad model PGP (angl. Partial Global Planning) (Durfee, 1991), kedy si agenty vymieÅajÃº svoje ÄiastkovÃ© plÃ¡ny zbavenÃ© zbytoÄnÃ½ch podrobnostÃ­ a na zÃ¡klade svojho plÃ¡nu a informÃ¡ciÃ­ od ostatnÃ½ch sa kaÅ¾dÃ½ agent snaÅ¾Ã­ vytvoriÅ¥ kombinovanÃ½ globÃ¡lny plÃ¡n. DruhÃ½ prÃ­stup je ten, Å¾e sa agenty nepokÃºÅ¡ajÃº vytvoriÅ¥ jeden globÃ¡lny plÃ¡n (hoci aj s distribuovanou reprezentÃ¡ciou) KaÅ¾dÃ½ agent mÃ¡ svoj vlastnÃ½ plÃ¡n a iba ak identifikuje jeho zÃ¡vislosÅ¥ na inÃ½ch agentoch, nastÃ¡va koordinÃ¡cia. NaprÃ­klad ak agent pre vykonanie nejakej akcie potrebuje pomoc inÃ©ho agenta, poÅ¾iada ho o spoluprÃ¡cu."
184,393,0.542,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"s vÃ¤ÄÅ¡ou pravdepodobnosÅ¥ou vyberÃ¡ strÃ¡nky, o ktorÃ½ch si myslÃ­, Å¾e sÃº relevantnejÅ¡ie pre danÃ½ dopyt (Ãºmerne Rq). Podobne, ako v prÃ­pade PageRank algoritmu, pokiaÄ¾ vÅ¡etky odkazy na strÃ¡nke majÃº nulovÃº relevantnosÅ¥, alebo strÃ¡nka neobsahuje Å¾iadne odkazy, nasleduje automatickÃ½ skok na Ä¾ubovoÄ¾nÃº strÃ¡nku v sieti s pravdepodobnosÅ¥ou danou P'q(j). Pri viaczloÅ¾kovÃ½ch dopytoch Q = q1, q2, ... je model inteligentnÃ©ho pouÅ¾Ã­vateÄ¾a nasledovnÃ½: pouÅ¾Ã­vateÄ¾ si zvolÃ­ jeden dopyt q podÄ¾a nejakÃ©ho pravdepodobnostnÃ©ho rozdelenia P(q) a pouÅ¾Ã­va tento dopyt pre riadenie svojho sprÃ¡vania pre veÄ¾kÃ½ poÄet krokov (kÃ½m sa nedosiahne konvergencia). NÃ¡sledne si zvolÃ­ inÃ½ dopyt tieÅ¾ podÄ¾a P(q) pre veÄ¾kÃ½ poÄet krokov a dokola. VÃ½slednÃ© pravdepodobnostnÃ© rozdelenie pre navÅ¡tÃ­venÃ© strÃ¡nky je:"
196,50,0.542,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"VÃ½sledkom pre obe verzie bude dokument triedy cÌlÃ¡nok (article) reprezentovanÃ½ zdrojovÃ½m sÃºborom s nÃ¡zvom main a prÃ­ponou .tex (main.tex) ako je uvedenÃ© na obr. 2.3. Na obr. 2.4 je nÃ¡hlâad preloÅ¾enÃ©ho zdrojovÃ©ho sÃºboru. NovÃ½ dokument, bude implicitne sÃºcÌastâou novÃ©ho projektu."
41,20,0.542,InformaÄnÃ© vzdelÃ¡vanie,"PonÃºka Å¡kÃ¡lu rÃ´znych licenÄnÃ½ch schÃ©m, ktorÃ© drÅ¾iteÄ¾om autorskÃ½ch prÃ¡v umoÅ¾ÅujÃº niektorÃ© prÃ¡va ponÃºknuÅ¥ na uÅ¾Ã­vanie diela verejnosti, zatiaÄ¾ Äo im inÃ© prÃ¡va ostÃ¡vajÃº. CieÄ¾om je zjednoduÅ¡iÅ¥ autorovi vÃ½ber vyhovujÃºcej licencie, teda obmedziÅ¥ Å¥aÅ¾kosti, ktorÃ© platnÃ© autorskÃ© zÃ¡kony kladÃº na zdieÄ¾anie informÃ¡ciÃ­. Na webovÃ½ch strÃ¡nkach Creative Commons si drÅ¾iteÄ¾ autorskÃ½ch prÃ¡v mÃ´Å¾e vybraÅ¥ z rÃ´znych voÄ¾nÃ½ch licenciÃ­, ktorÃ© potom mÃ´Å¾e pouÅ¾iÅ¥ pri zverejnenÃ­ svojho diela na webe. Creative Commons poskytujÃº aj RDF/XML metadÃ¡ta, ktorÃ© popisujÃº licenciu a dielo tak, aby bolo jednoduchÃ© automaticky spracovaÅ¥ a dohÄ¾adaÅ¥ takto licencovanÃ© diela. Creative Commons umoÅ¾Åuje dielo pod jej licenciou Äalej zdieÄ¾aÅ¥, rozmnoÅ¾ovaÅ¥ a distribuovaÅ¥, rovnako aj upraviÅ¥. VyluÄuje vÅ¡ak moÅ¾nosÅ¥ meniÅ¥ autorstvo diela. Rovnako aj spojenie pÃ´vodnÃ©ho vlastnÃ­ka licencie so spÃ´sobom, s akÃ½m bude upravovateÄ¾om pÃ´vodnÃ©ho diela naloÅ¾enÃ©. NesmÃº sa ani pridÃ¡vaÅ¥ ÄalÅ¡ie obmedzenia. NebudÃº vÃ¡m poskytnutÃ© Å¾iadne zÃ¡ruky a licencia mÃ´Å¾e maÅ¥ svoje obmedzenia naprÃ­klad v oblasti ochrany sÃºkromia a osobnÃ½ch Ãºdajov, alebo pouÅ¾itia diela."
239,102,0.542,Ãvod do matematickej logiky,"VsÌimnime si, zÌe komplementom k {a} je {b, c} na ObraÌzku 13. To preto, lebo {a} â© {b, c} = â a {a} âª {b, c} = M . Podobne sa dajuÌ na ObraÌzku 13 identiï¬kovatâ dâalsÌie dvojice komplementaÌrnych prvkov. DefinÄ±Ìcia. Majme Booleovu algebru B = (A; Â·, +, , 0, 1). Prvok a â A je atoÌm ak a 6= 0 a zo vztâahu x â¤ a plynie, zÌe budâ x = 0 alebo x = a. Podlâa deï¬nÄ±Ìcie suÌ atoÌmy najmensÌie prvky vaÌcÌsÌie ako 0. ZnamenaÌ to, zÌe suÌ v Hasseho diagrame umiestneneÌ hnedâ nad 0 a suÌ s 0 spojeneÌ hranou. Booleova algebra, ktorej Hasseho diagram je na ObraÌzku 13, maÌ tri atoÌmy. SuÌ nimi prvky {a}, {b} a {c}. PlatÄ±Ì nasledujuÌce tvrdenie. Veta 6.1. Kedâ maÌ Booleova algebra t atoÌmov, tak maÌ presne 2t prvkov a jej Hasseho diagramom je graf t-rozmernej kocky."
135,29,0.542,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â nÃ¡zov â vystihuje zÃ¡kladnÃº charakteristiku vzoru, â problÃ©m â opisuje typickÃ½ problÃ©m, na ktorÃ½ sa vzor aplikuje, â rieÅ¡enie â Å¡pecifikuje ako rieÅ¡i problÃ©m vrÃ¡tane opisu elementov, vzahov medzi sebou navzÃ¡jom a zodpovednosti voi ostatnÃ½m elementom,"
240,119,0.542,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 2-6 (rieÅ¡enie) Hlavnou ÄasÅ¥ou program je cyklus for, vÅ¡imnime si podmienku (pocet < 10), ktorÃ¡ urÄuje Äi sa vykonÃ¡ telo cyklu: telo cyklu (riadky 8-15) sa vykonÃ¡ ak aktuÃ¡lna hodnota v premennej pocet bude menÅ¡ia ako 10. Äo v programe predstavuje premennÃ¡ pocet? PremennÃº pocet zvyÅ¡ujeme tesne potom ako v riadku 11 vypÃ­Å¡eme hodnotu premennej i na vÃ½stup, teda premennÃ¡ pocet symbolizuje poÄet ÄÃ­sel, ktorÃ© sme uÅ¾ vypÃ­sali na vÃ½stup. Telo cyklu opakujeme dovtedy, kÃ½m sme na vÃ½stup vypÃ­sali zatiaÄ¾ menej ÄÃ­sel ako 10. PremennÃº pocet sprÃ¡vne inicializujeme na hodnotu 0 hneÄ pri definÃ­cii v riadku 5, Äo zodpovedÃ¡"
94,90,0.542,Sprievodca svetom vedeckÃ©ho publikovania,"3.1.1 PoznaÅ¥ terÃ©n KaÅ¾dÃ½ vedeckÃ½ pracovnÃ­k by mal maÅ¥ prehÄ¾ad vo svojom odbore â akÃ© Äasopisy vychÃ¡dzajÃº, akÃ½ typ ÄlÃ¡nkov uverejÅujÃº, na Äo kladÃº dÃ´raz (teoreticko-koncepÄnÃ© poznatky, empirickÃ½ prÃ­nos, aktuÃ¡lnosÅ¥ tÃ©mâ¦), akÃº majÃº povesÅ¥ v oÄiach odbornej verejnosti, na akÃº tematickÃº podoblasÅ¥ a akÃ½ch recipientov sa sÃºstredia. PrudkÃ½ rozvoj Äasopiseckej scÃ©ny mÃ´Å¾e udrÅ¾anie takÃ©hoto prehÄ¾adu komplikovaÅ¥, no kaÅ¾dÃ½ autor by si mal zodpovedaÅ¥ otÃ¡zku, ÄlÃ¡nky z ktorÃ½ch Äasopisov sÃº pre jeho vÃ½skum najuÅ¾itoÄnejÅ¡ie, ktorÃ© najviac cituje."
205,183,0.542,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","SociÃ¡lne siete a v nich prÃ­tomnÃ© mechanizmy 10.2.1 DÃ´kaz prÃ­tomnosti homofÃ­lie v sieti Pre danÃº charakteristiku sa dÃ¡ testovaÅ¥, Äi sa sieÅ¥ vyznaÄuje homofÃ­liou. Ak mÃ¡me naprÃ­klad charakteristiku pohlavie, kaÅ¾dÃ½ uzol v grafe predstavuje jedinca muÅ¾skÃ©ho pohlavia s pravdepodobnosÅ¥ou p a Å¾enskÃ©ho s pravdepodobnosÅ¥ou q. Hrana medzi dvoma muÅ¾mi existuje s pravdepodobnosÅ¥ou p2, medzi dvoma Å¾enami q2 a medzi muÅ¾om a Å¾enou alebo naopak s pravdepodobnosÅ¥ou 2pq. Pri spomenutom teste spoÄÃ­tame mnoÅ¾stvo hrÃ¡n medzi jedincami s rÃ´znym pohlavÃ­m a ak je tento poÄet vÃ½znamne menÅ¡Ã­ ako hodnota 2pq, tak sa dÃ¡ povaÅ¾ovaÅ¥ existencia homofÃ­lie v sieti za preukÃ¡zanÃº. V opaÄnom prÃ­pade, teda ak je vÃ½znamne vÃ¤ÄÅ¡Ã­ poÄet hrÃ¡n medzi uzlami rovnakÃ©ho pohlavia, ide o opaÄnÃº homofÃ­liu [2]. 10.2.2 Mechanizmy homofÃ­lie â selekcia a sociÃ¡lny vplyv VzÅ¥ahy medzi Ä¾uÄmi s podobnÃ½mi charakteristikami sÃº vÃ½sledkom dvoch hlavnÃ½ch mechanizmov, ktorÃ© sa skrÃ½vajÃº za ich utvÃ¡ranÃ­m. PrvÃ½m mechanizmom je selekcia. Ä½udia si vyberajÃº kamarÃ¡tov podÄ¾a nemennÃ½ch spoloÄnÃ½ch charakteristÃ­k. SociÃ¡lne prostredie dÃ¡va prÃ­leÅ¾itosti vyutvÃ¡rania vzÅ¥ahov, naprÃ­klad medzi Ä¾uÄmi, ktorÃ­ bÃ½vajÃº v jednej Å¡tvrti, chodia do tej istej Å¡koly alebo prÃ¡ce. PremenlivÃ© charakteristiky, ako naprÃ­klad sprÃ¡vanie, Äinnosti a zÃ¡ujmy utvÃ¡rajÃº zloÅ¾itejÅ¡ie spojenia v sieti. Okrem selekcie je tu prÃ­tomnÃ½ druhÃ½ mechanizmus socializÃ¡cie (sociÃ¡lneho vplyvu). Ä½udia majÃº tendenciu upraviÅ¥ svoje sprÃ¡vanie tak, aby sa viac priblÃ­Å¾ilo sprÃ¡vaniu ich kamarÃ¡tov. Na sociÃ¡lny vplyv sa tak moÅ¾no pozeraÅ¥ ako na opak selekcie. To znamenÃ¡, Å¾e pri selekcii sa utvÃ¡rajÃº novÃ© vzÅ¥ahy na zÃ¡klade charakteristÃ­k, zatiaÄ¾ Äo pri sociÃ¡lnom vplyve existujÃºce spojenia utvÃ¡rajÃº sprÃ¡vanie [1, 8]. ZÃ¡kladnou a skÃºmanou otÃ¡zkou je, Äi Ä¾udia v sieti prispÃ´sobili svoje sprÃ¡vanie, aby sa viac priblÃ­Å¾ili ich priateÄ¾om alebo Äi vyhÄ¾adali Ä¾udÃ­, ktorÃ­ uÅ¾ sÃº im podobnÃ­. TypickÃ½ prÃ­klad pochÃ¡dza z prostredia dospievajÃºcich Ä¾udÃ­ a ich Å¡kolskÃ½ch Ãºspechov alebo drogovÃ½ch skÃºsenostÃ­. PrÃ­tomnÃ© sÃº obidva mechanizmy. TÃ­nedÅ¾eri hÄ¾adajÃº sociÃ¡lne skupiny im podobnÃ© a tlak rovesnÃ­kov spÃ´sobuje ich prispÃ´sobenie sprÃ¡vania sa skupine. KtorÃ½ z tÃ½chto mechanizmov sa uplatÅuje viac, je vÅ¡ak nÃ¡roÄnou a vo vÅ¡eobecnosti nezodpovedanou otÃ¡zkou. Å tÃºdia Christakisa [4] sa zaoberÃ¡ vzÃ¡jomnÃ½m pÃ´sobenÃ­m mechanizmov medzi obÃ©znymi Ä¾uÄmi. Autori skÃºmali tri dÃ´vody pre zhlukovanie obÃ©znych a zdravÃ½ch Ä¾udÃ­ osobitne: (i.) Je dÃ´vodom selekcia, teda Å¾e Ä¾udia si hÄ¾adajÃº kamarÃ¡tov s podobnÃ½m statusom obezity? (ii.) SÃº dÃ´vodom inÃ© spoloÄnÃ© charakteristiky Ä¾udÃ­, ktorÃ© sÃºvisia so statusom obezity? (iii.) Je dÃ´vodom zmena statusov obezity kamarÃ¡tov s vplyvom na status jednotlivca? Prejavili sa vÅ¡etky tri dÃ´vody a ako najvÃ¡Å¾nejÅ¡Ã­ sa vÅ¡ak ukÃ¡zal poslednÃ½, ktorÃ½ vyjadruje, Å¾e obezita sa mÃ´Å¾e Å¡Ã­riÅ¥ pÃ´sobenÃ­m sociÃ¡lneho vplyvu. V prostredÃ­ webu sa otÃ¡zkou vzÃ¡jomnÃ©ho pÃ´sobenia mechanizmov homofÃ­lie zaoberÃ¡ vÃ½skumnÃ¡ prÃ¡ca [3]. V experimente sledovali sprÃ¡vanie sa autorov ÄlÃ¡nkov WikipÃ©die. V sociÃ¡lnej sieti je medzi autormi spojenie, ak spolu navzÃ¡jom komunikovali a ich sprÃ¡vanie sa vyjadruje mnoÅ¾stvo spoluvytvÃ¡ranÃ½ch ÄlÃ¡nkov. PodobnosÅ¥ dvoch autorov sa definuje ako pomer mnoÅ¾stva ÄlÃ¡nkov spoluvytvÃ¡ranÃ½ch oboma autormi a mnoÅ¾stva ÄlÃ¡nkov vytvÃ¡ranÃ½ch aspoÅ jednÃ½m z autorov. Na obrÃ¡zku 39 je graf znÃ¡zorÅujÃºci zÃ¡vislosÅ¥ prÃ­buznosti autorov od Äasu, priÄom Äas"
130,56,0.542,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"SÃºÄasti Klient â vyuÅ¾Ã­va cieÄ¾ovÃº triedu, resp. cieÄ¾ovÃ½ objekt. NakoÄ¾ko adaptÃ©r je podtrieda cieÄ¾ovej podtriedy, klient vie pouÅ¾Ã­vaÅ¥ inÅ¡tanciu adaptÃ©ra. AdaptovanÃ½Objekt, PrispÃ´sobenÃ¡Trieda â objekt/trieda, ktorÃ©ho rozhranie prispÃ´sobujeme k rozhraniu cieÄ¾ovÃ©mu objektu/triedy. CieÄ¾ovÃ½Objekt, CieÄ¾ovÃ¡Trieda â objekt/trieda, ku ktorÃ©ho rozhraniu prispÃ´sobujeme rozhranie adaptovanÃ©ho objektu/triedy."
190,406,0.542,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"LepÅ¡ie porozumenie zadaniu. Tvorba testu pred tvorbou kÃ³du vyÅ¾aduje od programÃ¡tora vytvorenie rozhrania â a na to potrebuje dÃ´kladne pochopiÅ¥ Ãºlohu kÃ³du. Zameranie sa len na jednu Ãºlohu. Pri testami riadenom vÃ½voji sa postupuje po jednotlivÃ½ch testoch. Test pokrÃ½va kÃ³d, ktorÃ©ho funkcionalita mÃ¡ len obmedzenÃ½ rozsah. To umoÅ¾Åuje programÃ¡torovi sÃºstrediÅ¥ sa len na jednu malÃº Ãºlohu. MenÅ¡ia nÃ¡maha pri oprave chÃ½b. KeÄÅ¾e rozsah jednÃ©ho testu je malÃ½, ak test zlyhÃ¡, prepracovanie kÃ³du je jednoduchÅ¡ie. Pri tvorbe testov aÅ¾ po napÃ­sanÃ­ kÃ³du majÃº programÃ¡tori tendenciu napÃ­saÅ¥ vÃ¤ÄÅ¡Ã­ celok a aÅ¾ potom test. V prÃ­pade, ak test zlyhÃ¡ treba prepracovaÅ¥ viac kÃ³du."
111,26,0.542,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"UzavretÃ© triedenie kariet Pri uzavretom triedenÃ­ kariet majÃº respondenti za Ãºlohu roztriediÅ¥ karty do pevne stanovenÃ½ch kategÃ³riÃ­ (pozri Obr. 3.3). Respondentom prezentujete vÃ¡Å¡ vlastnÃ½ nÃ¡vrh poÄtu kategÃ³riÃ­ s ich pevne danÃ½mi nÃ¡zvami (oznaÄeniami). Na rozdiel od otvorenÃ©ho triedenia kariet, kde majÃº respondenti priestor na vyjadrenie, aby mohli plne vyjadriÅ¥ svoje chÃ¡panie informÃ¡ciÃ­, v uzavretom triedenÃ­ sÃº ich moÅ¾nosti zÃ¡merne obmedzenÃ©. Kedy by som sa mal rozhodnÃºÅ¥ pre uzavretÃ© triedenie kariet? â¢ KeÄ chcem vedieÅ¥, Äi by Ä¾udia zaradili nejakÃº informÃ¡ciu do rovnakej kategÃ³rie ako ja. â¢ KeÄ chcem zistiÅ¥, Äi moje kategÃ³rie dobre reprezentujÃº ich obsah, alebo sÃº nejednoznaÄnÃ©, mÃ¤tÃºce a Ä¾udia si ich predstavujÃº inak. â¢ KeÄ mÃ¡m rÃ´zne varianty kategÃ³riÃ­ a chcem sa rozhodnÃºÅ¥, ktorÃ© z nich pouÅ¾ijem vo svojom nÃ¡vrhu v zÃ¡vislosti od toho, nakoÄ¾ko sÃº intuitÃ­vne. UzavretÃ© triedenie kariet: DetskÃ¡ zÃ¡hrada Pre Å¡truktÃºru webovej strÃ¡nky âDetskÃ¡ zÃ¡hradaâ vytvorÃ­me zoznam kategÃ³riÃ­, ktorÃ© dobre vystihujÃº rÃ´zne typy obsahu, ktorÃ½ chceme poskytovaÅ¥. KeÄÅ¾e si uvedomujeme, Å¾e existujÃº rÃ´zne pohÄ¾ady na obsah ÄlÃ¡nkov, napr. vek dieÅ¥aÅ¥a"
236,68,0.542,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"kde znaÄka je identifikÃ¡tor, zvolenÃ½ autorom. LATEX nahrÃ¡dza \ref ÄÃ­slom oddielu, pododdielu, obrÃ¡zku, tabuÄ¾ky, rovnice alebo vety zodpovedajÃºcemu miestu, kde bol prÃ­kaz \label zadanÃ½. \pageref vytlaÄÃ­ ÄÃ­slo strany zodpovedajÃºcej miestu, kde bol prÃ­kaz \label zadanÃ½.8 Rovnako ako nÃ¡zvy oddielov sÃº aj ÄÃ­sla pouÅ¾itÃ© z predchÃ¡dzajÃºceho behu LATEXu. Odkaz k~tomuto pododdielu \label{sec:tento} vyzerÃ¡: \uv{pozri oddiel~\ref{sec:tento} na strane~\pageref{sec:tento}.}"
130,429,0.542,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"react : Î£ Ã Î * â Î£ react ââ Ï , U exec(opi ,Ï )ââ = Ï â² â i kde Op je mnoÅ¾ina operÃ¡torov, Î£ je mnoÅ¾ina prÃ­pustnÃ½ch stavov sveta, Î je mnoÅ¾ina moÅ¾nÃ½ch vplyvov, opâOp je operÃ¡tor, Ï je stav sveta pred vykonanÃ­m operÃ¡tora a Î³ je vplyv operÃ¡tora op. Ïâ² je stav sveta po aplikovanÃ­ vplyvov vÅ¡etkÃ½ch sÃºÄasne vykonanÃ½ch akciÃ­. TakÃ½to model akciÃ­ nevyÅ¾aduje, aby boli v operÃ¡toroch zahrnutÃ© vÅ¡etky ich ÃºÄinky na prostredie, ÃºÄinky sa presunÃº do zÃ¡konov prostredia. Na druhej strane zÃ¡kony prostredia musia zahrnovaÅ¥ korektnÃº reakciu prostredia na vÅ¡etky moÅ¾nÃ© kombinÃ¡cie vplyvov. VÃ½hodou tohto modelu je, Å¾e jasne rozliÅ¡uje to, Äo vykonÃ¡va agent od toho, Äo sa deje v prostredÃ­. NevÃ½hodou vÅ¡ak je, Å¾e rovnako ako pÃ´vodnÃ½ model akciÃ­ pracuje v diskrÃ©tnych ÄasovÃ½ch kvantÃ¡ch."
369,288,0.542,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V diagrame sme z dÃ´vodu prehÄ¾adnosti uviedli iba zÃ¡kladnÃ© atribÃºty finanÄnÃ½ch vÃ½kazov52, ktorÃ© sme vybrali podÄ¾a formulÃ¡rov daÅovÃ©ho priznania. Banky, samozrejme, poÅ¾adujÃº a pre vÃ½poÄet ratingu vyuÅ¾Ã­vajÃº detailnejÅ¡ie finanÄnÃ© Ãºdaje53. FiremnÃ© Ãºvery prechÃ¡dzajÃº podobnÃ½m procesom schvaÄ¾ovania ako hypotekÃ¡rne Ãºvery, avÅ¡ak s rozdielom, Å¾e v Åom vystupujÃº pracovnÃ­ci vyÅ¡Å¡ieho odbornÃ©ho stupÅa. VyÅ¡Å¡Ã­ odbornÃ½ stupeÅ sa vzÅ¥ahuje tak na obchodnÃ­kov ako aj internÃ½ch znalcov v odbore nehnuteÄ¾nostÃ­, Äi pracovnÃ­kov z oddelenia kontroly rizika. NavyÅ¡e, veÄ¾kÃ© firmy (a teda aj ich Ãºvery) bÃ½vajÃº v banke spravovanÃ© oddelenou organizaÄnou Å¡truktÃºrou ako malÃ© firmy a fyzickÃ© osoby â podnikatelia. KeÄÅ¾e Ãºvery pre veÄ¾kÃ© firmy bÃ½vajÃº Äasto vo veÄ¾kej vÃ½Å¡ke, mnohokrÃ¡t sa schvaÄ¾ujÃº aÅ¾ na vyÅ¡Å¡Ã­ch stupÅoch riadenia: v predstavenstve banky, prÃ­padne aÅ¾ v predstavenstve zahraniÄnej banky."
393,480,0.542,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Vlastnosti generovanÃ©ho zdrojovÃ©ho kÃ³du Toto kritÃ©rium patrÃ­ zrejme medzi jedno z najdÃ´leÅ¾itejÅ¡Ã­ch, pokiaÄ¾ CASE nÃ¡stroje disponujÃº rovnakÃ½mi prostriedkami v zmysle komponentov pre generovanie zdrojovÃ©ho kÃ³du, podpory skupiny nÃ¡vrhovÃ½ch vzorov a ÄalÅ¡Ã­mi podobnÃ½mi, odliÅ¡ujÃº sa prÃ¡ve vo vlastnostiach generovanÃ©ho zdrojovÃ©ho kÃ³du. Budeme klÃ¡sÅ¥ dÃ´raz iba na zdrojovÃ½ kÃ³d nÃ¡vrhovÃ½ch vzorov, v opaÄnom prÃ­pade ide iba o generovanie zÃ¡kladnÃ½ch kostier tried (prÃ¡zdna trieda s metÃ³dami podÄ¾a modelu). V prÃ­pade nÃ¡vrhovÃ½ch vzorov je ale moÅ¾nÃ© generovaÅ¥ i Äasti metÃ³d a prÃ¡ve tu sa prejavÃ­ rozdelenie vzoru na vÅ¡eobecnÃº a domÃ©novo zÃ¡vislÃº ÄasÅ¥, kedy CASE nÃ¡stroj mÃ¡ vo svojich vnÃºtornÃ½ch Å¡truktÃºrach, ktorÃ© sÃº z vonku neprÃ­stupnÃ©, rozdelenÃ½ vzor na spomÃ­nanÃ© Äasti. Pomocou sprÃ¡vneho rozdelenia vzoru dochÃ¡dza k znovupouÅ¾itiu preddefinovanÃ½ch ÄastÃ­ nÃ¡vrhovÃ½ch vzorov. NaprÃ­klad pre nÃ¡vrhovÃ½ vzor Composite viacerÃ© CASE nÃ¡stroje dokÃ¡zali vygenerovaÅ¥ vrapovanie metÃ³d (pridanie prvku, odstrÃ¡nenie prvku, sprÃ­stupnenie prvku) triedy Composite na ArrayList."
236,156,0.541,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Å peciality prÃ­kazy \rightmark a \leftmark na reprezentÃ¡ciu nÃ¡zvu aktuÃ¡lnej kapitoly, respektÃ­ve oddielu. Hodnoty tÃ½chto dvoch prÃ­kazov budÃº prepÃ­sanÃ© pri kaÅ¾dom vykonanÃ­ prÃ­kazu \chapter alebo \section. Pre koneÄnÃº pruÅ¾nosÅ¥ prÃ­kaz \chapter s kamarÃ¡tmi nepredefinujÃº samotnÃ© \rightmark a \leftmark. VolajÃº eÅ¡te ÄalÅ¡ie prÃ­kazy \chaptermark, \sectionmark alebo \subsectionmark, ktorÃ© sÃº zodpovednÃ© za predefinovanie obsahu \rightmark a \leftmark. TakÅ¾e ak chcete zmeniÅ¥ vzhÄ¾ad nÃ¡zvu kapitoly v hlaviÄkovom riadku, musÃ­te jednoducho âobnoviÅ¥Ã¿ prÃ­kaz \chaptermark. ObrÃ¡zok 4.2 ukazuje moÅ¾nÃ© nastavenia pre balÃ­k fancyhdr, ktorÃ© vytvoria hlaviÄky vyzerajÃºce pribliÅ¾ne tak ako hlaviÄky v tejto broÅ¾Ãºrke. V kaÅ¾dom prÃ­pade vÃ¡m odporÃºÄam stiahnuÅ¥ si dokumentÃ¡ciu k balÃ­ku na adrese uvedenej v poznÃ¡mke."
135,363,0.541,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"5.2.4 GrafickÃ¡ notÃ¡cia PrÃ­stup [31] bol vytvorenÃ½ na pÃ´de Katedry informatiky a vÃ½potovej techniky FEI STU, ktorÃ¡ bola predchodcom dneÅ¡nej FIIT STU. Predstavuje grafickÃº notÃ¡ciu zachytenia leitmotifu vzorov, ktorÃ¡ je doplnenÃ¡ o pravidlÃ¡ zaznamenanÃ© v textovej forme. Neopiera o existujÃºcu technolÃ³giu ako tomu bolo predchÃ¡dzajÃºcich prÃ­padoch (UML, OWL), o dalo autorom viac vonosti a priestoru, keÅ¾e nemuseli bra v Ãºvahu obmedzenia, ktorÃ© by plynuli z jej pouÅ¾itia. Leitmotif vzoru je zachytenÃ½ pomocou tzv. metaschÃ©my. TÃ¡ pozostÃ¡va z tzv. fragmentov a vzahov medzi nimi. Fragmenty zodpovedajÃº jednotlivÃ½m roliam vzoru (reprezentujÃºcim Å¡trukturÃ¡lne entity aj entity sprÃ¡vania), v rÃ¡mci diagramu sÃº zobrazenÃ© v obd Å¾nikoch. Okrem fragmentov zodpovedajÃºcich roliam obsahuje diagram aj jeden Å¡peciÃ¡lny fragment vzoru, reprezentujÃºci vzor ako celok. Vzahy medzi vzormi sÃº zobra-"
76,184,0.541,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"DefinÃ­cia je v zhode s intuitÃ­ciou, ale uvÃ¡Å¾me, Å¾e rozdelenia, t. j. systÃ©my pravdepodobnostÃ­ P( ï£ < ), resp. P( ï£ < ), resp. P( ï£ < , ï£ < ) sÃº znÃ¡me prostrednÃ­ctvom funkciÃ­ â a to buÄ distribuÄnÃ½ch funkciÃ­, alebo pravdepodobnostnÃ½ch funkciÃ­ (resp. hustÃ´t). Preto je potrebnÃ© formulovaÅ¥ podmienku nezÃ¡vislosti veliÄÃ­n , pomocou tÃ½chto funkciÃ­. 3.2.2 Veta. Nech (.,.) je distribuÄnÃ¡ funkcia vektora ( zloÅ¾iek. VeliÄiny sÃº nezÃ¡vislÃ© prÃ¡ve vtedy, keÄ platÃ­"
43,128,0.541,Objektovo orientovanÃ© programovanie v C++,"PrvÃ¡ verzia metÃ³dy vrÃ¡ti znakovÃ½ reÅ¥azec zviazanÃ½ so streamom, druhÃ¡ ho umoÅ¾Åuje zmeniÅ¥. PrÃ­klad. Predstavme si situÃ¡ciu, keÄ mÃ¡me veÄ¾kÃ½ textovÃ½ sÃºbor, ktorÃ½ chceme zapÃ­saÅ¥ na CD. SÃºbor je vÅ¡ak takÃ½ veÄ¾kÃ½, Å¾e na jedno CD sa nezmestÃ­. Preto je rozdelenÃ½ na niekoÄ¾ko ÄastÃ­. Ak sa pÃ´vodnÃ½ sÃºbor volÃ¡ subor.txt, jednotlivÃ© Äasti sa budÃº volaÅ¥ subor cast1.txt, subor cast2.txt atÄ. Ak chceme takto rozdelenÃ½ sÃºbor nahraÅ¥ spÃ¤Å¥ do poÄÃ­taÄa, potrebujeme program, ktorÃ½ by dokÃ¡zal jednotlivÃ© Äasti spojiÅ¥. NapÃ­Å¡me program, ktorÃ½ bude vykonÃ¡vaÅ¥ takÃ©to spÃ¡janie ÄastÃ­ do jednÃ©ho textovÃ©ho sÃºboru. Program naÄÃ­ta od uÅ¾Ã­vateÄ¾a meno pÃ´vodnÃ©ho sÃºboru (bez prÃ­pony .txt) a poÄet ÄastÃ­, na ktorÃ© bol sÃºbor rozdelenÃ½. Potom zaÄne jednotlivÃ© Äasti spÃ¡jaÅ¥. V tomto programe budeme potrebovaÅ¥ vygenerovaÅ¥ nÃ¡zvy jednotlivÃ½ch ÄastÃ­ pÃ´vodnÃ©ho sÃºboru. PrÃ¡ve na to vyuÅ¾ijeme triedu stringstream. KaÅ¾dÃ½ nÃ¡zov sa bude skladaÅ¥ z nÃ¡zvu pÃ´vodnÃ©ho sÃºboru, prÃ­pony cast, poradovÃ©ho ÄÃ­sla a prÃ­pony .txt. VÅ¡etky tieto zloÅ¾ky nÃ¡zvu poÅ¡leme pomocou operÃ¡tora << do reÅ¥azcovÃ©ho streamu, ÄÃ­m z nich vytvorÃ­me jeden znakovÃ½ reÅ¥azec. Aby sme ho mohli pouÅ¾iÅ¥ ako parameter pre konÅ¡truktor triedy fstream, ktorÃ½ vyÅ¾aduje nÃ¡zov sÃºboru vo forme C-stringu, musÃ­me najskÃ´r pomocou metÃ³dy str zÃ­skaÅ¥ obsah streamu vo forme premennej typu string. Z nej potom zÃ­skame prÃ­sluÅ¡nÃ© pole znakov pomocou metÃ³dy c str. VÅ¡imnime si, Å¾e streamy nazov a cast vytvÃ¡rame ako lokÃ¡lne premennÃ© v cykle, teda v kaÅ¾dom kroku cyklu vytvÃ¡rame vlastne novÃ© premennÃ©, ktorÃ© na konci cyklu zaniknÃº. Takto zabezpeÄÃ­me, Å¾e obe premennÃ© budÃº vÅ¾dy vhodne inicializovanÃ© â nebudÃº si âpamÃ¤taÅ¥â informÃ¡cie z predchÃ¡dzajÃºcich krokov. #include <iostream> #include <fstream> #include <string> #include <sstream> using namespace std; int main() int pocet; string povodny; char c; cout<<""Ako sa vola povodny subor?""<<endl; getline(cin,povodny); cout<<""Na kolko casti je subor rozdeleny?""<<endl; cin>>pocet; fstream vysledok((povodny+"".txt"").c str(), fstream::out); for (int i=1;i<=pocet;i++) stringstream nazov; nazov<<povodny<<"" cast""<<i<<"".txt""; fstream cast(nazov.str().c str(), fstream::in); while (true) c=cast.get(); if (cast.eof()) break;"
195,119,0.541,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Charakteristiky a metriky na vyhodnocovanie odporÃºÄaÄov RelevantnosÅ¥ sÃºboru poloÅ¾iek Druhou metrikou, ktorÃ¡ sa vyuÅ¾Ã­va pri hodnotenÃ­ odporÃºÄania, je relevantnosÅ¥ poloÅ¾iek, napr. pri meranÃ­ kvality vyhÄ¾adÃ¡vaÄov [3]. KaÅ¾dÃº poloÅ¾ku mÃ´Å¾eme zaradiÅ¥ do jednej zo Å¡tyroch skupÃ­n, ktorÃ© vznikli kombinÃ¡ciou relevantnosti a reÃ¡lneho vÃ½skytu medzi odporÃºÄanÃ½mi poloÅ¾kami: TabuÄ¾ka 6.1: matica relevantnosti poloÅ¾iek. PrvÃ© pÃ­smeno T/F (z angl. true/false) oznaÄuje, Äi sÃº poloÅ¾ky sprÃ¡vne zaradenÃ©, druhÃ© pÃ­smeno (z angl. positive/negative) oznaÄuje, Äi sa poloÅ¾ky majÃº zobrazovaÅ¥."
76,346,0.541,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"NaÅ¡a situÃ¡cia s loptiÄkami dobre ilustruje, Å¾e tÃ½mto chybÃ¡m sa nevyhneme! Je skutoÄne dÃ´leÅ¾itÃ© uvedomiÅ¥ si, Å¾e takÃ©to chyby budÃº sprevÃ¡dzaÅ¥ kaÅ¾dÃ½ Å¡tatistickÃ½ test. Stav vecÃ­ zobrazme tabuÄ¾kou: ObjektÃ­vny stav: NaÅ¡e rozhodnutie:"
195,85,0.541,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Modelovanie programÃ¡tora v odporÃºÄacÃ­ch systÃ©moch 4.2.2 DÃ¡ta o histÃ³rii interakciÃ­ DruhÃ½ typ dÃ¡t, ktorÃ© sa vyuÅ¾Ã­vajÃº na modelovanie zÃ¡ujmov vÃ½vojÃ¡ra v OSSI, je histÃ³ria jeho interakciÃ­ s jednotlivÃ½mi elementami zdrojovÃ©ho kÃ³du v projekte. Tento typ informÃ¡ciÃ­ sa odkazuje na sekvencie udalostÃ­ spustenÃ½ch akciami vykonanÃ½mi vÃ½vojÃ¡rom [17]. PrÃ­kladom systÃ©mu vyuÅ¾Ã­vajÃºceho tento typ dÃ¡t je vyÅ¡Å¡ie spomenutÃ½ odporÃºÄaÄ Mylyn [14]. Tento systÃ©m pri modelovanÃ­ adaptuje rozliÄnÃ© vlastnosti a komponenty IDE Eclipse a vÃ½vojÃ¡rovi zobrazuje len tie, ktorÃ© potrebuje pre aktuÃ¡lnu Ãºlohu. Z histÃ³rie jeho interakciÃ­ odporÃºÄaÄ vyberÃ¡ softvÃ©rovÃ© artefakty vytvorenÃ© v rÃ¡mci IDE, pomocou ktorÃ½ch urÄuje relevanciu jednotlivÃ½ch komponentov pre danÃº Ãºlohu. Mylyn rozliÅ¡uje artefakty vytvorenÃ© priamou a nepriamou interakciou. Medzi udalosti priamej interakcie zaraÄuje oznaÄenia (vÃ½ber triedy a prezeranie jej elementov) a Ãºpravy. OstatnÃ© udalosti oznaÄuje ako nepriamu interakciu. PrÃ­kladom je refaktorovanie triedy â jej premenovanie sa oznaÄuje ako prÃ­kaz, premenovanie vÃ½skytov volanÃ­ v inÃ½ch triedach sa oznaÄuje ako propagÃ¡cia. Okrem zmien elementov zdrojovÃ©ho kÃ³du a navigÃ¡cie medzi nimi vÅ¡ak existujÃº aj ÄalÅ¡ie typy interakcie zachytÃ¡vajÃºce veÄ¾kosÅ¥ zÃ¡ujmu o danÃ½ element, napr. strÃ¡venÃ½ Äas (angl. linger time), ktorÃ½ sa vÃ½vojÃ¡r elementu venoval , prÃ­padne rozsah posÃºvania (scrolling), nepriamo odhaÄ¾ujÃºci zÃ¡ujem vÃ½vojÃ¡ra [1]. OpisovanÃ½ systÃ©m Mylyn na urÄenie relevantnosti navÅ¡tÃ­venÃ½ch zdrojovÃ½ch sÃºborov z pohÄ¾adu Ãºlohy sÃ­ce uvaÅ¾uje, ako Äasto a ako nedÃ¡vno vÃ½vojÃ¡r element navÅ¡tÃ­vil, neberie vÅ¡ak do Ãºvahy rozsah posÃºvania. DÃ´vodom je, Å¾e autori Å¡tÃºdie [24] zistili, Å¾e rozsiahle posÃºvanie v skutoÄnosti predstavuje indikÃ¡tor, Å¾e vÃ½vojÃ¡r kÃ³du nerozumie a stratil sa v Åom. ÄalÅ¡Ã­m prÃ­kladom nepriamej interakciou je poÄiatoÄnÃ© autorstvo (angl. Initial authorship) v kÃ³dovom elemente, ktorÃ© podÄ¾a [7] predstavuje silnÃ½ faktor znalosti kÃ³du. 4.2.3 DÃ¡ta zo systÃ©mov pre sprÃ¡vu Ãºloh TretÃ­ vÃ½znamnÃ½ typ dÃ¡t odhaÄ¾ujÃºcich znalosÅ¥ zdrojovÃ©ho kÃ³du predstavujÃº dÃ¡ta zo systÃ©mov pre sprÃ¡vu Ãºloh. PrÃ­kladom ich vyuÅ¾itia sÃº âopen sourceâ projekty, v ktorÃ½ch je beÅ¾nÃ©, Å¾e sa chyby hlÃ¡sia priamo vÃ½vojÃ¡rom, ktorÃ­ danÃº ÄasÅ¥ projektu vytvorili a teda sÃº v tejto oblasti expertami. SystÃ©my pre sprÃ¡vu Ãºloh sa vÅ¡ak vyuÅ¾Ã­vajÃº tieÅ¾ komerÄnÃ½mi softvÃ©rovÃ½mi spoloÄnosÅ¥ami, kde slÃºÅ¾ia na koordinÃ¡ciu vÃ½vojÃ¡rov, testerov Äi manaÅ¾Ã©rov. ScenÃ¡r zÃ­skavania dÃ¡t z tÃ½chto systÃ©mov sa preto podobÃ¡ prÃ­padu âopen sourceâ projektov. PodobnÃ© dÃ¡ta sa zÃ­skavajÃº zo systÃ©mov v centrÃ¡ch technickej podpory slÃºÅ¾iacich na zaznamenÃ¡vanie hovorov. Napr. odporÃºÄacÃ­ systÃ©m Expertise Recommender odporÃºÄa vÃ½vojÃ¡rovi, ktorÃ½ dostal za Ãºlohu vyrieÅ¡iÅ¥ zÃ¡kaznÃ­kom nahlÃ¡senÃº chybu, tÃ½ch kolegov (expertov), ktorÃ­ mu najlepÅ¡ie dokÃ¡Å¾u pomÃ´cÅ¥ ju vyrieÅ¡iÅ¥. OdporÃºÄaÄ pre kaÅ¾dÃ©ho vÃ½vojÃ¡ra, resp. pracovnÃ­ka spoloÄnosti, vytvorÃ­ v databÃ¡ze model, v ktorom zaznamenÃ¡va poÅ¾iadavky, ktorÃ© vÃ½vojÃ¡r v minulosti vyrieÅ¡il. ZÃ¡znam sa skladÃ¡ z troch typov informÃ¡ciÃ­: - Opis poÅ¾iadavky â napr. vyrieÅ¡enie chyby vyvÃ­janÃ©ho systÃ©mu - Opis zÃ¡kaznÃ­ka, ktorÃ½ poÅ¾iadavku inicioval - Komponent systÃ©mu, ktorÃ½ kvÃ´li vyrieÅ¡eniu poÅ¾iadavky modifikovli"
40,53,0.541,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Veta 4. V lineÃ¡rnej Echo State neurÃ³novej sieti nemÃ´Å¾u byÅ¥ dlhÃ© oneskorenia nikdy nauÄenÃ© lepÅ¡ie ako krÃ¡tke oneskorenia (monotÃ³nne zabÃºdanie). Ak potrebujeme Echo State neurÃ³novÃº sieÅ¥ s Äo moÅ¾no najdlhÅ¡ou krÃ¡tkodobou pamÃ¤Å¥ou (obr. 7), mÃ´Å¾eme v praktickÃ½ch ÃºlohÃ¡ch vyskÃºÅ¡aÅ¥ niektorÃ½ z nasledujÃºcich krokov (alebo ich kombinÃ¡ciu):"
135,410,0.541,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"5.4.3 TransformÃ¡cie medzi modelmi DÃ´leÅ¾itou asou, ktorÃº je potrebnÃ© rieÅ¡i, sÃº transformÃ¡cie medzi modelmi. Ich Ãºlohou je na zÃ¡klade Å¡pecifikÃ¡cie definovanej v rÃ¡mci vyÅ¡Å¡ieho modelu vytvori korektnÃ© inÅ¡tancie vzorov a prepoji ich asti s ostatnÃ½mi prvkami modelu, Ã­m vznikne nÃ¡vrh na OO Ãºrovni. Ãlohou transformÃ¡cie nemÃ¡ by len vytvori ''nejakÃº'' inÅ¡tanciu vzoru. KaÅ¾dÃ½ vzor je moÅ¾nÃ© navrhnÃº a implementova viacerÃ½mi korektnÃ½mi spÃ´sobmi, Ãºlohou transformÃ¡cie je aplikova v danej situÃ¡cii najvhodnejÅ¡Ã­ variant vzoru a v takej podobe pripravi jeho inÅ¡tanciu. Ako prÃ­klad mÃ´Å¾eme definova rÃ´zne varianty inÅ¡tanciÃ­ opÃ­sanÃ½ch vzorov Composite a Decorator. Composite NajastejÅ¡ie opisovanÃ© varianty vzoru na Ãºrovni nÃ¡vrhu sa lÃ­Å¡ia v umiestnenÃ­ metÃ³d pre pridanie alebo odstrÃ¡nenie prvkov hierarchie. Tieto metÃ³dy mÃ´Å¾u by umiestnenÃ© bu v rÃ¡mci najvyÅ¡Å¡ej triedy celej hierarchie (hrÃ¡ roly Component) alebo len v rÃ¡mci triedy slÃºÅ¾iacej na zoskupenie ostatnÃ½ch tried (hrÃ¡ roly Composite) [14]. Ak sa metÃ³dy umiestnia do najvyÅ¡Å¡ej triedy hierarchie, zjednotÃ­ sa sÃ­ce celÃ© jej rozhranie, ale na druhÃº stranu sa tieto metÃ³dy stanÃº bezvÃ½znamnÃ© pre triedy, ktorÃ© neobsahujÃº alÅ¡ie podtriedy (listy). Uri, ktorÃ½ zo spÃ´sobov je vhodnejÅ¡Ã­, nie je jednoduchÃ©, pretoÅ¾e zÃ¡visÃ­ od toho, akÃ½m spÃ´sobom si vÃ½vojÃ¡r Å¾elÃ¡ pracova so vzorom. Preto rozhodnutie o variante v prÃ­pade samostatnej inÅ¡tancie vzoru Composite by malo by definovanÃ© pouÅ¾Ã­vateom, naprÃ­klad v konfigurÃ¡cii transformÃ¡cie. Decorator V prÃ­pade vzoru Decorator moÅ¾no identifikova alternatÃ­vy vo forme pouÅ¾itia i nepouÅ¾itia rozhrania zastreÅ¡ujÃºceho konkrÃ©tne dekorÃ¡tory. V tomto prÃ­pade sa mÃ´Å¾e javi voba alternatÃ­vy jednoduchÅ¡ie: ak je definovanÃ½ch viac dekorÃ¡torov, pouÅ¾i toto rozhranie, v prÃ­pade jednÃ©ho dekorÃ¡tora rozhranie strÃ¡ca vÃ½znam, a preto ho mÃ´Å¾eme vynecha."
196,123,0.54,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"(viacero sÃºborov *.tex). UlâahcÌÃ­ to orientÃ¡ciu a modularizuje celÃ½ dokument tak, aby na nÌom vedelo pracovatâ aj viacero autorov distribuovane a sÃºcÌasne. OdporÃºcÌa sa uloÅ¾itâ kaÅ¾dÃº vÃ¤cÌÅ¡iu cÌastâ resp. kapitolu do samostatnÃ©ho sÃºboru. CÌo sa tÃ½ka zÃ¡verecÌnÃ½ch prÃ¡c BP, DP, DizP je vhodnÃ© matâ samostatne rieÅ¡enÃº aj cÌastâ Ãºvodu (obÃ¡lka, titulnÃ¡ strana, zadanie, anotÃ¡cie a pod.) a prÃ­loh. ZÃ¡rovenÌ je vhodnÃ© udrÅ¾iavatâ artefakty v samostatnÃ½ch adresÃ¡roch napr. v adresÃ¡ri projektu v pod adresÃ¡ri obrazky vÅ¡etky obrÃ¡zky. V preambule je potom potrebnÃ© nastavitâ cestu k tomuto adresÃ¡ru prÃ­kazom \graphicspath{ {./obrazky/} }."
43,379,0.54,Objektovo orientovanÃ© programovanie v C++,"KAPITOLA 8. DEDIÄNOSÅ¤ PrÃ­klad. NapÃ­Å¡me program, ktorÃ½ bude vedieÅ¥ pracovaÅ¥ s dvomi reprezentÃ¡ciami 3D telies. Prvou z nich je reprezentÃ¡cia pomocou vrcholov, kde sÃº danÃ© vrcholy telesa svojimi sÃºradnicami x, y a z. V druhej reprezentÃ¡cii sÃº okrem vrcholov zahrnutÃ© aj hrany. KaÅ¾dÃ¡ hrana je danÃ¡ zaÄiatoÄnÃ½m a koncovÃ½m bodom. Program by mal vedieÅ¥ vypÃ­saÅ¥ nÃ¡zov telesa, poÄet jeho vrcholov a ich sÃºradnice, pre telesÃ¡ s hranovou reprezentÃ¡ciou aj poÄet hrÃ¡n a sÃºradnice ich vrcholov. VÅ¡etky tieto informÃ¡cie sÃº pre kaÅ¾dÃ© teleso uloÅ¾enÃ© v textovom sÃºbore. Pre vrcholy sÃº vymenovanÃ© ich sÃºradnice, pre hrany zase indexy ich zaÄiatoÄnÃ©ho a koncovÃ©ho bodu v poli vrcholov. Pred samotnÃ½m vymenovanÃ­m vrcholov alebo hrÃ¡n je uvedenÃ½ ich poÄet. Rozbor rieÅ¡enia. FunkÄnosÅ¥ programu bude rozdelenÃ¡ do Å¡tyroch tried â bod, hrana, teleso a teleso s hranami. Trieda bod bude reprezentovaÅ¥ 3D bod a bude obsahovaÅ¥ tri Ãºdaje x, y a z. KeÄÅ¾e vrcholy budÃº v rÃ¡mci telesa uloÅ¾enÃ© v dynamickom poli, konÅ¡truktor triedy bude prÃ¡zdny a sÃºradnice nastavÃ­ metÃ³da Nastav suradnice. MetÃ³da Vypis suradnice zase vÅ¡etky sÃºradnice bodu vypÃ­Å¡e. Trieda hrana bude maÅ¥ dva sÃºkromnÃ© Ãºdaje â objekty a a b triedy bod. Tieto Ãºdaje nastavÃ­ metÃ³da Nastav vrcholy a zverejnia ich metÃ³dy A a B. Trieda teleso bude zapÃºzdrovaÅ¥ reprezentÃ¡ciu telesa pomocou vrcholov. Bude obsahovaÅ¥ Ãºdaje nazov â nÃ¡zov telesa, pocet vrcholov, dynamickÃ© pole V typu bod na uchovanie vrcholov a objekt subor triedy fstream reprezentujÃºci sÃºbor, v ktorom sÃº uchovanÃ© Ãºdaje o telese. V konÅ¡truktore sa nastavÃ­ nÃ¡zov telesa a zo sÃºboru sa naÄÃ­ta poÄet jeho vrcholov, alokuje sa pole V a naplnÃ­ sa sÃºradnicami vrcholov. V deÅ¡truktore sa pole V dealokuje a sÃºbor sa zatvorÃ­. MetÃ³da Vypis vrcholy vypÃ­Å¡e nÃ¡zov telesa, poÄet jeho vrcholov a ich sÃºradnice. Trieda teleso s hranami bude odvodenÃ¡ od triedy teleso. NavyÅ¡e bude maÅ¥ Ãºdaje pocet hran a pole H na uchovanie jednotlivÃ½ch hrÃ¡n. Takisto pribudne metÃ³da Vypis hrany. V konÅ¡truktore mÃ´Å¾eme vyuÅ¾iÅ¥ prÃ­kazy konÅ¡truktora triedy teleso, keÄÅ¾e inicializÃ¡cia objektu triedy teleso s hranami zaÄne presne tÃ½mi istÃ½mi prÃ­kazmi ako inicializÃ¡cia objektu triedy teleso. KonÅ¡truktor bude Äalej pokraÄovaÅ¥ naÄÃ­tanÃ­m Ãºdajov o hranÃ¡ch. DeÅ¡truktor dealokuje pole H a Äalej bude pokraÄovaÅ¥ prÃ­kazmi deÅ¡truktora triedy teleso. #include <iostream> #include <fstream> #include <string> using namespace std; class bod private: float x,y,z; public: void Nastav suradnice(float x,float y,float z) {this->x=x; this->y=y; this->z=z;} void Vypis suradnice() {cout<<x<<"" ""<<y<<"" ""<<z<<endl;} class hrana private: bod a,b; public:"
265,50,0.54,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Roly Ä¾udÃ­ (v tomto kontexte oznaÄovanÃ½ch aj ako subjekty) v softvÃ©rovÃ½ch projektoch prirodzene vyplÃ½vajÃº z rÃ´znych typov ÄinnostÃ­ a zodpovednostÃ­, ale taktieÅ¾ aj zo zÃ¡ujmov zÃºÄastnenÃ½ch strÃ¡n. Neexistuje jedinÃ© rozdelenie. Prakticky kaÅ¾dÃ¡ inÅ¡titÃºcia vyvÃ­jajÃºca softvÃ©r si ho nejako definuje (veÄ¾mi veÄ¾kÃ© spoloÄnosti mÃ´Å¾u maÅ¥ desiatky aÅ¾ stovky definovanÃ½ch rolÃ­). Predsa len vÅ¡ak existujÃº niektorÃ© typickÃ© oznaÄenia (ich prehÄ¾ad nÃ¡jdete na Obr. 1.1), charakterizujÃºce Äinnosti a zodpovednosti dotyÄnÃ½ch ÃºÄastnÃ­kov softvÃ©rovÃ½ch projektov. Ani tie vÅ¡ak nemajÃº Ãºplne jasnÃ© hranice a niekedy sa prekrÃ½vajÃº."
135,77,0.54,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.5.2 NÃ¡vrh pouÅ¾Ã­vateskÃ½ch rozhranÃ­ Jeden spÃ´sob ako zachyti vzory pri nÃ¡vrhu HCI je pouÅ¾i odporÃºania vÃ½robcu prÃ­sluÅ¡nÃ©ho operanÃ©ho systÃ©mu. PrÃ­kladom sÃº Apple Leopard User Experience Guidelines6 alebo Windows User Experience Interaction Guidelines7. TÃ½mto sa zaruÃ­ jednotnÃ½ vzhad a funkcionalita na mikroÃºrovni (tvar tlaidiel, formulÃ¡re), avÅ¡ak tieto odporÃºania sa viaÅ¾u na konkrÃ©tny systÃ©m a nie sÃº prenosnÃ© a rovnako pouÅ¾itenÃ© aj inde. Pre lepÅ¡ie abstrahovanie funkcionality v rozhraniach sa sÃºstredÃ­me na podstatu softvÃ©ru (Tidwell, 1999). VÅ¡etky efektÃ­vne softvÃ©rovÃ© nÃ¡stroje zabezpeujÃº viac menej aspo nasledujÃºce dve veci (Kaisler, 2005): 1. formujÃº pouÅ¾Ã­vateovo pochopenie obsahu pomocou Å¡tylizovanej prezentÃ¡cie, vhodnÃ½m spÃ´sobom rozbaujÃºc prezentovanÃ½ obsah, 2. umoÅ¾ujÃº pouÅ¾Ã­vateovi vykona Ãºlohu postupnÃ½m odhaovanÃ­m moÅ¾nÃ½ch akciÃ­ poda aktuÃ¡lneho stavu interakcie. Tieto dimenzie sÃº skoro ortogonÃ¡lne (Tidwell, 1999) a vzory HCI predstavujÃº rovnovÃ¡hu medzi mnoÅ¾stvom zobrazovanÃ©ho obsahu a rozsahom ponÃºkanÃ½ch akciÃ­. ZvyÅ¡ok tejto asti venujeme prÃ­kladom vzorov a ich rozdeleniu poda (Tidwell, 2005) do kategÃ³riÃ­, ktorÃ© moÅ¾no vnÃ­ma aj ako rozdelenie s dÃ´razom na obsah alebo akcie. OrganizÃ¡cia obsahu ExistujÃº viacerÃ© prÃ­stupy k zobrazeniu obsahu tak, aby bola jeho prezentÃ¡cia pre pouÅ¾Ã­vatea zrozumitenÃ¡. Vzor DvojitÃ½ panel (na obrÃ¡zku 1-11) je vhodnÃ½ v prÃ­pade zoznamu objektov, kde kaÅ¾dÃ½ prvok zoznamu obsahuje aj alÅ¡Ã­ zaujÃ­mavÃ½ obsah, ktorÃ½ chceme zobrazi. PouÅ¾ijeme dva panely veda seba tak, Å¾e v jednom bude zoznam prvkov, v ktorom mÃ´Å¾e pouÅ¾Ã­vate vybra ubovonÃ½ prvok a v druhom sa potom pre prvok zvolenÃ½ v prvom paneli zobrazÃ­ jeho obsah. SprÃ¡vy v schrÃ¡nke emailovÃ©ho klienta alebo fotografie v albume sÃº dobrÃ­ kandidÃ¡ti pre tento vzor. TakÃ©to pouÅ¾itie je zauÅ¾Ã­vanÃ© a pouÅ¾Ã­vatelia rÃ½chlo pochopia vzÃ¡jomnÃº interakciu oboch panelov. Vzor Sprievodca (angl. Wizard) je uÅ¾itonÃ½ v prÃ­pade dlhej a komplikovanej Ãºlohy. VhodnÃ© je Ãºlohu rozdeli do menÅ¡Ã­ch ahÅ¡ie pochopitenÃ½ch astÃ­ a vies pouÅ¾Ã­vatea v procese Ãºlohy vo vopred urenom poradÃ­. OÃ­slovanie jednotlivÃ½ch menÅ¡Ã­ch Ãºloh uahuje pouÅ¾Ã­vateovi orientÃ¡ciu a zniÅ¾uje riziko, Å¾e niektorÃº Ãºlohu omylom preskoÃ­. Vzor Viac na poÅ¾iadanie (obrÃ¡zok 1-12) zjednoduÅ¡uje prezentÃ¡ciu vÃ¤Å¡ieho mnoÅ¾stva obsahu, ktorÃ½ nie je vÅ¡etok aÅ¾ tak dÃ´leÅ¾itÃ½. Pri jeho pouÅ¾itÃ­ sa najskÃ´r zobrazÃ­ len zÃ¡kladnÃ¡ funkcionalita a zvyÅ¡ok funkcionality je dostupnÃ½ jednoduchou akciou pouÅ¾Ã­vatea. PouÅ¾itie tohto vzoru Å¡etrÃ­ vyuÅ¾itenÃº plochu v rozhranÃ­ a uahuje prÃ¡cu vÃ¤Å¡ine pouÅ¾Ã­vateov, ktorÃ­ dodatonÃº funkcionalitu zvyajne nepotrebujÃº. 6 http://developer.apple.com/documentation/UserExperience/index.html 7 http://msdn.microsoft.com/en-us/library/aa511258.aspx"
59,293,0.54,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ProblÃ©my ProblÃ©m 5.1. Ako je definovanÃ© podÄ¾a americkÃ©ho psycholÃ³ga Thorndike uÄenie s odmenou a trestom? ProblÃ©m 5.2. Ako sa pouÅ¾Ã­vajÃº neurÃ³novÃ© siete ako prostriedok pre rozhodovanie v hre? ProblÃ©m 5.3. AkÃ½ je klasickÃ½ prÃ­stup k uÄeniu neurÃ³novej siete, aby vedela vyhodnocovaÅ¥ prechod z jednÃ©ho stavu do druhÃ©ho stavu pri konÅ¡trukcii stromu rieÅ¡enia? ProblÃ©m 5.4. Å pecifikujte adaptÃ¡ciu neurÃ³novej siete pomocou metÃ³dy odmeny a trestu vo verzii âtemporal difference TD(ï¬)â. ProblÃ©m 5.5. (NÃ¡met pre esej) Pre danÃ© jednoduchÃ© bludisko obsahujÃºce 10 aÅ¾ 20 uzlov, ktorÃ© sÃº oznaÄenÃ© symbolmi zostrojte pomocou uÄenia s odmenou a trestom takÃº doprednÃº neurÃ³novÃº sieÅ¥, ktorÃ¡ je schopnÃ¡ efektÃ­vne riadiÅ¥ agenta pri pohybe bludiskom. ProblÃ©m 5.6. (NÃ¡met pre zloÅ¾itejÅ¡iu esej) Proces emergencie stratÃ©giu hry piÅ¡kvorky Å¡tudujte pre populÃ¡ciu agentov s kognitÃ­vnym orgÃ¡nom (implementovanÃ½m pomocou doprednej neurÃ³novej siete) tak, Å¾e v populÃ¡cii agentov prebieha neustÃ¡ly turnaj pre nÃ¡hodne vybranÃº dvojicu agentov A1 a A2, po skonÄenÃ­ danej hry agenti A1 a A2 si adaptujÃº pomocou TD(ï¬) metÃ³dy svoje neurÃ³novÃ© siete, priÄom vÃ­Å¥az nahradÃ­ v populÃ¡cii porazenÃ©ho agenta; ak agenti remizovali, potom oba agenti v populÃ¡cii zostÃ¡vajÃº. NÃ¡rast efektÃ­vnosti hry agentov sledujte tak, Å¾e v kaÅ¾dom n-tom kroku (nech n = 100) poslednÃ½ vÃ­Å¥az hrÃ¡ 10 hier proti agentovi riadenom formÃ¡lnymi pravidlami."
265,322,0.54,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ÃdrÅ¾bu mÃ´Å¾eme rozdeliÅ¥ podÄ¾a toho, Äi sa v rÃ¡mci nej vykonÃ¡vajÃº opravy alebo rozÅ¡Ã­renia pÃ´vodnÃ©ho softvÃ©ru. Äalej mÃ´Å¾eme ÃºdrÅ¾bu rozdeliÅ¥ na reaktÃ­vnu a proaktÃ­vnu. KombinÃ¡ciou tÃ½chto pohÄ¾adov zÃ­skame Å¡tyri hlavnÃ© typy: 1. korektÃ­vna ÃºdrÅ¾ba (angl. corrective maintenance) â modifikÃ¡cia softvÃ©rovÃ©ho produktu po jeho odovzdanÃ­ s cieÄ¾om odstrÃ¡nenia (vnÃºtornÃ½ch) problÃ©mov softvÃ©ru, ktorÃ© brÃ¡nia jeho riadnemu pouÅ¾Ã­vaniu. 2. adaptÃ­vna ÃºdrÅ¾ba (angl. adaptive maintenance) â modifikÃ¡cia softvÃ©rovÃ©ho produktu po jeho odovzdanÃ­ s cieÄ¾om udrÅ¾aÅ¥ softvÃ©rovÃ½ produkt pouÅ¾iteÄ¾nÃ½ kvÃ´li meniacemu sa (alebo uÅ¾ zmenenÃ©mu) prostrediu. Zmena sa mÃ´Å¾e tÃ½kaÅ¥ hardvÃ©ru Äi platformy, na ktorÃ½ch produkt beÅ¾Ã­ (napr. vyjde novÃ¡ verzia operaÄnÃ©ho systÃ©mu, na ktorom je produkt pouÅ¾Ã­vanÃ½). 3. perfektÃ­vna ÃºdrÅ¾ba (angl. perfective maintenance) â modifikÃ¡cia softvÃ©rovÃ©ho produktu po jeho odovzdanÃ­ s cieÄ¾om rozÅ¡Ã­riÅ¥ funkcionalitu, zlepÅ¡iÅ¥ dokumentÃ¡ciu, zvÃ½Å¡iÅ¥ vÃ½konnosÅ¥ softvÃ©ru alebo inak vylepÅ¡iÅ¥ inÃ© atribÃºty softvÃ©rovÃ©ho produktu (napr. zÃ¡kaznÃ­k zistil, Å¾e vo svojom elektronickom obchode chce podporovaÅ¥ platbu bitcoinami). 4. preventÃ­vna ÃºdrÅ¾ba (angl. preventive maintenance) â modifikÃ¡cia softvÃ©rovÃ©ho produktu po jeho odovzdanÃ­ s cieÄ¾om odhaliÅ¥ a odstrÃ¡niÅ¥ skrytÃ© chyby predtÃ½m, ako sa ukÃ¡Å¾u v reÃ¡lnej prevÃ¡dzke. V rÃ¡mci korektÃ­vnej a preventÃ­vnej ÃºdrÅ¾by sa snaÅ¾Ã­me opraviÅ¥ (prejavenÃ© alebo skrytÃ© chyby), pri adaptÃ­vnej a perfektÃ­vnej vytvÃ¡rame rozÅ¡irujeme pÃ´vodnÃ½ softvÃ©r. KorektÃ­vna a adaptÃ­vna ÃºdrÅ¾ba spadajÃº do kategÃ³rie reaktÃ­vnej ÃºdrÅ¾by (reagujÃº na vzniknutÃ© okolnosti, podnety), perfektÃ­vna a preventÃ­vna do kategÃ³rie proaktÃ­vnej ÃºdrÅ¾by (na vykonanie nepotrebujÃº podnety)."
122,27,0.54,Modelovanie softvÃ©ru,"adekvÃ¡tna, Äo postrehneme hlavne na Ãºrovni pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania, predsa v nej moÅ¾no identifikovaÅ¥ prÃ­pad pouÅ¾itie Zaeviduj zÃ¡kazku. VÅ¡imnime si, Å¾e v opise prÃ­padu pouÅ¾itia nevystupujÃº prvky pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania. PrÃ­pady pouÅ¾itia ako koncepty vedomia koncovÃ½ch pouÅ¾Ã­vateÄ¾ov (ich mentÃ¡lneho modelu) majÃº v softvÃ©rovom systÃ©me a jeho pouÅ¾Ã­vateÄ¾skom rozhranÃ­ viac alebo menej dÃ´slednÃº podporu, ale nie sÃº jeho opisom. Jeden prÃ­pad pouÅ¾itia mÃ´Å¾e byÅ¥ realizovanÃ½ jednÃ½m alebo viacerÃ½mi formulÃ¡rmi pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania, kÃ½m ten istÃ½ formulÃ¡r mÃ´Å¾e byÅ¥ zahrnutÃ½ do viacerÃ½ch realizÃ¡ciÃ­ prÃ­padov pouÅ¾itia. Preto prÃ­pady pouÅ¾itia nemajÃº spomÃ­naÅ¥ oknÃ¡, tlaÄidlÃ¡, menu, oznaÄenia alebo inÃ© prvky pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania zaloÅ¾enÃ©ho na oknÃ¡ch, ako ani akÃ©hokoÄ¾vek inÃ©ho druhu pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania vÃ´bec. Spomenutie prvkov pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania tu a tam zvyÄajne nepredstavuje problÃ©m a Äasto sa s tÃ½mto stretÃ¡vame v praxi [Coc00]. AvÅ¡ak, aby sme nepadli do pasce pomÃ½lenia prÃ­padov pouÅ¾itia za Å¡pecifikÃ¡ciu pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania, najlepÅ¡ie je aktÃ­vne abstrahovaÅ¥ od hocijakÃ©ho vÃ½skytu prvkov pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania. NaprÃ­klad, namiesto toho, aby sme povedali âklikne tlaÄidlo OKâ, mÃ´Å¾eme povedaÅ¥ âpotvrdÃ­ akciuâ."
184,387,0.54,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"strÃ¡nok je oznaÄovanÃ½ch ako koreÅovÃ¡ mnoÅ¾ina RÏ. HITS rozÅ¡iruje poÄet dÃ´leÅ¾itÃ½ch autoritatÃ­vnych strÃ¡nok v podgrafe pomocou expandovania mnoÅ¾iny RÏ o odkazy, ktorÃ© do nej ukazujÃº alebo ju opÃºÅ¡Å¥ajÃº. Algoritmus je takÃ½to: Podgraf(Ï, e, t, d) Ï: dopyt e: textovÃ½ vyhladÃ¡vacÃ­ stroj t, d: prirodzenÃ© ÄÃ­sla Nech RÏ oznaÄuje vrchnÃ½ch t vÃ½sledkov z e pre dopyt Ï Nastav SÏ := RÏ Pre kaÅ¾dÃº strÃ¡nku p â Rq Nech Î+(p) oznaÄuje mnoÅ¾inu strÃ¡nok, na ktorÃ© odkazuje strÃ¡nka p Nech Î-(p) oznaÄuje mnoÅ¾inu strÃ¡nok, na ktorÃ© odkazuje strÃ¡nka p Pridaj vÅ¡etky strÃ¡nky v Î+(p) do SÏ."
76,84,0.54,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.6.4 PrÃ­klad. NÃ¡hodnÃ½ pokus spoÄÃ­va v hode dvoma hracÃ­mi kockami â modrou a Äervenou. OznaÄme A â na modrej menej ako 4 body, B â na Äervenej menej ako 4 body, C â sÃºÄet bodov na kockÃ¡ch sa rovnÃ¡ 7. a) Overte, Å¾e kaÅ¾dÃ¡ dvojica udalostÃ­ (spomedzi A, B, C) je dvojica nezÃ¡vislÃ½ch udalostÃ­. b) UkÃ¡Å¾te, Å¾e udalosÅ¥ AïB nie je nezÃ¡vislÃ¡ s udalosÅ¥ou C. c) Preverte, Äi platÃ­ P(AïBïC) = P(A) P(B) P(C) . RieÅ¡enie. a) Zrejme P(AïB) = P(A) P(B), naviac, nezÃ¡vislosÅ¥ dvojice A, B je intuitÃ­vne zrejmÃ¡ â A sa tÃ½ka len modrej kocky a B len Äervenej. Aj dvojica A, C je dvojicou nezÃ¡vislÃ½ch udalostÃ­, pretoÅ¾e platÃ­ P(AïC) = P(A) P(C), keÄÅ¾e P(A) = 1/2, P(C) = 1/6 a P(AïC) = 3/36 = 1/12. Analogicky zistÃ­me, Å¾e aj B, C je dvojica nezÃ¡vislÃ½ch udalostÃ­. b) MÃ¡me ukÃ¡zaÅ¥, Å¾e rovnosÅ¥ P( (AïB) ï C ) = P(A ï B) P(C) neplatÃ­. Ä½ahko sa overÃ­, Å¾e C je podudalosÅ¥ou AïB, t. j. C ï AïB. Preto Ä¾avÃ¡ strana sa rovnÃ¡ P(C), kÃ½m pravÃ¡ strana je menÅ¡ia ako P(C), teda rovnosÅ¥ neplatÃ­. c) AïBïC = ï, a preto P(AïBïC) = 0. RovnosÅ¥ P(AïBïC) = P(A) P(B) P(C) neplatÃ­, pretoÅ¾e P(A) P(B) P(C) = 1/24. V prÃ­klade ide o trojicu udalostÃ­, ktorÃ© sÃº po dvoch nezÃ¡vislÃ©, ale nimi vykombinovanÃ© udalosti nie sÃº nezÃ¡vislÃ© â veÄ udalosÅ¥ (AïB) nie je nezÃ¡vislÃ¡ s C. Ak chceme, aby (AïB) bola nezÃ¡vislÃ¡ s C, musÃ­me Å¾iadaÅ¥ viac ako to, aby A, B, C boli po dvoch nezÃ¡vislÃ©. Preto sa nezÃ¡vislosÅ¥ trojice udalostÃ­ definuje tak, ako to uvÃ¡dza nasledujÃºca definÃ­cia. 1.6.5 DefinÃ­cia. Udalosti A, B, C sÃº (ako trojica) nezÃ¡vislÃ©, ak sÃº po dvoch nezÃ¡vislÃ© a naviac platÃ­: P(AïBïC) = P(A) P(B) P(C). 1.6.6 PoznÃ¡mka. Uvedomme si, Å¾e predpoklad nezÃ¡vislosti udalostÃ­ A, B, C znamenÃ¡, Å¾e platia Å¡tyri rovnosti: P(AïB) = P(A) P(B), P(AïC) = P(A) P(C), P(BïC) = P(B) P(C), P(AïBïC) = P(A) P(B) P(C). Ä½ahko sa ukÃ¡Å¾e, Å¾e ak A, B, C sÃº nezÃ¡vislÃ© udalosti, tak nezÃ¡vislÃ© sÃº aj dvojice, resp. trojice a) Aï¢, B, C"
205,72,0.54,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Z hÄ¾adiska internacionalizÃ¡cie sa vÃ½skum zameriaval na zastÃºpenie krajÃ­n na webe. ZachytenÃ© webovÃ© sÃ­dla priradili k ich vlastnÃ­kom a ku krajinÃ¡m, z ktorÃ½ch pochÃ¡dzali. Vzorky webu z roku 1999 ukÃ¡zali, Å¾e polovica verejnÃ©ho webu pochÃ¡dzala z USA a ostatnÃ© krajiny mali nanajvÃ½Å¡ 5% zastÃºpenie. Na konci vÃ½skumu v roku 2002 podiel webu z USA stÃºpol na 55 %, zatiaÄ¾ Äo zastÃºpenie ostatnÃ½ch krajÃ­n zostalo pribliÅ¾ne rovnakÃ© (pozri obrÃ¡zok 15). Celkovo bolo identifikovanÃ½ch 76 krajÃ­n. Z tÃ½chto zistenÃ­ autori usÃºdili, Å¾e najpouÅ¾Ã­vanejÅ¡Ã­m jazykom na webe je anglickÃ½ jazyk."
40,98,0.54,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Na zÃ¡vÄr si popiÅ¡me chovÃ¡nÃ­ agenta â stopaÅe â, kterÃ½ dokÃ¡Å¾e nÃ¡sledovat jinÃ©ho agenta. TakovÃ© chovÃ¡nÃ­ se Äasto hodÃ­ v poÄÃ­taÄovÃ½ch hrÃ¡ch. VytvoÅenÃ­ stopaÅe je pomÄrnÄ jednoduchÃ©. JedinÃ© informace z prostÅedÃ­, jeÅ¾ bude potÅebovat, jsou pozice ostatnÃ­ch agentÅ¯, kterÃ© momentÃ¡lnÄ vidÃ­. MÃ¡me-li tyto informace k dispozici, mÅ¯Å¾eme vytvoÅit stopaÅe nÃ¡sledovnÄ: V momentÄ, kdy se v jeho zornÃ©m poli objevÃ­ cizÃ­ agent, vyÅ¡leme pÅÃ­kaz âjdi na pozici tohoto agentaâ (âjdiâ pomocÃ­ navigaÄnÃ­ch pravidel; tzn. pokud se napÅÃ­klad po cestÄ objevÃ­ pÅekÃ¡Å¾ka, obejdi ji). V pÅÃ­padÄ, Å¾e je agentÅ¯ ve stopaÅovÄ zornÃ©m poli vÃ­ce, bude stopaÅ nÃ¡sledovat nejbliÅ¾Å¡Ã­ho z nich. Jak se lze zbavit stopaÅe, pokud nÃ¡s sleduje? ZaprvÃ© mÅ¯Å¾eme zmizet z jeho zornÃ©ho pole. ZadruhÃ© mÅ¯Å¾eme pÅibÄhnout ke skupince agentÅ¯ a doufat, Å¾e stopaÅ zaÄne sledovat nÄkoho z nich. Nebo ho mÅ¯Å¾eme zkusit vlÃ¡kat do pasti jako na obrÃ¡zku 10. ZbÃ½vÃ¡ vyÅeÅ¡it jeden problÃ©m: co to znamenÃ¡, Å¾e stopaÅ nÄkoho âvidÃ­â? Obvykle to znamenÃ¡, Å¾e se cizÃ­ agent (nebo objekt) nachÃ¡zÃ­ v jeho zornÃ©m poli (âfield of viewâ) a mezi stopaÅem a agentem nenÃ­ Å¾Ã¡dnÃ¡ neprÅ¯hlednÃ¡ pÅekÃ¡Å¾ka. PÅÃ­tomnost pÅekÃ¡Å¾ky zjistÃ­me jiÅ¾ znÃ¡mou technikou vrhÃ¡nÃ­ paprskÅ¯: vrhneme paprsek z âoÄÃ­â agenta smÄrem k tÄÅ¾iÅ¡ti objektu: pokud paprsek narazÃ­ do pÅekÃ¡Å¾ky, Åekneme, Å¾e objekt agent nevidÃ­ (dobrÃ¡, pokud je objekt zakrytÃ½ ÄÃ¡steÄnÄ, tak to nemusÃ­ fungovat, ale vrhat vÃ­c paprskÅ¯ zase stojÃ­ vÃ½poÄetnÃ­ zdroje...). Å Ã­Åka zornÃ©ho pole agenta bÃ½vÃ¡ obvykle zhruba 90Â°. ExistujÃ­ i sloÅ¾itÄjÅ¡Ã­ mechanismy vnÃ­mÃ¡nÃ­, ale pouÅ¾Ã­vajÃ­ se jen tam, kde je to opravdu nutnÃ©: napÅÃ­klad ve hÅe Thief, kde se agenti Äasto pohybujÃ­ v pÅÃ­Å¡eÅÃ­ a kde jejich vjemy zÃ¡visÃ­ na kdejakÃ©m Å¡ustnutÃ­ [35]. VÃ½Å¡e jsme ÅÃ­kali, Å¾e agenti Äasto nevidÃ­ zdroje svÄtla, nevnÃ­majÃ­ stÃ­ny Äi mlhu. S vylepÅ¡enÃ½mi mechanismy vnÃ­mÃ¡nÃ­ to nemusÃ­ bÃ½t pravda. Na akademickÃ© pÅ¯dÄ se takÃ© vÄnuje nÄkolik skupin modelovÃ¡nÃ­ pozornosti (napÅ. [33]). Jde o to, Å¾e kdyÅ¾ je kolem agenta hodnÄ viditelnÃ½ch pÅedmÄtÅ¯, nemÄl by si jich stihnout vÅ¡imnout vÅ¡ech. PomocÃ­ mechanismu pozornosti lze takÃ© modelovat oÄnÃ­ pohyby: agenti vypadajÃ­ vÄrohodnÄji, pokud se jejich oÄi natÃ¡ÄÃ­ podle toho, na kterÃ½ objekt se dÃ­vajÃ­. K zamyÅ¡lenÃ­: dokÃ¡zali byste agenta stopaÅe vylepÅ¡it tak, aby se vymotal z pasti (obr. 10), pokud je do nÃ­ naveden? NÃ¡povÄda: zkuste vyuÅ¾Ã­t navigaÄnÃ­ho grafu."
369,255,0.54,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.19. Vzor BankovÃ½ produkt â alternatÃ­va 2 Obr. 4.18 a 4.19 obsahujÃº modely metaÃºrovne pre definovanie bankovÃ½ch produktov. OperatÃ­vnu ÃºroveÅ zmlÃºv klientov o bankovÃ½ch produktoch ukazuje obr. 4.10. Zmluva mÃ´Å¾e byÅ¥ buÄ na zÃ¡kladnÃ½ produkt alebo na balÃ­k produktov, ktorÃ½ mÃ¡ svoje parciÃ¡lne zmluvy. ParciÃ¡lna zmluva sa viaÅ¾e na konkrÃ©tny ÃºÄet klienta alebo inÃ© konkrÃ©tne predmety zmluvy, naprÃ­klad platobnÃ© karty. ZloÅ¾enÃ© bankovÃ© produkty sa zvyÄajne nepredÃ¡vajÃº iba ako ÄistÃ© agregÃ¡cie produktov, ale zahÅÅajÃº tieÅ¾ rÃ´zne sluÅ¾by (balÃ­ky sluÅ¾ieb), predovÅ¡etkÃ½m urÄitÃ½ poÄet operÃ¡ciÃ­, ktorÃ© sÃº zdarma, resp. sÃº zÄ¾avnenÃ©. BalÃ­k produktov mÃ´Å¾e tieÅ¾ zahÅÅaÅ¥ nielen produkty, ktorÃ½ch cena je zahrnutÃ¡ v cene balÃ­ka, ale tieÅ¾ doplnkovÃ© produkty so zÄ¾avou. KomplexnejÅ¡Ã­ model pre bankovÃ© produkty vrÃ¡tane ich poplatkov poskytuje obr. 4.21. UvedenÃ½ model rozÅ¡iruje Å¡pecializovanÃ½ vzor Poplatok za balÃ­k produktov na obr. 3.50."
135,211,0.54,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.2.7 VÃ½mena sprÃ¡v KomunikÃ¡cia v rÃ¡mci systÃ©mu riadenÃ©ho tokom Ãºdajov je zaloÅ¾enÃ¡ na posielanÃ­ sprÃ¡v. Tento spÃ´sob komunikÃ¡cie umoÅ¾uje efektÃ­vnu komunikÃ¡ciu medzi programami, synchronizÃ¡ciu, plÃ¡novanie Ãºloh, i reprezentÃ¡ciu dÃ¡tovÃ½ch zÃ¡vislostÃ­. Ãelom posielania sprÃ¡v je predovÅ¡etkÃ½m teda:"
393,35,0.539,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PrimitÃ­va PrimitÃ­va sÃº jednotlivÃ© akcie na najjemnejÅ¡ej Ãºrovni podrobnosti, ktorÃ© vykonÃ¡va webovÃ¡ sluÅ¾ba. SÃº dva zÃ¡kladnÃ© spÃ´soby, ako sa primitÃ­va mÃ´Å¾u sprÃ¡vaÅ¥ v systÃ©moch reÃ¡lneho Äasu. V prvom prÃ­pade primitÃ­vum vykonÃ¡ vÃ½poÄet (ktorÃ½ mÃ´Å¾e trvaÅ¥ veÄ¾mi dlho) a vrÃ¡ti vÃ½slednÃº hodnotu. V druhom prÃ­pade primitÃ­vum naÅ¡tartuje proces a vrÃ¡ti iba informÃ¡ciu o tom, Äi sa podarilo ÃºspeÅ¡ne naÅ¡tartovaÅ¥ proces, alebo nie, kontrola stavu procesu a jeho vÃ½slednej hodnoty sÃº ÄalÅ¡ie akcie volajÃºceho programu. BOD odporÃºÄa prienik medzi tÃ½mito dvoma prÃ­stupmi, ale aj keÄ DAML-S procesnÃ¡ ontolÃ³gia umoÅ¾Åuje paralelnÃ© operÃ¡cie, ich opis nie je dostatoÄnÃ½. Treba, aby sa pre kaÅ¾dÃº moÅ¾nÃº komunikÃ¡ciu so sluÅ¾bou Å¡pecifikovalo v profile sluÅ¾by, Äi danÃ© volanie bude blokujÃºce alebo nie, Äi danÃ½ proces skonÄÃ­ za pevnÃ½, variabilnÃ½ Äas, alebo neskonÄÃ­ vÃ´bec."
111,67,0.539,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Ãlohy Ãlohy by mali reprezentovaÅ¥ prÃ­pady pouÅ¾itia vaÅ¡ej webovej strÃ¡nky. SprÃ¡vne napÃ­sanie Ãºloh je nevyhnutnÃ©, aby sa respondenti sprÃ¡vali Äo najprirodzenejÅ¡ie. Chcete, aby respondenti interagovali so stromom rovnako ako v reÃ¡lnej situÃ¡cii napr. s navigaÄnÃ½m menu. SprÃ¡vne odpovede pre jednotlivÃ© Ãºlohy si urÄÃ­te vy. Ãloha mÃ´Å¾e maÅ¥ aj viac ako jednu sprÃ¡vnu odpoveÄ. Ako sprÃ¡vne odpovede pre Ãºlohy je moÅ¾nÃ© vybraÅ¥ len obsahovÃ© (listovÃ©) uzly. ZÃ­skajte ÄalÅ¡ie informÃ¡cie o tom, preÄo nie je moÅ¾nÃ© vybraÅ¥ nadradenÃ© uzly ako sprÃ¡vne odpovede [5]. ZvÃ¡Å¾te ciele, ktorÃ© ste si stanovili pre testovanie a pouÅ¾ite ich ako zÃ¡klad pri formulovanÃ­ Ãºloh. Povedzme, Å¾e mÃ¡me menu internetovÃ©ho obchodu a jednÃ½m z vaÅ¡ich cieÄ¾ov je zistiÅ¥, Äi vaÅ¡i zÃ¡kaznÃ­ci nÃ¡jdu formulÃ¡r na vrÃ¡tenie peÅazÃ­. Ãloha, ktorÃº formulujete pre tento cieÄ¾ by mohla znieÅ¥: âJedna z poloÅ¾iek vo vaÅ¡ej objednÃ¡vke bola poÅ¡kodenÃ¡. NÃ¡jdite, kde by ste mohli tento problÃ©m vyrieÅ¡iÅ¥.â VÃ½sledky pre tÃºto Ãºlohu potom odpovedia na otÃ¡zky, ako naprÃ­klad: â¢ KoÄ¾ko Ä¾udÃ­/respondentov ÃºspeÅ¡ne naÅ¡lo formulÃ¡r na vrÃ¡tenie peÅazÃ­? â¢ Ako priamo si respondenti vybrali svoje odpovede? BlÃºdili? Ako veÄ¾mi? â¢ Ako dlho im trvalo nÃ¡jsÅ¥ formulÃ¡r na vrÃ¡tenie peÅazÃ­? â¢ AkÃ½mi cestami v ponuke sa respondenti vydali, aby naÅ¡li formulÃ¡r na vrÃ¡tenie peÅazÃ­? Ak napÃ­Å¡ete svoje Ãºlohy tak, aby podrobne pokrÃ½vali rÃ´zne oblasti, ktorÃ© chcete zlepÅ¡iÅ¥, Ãºdaje, ktorÃ© potom zÃ­skate, vÃ¡m ukÃ¡Å¾u, do akej miery sa vÃ¡m darÃ­ splniÅ¥ vaÅ¡e ciele. Ak len 50% respondentov naÅ¡lo formulÃ¡r na vrÃ¡tenie peÅazÃ­ a zvyÅ¡nÃ½ch 50% ho najskÃ´r hÄ¾adalo v inÃ½ch Äastiach menu, mÃ´Å¾eme pokojne povedaÅ¥, Å¾e tieto metriky dokazujÃº, Å¾e formulÃ¡r na vrÃ¡tenie peÅazÃ­ potrebuje premiestnenie. Chcete, aby Ãºlohy jemne nabÃ¡dali respondentov k tomu, aby sa sprÃ¡vali ako v skutoÄnej situÃ¡cii, ktorÃ¡ mÃ´Å¾e nastaÅ¥ na vaÅ¡ej webovej strÃ¡nke. ÄÃ­tanie Ãºloh by malo respondentom pomÃ´cÅ¥ dostaÅ¥ sa do sprÃ¡vneho myslenia. DobrÃ½m spÃ´sobom ako to dosiahnuÅ¥, je prezentovaÅ¥ Ãºlohy ako prÃ­behy (angl. user stories) s pouÅ¾itÃ­m jednoduchÃ©ho a neformÃ¡lneho jazyka, ktorÃ½ nastavÃ­ situÃ¡ciu a podnieti respondentov k hÄ¾adaniu rieÅ¡enia. NaprÃ­klad namiesto: âVyberte, kde si myslÃ­te, Å¾e nÃ¡jdete prevÃ¡dzkovÃº dobu poÅ¡ty.â by ste mohli napÃ­saÅ¥: âChceli by ste poslaÅ¥ balÃ­k poÅ¡tou, ale neviete, kedy je poÅ¡ta otvorenÃ¡. Kde by ste hÄ¾adali informÃ¡cie, ktorÃ© by vÃ¡m pomohli?â Ãloha poskytuje respondentom kontext a vÃ½znam, ktorÃ½ viac sÃºstredÃ­ ich pozornosÅ¥ a nÃºti ich hlbÅ¡ie spracovaÅ¥ informÃ¡cie, namiesto toho, aby im dÃ¡vala presnÃ© pokyny, ako vyrieÅ¡iÅ¥ Ãºlohu."
135,63,0.539,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.3.4 ZÃ¡ver Ako vidÃ­me, Obaova sa vyskytuje v katalÃ³goch vzorov, a teda aj v praktickÃ½ch systÃ©moch, pomerne asto. Poda nÃ¡Å¡ho nÃ¡zoru nejde o nÃ¡hodnÃ½ jav: dÃ´vodom je potreba spoluprÃ¡ce nezÃ¡visle vyvinutÃ½ch sÃºiastok, ktorÃ¡ â ako oakÃ¡vame â bude Ã­m alej, tÃ½m vÃ½raznejÅ¡ia."
135,209,0.539,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.2.6 SystolickÃ© polia alÅ¡Ã­m prÃ­kladom pouÅ¾itia architektÃºry pre systÃ©my riadenÃ© tokom Ãºdajov sÃº systolickÃ© polia. SystolickÃ© pole mÃ´Å¾e by lineÃ¡rne, kde sa jednotlivÃ© vÃ½potovÃ© uzly nachÃ¡dzajÃº lineÃ¡rne za sebou alebo sieovÃ©, kde jednotlivÃ© uzly vytvÃ¡rajÃº zloÅ¾itejÅ¡iu Å¡truktÃºru (napr. 2D mrieÅ¾ku). V systolickom poli teÃº Ãºdaje medzi susedmi. DÃ¡ta teÃº z jednej strany, na uzle sa uskutonÃ­ vÃ½poet a vÃ½sledok prejde na druhÃº stranu. VhodnÃ½m prÃ­kladom pouÅ¾itia vÃ½potu realizovatenÃ©ho tÃ½mto spÃ´sobom mÃ´Å¾e by nÃ¡sobenie matÃ­c. ZnÃ¡my prÃ­klad implementÃ¡cie systolickÃ©ho poa je procesor iWarp schematickÃ½ zobrazenÃ½ na obrÃ¡zku 3-3."
240,504,0.539,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"3. NadviaÅ¾eme na rieÅ¡enie predchÃ¡dzajÃºcej Ãºlohy (2) a namiesto cyklu for v riadku 8 pouÅ¾ijeme nasledujÃºci cyklus: while (--n) 4. PostupnosÅ¥ ÄÃ­sel na vstupe by sme si museli celÃº zapamÃ¤taÅ¥ v pamÃ¤ti do poÄ¾a. PriebeÅ¾ne by sme si urÄovali index maximÃ¡lneho ÄÃ­sla a pri vÃ½pise vÃ½sledku by sme vypÃ­sali hodnotu ÄÃ­sla na indexe max. UpravenÃ½ program uvÃ¡dzame na konci. VÅ¡imnime si, Å¾e okrem vytvorenia poÄ¾a potrebnej veÄ¾kosti sme museli upraviÅ¥ hranice cyklov, pretoÅ¾e polia sÃº v jazyku C indexovanÃ© od 0 do N-1. ReprezentÃ¡cia vÃ½sledku v tomto cviÄenÃ­ je pre tÃºto Ãºlohu nevÃ½hodnÃ¡, pretoÅ¾e vÃ½slednÃ½ program potrebuje pre vÃ½poÄet vÃ½sledku vÃ½znamne viac pamÃ¤ti. RieÅ¡enie bez naÄÃ­tania vstupnej postupnosti do pamÃ¤te je teda vÃ½razne efektÃ­vnejÅ¡ie."
190,259,0.538,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"1. VÅ¡etci, ktorÃ­ prispievajÃº do projektu pracujÃº spolu na jednom mieste. Ak s nami zÃ¡kaznÃ­cka strana pracuje priamo na projekte, nemusÃ­me Bez riadenia venovaÅ¥ toÄ¾ko Ãºsilia Å¡pecifikÃ¡cii a poÅ¾iadavkÃ¡m. VÅ¡etci poznajÃº prokvality sa jekt do hÄºbky. nezaobÃ­de ani 2. PlÃ¡novanie projektu poÄas celÃ©ho jeho Å¾ivota. malÃ½ projekt 3. ÄastÃ¡ aÅ¾ neustÃ¡la integrÃ¡cia produktu. SnaÅ¾iÅ¥ sa vytvÃ¡raÅ¥ jednotlivÃ© Äasti aplikÃ¡cie tak, aby mohli byÅ¥ samostatne integrovateÄ¾nÃ©. OveÄ¾a s 5-7 Ä¾uÄmi. rÃ½chlejÅ¡ie vieme posÃºdiÅ¥ aktuÃ¡lny stav projektu a nÃ¡sledne odhadovaÅ¥ novÃ© Äinnosti bez namÃ¡havÃ©ho a podrobnÃ©ho plÃ¡novania. 4. ÄastÃ© prehliadky kÃ³du. Nie je priamo sÃºÄasÅ¥ou agilnÃ½ch metodÃ­k, ale z mÃ´jho pohÄ¾adu vhodnejÅ¡ie ako niekedy Å¥aÅ¾ko realizovateÄ¾nÃ© programovanie v pÃ¡roch. Ak si zavolÃ¡m pri uloÅ¾enÃ­ do ÃºloÅ¾iska kolegu na posÃºdenie toho, Äo som spravil spotrebujeme mÃ¡lo projektovÃ©ho Äasu, ale veÄ¾a zÃ­skame. S tÃ½mto princÃ­pom sÃºvisÃ­ aj princÃ­p spoloÄnÃ©ho vlastnÃ­ctva kÃ³du."
76,158,0.538,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.5 Rozdelenie transformovanej nÃ¡hodnej veliÄiny Aj keÄ nÃ¡hodnÃ¡ veliÄina je pre nÃ¡s zobrazenie, pracujeme s Åou trochu Å¡pecifickÃ½m spÃ´sobom. To, Äo nÃ¡s eminentne zaujÃ­ma, je jej rozdelenie. Z ÄlÃ¡nku 2.3 vieme, Å¾e rozdelenie nÃ¡hodnej veliÄiny urÄuje distribuÄnÃ¡ funkcia vzÅ¥ahom P( ï£"
43,259,0.538,Objektovo orientovanÃ© programovanie v C++,"UvedenÃ½ program je plne funkÄnÃ½, pozrime sa vÅ¡ak bliÅ¾Å¡ie na to, ako odovzdÃ¡vame obrÃ¡zok (objekt triedy obrazok) metÃ³dam Jas a Kontrast triedy editor. V tejto verzii je trieda editor navrhnutÃ¡ tak, Å¾e jej metÃ³dy preberajÃº parameter O hodnotou. Z toho vyplÃ½va, ako sme si hovorili v predchÃ¡dzajÃºcej kapitole, Å¾e sa vytvorÃ­ kÃ³pia objektu, ktorÃ½ do metÃ³dy posielame ako argument, a metÃ³da potom pracuje s touto kÃ³piou. Pre program v tejto podobe to nepredstavuje nijakÃ© vÃ½znamnÃ© Å¥aÅ¾kosti, hoci by mohol nastaÅ¥ problÃ©m, ak by uÅ¾ v operaÄnej pamÃ¤ti nebolo pre"
66,145,0.537,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Bitmap index vzhÄ¾adom na veÄ¾kÃº rÃ©Å¾iu pri vkladanÃ­ a mazanÃ­ zÃ¡znamov sa nepouÅ¾Ã­va ako samostatnÃ½ index, ktorÃ½ by bol permanentne uloÅ¾enÃ½ a udrÅ¾iavanÃ½. PouÅ¾Ã­va sa vo forme inmemory indexy, ktorÃ½ je doÄasne vytvorenÃ½ pre konkrÃ©tny dopyt. VÃ½znam ma pri prehÄ¾adÃ¡vanÃ­ indexu, kedy sa oÄakÃ¡va nÃ¡jdenie vÃ¤ÄÅ¡ieho mnoÅ¾stva zÃ¡znamov, ktorÃ© uÅ¾ nie je efektÃ­vne zÃ­skavaÅ¥ pomocou samotnÃ©ho indexu (veÄ¾kÃ© mnoÅ¾stvo nÃ¡hodnÃ½ch prÃ­stupov), ale nie je dostatoÄnÃ© veÄ¾kÃ© pre pouÅ¾itie sekvenÄnÃ©ho skenu. PoÄas prehÄ¾adÃ¡vania sa vytvorÃ­ bit mapa pre zÃ¡znamy, ktorÃ© vyhovujÃº podmienke a nÃ¡sledne sÃº do hlavnej pamÃ¤te vytiahnutÃ© iba tie strÃ¡nky, na ktorÃ½ch sa nachÃ¡dzajÃº vyhovujÃºce zÃ¡znamy. PokiaÄ¾ sÃº dve bit mapy vytvorenÃ© nad rovnakÃ½mi zÃ¡znamami, je moÅ¾nÃ© medzi nimi aplikovaÅ¥ logickÃ© operÃ¡cie pre zÃ­skanie vÃ½sledku zloÅ¾itej podmienky. NaprÃ­klad ak by bola podmienka_1 AND podmienka_2 a je moÅ¾nÃ© vytvoriÅ¥ bit mapy pre obidve podmienky, tak pre vÃ½slednÃ© bit mapy je moÅ¾nÃ© aplikovaÅ¥ logickÃº operÃ¡ciu AND. Ak pre rovnakÃ½ zÃ¡znam je v prvej aj druhej bit mape hodnota 1, vÃ½sledok bude vyhodnotenÃ½ ako pravdivÃ½ a zÃ¡znam je potrebnÃ© zÃ­skaÅ¥. PostgreSQL pouÅ¾Ã­va popÃ­sanÃ½ mechanizmus na zrÃ½chlenie vyhÄ¾adÃ¡vania pomocou indexov v prÃ­pade nÃ¡jdenia vÃ¤ÄÅ¡ieho mnoÅ¾stva zÃ¡znamov. PretoÅ¾e vytvorenÃ½ bitmap index sa nie vÅ¾dy musÃ­ zmestiÅ¥ do pamÃ¤te, tak databÃ¡zovÃ½ systÃ©m prejde na reprezentÃ¡ciu, Å¾e jeden bit nereprezentuje zÃ¡znam, ale strÃ¡nku. V tomto prÃ­pade je potrebnÃ© po vytiahnutÃ­ strÃ¡nok skontrolovaÅ¥ eÅ¡te zÃ¡znamy v samotnÃ½ch strÃ¡nkach, ktorÃ© zÃ¡znamy spÄºÅajÃº podmienku."
265,151,0.537,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Kedy povaÅ¾ujeme softvÃ©rovÃ½ projekt za ÃºspeÅ¡nÃ½? AkÃ½ je rozdiel medzi ÃºspeÅ¡nosÅ¥ou produktu a projektu (v kontexte kvality). SoftvÃ©rovÃ½ projekt povaÅ¾ujeme za ÃºspeÅ¡nÃ½, keÄ je dodanÃ½: â¢ v dohodnutom rozsahu (na patriÄnej Ãºrovni kvality; pozor, tu ide o kvalitu produktu), â¢ v dohodnutom Äase a â¢ v dohodnutej cene. ZÃ¡vislÃ½ vzÅ¥ah medzi tÃ½mito kritÃ©riami opisuje tzv. trojuholnÃ­k manaÅ¾mentu projektu. Miera splnenia tÃ½chto kritÃ©riÃ­ je zÃ¡roveÅ meradlo kvality softvÃ©rovÃ©ho projektu. Treba si uvedomiÅ¥ rozdiel medzi kvalitou produktu a kvalitou projektu. TÃ¡ spoÄÃ­va v rozdiele, potreby ktorÃ½ch zainteresovanÃ½ch v celom procese (stakeholders) uvaÅ¾ujeme. Nie vÅ¡etci musia totiÅ¾ maÅ¥ zÃ¡ujem na Ãºspechu projektu."
130,441,0.537,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"koordinÃ¡ciu individuÃ¡lnych ÄinnostÃ­ medzi agentmi. V ideÃ¡lnom stave sÃº ÄiastkovÃ© globÃ¡lne plÃ¡ny jednotlivÃ½ch agentov kompatibilnÃ© a spolu tvoria distribuovanÃº reprezentÃ¡ciu celkovÃ©ho globÃ¡lneho plÃ¡nu. V prÃ­pade Å¾e agent detekuje, Å¾e sprÃ¡vanie inÃ©ho agenta nezodpovedÃ¡ informÃ¡ciÃ¡m, ktorÃ© o Åom mÃ¡ vo svojom Äiastkovom globÃ¡lnom plÃ¡ne, zmenÃ­ svoj plÃ¡n tak, Å¾e v Åom Äalej dotyÄnÃ½ agent neuvaÅ¾uje. TÃ½m sa minimalizuje riziko vykonÃ¡vania nekompatibilnÃ½ch plÃ¡nov. PrÃ­stup SharedPlan (Grosz, 1996) Äalej zavÃ¡dza mechanizmy pre koordinÃ¡ciu Äinnosti jednotlivÃ½ch agentov prostrednÃ­ctvom vyjednÃ¡vania o rozdelenÃ­ Ãºloh medzi agenty. VyjednÃ¡vanie je zaloÅ¾enÃ© na posielanÃ­ poÅ¾iadaviek agentom, ktorÃ­ sÃº schopnÃ­ vykonaÅ¥ podciele jednotlivÃ½ch cieÄ¾ov. Agent mÃ´Å¾e maÅ¥ âÄiastoÄnÃ½ Ãºmyselâ zÃºÄastniÅ¥ sa na vykonÃ¡vanÃ­ jednotlivÃ½ch plÃ¡nov. Ako prÃ­klad systÃ©mu zaloÅ¾enÃ©ho na prÃ­stupe SharedPlan moÅ¾no uviesÅ¥ STEAM (Tambe, 1997). PrÃ­stupy zaloÅ¾enÃ© na HTN moÅ¾no rozdeliÅ¥ na dve skupiny: prÃ­stupy s cieÄ¾mi agentov a prÃ­stupy s tÃ­movÃ½m cieÄ¾om. PrÃ­stupy s tÃ­movÃ½m cieÄ¾om (naprÃ­klad STEAM) vychÃ¡dzajÃº zo spoloÄnÃ©ho tÃ­movÃ©ho cieÄ¾a, ktorÃ½ je rozdelenÃ½ na jednotlivÃ© podÃºlohy a tieto podÃºlohy sa rozdeÄ¾ujÃº medzi jednotlivÃ© agenty. PrÃ­stupy so samostatnÃ½mi cieÄ¾mi agentov (naprÃ­klad PGP) hÄ¾adajÃº spoloÄnÃ© Äasti hierarchiÃ­ Ãºloh jednotlivÃ½ch agentov, agenty majÃº vlastnÃ© ciele, ktorÃ© sa snaÅ¾ia dosiahnuÅ¥. SpoluprÃ¡ca v PGP vznikÃ¡ keÄ majÃº stromy dekompozÃ­cie jednotlivÃ½ch agentov spoloÄnÃ© alebo vzÃ¡jomne zÃ¡vislÃ© Äasti. PrÃ­klady hierarchiÃ­ Ãºloh systÃ©mov PGP a STEAM je moÅ¾nÃ© vidieÅ¥ na obrÃ¡zku 7-19. Hoci je mnoÅ¾ina plÃ¡nov, ktorÃ© sa takto dajÃº vytvoriÅ¥ prÃ­stupmi zaloÅ¾enÃ½mi na HTN Äasto povaÅ¾ovanÃ¡ za vÃ¤ÄÅ¡iu, neÅ¾ poskytujÃº systÃ©my zaloÅ¾enÃ© na operÃ¡toroch typu STRIPS (Erol, 1994), je to skÃ´r teoretickÃ¡ vÃ½hoda. Ak totiÅ¾ neobmedzÃ­me dÄºÅ¾ku generovanÃ©ho plÃ¡nu, generovanie plÃ¡nu v HTN sa stane nerozhodnuteÄ¾nÃ½m problÃ©mom â nie je moÅ¾nÃ© vytvoriÅ¥ algoritmus, ktorÃ½ pre vÅ¡etky prÃ­pady rozhodne, Äi plÃ¡n existuje. V prÃ­pade, Å¾e dÄºÅ¾ku generovanÃ©ho plÃ¡nu obmedzÃ­me, je moÅ¾nÃ© dokÃ¡zaÅ¥, Å¾e obidva prÃ­stupy (operÃ¡tory typu STRIPS a HTN) dokÃ¡Å¾u generovaÅ¥ tÃº istÃº mnoÅ¾inu plÃ¡nov. Faktom ale ostÃ¡va, Å¾e aj keÄ je mnoÅ¾ina plÃ¡nov vyjadriteÄ¾nÃ¡ pomocou HTN rovnakÃ¡ ako mnoÅ¾ina plÃ¡nov vyjadriteÄ¾nÃ¡ operÃ¡tormi typu STRIPS, hierarchickÃ© vzÅ¥ahy akciÃ­ sa prirodzenejÅ¡ie zapisujÃº v prÃ­stupoch HTN od neho odvodenÃ½ch. HTN je teda moÅ¾nÃ© povaÅ¾ovaÅ¥ za spÃ´sob ako jednoduchÅ¡Ã­m spÃ´sobom dodaÅ¥ plÃ¡novaÄu dodatoÄnÃ© informÃ¡cie o hierarchickÃ½ch vzÅ¥ahoch jednotlivÃ½ch akciÃ­, ktorÃ© umoÅ¾nia zjednoduÅ¡iÅ¥ vytvÃ¡ranie plÃ¡nov."
122,107,0.537,Modelovanie softvÃ©ru,"7.1 DetailnÃ½ model operÃ¡cie Ako uÅ¾ bolo spomenutÃ© v Äasti 3.12, diagramy sekvenciÃ­ sa pÃ´vodne pouÅ¾Ã­vali na vyjadrenie partikulÃ¡rnych situÃ¡ciÃ­ inÅ¡tanciÃ­. TakÃ©to diagramy sekvenciÃ­ neobsahujÃº kombinovanÃ© fragmenty, ako sme uÅ¾ mali moÅ¾nosÅ¥ vidieÅ¥ na obrÃ¡zku 5.28 v Äasti 5.4. Ak pouÅ¾ijeme kombinovanÃ© fragmenty, mÃ´Å¾eme zachytiÅ¥ celÃ½ priebeh operÃ¡cie. PrÃ­klad je na obrÃ¡zku 7.1. Diagram sekvenciÃ­ zaÄÃ­na prvou sprÃ¡vou, Äo v prÃ­pade vyjadrenia celej operÃ¡cie musÃ­ byÅ¥ volanie tejto operÃ¡cie. Nevieme vÅ¡ak, kto tÃºto operÃ¡ciu volÃ¡, a ani to nechceme uviesÅ¥. Preto tÃ¡to prvÃ¡ sprÃ¡va prichÃ¡dza z neznÃ¡ma, Äo je"
205,163,0.537,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","8.5 Zhrnutie V tejto kapitole sme na zaÄiatku opÃ­sali relatÃ­vne mladÃ½ jazyk python. Tu sme ukÃ¡zali jeho veÄ¾mi zaujÃ­mavÃº vlastnosÅ¥ pouÅ¾itia odsadenÃ­ na oznaÄenie blokov. NÃ¡sledne sme opÃ­sali, Äo je to webovÃ½ preliezaÄ a akÃ½m spÃ´sobom s na dneÅ¡nom webe pouÅ¾Ã­va. HlavnÃ¡ ÄasÅ¥ naÅ¡ej kapitoly potom patrila vytvoreniu webovÃ©ho preliezaÄa v jazyku python. Tu sme poukÃ¡zali na niektorÃ© nÃ¡strahy, ktorÃ© tu ÄakajÃº na vÃ½vojÃ¡ra. UkÃ¡zali sme spÃ´soby rieÅ¡enia relatÃ­vnej a absolÃºtnej cesty, spÃ´soby normalizÃ¡cie adries, ale aj efektÃ­vne spÃ´soby vytvÃ¡rania databÃ¡z pre zachytÃ¡vanie zoznamov adries. V zÃ¡vereÄnej Äasti sme skonÅ¡truovali zÃ¡kladnÃº Å¡truktÃºru preliezaÄa."
265,361,0.537,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PoznÃ¡mka: Na obrÃ¡zku horizontÃ¡lna os pri jednotlivÃ½ch modeloch nereprezentuje rovnakÃº absolÃºtnu dÄºÅ¾ku Äasu (napr. agilnÃ½m modelom moÅ¾no dosiahnuÅ¥ rÃ½chlejÅ¡ie odovzdanie finÃ¡lneho produktu). VÃ½sledkom vyuÅ¾itia agilnÃ©ho modelu mÃ´Å¾e byÅ¥ tieÅ¾ skutoÄnosÅ¥, Å¾e miera hodnovernosti niektorÃ½ch ÄÅt nemusÃ­ byÅ¥ oproti pÃ´vodnej predstave zÃ¡kaznÃ­ka vysokÃ¡/ÃºplnÃ¡, priÄom produkt uÅ¾ bude finÃ¡lny. Ten si to mÃ´Å¾e uvedomiÅ¥ vÄaka Äasto predvÃ¡dzanÃ©mu softvÃ©ru."
369,18,0.537,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ï· KvalitatÃ­vne vlastnosti systÃ©mu (ako dobre spÄºÅa poÅ¾iadavky) zÃ¡visia od kvalitatÃ­vnych vlastnostÃ­ jeho vnÃºtornÃ½ch elementov. V tejto uÄebnici sa budeme zaoberaÅ¥ iba tzv. aplikaÄnÃ½mi architektÃºrami softvÃ©rovÃ½ch systÃ©mov. Pojem aplikaÄnÃ© architektÃºry v tejto uÄebnici je voÄ¾nÃ½m prekladom anglickÃ©ho termÃ­nu business architectures. UvedenÃ© architektÃºry predstavujÃº architektÃºry aplikaÄnÃ½ch oblastÃ­ z vÃ½poÄtovÃ©ho (informatickÃ©ho) pohÄ¾adu. SÃº na konceptuÃ¡lnej Ãºrovni, t. j. nezÃ¡vislÃ© od konkrÃ©tneho implementaÄnÃ©ho prostredia. AplikaÄnÃ© architektÃºry sa vytvÃ¡rajÃº v etape analÃ½zy pri vÃ½voji softvÃ©rovÃ©ho systÃ©mu."
122,76,0.537,Modelovanie softvÃ©ru,"Obr. 4.7: NÃ¡vrhovÃ½ diagram tried e-obchodu. â¢ Composite rieÅ¡i vhniezdenÃ© pohÄ¾ady, kde View je Composite alebo Leaf NÃ¡vrhovÃ© vzory je niekedy moÅ¾nÃ© rozpoznaÅ¥ uÅ¾ na zÃ¡klade samotnÃ©ho Å¡trukturÃ¡lneho usporiadania tried a rozhranÃ­, ktorÃ© v nich vystupujÃº. ObrÃ¡zky 4.8â4.10 zobrazujÃº prÃ­klady nÃ¡vrhovÃ½ch vzorov vo forme zaslepenej Å¡truktÃºry a Å¡truktÃºry s obsahom. VÅ¡imnime si, naprÃ­klad, veÄ¾mi charakteristickÃº kombinÃ¡ciu agregÃ¡cie a dedenia v opaÄnom smere vo vzore Composite. V naÅ¡om prÃ­klade bol uplatnenÃ½ vzor Observer, ktorÃ©ho Å¡truktÃºra nie je aÅ¾ takÃ¡ charakteristickÃ¡. Na obrÃ¡zku 4.2 je vyznaÄenÃ½ poznÃ¡mkou umiestnenou medzi triedami, ktorÃ© tento vzor realizujÃº. Ak MVC prirovnÃ¡me k stereotypom Unified Process, triedy oznaÄenÃ© ako entity a control spolu zodpovedajÃº role Model, priÄom boundary zodpovedÃ¡ role View. Rola Controller v tejto analytickej reprezentÃ¡cii Å¡truktÃºry eÅ¡te nie je vyÄlenenÃ¡. DÃ´leÅ¾itÃ© je poznamenaÅ¥, Å¾e napriek podobnosti v pomenovanÃ­ triedy oznaÄenÃ© ako control nezodpovedajÃº role Controller."
94,368,0.537,Sprievodca svetom vedeckÃ©ho publikovania,"licencovanÃ© EIZ: prostrednÃ­ctvom platenej licencie prÃ­stupnÃ© cez prÃ­stupovÃ© meno/heslo, resp. cez IP adresy poÄÃ­taÄov kniÅ¾nice (Internet protokol). Ide o databÃ¡zy a indexy rÃ´znorodÃ©ho charakteru, ponuka zÃ¡visÃ­ od charakteru kniÅ¾nice a pouÅ¾Ã­vateÄ¾ov. MÃ´Å¾e Ã­sÅ¥ o formu: - licencia vo forme trvalÃ©ho nÃ¡kupu (zakÃºpenÃ½ obsah zostÃ¡va natrvalo vo fonde kniÅ¾nice), - licencia vo forme predplatnÃ©ho (EIZ dostupnÃ½ na urÄitÃ© Äasovo ohraniÄenÃ© obdobie), - tzv. trial, EIZ dostupnÃ½ na vopred urÄenÃ© Äasovo obmedzenÃ© obdobie â najÄastejÅ¡ie tÃ½Å¾deÅ, dva tÃ½Å¾dne, alebo mesiac â âna skÃºÅ¡kuâ."
393,184,0.537,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ObrÃ¡zok 4-2. OdporuÄenie prÃ­buznÃ©ho dokumentu pouÅ¾itÃ­m rÃ´znych prÃ­stupov (zdroj: Zhong et al., 2003). PokiaÄ¾ ide o autentifikÃ¡ciu pouÅ¾Ã­vateÄ¾ov, sÃº dva typy pouÅ¾Ã­vateÄ¾ov. PrvÃ¡ skupina sa hlÃ¡si do systÃ©mu cez login/password systÃ©m. Je to vÃ½hodnÃ© pre pouÅ¾Ã­vateÄ¾ov, ktorÃ­ pristupujÃº do systÃ©mu nie iba raz, ale viackrÃ¡t, napr. pre pridÃ¡vanie objektov (vtipov, obrÃ¡zkov,...) do systÃ©mu. Login a password vÅ¡ak mÃ´Å¾e byÅ¥ prÃ­Å¥aÅ¾ou pre pouÅ¾Ã­vateÄ¾a, ktorÃ½ chce len prechÃ¡dzaÅ¥ cez obsah. Pre takÃ½chto pouÅ¾Ã­vateÄ¾ov sa prijalo rieÅ¡enie cez cookies. KeÄ pouÅ¾Ã­vateÄ¾ prvÃ½krÃ¡t vstÃºpi do systÃ©mu, vyhÄ¾adÃ¡ sa Å¡pecifickÃ½ identifikÃ¡tor v jeho poÄÃ­taÄi a ten sa odovzdÃ¡ aktuÃ¡lnemu sedeniu prehliadaÄa a server ho pouÅ¾ije na oznaÄenie jeho hlasovania"
393,235,0.537,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Je web fraktÃ¡lovÃ½? Teda vyzerajÃº Äasti webu ako miniweby? SkÃºmala sa Å¡truktÃºra webu cez teÃ³riu grafov. Podgrafom bola prisÃºdenÃ¡ veÄ¾kosÅ¥ 10% celÃ©ho grafu. Äasti webu pritom majÃº obsahovaÅ¥ aspoÅ 10 000 strÃ¡nok. VÃ½sledky potvrdzujÃº hypotÃ©zu. PodÄ¾a experimentÃ¡lnych zistenÃ­ aj skupina strÃ¡nok s podobnÃ½m obsahom mÃ¡ vlastnosti celÃ©ho webu. Potom takÃ©to miniweby sÃº prepojenÃ© navigaÄnou chrbticou (vyhÄ¾adÃ¡vaÄmi, katalÃ³gmi). FraktÃ¡lovÃ¡ samo-podobnosÅ¥ je aj v sociÃ¡lnych sieÅ¥ach."
393,141,0.537,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PoÅ¾iadavky na Å¡tandardizÃ¡ciu kniÅ¾nÃ­c a ontologickÃ½ch primitÃ­v RDF nie je primÃ¡rne vÃ½razovÃ½ jazyk, aj keÄ je obohatenÃ½ o sÃ©mantiku. Toto rozÅ¡Ã­renie sa realizuje Å¡tandardnÃ½mi RDF schÃ©mami v kombinÃ¡cii s DAML + OIL. Napriek tomu tÃ½mito spÃ´sobmi nie je moÅ¾nÃ© zapÃ­saÅ¥ jednoduchÃº vetu â5 osÃ´b spolu tancujeâ. Nedostatok vÃ½razovÃ½ch prostriedkov RDF a absencia Å¡tandardnÃ½ch ontologickÃ½ch primitÃ­v nÃºtia poskytovateÄ¾ov informÃ¡ciÃ­ reprezentovaÅ¥ informÃ¡cie nevhodnÃ½m a Äasto sa vyluÄujÃºcim spÃ´sobom. Oba dÃ´sledky preto znemoÅ¾ÅujÃº vyuÅ¾itie tÃ½chto informÃ¡ciÃ­, ich spoloÄnÃ© pouÅ¾Ã­vanie a znovupouÅ¾itie. Tu sa vyskytuje priestor pre mnohÃ© formÃ¡lne jazyky, naprÃ­klad Z, ktorÃ© prichÃ¡dzajÃº s matematickÃ½m aparÃ¡tom, pomocou ktorÃ©ho je nÃ¡sledne moÅ¾nÃ© konÅ¡truovaÅ¥ bloky znalostÃ­ (mnoÅ¾iny, relÃ¡cie, funkcie, ÄÃ­sla, sekvencie a pod.). PodobnÃ½ matematickÃ½ aparÃ¡t treba Å¡tandardizovaÅ¥ v RDF schÃ©mach, ÄÃ­m by sa vyrieÅ¡il problÃ©m ich pouÅ¾itia, spoloÄnÃ©ho pouÅ¾Ã­vania a znovupouÅ¾itia."
76,96,0.536,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Priestor vÃ½sledkov zloÅ¾enÃ©ho pokusu je teda mnoÅ¾ina ï = ïï° ï´ ïï°. PravdepodobnosÅ¥ v zloÅ¾enom pokuse chceme definovaÅ¥ tak, aby tie udalosti, ktorÃ© sÃº intuitÃ­vne nezÃ¡vislÃ©, boli nezÃ¡vislÃ© aj v zmysle definÃ­cie nezÃ¡vislosti z predchÃ¡dzajÃºceho ÄlÃ¡nku. Nie je Å¥aÅ¾kÃ© postrehnÃºÅ¥, Å¾e pre pravdepodobnosÅ¥ kaÅ¾dÃ©ho jednotlivÃ©ho vÃ½sledku musÃ­ nutne platiÅ¥:"
190,211,0.536,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Na zÃ¡ver si teda poloÅ¾me otÃ¡zku: sÃº plÃ¡ny na to, aby sa poruÅ¡ovali? sa nemeria podÄ¾a DovolÃ­m si odpovedaÅ¥ nepriamo, a to prÃ­kladom z [1], ktorÃ½ akoby bol dodrÅ¾iavania priam stvorenÃ½ pre tento ÃºÄel. plÃ¡nov, ale podÄ¾a Rozsiahly a prepracovanÃ½ plÃ¡n pre vylodenie Spojencov s krycÃ­m dosahovania cieÄ¾ov. oznaÄenÃ­m Omaha Beach na severnom pobreÅ¾Ã­ FrancÃºzska dÅa 6. jÃºna 1944 vÃ´bec nepredpokladal a ani nekontroloval priebeh samotnÃ©ho vylodenia. V skutoÄnosti takmer niÄ neprebiehalo podÄ¾a plÃ¡nu. Nakoniec sa ale Nemcom toto Ãºzemie ubrÃ¡niÅ¥ nepodarilo a zÃ¡mer Spojencov ho obsadiÅ¥ (a neskÃ´r vyhraÅ¥ samotnÃº 2. svetovÃº vojnu) vyÅ¡iel. Ak posudzujeme misiu Omaha Beach podÄ¾a plÃ¡nu, tak Ãºplne zlyhala. Ale ak ju posudzujeme podÄ¾a cieÄ¾ov, tak ide o jasnÃ½ Ãºspech. SoftvÃ©rovÃ© projekty sÃ­ce nie sÃº takÃ© nepredvÃ­dateÄ¾nÃ© ako vojenskÃ© operÃ¡cie, ale predsa majÃº s nimi nieÄo spoloÄnÃ©. Je to skutoÄnosÅ¥, Å¾e aj plÃ¡ny v softvÃ©rovom inÅ¾inierstve do istej miery ânepreÅ¾ijÃºâ kontakt so samotnÃ½m projektom i realitou. To vÅ¡ak vÃ´bec nevadÃ­, pretoÅ¾e hlavnÃ½m cieÄ¾om plÃ¡nov je poskytnÃºÅ¥ takÃ© smerovanie a rozdelenie dostupnÃ½ch zdrojov projektu, ktorÃ© predstavuje jednu z (viacerÃ½ch) moÅ¾nÃ½ch ciest vedÃºcich k ÃºspeÅ¡nÃ©mu dosiahnutiu vytÃ½ÄenÃ½ch cieÄ¾ov. PlÃ¡ny boli poruÅ¡ovanÃ©, sÃº poruÅ¡ovanÃ© a budÃº poruÅ¡ovanÃ©. Nesmieme vÅ¡ak zabÃºdaÅ¥, Å¾e Ãºspech projektov sa nemeria podÄ¾a (bezhlavÃ©ho) dodrÅ¾iavania plÃ¡nov, ale podÄ¾a dosiahnutia cieÄ¾ov projektu v rÃ¡mci podmienok a ohraniÄenÃ­, ktorÃ© boli naÅ stanovenÃ©."
43,150,0.536,Objektovo orientovanÃ© programovanie v C++,"Ak uÅ¾ rezervovanÃ© miesto v pamÃ¤ti nepotrebujeme, je sprÃ¡vne ho uvoÄ¾niÅ¥. Aby sme zabezpeÄili optimÃ¡lne fungovanie nÃ¡Å¡ho programu alebo inÃ½ch programov, ktorÃ© tieÅ¾ potrebujÃº miesto v pamÃ¤ti, urobÃ­me najlepÅ¡ie, ak miesto uvoÄ¾nÃ­me hneÄ v okamihu, keÄ prestane byÅ¥ potrebnÃ©. Na uvoÄ¾nenie pamÃ¤Å¥ovÃ©ho miesta â dealokÃ¡ciu â slÃºÅ¾ia operÃ¡tory delete a delete[ ]. Ak sme mali alokovanÃ© miesto pre jednu premennÃº nejakÃ©ho typu na adrese uchovanej v premennej smernik, toto miesto uvoÄ¾nÃ­me takto delete smernik;"
195,96,0.536,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"5 Poskytovanie odporÃºÄania Vytvorenie uÅ¾itoÄnÃ©ho odporuÄenia je iba prvÃ½ krok pri tvorbe odporÃºÄacieho systÃ©mu. OdporÃºÄania sa musia poskytovaÅ¥ prostrednÃ­ctvom pouÅ¾Ã­vateÄ¾skÃ©ho grafickÃ©ho rozhrania takÃ½m spÃ´sobom, ktorÃ½ umoÅ¾Åuje pouÅ¾Ã­vateÄ¾ovi oboznÃ¡miÅ¥ sa s dostupnÃ½mi odporÃºÄaniami, rozhodnÃºÅ¥ sa, Äi niektorÃ© z nich mÃ¡ najvÃ¤ÄÅ¡Ã­ prÃ­nos a nÃ¡sledne konaÅ¥ podÄ¾a vybranÃ©ho odporÃºÄania. Tvorcovia OSSI majÃº neÄ¾ahkÃº Ãºlohu pri nÃ¡vrhu vhodnej formy prezentovania odporÃºÄanÃ­. OdporÃºÄania by sa mali poskytovaÅ¥ v sprÃ¡vnom Äase a formou, ktorÃ¡ je pre pouÅ¾Ã­vateÄ¾a dostatoÄne zrozumiteÄ¾nÃ¡ a dÃ´veryhodnÃ¡. VÃ½ber najvhodnejÅ¡Ã­ch grafickÃ½ch komponentov zÃ¡visÃ­ od spÃ´sobu prvotnÃ©ho kontaktu s pouÅ¾Ã­vateÄ¾om, frekvencie odporÃºÄania, formy poskytovania dodatoÄnÃ½ch informÃ¡cii, stratÃ©gie hodnotenia rozhrania a zÃ­skavania spÃ¤tnej vÃ¤zby od pouÅ¾Ã­vateÄ¾a. OdporÃºÄacÃ­ systÃ©m v softvÃ©rovom inÅ¾inierstve sa mÃ´Å¾e rozdeliÅ¥ na dve Äasti: systÃ©movÃº vrstvu, ktorÃ¡ rozhoduje Äo sa odporuÄÃ­ a vrstvu pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania, ktorÃ¡ poskytuje vybranÃ© odporÃºÄanie. PouÅ¾Ã­vateÄ¾skÃ© rozhranie odporÃºÄacieho systÃ©mu musÃ­ prezentovaÅ¥ odporÃºÄania spÃ´sobom, ktorÃ½ umoÅ¾nÃ­ pouÅ¾Ã­vateÄ¾om zvÃ¡Å¾iÅ¥ a konaÅ¥ podÄ¾aodporÃºÄania. PrezentÃ¡cia odporÃºÄanÃ­ vÃ¤ÄÅ¡inou vyÅ¾aduje existenciu pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania. ExistujÃº vÅ¡ak prÃ­stupy, ktorÃ© dokÃ¡Å¾u zobrazovaÅ¥ odporÃºÄania bez pouÅ¾itia vlastnÃ© grafickÃ©ho rozhrania alebo rozhrania vÃ½vojovÃ©ho nÃ¡stroja. Tvorcovia OSSI musia urobiÅ¥ veÄ¾a rozhodnutÃ­ pri nÃ¡vrhu pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania odporÃºÄacieho systÃ©mu. Prijatie odporÃºÄania pouÅ¾Ã­vateÄ¾om zÃ¡visÃ­ od rÃ´znych faktorov. Vo vÅ¡eobecnosti existuje pÃ¤Å¥ faktorov, na ktorÃ© by sa mali tvorcovia nÃ¡strojov zameraÅ¥: pochopiteÄ¾nosÅ¥, transparentnosÅ¥, vyhodnotiteÄ¾nosÅ¥, dÃ´veru a naÄasovanie [9]."
115,138,0.535,Algebra a diskrÃ©tna  matematika,"(3) OperÃ¡cia komplementu mnoÅ¾iny A, C = A , je realizovanÃ¡ pomocou unÃ¡rnej operÃ¡cie Â´komplementuÂ´ Î¼ A = ( c1 ,c2 ,...,cn ) = (1 â a1 ,1 â a2 ,...,1 â an ) Definujme dva binÃ¡rne vektory dÄºÅ¾ky 8 (t. j. univerzum U={1,2,3,4,5,6,7,8}) Î¼ A =(11001111) a Î¼ B =(00011001), ktorÃ© reprezentujÃº mnoÅ¾iny A={1,2,5,6,7,8} a B={4,5,8}. Nad mnoÅ¾inami A a B vykonÃ¡me zÃ¡kladnÃ© operÃ¡cie pomocou binÃ¡rnych operÃ¡ciÃ­ nad vektormi. Zjednotenie AâªB je urÄenÃ© pomocou binÃ¡rnej operÃ¡cie Â´disjunkcieÂ´ (11001111)â¨(00011001)=(11011111) VÃ½slednÃ½ vektor Å¡pecifikuje mnoÅ¾inu C = {1,2,4,5,6,7,8}. PodobnÃ½m spÃ´sobom mÃ´Å¾eme vykonaÅ¥ aj operÃ¡ciu prieniku Aâ©B pomocou operÃ¡cie Â´konjunkcieÂ´ pre binÃ¡rne vektory (11001111)â§(00011001)=(00001001) VÃ½slednÃ½ vektor Å¡pecifikuje mnoÅ¾inu C = {5,8}. Komplementy A a B sÃº zostrojenÃ© pomocou operÃ¡cie ânegÃ¡cieâ binÃ¡rnych vektorov Î¼ A = Â¬(11001111)=(00110000) Î¼ B = Â¬(00011001)=(11100110)"
369,353,0.535,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"VÃ½robu vÃ½robkov Äasto dopÄºÅajÃº technologickÃ© analÃ½zy. Tieto mÃ´Å¾u maÅ¥ rÃ´znu prÃ­Äinu, naprÃ­klad kontrola kvality, inÅ¡pekcia, rieÅ¡enie incidentov, havÃ¡riÃ­ a inÃ©6. Äasto ide o komplexnÃ½ proces, ktorÃ½ prekraÄuje Ãºzky rÃ¡mec analÃ½zy a zahÅÅa aj viacero sÃºvisiacich podprocesov: 1. HlÃ¡senie prÃ­padu pracovnÃ­kom alebo externÃ½m ÃºÄastnÃ­kom. (Pri plÃ¡novanÃ½ch technologickÃ½ch analÃ½zach sa nevyskytuje). HlÃ¡senÃ­ mÃ´Å¾e byÅ¥ potenciÃ¡lne viac od rÃ´znych ÃºÄastnÃ­kov. HlÃ¡senie je potrebnÃ© zaevidovaÅ¥ a vyhodnotiÅ¥. 2. PreskÃºmanie objektu alebo skutoÄnosti na mieste vÃ½skytu incidentu a rozhodnutie o ÄalÅ¡om postupe. Ak treba, prijatie predbeÅ¾nÃ½ch opatrenÃ­ na zamedzenie Å¡Ã­renia incidentu a vzniku ÄalÅ¡Ã­ch Å¡kÃ´d. Zaevidovanie prÃ­padu v systÃ©me. 3. Ak si objekt alebo skutoÄnosÅ¥ vyÅ¾adujÃº presnejÅ¡iu laboratÃ³rnu analÃ½zu, odobratie potrebnÃ½ch vzoriek a ich odoslanie do prÃ­sluÅ¡nÃ©ho laboratÃ³ria. 4. Vykonanie laboratÃ³rnych analÃ½z na odobratÃ½ch vzorkÃ¡ch. LaboratÃ³rne analÃ½zy sa vykonÃ¡vajÃº podÄ¾a definovanÃ½ch technologickÃ½ch postupov zvyÄajne s vyuÅ¾itÃ­m laboratÃ³rnych zariadenÃ­. Po skonÄenÃ­ analÃ½zy oznÃ¡mi laboratÃ³rium odosielateÄ¾ovi vzorky vÃ½sledok analÃ½zy. 5. Vyhodnotenie vÃ½sledkov laboratÃ³rnych analÃ½z a prijatie opatrenÃ­. 6. Monitorovanie a vyhodnocovanie ÃºÄinnosti prijatÃ½ch opatrenÃ­. V prÃ­pade potreby prijatie dodatoÄnÃ½ch opatrenÃ­."
122,54,0.535,Modelovanie softvÃ©ru,"Obr. 3.9: Diagram aktivÃ­t pre prÃ­pad pouÅ¾itia Zadaj objednÃ¡vku. Akcie (Äinnosti) sÃº jednoducho spojenÃ© hranami tak, ako nasledujÃº. KaÅ¾dÃ¡ akcia vysiela znaÄku (angl. token) cez kaÅ¾dÃº hranu, ktorÃ¡ z nej vychÃ¡dza. Akcia sa aktivuje iba vtedy, keÄ prijme znaÄku cez kaÅ¾dÃº hranu, ktorÃ¡ do nej vstupuje. Medzi aktivitami sa mÃ´Å¾e vyskytnÃºÅ¥ objekt, ktorÃ½ sa medzi nimi prenÃ¡Å¡a, ako je to prÃ­pad s objektom typu ObjednÃ¡vka. NÃ¡zov objektu, ktorÃ½ by bol uvedenÃ½ pred dvojbodkou, je vynechanÃ½, lebo nie je podstatnÃ½. Diagram aktivÃ­t zaÄÃ­na poÄiatoÄnÃ½m uzlom aktivitou oznaÄovanou vyplnenÃ½m krÃºÅ¾kom, a konÄÃ­ finÃ¡lnym uzlom oznaÄovanou symbolom terÄa. NiektorÃ© akcie sÃº zloÅ¾enÃ© z ÄalÅ¡Ã­ch akciÃ­, Äo je indikovanÃ© symbolom vidliÄky. TakÃ©to"
94,294,0.535,Sprievodca svetom vedeckÃ©ho publikovania,"EtickÃ¡ strÃ¡nka budovania repozitÃ¡rov Problematika budovania repozitÃ¡rov veÄ¾mi Ãºzko sÃºvisÃ­ s viacerÃ½mi tÃ©mami etiky vedeckÃ©ho sprÃ¡vania, formovania vÅ¡eobecne platnÃ½ch noriem tzv. globÃ¡lnej etiky s prihliadnutÃ­m na Å¡pecifikÃ¡ virtuÃ¡lneho prostredia. DigitÃ¡lny repozitÃ¡r vytvÃ¡ra podmienky pre jednoduchÃ½ a rÃ½chly prÃ­stup k ÃºplnÃ½m textom, umoÅ¾Åuje efektÃ­vne vyhÄ¾adÃ¡vanie a orientÃ¡ciu v problematike, Äo na jednej strane zjednoduÅ¡uje podmienky pre plagiÃ¡torstvo, na druhej strane vÅ¡ak elektronickÃ© prostredie disponuje pokroÄilÃ½mi nÃ¡strojmi na kontrolu originality prÃ¡c a umoÅ¾Åuje rÃ½chlu identifikÃ¡ciu plagiÃ¡torstva. V prÃ­pade vyuÅ¾Ã­vania informaÄnÃ½ch zdrojov z repozitÃ¡ra platia rovnakÃ© podmienky pre tvorbu odbornej reÅ¡erÅ¡nej poÅ¾iadavky, aj nÃ¡slednÃ©ho uplatnenia citaÄnÃ½ch noriem pri zverejÅovanÃ­ pouÅ¾itÃ½ch zdrojov. V sÃºÄasnÃ½ch podmienkach globalizÃ¡cie je potreba dodrÅ¾iavania princÃ­pov etickÃ©ho prÃ­stupu k informÃ¡ciÃ¡m veÄ¾mi dÃ´leÅ¾itÃ¡ aj v prostredÃ­ tzv. virtuÃ¡lnej reality. Aj sieÅ¥ sociÃ¡lnych virtuÃ¡lnych vzÅ¥ahov mÃ¡ svoj etickÃ½ kontext. DÃ´veryhodnosÅ¥ repozitÃ¡rov SÃºÄasnÃ© technickÃ© moÅ¾nosti a publikaÄnÃ© postupy uplatÅujÃºce princÃ­p Open Access, ako aj celkovÃ½ trend priblÃ­Å¾enia vÃ½sledkov vedy Äo najÅ¡irÅ¡Ã­m skupinÃ¡m verejnosti, vytvÃ¡rajÃº predpoklady pre vznik mnoÅ¾stva repozitÃ¡rov budovanÃ½ch rÃ´znymi subjektami. Tento trend prinÃ¡Å¡a uÅ¾ spomenutÃº poÅ¾iadavku vzÃ¡jomnÃ©ho zosÃºladenia, interoperability systÃ©mov, kooperÃ¡cie a vytvÃ¡rania spoloÄnÃ½ch rozhranÃ­ alebo adresÃ¡rov repozitÃ¡rov â naprÃ­klad adresÃ¡r repozitÃ¡rov s otvorenÃ½m prÃ­stupom OpenDOAR (Directory of Open Access Repositories)128, alebo v Äeskej republike Repozitar.cz129. Druhou strÃ¡nkou je otÃ¡zka dÃ´veryhodnosti, kvality poskytovanÃ½ch (autenticita a integrita) a vÃ½povednej hodnoty fondu repozitÃ¡rov. Pri posudzovanÃ­ tejto strÃ¡nky repozitÃ¡rov moÅ¾no vychÃ¡dzaÅ¥ z ich zÃ¡kladnÃ©ho poslania a zvÃ¡Å¾enia miery jeho naplnenia: repozitÃ¡re slÃºÅ¾ia na dlhodobÃ© uchovÃ¡vanie,"
369,301,0.535,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"kaskÃ¡dy, rozloÅ¾ili tovar do viacerÃ½ch lodÃ­, aby tak znÃ­Å¾ili stratu pri prevrhnutÃ­ sa niektorej lode. V Babylone zas, keÄ obchodnÃ­k dostal Ãºver na financovanie dopravy tovaru, tento zaplatil svojmu veriteÄ¾ovi1 urÄitÃº sumu za garanciu, Å¾e veriteÄ¾ zruÅ¡Ã­ Ãºver, ak tovar poÄas prepravy ukradnÃº. PrincÃ­p rozloÅ¾enia straty medzi viacero osÃ´b zaviedli neskÃ´r obyvatelia ostrova Rodos. KaÅ¾dÃ½ z obchodnÃ­kov, ktorÃ½ch tovar sa prepravoval spolu, zaplatil poistnÃ© v pomernej vÃ½Å¡ke, ktorÃ© sa pouÅ¾ilo na odÅ¡kodnenie obchodnÃ­ka alebo obchodnÃ­kov, ktorÃ½ch tovar sa zniÄil pri poÅ¡kodenÃ­ alebo potopenÃ­ lode. SamostatnÃ© poisÅ¥ovacie zmluvy, t. j. poisÅ¥ovacie zmluvy, ktorÃ© nie sÃº viazanÃ© na Ãºvery alebo inÃ© typy zmlÃºv, sa vÅ¡ak objavili aÅ¾ v 14. storoÄÃ­ v Janove [Wikipedia 2009b]. KomerÄnÃ© poistenie je zaloÅ¾enÃ© na niekoÄ¾kÃ½ch zÃ¡kladnÃ½ch princÃ­poch [Wikipedia 2009b]: 1. VeÄ¾kÃ© mnoÅ¾stvo homogÃ©nnych objektov, ktorÃ© sÃº vystavenÃ© prÃ­sluÅ¡nÃ©mu riziku.2 UvedenÃ½ princÃ­p umoÅ¾Åuje vÃ½poÄet pravdepodobnosti vzniku poistnej udalosti na niektorom objekte. 2. JednoznaÄnosÅ¥ udalosti. UdalosÅ¥, ktorÃ¡ je predmetom poistenia, sa stala v urÄitom Äase na urÄitom mieste a z urÄitÃ½ch dÃ´vodov. Tento princÃ­p umoÅ¾Åuje verifikÃ¡ciu splnenia poistnÃ½ch podmienok. 3. NÃ¡hodnosÅ¥ udalosti. UdalosÅ¥ by mala byÅ¥ nÃ¡hodnÃ¡ alebo aspoÅ mimo moÅ¾nosti ovplyvnenia poistenou osobou. Å pekulatÃ­vne obchody (naprÃ­klad na burze) zvyÄajne nie je moÅ¾nÃ© poistiÅ¥. 4. Rozsiahla Å¡koda. Rozsah Å¡kody musÃ­ byÅ¥ dostatoÄne veÄ¾kÃ½, aby malo vÃ½znam pre poistenÃº osobu (presnejÅ¡ie poistnÃ­ka) sa voÄi takejto udalosti poistiÅ¥. 5. PrijateÄ¾nÃ¡ vÃ½Å¡ka poistnÃ©ho. Ak vÃ½Å¡ka poistnÃ©ho presiahne urÄitÃº hranicu, potenciÃ¡lny platiteÄ¾ poistnÃ©ho stratÃ­ zÃ¡ujem o poistenie a bude radÅ¡ej sÃ¡m znÃ¡Å¡aÅ¥ riziko poistnej udalosti. 6. OdhadnuteÄ¾nÃ¡ Å¡koda. Je moÅ¾nÃ© urÄiÅ¥ finanÄnÃº vÃ½Å¡ku vzniknutej Å¡kody. 7. MalÃ© riziko katastroficky veÄ¾kÃ½ch Å¡kÃ´d. Ak poistnÃ¡ udalosÅ¥ mÃ´Å¾e sÃºÄasne zasiahnuÅ¥ veÄ¾kÃ© mnoÅ¾stvo poistenÃ½ch osÃ´b (naprÃ­klad pri zÃ¡plavÃ¡ch alebo zemetraseniach), ohrozuje to schopnosÅ¥ poisÅ¥ovne splniÅ¥ svoje finanÄnÃ© zÃ¡vÃ¤zky.3 PoisÅ¥ovnÃ­ctvo je moÅ¾nÃ© ÄleniÅ¥ podÄ¾a viacerÃ½ch hÄ¾adÃ­sk: formy poistenia, predmetu poistenia, spÃ´sobu poistenia a poistnÃ½ch rizÃ­k. PodÄ¾a formy poistenia (poistnÃ© formy) rozliÅ¡ujeme: 1. ZÃ¡konnÃ© poistenie â je urÄenÃ© zÃ¡konom a neuzatvÃ¡ra sa zmluva medzi poisÅ¥ovÅou a poistenÃ½m subjektom. PrÃ­kladom je zdravotnÃ© poistenie (t. j. poistenie na Ãºhradu nÃ¡kladov za zdravotnÃº starostlivosÅ¥), nemocenskÃ© poistenie (t. j. poistenie straty"
240,471,0.535,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-33 (rieÅ¡enie) Analyzujeme chÃ½bajÃºce miesta v programe a pokÃºsime sa doplniÅ¥ najskÃ´r tie miesta, pre ktorÃ© jednoznaÄne vyplÃ½va, Äo do nich treba doplniÅ¥. V programe je v riadku 10 pouÅ¾itÃ© dvojrozmernÃ© pole g, v ktorom prvku g[i/10][i%10] zvÃ½Å¡ime hodnotu o 1. PouÅ¾Ã­vame premennÃº i, ktorÃ¡ musÃ­ maÅ¥"
190,244,0.535,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"UrÄite nie som sÃ¡m, kto si uÅ¾ mnohokrÃ¡t pred prÃ¡cou na malom projekte povedal: âTak toto je malÃ½ projekt. Nebudem predsa strÃ¡caÅ¥ Äas nad jeho plÃ¡novanÃ­m. SamotnÃ¡ realizÃ¡cia bude takto kratÅ¡ia!â V koneÄnom dÃ´sledku som sa takto aÅ¾ prÃ­liÅ¡ Äasto oklamal. Nakoniec som venoval projektu podstatne viac, ako som pÃ´vodne zamÃ½Å¡Ä¾al. Äi uÅ¾ Äasu alebo sily. VÃ¤ÄÅ¡inou vÅ¡ak obe. Dnes si radÅ¡ej poloÅ¾Ã­m otÃ¡zku: âNaozaj dokÃ¡Å¾em okamÅ¾ite odhadnÃºÅ¥, Äo vÅ¡etko budem musieÅ¥ do projektu vloÅ¾iÅ¥? VidÃ­m do projektu tak dobre, aj keÄ som sa nad nÃ­m vÃ´bec nezamÃ½Å¡Ä¾al? NuÅ¾, odpoveÄ je takmer vÅ¾dy ânieâ. Äo je teda najvÃ¤ÄÅ¡Ã­m problÃ©mom malÃ½ch projektov? Ä½udia ich majÃº tendenciu podceÅovaÅ¥. Äo sa na prvÃ½ pohÄ¾ad zdÃ¡ ako malÃ½ projekt, nÃ¡s mÃ´Å¾e v koneÄnom dÃ´sledku stÃ¡Å¥ omnoho viac ako projekt, ktorÃ©ho veÄ¾kÃ½ rozsah je Ä¾ahko rozpoznateÄ¾nÃ½."
94,244,0.535,Sprievodca svetom vedeckÃ©ho publikovania,"NajznÃ¡mejÅ¡Ã­m systÃ©mom, ktorÃ½ sa zaoberÃ¡ hodnotenÃ­m akademickÃ©ho webu je Ranking Web of Repositories105, celosvetovÃ¡ iniciatÃ­va CSIC Lab (Å panielsko). Projekt sa venuje kvantitatÃ­vnej analÃ½ze obsahu webovÃ©ho prostredia so sledovanÃ­m komunikÃ¡cie s akademickÃ½m a vedeckÃ½m obsahom. Predmetom skÃºmania sÃº preto len autonÃ³mne domÃ©ny alebo subdomÃ©ny s prevahou vedeckÃ©ho obsahu. Na hodnotenie sa pouÅ¾Ã­vajÃº Å¡tyri indikÃ¡tory (Presence, Visibility, Transparency, Excellence). Zdrojom Ãºdajov pre analÃ½zu zameranÃº na meranie poÄtu a typu hyperlinkovÃ½ch prepojenÃ­ webovÃ©ho sÃ­dla, jeho Å¡truktÃºru a nÃ¡vÅ¡tevnosÅ¥ je Google, Ahref Majestic, Google Scholar Citations a Scimago (kaÅ¾dÃ½ indikÃ¡tor mÃ¡ presne urÄenÃ½ poÄet percentuÃ¡lnych bodov â 5 : 50 : 10 : 35 a ich sÃºÄet je 100 %), priÄom danÃ© Ãºdaje sÃº polroÄne aktualizovanÃ©. Projekt tak zverejÅuje zaujÃ­mavÃ© informÃ¡cie tÃ½kajÃºce sa hodnotenia obsahu zverejnenÃ©ho na webovÃ½ch sÃ­dlach univerzÃ­t a ÄalÅ¡Ã­ch akademickÃ½ch inÅ¡titÃºciÃ­ a repozitÃ¡rov (nie dizajnu Äi nÃ¡vÅ¡tevnosti strÃ¡nok, ale vÃ½konnosti univerzÃ­t v celosvetovom meradle, priÄom sa zohÄ¾adÅujÃº ich Äinnosti a vÃ½stupy, ich vÃ½znam a vplyv v sledovanom sÃºbore inÅ¡titÃºciÃ­). Pokusom o vytvorenie analÃ³gie sociometrickÃ½ch a bibliometrickÃ½ch indikÃ¡torov vo webometrii bol âWeb Impact Factorâ (WIF) zameranÃ½ na analÃ½zu poÄtu a vzÅ¥ahov prelinkovanÃ­ medzi webovÃ½mi strÃ¡nkami, ktorÃ½ v roku 1998 predstavil Ingwersen. Okrem poÄtu prelinkovanÃ­ mÃ´Å¾u rÃ´zne podoby WIF sledovaÅ¥ veÄ¾kosÅ¥ sÃ­dla, poÄet externÃ½ch odkazov, publikaÄnÃ© aktivity na danom sÃ­dle so zameranÃ­m na akademickÃ½ obsah (poÄet odkazov v Å¡pecializovanej databÃ¡ze Google Scholar). Tieto snahy sa vÅ¡ak nestretli s veÄ¾kÃ½m porozumenÃ­m kvÃ´li prÃ¡vnym obmedzeniam, ako aj s ohÄ¾adom na fakt, Å¾e takto nemoÅ¾no celkom objektÃ­vne meraÅ¥ dynamicky sa meniaci obsah strÃ¡nok. NavyÅ¡e vÃ½skum webov britskÃ½ch univerzÃ­t odhalil, Å¾e linky âpriÅ¥ahujeâ skÃ´r veÄ¾kosÅ¥ webu, neÅ¾ kvalita jeho obsahu (Thelwall a Harries 2004)."
135,84,0.534,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ObrÃ¡zok 1-17. StromovÃ¡ tabuka (angl. Tree Table). Vzor IlustrovanÃ© voby (obrÃ¡zok 1-18) zjednoduÅ¡uje vÃ½ber hodnoty z ponuky pomocou obrÃ¡zkov a dodatonÃ½ch textov vysvetujÃºcich jednotlivÃ© hodnoty. VhodnÃ½m pouÅ¾itÃ­m obrÃ¡zkov sa znÃ­Å¾i kognitÃ­vna zÃ¡aÅ¾ na pouÅ¾Ã­vatea, ahÅ¡ie sa rozhodne, zniÅ¾uje sa mnoÅ¾stvo spÃ¤tnÃ½ch oprÃ¡v a sÃºasne je tieÅ¾ rozhranie atraktÃ­vnejÅ¡ie. ObrÃ¡zky by mali zachytÃ¡va hlavnÃ© rozdiely medzi ponÃºkanÃ½mi moÅ¾nosami a nemusia zachytÃ¡va nepodstatnÃ© detaily nesÃºvisiace s vÃ½berom."
59,335,0.534,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Z uvedenÃ½ch ilustraÄnÃ½ch prÃ­kladov vyplÃ½va, Å¾e prÃ­stup agregovanej pamÃ¤ti reprezentuje efektÃ­vny spÃ´sob prekonania rÃ½chlej degradÃ¡cie pÃ´vodnej verzie postupnej rekognoskÃ¡cie vektora (6.33). TÃ½m, Å¾e zdruÅ¾Ã­me niekoÄ¾ko konceptuÃ¡lnych vektorov do agregÃ¡tu, zÃ­skame jednoduchÃº moÅ¾nosÅ¥ rozÅ¡Ã­renia naÅ¡ich moÅ¾nostÃ­ korektne rekognoskovaÅ¥ vÃ¤ÄÅ¡ie mnoÅ¾iny konceptuÃ¡lnych vektorov. Proces agregÃ¡cie mÃ´Å¾e maÅ¥ niekoÄ¾ko hierarchickÃ½ch ÃºrovnÃ­, ÄÃ­m sa naÅ¡e moÅ¾nosti zapamÃ¤tania a rekognoskÃ¡cie konceptuÃ¡lnych vektorov stÃ¡vajÃº skoro neohraniÄenÃ©."
240,490,0.534,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"To sa nedÃ¡ s urÄitosÅ¥ou vopred povedaÅ¥. NevyhnutnÃ© podmienky sÃº: aby sme vyuÅ¾itÃ­m zvolenej reprezentÃ¡cie vedeli vÃ½sledok vypÃ­saÅ¥ v poÅ¾adovanom formÃ¡te (4), a aby sme dokÃ¡zali vÃ½sledok vo zvolenej reprezentÃ¡cii aj vypoÄÃ­taÅ¥ (3). InÃº moÅ¾nÃº reprezentÃ¡ciu vÃ½sledku v tejto Ãºlohe preskÃºmame v cviÄeniach."
94,398,0.534,Sprievodca svetom vedeckÃ©ho publikovania,"11.2.4 Prieskum relevantnÃ½ch informaÄnÃ½ch zdrojov Po zÃ­skanÃ­ relevantnÃ½ch vÃ½sledkov vyhÄ¾adÃ¡vania ich vyhodnotÃ­me: niektorÃ© databÃ¡zy ponÃºkajÃº priamy prÃ­stup k plnÃ½m textom dokumentov. Ak sÃº plnÃ© texty nedostupnÃ©, obrÃ¡Å¥me sa na kniÅ¾nicu, ktorÃ¡ potrebnÃ½ dokument sprÃ­stupÅuje, to znamenÃ¡, Å¾e potrebujeme vyhÄ¾adaÅ¥ miesto dostupnosti Äasopisu alebo knihy. Na to mÃ´Å¾eme vyuÅ¾iÅ¥ sÃºbornÃ© katalÃ³gy (napr. sÃºbornÃ½ katalÃ³g periodÃ­k SR), tieÅ¾ nÃ¡rodnÃº a medzinÃ¡rodnÃº medzikniÅ¾niÄnÃº vÃ½poÅ¾iÄnÃº sluÅ¾bu. Pri vedeckÃ½ch ÄlÃ¡nkoch vydanÃ½ch elektronicky je moÅ¾nÃ© kontaktovaÅ¥ emailom autora a poÅ¾iadaÅ¥ ho o ÄlÃ¡nok, alebo vyuÅ¾iÅ¥ niektorÃ½ z nÃ¡strojov otvorenÃ©ho prÃ­stupu, naprÃ­klad Open Access Button alebo Unpaywall (viac v kapitole 6.2)."
76,282,0.534,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"kde , , ..., modelujÃº meranie dÄºÅ¾ky , = + , pre = 1, 2, ... , 10. NÃ¡hodnÃ¡ veliÄina modeluje chybu -tÃ©ho merania. Merania sa realizovali tak, aby sme 10-ticu , , ..., mohli povaÅ¾ovaÅ¥ za 10-ticu nezÃ¡vislÃ½ch veliÄÃ­n. NajÄastejÅ¡ie sa predpokladÃ¡, Å¾e majÃº rozdelenie N(0, ï³2), ale niekedy menej â iba to, Å¾e E( ) = 0 a var( ) existuje. Pojem nÃ¡hodnÃ©ho vÃ½beru umoÅ¾Åuje urobiÅ¥ analÃ½zu vlastnostÃ­ uvedenÃ½ch Å¡tatistÃ­k, Äo urobÃ­me v ÄalÅ¡ej kapitole. V nasledujÃºcom ÄlÃ¡nku zaÄneme s tÃ½mi najjednoduchÅ¡Ã­mi odhadovacÃ­mi Å¡tatistikami: vÃ½berovÃ½m priemerom a vÃ½berovÃ½m rozptylom."
184,426,0.534,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"3. VyhodnotÃ­ text vo vnÃºtri odkazu (<a href>), samotnÃ½ odkaz a vyhodnotÃ­ vÃ¡hu textu. (naprÃ­klad <a href www.nazovdomeny.com>Nazovdomeny</a> mÃ¡ vÃ¤ÄÅ¡iu vÃ¡hu ako <a href www.nazovdomeny.com>NÃ¡vrat</a>) 4. PridÃ¡ vÃ½sledok algoritmu PageRank, ktorÃ©ho hodnotu budeme nazÃ½vaÅ¥ âpage rankâ. V skutoÄnosti je tento vÃ½poÄet o Äosi komplikovanejÅ¡Ã­ a budeme sa mu venovaÅ¥ niÅ¾Å¡ie. Je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e krok 4 v predchÃ¡dzajÃºcom postupe (pridanie vÃ½sledku algoritmu PageRank) nie je pripoÄÃ­tanie, ale nÃ¡sobenie s vÃ½sledkom z predchÃ¡dzajÃºcich troch krokov. To znamenÃ¡, Å¾e aj keÄ sa na strÃ¡nke nachÃ¡dza kÄ¾ÃºÄovÃ© slovo (slovÃ¡) viackrÃ¡t, ale strÃ¡nka mÃ¡ page rank 0, vo vrÃ¡tenom zozname sa tÃ¡to strÃ¡nka zobrazÃ­ medzi poslednÃ½mi."
59,71,0.533,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde symbol ï¬ reprezentuje prÃ¡zdny znak. Vo vÅ¡eobecnosti mÃ´Å¾eme konÅ¡tatovaÅ¥, Å¾e neurÃ³novÃ¡ sieÅ¥ tvorÃ­ âparametrickÃ©â (excitaÄnÃ½ alebo inhibiÄnÃ½ charakter spojov a prahy neurÃ³nov) zobrazenie postupnosti vstupnÃ½ch aktivÃ­t na nejakÃº postupnosÅ¥ vÃ½stupnÃ½ch aktivÃ­t (2.24) ï¨1101101010ï© ï½ F ï¨ 001110111, parametre siete ï© RekurentnÃ© neurÃ³novÃ© siete sÃº urÄenÃ© cyklickÃ½m orientovanÃ½m grafom, pozri Obr. 2.14, diagram B. V tomto prÃ­pade mÃ´Å¾eme povedaÅ¥, Å¾e neurÃ³novÃ¡ sieÅ¥ mÃ¡ pamÃ¤Å¥, v dÃ´sledku existencie orientovanÃ½ch cyklov v rekurentnÃ½ch sieÅ¥ach, niektorÃ© spÃ´soby zÃ¡vislosti aktivÃ­t od aktivÃ­t inÃ½ch neurÃ³nov sa mÃ´Å¾u neustÃ¡le opakovaÅ¥. NaprÃ­klad, pri vÃ½poÄte aktivity neurÃ³nu 2 v Äase t potrebujeme poznaÅ¥ aktivity neurÃ³nov 1, 2 a 5 v Äase t-1, avÅ¡ak v dÃ´sledku existencie cyklu, aktivita neurÃ³nu 5 v Äase t-1 vyÅ¾aduje poznaÅ¥ aktivitu neurÃ³nov 2 a 4 v Äase t-2. Z tejto jednoduchej diskusie vyplÃ½va, Å¾e aktivita neurÃ³nu 5 v Äase t je urÄenÃ¡ aktivitami neurÃ³nu v Äasoch t-1 a t-2. V ÄalÅ¡Ã­ch krokoch sa mÃ´Å¾eme toto âokno do minulostiâ zvÃ¤ÄÅ¡ovaÅ¥, tÃºto skutoÄnosÅ¥ Å¡pecifickÃº pre rekurentnÃ© siete nazÃ½vame âpamÃ¤Å¥â rekurentnÃ½ch sietÃ­. Aktivity neurÃ³nov z rekurentnej siete sÃº urÄenÃ© pomocou (2.19) takto x1ï¨ ï© ï½ externÃ½ vstup"
43,514,0.533,Objektovo orientovanÃ© programovanie v C++,"â zavolÃ¡ sa systÃ©movÃ¡ funkcia terminate, ktorÃ¡ sa nenamÃ¡ha s korektnÃ½m odchodom â nezavolÃ¡ naprÃ­klad deÅ¡truktory objektov. TakÃ©muto koncu programu by sme sa preto mali vyhnÃºÅ¥. PoznÃ¡mka â dynamickÃº dealokÃ¡ciu za nÃ¡s throw nespravÃ­. V titule tejto poznÃ¡mky je vlastne uÅ¾ povedanÃ© vÅ¡etko podstatnÃ©. Hoci sa throw snaÅ¾Ã­ uprataÅ¥ a korektne odÃ­sÅ¥ z Äasti, kde sa nachÃ¡dza, dynamickÃ¡ dealokÃ¡cia nie je jeho Ãºlohou. Ak sme naprÃ­klad lokÃ¡lne vytvorili dynamickÃ© pole, ktorÃ© sa uÅ¾ nedÃ¡ dealokovaÅ¥ z inÃ©ho miesta v programe, musÃ­me pamÃ¤Å¥ovÃ© miesto uvoÄ¾niÅ¥ eÅ¡te predtÃ½m, ako zavolÃ¡me throw. V opaÄnom prÃ­pade spÃ´sobÃ­me memory leak."
135,35,0.533,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â vytvÃ¡ranie inÅ¡tancie a jedinenos zabezpeuje trieda sama. Pri testovanÃ­ s pouÅ¾itÃ­m vzoru UnikÃ¡t, napr. pomocou testov jednotiek (angl. UnitTests), treba pamÃ¤ta na to, Å¾e jednotlivÃ© metÃ³dy pri testovanÃ­ nevytvÃ¡rajÃº vÅ¾dy novÃ½ objekt, ale pri zÃ­skavanÃ­ novÃ©ho dostanÃº ten, ktorÃ½ sa pouÅ¾il v minulom teste. Toto treba bra na vedomie a poda toho formulova testy."
76,300,0.533,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Za neformÃ¡lnu definÃ­ciu sprÃ¡vneho histogramu vezmime tento popis: Histogram je takÃ½ stÄºpcovÃ½ diagram, v ktorom plochy obdÄºÅ¾nikov sÃº ÃºmernÃ© absolÃºtnym (alebo relatÃ­vnym) poÄetnostiam tried. KeÄ sÃº triedy rovnako Å¡irokÃ©, tak je to to istÃ©, ako povedaÅ¥, Å¾e vÃ½Å¡ky obdÄºÅ¾nikov sÃº ÃºmernÃ© poÄetnostiam tried, avÅ¡ak pozor, ak triedy nie sÃº rovnako Å¡irokÃ©, tak nejde o to istÃ©. NasledujÃºci prÃ­klad ilustruje rozdiel. 6.4.6 PrÃ­klad. NasledujÃºca tabuÄ¾ka predstavuje triedy a ich poÄetnosti. Zostrojme sprÃ¡vny histogram. triedy poÄetnosti"
59,685,0.533,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"14.4 StratÃ©gia rieÅ¡enia StratÃ©gia rieÅ¡enia hry sudoku obsahuje postupnosÅ¥ tÃ½chto krokov: 1. krok. PoÄiatoÄnÃº pozÃ­ciu doplnÃ­me v kaÅ¾dej prÃ¡zdnej bunke o alternatÃ­vne moÅ¾nosti. 2. krok. Ak v alternatÃ­vnych moÅ¾nostiach pre danÃ½ riadok, alebo stÄºpec, alebo podoblasÅ¥ sa vyskytuje nejakÃ© ÄÃ­slo prÃ¡ve raz, potom tÃ½mto ÄÃ­slom obsadÃ­me danÃº bunku. 3. krok. Opakovane aplikujeme na pozÃ­ciu pravidlÃ¡ 1-3 tak, aby sa pozÃ­cia neustÃ¡le zjednoduÅ¡ovala buÄ zruÅ¡enÃ­m (pravidlÃ¡ 2 a 3) vybranÃ½ch alternatÃ­vnych moÅ¾nostÃ­ alebo obsadenÃ­m vybranej bunky fixnÃ½m ÄÃ­slom (pravidlo 1). 4. krok. V prÃ­pade, Å¾e pozÃ­cia obsahuje eÅ¡te alternatÃ­vne moÅ¾nosti a nie je moÅ¾nÃ© vykonaÅ¥ 3. krok (bod vetvenia, pozri Obr. 14.8), nÃ¡hodne vyberieme z aktuÃ¡lnej pozÃ­cie jednu alternatÃ­vnu moÅ¾nosÅ¥ a s Åou obsadÃ­me danÃº bunku. Ak sa nÃ¡m v ÄalÅ¡om rieÅ¡enÃ­ od bodu vetvenia objavÃ­ nekorektnÃ¡ pozÃ­cia (v niektorom riadku/stÄºpci/podoblasti sa vyskytujÃº dve rovnakÃ© ÄÃ­sla), potom sa vrÃ¡time do bodu rieÅ¡enia, opakovane nÃ¡hodne vyberieme inÃº alternatÃ­vnu moÅ¾nosÅ¥ a opakovane pokraÄujeme v rieÅ¡enÃ­. 5. krok. Ak sme dospeli v rieÅ¡enÃ­ do korektnej koneÄnej pozÃ­cie, kde vÅ¡etky pÃ´vodne prÃ¡zdne bunky sÃº obsadenÃ© ÄÃ­slami, hru ukonÄÃ­me a zÃ­skanÃ¡ pozÃ­cia je rieÅ¡enÃ­m hry sudoku. Pomocou tejto stratÃ©gie mÃ´Å¾eme zaviesÅ¥ klasifikÃ¡ciu rieÅ¡enÃ­ hry sudoku:"
76,218,0.533,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Cyrilova âvÃ½hraâ -10 (teda vlastne prehra) nastala 10-krÃ¡t, vÃ½hra 1c nastala 17-krÃ¡t, vÃ½hra 2c 13-krÃ¡t, 3c vyhral Cyril 10 rÃ¡z, 4c 7-krÃ¡t a nakoniec, 5c vyhral 3 razy. Preto celkovÃ¡ vÃ½hra Cyrila sa rovnÃ¡ (-10)â10 + 1â17 + 2â13 + 3â10 + 4â7 + 5â3 = 16, teda 16 centov. KeÄÅ¾e celkovÃ¡ vÃ½hra v 60 kolÃ¡ch sa rovnÃ¡ 16 c, tak (priemernÃ¡) vÃ½hra na jedno kolo hry sa rovnÃ¡ 16/60, Äo je pribliÅ¾ne 0.27 centov. VÅ¡imnime si, nedostali sme 0.28, t. j. E( ), ale to je v poriadku, veÄ âzapracovala pani NÃ¡hodaâ a urobili sme len 60 opakovanÃ­ pokusu. Teraz Ãºvahu zopakujme pre"
94,166,0.533,Sprievodca svetom vedeckÃ©ho publikovania,"6.4 Politiky VÃ½znamnÃ½m spÃ´sobom presadzovania otvorenÃ©ho prÃ­stupu je zavÃ¡dzanie politÃ­k. PrehÄ¾ad politÃ­k, ktorÃ© jednotlivÃ© grantovÃ© agentÃºry alebo vÃ½skumnÃ© inÅ¡titÃºcie uplatÅujÃº v oblasti otvorenÃ©ho prÃ­stupu, poskytuje ROARMAP88 (Registry of Open Access Repository Mandates and Policies). NaprÃ­klad ÄeskÃ¡ AkadÃ©mia vied (AV ÄR) je signatÃ¡rom BerlÃ­nskej deklarÃ¡cie a od roku 2010 aktÃ­vne podporuje politiku otvorenÃ©ho prÃ­stupu. ZelenÃº cestu rozvÃ­ja prostrednÃ­ctvom inÅ¡titucionÃ¡lneho repozitÃ¡ra. VyjednÃ¡va s vydavateÄ¾mi, u ktorÃ½ch zamestnanci AV ÄR najÄastejÅ¡ie publikujÃº a s vydavateÄ¾stvom Elsevier uzavrela dohodu, ktorÃ¡ umoÅ¾Åuje systematickÃ© ukladanie ÄlÃ¡nkov zamestnancov AV ÄR uverejnenÃ½ch v Äasopisoch tohto vydavateÄ¾stva do repozitÃ¡ra. Pre autorov, ktorÃ­ by chceli publikovaÅ¥ zlatou cestou (ale iba v Äasopisoch zahrnutÃ½ch do databÃ¡z WoS, Scopus alebo ERIH), mÃ¡ AV ÄR fond na podporu otvorenÃ©ho publikovania (BureÅ¡ovÃ¡ 2013). MandatÃ³rny (povinnÃ½) otvorenÃ½ prÃ­stup nie je populÃ¡rny pojem â vedci uprednostÅujÃº akademickÃº slobodu v rozhodovanÃ­ o tom, do akÃ©ho Äasopisu poÅ¡lÃº svoje ÄlÃ¡nky. No viacerÃ© krajiny (medzi prvÃ½mi DÃ¡nsko a VeÄ¾kÃ¡ BritÃ¡nia) postupne zavÃ¡dzajÃº pravidlÃ¡ zavÃ¤zujÃºce vedcov, ktorÃ½ch vÃ½skum je financovanÃ½ zo Å¡tÃ¡tnych prostriedkov, uverejÅovaÅ¥ svoje vÃ½sledky s otvorenÃ½m prÃ­stupom. Pre jednotlivcov to mÃ´Å¾e znamenaÅ¥ viac nÃ¡mahy, zÃ¡roveÅ vÅ¡ak tÃ¡to"
130,139,0.533,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ImplementÃ¡cia DelegovanÃ½ zÃ¡stupca â vyjadruje rozhranie, ktorÃ© pre klientov sprÃ­stupÅuje dÃ´leÅ¾itÃ© biznis sluÅ¾by. Pri tomto prÃ­stupe existuje istÃ¡ paralela so vzorom ZÃ¡stupca. DelegovanÃ½ adaptÃ©r â vyuÅ¾Ã­va sa k pripÃ¡janiu B2B sluÅ¾ieb, sluÅ¾ieb zaloÅ¾enÃ½ch na J2EE architektÃºre. PrÃ­stup je realizovanÃ½ vyuÅ¾itÃ­m vzoru AdaptÃ©r."
205,55,0.532,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","3.1 ZÃ¡kladnÃ© kamene webu Pri sprÃ­stupÅovanÃ­ Ãºdajov na webe sa pouÅ¾Ã­va niekoÄ¾ko zÃ¡kladnÃ½ch princÃ­pov, pomocou ktorÃ½ch je moÅ¾ne pristÃºpiÅ¥ k jednotlivÃ½m zdrojom. ZÃ¡kladom pre pristÃºpenie k zdrojom je ich identifikÃ¡cia a interakcia medzi agentom, ktorÃ½ chce pristÃºpiÅ¥ k zdroju a sluÅ¾bou, ktorÃ¡ tento zdroj poskytuje."
240,485,0.532,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"RieÅ¡enie: Pri nÃ¡vrhu rieÅ¡enia (akejkoÄ¾vek Ãºlohy) je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e naÅ¡ou Ãºlohou je vytvoriÅ¥ program, ktorÃ½ sprÃ¡vne vyrieÅ¡i nielen Ãºlohu pre ukÃ¡Å¾kovÃ© Ãºdaje zo zadania, ale pre akÃ©koÄ¾vek vstupnÃ© Ãºdaje spÄºÅajÃºce Å¡pecifikÃ¡ciu Ãºlohy. SÃºÄasÅ¥ou tejto Å¡pecifikÃ¡cie je najmÃ¤ formÃ¡t vstupu a vÃ½stupu. FormÃ¡t vstupu jednoznaÄne opisuje, ako porozumieÅ¥ Ãºdajom na vstupe, aby sme ich mohli naÄÃ­taÅ¥ a spracovaÅ¥. SkutoÄnÃ¡ Ãºloha je teda vytvoriÅ¥ program, ktorÃ½ oÄakÃ¡va (a spracuje) Ãºdaje dodrÅ¾iavajÃºce tento formÃ¡t. Ak Ãºdaje na vstupe nespÄºÅajÃº Å¡pecifikÃ¡ciu Ãºlohy a formÃ¡t vstupu, ako je uvedenÃ© v zadanÃ­ Ãºlohy, tak nie je chybou programu, ak na takÃ½chto vstupnÃ½ch Ãºdajoch vypÃ­Å¡e nesprÃ¡vny vÃ½sledok. VrÃ¡Å¥me sa spÃ¤Å¥ k naÅ¡ej Ãºlohe. Text tejto Ãºlohy opisuje zadanie pre nÃ¡Å¡ program ako zistenie maxima spomedzi prvkov zadanej postupnosti. FormÃ¡t vstupu nie je bliÅ¾Å¡ie opÃ­sanÃ½, keÄÅ¾e text jednoznaÄne (formÃ¡lne) neuvÃ¡dza, akÃ½m spÃ´sobom sÃº jednotlivÃ© ÄÃ­sla zadanÃ©: mÃ´Å¾u byÅ¥ v desiatkovej sÃºstave alebo v binÃ¡rnej sÃºstave alebo akokoÄ¾vek inak zadanÃ©, napr. aj slovne. PresnÃ¡ Å¡pecifikÃ¡cia Äasto obsahuje podrobnÃ© opisy, ktorÃ© zaÄÃ­najÃºceho programÃ¡tora mÃ´Å¾u odradiÅ¥. V praxi vÅ¡ak Äasto ani nie sÃº potrebnÃ©, pretoÅ¾e skÃºsenÃ­ programÃ¡tori uÅ¾ vedia, Äo mÃ´Å¾u oÄakÃ¡vaÅ¥. Ako alternatÃ­vu presnej Å¡pecifikÃ¡cie formÃ¡tu vstupu a vÃ½stupu vÅ¾dy uvÃ¡dzame v ÃºlohÃ¡ch ukÃ¡Å¾ku vstupu/vÃ½stupu, ktorÃ¡ pre skÃºsenÃ©ho programÃ¡tora Ãºplne a jednoznaÄne vysvetÄ¾uje podstatu vstupnÃ©ho aj vÃ½stupnÃ©ho formÃ¡tu. OtÃ¡zka: Äo keÄ sÃº na vstupe dÃ¡ta, ktorÃ© nie sÃº v poÅ¾adovanom formÃ¡te?"
135,89,0.532,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Rozdielnos v zobrazovanÃ­ webovÃ½ch strÃ¡nok na rÃ´znych zariadeniach a prehliadaoch a v sÃºasnosti kuovÃ¡ Ãºloha webovej prezentÃ¡cie pri upÃºtanÃ­ zÃ¡kaznÃ­kov motivuje rozsiahle pouÅ¾Ã­vateskÃ© Å¡tÃºdie prvkov webovÃ½ch strÃ¡nok. Pozri napr. pravidelnÃ½ st pek Jakoba Nielsena12. PouÅ¾Ã­vateskÃ© Å¡tÃºdie odkrÃ½vaju asto neoakÃ¡vanÃ© sÃºvislosti. Pre ilustrÃ¡ciu sa pozrime na pouÅ¾itie bannerov. Banner je prvok rozhrania obd Å¾nikovÃ©ho formÃ¡tu, vÃ¤Å¡inou obrÃ¡zok alebo krÃ¡tky film, slÃºÅ¾iaci na Å¡tylizovanÃº prezentÃ¡ciu nejakÃ©ho obsahu. Jeho hlavnou Ãºlohou je upÃºta nÃ¡vÅ¡tevnÃ­ka a pouÅ¾Ã­va sa preto vÃ¤Å¡inou na reklamnÃ© Ãºely. NÃ¡vÅ¡tevnÃ­ci webovÃ½ch strÃ¡nok si vÅ¡ak bannery uÅ¾ prestali vÅ¡Ã­ma, keÅ¾e vÃ¤Å¡inou sprostredkÃºvajÃº len reklamnÃ½ obsah, a tak prvky rozhrania, ktorÃ© sa vizuÃ¡lne ponÃ¡Å¡ajÃº na bannery nÃ¡vÅ¡tevnÃ­ci ignorujÃº (Nielsen, 2007). Na obrÃ¡zku 1-21 je znÃ¡zornenÃ¡ teplotnÃ¡ mapa nÃ¡vÅ¡tev troch webovÃ½ch strÃ¡nok (svetlejÅ¡ie miesta pouÅ¾Ã­vatelia Ã­tajÃº astejÅ¡ie ako"
240,34,0.532,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"UrÄenie zÃ¡kladnÃ½ch Å¡tatistickÃ½ch informÃ¡ciÃ­ uÅ¾ prebieha pomerne priamoÄiaro. V cykle (riadky 41-48) postupne prejdeme kaÅ¾dÃº osobu a priebeÅ¾ne si budeme pamÃ¤taÅ¥ index najmladÅ¡ej Å¾eny (min), index najstarÅ¡ieho muÅ¾a (max), sÃºÄet rokov (sucet). Pre i-tu osobu (i=0, ..., n-1) rozlÃ­Å¡ime prÃ­pady:"
59,11,0.532,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"uvedomenia, akÃº ÄinnosÅ¥ vlastne vykonÃ¡va. SumarizujÃºc, umelÃ© inteligentnÃ© systÃ©my nebudÃº maÅ¥ vedomie a preto nebudÃº Ãºplne rovnocennÃ© Ä¾udskej mysli. NiekoÄ¾ko poznÃ¡mok k tomuto zÃ¡veru, podÄ¾a ktorÃ©ho umelÃ¡ myseÄ¾, ktorÃ¡ by bola rovnocennÃ¡ s Ä¾udskou mysÄ¾ou, nie je moÅ¾nÃ¡ (mnoho filozofov takto interpretuje Searleho prÃ­klad âÄÃ­nskej izbyâ). Koncom 19. storoÄia pre inÅ¾inierov â strojÃ¡rov existovala aktuÃ¡lna vÃ½zva zostrojiÅ¥ lietajÃºci stroj, ktorÃ½ je Å¥aÅ¾Å¡Ã­ ako vzduch. Existovali seriÃ³zne inÅ¾inierske analÃ½zy, ktorÃ© diskutovali existenciu lietajÃºceho stroja. HlavnÃ¡ nÃ¡mietka vyplÃ½vajÃºca z tÃ½chto analÃ½z bola, Å¾e neexistuje takÃ½ vÃ½konnÃ½ stroj, ktorÃ½ by dokÃ¡zal hÃ½baÅ¥ krÃ­dlami tak, aby stroj lietal Å¡tÃ½lom podobnÃ½m vtÃ¡kom. PouÅ¾itie vrtule bola Ãºplne novÃ¡ paradigma, pre konÅ¡trukciu lietajÃºcich strojov â lietadiel, ktorÃ¡ nemala v prÃ­rode analÃ³giu (podobne, ako objav kolesa asi pred 3000 rokmi pred Kr.). PouÅ¾itie tohto zariadenia koncom 19. storoÄia rÃ½chlo viedlo ku vzniku lietajÃºcich zariadenÃ­ â lietadiel s vrtuÄ¾ou a k ich bÃºrlivÃ©mu rozvoju. VychÃ¡dzajÃºc z tejto analÃ³gie mÃ´Å¾eme tvrdiÅ¥, Å¾e umelÃ¡ myseÄ¾ nemusÃ­ byÅ¥ viazanÃ¡ len na biologickÃ½ mozog (podobne, ako lietajÃºce stroje len na vtÃ¡kov), ale mÃ´Å¾e byÅ¥ implementovanÃ¡ napr. pomocou rozsiahlych umelÃ½ch neurÃ³novÃ½ch sietÃ­ implementovanÃ½ch na mnohovrstvovom kremÃ­kovom Äipe. To, Äi takÃ©to âzariadenieâ simulujÃºce Ä¾udskÃº myseÄ¾ bude alebo nebude maÅ¥ efemÃ©rnu vlastnosÅ¥, ktorÃº nazÃ½vame vedomie, je len sekundÃ¡rny ï­ nepodstatnÃ½ problÃ©m cielenej simulÃ¡cie mysle pomocou kremÃ­kovÃ½ch Äipov."
240,303,0.532,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÅ¡imnime si ÄalÅ¡Ã­ rozdiel medzi poÄ¾om znakov a reÅ¥azcom: pole znakov str mÃ¡ veÄ¾kosÅ¥ 50, priÄom reÅ¥azec, ktorÃ½ je v Åom uloÅ¾enÃ½, mÃ¡ dÄºÅ¾ku len 10 znakov. Prirodzene je kaÅ¾dÃ½ reÅ¥azec uloÅ¾enÃ½ v nejakom poli, a teda v prÃ­pade reÅ¥azcov rozliÅ¡ujeme (aktuÃ¡lnu) dÄºÅ¾ku a maximÃ¡lnu dÄºÅ¾ku. Najviac mÃ´Å¾eme v tomto poli str reprezentovaÅ¥ reÅ¥azec obsahujÃºci 49 znakov (poslednÃ½ 50. prvok poÄ¾a pouÅ¾ijeme pre ukonÄovacÃ­ znak '\0'). ReÅ¥azce v zdrojovom kÃ³de v ÃºvodzovkÃ¡ch sÃº reÅ¥azcovÃ© konÅ¡tanty. SÃº to staticky alokovanÃ© polia znakov obsahujÃºce presnÃ½ poÄet znakov nasledovanÃ½ch ukonÄovacÃ­m kÃ³dom. V prÃ­pade, Å¾e v programe pouÅ¾Ã­vame rovnakÃº reÅ¥azcovÃº konÅ¡tantu na rÃ´znych miestach, vÅ¡etky vÃ½skyty tejto reÅ¥azcovej konÅ¡tanty budÃº zodpovedaÅ¥ rovnakej adrese v pamÃ¤ti, ktorÃ¡ bola tejto konÅ¡tante pri zaÄiatku behu programu statickou alokÃ¡ciou pridelenÃ¡. SamotnÃ© reÅ¥azcovÃ© konÅ¡tanty sÃº polia a teda"
122,99,0.532,Modelovanie softvÃ©ru,"6.2 Spresnenie prechodov Tak ako stav predstavuje abstrakciu pripravenosti realizovaÅ¥ sprÃ¡vanie, prechod (angl. transition) medzi stavmi predstavuje abstrakciu schopnosti dostaÅ¥ sa do urÄitÃ©ho stavu. Prechod spÃ´sobuje urÄitÃ¡ udalosÅ¥ (angl. event) alebo, v terminolÃ³gii UML, spÃºÅ¡Å¥aÄ (trigger). ObrÃ¡zok 6.2 trochu prepracovanÃ½ stavovÃ½ diagram objednÃ¡vky s vyznaÄenÃ½mi udalosÅ¥ami: pridanie poloÅ¾ky, potvrdenie objednÃ¡vky, prevzatie objednÃ¡vky atÄ.2 HneÄ ako nastane udalosÅ¥, ktorÃ¡ je vyznaÄenÃ¡ na prechode, ktorÃ½ vedie z danÃ©ho stavu, stavovÃ½ stroj prechÃ¡dza do stavu, do ktorÃ©ho vedie danÃ½ prechod."
43,364,0.532,Objektovo orientovanÃ© programovanie v C++,"VidÃ­me, Å¾e v programe, v ktorom by sme potrebovali obe triedy dopravny prostriedok aj autobus, by dediÄnosÅ¥ skutoÄne splnila svoj ÃºÄel a uÅ¡etrila by zbytoÄnÃ© opakovanie toho istÃ©ho kÃ³du. Typ dediÄnosti si vyberÃ¡me podÄ¾a situÃ¡cie, v prÃ­kladoch v tejto kapitole bude najÄastejÅ¡Ã­m typom verejnÃ¡ dediÄnosÅ¥. PrÃ­klad. PrepÃ­Å¡me do C++ verziu programu so zÃ¡kaznÃ­kom a ï¬rmou, v ktorej sa vyuÅ¾Ã­va dediÄnosÅ¥ (kapitola 1.7.). Rozbor rieÅ¡enia. K analÃ½ze, ktorÃ¡ bola urobenÃ¡ v kapitole 1.7, pripÃ¡jame diagram tried (tento raz pre jednoduchosÅ¥ bez komunikÃ¡cie, ktorej charakter je rovnakÃ½ ako v predchÃ¡dzajÃºcich verziÃ¡ch prÃ­kladu). KeÄÅ¾e v tomto prÃ­klade neï¬guruje Å¾iadny objekt triedy ï¬rma, len objekty jej podtried, postaÄÃ­ nÃ¡m, ak trieda ï¬rma bude maÅ¥ Å¡tandardnÃ½ prÃ¡zdny konÅ¡truktor. ChrÃ¡nenÃ© dÃ¡ta sÃº v diagrame vyznaÄenÃ© bodkoÄiarkovanou Äiarou."
240,345,0.532,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V programe dynamicky alokujeme v riadku 6 pole n reÅ¥azcov. SamotnÃ¡ pamÃ¤Å¥ pre reÅ¥azce tÃ½mto zatiaÄ¾ nie je pridelenÃ¡. Potom v cykle v riadkoch 7 aÅ¾ 11 naÄÃ­tavame reÅ¥azec do poÄ¾a znakov buf, priÄom naÄÃ­tanÃ© znaky i-teho reÅ¥azca zo vstupu odpamÃ¤tÃ¡me v poli reÅ¥azcov v i-tom prvku (str[i]). VÅ¡imnime si, Å¾e pri opakovanÃ½ch naÄÃ­taniach do poÄ¾a znakov (riadok 9) musÃ­me naÄÃ­tanÃ½ reÅ¥azec"
393,493,0.532,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ObrÃ¡zok 9-6. PouÅ¾itie konceptu premenovÃ¡vania v jazyku Beta. VirtuÃ¡lne neterminÃ¡ly Beta poskytuje prostriedky ako napr. virtuÃ¡lne neterminÃ¡ly pre rozÅ¡Ã­renie spÃ´sobu parametrizÃ¡cie definovanÃ½ch metÃ³d, resp. vzorov. V prÃ­klade 9-2 je definovanÃ½ virtuÃ¡lny neterminÃ¡l pre prÃ­klad cyklu while â loop. Cyklus je potom parametrizovanÃ½ nasledovnÃ½m zoznamom atribÃºtov: Â podmienka prebiehania cyklu, Â spracovanie aktuÃ¡lne prechÃ¡dzanÃ©ho elementu,"
190,465,0.532,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"VoÄ¾ba sprÃ¡vnej marketingovej stratÃ©gie je zÃ¡kladom Ãºspechu kaÅ¾dÃ©ho podniku bez ohÄ¾adu na oblasÅ¥ pÃ´sobnosti. Pri vytvÃ¡ranÃ­ tej sprÃ¡vnej stratÃ©gie musÃ­me zohÄ¾adniÅ¥ vÅ¡etky aspekty neustÃ¡le sa meniaceho trhovÃ©ho prostredia a kÄ¾ÃºÄom k Ãºspechu je zÃ­skanie novÃ½ch a udrÅ¾anie existujÃºcich zÃ¡kaznÃ­kov. Do centra pozornosti sa dostÃ¡va zÃ¡kaznÃ­k ako jednotlivec so svojimi konkrÃ©tnymi poÅ¾iadavkami a tÃ½m transformuje masovÃ½ marketing na marketing individuÃ¡lnych vzÅ¥ahov so zÃ¡kaznÃ­kmi (angl. one-to-one marketing). Vo svetle novÃ©ho prÃ­stupu k zÃ¡kaznÃ­kovi vystupuje manaÅ¾ment vzÅ¥ahov so zÃ¡kaznÃ­kmi (angl. CRM, Customer Relationship Management) ako novÃ¡ perspektÃ­va podnikania zaloÅ¾enÃ¡ na poznanÃ­, Å¾e zdrojom prÃ­jmov spoloÄnosti je zÃ¡kaznÃ­k a nie produkt. Na zlepÅ¡enie efektivity zloÅ¾itÃ©ho prÃ­stupu k zÃ¡kaznÃ­kovi sa vo svete IT vyvÃ­jajÃº Å¡pecializovanÃ© systÃ©my na manaÅ¾ovanie vzÅ¥ahov s jednotlivÃ½mi zÃ¡kaznÃ­kmi a partnermi spoloÄnosti, ktorÃ½ch nasadenie sÄ¾ubuje znaÄnÃ© prÃ­nosy vo forme zvÃ½Å¡enia obratu a lepÅ¡ieho uspokojenia Å¡irÅ¡ieho okruhu zÃ¡kaznÃ­kov."
240,311,0.531,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-12 Postupka je reÅ¥azec, v ktorom nasledujÃº pÃ­smenÃ¡ abecedy za sebou, priÄom za pÃ­smenom z nasleduje opÃ¤Å¥ pÃ­smeno a. Postupka je zloÅ¾enÃ¡ alebo celÃ¡ z malÃ½ch pÃ­smen anglickej abecedy, alebo celÃ¡ z veÄ¾kÃ½ch pÃ­smen anglickej abecedy. NapÃ­Å¡te funkciu postupka(), ktorÃ¡ pre danÃ½ poÄiatoÄnÃ½ znak c postupky a jej dÄºÅ¾ku n vrÃ¡ti reÅ¥azec postupky zaÄÃ­najÃºci znakom c dÄºÅ¾ky n. Ãloha 4-13 V hre Obesenec (angl. Hangman) hrÃ¡Ä hÄ¾adÃ¡ skrytÃº sprÃ¡vu hÃ¡danÃ­m pÃ­smen. Napr. reÅ¥azec A_ECE_A je stav hry, v ktorej hrÃ¡Ä uhÃ¡dol pÃ­smenÃ¡ A, C, E. NapÃ­Å¡te funkciu obesenec_stav(), ktorÃ¡ dostane ako argument reÅ¥azec pÃ­smen predstavujÃºci skrytÃº sprÃ¡vu a reÅ¥azec pÃ­smen, ktorÃ©ho znaky sÃº pÃ­smenÃ¡, ktorÃ© hrÃ¡Ä uÅ¾ skÃºÅ¡al, a vrÃ¡ti stav hry (reÅ¥azec) ako nÃ¡vratovÃº hodnotu. Napr. pre skrytÃº sprÃ¡vu ""ABECEDA"" a pÃ­smenÃ¡, ktorÃ© hrÃ¡Ä skÃºÅ¡al ""EAUIC"", bude vÃ½sledok (stav hry) ""A_ECE_A""."
76,54,0.531,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.4 Kolmogorovov model nÃ¡hodnÃ©ho pokusu Doteraz iÅ¡lo o nÃ¡hodnÃ© pokusy, v ktorÃ½ch mnoÅ¾ina ï vÅ¡etkÃ½ch moÅ¾nÃ½ch vÃ½sledkov bola koneÄnÃ¡, resp. spoÄÃ­tateÄ¾nÃ¡. V takÃ½ch prÃ­padoch sme si mohli dovoliÅ¥ dve veci: ï· SystÃ©m nÃ¡hodnÃ½ch udalostÃ­ modelovaÅ¥ systÃ©mom vÅ¡etkÃ½ch podmnoÅ¾Ã­n mnoÅ¾iny ï. ï· PravdepodobnosÅ¥ udalostÃ­ definovaÅ¥ pomocou pravdepodobnostÃ­ jednotlivÃ½ch vÃ½sledkov pokusu: ( ). P(A) = â Obe skutoÄnosti sme si Ä¾ahko osvojili. Teraz vÅ¡ak musÃ­me zobraÅ¥ na vedomie fakt, Å¾e ak ï nie je spoÄÃ­tateÄ¾nÃ¡, tak z istÃ½ch dÃ´vodov (jemnej matematickej povahy) sa s takÃ½mito predpokladmi pracovaÅ¥ nedÃ¡."
184,346,0.531,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Plne aktÃ­vny sÃºborovÃ½ systÃ©m by mal poskytovaÅ¥ takÃ© zÃ¡kladnÃ© operÃ¡cie, ktorÃ© sÃº nevyhnutnÃ© pre naplnenie cieÄ¾ov tohto konceptu. Tieto operÃ¡cie by mali byÅ¥ Äo najjednoduchÅ¡ie a mali by poskytovaÅ¥ moÅ¾nosÅ¥ rozÅ¡Ã­renia do budÃºcnosti. Plne aktÃ­vny sÃºborovÃ½ systÃ©m by mal: Â poskytnÃºÅ¥ komunikaÄnÃ© rozhranie pre objekty sÃºborovÃ©ho systÃ©mu Â poskytnÃºÅ¥ dostatoÄnÃ© zabezpeÄenie objektov v rÃ¡mci tohto prostredia Â poskytnÃºÅ¥ informÃ¡cie o jednotlivÃ½ch ÃºloÅ¾iskÃ¡ch (rozhodovanie sÃºborov) Â umoÅ¾niÅ¥ presun sÃºborov medzi jednotlivÃ½mi ÃºloÅ¾iskami dÃ¡t (aj sieÅ¥ovÃ½mi) Â urÄovaÅ¥ cenu konkrÃ©tneho ÃºloÅ¾iska (spoplatnenie prostriedkov) Â poskytnÃºÅ¥ spÃ¤tnÃº vÃ¤zbu medzi sÃºborom a vÃ½poÄtovÃ½m prostredÃ­m Â poskytnÃºÅ¥ prostredie pre vykonÃ¡vanie sÃºborov (vÃ½poÄtovÃ© prostredie)"
369,193,0.53,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.44. Vzor Poplatky za uzatvorenie zÃ¡vÃ¤zku Model pre definovanie poplatkov na metaÃºrovni, ak za uzavretie zÃ¡vÃ¤zku sa ÃºÄtuje najviac jeden poplatok, ukazuje obr. 3.45. Podobne ako pri cennÃ­koch produktov, model umoÅ¾Åuje definovanie ÄasovÃ½ch radov poplatkov triedou Sadzba poplatku. Sadzba poplatku mÃ´Å¾e zÃ¡visieÅ¥ od kategÃ³rie partnera: vÃ½znamnÃ­ klienti mÃ´Å¾u maÅ¥ stanovenÃ© niÅ¾Å¡ie sadzby. Zavazku"
184,293,0.53,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Zo zaÄiatku poskytovali operaÄnÃ© systÃ©my len jedinÃ½ druh prÃ­stupu k sÃºborom â sekvenÄnÃ½ prÃ­stup. V tÃ½chto systÃ©moch mohol proces ÄÃ­taÅ¥ slabiky alebo zÃ¡znamy sÃºboru od zaÄiatku po koniec, nemohol vÅ¡ak vynechaÅ¥ nejakÃº ÄasÅ¥ a prekroÄiÅ¥ tak poradie ÄÃ­tania. Tento prÃ­stup sa Äasto pouÅ¾Ã­val v prÃ­padoch, keÄ bola ÃºloÅ¾nÃ½m mÃ©diom magnetickÃ¡ pÃ¡ska (Prabhakar et al., 1997). PrÃ­chodom diskov ako mÃ©diÃ­ na ukladanie dÃ¡t sa umoÅ¾nilo ÄÃ­tanie obsahu sÃºborov v Ä¾ubovoÄ¾nom poradÃ­. Tento prÃ­stup sa nazÃ½va nÃ¡hodnÃ½ prÃ­stup. Pri nÃ¡hodnom prÃ­stupe sa pri operÃ¡cii Read buÄ vÅ¾dy uvedie pozÃ­cia miesta v sÃºbore, z ktorÃ©ho sa mÃ¡ ÄÃ­taÅ¥, alebo samotnÃ¡ operÃ¡cia Read ÄÃ­ta sekvenÄne a pouÅ¾Ã­va sa operÃ¡cia posunu v sÃºbore, kedy ÄalÅ¡ia operÃ¡cia Read ÄÃ­ta z miesta, kde bol vykonanÃ½ poslednÃ½ posun prostrednÃ­ctvom operÃ¡cie Seek."
205,242,0.53,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","14.5 Zhrnutie Pri prÃ¡ci a analÃ½ze veÄ¾kÃ©ho mnoÅ¾stva Ãºdajov sa objavujÃº mnohÃ© vÃ½zvy. Zhlukovanie Ãºdajov pri tejto prÃ¡ci vÃ½znamnou a dÃ´leÅ¾itou oblasÅ¥ou. MnohÃ­ vÃ½skumnÃ­ci sa tejto oblasti venujÃº a snaÅ¾ia sa zlepÅ¡ovaÅ¥ zhlukovacie algoritmy. V tejto kapitole sme sa venovali niektorÃ½m vybranÃ½m zhlukovcÃ­m metÃ³dam a to konkrÃ©tne hierarchickÃ½m metÃ³dam a metÃ³de K-priemerov. Na konci kapitoly sme aspoÅ struÄne spomenuli aj vizualizÃ¡ciu zhlukov. S vÄakou uvÃ¡dzame, Å¾e text tejto kapitoly vychÃ¡dza okrem inÃ½ch z obsahu prednÃ¡Å¡ky, ktorej autorom je McCrown [1]."
66,28,0.53,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"CHECK â atribÃºt obsahuje kontrolu, ktorÃ¡ povoÄ¾uje pridanie iba takÃ½ch hodnÃ´t, ktorÃ© spÄºÅajÃº uvedenÃº podmienku. Definuje hodnoty, ktorÃ© mÃ´Å¾e nadobÃºdaÅ¥ atribÃºt napr. Äi nie je vloÅ¾enÃ½ zÃ¡pornÃ½ poÄet strelenÃ½ch gÃ³lov v zÃ¡pase. Definuje sa pomocou klauzuly CHECK spolu s podmienkou, ktorÃ¡ je uvedenÃ¡ pri atribÃºte v rÃ¡mci definovania tabuÄ¾ky."
59,270,0.53,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Krok 2. HrÃ¡Ä G vytvorÃ­ z pozÃ­cie P mnoÅ¾inu nasledujÃºcich pozÃ­ciÃ­ A P ï½ P1 , P2 ,..., Pn . a) Ak mnoÅ¾ina je prÃ¡zdna, potom obaja hrÃ¡Äi G1 a G2 remÃ­zujÃº a hra pokraÄuje krokom 4. b) V prÃ­pade, Å¾e hrÃ¡Ä je prvÃ½ a hrÃ¡ sa prvÃ½ Å¥ah, tak nÃ¡hodne vyberieme jednu pozÃ­ciu z A(P). V opaÄnom prÃ­pade kaÅ¾dÃ¡ pozÃ­cia Pi z mnoÅ¾iny nasledujÃºcich pozÃ­ciÃ­ je ohodnotenÃ¡ koeficientom 0<zi<1. HrÃ¡Ä vyberie za nasledujÃºcu pozÃ­ciu takÃº PÂ´ïA(P), ktorÃ¡ je ohodnotenÃ¡ maximÃ¡lnym koeficientom z, Pï¬PÂ´. Ak pozÃ­cia P je vÃ­Å¥aznÃ¡, potom hrÃ¡Ä G vÃ­Å¥azÃ­ a hra pokraÄuje krokom 4. Krok 3. Hra prechÃ¡dza na druhÃ©ho hrÃ¡Äa, G ï¬ G2 , pozÃ­ciu P si vytvorÃ­ inverziou aktuÃ¡lnej pozÃ­cie, P ï¬ P , hra pokraÄuje krokom 2. Krok 4. Koniec hry. Podobne, ako pre model hry piÅ¡kvorky (pozri 2. kapitolu), tento algoritmus nie je Ãºplne deterministickÃ½, v prÃ­pade prvÃ©ho hrÃ¡Äa a jeho prvÃ©ho Å¥ahu, Å¥ah sa vyberie z mnoÅ¾iny moÅ¾nÃ½ch Å¥ahov nÃ¡hodne, potom je uÅ¾ hra plne deterministickÃ¡. KÄ¾ÃºÄovÃº Ãºlohu v algoritme mÃ¡ vÃ½poÄet koeficientov z = z(Pï¢) pre pozÃ­cie Pï¢ïA(P). Toto mÃ´Å¾e byÅ¥ vykonanÃ© buÄ metÃ³dami klasickej umelej inteligencie, ktorÃ© sÃº zaloÅ¾enÃ© na kombinÃ¡cii metÃ³d spÃ¤tnÃ©ho prehÄ¾adÃ¡vania a rÃ´znych heuristÃ­k. NaÅ¡u pozornosÅ¥ usmernÃ­me na modernÃ½ prÃ­stup multiagentovÃ½ch systÃ©mov, ktorÃ½ sa zakladÃ¡ na predpoklade, Å¾e sprÃ¡vanie sa agenta v prostredÃ­ a/alebo vykonÃ¡vanie urÄitÃ½ch ÄinnostÃ­ je plne determinovanÃ© jeho kognitÃ­vnym orgÃ¡nom, ktorÃ½ vykazuje urÄitÃº plasticitu (t. j. je schopnÃ½ uÄenia). KognitÃ­vny orgÃ¡n agenta G je obykle numericky realizovanÃ½ parametrickÃ½m zobrazenÃ­m G(w):Pï®R, kde w je parameter (parametre) zobrazenia a ktorÃ© priradzuje kaÅ¾dej pozÃ­cii (prostrediu) reÃ¡lne ÄÃ­slo z, formÃ¡lne z = G(P,w). Zmenou w menia sa vlastnosti kognitÃ­vneho orgÃ¡nu (t. j. dostÃ¡vame inÃ© parametrickÃ© zobrazenie), tÃ½mto spÃ´sobom mÃ¡me zabezpeÄenÃº plasticitu kognitÃ­vneho"
236,184,0.53,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"LATEX 2Îµ vÃ¡m umoÅ¾Åuje zadaÅ¥ veÄ¾kosÅ¥ papiera v prÃ­kaze \documentclass. LATEX potom automaticky zvolÃ­ sprÃ¡vne rozmery textu. V niektorÃ½ch prÃ­padoch vÃ¡m vÅ¡ak preddefinovanÃ© hodnoty nemusia vyhovovaÅ¥. Prirodzene, mÃ´Å¾ete ich zmeniÅ¥. ObrÃ¡zok 5.2 ukazuje vÅ¡etky parametre, ktorÃ© sa dajÃº meniÅ¥. ObrÃ¡zok bol vytvorenÃ½ pomocou balÃ­ka layout z uzla tools.5 POÄKAJTE! . . . skÃ´r neÅ¾ sa pustÃ­te do Å¡ialenÃ½ch aktivÃ­t typu: âRozÅ¡Ã­rme troÅ¡ku tÃºto Ãºzku stranu!Ã¿, porozmÃ½Å¡Ä¾ajte pÃ¡r sekÃºnd. Rovnako ako v prÃ­pade vÃ¤ÄÅ¡iny vecÃ­ v LATEXu, nÃ¡jdu sa dobrÃ© dÃ´vody aj nato, aby bol vzhÄ¾ad strÃ¡nky takÃ½, akÃ½ je. Samozrejme, v porovnanÃ­ so strÃ¡nkou MS Wordu vyzerÃ¡ hrozne Ãºzka. Ale pozrite sa na vaÅ¡u obÄ¾ÃºbenÃº knihu6 a spoÄÃ­tajte poÄet pÃ­smen na Å¡tandardnom textovom riadku. ZistÃ­te, Å¾e tam nie je viac pÃ­smen ako okolo 66. Teraz urobte to istÃ© so svojou LATEXovskou stranou. ZistÃ­te, Å¾e aj tam sa nachÃ¡dza pribliÅ¾ne 66 znakov na riadok. SkÃºsenosti ukazujÃº, Å¾e ak sa na riadku vyskytuje viac pÃ­smen, ÄÃ­tanie sa stÃ¡va obtiaÅ¾nejÅ¡Ã­m. Je to preto lebo oÄiam je nÃ¡roÄnÃ© presÃºvaÅ¥ sa z konca riadku na zaÄiatok ÄalÅ¡ieho. Toto je tieÅ¾ dÃ´vod nato, aby sa noviny tlaÄili do viacerÃ½ch stÄºpcov. Teda ak zvÃ¤ÄÅ¡Ã­te Å¡Ã­rku vÃ¡Å¡ho textu, uvedomte si, Å¾e komplikujete Å¾ivot ÄitateÄ¾om vaÅ¡ej prÃ¡ce. Ale dosÅ¥ bolo vÃ½strah, sÄ¾Ãºbil som, Å¾e vÃ¡m poviem, ako sa to robÃ­. . . LATEX poskytuje dva prÃ­kazy na zmenu tÃ½chto parametrov. VÃ¤ÄÅ¡inou sa pouÅ¾Ã­vajÃº v hlaviÄke dokumentu. PrvÃ½m prÃ­kazom sa nastavuje urÄitÃ¡ hodnota ktorÃ©hokoÄ¾vek z danÃ½ch parametrov: \setlength{parameter }{dÄºÅ¾ka}"
135,115,0.53,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â spoluprÃ¡ca medzi aplikÃ¡ciami, â spoluprÃ¡ca medzi aplikÃ¡ciou a operanÃ½m systÃ©mom, â spoluprÃ¡ca medzi sluÅ¾bou cieovÃ©ho a zdrojovÃ©ho operanÃ©ho systÃ©mu, â dohody ohadom rozhranÃ­, syntaxe a sÃ©mantiky, â architektÃºra sÃºiastok a ich vzÃ¡jomnÃ¡ spoluprÃ¡ca. 2.1.6 HardvÃ©rovÃ© a softvÃ©rovÃ© prostredie Distribuovanou aplikÃ¡ciou mÃ´Å¾eme nazva aplikÃ¡ciu, ktorÃ¡ sa vykonÃ¡va na viacerÃ½ch poÃ­taoch a asto na rozdielnych operanÃ½ch systÃ©moch. NastÃ¡va viacero problÃ©mov,"
393,483,0.529,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Podpora mikroarchitektÃºr MikroarchitektÃºry (Alur et al., 2001) sÃº definovanÃ© v kontexte enterprise softvÃ©rovÃ½ch architektÃºr ako mnoÅ¾iny spolupracujÃºcich vzorov pre rieÅ¡enie rozsiahlejÅ¡Ã­ch problÃ©mov, pre realizÃ¡ciu celÃ½ch systÃ©mov alebo podsystÃ©mov. MikroarchitektÃºra je urÄenÃ¡ na rieÅ¡enie hrubozrnnÃ½ch problÃ©mov, ktorÃ© nemÃ´Å¾u byÅ¥ vyrieÅ¡enÃ© jedinÃ½m vzorom. (Alur et al., 2001) Za prÃ­klad mikroarchitekÃºry mÃ´Å¾eme povaÅ¾ovaÅ¥ spoluprÃ¡cu vzorov Composite a Iterator podÄ¾a obrÃ¡zka 9-5, kedy Iterator zabezpeÄuje prechÃ¡dzanie po Å¡truktÃºrach uloÅ¾enÃ½ch v inÅ¡tancii triedy Composite vrapujÃºcej konkrÃ©tny kontajner. Vzor Composite rieÅ¡i problÃ©m zovÅ¡eobecnenia zloÅ¾enÃ­n a jednotlivÃ½ch prvkov a na sprÃ­stupÅovanie jednotlivÃ½ch prvkov vo vrapovanom kontajneri vyuÅ¾Ã­va moÅ¾nosti vzoru Iterator. NÃ¡vrhÃ¡r pouÅ¾Ã­vajÃºci vzor Composite navyÅ¡e nemusÃ­ vedieÅ¥ o pouÅ¾Ã­vanÃ­ mikroarchitektÃºry so vzorom Iterator. CASE nÃ¡stroje by mali Äo moÅ¾no v najvÃ¤ÄÅ¡ej miere umoÅ¾niÅ¥ prÃ¡cu s mikroarchitektÃºrami bez explicitnej znalosti nÃ¡vrhÃ¡ra."
276,8,0.529,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Po spustenÃ­ programu je potrebnÃ© sa prepnÃºÅ¥ na sÃ©riovÃ© spojenie (moÅ¾nosÅ¥ Ãºplne vpravo v hornej Äasti obrazovky), priÄom ostatnÃ© prednastavenÃ© parametre platia pre vÃ¤ÄÅ¡inu Cisco prepÃ­naÄov a smerovaÄov, takÅ¾e ich nie je potrebnÃ© meniÅ¥, ale staÄÃ­ konzolovÃ© spojenie otvoriÅ¥. PokiaÄ¾ sa v zariadenÃ­ nenachÃ¡dza predchÃ¡dzajÃºca konfigurÃ¡cia, tak sa nÃ¡s systÃ©m po otvorenÃ­ spojenia spÃ½ta, Äi chceme pouÅ¾iÅ¥ konfiguraÄnÃ½ dialÃ³g (je to interaktÃ­vny"
115,105,0.529,Algebra a diskrÃ©tna  matematika,"takÃ½ prvok, ktorÃ½ je v oblasti Å¡pecifikujÃºcej danÃ½ stÄºpec. Tak naprÃ­klad, Ã´smy stÄºpec v tabuÄ¾ke 2.2 obsahuje binÃ¡rne hodnoty, ktorÃ© Å¡pecifikujÃº, Äi A âª B a A âª C obsahujÃº spoloÄnÃ½ prvok. Pri vytvÃ¡ranÃ­ tabuÄ¾ky platÃ­ princÃ­p kompozicionality, t. j. ohodnotenie zloÅ¾itejÅ¡Ã­ch vÃ½razov je vytvÃ¡ranÃ© pomocou ich jednoduchÅ¡Ã­ch zloÅ¾iek."
184,18,0.529,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"V sÃºÄasnosti neexistuje jedna, ale hneÄ niekoÄ¾ko definÃ­ciÃ­ architektÃºry softvÃ©ru. KaÅ¾dÃ¡ z nich sa na tÃºto oblasÅ¥ pozerÃ¡ z inÃ©ho uhla, vyzdvihuje inÃ© aspekty. Jednou zo zÃ¡kladnÃ½ch definÃ­ciÃ­ architektÃºry softvÃ©ru je definÃ­cia organizÃ¡cie IEEE: âArchitektÃºra je definovanÃ¡ ako fundamentÃ¡lna organizÃ¡cia systÃ©mu stelesnenÃ¡ v jeho komponentoch, vzÅ¥ahoch medzi komponentmi navzÃ¡jom a medzi prostredÃ­m. ArchitektÃºra v sebe zÃ¡roveÅ zahÅÅa princÃ­py nÃ¡vrhu a rozvoja systÃ©mu.â ArchitektÃºra teda predovÅ¡etkÃ½m definuje Å¡truktÃºru systÃ©mu pomocou komponentov (a ich interakcie) a definuje pravidlÃ¡ nÃ¡vrhu na Ãºrovni systÃ©mu. Je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e architektÃºra systÃ©mu ohraniÄuje moÅ¾nosti ÄalÅ¡ieho rozvoja systÃ©mu. InÃ© definÃ­cie architektÃºry stavajÃº na definÃ­cii IEEE a zdÃ´razÅujÃºc ÄalÅ¡ie dÃ´leÅ¾itÃ© body danej problematiky: Â ArchitektÃºra je Å¡truktÃºra alebo Å¡truktÃºry systÃ©mu. ZdÃ´razÅuje sa teda viacero moÅ¾nÃ½ch a navzÃ¡jom sa doplÅujÃºcich pohÄ¾adov na systÃ©m."
111,36,0.529,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 3.4: VÅ¡etky karty by mali byÅ¥ na rovnakej konceptuÃ¡lnej Ãºrovni, aby sa dali zaradiÅ¥ do rovnakÃ½ch mentÃ¡lnych modelov. Triedenie kariet je koncepÄnÃ¡ ÄinnosÅ¥, nie test pouÅ¾iteÄ¾nosti. CieÄ¾om triedenia kariet je skÃºmaÅ¥, ako Ä¾udia chÃ¡pu informÃ¡cie, nie testovaÅ¥ navigÃ¡ciu webovej strÃ¡nky. To je dÃ´vod, preÄo by vÅ¡etky karty mali byÅ¥ na rovnakej konceptuÃ¡lnej Ãºrovni, aby sa dali zaradiÅ¥ do rovnakÃ½ch mentÃ¡lnych modelov, podÄ¾a ktorÃ½ch ich respondenti triedia. Okrem toho, Å¾e vÅ¡etky karty musia byÅ¥ konzistentnÃ© a rovnakÃ©, aby sa vytvorili koncepÄnÃ© skupiny, je tieÅ¾ dÃ´leÅ¾itÃ©, aby bolo dostatok kariet podobnÃ½ch alebo navzÃ¡jom prÃ­buznÃ½ch. Pri kaÅ¾dej karte by ste si mali vedieÅ¥ predstaviÅ¥ aspoÅ jednu ÄalÅ¡iu kartu, ktorÃº by s Åou bolo moÅ¾nÃ© zaradiÅ¥ do kategÃ³rie. V opaÄnom prÃ­pade, ak budÃº vÅ¡etky karty veÄ¾mi odliÅ¡nÃ© a Ä¾udia (respondenti) medzi nimi nebudÃº vidieÅ¥ Å¾iadnu sÃºvislosÅ¥, nebudÃº schopnÃ­ vytvoriÅ¥ Å¾iadne ucelenÃ© kategÃ³rie a vy sa nedozviete niÄ uÅ¾itoÄnÃ© pre zoskupovanie poloÅ¾iek na vaÅ¡ej webovej strÃ¡nke. Takisto ak bude triedenie prÃ­liÅ¡ nÃ¡roÄnÃ©, bude vÃ¤ÄÅ¡ia pravdepodobnosÅ¥, Å¾e respondenti Å¡tÃºdiu opustia, resp. triedenie nedokonÄia. NajlepÅ¡Ã­ spÃ´sob, ako sa s tÃ½mto problÃ©mom vysporiadaÅ¥, je overiÅ¥ prÃ­tomnosÅ¥ kariet, pre ktorÃ© je Å¥aÅ¾kÃ© nÃ¡jsÅ¥ âprÃ­buznÃ½châ. Ak to chcete urobiÅ¥, zdieÄ¾ajte odkaz na nÃ¡hÄ¾ad Å¡tÃºdie triedenia kariet s kolegami z vÃ¡Å¡ho tÃ­mu a nechajte ich karty zatriediÅ¥. Ak sa niektorÃ© karty zdajÃº byÅ¥ nÃ¡roÄnÃ© na triedenie, ale napriek tomu ich povaÅ¾ujete za dÃ´leÅ¾itÃ© pre Å¡tÃºdiu, mÃ´Å¾ete ich vyvÃ¡Å¾iÅ¥ pridanÃ­m kariet,"
367,66,0.529,CESTA K OTVORENEJ VEDE,"DostupnÃ© na: https://publicationethics.org/ Checklist iniciatÃ­vy Think-Check-Submit / PremÃ½Å¡Ä¾aÅ¥-PreveriÅ¥-PublikovaÅ¥, prevencia proti pochybnÃ½m Äasopisom (slovenskÃ½ preklad). DostupnÃ© na: http://thinkchecksubmit.org/translations/slovak/ InvestigatÃ­vny TV dokument âFaloÅ¡nÃ¡ vedaâ (o pochybnÃ½ch vydavateÄ¾och a konferenciÃ¡ch, RTVS, 2018). DostupnÃ© na: https://www.rtvs.sk/televizia/archiv/13542/162483 Detekcia plagiÃ¡torstva (dvojdielny ÄlÃ¡nok v ÄeÅ¡tine o antiplagiÃ¡torskÃ½ch softvÃ©roch a ako fungujÃº). DostupnÃ© na: https://ikaros.cz/detekceplagiatorstvi, https://ikaros.cz/detekce-plagiatorstvi-0"
240,242,0.529,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÅ¡imnime si riadok 14, ktorÃ½ sa v cykle zavolÃ¡ n krÃ¡t: teda pri kaÅ¾dom volanÃ­ rekurzÃ­vnej funkcie sa n krÃ¡t vnorÃ­me hlbÅ¡ie (ÄÃ­slo Ãºrovne k-1), aÅ¾ kÃ½m dosiahneme poslednÃº ÃºroveÅ (riadok 5) k = 0, v ktorej vypÃ­Å¡eme hodnotu globÃ¡lnej premennej x a Äalej sa nevnÃ¡rame (ale vrÃ¡time spÃ¤Å¥ do predchÃ¡dzajÃºcej Ãºrovne k = 1). GlobÃ¡lna premennÃ¡ x teda musÃ­ postupne nadobudnÃºÅ¥ vÅ¡etky moÅ¾nÃ© hodnoty variÃ¡ciÃ­ s opakovanÃ­m k-tej triedy, napr. pre n = 2 a k = 3 to je: 111, 112, 121, 122, 211, 212, 221 a 222. Hodnotu globÃ¡lnej premennej x upravujeme v riadku 13, v ktorom pridÃ¡me do x cifru p sprava, a v riadku 15, v ktorom po vynorenÃ­ z rekurzie odstrÃ¡nime poslednÃº cifru x, ktorÃº sme tam pridali v riadku 13. DÃ´leÅ¾itÃ© pozorovanie je, Å¾e efekt riadkov 13 a 15 je spolu neutrÃ¡lny: prÃ­kaz v riadku 15 odstrÃ¡ni Ãºpravu vykonanÃº v riadku 13 a vrÃ¡ti hodnotu x do stavu pred vykonanÃ­m riadku 13. Na zÃ¡klade toho vykonÃ¡vanÃ½ cyklus v riadku 9 pre p = 1, â¦, n vyskÃºÅ¡a pridaÅ¥ postupne kaÅ¾dÃº z cifier do vÃ½slednÃ©ho ÄÃ­sla sprava a vnorÃ­ sa â ÄÃ­m pre konkrÃ©tne dosadenie cifry p na k-tej Ãºrovni dosadÃ­ (a aj vypÃ­Å¡e na vÃ½stup) vÅ¡etky moÅ¾nÃ© dosadenia zostÃ¡vajÃºcich cifier. PostupnÃ½m rekurzÃ­vnym vnÃ¡ranÃ­m do ÃºrovnÃ­ k-1, â¦, 1 sa pre kaÅ¾dÃº zo zostÃ¡vajÃºcich cifier dosadia vÅ¡etky moÅ¾nosti cifier, priÄom po kompletnom dosadenÃ­ k cifier sa (v Ãºrovni rekurzie pre k = 0) hodnota x vypÃ­Å¡e. RieÅ¡enie doplÅujÃºcej Ãºlohy (1): Bez pouÅ¾itia globÃ¡lnych alebo statickÃ½ch premennÃ½ch). GlobÃ¡lnu premennÃº x mÃ´Å¾eme odstrÃ¡niÅ¥ tak, Å¾e do funkcie pridÃ¡me pomocnÃ½ argument, v ktorom si budeme hodnotu priebeÅ¾ne prenÃ¡Å¡aÅ¥, upravenÃ© rieÅ¡enie je nasledujÃºce:"
43,27,0.529,Objektovo orientovanÃ© programovanie v C++,"Obr. 1.3: PreÅ¥aÅ¾enie metÃ³dy Zisti cenu. Verzie sa lÃ­Å¡ia poÄtom vstupnÃ½ch parametrov a v nadvÃ¤znosti na to sa objavia rozdiely aj v obsahu. PrepÃ­Å¡me teda nÃ¡Å¡ prÃ­klad tak, aby fungovalo aj zisÅ¥ovanie cien pre ï¬rmy z konkrÃ©tneho mesta. V tomto prÃ­pade bude musieÅ¥ trieda Firma zverejniÅ¥ svoje sÃ­dlo, a to nielen vÃ½pisom na obrazovku, ale skutoÄnÃ½m odovzdanÃ­m hodnoty v metÃ³de Zisti cenu triedy ZÃ¡kaznÃ­k. Inak by tÃ¡to metÃ³da nemohla zistiÅ¥, Äi ï¬rma sÃ­dli v sprÃ¡vnom meste. TakÅ¾e do triedy ï¬rma doplnÃ­me novÃº metÃ³du Povedz sÃ­dlo, ktorÃ¡ len vrÃ¡ti hodnotu sÃºkromnÃ©ho Ãºdaja sÃ­dlo. Trieda Firma sÃºkromnÃ© nÃ¡zov sÃ­dlo hodinovÃ¡ mzda hodinovÃ½ vÃ½kon verejnÃ© KonÅ¡truktor(n,s,h m,h v) VypÃ­Å¡ nÃ¡zov a sÃ­dlo() Povedz sÃ­dlo() VypoÄÃ­taj cenu(mnoÅ¾stvo)"
43,184,0.529,Objektovo orientovanÃ© programovanie v C++,"atÄ. InÃ½mi, slovami, treba dynamicky alokovaÅ¥ dvojrozmernÃ© pole celÃ½ch ÄÃ­sel T, v ktorom mÃ¡ i-ty riadok i+1 prvkov (i=0. . . n-1) a platÃ­ T [i][0] = T [i][i â 1] = 1 pre i=0. . . n-1 a T [i][j] = T [i â 1][j â 1] + T [i â 1][j] pre i=1. . . n-1, j=1. . . i-2. PoÄet riadkov trojuholnÃ­ka, t.j. ÄÃ­slo n, zadÃ¡ uÅ¾Ã­vateÄ¾. 6. Naprogramujte hru Pexeso pre jednÃ©ho hrÃ¡Äa. Urobte ju tak, Å¾e hrÃ¡Ä si bude mÃ´cÅ¥ zvoliÅ¥ nÃ¡roÄnosÅ¥ (teda poÄet kartiÄiek). Hra bude prebiehaÅ¥ v textovom mÃ³de, kartiÄky budÃº reprezentovanÃ© znakmi. DvojrozmernÃ© pole, v ktorom budÃº tieto znaky uloÅ¾enÃ©, by sa malo alokovaÅ¥ dynamicky. 7. Vytvorte funkciu, ktorÃ¡ zmenÃ­ Ä¾ubovoÄ¾nÃº vetu tak, Å¾e ak v nej nÃ¡jde slovo âmalÃ½â, zamenÃ­ ho za âveÄ¾kÃ½â a slovo âzlÃ½â nahradÃ­ slovom âdobrÃ½â. 8. Vytvorte Å¡truktÃºru bod s dvomi zloÅ¾kami x a y. Potom vytvorte funkciu, ktorÃ¡ bude vedieÅ¥ vymeniÅ¥ dva body (to znamenÃ¡, Å¾e vzÃ¡jomne vymenÃ­ obe ich sÃºradnice)."
111,63,0.529,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 4.1: PrÃ­klad stromu (Å¡truktÃºra navigaÄnÃ©ho menu) pre regionÃ¡lnu autobusovÃº spoloÄnosÅ¥ prezentovanÃ½ vo forme tabuÄ¾ky. OznaÄenia kategÃ³riÃ­ sÃº takÃ© oznaÄenia v strome (uzly, angl. nodes), ktorÃ© majÃº pod sebou ÄalÅ¡ie oznaÄenia (ÄalÅ¡ie uzly, potomkov). Ide o uzly, ktorÃ© tvoria kategÃ³riu, resp. podkategÃ³riu. ObsahovÃ© oznaÄenia sÃº takÃ© oznaÄenia v strome, ktorÃ© nemajÃº ÄalÅ¡Ã­ch potomkov (listy stromu) a v podstate reprezentujÃº cieÄ¾ovÃ© informÃ¡cie/obsah, ktorÃ© chcete, aby nÃ¡vÅ¡tevnÃ­ci/pouÅ¾Ã­vatelia vaÅ¡ej webovej strÃ¡nky mohli Ä¾ahko nÃ¡jsÅ¥. V ÃºlohÃ¡ch Å¾iadame respondentov, aby naÅ¡li umiestnenie nejakÃ©ho obsahu, informÃ¡cie, prÃ­p. funkcie v strome. PoÄas testovania hierarchickej Å¡truktÃºry je Ãºlohou respondenta kliknÃºÅ¥ na strom a nÃ¡jsÅ¥ sprÃ¡vne rieÅ¡enia pre zadanÃ© Ãºlohy. SpoÄiatku respondent vidÃ­ len vrchnÃº vrstvu stromu (1. ÃºroveÅ). ÄalÅ¡ia ÃºroveÅ stromu sa odhalÃ­, keÄ respondent klikne na oznaÄenie (pod)kategÃ³rie. Respondent mÃ´Å¾e stromom traverzovaÅ¥, priÄom jednotlivÃ© (pod)kategÃ³rie sa postupne otvÃ¡rajÃº a zatvÃ¡rajÃº. Ak respondent lokalizuje list (cieÄ¾ovÃ½ uzol), o ktorom je presvedÄenÃ½, Å¾e zodpovedÃ¡ rieÅ¡eniu, klikne (najÄastejÅ¡ie) na tlaÄidlo âTu by som hladal danÃº informÃ¡ciuâ. Respondent musÃ­ prejsÅ¥ k sprÃ¡vnej odpovedi kliknutÃ­m cez vÅ¡etky Ãºrovne stromu. Samozrejme, ak si myslÃ­, Å¾e si vybral nesprÃ¡vny smer, vÅ¾dy sa mÃ´Å¾e vrÃ¡tiÅ¥ spÃ¤Å¥. Pre regionÃ¡lnu autobusovÃº spoloÄnosÅ¥ by sme mohli Ãºlohu formulovaÅ¥ takto: âZajtra skoro rÃ¡no by ste si chceli kÃºpiÅ¥ lÃ­stok na autobus. Kde by ste hÄ¾adali Äas, kedy sa otvÃ¡ra predajÅa cestovnÃ½ch lÃ­stkov?â(pozri Obr. 4.2) Stromy sÃº definovanÃ© vÃ½luÄne textovÃ½mi oznaÄeniami usporiadanÃ½mi do stromovej Å¡truktÃºry, takÅ¾e sa Ä¾ahko vytvÃ¡rajÃº a sÃº ideÃ¡lne na testovanie informaÄnej Å¡truktÃºry bez potreby jej implemen-"
240,450,0.529,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-25 (rieÅ¡enie) PostupovaÅ¥ budeme obvyklÃ½m spÃ´sobom nÃ¡sobenia dlhÃ½ch ÄÃ­sel: ÄÃ­slo a vynÃ¡sobÃ­me postupne jednotlivÃ½mi ciframi ÄÃ­sla b a pripoÄÃ­tame s posunutÃ­m o prÃ­sluÅ¡nÃ½ rÃ¡d k celkovÃ©mu vÃ½sledku (x). Pri vÃ½poÄte sÃºÄinu postupujeme v dvoch vnorenÃ½ch cykloch od najniÅ¾Å¡Ã­ch rÃ¡dov (i-tÃ½ rÃ¡d v ÄÃ­sle a, j-tÃ½ rÃ¡d v ÄÃ­sle b) s tÃ½m, Å¾e sÃºÄin nad 10 sa prenesie do vyÅ¡Å¡ieho rÃ¡du. V riadku 7 v cykle prejdeme postupne cifry ÄÃ­sla i od najniÅ¾Å¡ieho rÃ¡du. PriebeÅ¾nÃ½ sÃºÄin na aktuÃ¡lnom rÃ¡de si poÄÃ­tame v premennej prenos, incializujeme na hodnotu 0. Do vÃ½sledku x priradÃ­me v riadku 10 poslednÃº"
367,47,0.529,CESTA K OTVORENEJ VEDE,"PokraÄovala som na svojej dizertaÄnej prÃ¡ci v reÅ¾ime otvorenej vedy. Okrem Å¡tÃºdia fonetiky pozostÃ¡va moja prÃ¡ca aj z prÃ­pravy zhromaÅ¾denÃ½ch dÃ¡t na dlhodobÃ© uchovÃ¡vanie v otvorenom repozitÃ¡ri CNRS Pangloss. Som rada, Å¾e tÃ½mto mÃ´Å¾em prispievaÅ¥ k zachovaniu jazykov svojej rodnej krajiny!"
236,130,0.529,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"TeorÃ©ma âporotaÃ¿ pouÅ¾Ã­va rovnakÃ© ÄÃ­slovanie, ako teorÃ©ma âzÃ¡konÃ¿. Preto dostane poradovÃ© ÄÃ­slo, ktorÃ© nasleduje za uvedenÃ½mi teorÃ©mami âzÃ¡konÃ¿. Argument v hranatÃ½ch zÃ¡tvorkÃ¡ch sa pouÅ¾Ã­va na bliÅ¾Å¡ie urÄenie nÃ¡zvu alebo nieÄoho podobnÃ©ho danej teorÃ©me. \newtheorem{mur}{Murphy}[section] \begin{mur} Ak existujÃº dva alebo viac spÃ´sobov, ako nieÄo urobiÅ¥ a jeden z~tÃ½chto spÃ´sobov mÃ´Å¾e spÃ´sobiÅ¥ katastrofu, potom si niekto tento spÃ´sob vyberie.\end{mur}"
184,413,0.528,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Â textovÃ© operÃ¡cie Â indexovanie Â spracovanie odkazov DruhÃ½m procesom je proces vyhÄ¾adÃ¡vania skladajÃºci sa z Â formulÃ¡cia dopytu a operÃ¡cie na dopyte Â spracovanie dopytu Â vrÃ¡tenie vÃ½sledku na pouÅ¾Ã­vateÄ¾skÃ© rozhranie Â spÃ¤tnÃ¡ vÃ¤zba od pouÅ¾Ã­vateÄ¾a Na obrÃ¡zku 6-1 je zobrazenÃ¡ architektÃºra vyhÄ¾adÃ¡vacieho systÃ©mu, ktorÃ¡ zahÅÅa tieto procesy. V ÄalÅ¡om texte v krÃ¡tkosti opisujeme jednotlivÃ© Äasti tÃ½chto procesov, priÄom niektorÃ½m vÃ¤ÄÅ¡iu pozornosÅ¥ v rÃ¡mci kapitoly."
122,123,0.528,Modelovanie softvÃ©ru,"8.2 AlgebraickÃ¡ Å¡pecifikÃ¡cia zÃ¡sobnÃ­ka Ak opis operÃ¡cie nemÃ´Å¾e byÅ¥ zaloÅ¾enÃ½ na predpokladanej Å¡truktÃºre, aby sme ju predÄasne neÅ¡pecifikovali, na Äom ho potom zaloÅ¾iÅ¥? ZostÃ¡vajÃº nÃ¡m uÅ¾ iba operÃ¡cie, a tak sa musÃ­me spoÄ¾ahnÃºÅ¥ na ne. To, Äo robÃ­ zÃ¡sobnÃ­k zÃ¡sobnÃ­kom, je sprÃ¡vanie. OperÃ¡cie nad zÃ¡sobnÃ­kom mÃ¡vajÃº rÃ´zne"
130,27,0.528,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Vzor zabezpeÄuje oddelenie algoritmu tvorby zloÅ¾itÃ½ch objektov (kompozÃ­cie) od vytvÃ¡rania a skladania jeho jednotlivÃ½ch ÄastÃ­ tak, Å¾e ten istÃ½ proces konÅ¡trukcie produktu mÃ´Å¾e vytvoriÅ¥ rÃ´zne reprezentÃ¡cie. UmoÅ¾Åuje znovupouÅ¾itie algoritmu pre"
40,27,0.528,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Echo State neurÃ³novÃ© siete sa teda na rozdiel od klasickÃ½ch sietÃ­ nepokÃºÅ¡ajÃº dosiahnuÅ¥ poÅ¾adovanÃ© sprÃ¡vanie (dynamiku) adaptÃ¡ciou vÃ¡h relatÃ­vne malÃ©ho poÄtu neurÃ³nov, ale vyuÅ¾Ã­vajÃº dynamiku mohutnej (nÃ¡hodne inicializovanej) skrytej vrstvy na extrahovanie zaujÃ­mavÃ½ch vlastnostÃ­ zo vstupnej postupnosti. Ãlohou vÃ½stupnÃ½ch neurÃ³nov je transformovaÅ¥ tieto vlastnosti (aktivity neurÃ³nov v dynamickom rezervoÃ¡ri) do poÅ¾adovanÃ©ho vÃ½stupu. Proces extrahovania zaujÃ­mavÃ½ch vlastnostÃ­ dynamickÃ½m rezervoÃ¡rom je znÃ¡zornenÃ½ na obr. 3. VstupnÃ½ signÃ¡l sa privedie prostrednÃ­ctvom vstupnÃ½ch neurÃ³nov do skrytej vrstvy, kde nÃ¡sledne dÃ´jde k interakcii veÄ¾kÃ©ho poÄtu nÃ¡hodne poprepÃ¡janÃ½ch neurÃ³nov. Takto je vÃ½slednÃ¡ odozva dynamickÃ©ho rezervoÃ¡ra v porovnanÃ­ so vstupnÃ½m signÃ¡lom podstatne informaÄne âbohatÅ¡iaâ. V dynamickom rezervoÃ¡ri sa typicky nachÃ¡dzajÃº stovky neurÃ³nov a ich aktivity reprezentujÃº obraz vstupnÃ©ho signÃ¡lu v mnohorozmernom stavovom priestore, ktorÃ½ zÃ¡roveÅ tvorÃ­ priestor zaujÃ­mavÃ½ch vlastnostÃ­ (feature space). Aj v prÃ­pade klasickÃ½ch prÃ­stupov k trÃ©novaniu doprednÃ½ch Äi rekurentnÃ½ch sietÃ­ mÃ´Å¾eme hovoriÅ¥ o priestore zaujÃ­mavÃ½ch vlastnostÃ­, ktorÃ½ tvoria aktivity skrytej, resp. rekurentnej vrstvy. Ten mÃ¡ vÅ¡ak, ako uÅ¾ bolo spomenutÃ©, zvyÄajne menÅ¡Ã­ poÄet dimenziÃ­ (typicky desiatky neurÃ³nov). KlasickÃ© prÃ­stupy sa snaÅ¾ia trÃ©novanÃ­m zmeniÅ¥ rozloÅ¾enie stavov (aktivity skrytÃ½ch neurÃ³nov) v tomto priestore takÃ½m spÃ´sobom, aby boli vÃ½stupnÃ© neurÃ³ny schopnÃ© produkovaÅ¥ poÅ¾adovanÃ© vÃ½stupy [5]. Existuje aj prÃ­stup, veÄ¾mi podobnÃ½ Echo State neurÃ³novÃ½m sieÅ¥am, ktorÃ½ sa volÃ¡ âLiquid State Machineâ a bol nezÃ¡visle vynÃ¡jdenÃ½ a skÃºmanÃ½ Wolfgangom Maassom (viac v [6, 1])."
236,16,0.528,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"sionÃ¡lne rozmiestnenie obsahu dokumentu. PÃ´vodnÃ½m autorom LATEXu je Leslie Lamport [1]. PouÅ¾Ã­va TEX ako typografickÃ½ nÃ¡stroj. V roku 1994 bol balÃ­k LATEX aktualizovanÃ½ LATEX3 tÃ­mom vedenÃ½m Frankom Mittelbachom tak, aby obsahoval niektorÃ© dlho poÅ¾adovanÃ© vylepÅ¡enia a aby sa zjednotili vÅ¡etky zÃ¡platovÃ© verzie, ktorÃ© vznikli od vytvorenia LATEXu 2.09 pred niekoÄ¾kÃ½mi rokmi. Nato, aby sa novÃ¡ verzia dala odlÃ­Å¡iÅ¥ od starej, bola pomenovanÃ¡ LATEX 2Îµ . TÃ¡to publikÃ¡cia sa zaoberÃ¡ prÃ¡ve uÅ¾ spomÃ­nanou verziou LATEX 2Îµ . LATEX sa vyslovuje âLay-techÃ¿ alebo âLah-techÃ¿. LATEX sa v prostredÃ­ ASCII pÃ­Å¡e LaTeX. LATEX 2Îµ sa vyslovuje âLej-tech dva eÃ¿ a pÃ­Å¡e sa LaTeX2e. Hore uvedenÃ½ obrÃ¡zok 1.1 ukazuje spoluprÃ¡cu TEXu a LATEXu2Îµ. Tento obrÃ¡zok je prevzatÃ½ z wots.tex od Kees van der Laana."
76,324,0.528,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"7.1.4 PoznÃ¡mka. V prÃ­kladoch 7.1.2 a 7.1.3 sme odhady, resp. odhadovacie Å¡tatistiky zÃ­skali prirodzenÃ½m spÃ´sobom. Je na mieste opÃ½taÅ¥ sa, akÃ© dobrÃ© sÃº tieto odhady, resp. kedy vÃ´bec odhadovaciu Å¡tatistiku povaÅ¾ujeme za dobrÃº. Alebo, na zÃ¡klade Äoho rozhodneme, ktorÃ¡ z tÃ½ch dvoch Å¡tatistÃ­k v prÃ­klade 7.1.2 je lepÅ¡Ã­m odhadom. Zrejme je potrebnÃ© formulovaÅ¥ vlastnosti, ktorÃ© Å¾iadame od âdobrÃ½châ odhadov, t. j. od dobrÃ½ch odhadovacÃ­ch Å¡tatistÃ­k. ZÃ¡kladnou vlastnosÅ¥ou odhadu je (ne)vychÃ½lenosÅ¥. PripomeÅme, Å¾e pod frÃ¡zou rozdelenie urÄuje funkcia (. ; ï±) rozumieme to, Å¾e rozdelenie urÄuje pravdepodobnostnÃ¡ funkcia (ak je diskrÃ©tna), resp. rozdelenie urÄuje hustota (ak je spojitÃ¡ s hustotou ). V oboch prÃ­padoch ï± predstavuje neznÃ¡my parameter funkcie . 7.1.5 DefinÃ­cia. Nech je nÃ¡hodnÃ½ vÃ½ber z rozdelenia, ktorÃ© je urÄenÃ© funkciou (. ; ï±). Å tatistiku ( ) nazÃ½vame nevychÃ½lenÃ½ odhad parametra ï±, ak pre vÅ¡etky do Ãºvahy prichÃ¡dzajÃºce ï± platÃ­ E[ ( ) ] = ï±. Ak Å¡tatistika ( je neznÃ¡my parameter), tak Ãºvahy prichÃ¡dzajÃºce ï± platÃ­"
240,126,0.528,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"usudzovaÅ¥, Å¾e premennÃ¡ f v programe reprezentuje priebeÅ¾ne poÄÃ­tanÃº hodnotu faktoriÃ¡lu. V riadku 8 hodnotu premennej f nÃ¡sobÃ­me opakovane (v tele cyklu) nejakÃ½m neznÃ¡mym vÃ½razom. Äo doplnÃ­me v riadku 8? VzhÄ¾adom na postup vÃ½poÄtu faktoriÃ¡lu musÃ­me hodnotu premennej f v riadku 8 nÃ¡sobiÅ¥ hodnotou premennej i. KeÄÅ¾e hodnotu f upravujeme len v riadku 5 (inicializÃ¡cia) a v riadku 8 (nÃ¡sobenie hodnotou), musÃ­me hodnotu f inicializovaÅ¥ na hodnotu 1, ktorÃ¡ zodpovedÃ¡ hodnote 0! NÃ¡sledne urÄÃ­me hranice cyklu: pre hodnotu N potrebujeme f v poslednej iterÃ¡cii cyklu vynÃ¡sobiÅ¥ N, teda podmienka bude i <= N. ZaÄaÅ¥ mÃ´Å¾eme od hodnoty i = 1, resp. od i = 2, lebo nÃ¡sobenie f mÃ¡ zmysel aÅ¾ od hodnoty i = 2. ZostÃ¡va nÃ¡m urÄiÅ¥ akÃ½ dÃ¡tovÃ½ typ pouÅ¾ijeme pre reprezentÃ¡ciu ÄÃ­sel. Hodnota 20! je 2 432 902 008 176 640 000, priÄom najvÃ¤ÄÅ¡Ã­ beÅ¾ne pouÅ¾Ã­vanÃ½ celoÄÃ­selnÃ½ dÃ¡tovÃ½ typ (unsigned long) dokÃ¡Å¾e reprezentovaÅ¥ najviac ÄÃ­slo 18 446 744 073 709 551 615, Äo je pre nÃ¡s postaÄujÃºce."
135,133,0.527,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.3.1 Volanie vzdialenÃ½ch procedÃºr TypickÃ© pouÅ¾itie vzdialenÃ©ho volania procedÃºr je znÃ¡zornenÃ© na obrÃ¡zku 2-9. Stub2 pre B je modul, ktorÃ½ umoÅ¾uje komunikÃ¡ciu klientov s modulom B. Pre klienta â v naÅ¡om prÃ­pade pre modul A â poskytuje funkciu add (x,y), priom ju neimplementuje priamo, ale pri kaÅ¾dom jej volanÃ­ vytvÃ¡ra balÃ­k Ãºdajov, ktorÃ½ prostrednÃ­ctvom komunikanÃ©ho jadra posiela serveru. Na strane servera balÃ­k prevezme tzv. skeleton pre B, ktorÃ½ z prijatÃ½ch Ãºdajov extrahuje nÃ¡zov funkcie a jej parametre a tÃºto funkciu zavolÃ¡. NÃ¡vratovÃº hodnotu poÅ¡le naspÃ¤ modulu stub, ktorÃ½ ju odovzdÃ¡ klientovi. Pre programÃ¡tora je dÃ´leÅ¾itÃ©, Å¾e jadro je spravidla k dispozÃ­cii vo forme kniÅ¾nice a moduly stub a skeleton sÃº automaticky generovanÃ© z opisu rozhrania volanÃ©ho modulu"
59,362,0.527,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"(6.43). V prvom kroku musÃ­me vykonaÅ¥ konkrÃ©tizÃ¡ciu implikÃ¡cie daÅ¥ ï¨ x, y,z ï© ï vlastniÅ¥ ï¨ y,z ï© , tak Å¾e vÅ¡eobecnÃ© premennÃ© x, y, z sÃº substituovanÃ© konkrÃ©tnymi premennÃ½mi Jano, Mariena, kniha. TÃ¡to konkretizÃ¡cia sa vykonÃ¡ pomocou transformÃ¡cie T, ktorÃ¡ je Å¡pecifikovanÃ¡ formulami (6.65-6.66) Ët1ï¨1ï© ï» t1ï¨1ï© ï T (6.75)"
59,484,0.527,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde ï ï½ ï»ïª1 , ïª2 ,..., ïªn ï½ . Pomocou prvÃ½ch troch postulÃ¡tov mÃ´Å¾eme dokÃ¡zaÅ¥, Å¾e relÃ¡cia Z tretej podmienky (13c) vyplÃ½va, Å¾e ak z teÃ³rie ï logicky vyplÃ½va formula ï¹, potom musÃ­ existovaÅ¥ formula ïªïï , ktorÃ¡ nemÃ¡ vÃ¤ÄÅ¡iu epistemickÃº vÃ½znamnosÅ¥ ako formula ï¹. VÃ½znam tejto podmienky spoÄÃ­va v tom, Å¾e ak chceme z teÃ³rie odstrÃ¡niÅ¥ nejakÃº formulu tak, aby z nej tautologicky nevyplÃ½vala formula ï¹, tak odstrÃ¡nenie formuly ïªïï je postaÄujÃºce na dosiahnutie tejto podmienky. Na zÃ¡ver tÃ½chto poznÃ¡mok o relÃ¡cii epistemickej vÃ½znamnosti poznamenajme, Å¾e vÃ½znam tejto relÃ¡cie spoÄÃ­va v heuristike, Å¾e ak mÃ¡me odstrÃ¡niÅ¥ jeden vÃ½rok z dvoch moÅ¾nÃ½ch kandidÃ¡tov ïª a ï¹, odstrÃ¡nime ten, ktorÃ½ mÃ¡ menÅ¡iu epistemickÃº vÃ½znamnosÅ¥. RelÃ¡cia epistemickej vÃ½znamnosti mÃ´Å¾e byÅ¥ v rÃ¡mci mnoÅ¾inovÃ©ho formalizmu dostupnÃ½ch svetov definovanÃ¡ podÄ¾a Groveho [9] takto: (9.14) ï¨ ïª ï£ ï¹ ï© ï½def ïª ï ï¹ Pre takto Å¡pecifikovanÃº relÃ¡cie epistemickej vÃ½znamnosti mÃ´Å¾eme dokÃ¡zaÅ¥ podmienky (9.13)."
184,75,0.527,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 2-4. PouÅ¾itie distribuovanÃ½ch objektov v CORBA. ObrÃ¡zok 2-4 znÃ¡zorÅuje jednoduchÃ½ scenÃ¡r pouÅ¾itia CORBA pre zaslanie poÅ¾iadavky klientom na server za pomoci sprostredkovateÄ¾a poÅ¾iadaviek pre objekty (Object Request Broker, ORB). Sluhovia â objekty, ktorÃ© poÅ¾iadavky na serveri spracovÃ¡vajÃº, musia implementovaÅ¥ rozhranie, ktorÃ© je najskÃ´r zadefinovanÃ© pomocou opisnÃ©ho jazyka CORBA IDL (Interface Description Language). Kostra takto zadefinovanÃ©ho objektu je nÃ¡sledne automaticky vygenerovanÃ¡ do cieÄ¾ovÃ©ho jazyka. TÃ¡to kostra obsahuje mechanizmy, ktorÃ© zabezpeÄujÃº komunikÃ¡ciu medzi vzdialenÃ½m sluhom a referenciou objektu, ktorÃ½ ho neskÃ´r zavolÃ¡. ProgramÃ¡tor samozrejme musÃ­ implementovaÅ¥ kÃ³d samotnÃ©ho sluhu, ktorÃ½ sa vykonÃ¡ na serveri. Z pohÄ¾adu pouÅ¾Ã­vateÄ¾a sa takÃ½to vzdialenÃ½ objekt pouÅ¾Ã­va Ãºplne rovnako ako objekt lokÃ¡lny. SpojovacÃ­ softvÃ©r zabezpeÄuje odchytenie volania metÃ³dy, transformÃ¡ciu do formÃ¡tu vhodnÃ©ho na prenos, samotnÃ½ prenos, spracovanie na serveri a spÃ¤tnÃ© zaslanie vÃ½sledku klientovi. VÅ¡etko sa udeje bez toho, aby klientska strana vedela, kde a ako sa samotnÃ¡ poÅ¾iadavka vykonÃ¡. Toto je vÅ¡ak len veÄ¾mi zjednoduÅ¡enÃ½ pohÄ¾ad na problematiku technolÃ³gie distribuovanÃ½ch objektov. Z pohÄ¾adu softvÃ©rovÃ©ho architekta je dÃ´leÅ¾itÃ© si uvedomiÅ¥, akÃ© sÃº zÃ¡kladnÃ© vlastnosti a dÃ´sledky vyuÅ¾itia takÃ©hoto rieÅ¡enia v reÃ¡lnych aplikÃ¡ciÃ¡ch. Â PoÅ¾iadavky na sluhov sÃº volania na vzdialenÃ© objekty a mÃ´Å¾u byÅ¥ pomalÃ© kvÃ´li rÃ½chlostiam transformÃ¡ciÃ­ a prenosu po sieti. Je preto vhodnÃ© takÃ©to volania Äo najviac minimalizovaÅ¥."
59,48,0.527,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Ako ilustraÄnÃ½ prÃ­klad pouÅ¾itia tejto vlastnosti, Å¡tudujme Booleovu funkciu, ktorej funkÄnÃ© hodnoty sÃº zadanÃ© v Tab. 2.2. V tejto tabuÄ¾ke v riadkoch 3, 4 a 6 sÃº jednotkovÃ© funkÄnÃ© hodnoty (Booleova funkcia je pre tieto tri hodnoty premennÃ½ch pravdivÃ¡), v poslednom stÄºpci sÃº uvedenÃ© v tÃ½chto riadkoch aj prÃ­sluÅ¡nÃ© klauzuly zostrojene pomocou (2.9b). PouÅ¾itÃ­m (2.9a) dostaneme âanalytickÃ½â tvar Booleovej funkcie urÄenej len tabuÄ¾kou jej funkÄnÃ½ch hodnÃ´t y ï½ f ï¨ x1 ,x2 ,x3 ï© ï½ ï¨ ïx1 ï x2 ï ïx3 ï© ï ï¨ ïx1 ï x2 ï x3 ï© ï ï¨ x1 ï ïx2 ï x3 ï© (2.10) TÃ¡to Booleova funkcia mÃ´Å¾e byÅ¥ zjednoduÅ¡enÃ¡ tak, Å¾e prvÃ¡ a druhÃ¡ klauzula sa zjednoduÅ¡ia (2.11) ï¨ ïx1 ï x2 ï ïx3 ï© ï ï¨ ïx1 ï x2 ï x3 ï© ï½ ïx1 ï x2 ï ï¨ ïx3 ï x3 ï© ï½ ïx1 ï x2"
196,126,0.527,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Ako formÃ¡tovatâ pÃ­smo v LATEXu cÌo sa tÃ½ka Å¡tÃ½lu (tvaru, hrÃºbky cÌi rezu pÃ­sma, velâkÃ½ch a malÃ½ch pÃ­smen)? Uvedâte, ako formÃ¡tovatâ pÃ­smo v LATEXu cÌo sa tÃ½ka Å¡tÃ½lu (tvaru, hrÃºbky cÌi rezu pÃ­sma, velâkÃ½ch a malÃ½ch pÃ­smen). Medzi tie najznÃ¡mejÅ¡ie treba oznacÌitâ: vzpriamenÃ©, kurzÃ­va, tucÌnÃ© a kapitÃ¡lky."
190,1,0.527,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ten najÄastejÅ¡Ã­ druh systÃ©mov vÅ¡eobecne dnes pouÅ¾Ã­vanÃ½ch, implementovanÃ½ch softvÃ©rom, t.j. informaÄnÃ© systÃ©my, navrhujÃº spravidla technici a beÅ¾ne sa moÅ¾no stretnÃºÅ¥ s ich oznaÄenÃ­m â informaÄnÃ­ inÅ¾inieri. UÅ¾ tento nÃ¡Ärt kontextu tvorby programovÃ½ch a informaÄnÃ½ch systÃ©mov je dostatoÄne zaujÃ­mavÃ½ na to, aby urobil Å¡tÃºdium programovÃ½ch a informaÄnÃ½ch systÃ©mov atraktÃ­vnym. Systematicky sa dajÃº tieto oblasti poznania Å¡tudovaÅ¥ na Ãºrovni vysokoÅ¡kolskÃ©ho magisterskÃ©ho/inÅ¾inierskeho Å¡tÃºdia v Å¡tudijnÃ½ch odboroch softvÃ©rovÃ© inÅ¾inierstvo, pokiaÄ¾ sa zÃ¡ujemca orientuje viac na samotnÃ½ vÃ½voj softvÃ©ru alebo informaÄnÃ© systÃ©my, pokiaÄ¾ sa zÃ¡ujemca viac orientuje na samotnÃ© spracovanie informÃ¡ciÃ­. V Äom je vlastne pri tvorbe takÃ½chto systÃ©mov problÃ©m? ProblÃ©mov je dozaista veÄ¾a, vyzdvihnime jeden. ProgramovÃ© systÃ©my sa povaÅ¾ujÃº za najzloÅ¾itejÅ¡ie vÃ½tvory Ä¾udskÃ©ho ducha. Dnes uÅ¾ je beÅ¾nÃ½ ich rozsah, meranÃ½ veÄ¾mi nahrubo v poÄtoch riadkov textu programu, rÃ¡dovo niekoÄ¾ko desiatok miliÃ³nov riadkov i viac. JedinÃ¡ chyba v desaÅ¥miliÃ³novriadkovom texte ten softvÃ©r mÃ´Å¾e diskvalifikovaÅ¥. Ako zorganizovaÅ¥ a riadiÅ¥ tvorbu takÃ½chto systÃ©mov? Na Fakulte informatiky a informaÄnÃ½ch technolÃ³giÃ­ Slovenskej technickej univerzity v Bratislave Å¡tudujÃº typicky budÃºci softvÃ©rovÃ­ alebo informaÄnÃ­ inÅ¾inieri tak, Å¾e svoj prvÃ½ vysokoÅ¡kolskÃ½ titul (bakalÃ¡r) zÃ­skavajÃº v odbore informatika a potom na druhom stupni vysokoÅ¡kolskÃ©ho Å¡tÃºdia si vyberÃº buÄ odbor softvÃ©rovÃ© inÅ¾inierstvo alebo odbor informaÄnÃ© systÃ©my podÄ¾a toho, na Äo kladÃº viac dÃ´raz. V rÃ¡mci oboch Å¡tudijnÃ½ch programov na druhom stupni vysokoÅ¡kolskÃ©ho Å¡tÃºdia si zapisujÃº predmet ManaÅ¾ment projektov softvÃ©rovÃ½ch a informaÄnÃ½ch systÃ©mov. VÅ¡etci sa musia oboznÃ¡miÅ¥ s princÃ­pmi a postupmi pri organizovanÃ­ a riadenÃ­ vÃ¤ÄÅ¡Ã­ch softvÃ©rovÃ½ch projektov. Na fakulte ich vedieme k tomu, aby ich Äo najdÃ´kladnejÅ¡ie pochopili a vedeli podÄ¾a nich konaÅ¥. VeÄ naÅ¡i Å¡tudenti sÃº budÃºci nie prostÃ­ programÃ¡tori, ale vedÃºci tÃ­mov, ktorÃ© veÄ¾kÃ© programovÃ© alebo informaÄnÃ© systÃ©my navrhujÃº. Ako vedÃºci projektov musia vedieÅ¥, ako svoje tÃ­my viesÅ¥. NaÅ¡i absolventi budÃº vymÃ½Å¡Ä¾aÅ¥ inovatÃ­vne rieÅ¡enia, ktorÃ© budÃº maÅ¥ Å¡ancu obstÃ¡Å¥ v konkurencii podobnÃ½ch rieÅ¡enÃ­. To vÅ¡ak zÄaleka nestaÄÃ­. V rÃ¡mci Å¡tÃºdia si zapisujÃº mnoÅ¾stvo inÃ½ch predmetov. Prirodzene, viacerÃ© z nich sÃº technickej povahy, aby si osvojili Å¡pecifickÃ© metÃ³dy tvorby programovÃ½ch alebo informaÄnÃ½ch systÃ©mov. VyberajÃº si vÅ¡ak aj predmety humanitnÃ©, ekonomickÃ©, prÃ¡vne alebo spoloÄenskovednÃ© a tÃ½m sa ich rozhÄ¾ad vÃ½znamne rozÅ¡iruje. TakÃ½ je teda kontext esejÃ­, ktorÃ© sÃº obsahom tohto zvÃ¤zku. Obsahuje seminÃ¡rne prÃ¡ce Å¡tudentov. NiÄ viac, niÄ menej. SÃº to seminÃ¡rne prÃ¡ce, akÃ© musÃ­ vypracovaÅ¥ kaÅ¾dÃ½ Å¡tudent uvedenÃ½ch dvoch Å¡tudijnÃ½ch odborov v rÃ¡mci predmetu ManaÅ¾ment projektov softvÃ©rovÃ½ch a informaÄnÃ½ch systÃ©mov. PrÃ¡ce sa hodnotia a ako to uÅ¾ bÃ½va, niektorÃ© sÃº lepÅ¡ie a niektorÃ© sÃº hodnotenÃ© ako slabÅ¡ie. A to aj na-"
130,364,0.527,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 7-3: PrÃ­klad organizaÄnej Å¡truktÃºry (hore) a dvoch konkrÃ©tnych organizÃ¡ciÃ­ (dole), ktorÃ© sÃº jej inÅ¡tanciami. Å truktÃºra organizÃ¡cie charakterizuje spÃ´sob, akÃ½m sÃº jednotlivÃ© Äasti organizÃ¡cie poprepÃ¡janÃ©, urÄuje hlavnÃ© Äasti organizÃ¡cie a obmedzuje vzÅ¥ahy medzi nimi. ZÃ¡roveÅ vytvÃ¡ra rÃ¡mec, v ktorom mÃ´Å¾u vznikaÅ¥ konkrÃ©tne organizÃ¡cie ako inÅ¡tancie danej organizaÄnej Å¡truktÃºry. PrÃ­klad organizaÄnej Å¡truktÃºry s dvomi konkrÃ©tnymi organizÃ¡ciami, ktorÃ© sÃº jej inÅ¡tanciou je na obrÃ¡zku 7-3."
393,152,0.527,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Web vÃ½razne zmenil dostupnosÅ¥ elektronickÃ½ch informÃ¡ciÃ­. RastÃºci poÄet dokumentov na internete sÅ¥aÅ¾uje vyhÄ¾adÃ¡vanie, prÃ­stup, prezentÃ¡ciu, sprÃ¡vu informÃ¡ciÃ­, ktorÃ© poÅ¾aduje Å¡irokÃ© spektrom pouÅ¾Ã­vateÄ¾ov. SystÃ©my pre sprÃ¡vu dokumentov majÃº dnes niekoÄ¾ko slabÃ½ch strÃ¡nok: 1. vyhÄ¾adÃ¡vanie informÃ¡ciÃ­ â existujÃºce vyhÄ¾adÃ¡vanie podÄ¾a kÄ¾ÃºÄovÃ½ch slov mÃ´Å¾e vybraÅ¥ nesÃºvisiace informÃ¡cie, ktorÃ© obsahujÃº kÄ¾ÃºÄovÃ© slovÃ¡ v inom vÃ½zname, alebo sa nenÃ¡jdu informÃ¡cie, ktorÃ© patria do hÄ¾adanÃ©ho kontextu, ale neobsahujÃº kÄ¾ÃºÄovÃ© slovÃ¡, 2. pouÅ¾itie informÃ¡ciÃ­ â dnes je potrebnÃ¡ prÃ¡ca Äloveka na to, aby sa z informaÄnÃ½ch zdrojov dali vytiahnuÅ¥ len relevantnÃ© informÃ¡cie a tie pouÅ¾iÅ¥ Äalej, 3. spravovanie veÄ¾kÃ½ch zle Å¡truktÃºrovanÃ½ch textovÃ½ch zdrojov je pracnÃ© a Äasovo nÃ¡roÄnÃ©, 4. automatickÃ© generovanie dokumentov by malo umoÅ¾niÅ¥ adaptÃ­vnosÅ¥ dynamickÃ½ch webovÃ½ch strÃ¡nok. VÃ¤ÄÅ¡ina elektronickÃ½ch informÃ¡ciÃ­ je zle Å¡truktÃºrovanÃ½ch a na rÃ´znych mÃ©diÃ¡ch. Firmy si zvykli na to, Å¾e ich intranety sa stali hodnotnÃ½m ÃºloÅ¾iskom firemnÃ½ch znalostÃ­. ProblÃ©mom je sprÃ¡va tÃ½chto informÃ¡ciÃ­, aby boli pre firmy pouÅ¾iteÄ¾nÃ½mi znalosÅ¥ami. Tim Berners-Lee (Berners-Lee et al., 2002) predstavil vÃ­ziu webu so sÃ©mantikou, ktorÃ½ poskytuje automatizovanÃ½ prÃ­stup k informÃ¡ciÃ¡m zaloÅ¾enÃ½ na strojovo spracovateÄ¾nej sÃ©mantike dÃ¡t a metadÃ¡t. ExplicitnÃ¡ reprezentÃ¡cia dÃ¡t na zÃ¡klade domÃ©novÃ½ch teÃ³riÃ­ (ontolÃ³giÃ­) posunie web do vyÅ¡Å¡ej kvalitatÃ­vnej Ãºrovne. OntolÃ³gie (Fensel, 2001) sÃº kÄ¾ÃºÄovou technolÃ³giou pre web so sÃ©mantikou. Pojem vnikol (v tomto vÃ½zname) v umelej inteligencii. V poslednÃ½ch rokoch sa stali populÃ¡rnou vÃ½skumnou tÃ©mou. DÃ´vod je vo vzÃ¡jomnom a spoloÄnom pochopenÃ­ informaÄnej domÃ©ny medzi Ä¾uÄmi a strojmi."
59,592,0.526,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 12.5. ZnÃ¡zornenie procesu diÅ¡tanÄnÃ©ho uÄenia komplexu agent â doprednÃ½ model, ktorÃ½m sa vytvÃ¡ra model doprednÃ©ho modelu v kognitÃ­vnom orgÃ¡ne agenta. Tento obrÃ¡zok je v podstate prekreslenÃ½ Obr. 12.4b, ktorÃ½ znÃ¡zorÅuje komplex pri âmapovanÃ­â doprednÃ©ho modelu systÃ©mu do kognitÃ­vneho orgÃ¡nu agenta. PouÅ¾itÃ­m tohto âmodelu modeluâ agent je schopnÃ½ rÃ½chlo sa rozhodnÃºÅ¥ (nemusÃ­ sa obracaÅ¥ na aktuÃ¡lny systÃ©m) akÃ½ je poÅ¾adovanÃ½ vÃ½stup yÌt ï«1 ako odozva na vstup zt a st. LomenÃ¡ Äiara reprezentuje âladenieâ (angl. tunning) kognitÃ­vneho orgÃ¡nu agenta (realizovanÃ©ho zmenou parametru w) ."
59,345,0.526,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Z tohoto jednoduchÃ©ho ilustraÄnÃ©ho prÃ­kladu vyplÃ½va, Å¾e v rÃ¡mci holografickej distribuovanej reprezentÃ¡cie mÃ´Å¾eme navrhovaÅ¥ (aspoÅ potenciÃ¡lne) asociatÃ­vne reprezentÃ¡cie typu (6.28), kde asociatÃ­vne ânarÃ¡Å¾kyâ odpovedajÃº ÄÃ­slam. To znamenÃ¡, Å¾e v tomto distribuovanom prÃ­stupe existuje moÅ¾nosÅ¥ asociatÃ­vnej simulÃ¡cie Ä¾ubovoÄ¾nej funkcie, Äo podstatne zvyÅ¡uje moÅ¾nosti metÃ³dy smerom k jej univerzÃ¡lnosti."
205,198,0.526,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy naopak uzol bez preferenciÃ­ sa nazÃ½va izolovanÃ½. Ak mÃ¡ izolovanÃ½ uzol len vzÃ¡jomnÃº preferenciu s hviezdou, nazÃ½va sa Å¡edÃ¡ eminencia. Uzol, do ktorÃ©ho smerujÃº len negatÃ­vne preferencie sa nazÃ½va odmietanÃ½. Uzol, z ktorÃ©ho vychÃ¡dzajÃº preferencie, ale Å¾iadne nesmerujÃº doÅ je zabudnutÃ½. Uzly mÃ´Å¾u maÅ¥ rÃ´zne podoby. NaprÃ­klad ich veÄ¾kosÅ¥ mÃ´Å¾e zÃ¡visieÅ¥ od ich dÃ´leÅ¾itosti v diagrame. Alebo sa mÃ´Å¾u pouÅ¾iÅ¥ rÃ´zne tvary na odlÃ­Å¡enie skupÃ­n uzlov. Moreno vo svojom prvom sociograme pouÅ¾il trojuholnÃ­k na oznaÄenie muÅ¾ov a kruh pre oznaÄenie Å¾ien (pozri obrÃ¡zok 47). V modernÃ½ch vizualizÃ¡ciÃ¡ch sociÃ¡lnych sietÃ­ sa sila preferenciÃ­ Äasto vyjadruje hrÃºbkou hrany medzi uzlami."
184,325,0.526,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 4-9. GlobÃ¡lne unikÃ¡tny mennÃ½ priestor AFS (nezÃ¡vislosÅ¥ lokÃ¡cie). Na sÃºborovÃ½ch serveroch AFS sÃº dÃ¡ta ukladanÃ© na Å¡peciÃ¡lne partÃ­cie â /vicep##, kde ## mÃ´Å¾e nadobÃºdaÅ¥ hodnoty a-zz, Äo umoÅ¾Åuje pouÅ¾itie 256 partÃ­ciÃ­ v rÃ¡mci jednÃ©ho servera. VÅ¡etky tieto partÃ­cie ukladajÃº dÃ¡tovÃ© kontajnery zvanÃ© zvÃ¤zky. ZvÃ¤zky sÃº najmenÅ¡ou entitou, ktorÃ¡ mÃ´Å¾e byÅ¥ presunutÃ¡, replikovanÃ¡ alebo zÃ¡lohovanÃ¡. Tieto zvÃ¤zky obsahujÃº sÃºbory a adresÃ¡re a je nutnÃ© ich pripojiÅ¥ v rÃ¡mci AFS, k tomu, aby boli pouÅ¾iteÄ¾nÃ©. Miesta pripojenia zvÃ¤zkov sÃº reprezentovanÃ© adresÃ¡rmi. AFS je obzvlÃ¡Å¡Å¥ vhodnÃ½ na poskytovanie dÃ¡t, ktorÃ© sÃº len na ÄÃ­tanie, pretoÅ¾e tieto dÃ¡ta mÃ´Å¾u byÅ¥ obsiahnutÃ© v lokÃ¡lnych medzipamÃ¤tiach klientov. K tomu, aby zdieÄ¾anie tÃ½chto dÃ¡t bolo eÅ¡te lepÅ¡ie, AFS umoÅ¾Åuje vytvÃ¡ranie klonov (ktorÃ© sÃº len na ÄÃ­tanie) na jeho rÃ´znych sÃºborovÃ½ch serveroch. TÃ¡to vlastnosÅ¥ je vÃ½hodnÃ¡ hlavne v prÃ­pade, ak sa niektorÃ© uzli poÅ¡kodia, keÄÅ¾e klient mÃ´Å¾e byÅ¥ presmerovanÃ½ na inÃ½ uzol, ktorÃ½ obsahuje identickÃ© dÃ¡ta. Tieto replikaÄnÃ© techniky je vhodnÃ© pouÅ¾iÅ¥ aj v prÃ­pade, ak sÃº jednotlivÃ© sÃºborovÃ© serveri od seba geograficky Äaleko. AFS vyuÅ¾Ã­va na ÃºÄely zÃ¡lohovania snÃ­mkovÃ½ mechanizmus. Tieto snÃ­mky vznikajÃº v prednastavenÃ½ Äas a pracujÃº na Ãºrovniach zvÃ¤zkov. SnÃ­mky mÃ´Å¾u byÅ¥ neskÃ´r pouÅ¾itÃ© na zÃ¡lohu Ãºdajov na zÃ¡loÅ¾nÃ© mÃ©diÃ¡. KomunikaÄnÃ½ protokol AFS je navrhnutÃ½ pre WAN siete. VyuÅ¾Ã­va vlastnÃº implementÃ¡ciu mechanizmu volania vzdialenÃ½ch procedÃºr zvanÃº Rx, ktorÃ¡ pracuje nad protokolom UDP. AFS vyuÅ¾Ã­va na autentifikÃ¡ciu pouÅ¾Ã­vateÄ¾ov mechanizmus Kerberos 4, nie je vÅ¡ak veÄ¾kÃ½ problÃ©m pouÅ¾iÅ¥ ani novÅ¡iu verziu Kerberos 5, ktorÃ¡ zabezpeÄuje eÅ¡te vyÅ¡Å¡iu bezpeÄnosÅ¥. AFS poskytuje zabezpeÄenie adresÃ¡rov prostrednÃ­ctvom ACL (kapitola"
129,8,0.526,Sprievodca licenciami Creative Commons,"ZvyÄajne to upravuje licenÄnÃ¡ zmluva, ktorÃº autor podpisuje s vydavateÄ¾om, a tÃ¡ definuje aj ÄalÅ¡ie prÃ¡va a povinnosti autora i vydavateÄ¾a. Je nevyhnutnÃ©, aby autori o zmluve diskutovali s vydavateÄ¾mi a sami ovplyvnili to, Äi budÃº spokojnÃ­ nielen s tÃ½m, akÃº licenciu udelili, ale aj s jednotlivÃ½mi ustanoveniami zmluvy, ktorÃ© definujÃº, ako mÃ´Å¾u a nemÃ´Å¾u s dielom Äalej nakladaÅ¥. [DoplnenÃ© do slovenskej verzie: ZÃ¡kladnÃ½m prÃ¡vnym predpisom pre oblasÅ¥ autorskÃ©ho prÃ¡va na Slovensku je AutorskÃ½ zÃ¡kon (AZ) â zÃ¡kon Ä. 185/2015 Z. z. v znenÃ­ neskorÅ¡Ã­ch predpisov. NovÃ½ autorskÃ½ zÃ¡kon je v sÃºlade s prÃ¡vom EurÃ³pskej Ãºnie v oblasti autorskÃ©ho prÃ¡va (viac informÃ¡ciÃ­ o zmenÃ¡ch tu: https://www.dusevnevlastnictvo.gov.sk/web/guest/novy-autorsky-zakon, https://www.dusevnevlastnictvo.gov.sk/web/guest/nova-legislativa-eu) AutorskÃ© prÃ¡vo chrÃ¡ni vÃ½sledky tvorivej duÅ¡evnej Äinnosti autorov (fyzickÃ½ch osÃ´b) - diela, ktorÃ© sÃº z umeleckej alebo vedeckej oblasti, ako napr. slovesnÃ© diela, diela vÃ½tvarnÃ©ho umenia, audiovizuÃ¡lne diela, poÄÃ­taÄovÃ© programy, tvorivÃ© databÃ¡zy, atÄ. PrÃ¡vnickÃ¡ osoba nemÃ´Å¾e byÅ¥ autorom, mÃ´Å¾e vÅ¡ak vykonÃ¡vaÅ¥ autorskÃ© prÃ¡va ako odvodenÃ½ subjekt. AutorskÃ© prÃ¡vo patrÃ­ predovÅ¡etkÃ½m autorovi diela (alebo aj dediÄovi, pretoÅ¾e majetkovÃ© prÃ¡va sÃº predmetom dediÄstva). VykonÃ¡vaÅ¥ autorskÃ© prÃ¡va (majetkovÃ© a niektorÃ© osobnostnÃ©) mÃ´Å¾e napr. aj zamestnÃ¡vateÄ¾. AutorskÃ© prÃ¡vo k dielu vznikÃ¡ okamihom, keÄ je dielo objektÃ­vne vyjadrenÃ© v podobe vnÃ­mateÄ¾nej zmyslami (Â§ 16). Vznik autorskÃ©ho prÃ¡va k dielu nie je podmienenÃ½ zverejnenÃ­m ani splnenÃ­m akÃ½chkoÄ¾vek formÃ¡lnych nÃ¡leÅ¾itostÃ­, ako je naprÃ­klad registrÃ¡cia Äi zaradenie do evidencie. Podnet na vytvorenie diela mÃ´Å¾e prÃ­sÅ¥ aj od inej osoby alebo vyplÃ½va priamo z urÄitÃ©ho prÃ¡vneho vzÅ¥ahu autora k inej fyzickej alebo prÃ¡vnickej osobe. AutorskÃ½ zÃ¡kon preto rozliÅ¡uje aj niektorÃ© osobitnÃ© reÅ¾imy, kedy osobitne upravuje vÃ½kon prÃ¡v k dielu. Ide o: â¢ zamestnaneckÃ© dielo (Â§ 90) â¢ dielo na objednÃ¡vku (Â§ 91) â¢ spoloÄnÃ© dielo (Â§ 92) â¢ Å¡kolskÃ© dielo (Â§ 93)"
76,18,0.526,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ZakonÄime prÃ­klad 1.1.3. Uvedomili sme si, Å¾e v Åom nie je moÅ¾nÃ© modelovaÅ¥ pravdepodobnosÅ¥ Å¡pekulatÃ­vnou metÃ³dou. V skutoÄnosti neznÃ¡me pravdepodobnosti vÃ½sledkov b, m, Ä mÃ´Å¾eme len odhadnÃºÅ¥. Ak relatÃ­vnymi poÄetnosÅ¥ami odhadneme , , (pritom tak, aby platilo: = 1), potom (vÄaka aditivite) vieme stanoviÅ¥ pravdepodobnosÅ¥ akejkoÄ¾vek udalosti. PravdepodobnostnÃº Å¡truktÃºru nÃ¡Å¡ho priestoru popisuje tabuÄ¾ka"
41,11,0.526,InformaÄnÃ© vzdelÃ¡vanie,"3. NedokumentÃ¡rne zdroje NedokumentÃ¡rne informaÄnÃ© zdroje tvoria podstatnÃº ÄasÅ¥ komunikÃ¡cie najmÃ¤ v oblasti vedy a techniky. Å tÃºdie rÃ´znych pouÅ¾Ã­vateÄ¾ov stÃ¡le ÄastejÅ¡ie zdÃ´razÅujÃº vÃ½znam tÃ½chto zdrojov, ktorÃ© poskytujÃº informÃ¡cie, ktorÃ© inak nie sÃº dostupnÃ©. AktuÃ¡lne mÃ´Å¾eme nedokumentÃ¡rne informaÄnÃ© zdroje rozdeliÅ¥ na: 1. FormÃ¡lne zdroje: - VÃ½skumnÃ¡ organizÃ¡cia - ZdruÅ¾enia -Priemysel -VlÃ¡da/MinisterstvÃ¡ -Univerzity -Konzultanti 2. NeformÃ¡lne zdroje: - KomunikÃ¡cia s vysokÃ½mi Å¡kolami - ÃÄasÅ¥ na odbornÃ½ch stretnutiach - PracovnÃ© stretnutia"
59,477,0.526,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"V literatÃºre sa pouÅ¾Ã­va Å¥aÅ¾ko preloÅ¾iteÄ¾nÃ½ angl. termÃ­n âepistemic entrenchmentâ, Äo v prenesenom zmysle slova mÃ´Å¾e byÅ¥ preloÅ¾enÃ© ako âepistemickÃ¡ pevnosÅ¥ â nedobytnosÅ¥â. Z tÃ½chto dÃ´vodov pouÅ¾Ã­vame novÃ½ termÃ­n âepistemickÃ¡ vÃ½znamnosÅ¥â, ktorÃ½ pomerne presne vystihuje zmysel a vÃ½znam pÃ´vodnÃ©ho anglickÃ©ho termÃ­nu. Poznamenajme, Å¾e prÃ­stup âepistemickej vÃ½znamnostiâ mÃ´Å¾eme chÃ¡paÅ¥ ako prejav naÅ¡ej racionÃ¡lnosti k vÅ¡eobecnÃ©mu problÃ©mu revÃ­zie poznatkov mimologickÃ½mi prostriedkami."
43,172,0.526,Objektovo orientovanÃ© programovanie v C++,"Äo sa deje, ak poÅ¡leme premennÃº a do funkcie NaDruhu takÃ½mto spÃ´sobom? TakÃ©to odovzdÃ¡vanie argumentu sa nazÃ½va odovzdÃ¡vanie hodnotou, keÄÅ¾e do funkcie posielame hodnotu ÄÃ­sla a. V pozadÃ­ sa pritom deje nieÄo, Äo si programÃ¡tor nemusÃ­ uvedomiÅ¥. Funkcia NaDruhu skutoÄne potrebuje len hodnotu premennej a a niÄ viac. Je preto bezpeÄnejÅ¡ie, ak jej ani niÄ viac neposkytneme. V skutoÄnosti funkcia vÃ´bec nezÃ­ska k premennej a prÃ­stup, ale v pamÃ¤ti sa vytvorÃ­ kÃ³pia premennej s rovnakou hodnotou. Funkcia dostane k dispozÃ­cii tÃºto kÃ³piu a s Åou mÃ´Å¾e vykonÃ¡vaÅ¥ vÅ¡etky svoje prÃ­kazy. ÄokoÄ¾vek by sa vnÃºtri funkcie dialo, pÃ´vodnej premennej a sa to nijako nedotkne. VÅ¡etky operÃ¡cie, ktorÃ© potrebujÃº hodnotu a, vÅ¡ak prebehnÃº sprÃ¡vne. TÃ¡to procedÃºra je znÃ¡zornenÃ¡ na obr. 4.6."
59,421,0.526,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"a ï ï¡ . Potom rozÅ¡Ã­renie podpory ï o negÃ¡ciu ïï¡ mÃ¡ za dÃ´sledok, Å¾e pÃ´vodne konzistentnÃ¡ mnoÅ¾ina sa stÃ¡va nekonzistentnou, ï ï ï»ïï¡ï½ ï . (2ï). Predpokladajme, Å¾e rozÅ¡Ã­renÃ¡ podpora ï ï ï»ïï¡ï½ je minimÃ¡lne nekonzistentnÃ¡, ak napr. odstrÃ¡nime z nej formulu ïï¡, potom podpora ï je uÅ¾ konzistentnÃ¡. TaktieÅ¾, musÃ­ platiÅ¥ ï ï¡ , lebo len v tomto prÃ­pade je ï ï ï»ïï¡ï½ nekonzistentnÃ¡. DefinÃ­cia 8.3. Argumenty ï¨ ï ,ï¡ ï© a ï¨ ï ,ï¢ ï© sÃº ekvivalentnÃ© vtedy a len vtedy, ak mnoÅ¾iny ï a ï sÃº rovnÃ© a formuly ï¡ a ï¢ sÃº ekvivalentnÃ©. Veta 8.2. Argumenty ï¨ ï ,ï¡ ï© a ï¨ ï ,ï¢ ï© sÃº ekvivalentnÃ© ï¨ A ï¾ Aï¢ ï© vtedy a len vtedy, ak argument"
43,130,0.526,Objektovo orientovanÃ© programovanie v C++,"Pri riadenÃ­ vÃ½stupu je Äasto dÃ´leÅ¾itÃ©, aby vÃ½stup mal nejakÃº konkrÃ©tnu formu, napr. aby sa ÄÃ­sla vypisovali na urÄitÃ½ poÄet desatinnÃ½ch miest alebo v nejakom Å¡peciÃ¡lnom tvare, alebo aby vÃ½stup bol nejakÃ½m spÃ´sobom zarovnanÃ½. Å tandardnou sÃºÄasÅ¥ou C++ sÃº teda aj prostriedky, ktorÃ© takÃ©to formÃ¡tovanie umoÅ¾ÅujÃº. ZÃ¡kladnÃ© metÃ³dy, pomocou ktorÃ½ch mÃ´Å¾eme formÃ¡tovaÅ¥, sÃº deï¬novanÃ© uÅ¾ v triede ios base, ktorÃ¡ je predchodcom vÅ¡etkÃ½ch ostatnÃ½ch tried reprezentujÃºcich streamy. Ide o metÃ³dy precision a width. streamsize precision(streamsize prec); streamsize width(streamsize wide);"
135,485,0.526,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"VrstvenÃ© grafy sÃº Å¡peciÃ¡lnym typom k-partitnÃ½ch grafov, pre ktorÃ© je moÅ¾nÃ© vytvoritâ viac vrstiev, pricÌom existujÃº iba hrany medzi vrcholmi v jednej vrstve, hrany medzi dvoma vrstvami a zÃ¡rovenÌ ak existuje hrana z vrstvy a do vrstvy b a z vrstvy b do vrstvy c, tak neexistuje Å¾iadna hrana z vrstvy a do c. TakÃ©to grafy sÃº vÃ¤cÌÅ¡inou konÅ¡truovanÃ© tak, Å¾e kaÅ¾dÃ¡ vrstva vÃ¤cÌÅ¡inou reprezentuje ten istÃ½ graf, kde v kaÅ¾dej vrstve sÃº hrany len vybranÃ©ho typu."
135,57,0.525,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.3.2 Vzor Obaova v rÃ´znych kontextoch Pozrime sa teraz na to, ako sa myÅ¡lienka vzoru Obaova vyskytuje vo vybranÃ½ch publikÃ¡ciÃ¡ch venovanÃ½ch softvÃ©rovÃ½m vzorom. V (Gamma, 1995) je opÃ­sanÃ© pouÅ¾itie tohto vzoru v kontexte objektovo orientovanej paradigme vÃ½voja softvÃ©ru. Na ilustrÃ¡ciu uveme prÃ­klad prevzatÃ½ z tejto publikÃ¡cie, mierne upravenÃ½: Predstavme si, Å¾e vytvÃ¡rame grafickÃ½ editor. Jeho kÃºovou abstrakciou je grafickÃ½ objekt, pre ktorÃ½ definujeme rozhranie GrafickyObjekt. Toto rozhranie je implementovanÃ© rÃ´znymi triedami: Ciara, Polygon, Kruznica a alÅ¡Ã­mi, slÃºÅ¾iacimi na vykreslenie a editÃ¡ciu iar, mnohouholnÃ­kov, kruÅ¾nÃ­c a inÃ½ch objektov. alÅ¡Ã­m grafickÃ½m objektom, ktorÃ½ chceme ma moÅ¾nos editova, je text. Funknos tÃ½kajÃºca sa editÃ¡cie textu je typicky implementovanÃ¡ priamo v pouÅ¾Ã­vanej grafickej kniÅ¾nici â v naÅ¡om prÃ­pade nech na tento Ãºel slÃºÅ¾i trieda TextView. IdeÃ¡lne by bolo, keby sme existujÃºcu triedu TextView mohli v grafickom editore priamo pouÅ¾i, avÅ¡ak z pochopitenÃ½ch dÃ´vodov toto nie je moÅ¾nÃ©. TotiÅ¾to napriek tomu, Å¾e poskytuje potrebnÃº funknos, mÃ¡ inÃ© rozhranie â naprÃ­klad na zistenie hranice poskytuje metÃ³du GetExtent(), kÃ½m GrafickyObjekt na tento Ãºel predpisuje metÃ³du Hranica() (obrÃ¡zok 1-8). Aby sme TextView mohli pouÅ¾i, vytvorÃ­me adaptÃ©r: triedu Text poskytujÃºcu rozhranie GrafickyObjekt, vyuÅ¾Ã­vajÃºcu pritom triedu TextView."
76,241,0.525,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"VlastnosÅ¥ strednej hodnoty z bodu 1 vety 4.2.3 a vlastnosti variancie z bodov 4 a 5 vety 4.2.5 majÃº prirodzenÃ© zovÅ¡eobecnenie pre koneÄne veÄ¾a nÃ¡hodnÃ½ch veliÄÃ­n. V nasledujÃºcej vete sa venujeme prÃ­padu, v ktorom uvaÅ¾ovanÃ© veliÄiny sÃº nezÃ¡vislÃ©, pretoÅ¾e prÃ¡ve takÃ¡ situÃ¡cia bude v ÄalÅ¡Ã­ch kapitolÃ¡ch najÄastejÅ¡ia. 4.2.9 Veta. Ak"
41,111,0.525,InformaÄnÃ© vzdelÃ¡vanie,"UniverzitnÃ¡ kniÅ¾nica v Bratislave a vedeckÃ© kniÅ¾nice UniverzitnÃ¡ kniÅ¾nica v Bratislave (UKB) je najstarÅ¡ia a najvÃ¤ÄÅ¡ia vedeckÃ¡ kniÅ¾nica v Slovenskej republike. Vznikla v roku 1919 ako KniÅ¾nica Univerzity KomenskÃ©ho. SÃºbeÅ¾ne so svojÃ­m akademickÃ½m poslanÃ­m plnila do roku 1954 funkciu nÃ¡rodnej kniÅ¾nice. UÅ¾ v roku svojho vzniku zÃ­skala prÃ¡vo na povinnÃ½ vÃ½tlaÄok knÃ­h a periodÃ­k z Ãºzemia Slovenska. Od roku 1954 je samostatnou vedeckou kniÅ¾nicou slÃºÅ¾iacou Å¡irokej verejnosti. Ponechala si vÅ¡ak nÃ¡zov UniverzitnÃ¡ kniÅ¾nica, pretoÅ¾e vyjadruje jej histÃ³riu, Å¡irokÃº profilÃ¡ciu fondu i pouÅ¾Ã­vateÄ¾skÃ©ho zÃ¡zemia; pod tÃ½mto nÃ¡zvom sa stala znÃ¡mou v zahraniÄÃ­. Z klasickej kniÅ¾nice sa postupne pretvorila na modernÃº kniÅ¾niÄno-informaÄnÃº inÅ¡titÃºciu. Koncom roka 2013 fond UKB obsahoval v sÃºhrne 2,65 mil. kniÅ¾niÄnÃ½ch jednotiek. ObsahovÃº a typologickÃº skladbu kniÅ¾niÄnÃ©ho fondu vytvÃ¡rajÃº tieto zloÅ¾ky: SlovenskÃ¡ literatÃºra - V relatÃ­vnej Ãºplnosti je zastÃºpenÃ¡ novÅ¡ia literatÃºra a tlaÄ zÃ­skavanÃ¡ v rÃ¡mci povinnÃ©ho vÃ½tlaÄku. UnikÃ¡tna je najmÃ¤ produkcia z obdobia 1919/1920-39, kedy kniÅ¾nica dostÃ¡vala povinnÃ½ vÃ½tlaÄok ako jedinÃ¡ na Slovensku. Z domÃ¡cej i zahraniÄnej slovenskej literatÃºry a tlaÄe sa od roku 1920 buduje konzervaÄnÃ½ fond. ZahraniÄnÃ¡ literatÃºra - V sÃºÄasnosti ho tvorÃ­ literatÃºra z odborov spoloÄenskÃ½ch vied v Å¡irokom chÃ¡panÃ­, prÃ­rodnÃ½ch vied, ich hraniÄnÃ½ch a prienikovÃ½ch disciplÃ­n a dokumenty univerzÃ¡lneho charakteru s osobitÃ½m zreteÄ¾om na sekundÃ¡rne informaÄnÃ© pramene. NadobÃºda sa literatÃºra vo svetovÃ½ch jazykoch, v slovanskÃ½ch jazykoch a ÄalÅ¡Ã­ch eurÃ³pskych jazykoch. Zo sÃºÄasnÃ©ho roÄnÃ©ho prÃ­rastku fondu (30 tis. kn. j.) zahraniÄnÃ¡ literatÃºra tvorÃ­ okolo 35%. Popri klasickÃ½ch tlaÄenÃ½ch"
205,118,0.525,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","ÄalÅ¡ou moÅ¾nosÅ¥ou, ako podporiÅ¥ vyhÄ¾adÃ¡vanie, je pomocou identifikÃ¡cie virtuÃ¡lnych komunÃ­t a ich zÃ¡ujmov, Äo je predmetom vÃ½skumu sociÃ¡lneho vyhÄ¾adÃ¡vania [5]. SilnejÅ¡ie ako sociÃ¡lne vÃ¤zby sÃº vÃ¤zby, ktorÃ© vznikajÃº pri spoluprÃ¡ci (kolaborÃ¡cii) pouÅ¾Ã­vateÄ¾ov. Shah [18] definuje"
59,580,0.525,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ZloÅ¾itÃ½ systÃ©m je Å¡pecifikovanÃ½ vstupom, vÃ½stupom a vnÃºtornÃ½m stavom. Agent prostrednÃ­ctvom svojich orgÃ¡nov vnÃ­mania rozpoznÃ¡va aktuÃ¡lny stav systÃ©mu a taktieÅ¾ mÃ´Å¾e priamo ovplyvÅovaÅ¥ vstup systÃ©mu. CieÄ¾om riadenia systÃ©mu (t. j. Ãºloha pre agenta) je pre danÃ© vnÃºtornÃ© stavy systÃ©mu meniÅ¥ vstup systÃ©mu tak, aby boli dosiahnutÃ© poÅ¾adovanÃ© hodnoty vÃ½stupu (pozri Obr. 12.1)."
135,33,0.525,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â najviac jednou inÅ¡tanciou svojej triedy, â globÃ¡lnym bodom prÃ­stupu k inÅ¡tancii. 1.1.2 Å truktÃºra UnikÃ¡t je nÃ¡vrhovÃ½ vzor, ktorÃ½ dÃ¡va poÅ¾adovanÃ©, pre charakteristickÃ© vlastnosti, konkrÃ©tnej triede, preto Å¡trukturÃ¡lne neovplyvuje a nezah a v sebe inÃ© triedy, ale aplikuje sa iba na Å¾elanÃº triedu (resp. viacerÃ© Å¾elanÃ© triedy v aplikÃ¡cii)."
236,181,0.525,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"alebo zaÄiatok riadku, pouÅ¾ite prÃ­kaz \hspace* namiesto \hspace. V najjednoduchÅ¡Ã­ch prÃ­padoch je dÄºÅ¾ka len ÄÃ­slo a jednotka. NajdÃ´leÅ¾itejÅ¡ie jednotky sÃº uvedenÃ© v tabuÄ¾ke 5.4. TÃ¡to\hspace{1.5cm}medzera mÃ¡ 1.5 cm."
393,36,0.524,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Postupnosti Postupnosti sÃº jednoduchÃ½m a Äasto pouÅ¾Ã­vanÃ½m spÃ´sobom (Laird & Rosenbloom, 1996) ako spÃ¡jaÅ¥ elementy. V rÃ¡mci BOD obsahuje POSH vÃ½ber akciÃ­ dva druhy vÃ½beru akciÃ­: vykonÃ¡vanÃ© postupnosti, ktorÃ© veÄ¾mi rÃ½chlo vykonajÃº vÅ¡etky svoje elementy v rÃ¡mci jednÃ©ho cyklu a akÄnÃ© vzory, ktorÃ© umoÅ¾ÅujÃº kontrolu kontextu a zmenu priorÃ­t medzi jednotlivÃ½mi elementmi. Ak jeden z elementov zlyhÃ¡, oba druhy postupnostÃ­ sÃº preruÅ¡enÃ©. DAML-S obsahuje postupnosti, ale neurÄuje, Äi sa dajÃº postupnosti preruÅ¡ovaÅ¥. TaktieÅ¾ umoÅ¾Åuje, aby elementy postupnosti mali podprocesy, takÅ¾e sa pomocou DAML-S postupnostÃ­ dajÃº reprezentovaÅ¥ iba akÄnÃ© vzory a nie rÃ½chlo vykonÃ¡vanÃ© postupnosti. ZÃ¡kladnÃ© reaktÃ­vne plÃ¡ny V dynamickÃ½ch prostrediach je vÃ½ber akciÃ­ veÄ¾akrÃ¡t prÃ­liÅ¡ zloÅ¾itÃ½, aby sa dal reprezentovaÅ¥ pomocou postupnostÃ­. V tÃ½ch prÃ­padoch sa dajÃº pouÅ¾iÅ¥ zÃ¡kladnÃ© reaktÃ­vne plÃ¡ny (BRP), ktorÃ© majÃº vÃ¤ÄÅ¡ie vyjadrovacie moÅ¾nosti. DAML-S v sÃºÄasnosti neposkytuje moÅ¾nosÅ¥ priamo vyjadriÅ¥ BRP, dajÃº sa vyjadriÅ¥ iba nepriamo pomocou While konÅ¡trukcie a vnorenÃ½ch If-Then vetvenÃ­. VzhÄ¾adom na vÃ½hodnosÅ¥ BRP by bolo dobrÃ©, keby sa dali priamo vyjadriÅ¥ v DAML-S."
240,328,0.524,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"ÄalÅ¡ie zÃ¡kladnÃ© funkcie na prÃ¡cu s dlhÃ½mi ÄÃ­slami v tejto reprezentÃ¡cii prebiehajÃº v cykle po cifrÃ¡ch zauÅ¾Ã­vanÃ½m spÃ´sobom. Ãloha 4-21 DanÃ© sÃº nezÃ¡pornÃ© dlhÃ© ÄÃ­sla a a b reprezentovanÃ© v poli znakov konÅ¡tantnej dÄºÅ¾ky ako cifry v desiatkovej sÃºstave od najniÅ¾Å¡ieho rÃ¡du. DoplÅte chÃ½bajÃºce Äasti funkcie pripocitaj(), ktorÃ¡ k dlhÃ©mu ÄÃ­slu a pripoÄÃ­ta hodnotu dlhÃ©ho ÄÃ­sla b. Napr. pre a = {4,2,0,1} (ÄÃ­slo 1 024) a b = {9,9,9,9} (ÄÃ­slo 9 999) bude po vykonanÃ­ funkcie pripocitaj(a,b) upravenÃ¡ hodnota a = {3,2,0,1,1} (ÄÃ­slo 11 023)."
111,100,0.524,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Ako sa vyrovnaÅ¥ s ânonresponse biasâ? â¢ ZvÃ½Å¡te mieru odpovedÃ­. Venujte patriÄnÃ© Ãºsilie dobre navrhnÃºÅ¥ dotaznÃ­k. KratÅ¡ie a jasne formulovanÃ© dotaznÃ­ky majÃº vÃ¤ÄÅ¡iu Å¡ancu, Å¾e ich Ä¾udia vyplnia. Vyhnite sa citlivÃ½m otÃ¡zkam, ktorÃ© by mohli respondentov odradiÅ¥ od odpovedania. â¢ SnaÅ¾te sa vybraÅ¥ vzorku, ktorÃ¡ je Äo najreprezentatÃ­vnejÅ¡ia pre celÃº populÃ¡ciu. PonÃºknite ÃºÄastnÃ­kom nejakÃº odmenu, napr. moÅ¾nosÅ¥ zÃ­skaÅ¥ kupÃ³n. Personalizujte oslovenie respondentov a zdÃ´raznite dÃ´leÅ¾itosÅ¥ ich odpovedÃ­. UbezpeÄte respondentov o anonymite ich odpovedÃ­. PonÃºknite rÃ´zne moÅ¾nosti vyplnenia dotaznÃ­ka, napr. cez mobil aj stolnÃ½ poÄÃ­taÄ. â¢ Niekedy mÃ´Å¾e byÅ¥ vhodnejÅ¡ia inÃ¡ metÃ³da vÃ½skumu, napr. rozhovor alebo pozorovanie. Ak viete, Å¾e chcete z nejakÃ©ho dÃ´vodu vylÃºÄiÅ¥ skupinu respondentov, mÃ´Å¾ete nastaviÅ¥ kontrolnÃº otÃ¡zku (angl. screening question). TÃ¡to otÃ¡zka sa zobrazÃ­ ako prvÃ¡ otÃ¡zka v Å¡tÃºdii a vÅ¡etci respondenti, ktorÃ­ odpovedia moÅ¾nosÅ¥ou, ktorÃº ste oznaÄili na vylÃºÄenie, budÃº automaticky vylÃºÄenÃ­. OtÃ¡zka mÃ´Å¾e byÅ¥ aj komplexnejÅ¡ia, miesto jednej moÅ¾nosti na vylÃºÄenie mÃ´Å¾ete zvoliÅ¥ viacerÃ© moÅ¾nosti, prÃ­p. pridaÅ¥ viackrokovÃ©/podmienenÃ© vylÃºÄenie zo Å¡tÃºdie. DotaznÃ­ky sÃº najrozÅ¡Ã­renejÅ¡Ã­ nÃ¡stroj na zÃ­skavanie spÃ¤tnej vÃ¤zby. V obehu je veÄ¾a prieskumov a Ä¾udia nemusia maÅ¥ veÄ¾kÃº motivÃ¡ciu zÃºÄastniÅ¥ sa prÃ¡ve na tom vaÅ¡om. Preto mÃ´Å¾e byÅ¥ naozaj dobrÃ© pouÅ¾iÅ¥ nejakÃº motivÃ¡ciu. PonÃºknite kupÃ³n alebo bezplatnÃº skÃºÅ¡obnÃº verziu, darÄekovÃº kartu alebo skorÅ¡Ã­ prÃ­stup (k sluÅ¾be, funkcii) tÃ½m, ktorÃ­ sa zÃºÄastnia. Majte vÅ¡ak na pamÃ¤ti, Å¾e aj to mÃ´Å¾e do vaÅ¡ich Ãºdajov vniesÅ¥ skreslenie. NiektorÃ­ Ä¾udia sa mÃ´Å¾u prieskumu zÃºÄastniÅ¥ len preto, aby zÃ­skali odmenu a odpovediam nebudÃº venovaÅ¥ veÄ¾kÃº pozornosÅ¥. InÃ­ mÃ´Å¾u maÅ¥ tendenciu odpovedaÅ¥ pozitÃ­vnejÅ¡ie. V prÃ­pade, ak robÃ­te zmeny na svojej webovej strÃ¡nke (produkte Äi sluÅ¾be), mÃ´Å¾e byÅ¥ uÅ¾itoÄnÃ© zbieraÅ¥ Ãºdaje z dotaznÃ­ka poÄas dlhÅ¡ieho ÄasovÃ©ho obdobia a zistiÅ¥, ako sa odpovede menia so zmenami vaÅ¡ej webovej strÃ¡nky."
115,43,0.524,Algebra a diskrÃ©tna  matematika,"Pre prvÃº formulu existuje interpretÃ¡cia premennÃ½ch Ï = (p/0, q/0), pre ktorÃº mÃ¡ prvÃ¡ formula (1.7a) pravdivostnÃº hodnotu Â´0Â´. TÃ¡to interpretÃ¡cia mÃ´Å¾e byÅ¥ pouÅ¾itÃ¡ aj pre druhÃº formulu (1.7b) aby sme ukÃ¡zali, Å¾e formula mÃ¡ pravdivostnÃº hodnotu Â´0Â´. To znamenÃ¡, Å¾e obe formuly (1.7a-b) nie sÃº tautolÃ³gie, ÄiÅ¾e nemÃ´Å¾u byÅ¥ zÃ¡konmi vÃ½rokovej logiky. Ako svedÄia mnohÃ© kognitÃ­vno-psychologickÃ© vÃ½skumy, obe tieto schÃ©my, aj keÄ sÃº chybnÃ©, Äasto sa vyuÅ¾Ã­vajÃº v beÅ¾nom usudzovanÃ­, moÅ¾no ich teda pokladaÅ¥ za âklasickÃ© chybyâ nÃ¡Å¡ho kaÅ¾dodennÃ©ho uvaÅ¾ovania."
343,75,0.524,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"Ak by aj narazili na limity Å¡kÃ¡lovateÄ¾nosti a nejakÃ½m spÃ´sobom by uÅ¾ nemohli zvÃ½Å¡iÅ¥ vÃ½konnosÅ¥ blockchainu, vÅ¾dy vÄaka tomuto mÃ´Å¾u spustiÅ¥ novÃ½. Z pohÄ¾adu pouÅ¾Ã­vateÄ¾a to nemusÃ­ byÅ¥ ani viditeÄ¾nÃ© v aplikÃ¡cii, pretoÅ¾e nemusÃ­ vidieÅ¥, Äi robÃ­ transakcie na Mangate 1 alebo Mangate 2. Mangata ale okrem toho vyuÅ¾Ã­va eÅ¡te aj rollupovÃº architektÃºru, ktorÃ¡ bola opisovanÃ¡ v kapitole o Å¡kÃ¡lovateÄ¾nosti. TÃ¡ umoÅ¾Åuje exponenciÃ¡lny rast a v podstate premenÃ­ blockchain na fraktÃ¡lovÃº Å¡truktÃºru. KeÄ jedna z vrstiev (L1, L2, L3) uÅ¾ nebude maÅ¥ dostatok zdrojov na"
59,613,0.524,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"V kapitole 2.3 bolo Å¡tudovanÃ© abstraktnÃ© vÃ½poÄtovÃ© zariadenie nazÃ½vanÃ© koneÄnostavovÃ½ stroj (alebo Mealyho automat), ktorÃ© mÃ´Å¾e modelovaÅ¥ doprednÃ½ systÃ©m z Obr. 12.12. Podobne ako v tomto prÃ­pade, aj teraz mÃ´Å¾eme transformÃ¡ciu (st,yt) ï® (st+1,yt+1) vyjadriÅ¥ pomocou dvoch prechodovÃ½ch funkciÃ­ st ï«1 ï½ f ï¨ at ,st ï© (12.11a)"
393,229,0.524,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"HITS algoritmus (Hyper-Link-Induced Topic Search) WebovÃ© strÃ¡nky sÃº dvojakÃ© (Kleinberg, 2000): 1. autority (autorskÃ© zdroje), 2. rozvetvenia (zoznamy odkazov na zdroje). VzÅ¥ahy medzi strÃ¡nkami oboch druhov sÃº vzÃ¡jomne podporujÃºce sa. HITS algoritmus formalizuje intuÃ­ciu dobrÃ½ch vzÅ¥ahov medzi oboma druhmi strÃ¡nok do iteratÃ­vneho vÃ½poÄtu: 1. fÃ¡za vzorkovania â vytvorÃ­ sa koreÅovÃ½ zoznam strÃ¡nok podÄ¾a textovÃ©ho vyhÄ¾adÃ¡vania, ten sa rozÅ¡Ã­ri do zÃ¡kladnÃ©ho zoznamu o strÃ¡nky dosiahnuteÄ¾nÃ© priamo cez hypertextovÃ© odkazy z koreÅovÃ©ho zoznamu strÃ¡nok, 2. fÃ¡za rozposielania ohodnotenia â rozÅ¡iruje zoznam pomocou hypertextovÃ½ch odkazov, vytvorÃ­ sa strom (indukovanÃ½ podgraf) zo zÃ¡kladnÃ©ho, pre kaÅ¾dÃº vetvu sa poÄÃ­ta ohodnotenie (vÃ¡ha relevancie) pomocou pravidla prepoÄtu:"
76,190,0.524,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ä½ahko sa overÃ­, Å¾e kÃ½m zloÅ¾ky vektora ( ) sÃº nezÃ¡vislÃ©, zloÅ¾ky vektora ( ) sÃº zÃ¡vislÃ©. A teraz situÃ¡ciu, ktorÃ¡ ilustruje druhÃº polohu. MÃ¡me danÃ© jednorozmernÃ© tabuÄ¾ky, ktorÃ© predstavujÃº rozdelenia zloÅ¾iek vektora ( ), o ktorom vieme, Å¾e jeho zloÅ¾ky , sÃº nezÃ¡vislÃ© veliÄiny. NÃ¡jdite dvojrozmernÃº tabuÄ¾ku, ktorÃ¡ predstavuje rozdelenie vektora ("
66,90,0.524,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"3.11 Window Functions Å tandardnÃ© vyuÅ¾itie agregaÄnÃ½ch funkciÃ­ vyrÃ¡ta vÃ½sledok pre urÄitÃº skupinu (mnoÅ¾ina zÃ¡znamov) dÃ¡t definovanÃ½ch v rÃ¡mci klauzuly GROUP BY. VÃ½sledok je v podobe jednÃ©ho zÃ¡znamu pre danÃº mnoÅ¾inu zÃ¡znamov, ÄÃ­m dochÃ¡dza k strate informÃ¡ciÃ­ o jednotlivÃ½ch zÃ¡znamoch. TakÃ©to sprÃ¡vanie je postaÄujÃºce pre veÄ¾kÃ© mnoÅ¾stvo scenÃ¡rov, no v niektorÃ½ch prÃ­padoch nie je postaÄujÃºce alebo je mÃ¡lo efektÃ­vne. Aby sme neprichÃ¡dzali o informÃ¡cie o jednotlivÃ½ch zÃ¡znamoch a vedeli presnejÅ¡ie definovaÅ¥ mnoÅ¾inu zÃ¡znamov, nad ktorou majÃº byÅ¥ aplikovanÃ© vÃ½poÄty, tak vznikli window functions (WF). Window functions umoÅ¾ÅujÃº aplikovanie agregaÄnÃ½ch funkciÃ­ alebo Å¡peciÃ¡lnych funkciÃ­ viazanÃ½ch vÃ½luÄne na WF, tak Å¾e vÃ½sledok vÃ½poÄtu je uvedenÃ½ pre kaÅ¾dÃ½ zÃ¡znam. VÅ¡eobecnÃ¡ syntax vyzerÃ¡ nasledovne: SELECT"
115,18,0.524,Algebra a diskrÃ©tna  matematika,"MetÃ³dy dÃ´kazu diskutovanÃ© v tejto kapitole sÃº dÃ´leÅ¾itÃ© nielen pre tvorbu korektnÃ½ch dÃ´kazov matematickÃ½ch viet v matematike, ale aj v samotnej informatike. V teoretickej informatike sa napr. Å¡tudujÃº rÃ´zne metÃ³dy verifikÃ¡cie korektnosti programu, alebo Äi operaÄnÃ½ systÃ©m je bezpeÄnÃ½. V umelej inteligencii pri odvodzovanÃ­ novÃ½ch faktov z danej databÃ¡zy poznatkov (mnoÅ¾iny vÃ½rokovÃ½ch formÃºl, ktorÃ¡ sa vo vÃ½rokovej logike nazÃ½va teÃ³ria) je dÃ´leÅ¾itÃ© maÅ¥ zabezpeÄenÃ©, aby danÃ¡ databÃ¡za bola konzistentnÃ¡ (korektnÃ¡), teda aby z nej sÃºÄasne nevyplÃ½val nejakÃ½ vÃ½rok a taktieÅ¾ aj jeho negÃ¡cia. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e zvlÃ¡dnutie metÃ³d matematickÃ©ho dÃ´kazu je dÃ´leÅ¾itÃ© nielen v matematike, ale aj v informatike."
111,74,0.523,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 4.4: NÃ­zke skÃ³re Ãlohy 1 je okamÅ¾itÃ½m znakom toho, Å¾e tÃ¡to Ãºloha dopadla zle. DobrÃ© vÃ½slednÃ© skÃ³re, na ktorÃ© sa treba zameraÅ¥, je v rozmedzÃ­ od 8 do 10. Pri pohÄ¾ade na kolÃ¡ÄovÃ½ graf a tabuÄ¾ku vÃ½sledkov je vidieÅ¥, Å¾e vÃ¤ÄÅ¡ina respondentov nominovala nesprÃ¡vnu odpoveÄ a uspel len malÃ½ zlomok Ä¾udÃ­."
66,179,0.523,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"V ÄalÅ¡om prÃ­klade uvedenom v TabuÄ¾ka 13 si ukÃ¡Å¾eme, v akom prÃ­pade nÃ¡m nastavenÃ¡ ÃºroveÅ izolÃ¡cie repeatable read nepomÃ´Å¾e a dÃ´jde k poruÅ¡eniu sÃ©riovateÄ¾nosti. V tomto prÃ­klade majÃº obidve transakcie nastavenÃº ÃºroveÅ izolÃ¡cie na repeatable read. Obidve transakcie v obidvoch prÃ­padoch zÃ­skavajÃº hodnotu pre konkrÃ©tneho pouÅ¾Ã­vateÄ¾a a nÃ¡sledne tÃºto hodnotu pouÅ¾ijÃº pre aktualizovanie inÃ©ho pouÅ¾Ã­vateÄ¾a. Transakcia T1 zÃ­skava hodnotu pouÅ¾Ã­vateÄ¾a s id = 1 a nÃ¡sledne aktualizuje hodnotu pouÅ¾Ã­vateÄ¾a s id = 2, kde pouÅ¾ije zÃ­skanÃº hodnotu. V prÃ­pade transakcie T2 je scenÃ¡r rovnakÃ½, akurÃ¡t transakcia zÃ­ska hodnotu pre pouÅ¾Ã­vateÄ¾a s id = 2 a nÃ¡sledne tÃºto hodnotu pouÅ¾ije pre aktualizovanie hodnoty pre pouÅ¾Ã­vateÄ¾a s id = 1. VÃ½sledok pre obidvoch pouÅ¾Ã­vateÄ¾ov je 700. V prÃ­pade sÃ©riovÃ©ho spracovania transakciÃ­ v poradÃ­ T1, T2 je vÃ½sledok po vykonanÃ­ transakcie T1 nasledovnÃ½:"
205,224,0.523,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","ObrÃ¡zok 54. PrÃ­klad odporÃºÄania na Amazone. PouÅ¾Ã­vatelia mÃ´Å¾u ohodnotiÅ¥ poloÅ¾ku, povedaÅ¥ systÃ©mu, Å¾e ju uÅ¾ vlastnia, alebo ich nezaujÃ­ma. SystÃ©m sa tieÅ¾ snaÅ¾Ã­ vysvetliÅ¥, preÄo si myslÃ­, Å¾e by mohla danÃ©ho pouÅ¾Ã­vateÄ¾a odporuÄenÃ¡ poloÅ¾ka (v tomto prÃ­pade kniha) zaujÃ­maÅ¥."
59,565,0.523,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 11.6. InheritaÄnÃ¡ charakteristika objektov â psov s menom Brok, Rek,â¦, DunÄo, Fido, â¦, priÄom psi Brok a Rek sÃº pudlÃ­ci, DunÄo a Fido sÃº jazveÄÃ­ci. PudlÃ­ci a jazveÄÃ­ci sÃº psi, psi patria k Å¡elmÃ¡m psovitÃ½m, ktorÃ© sÃº cicavce, tieto sÃº stavovce a koneÄne tieto sÃº Å¾ivoÄÃ­chy. Tento inheritaÄnÃ½ strom Å¾ivoÄÃ­chov mÃ´Å¾e byÅ¥ jednoducho rozÅ¡Ã­renÃ½ o ÄalÅ¡ie Å¾ivoÄÃ­chy, akÃ½mi sÃº napr. vtÃ¡ky (Äo je veÄ¾kÃ¡ potrieda stavovovcov), alebo cicavce rozÅ¡Ã­renÃ© o Å¡elmy maÄkovitÃ©, kopytnÃ­ky, a pod. V rÃ¡mci tohto inheritaÄnÃ©ho stromu mÃ´Å¾eme Ä¾ahko odvodzovaÅ¥ pomocou princÃ­pu tranzitÃ­vnosti, tak napr. Brok je nielen pudlÃ­k, ale je pes, Å¡elma psovitÃ¡, cicavec, atÄ. MÃ´Å¾eme konÅ¡tatovaÅ¥, Å¾e naÅ¡e vedomosti o okolitom svete mÃ´Å¾eme nÃ¡zorne reprezentovaÅ¥ pomocou stromovej diagramamtickej Å¡truktÃºry nazÃ½vanej inheritaÄnÃ½ strom, priÄom nad danÃ½m inheritaÄnÃ½m stromom mÃ´Å¾eme vyvodzovaÅ¥ pomocou princÃ­pu tranzitÃ­vnosti ÄalÅ¡ie poznatky, ktorÃ© nie sÃº v Åom explicitne obsiahnutÃ©. Toto odvodzovanie novÃ½ch poznatkov mÃ´Å¾eme vyjadriÅ¥ pomocou existencie orintovanej cesty idÃºcej zdola-nahor, napr. medzi Rekom a cicavcom existuje orientovanÃ¡ cesta, t. j. âRek je cicavecâ. Medzi objektami pudlÃ­k a jazveÄÃ­k neexistuje orientovanÃ¡ cesta, t. j. medzi touto dvojicou neexistuje relÃ¡cia inheritÃ¡cie, ktorÃ¡ by bola vyvoditeÄ¾nÃ¡ aplikÃ¡ciou princÃ­pu tranzitÃ­vnosti na elementÃ¡rne relÃ¡cie z inheritaÄnÃ©ho stromu."
135,279,0.523,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â mnoÅ¾ina procesov pouÅ¾Ã­va lokÃ¡lnu pamÃ¤, â procesy komunikujÃº posielanÃ­m a prijÃ­manÃ­m sprÃ¡v, â prenos Ãºdajov vyÅ¾aduje spoluprÃ¡cu (poslanie a prijatie). NajpopulÃ¡rnejÅ¡Ã­mi verziami systÃ©mov zasielajÃºcich sprÃ¡vy sa stali rozhranie zasielania sprÃ¡v a paralelnÃ½ virtuÃ¡lny stroj, lebo nevyÅ¾adujÃº modifikÃ¡ciu hostiteskÃ©ho programovacieho jazyka. Rozhranie zasielania sprÃ¡v (angl. Message Passing Interface â MPI) Je to definÃ­cia portovatenej kniÅ¾nice na zasielanie sprÃ¡v. TÃ¡to Å¡pecifikÃ¡cia mÃ¡ aj svoju implementÃ¡ciu v programovacom jazyku C. AplikÃ¡ciu napÃ­sanÃº pomocou tejto kniÅ¾nice treba vidie ako zbierku sÃºbeÅ¾nÃ½ch komunikujÃºcich programov, ktorÃ© sa vykonÃ¡vajÃº na jednom alebo viacerÃ½ch procesoroch. KaÅ¾dÃ½ program mÃ¡ stupe a ID Ãºlohy. Programy zaloÅ¾enÃ© na MPI sÃº programy napÃ­sanÃ© v tradinÃ½ch jazykoch (C, ...) rozÅ¡Ã­renÃ© o prÃ­kazy definÃ­cie prostredia a komunikÃ¡cie. KomunikÃ¡cia v rÃ¡mci aplikÃ¡cie je riadenÃ¡ pomocou konceptov komunikÃ¡torov. KomunikÃ¡tor (angl. communicator) vytvÃ¡ra komunikanÃ½ kanÃ¡l medzi skupinami Ãºloh:"
122,19,0.523,Modelovanie softvÃ©ru,"2 Podstata prÃ­padov pouÅ¾itia a ich zÃ¡kladnÃ© vyjadrenie Modely najÄastejÅ¡ie vytvÃ¡rame preto, aby sme bez veÄ¾kej investÃ­cie zhmotnili urÄitÃ© aspekty veci, ktorÃº potrebujeme vytvoriÅ¥. NÃ¡sledne model mÃ´Å¾eme Å¡tudovaÅ¥ a vyhodnocovaÅ¥, a na zÃ¡klade toho upravovaÅ¥, aby sme nakoniec na zÃ¡klade modelu mohli vytvoriÅ¥ to, Äo je skutoÄne potrebnÃ©. PrÃ­pady pouÅ¾itia sÃº jednoduchou a lacnou technikou modelovania softvÃ©ru vo forme textu, ktorÃ¡ je vÅ¡ak mimoriadne ÃºÄinnÃ¡. TÃ¡to technika bola kniÅ¾ne publikovanÃ¡ v roku 1992 [Jac92], ale pouÅ¾Ã­vali sa uÅ¾ od roku 1967 [Jac04]. ÄasÅ¥ 2.1 ukazuje ako prÃ­pady pouÅ¾itia zachytÃ¡vajÃº typickÃ© interakcie so systÃ©mom. ÄasÅ¥ 2.2 vysvetÄ¾uje pozÃ­ciu predpokladov a dÃ´sledkov prÃ­padov pouÅ¾itia. ÄasÅ¥ 2.3 sa zmieÅuje o ÃºÄastnÃ­koch prÃ­padov pouÅ¾itia. V Äasti 2.4 je pojednanÃ© o vzÅ¥ahu prÃ­padu pouÅ¾itia a koncovÃ©ho pouÅ¾Ã­vateÄ¾a. ÄasÅ¥ 2.5 vysvetÄ¾uje, preÄo prÃ­pad pouÅ¾itia nie je opis pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania."
41,39,0.523,InformaÄnÃ© vzdelÃ¡vanie,"Na mieste je informÃ¡cia, kde je prÃ­stup k tÃ½mto vedeckÃ½m databÃ¡zam v rÃ¡mci STU v Bratislave. O podmienkach sme si uÅ¾ napÃ­sali, teda si povedzme o prÃ­stupe z internetu. Na strÃ¡nke STU stuba.sk v sekcii âVeda a vÃ½skumâ je podsekcia âVirtuÃ¡lna kniÅ¾nicaâ a v nej odkaz na âSvetovÃ© databÃ¡zyâ. Pod tÃ½mto odkazom nÃ¡jdeme prÃ­stup nielen na vyÅ¡Å¡ie spomÃ­nanÃ© databÃ¡zy[4]. Mimo spomÃ­nanÃ½ch vedeckÃ½ch databÃ¡z sÃº v sÃºÄasnej dobe populÃ¡rne aj inÃ©, viac otvorenÃ© databÃ¡zy. NajznÃ¡mejÅ¡ie sÃº â Google Scholar - https://scholar.google.com/, ktorÃ¡ preÅ¡la za poslednÃ© roky vÃ½raznou zmenou. Je sÃ­ce stÃ¡le akousi multidisciplinÃ¡rnou zmesicou âvÅ¡eliÄohoâ (v zmysle, Å¾e nie kaÅ¾dÃ½ ÄlÃ¡nok a zdroj je skutoÄne vedeckÃ½), ale poskytuje vÅ¡eobecnÃ½ prehÄ¾ad dostupnÃ½ch materiÃ¡lov v danej oblasti â Dimensions - https://app.dimensions.ai/ , multidisciplinÃ¡rna databÃ¡za seba prezentuje ako ânajkomplexnejÅ¡iu databÃ¡zu vÃ½skumnÃ½ch grantov, ktorÃ¡ spÃ¡ja granty s miliÃ³nmi vÃ½slednÃ½ch publikÃ¡ciÃ­, klinickÃ½ch Å¡tÃºdiÃ­ a patentov. ... Dimensions pokrÃ½va miliÃ³ny vÃ½skumnÃ½ch publikÃ¡ciÃ­ spojenÃ½ch s viac ako 1 miliardou citÃ¡ciÃ­, podporujÃºcich granty, sÃºbory Ãºdajov, klinickÃ© skÃºÅ¡ky, patenty a politickÃ© dokumenty.â [37]. PonÃºka komfortnÃ© vyhÄ¾adÃ¡vanie a najmÃ¤ rÃ´zne metriky hodnotenia vedeckÃ½ch ÄlÃ¡nkov Pri opise Dimensions sme sa dotkli tÃ©my metrÃ­k. Metrika vedeckej prÃ¡ce slÃºÅ¾i na hodnotenie kvality a dopadu vedeckej prÃ¡ce. Metrika mÃ¡ ukÃ¡zaÅ¥ kvalitu publikÃ¡cie (ÄlÃ¡nku) a jeho vplyv na svetovÃº vedu. ÄastokrÃ¡t sa ale implementÃ¡ciou sÃºÄasnÃ½ch metrÃ­k v kombinÃ¡cii s ânahÃ¡ÅanÃ­mâ naprÃ­klad stupÅa v urÄitej metrike mÃ´Å¾e poÅ¡kodiÅ¥ smer vÃ½skumu, Äi ovplyvniÅ¥ sa sprÃ¡vanie vÃ½skumnÃ­ka, aby dosiahol sebou poÅ¾adovanÃ½ cieÄ¾. To mÃ´Å¾e skutoÄne poÅ¡kodiÅ¥ vÃ½skum. Faktorov vplyvu na toto sprÃ¡vanie mÃ´Å¾e byÅ¥ mnoho, jednÃ½m z najÄastejÅ¡Ã­ch je nastavenie dosahovania vedeckej hodnosti v tej ktorej krajine (napr. poÄet ÄlÃ¡nkov, citÃ¡ciÃ­, âvychovanÃ½châ druhostupÅovÃ½ch vysokoÅ¡kolÃ¡kov a pod). PrimÃ¡rny cieÄ¾ metriky je ale kvantifikovaÅ¥ vÃ½znamnosÅ¥ vÃ½skumu tak na inÅ¡titucionÃ¡lnej Ãºrovni, ako aj na individuÃ¡lnej Ãºrovni. Medzi najznÃ¡mejÅ¡ie metriky patria: â¢ H â index : Hirshov index, meranie kvality a mnoÅ¾stva vedeckÃ½ch vÃ½stupov. Opatrenie je protivÃ¡hou neprimeranej vÃ¡hy vysoko citovanÃ½ch ÄlÃ¡nkov, ak eÅ¡te neboli citovanÃ©. H-index sa iba zvyÅ¡uje, nikdy neklesÃ¡ a starÅ¡ie ÄlÃ¡nky sÃº na tom lepÅ¡ie ako mladÅ¡ie. â¢ Impact factor - priemernÃ½ poÄet citÃ¡ciÃ­ v danom roku na prÃ­spevok publikovanÃ½ v Äasopise za poslednÃ© 2 roky. RÃ´zne predmetovÃ© oblasti vykazujÃº rÃ´zne rozsahy IF. NajlepÅ¡ie sa na Äasopisy pozeraÅ¥ v kontexte ich konkrÃ©tnej oblasti."
59,366,0.523,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"(6.84b) x ï½ a1 ï« a2 ï« ... ï« a p kde konceptuÃ¡lny vektor x je priradenÃ½ novÃ©mu âzovÅ¡eobecnenÃ©muâ vektoru, ktorÃ½ reprezentuje kaÅ¾dÃ½ argument ai z trÃ©ningovej mnoÅ¾iny Atrain (ktorÃ½ je v naÅ¡ich ÄalÅ¡Ã­ch ÃºvahÃ¡ch o indukcii chÃ¡panÃ½ ako samostatnÃ¡ konceptuÃ¡lna entita rovnocennÃ¡ s reprezentÃ¡ciami pÃ´vodnÃ½ch objektov a1, a2, ..., ap) (6.85) tmï¨ ai ï© ï Ti ï» t mï¨ x ï© TÃ¡to formula mÃ´Å¾e byÅ¥ interpretovanÃ¡ ako indukÄnÃ© zovÅ¡eobecnenie, kde partikulÃ¡rne objekty ai z trÃ©ningovej mnoÅ¾iny v reprezentÃ¡ciÃ¡ch t mï¨ ai ï© sÃº substituovanÃ© novÃ½m objektom x, ktorÃ½ mÃ´Å¾e byÅ¥ interpretovanÃ½ ako novÃ½ univerzÃ¡lny objekt."
195,132,0.523,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"7 VÃ½konnostnÃ© testovanie V predchÃ¡dzajÃºcej kapitole sme sa venovali metrikÃ¡m a meraniu typickÃ½ch charakteristickÃ½ch vlastnostÃ­ odporÃºÄaÄov. SpomÃ­nali sme vlastnosti ako presnosÅ¥ odporÃºÄania, pokrytie, rÃ½chlosÅ¥ uÄenia, robustnosÅ¥, uÅ¾itoÄnosÅ¥ a niekoÄ¾ko ÄalÅ¡Ã­ch. V tejto kapitole nadviaÅ¾eme na porovnÃ¡vanie a vyhodnocovanie jednotlivÃ½ch kvalitatÃ­vnych charakteristÃ­k v sÃºvislosti s meranÃ­m celkovÃ©ho vÃ½konu odporÃºÄaÄov. Pri hÄ¾adanÃ­ ideÃ¡lneho odporÃºÄaÄa musÃ­me zohÄ¾adniÅ¥ viacero charakteristÃ­k sÃºÄasne a taktieÅ¾ nemÃ´Å¾eme ignorovaÅ¥ Å¡pecifickÃ© poÅ¾iadavky vyplÃ½vajÃºce z prostredia, v ktorom bude odporÃºÄaÄ nasadenÃ½. TakÃ©to merania odporÃºÄaÄov sa oznaÄujÃº pojmom vÃ½konnostnÃ© testovanie. Pri vÃ½konnostnom testovanÃ­ zohÄ¾adÅujeme nielen kvalitatÃ­vne charakteristiky, ale aj ÄalÅ¡ie hÄ¾adiskÃ¡ odporÃºÄaÄov, ktorÃ© vplÃ½vajÃº na ich pouÅ¾itie. VÃ½konnostnÃ© testovanie je systematickÃ½ proces porovnÃ¡vania a merania produktov s cieÄ¾om ich neustÃ¡leho vylepÅ¡ovania. PÃ´vodne sa tento pojem pouÅ¾Ã­val v domÃ©ne zlepÅ¡ovania podnikovÃ½ch procesov hÄ¾adanÃ­m spÃ´sobov, ako efektÃ­vnejÅ¡ie dosiahnuÅ¥ podnikovÃ© ciele. KeÄÅ¾e ide o zloÅ¾itÃ© procesy, je potrebnÃ© zvoliÅ¥ iteratÃ­vny postup, priÄom sa oÄakÃ¡va, Å¾e kaÅ¾dÃ¡ ÄalÅ¡ia iterÃ¡cia tento proces aspoÅ trochu zefektÃ­vni. Preto sa oznaÄuje ako nepretrÅ¾itÃ½ a systematickÃ½ proces porovnÃ¡vania a merania produktov, procesov a metÃ³d vlastnej organizÃ¡cie s tÃ½mi, ktorÃ© boli uznanÃ© ako vhodnÃ© pre toto meranie, za ÃºÄelom urÄiÅ¥ ciele zlepÅ¡enia vlastnÃ½ch aktivÃ­t [6]. V poslednej dobe zaÄÃ­na byÅ¥ tento pojem populÃ¡rny aj vo vedeckej oblasti softvÃ©rovÃ©ho inÅ¾inierstva, kde sa vÃ½konnostnÃ½m testovanÃ­m oznaÄuje proces hÄ¾adania optimÃ¡lneho algoritmu pre konkrÃ©tny vedeckÃ½ problÃ©m alebo optimalizÃ¡ciu Å¾ivotnÃ©ho cyklu vÃ½voja softvÃ©ru vrÃ¡tane jeho automatizovanÃ©ho testovania [3]. Ide o konÅ¡trukÄnÃ½ prÃ­stup zvyÅ¡ovania kvality v oblasti manaÅ¾mentu a inÅ¾inierstva s cieÄ¾om nÃ¡jsÅ¥ najhodnejÅ¡ie rieÅ¡enie pre konkrÃ©tny problÃ©m [2]. Autori publikÃ¡cie zameranej na odporÃºÄanie v oblasti softvÃ©rovÃ©ho inÅ¾inierstva [7] identifikujÃº vÃ½konnostnÃ© testovanie ako metodolÃ³giu vhodnÃº pre zaistenie kvality odporÃºÄaÄov v softvÃ©rovom inÅ¾inierstve. ZameriavajÃº sa prevaÅ¾ne na vyhodnocovanie charakteristÃ­k ako presnosÅ¥, ÃºplnosÅ¥, uÅ¾itoÄ-"
236,124,0.523,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"NemÃ´Å¾eme vidieÅ¥ duchov (fantÃ³mov), ale oni eÅ¡te stÃ¡le obÃ½vajÃº urÄitÃ© miesto v mysliach mnohÃ½ch Ä¾udÃ­. LATEX nie je inÃ½. TÃºto okolnosÅ¥ mÃ´Å¾eme pouÅ¾iÅ¥ na niektorÃ© zaujÃ­mavÃ© triky s medzerami. Pri vertikÃ¡lnom zarovnÃ¡vanÃ­ textu pomocou ^ a _ mÃ´Å¾e byÅ¥ niekedy LATEX tieÅ¾ trochu osoÅ¾nÃ½. PouÅ¾itÃ­m prÃ­kazu \phantom mÃ´Å¾ete vymedziÅ¥ priestor na pÃ­smenÃ¡, ktorÃ© nebudÃº v koneÄnom vÃ½stupe ukÃ¡zanÃ©. NajlepÅ¡ie to je vidieÅ¥ na nasledujÃºcich prÃ­kladoch. \begin{displaymath} {}^{12}_{\phantom{1}6}\textrm{C} \qquad \textrm{namiesto} \qquad {}^{12}_{6}\textrm{C} \end{displaymath}"
59,158,0.522,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Zavedenie slabÃ½ch mutÃ¡ciÃ­ nemenÃ­ dramaticky vÅ¡eobecnÃ© vlastnosti pÃ´vodnÃ©ho jednoduchÃ©ho systÃ©mu replikÃ¡torov bez mutÃ¡ciÃ­. Menovite, v asymptotickom Äase tï®ï¥ systÃ©m obsahuje skoro vÃ½luÄne len molekuly majÃºce najvÃ¤ÄÅ¡ie rÃ½chlostnÃ© konÅ¡tanty kmax., ktorÃ© sÃº vzÃ¡cne sprevÃ¡dzanÃ© inÃ½mi replikÃ¡tormi tvorenÃ½mi z vÃ­Å¥aznÃ©ho replikÃ¡tora (s rÃ½chlostnou konÅ¡tantou kmax) pomocou nepresnÃ©ho replikaÄnÃ©ho procesu, pozri Obr. 3.13."
240,438,0.522,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"a vrÃ¡ti 1 (nepodarilo sa reÅ¥azec vloÅ¾iÅ¥). V opaÄnom prÃ­pade musÃ­ najskÃ´r vytvoriÅ¥ v reÅ¥azci dst miesto pre sl znakov a aÅ¾ potom do vzniknutej medzery vloÅ¾iÅ¥ znaky reÅ¥azca src. VoÄ¾nÃ© miesto pre sl znakov vytvorÃ­me postupnÃ½m posunom znakov reÅ¥azca dst od konca, tak Å¾e kaÅ¾dÃ½ posunieme (priradÃ­me jeho hodnotu) do pozÃ­cie o sl znakov Äalej. PresnÃ½ postup je uvedenÃ½ v nasledujÃºcej implementÃ¡cii:"
135,157,0.522,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.5.1 ProblÃ©my a ciele Objektovo orientovanÃ© programovacie jazyky prinÃ¡Å¡ajÃº vÃ½hody oproti procedurÃ¡lnym jazykom, najmÃ¤ vaka zapuzdreniu dÃ¡t a operÃ¡ciÃ­ nad nimi. VznikajÃº ale aj novÃ© problÃ©my sÃºvisiace s binÃ¡rnou kompatibilitou predchÃ¡dzajÃºcich verziÃ­ kniÅ¾nÃ­c a zdieanÃ­m objektov medzi rÃ´znymi programovacÃ­mi jazykmi (Hamilton, 1996). V procedurÃ¡lnom jazyku postauje, aby novÃ¡ verzia kniÅ¾nice zachovala kompatibilnÃ© signatÃºry funkciÃ­ a aby pridanÃ© novÃ© funkcie nekolidovali s menami v klientskej aplikÃ¡cii. UdrÅ¾iava kompatibilitu definÃ­ciÃ­ tried v objektovo orientovanÃ½ch jazykov ale nie je takÃ© ahkÃ©. V statickÃ½ch jazykoch (napr. C++, Java) je v klientskom kÃ³de skompilovanÃ© mnoÅ¾stvo informÃ¡ciÃ­ o pouÅ¾itej triede (vekos, poradie a umiestnenie metÃ³d, offset5 od rodiovskej triedy) a aj malÃ¡ zmena vo vnÃºtornej Å¡truktÃºre triedy spÃ´sobÃ­ nutnos prekompilova klientsky kÃ³d. V dynamickÃ½ch jazykoch (napr. Smalltalk), ktorÃ© informÃ¡cie o triedach spravujÃº poas vykonÃ¡vania programu, tieto problÃ©my nevznikajÃº. alÅ¡Ã­ problÃ©m je spÃ´sobenÃ½ zdieanÃ­m kÃ³du medzi jazykmi, ke v prÃ­pade objektovo orientovanÃ½ch programovacÃ­ch jazykov neexistuje Å¾iadna Å¡tandardnÃ¡ reprezentÃ¡cia objektov, ktorÃ¡ by umoÅ¾nila pouÅ¾Ã­va objekty napr. zo Smalltalku v C++. ProblÃ©my nastÃ¡vajÃº uÅ¾ aj medzi rÃ´znymi kompilÃ¡tormi C++, kde kaÅ¾dÃ½ mÃ´Å¾e pouÅ¾Ã­va rozlinÃ© zarovnanie objektov v pamÃ¤ti a pouÅ¾itie objektovej kniÅ¾nice vytvorenej v inom kompilÃ¡tore sa tak stÃ¡va neschodnÃ©. Naopak, v procedurÃ¡lnych jazykoch linkovacÃ­ proces v operanom systÃ©me dodrÅ¾uje uritÃ© konvencie, o umoÅ¾uje vola kniÅ¾nice medzi rÃ´znymi procedurÃ¡lnymi jazykmi (napr. C, Fortran) relatÃ­vne jednoducho. TechnolÃ³gia SOM sprÃ­stupujÃºca objekty bola navrhnutÃ¡ ako rieÅ¡enie obmedzenÃ­ pre Å¡irÅ¡ie pouÅ¾itie kniÅ¾nÃ­c objektovÃ½ch tried (IBM, 1994) s nasledujÃºcimi ciemi: 1. MoÅ¾nos odvodi novÃº objektovÃº triedu z binÃ¡rneho tvaru kniÅ¾nice, bez nutnosti ma k dispozÃ­cii pÃ´vodnÃ½ zdrojovÃ½ kÃ³d zÃ¡kladnej triedy. 2. MoÅ¾nos pouÅ¾Ã­va objektovÃ© triedy a odvodzova novÃ© triedy bez ohadu na programovacÃ­ jazyk, v ktorom bola objektovÃ¡ kniÅ¾nica alebo klientska aplikÃ¡cia implementovanÃ¡. 3. UmoÅ¾ni nÃ¡slednÃ© zmeny (vylepÅ¡enia, opravy) vo vytvorenÃ½ch sÃºiastkach bez nutnosti rekompilÃ¡cie existujÃºcich klientskych aplikÃ¡ciÃ­, ktorÃ© ich pouÅ¾Ã­vajÃº."
94,116,0.522,Sprievodca svetom vedeckÃ©ho publikovania,"spoloÄnosÅ¥ Publons49 (od roku 2017 sÃºÄasÅ¥ Clarivate Analytics). Spolupracuje s vydavateÄ¾mi vedeckÃ½ch Äasopisov a umoÅ¾Åuje recenzentom zverejÅovaÅ¥ svoj profil s vÃ½skumnÃ½m zameranÃ­m, Älenstvom v redakÄnÃ½ch radÃ¡ch Äasopisov a najmÃ¤ poÄtom recenziÃ­ (overenÃ½ch vydavateÄ¾om), dokonca s moÅ¾nosÅ¥ou prepojenia na texty posudkov, ak boli uverejnenÃ© otvorene. Pre mladÃ½ch vedeckÃ½ch pracovnÃ­kov ponÃºka webovÃ½ kurz Publons Academy, kde ich prostrednÃ­ctvom mentorov uÄÃ­, ako sprÃ¡vne posudzovaÅ¥ vedeckÃ© rukopisy. RecenzentskÃ¡ histÃ³ria (koÄ¾ko ÄlÃ¡nkov a pre akÃ© Äasopisy pracovnÃ­k hodnotil) mÃ´Å¾e byÅ¥, podobne ako zoznam publikÃ¡ciÃ­, pre kariÃ©ru vedca cennÃ½m zÃ¡znamom. ÄalÅ¡Ã­ spÃ´sob ocenenia recenzentov a zaujÃ­mavÃ½ systÃ©m recenznÃ©ho konania ponÃºka nezÃ¡vislÃ¡ platforma Peerage of Science50. SkÃ´r neÅ¾ autor poÅ¡le svoj ÄlÃ¡nok do Äasopisu, dÃ¡ si ho posÃºdiÅ¥ nezÃ¡vislÃ½mi recenzentmi Peerage of Science. Proces mÃ¡ Å¡tyri fÃ¡zy: prvÃ© posÃºdenie rukopisu (autor si mÃ´Å¾e urÄiÅ¥ jeho trvanie, zvyÄajne to bÃ½vajÃº dva â tri tÃ½Å¾dne, na konci ktorÃ½ch kaÅ¾dÃ½ recenzent odovzdÃ¡ posudok vo forme eseje), posudzovanie hodnotenÃ­ (inÃ­ recenzenti posÃºdia kaÅ¾dÃº hodnotiacu esej a udelia jej index kvality), prepracovanie (alebo stiahnutie) rukopisu podÄ¾a pripomienok recenzentov a opÃ¤tovnÃ© hodnotenie prepracovanÃ©ho rukopisu. AutomatizovanÃ½ systÃ©m informuje autorov a editorov o priebehu jednotlivÃ½ch fÃ¡z. S platformou spolupracuje 69 Äasopisov (prevaÅ¾ne z oblasti biolÃ³gie, zoolÃ³gie a ochrany prÃ­rody, ale aj megaÄasopisy ako PeerJ alebo PLoS ONE), ktorÃ© mÃ´Å¾u autorom zrecenzovanÃ©ho ÄlÃ¡nku ponÃºknuÅ¥ uverejnenie. Autori mÃ´Å¾u jednu z ponÃºk prijaÅ¥, alebo poslaÅ¥ svoj ÄlÃ¡nok do Ä¾ubovoÄ¾nÃ©ho inÃ©ho Äasopisu, spolu s linkou na recenznÃ© konanie (editor mÃ´Å¾e takÃ½ ÄlÃ¡nok prijaÅ¥ ako recenzovanÃ½, alebo ho podrobiÅ¥ dodatoÄnÃ©mu hodnoteniu podÄ¾a kritÃ©riÃ­ Äasopisu). SystÃ©m Peerage of Science ponechÃ¡va pozoruhodnÃ© mnoÅ¾stvo slobody autorom (nemusia platiÅ¥, urÄujÃº si termÃ­ny, vyberajÃº si z ponÃºk Äasopisov) aj recenzentom (sami si vyberajÃº ÄlÃ¡nky na recenzovanie, mÃ´Å¾u ostaÅ¥ anonymnÃ­, alebo svoj posudok podpÃ­saÅ¥). Platforma tieÅ¾ odmeÅuje najlepÅ¡ie hodnotenÃ½ch recenzentov cenou Recenzent roka."
196,142,0.522,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,Implicitne sÃº obrÃ¡zky zarovnÃ¡vanÃ© vlâavo. Centrovanie je moÅ¾nÃ© zabezpecÌitâ prÃ­kazom \centering v prostred figure. Zarovnatâ obrÃ¡zok vpravo moÅ¾no naprÃ­klad takto: \hfill\includegraphics{<nÃ¡zov sÃºboru s obrÃ¡zkom>}.
76,231,0.521,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"4.1.20 Veta (ÄebyÅ¡evova nerovnosÅ¥). Nech je Ä¾ubovoÄ¾nÃ¡ takÃ¡, Å¾e existujÃº E( ) a var( ). Potom pre kaÅ¾dÃ© kladnÃ© ÄÃ­slo ï¥ platÃ­ nerovnosÅ¥ P( | â E( )| â¥ ï¥ ) â¤ NerovnosÅ¥ hovorÃ­, Å¾e pravdepodobnosÅ¥ udalosti, ktorÃ¡ spoÄÃ­va v tom, Å¾e sa realizuje mimo ï¥ okolia E( ) je zhora ohraniÄenÃ¡ zlomkom na pravej strane nerovnosti. ÄÃ­m je var( ) menÅ¡ia, tÃ½m je pravdepodobnosÅ¥ udalosti {| â E( )| â¥ ï¥ } menÅ¡ia. Teda naozaj, var( ) je miera rozptÃ½lenosti. VÅ¡imnime si, Å¾e keÄ za ï¥ berieme malÃ© ÄÃ­slo (napr. 0.1), tak ï¥2 je veÄ¾mi malÃ© (napr. 0.01), a pretoÅ¾e je v menovateli, pravÃ¡ strana mÃ´Å¾e maÅ¥ aj hodnotu vÃ¤ÄÅ¡iu ako 1. V takom prÃ­pade, samozrejme, nerovnosÅ¥ niÄ nehovorÃ­. Je zaujÃ­mavÃ©, Å¾e nerovnosÅ¥ platÃ­ za veÄ¾mi Å¡irokÃ½ch predpokladov (tak pre diskrÃ©tne, ako aj spojitÃ© veliÄiny)."
135,494,0.521,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"kde d â 0, 1 je tlmiaci faktor, E n je matica pravdepodobnostÃ­ skoku na Ãºplne nÃ¡hodnÃº strÃ¡nku a A je matica pravdepodobnostÃ­ skoku na susednÃ© strÃ¡nky. TakÃ¡to Ãºprava matice A zarucÌuje, Å¾e vÃ½slednÃ¡ matica M je ireducibilnÃ¡ a aperiodickÃ¡. Mocninovou metÃ³dou je pre takto upravenÃº maticu moÅ¾nÃ© nÃ¡jstâ stacionÃ¡rne rozdelenie rk , ktorÃ© predstavuje ohodnotenie strÃ¡nok (vrcholov) PageRank algoritmom. rk = rkâ1 M"
190,54,0.521,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V tÃ­me, pre ktorÃ½ je charakteristickÃ½ skupinovÃ½ archetyp, sÃº Älenovia zaradenÃ­ do menÅ¡Ã­ch skupiniek poverenÃ½ch Å¡pecializovanou Ãºlohou v rÃ¡mci tÃ­mu. Ãlohy majÃº spravidla iteratÃ­vny charakter. ÃspeÅ¡nosÅ¥ ich zvlÃ¡dnutia v koneÄnom dÃ´sledku zÃ¡visÃ­ od kolektÃ­vnych schopnostÃ­ a slabostÃ­ skupinky. JednotlivÃ­ Älenovia tÃ­mu sÃº teda hodnotenÃ­ nielen za svoje technickÃ© zruÄnosti a vedomosti, ale aj za schopnosÅ¥ pracovaÅ¥ v skupine Ä¾udÃ­, do ktorej sÃº zaradenÃ­. Tak isto ako predchÃ¡dzajÃºcom prÃ­pade, dÃ´raz sa kladie viac na proces vÃ½voja softvÃ©ru, ako na vÃ½slednÃ½ produkt. SociÃ¡lna organizÃ¡cia v skupinovom archetype je zaloÅ¾enÃ¡ na spoluprÃ¡ci. PravidlÃ¡ a sprÃ¡vanie v skupinke sÃº prispÃ´sobenÃ© na rieÅ¡enie nevyhnutnÃ½ch konfliktov, ktorÃ© nastanÃº poÄas spoluprÃ¡ce jednotlivÃ½ch Älenov skupiny. Medzi prÃ­stupy reprezentujÃºce skupinovÃ½ archetyp mÃ´Å¾eme zaradiÅ¥ naprÃ­klad Å¡pirÃ¡lovÃ½ a evoluÄnÃ½ model tvorby softvÃ©ru."
135,269,0.521,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â multivlÃ¡knovÃ© systÃ©my â samotnÃ½ program sa vykonÃ¡va pomocou viacerÃ½ch vlÃ¡kien naraz. Pri multiprogramovÃ½ch systÃ©moch sa najastejÅ¡ie vykonÃ¡vanie viacerÃ½ch programov (procesov) naraz realizuje preruÅ¡ovanÃ­m a prepÃ­nanÃ­m vykonÃ¡vania tÃ½chto procesov na procesore. Cieom je dosiahnu, aby sa procesu javilo, akoby sa vykonÃ¡val na procesore jedinÃ½ a zÃ¡rove, akoby sa vykonÃ¡vali viacerÃ© vlÃ¡kna naraz, priom vaka prepÃ­naniu sa vyko-"
367,12,0.521,CESTA K OTVORENEJ VEDE,OtvorenÃ© archÃ­vy a repozitÃ¡re: MÃ´Å¾u byÅ¥ inÅ¡titucionÃ¡lne alebo tematickÃ©. VedeckÃ© vÃ½stupy do nich ukladajÃº samotnÃ­ vÃ½skumnÃ­ci s cieÄ¾om bezplatnÃ©ho sprÃ­stupnenia. Pozrite si qDigitÃ¡lny repozitÃ¡r Katedry mediamatiky a kultÃºrneho dediÄstva qRepozitÃ¡r Univerzity Mateja Bela
184,91,0.521,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"AplikaÄnÃ½ server z pohÄ¾adu softvÃ©rovÃ©ho architekta AplikaÄnÃ© servery sÃº komplexnÃ¡ technolÃ³gie a je preto zrejmÃ©, Å¾e softvÃ©rovÃ½ architekt musÃ­ veÄ¾mi dobre poznaÅ¥ konkrÃ©tne poÅ¾iadavky na systÃ©m, aby dokÃ¡zal zvoliÅ¥ vhodnÃ½ typ pouÅ¾itÃ©ho aplikaÄnÃ©ho servera. TechnolÃ³gie aplikaÄnÃ½ch serverov vÅ¡ak umoÅ¾ÅujÃº vyÅ¡Å¡iu voÄ¾nosÅ¥ pri vyuÅ¾Ã­vanÃ­ rÃ´znych architektonickÃ½ch vzorov. KomplexnosÅ¥ komunikÃ¡cie s komponentmi v aplikaÄnom serveri zasa mÃ´Å¾e byÅ¥ vzhÄ¾adom na vÃ½konnosÅ¥ znaÄne limitujÃºcim faktorom pouÅ¾itia takÃ©hoto rieÅ¡enia. 2.2.5"
66,15,0.521,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"UkÃ¡Å¾ka prÃ­kladu relÃ¡cie authors, je zobrazenÃ¡ v TabuÄ¾ka 1, kde mÃ´Å¾eme vidieÅ¥ Å¡tyri atribÃºty (stÄºpce) a to id, name, country, year. RelÃ¡cia obsahuje tri n-tice (zÃ¡znamy). TabuÄ¾ka 1. UkÃ¡Å¾ka relÃ¡cie/tabuÄ¾ky v relaÄnom dÃ¡tovom modely"
130,382,0.521,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"JednoduchÃ¡ Å¡truktÃºra NajjednoduchÅ¡Ã­ spÃ´sob rozdeÄ¾ovania Ãºloh je ten, Å¾e vÅ¡etky agenty (Äasti systÃ©mu) sÃº Ãºplne riadenÃ© nadradenÃ½mi agentmi. ZnamenÃ¡ to, Å¾e agent dostane prÃ­kaz od nadradenÃ©ho agenta a nemÃ´Å¾e odmietnuÅ¥ jeho splnenie. Ide teda o prÃ­snu podriadenosÅ¥ agentov. TypickÃ© pouÅ¾itie jednoduchej Å¡truktÃºry rozdeÄ¾ovania Ãºloh je hierarchia vojenskÃ©ho typu, kde k rozdeÄ¾ovaniu Ãºloh dochÃ¡dza postupnÃ½m delegovanÃ­m Ãºloh agentom na niÅ¾Å¡om stupni hierarchie. PouÅ¾itie tohto princÃ­pu vÅ¡ak nie je obmedzenÃ© iba na hierarchie, pouÅ¾Ã­va sa prakticky vo vÅ¡etkÃ½ch typoch organizÃ¡ciÃ­, kde je moÅ¾nÃ© vo vzÅ¥ahu jednoznaÄne odlÃ­Å¡iÅ¥ zadÃ¡vateÄ¾a Ãºlohy od toho kto ju vykonÃ¡va."
265,199,0.52,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"v projekte zameranom na zefektÃ­vnenie miestneho Ãºradu, sleduje analytik pohyb a Äinnosti konkrÃ©tnych klientov Ãºradu po budove, skÃºma tlaÄivÃ¡ ktorÃ© na rÃ´zne oddelenia doruÄujÃº, priÄom potom robÃ­ to istÃ© aj s ÃºradnÃ­kmi (sleduje Äo robia, kedy to robia). â¢ Å tÃºdium dokumentov o problÃ©movej oblasti. Jednak mÃ´Å¾e Ã­sÅ¥ o dokumenty, ktorÃ© sa v problÃ©movej oblasti pouÅ¾Ã­vajÃº (naprÃ­klad konkrÃ©tne tlaÄivo alebo metodickÃ½ pokyn Äi nÃ¡vod) ale aj o dokumenty ktorÃ© hovoria o danej oblasti (tutoriÃ¡ly, prÃ­ruÄky, ...). â¢ Å tÃºdium existujÃºceho softvÃ©ru, fungujÃºceho v problÃ©movej oblasti."
66,124,0.52,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"4 FyzickÃ© ÃºloÅ¾isko V architektÃºre poÄÃ­taÄov sa vyuÅ¾Ã­va veÄ¾kÃ© mnoÅ¾stvo typov pamÃ¤ti, niektorÃ© z nich stratia informÃ¡cie bez napÃ¡jania a inÃ© nie. PamÃ¤te dosahujÃºce vysokÃº rÃ½chlosÅ¥ a nÃ­zku odozvu poskytujÃº malÃº kapacitu a sÃº v prepoÄte na ponÃºkanÃº kapacitu drahÃ©. NiektorÃ© z tÃ½chto pamÃ¤ti sÃº umiestnenÃ© priamo v procesore (registre a vyrovnÃ¡vacia pamÃ¤Å¥). Na druhej strane pamÃ¤te, ktorÃ© ponÃºkajÃº veÄ¾kÃ© ÃºloÅ¾isko sÃº lacnejÅ¡ie, ale ich rÃ½chlosÅ¥ je menÅ¡ia a odozva prÃ­stupu je vÃ¤ÄÅ¡ia. JednotlivÃ© typy pamÃ¤ti z pohÄ¾adu kapacity, rÃ½chlosti a odozvy sÃº znÃ¡zornenÃ© na Obr. 8."
41,108,0.52,InformaÄnÃ© vzdelÃ¡vanie,"kniÅ¾niÄnÃ½ fond a poskytuje kniÅ¾niÄno- informaÄnÃ© sluÅ¾by, zabezpeÄuje slobodnÃ½ prÃ­stup k informÃ¡ciÃ¡m Å¡Ã­renÃ½m na vÅ¡etkÃ½ch druhoch nosiÄov, napomÃ¡ha uspokojovaniu kultÃºrnych, informaÄnÃ½ch, vedeckovÃ½skumnÃ½ch a vzdelÃ¡vacÃ­ch potrieb, podporuje celoÅ¾ivotnÃ© vzdelÃ¡vanie a duchovnÃ½ rozvoj , plnÃ­ svoje Ãºlohy poskytovanÃ­m kniÅ¾niÄno-informaÄnÃ½ch sluÅ¾ieb z vlastnÃ½ch kniÅ¾niÄnÃ½ch fondov a sprÃ­stupÅovanÃ­m vonkajÅ¡Ã­ch informaÄnÃ½ch zdrojov. SlovenskÃ¡ nÃ¡rodnÃ¡ kniÅ¾nica v Martine - modernÃ¡ vedeckÃ¡, kultÃºrna, informaÄnÃ¡ a vzdelÃ¡vacia inÅ¡titÃºcia, ktorÃ¡ slÃºÅ¾i vÅ¡etkÃ½m obÄanom Slovenska a pouÅ¾Ã­vateÄ¾om zo zahraniÄia. SlovenskÃ¡ nÃ¡rodnÃ¡ kniÅ¾nica je konzervaÄnou kniÅ¾nicou a depozitnou kniÅ¾nicou Slovenskej republiky, prednostne zhromaÅ¾Äuje, odborne spracÃºva, uchovÃ¡va, ochraÅuje a sprÃ­stupÅuje domÃ¡ce a zahraniÄnÃ© slovacikÃ¡lne dokumenty. Fondy a zbierky Slovenskej nÃ¡rodnej kniÅ¾nice obsahujÃº 4,9 miliÃ³na kniÅ¾niÄnÃ½ch jednotiek, 1,7 miliÃ³na archÃ­vnych dokumentov a tisÃ­ce muzeÃ¡lnych jednotiek. SlovenskÃ¡ nÃ¡rodnÃ¡ kniÅ¾nica koordinuje rozvoj KniÅ¾niÄnÃ©ho systÃ©mu Slovenskej republiky a zabezpeÄuje modernizÃ¡ciu poskytovanÃ½ch kniÅ¾niÄnÃ½ch a informaÄnÃ½ch sluÅ¾ieb. SNK priamo spolupracuje s domÃ¡cimi a zahraniÄnÃ½mi inÅ¡titÃºciami. SNK bola v rokoch 2012 - 2015 rieÅ¡iteÄ¾om nÃ¡rodnÃ©ho projektu DigitÃ¡lna kniÅ¾nica a digitÃ¡lny archÃ­v (DIKDA), ktorÃ½ bol spolufinancovanÃ½ z EurÃ³pskeho fondu regionÃ¡lneho rozvoja (ERDF). Projekt bol zameranÃ½ na masovÃº digitalizÃ¡ciu kniÅ¾niÄnÃ½ch a archÃ­vnych fondov, ochranu pÃ­somnÃ©ho kultÃºrneho dediÄstva (papiera) pred nevyhnutnou degradÃ¡ciou. SlovenskÃ¡ nÃ¡rodnÃ¡ kniÅ¾nica bola zapojenÃ¡ do digitalizÃ¡cie kultÃºrneho dediÄstva Slovenska, vzniknutÃ½ digitÃ¡lny obsah je sprÃ­stupnenÃ½ na portÃ¡li Slovakiana."
135,392,0.52,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"dvoch vzorov nazÃ½va hybridnÃ½ vzor, z oho vyplÃ½va aj pomenovanie prÃ­stupu. Vzory sÃº v tomto kontexte reprezentovanÃ© pomocou trojice vlastnostÃ­ klasifikanÃ½ch kritÃ©riÃ­: Vzor [AplikovanÃ© na, ÃÃ¾el, JedineÃ¾nÃ½ vÃ½znam],"
41,90,0.52,InformaÄnÃ© vzdelÃ¡vanie,"spracovaÅ¥. Hranicu, kedy k tomu dochÃ¡dza vÅ¡ak nemÃ¡me presne stanovenÃº a zÃ¡visÃ­ od konkrÃ©tneho jednotlivca a vÅ¡etkÃ½ch, na neho pÃ´sobiach vplyvov. InformaÄnÃº explÃ³ziu definuje predovÅ¡etkÃ½m [33]: â¢ prebytok informÃ¡ciÃ­, â¢ prebytok publikÃ¡ciÃ­, â¢ prebytok zÃ¡znamovÃ½ch materiÃ¡lov, â¢ explÃ³zia Å¡Ã­renia informÃ¡ciÃ­ a infraÅ¡truktÃºry â¢ prudkÃ½ rozvoj informaÄnÃ½ch technolÃ³giÃ­ NajmÃ¤ vÄaka rozvoju informatiky a s Åou spojenÃ½ch sluÅ¾ieb, ako je rozvoj komunikaÄnÃ½ch sluÅ¾ieb prostrednÃ­ctvom Internetu. DochÃ¡dza k tomu, Å¾e jednotlivec pociÅ¥uje schopnosÅ¥ a potrebu byÅ¥ neustÃ¡le informovanÃ½, byÅ¥ v obraze, mÃ¡ potrebu neustÃ¡le zÃ­skavaÅ¥ informÃ¡cie, aj napriek tomu, Å¾e v mnohÃ½ch prÃ­padoch ide o informÃ¡cie, ktorÃ© reÃ¡lne nepotrebuje VznikÃ¡ syndrÃ³m informaÄnej Ãºnavy (Information Fatigue Sydrome), ktorÃ½ sa prejavuje ako: â¢ nÃ­zka koncentrÃ¡cia v dÃ´sledku preÅ¥aÅ¾enia krÃ¡tkodobej pamÃ¤te, â¢ multitasking, ktorÃ½ Äasto vedie skÃ´r k znÃ­Å¾eniu neÅ¾ k zvÃ½Å¡eniu produktivity, â¢ ârÃ½chlostnÃ¡ chorobaâ, resp. presvedÄenie, Å¾e sa Älovek musÃ­ neustÃ¡le ponÃ¡hÄ¾aÅ¥, aby drÅ¾al krok s Äasom, â¢ nespokojnosÅ¥, zlosÅ¥, ktorÃ© mÃ´Å¾u viesÅ¥ k chronickÃ©mu stavu podrÃ¡Å¾denosti blÃ­zkemu hnevu, â¢ nadmernÃ¡ stimulÃ¡cia, ktorÃ¡ spÃ´sobuje, Å¾e mozog sa ako keby vypne a vstÃºpi do stavu podobnÃ©mu tranzu, â¢ potreba alebo povinnosÅ¥ byÅ¥ pripojenÃ½, kontrolovaÅ¥ e-mail, sprÃ¡vy,sociÃ¡lne siete a pod. pod zÃ¡mienkou âzostaÅ¥ v kontakteâ, Z hÄ¾adiska tÃ½chto faktorov potom hovorÃ­me, Å¾e informaÄnÃ¡ hygiena by mala byÅ¥ prostriedkom na ochranu a eliminÃ¡ciu pred informaÄnÃ½m preÅ¥aÅ¾enÃ­m. InformaÄnÃ¡ hygiena je sÃºÄasÅ¥ou duÅ¡evnej hygieny a je ochrannÃ½m prostriedkom pred rizikom informaÄnÃ©ho preÅ¥aÅ¾enia. Aby bola ÃºÄinnÃ¡, musÃ­ sa na jej aplikÃ¡cii podieÄ¾aÅ¥ sprostredkovateÄ¾, ako aj konzument informÃ¡ciÃ­. InformaÄnÃ¡ hygiena pracuje s nÃ¡strojmi, medzi ktorÃ© zahÅÅame [33]: â informaÄnÃº gramotnosÅ¥ â vyhodnotiÅ¥ nevyhnutnosÅ¥ a potrebnosÅ¥ informÃ¡cie, schopnosÅ¥ informÃ¡cie vyhÄ¾adÃ¡vaÅ¥, vyhodnocovaÅ¥ a efektÃ­vne vyuÅ¾Ã­vaÅ¥ â racionÃ¡lne ÄÃ­tanie - nezameriava sa na kvalitu informÃ¡ciÃ­ a informaÄnÃ½ch zdrojov, no pomÃ¡ha pouÅ¾Ã­vateÄ¾ovi pri orientÃ¡cii sa vo veÄ¾kom mnoÅ¾stve informÃ¡ciÃ­, kombinuje rÃ½chle vyhÄ¾adÃ¡vanie, Å¡tÃºdioum a ÄÃ­tanie â mediÃ¡lnu gramotnosÅ¥ - schopnosÅ¥ Äloveka prijÃ­maÅ¥, analyzovaÅ¥ a hodnotiÅ¥ mediÃ¡lne obsahy v Å¡irÅ¡om kontexte."
240,89,0.52,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"MoÅ¾no nie Ãºplne jasnÃ© je vyhodnotenie vÃ½razu 2**p v riadku 3, ktorÃ© bez medzier mÃ´Å¾e vyzeraÅ¥ trochu zmÃ¤toÄne: dereferenÄnÃ½ operÃ¡tor * (hviezdiÄka) mÃ¡ vyÅ¡Å¡iu precendenciu (prioritu pri vyhodnocovanÃ­ vo vÃ½razoch) ako operÃ¡tor nÃ¡sobenia * (hviezdiÄka), a teda najskÃ´r sa zo smernÃ­ku p urÄÃ­ hodnota na ktorÃº ukazuje (8) a aÅ¾ potom sa tÃ¡to hodnota vynÃ¡sobÃ­ 2. Do premennej a sa preto priradÃ­ 2*8+1 = 17. Ãloha 1-14 (rieÅ¡enie) PriebeÅ¾nÃ© Ãºpravy hodnÃ´t premennÃ½ch uvÃ¡dzame v komentÃ¡roch na konci riadkov:"
190,70,0.52,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KaÅ¾dÃ½ tÃ­m tvoria unikÃ¡tni jedinci. Na svete zrejme neexistujÃº dvaja Ãºplne rovnakÃ­ Ä¾udia. TÃ¡to unikÃ¡tnosÅ¥ spolu s nutnosÅ¥ou vzÃ¡jomnej interakcie v tÃ­me mÃ¡ na svedomÃ­ vznik konfliktu medzi jednotlivÃ½mi Älenmi tÃ­mu. Konflikt je Äasto podmienenÃ½ osobnostnÃ½mi charakteristikami ÃºÄastnÃ­kov konfliktu. Predpoklady na vznik konfliktu vÅ¡ak mÃ´Å¾u vychÃ¡dzaÅ¥ aj z pracovnej pozÃ­cie jednotlivcov v tÃ­me. DobrÃ½ manaÅ¾Ã©r tÃ­mu by nemal nechaÅ¥ konflikty v tÃ­me nepovÅ¡imnutÃ© a neriadenÃ©, ak mu zÃ¡leÅ¾Ã­ na tom, aby tÃ­m vyprodukoval kvalitnÃ½ vÃ½sledok a aby sa jednotlivÃ­ Älenovia v tÃ­me cÃ­tili dobre. Ak chceme ÄokoÄ¾vek ÃºspeÅ¡ne riadiÅ¥, musÃ­me to dobre poznaÅ¥. Preto v tejto eseji definujem Äo je konflikt a rozoberÃ¡m jeho potenciÃ¡lne zdroje a spÃ´soby jeho riadenia. Å pecificky sa zameriavam na softvÃ©rovÃ© tÃ­my, v ktorÃ½ch je typickÃ½ konflikt medzi vÃ½vojÃ¡rmi a testermi. Riadenie konfliktov v tÃ­me vysvetÄ¾ujem prÃ¡ve na sporoch medzi tÃ½mito dvoma sÃº- DobrÃ½ manaÅ¾Ã©r ÄasÅ¥ami kaÅ¾dÃ©ho dobrÃ©ho softvÃ©rovÃ©ho tÃ­mu."
190,448,0.52,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PouÄenie: K tvorbe softvÃ©ru treba pristupovaÅ¥ systematicky a plÃ¡novaÅ¥. TieÅ¾ treba vyvÃ­janÃ½ softvÃ©r priebeÅ¾ne testovaÅ¥, aby sa prediÅ¡lo zbytoÄnÃ½m chybÃ¡m, ktorÃ© sa lacnejÅ¡ie opravujÃº pri vÃ½voji. KeÄÅ¾e sa tak stÃ¡le nedeje, treba stÃ¡le viac a viac softvÃ©rovÃ½ch inÅ¾inierov :)"
43,229,0.52,Objektovo orientovanÃ© programovanie v C++,"Na prvÃ½ pohÄ¾ad vyzerÃ¡ tento program v poriadku a pri kompilÃ¡cii nenastane nijakÃ¡ chyba. Teraz si vÅ¡ak dobre vÅ¡imnime, Äo sa deje v poslednom riadku pri priraÄovanÃ­. V prvom riadku hlavnÃ©ho programu, keÄ vznikli objekty T1 a T2, si kaÅ¾dÃ½ objekt alokoval v pamÃ¤ti svoje vlastnÃ© miesto pre tri objekty triedy bod. Objekt T1 si tam uloÅ¾il sÃºradnice svojich vrcholov, objekt T2 vÅ¡ak nie. Pri priradenÃ­ sa objekt T2 stane presnou kÃ³piou objektu T1. To znamenÃ¡, Å¾e aj smernÃ­k V objektu T2 bude po priradenÃ­ ukazovaÅ¥ presne na to istÃ© miesto ako smernÃ­k V objektu T1. SplnenÃ¡ je aj Ãºloha priradiÅ¥ trojuholnÃ­ku T2 rovnakÃ© vrcholy, ako mÃ¡ T1. Äo sa vÅ¡ak stalo s miestom, na ktorÃ© ukazoval smernÃ­k V objektu T2 pÃ´vodne? TÃ¡to otÃ¡zka nÃ¡s privedie k problÃ©mu â prÃ­sluÅ¡nÃ© miesto nebolo uvoÄ¾nenÃ©, ale uÅ¾ naÅ neukazuje nijakÃ½ smernÃ­k, je s nÃ­m teda nenÃ¡vratne preruÅ¡enÃ© spojenie a vznikol memory leak. Pri zÃ¡niku objektov sa oba deÅ¡truktory budÃº pokÃºÅ¡aÅ¥ dealokovaÅ¥ to istÃ© miesto, a to je problÃ©m, ktorÃ½ mÃ´Å¾e viesÅ¥ aÅ¾ ku krachu programu. RieÅ¡enie tohto problÃ©mu sa objavÃ­ v kapitole 7 venovanej polymorï¬zmu. ZatiaÄ¾ si zapamÃ¤tajme, Å¾e ak trieda medzi Ãºdajmi obsahuje smernÃ­ky, je to z hÄ¾adiska priraÄovania Å¡peciÃ¡lny prÃ­pad, ktorÃ½ si vyÅ¾aduje Å¡peciÃ¡lne zaobchÃ¡dzanie."
43,90,0.52,Objektovo orientovanÃ© programovanie v C++,"C++ ponÃºka eÅ¡te jednu moÅ¾nosÅ¥, ako otvoriÅ¥ sÃºbor. UÅ¾ vieme, Å¾e sÃºbor je objekt niektorej z tried ifstream, ofstream alebo fstream. KaÅ¾dÃ¡ z tÃ½chto tried mÃ¡ svoj konÅ¡truktor, ktorÃ½ sa spustÃ­ automaticky vÅ¾dy, keÄ vznikÃ¡ jej novÃ½ objekt. V skutoÄnosti majÃº tieto triedy viacero verziÃ­ konÅ¡truktora. Jedna z nich umoÅ¾Åuje otvoriÅ¥ fyzickÃ½ sÃºbor priamo pri vytvÃ¡ranÃ­ objektu. Parametre konÅ¡truktora sÃº rovnakÃ© ako v prÃ­pade metÃ³dy open. Teda, ak naprÃ­klad chceme otvoriÅ¥ sÃºbor na ÄÃ­tanie, mÃ´Å¾eme napÃ­saÅ¥ fstream subor(""test.xxx"",fstream::in);"
265,315,0.52,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UvaÅ¾ujte nasledujÃºce: âIntegraÄnÃ© testy by sme mohli pripraviÅ¥ tak, aby pokrÃ½vali celÃº funkcionalitu prÃ­sluÅ¡nÃ©ho komponentu a uÅ¡etrili by sme tak veÄ¾a prÃ¡ce s tvorbou (a udrÅ¾iavanÃ­m) jednotkovÃ½ch testov v rÃ¡mci komponentu. Pre otestovanie komponentu by sme vÅ¾dy spustili integraÄnÃ© testy a ak sme v poslednej iterÃ¡cii nieÄo spravili zle, ukÃ¡Å¾e sa to.â PreÄo teda nepouÅ¾Ã­vame iba integraÄnÃ© testovanie, ale aj jednotkovÃ© testovanie? Hoci Ãºvaha o ÃºsilÃ­ je platnÃ¡, proti takejto praxi sÃº dÃ´leÅ¾itejÅ¡ie dÃ´vody: 1. VytvoriÅ¥ integraÄnÃ© testy zvyÄajne vieme len pomocou prÃ­stupu Äierna skrinka. Zapojenie metÃ³d bielej skrinky je pre veÄ¾kÃ½ komponent, resp. jeho vnÃºtornÃº zloÅ¾itosÅ¥ prÃ­liÅ¡ nÃ¡roÄnÃ©. LenÅ¾e aj pre Äiernu skrinku je veÄ¾kÃ½ komponent rovnakÃ½ problÃ©m: s narastajÃºcou zloÅ¾itosÅ¥ou sa Äoraz Å¥aÅ¾Å¡ie dajÃº predpovedaÅ¥ triedy ekvivalencie. Z tohto vyplÃ½va, Å¾e len samotnÃ© integraÄnÃ© testy nikdy nebudÃº maÅ¥ schopnosÅ¥ dostatoÄne strÃ¡Å¾iÅ¥ pred chybami, vyplÃ½vajÃºcimi z nepredpokladanÃ½ch kombinÃ¡ciÃ­ okolnostÃ­. Preto si radÅ¡ej v zmysle stratÃ©gie ârozdeÄ¾uj a panujâ, rozloÅ¾Ã­me komponent na menÅ¡ie Äasti a testujeme ich jednotlivo (jednotkovo), pretoÅ¾e menÅ¡ie Äasti vieme Ä¾ahÅ¡ie bielo-skrinkovÃ½m prÃ­stupom analyzovaÅ¥. 2. IntegraÄnÃ© testy, keÄÅ¾e spÃºÅ¡Å¥ajÃº programy v celej svojej zloÅ¾itosti, spravidla trvajÃº dlho (Å¡peciÃ¡lne ak zahÅÅajÃº emulovanie sprÃ¡vania pouÅ¾Ã­vateÄ¾a na pouÅ¾Ã­vateÄ¾skom rozhranÃ­). A eÅ¡te dlhÅ¡ie by trvali, ak by sme sa predsa len pokÃºsili prekonaÅ¥ problÃ©m z bodu 1 a naozaj poctivo a dÃ´sledne by sme sa snaÅ¾ili prÃ­stupom bielej skrinky nadefinovaÅ¥ Äo najviac mnoÅ¾Ã­n testovacÃ­ch Ãºdajov. ReÃ¡lne by nÃ¡m ich poÄet prerÃ¡stol cez hlavu veÄ¾mi rÃ½chlo: veÄ pridanie Äo i len jednej podmienky v programe v skutoÄnosti znamenÃ¡ zdvojnÃ¡sobenie vÅ¡etkÃ½ch moÅ¾nostÃ­, ktorÃ© treba preskÃºmaÅ¥. RozdelenÃ­m na menÅ¡ie Äasti v rÃ¡mci jednotkovÃ©ho testovania opÃ¤Å¥ tento problÃ©m zmierÅujeme. 3. S jednotkovÃ½mi testami vieme lepÅ¡ie lokalizovaÅ¥, kde nastali problÃ©my v dÃ´sledku nedÃ¡vnych zmien v softvÃ©ri. Ak by sme pouÅ¾Ã­vali len integraÄnÃ© testy, po vykonanÃ­ zmien v komponente by sme sa sÃ­ce po ich spustenÃ­ dozvedeli, Å¾e sme nieÄo pokazili, no nevedeli by sme presne hneÄ, 4. IntegraÄnÃ© testy sa nevykonÃ¡vajÃº tak Äasto (ich beh spravidla dlhÅ¡ie trvÃ¡ a ich ÄastÃ© spÃºÅ¡Å¥anie by spomaÄ¾ovalo vÃ½voj). Teda aj chyby sa odhaÄ¾ujÃº"
205,1,0.519,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy",Kniha vznikla a bola vydanÃ¡ s finanÄnou podporou projektu AgentÃºry na podporu vÃ½skumu a vÃ½voja: APVV-0208-10 KognitÃ­vne cestovanie po digitÃ¡lnom svete webu a kniÅ¾nÃ­c s podporou personalizovanÃ½ch sluÅ¾ieb a sociÃ¡lnych sietÃ­ a s podporou projektov Vedeckej grantovej agentÃºry Ministerstva Å¡kolstva Slovenskej republiky a Slovenskej akadÃ©mie vied (VEGA): VG 1/0675/11 KontextovÃ© vyhÄ¾adÃ¡vanie a prehliadanie informÃ¡ciÃ­ v sociÃ¡lnom prostredÃ­ webu VG 1/0752/14. InteligentnÃ¡ analÃ½za veÄ¾kÃ½ch ÃºdajovÃ½ch korpusov sÃ©manticky-orientovanÃ½mi a bioinÅ¡pirovanÃ½mi metÃ³dami v paralelnom prostredÃ­. PublikÃ¡ciu podporili:
111,128,0.519,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"respondenti poÄas nÃ¡kupu vykonali, zistÃ­me, kde sa vyskytli problÃ©my a ako zlepÅ¡iÅ¥ nÃ¡kupnÃ½ koÅ¡Ã­k. NajlepÅ¡ie vÃ½sledky dosiahnete, keÄ sa respondenti s Ãºlohami stotoÅ¾nia a budÃº ich vykonÃ¡vaÅ¥ tak, ako by to robili v reÃ¡lnom Å¾ivote. Preto je dÃ´leÅ¾itÃ© vyberaÅ¥ Ãºlohy, ktorÃ© sÃº pre respondentov relevantnÃ© a zaujÃ­mavÃ©. NaprÃ­klad, ak testujete nÃ¡kup televÃ­zora, mali by ste osloviÅ¥ Ä¾udÃ­, ktorÃ­ majÃº zÃ¡ujem o elektroniku a zvyknÃº si ju kupovaÅ¥ online. Simulujte reÃ¡lnu situÃ¡ciu aby ste pomohli respondentom dosiahnuÅ¥ sprÃ¡vne myslenie pri vykonÃ¡vanÃ­ Ãºloh. Formulujte Ãºlohy tak, aby ste respondenta uviedli do problÃ©mu a podnietili v Åom potrebu hÄ¾adania rieÅ¡enia. Namiesto: âKÃºpte si televÃ­zor podÄ¾a vlastnÃ©ho vÃ½beru.â by ste Ãºlohu mohli formulovaÅ¥: âChystÃ¡te sa kÃºpiÅ¥ novÃ½ televÃ­zor. NÃ¡jdite si televÃ­zor, ktorÃ½ sa vÃ¡m pÃ¡Äi, a kÃºpte si ho.â ZatiaÄ¾ Äo prvÃ½ nÃ¡vrh vedie respondenta k tomu, aby nieÄo mechanicky naÅ¡iel, v druhom nÃ¡vrhu mu pomÃ¡hame pochopiÅ¥ problÃ©m, zamyslieÅ¥ sa nad nÃ­m viac ako len po povrchu a zvÃ¡Å¾iÅ¥, ako by k nemu sÃ¡m pristÃºpil. ÄalÅ¡Ã­m spÃ´sobom, ako pomÃ´cÅ¥ respondentom skutoÄne sa stotoÅ¾niÅ¥ s Ãºlohami, je ponechaÅ¥ im urÄitÃº voÄ¾nosÅ¥ pri definovanÃ­ ich cieÄ¾a a pokÃºsiÅ¥ sa osloviÅ¥ Ä¾udÃ­, ktorÃ­ sa vedia aktuÃ¡lne s cieÄ¾om (situÃ¡ciou) stotoÅ¾niÅ¥. Namiesto toho, aby ste Ãºlohu dali vÅ¡eobecne respondentom z vaÅ¡ej cieÄ¾ovej skupiny: âKÃºpte si najlacnejÅ¡Ã­ televÃ­zor z ponuky.â, pokÃºste sa zÃ­skaÅ¥ respondentov cielenejÅ¡ie. Oslovte takÃ½ch, ktorÃ­ majÃº prÃ¡ve zÃ¡ujem o kÃºpu novÃ©ho televÃ­zora, a poÅ¾iadajte ich: âNÃ¡jdite si televÃ­zor, ktorÃ½ sa vÃ¡m pÃ¡Äi, a kÃºpte si ho.â. Pri pÃ­sanÃ­ Ãºloh je vÅ¾dy lepÅ¡ie poÅ¾iadaÅ¥ respondentov, aby nieÄo urobili, neÅ¾ sa ich pÃ½taÅ¥, ako by to urobili. NaprÃ­klad otÃ¡zka: âAko by ste postupovali pri kÃºpe televÃ­zora, ktorÃ½ sa vÃ¡m pÃ¡Äi?â je zlÃ¡ Ãºloha. OveÄ¾a lepÅ¡ou moÅ¾nosÅ¥ou by bolo napÃ­saÅ¥: âNÃ¡jdite televÃ­zor, ktorÃ½ sa vÃ¡m pÃ¡Äi, a kÃºpte si ho.â To, Äo chceme skÃºmaÅ¥, sÃº akcie respondenta. To, Äo respondenti hovoria a to, Äo robia, mÃ´Å¾e byÅ¥ Ãºplne odliÅ¡nÃ©. To, Äo respondenti v skutoÄnosti robia, je pre odhalenie problÃ©mov s UX oveÄ¾a spoÄ¾ahlivejÅ¡ie. Tvrdenia respondentov treba vyhodnocovaÅ¥ dÃ´sledne a s rozvahou [14], mÃ´Å¾u byÅ¥ zafarbenÃ©, doplnenÃ© o fantÃ¡ziu, napr. âmne by sa pÃ¡Äilo, keby tam bola tÃ¡ka funkcia, ktorÃ¡ by. . . â. Å½e by sa niekomu nieÄo pÃ¡Äilo, eÅ¡te neznamenÃ¡, Å¾e mÃ¡te Ã­sÅ¥ hneÄ meniÅ¥ vaÅ¡u aplikÃ¡ciu alebo to implementovaÅ¥. Treba nÃ¡zory vnÃ­maÅ¥, ale v Å¡irÅ¡om kontexte aj ÄalÅ¡Ã­ch podpornÃ½ch tvrdenÃ­ a"
59,81,0.519,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"5. Toto zobrazenie priradÃ­ dvojici stavu a vstupu v Äase t-1 novÃ½ stav v Äase t a ïï Å¡pecifikuje topolÃ³giu neurÃ³novej siete. 6. Funkcia g : S ï´ I ï® O priradÃ­ kaÅ¾dÃ©mu stavu a vstupu vÃ½stupnÃ½ symbol. Podobne ako aj v predchÃ¡dzajÃºcom prÃ­pade, aj tÃ¡to funkcia je plne Å¡pecifikovanÃ¡ zobrazenÃ­m (2.23)"
196,128,0.519,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"V prÃ­pade farebnÃ©ho textu je potrebnÃ© pouÅ¾itâ balÃ­k xcolor [38]. ZaujÃ­mavÃ© sÃº parametre tohto balÃ­ka: dvipsnames (farby sÃº definovanÃ© v CMYK) a dvojica svgnames, x11names (farby sÃº definovanÃ© v RGB). V prÃ­pade dvipsnames je potrebnÃ© kvÃ´li tienÌovaniu uviestâ aj parameter cmyk najmÃ¤ v sÃºvislosti s triedou prezentÃ¡cia a v prÃ­pade svgnames, x11names. Farbu pÃ­sma mÃ´Å¾me definovatâ pre pre vÃ¤cÌÅ¡iu oblastâ ako napr. zoznam cÌi dokument a pod., kedy ostÃ¡va v platnosti od momentu pouÅ¾itia v rÃ¡mci prostredia, alebo len pre vybranÃ½ text v zloÅ¾enÃ½ch zÃ¡tvorkÃ¡ch."
76,265,0.519,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"veliÄiny + ... + sa blÃ­Å¾i k normÃ¡lnemu rozdeleniu (a to bez ohÄ¾adu na to, Äi je kocka normÃ¡lna, alebo faloÅ¡nÃ¡). Uvedomme si, Å¾e v tomto prÃ­pade sÃº veliÄiny diskrÃ©tne, a preto pre kaÅ¾dÃ© aj sÃºÄet je diskrÃ©tna veliÄina, napr. = {50, 51, ... , 300}. Ak vÅ¡ak je dostatoÄne veÄ¾kÃ©, rozdelenie sÃºÄtu + ... + mÃ´Å¾eme aproximovaÅ¥ rozdelenÃ­m normÃ¡lnym â teda spojitÃ½m rozdelenÃ­m. Toto ilustrujÃº Ãºlohy 5.2.2 a 5.2.3. 5.2.4 PoznÃ¡mka. Nech ( ) je postupnosÅ¥ nezÃ¡vislÃ½ch, rovnako rozdelenÃ½ch nÃ¡hodnÃ½ch veliÄÃ­n, priÄom E( ) = a var( ) = (Å¾iadne konkrÃ©tne rozdelenie nemÃ¡me na mysli). Aj keÄ rozdelenie veliÄiny nepoznÃ¡me (samozrejme, veÄ nepoznÃ¡me rozdelenie ), vieme urÄiÅ¥ strednÃº hodnotu a varianciu veliÄiny . Zrejme platÃ­:"
40,60,0.519,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Krok 2. V tomto kroku vypoÄÃ­tame maticu M (matica vnÃºtornÃ½ch stavov neurÃ³novej siete) a maticu T (matica poÅ¾adovanÃ½ch vÃ½stupov neurÃ³novej siete) â je to takzvanÃ¡ vzorkovacia fÃ¡za. Tento krok je len mechanickÃ½ a nezahÅÅa Å¾iadnu heuristiku: 1. NÃ¡hodne nainicializujeme poÄiatoÄnÃ© stavy neurÃ³novej siete, naprÃ­klad nulovÃ© stavy x (0) = 0 . 2. NÃ¡sledne zaÄneme sieti predkladaÅ¥ jednotlivÃ© kombinÃ¡cie vstupov u (n) a k nim odpovedajÃºcich poÅ¾adovanÃ½ch vÃ½stupov d (n â 1) . To opakujeme pre"
130,363,0.519,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"AnalÃ½za vzÅ¥ahov medzi agentmi ÄerpÃ¡ mnohÃ© poznatky zo sociolÃ³gie a naopak, sociolÃ³gia bola obohatenÃ¡ poznatkami zÃ­skanÃ½mi Å¡tÃºdiom multiagentovÃ½ch systÃ©mov. Z oboru sociolÃ³gie pochÃ¡dza aj definÃ­cia jednÃ©ho z hlavnÃ½ch pojmov, ktorÃ½mi sa zaoberajÃº multiagentovÃ© systÃ©my: OrganizÃ¡cia je usporiadanie vzÅ¥ahov medzi komponentmi a jedincami, ktorÃ© vytvÃ¡ra jeden celok (systÃ©m) s vlastnosÅ¥ami, ktorÃ© sa nevyskytujÃº na Ãºrovni komponentov a jedincov (Ferber, 1999). ExistujÃº aj inÃ© definÃ­cie organizÃ¡cie, naprÃ­klad Romelaer definuje organizÃ¡ciu ako mnoÅ¾inu Ä¾udÃ­, ktorÃ­ medzi sebou majÃº pravidelnÃ© a predvÃ­dateÄ¾nÃ© vzÅ¥ahy (Romelaer, 2002). Mintzberg definuje organizÃ¡ciu ako spÃ´sob rozdeÄ¾ovania a koordinÃ¡cie prÃ¡ce medzi organizaÄnÃ© jednotky (Äasti organizÃ¡cie) (Mintzberg, 1979). Vo vÅ¡etkÃ½ch tÃ½chto definÃ­ciÃ¡ch hrajÃº hlavnÃº Ãºlohu jedinci (Äi uÅ¾ Ä¾udia, agenty alebo ich zoskupenia) a vzÃ¡jomnÃ© vzÅ¥ahy medzi nimi. OrganizÃ¡cia je tvorenÃ¡ vzÅ¥ahmi medzi jej ÄasÅ¥ami. ZÃ¡roveÅ vÅ¡ak organizÃ¡cia umoÅ¾Åuje vzÅ¥ahom vznikaÅ¥ a existovaÅ¥. ReÃ¡lne organizÃ¡cie, Äi uÅ¾ tie, ktorÃ½mi sa zaoberÃ¡ sociolÃ³gia alebo tie zloÅ¾enÃ© z agentov, sÃº v drvivej vÃ¤ÄÅ¡ine dynamickÃ©. VzÅ¥ahy v organizÃ¡cii vznikajÃº, zanikajÃº a menia svoj charakter, do organizÃ¡cie prichÃ¡dzajÃº novÃ­ jedinci, pohybujÃº sa v nej a odchÃ¡dzajÃº. Na pozadÃ­ tÃ½chto premien vÅ¡ak ostÃ¡va nezmenenÃ¡ statickÃ¡ ÄasÅ¥ organizÃ¡cie â jej Å¡truktÃºra."
240,371,0.519,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"RekurzÃ­vne rieÅ¡enie: RekurzÃ­vne rieÅ¡enie spracuje v jednom rekurzÃ­vnom volanÃ­ jeden prvok poÄ¾a. ZÃ¡kladnÃ½ prÃ­pad, resp. terminÃ¡lna podmienka, v ktorom rekurzÃ­vna funkcia urÄÃ­ vÃ½sledok bez ÄalÅ¡ieho rekurzÃ­vneho volania (vnorenia), nastÃ¡va keÄ pole a neobsahuje prvky (n == 0), a teda neobsahuje ani zÃ¡pornÃ© ÄÃ­slo a vÃ½sledok je preto"
130,542,0.519,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Aj keÄ vÃ½skum v oblasti adaptÃ­vnych hypermÃ©diÃ­ trvÃ¡ relatÃ­vne krÃ¡tko (pribliÅ¾ne 10 rokov), za ten Äas sa vykryÅ¡talizovali metÃ³dy a techniky, pomocou ktorÃ½ch je moÅ¾nÃ© dosiahnuÅ¥ prispÃ´sobovanie. Brusilovsky (1996) definuje adaptÃ­vnu metÃ³du ako abstrakciu adaptÃ­vnych technÃ­k. AdaptÃ­vna technika je pritom definovanÃ¡ spÃ´sobom"
130,519,0.518,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,V kapitole 9.3 najprv charakterizujeme najznÃ¡mejÅ¡ie referenÄnÃ© modely pre modelovanie adaptÃ­vnych hypermediÃ¡lnych systÃ©mov. Äalej uvedieme spÃ´soby vytvÃ¡rania uvedenÃ½ch modelov v existujÃºcich hypermediÃ¡lnych systÃ©moch. Na zÃ¡ver zhrnieme otvorenÃ© problÃ©my spojenÃ© s tvorbou adaptÃ­vnych hypermediÃ¡lnych systÃ©mov a naÄrtneme moÅ¾nosti ÄalÅ¡ieho vÃ½skumu.
66,135,0.518,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"5.2 Hash index Pre tento typ indexu je potrebnÃ© zadefinovaÅ¥ pojem oblasÅ¥ (z angl. bucket), do ktorej budÃº ukladanÃ© kÄ¾ÃºÄe a record id. PrincÃ­p fungovania je zaloÅ¾enÃ½ na hash funkcii, do ktorej vstupuje hÄ¾adanÃ½ kÄ¾ÃºÄ. VÃ½sledkom je ÄÃ­slo oblasti, v ktorej sa mÃ¡ nachÃ¡dzaÅ¥ danÃ½ zÃ¡znam (rozumieme record_id) alebo v prÃ­pade modifikÃ¡cie zÃ¡znamu je to, kam ma byÅ¥ danÃ½ zÃ¡znam uloÅ¾enÃ½. Z pohÄ¾adu databÃ¡zovÃ© systÃ©mu je dÃ´leÅ¾itÃ½ vÃ½ber hash funkcie, pretoÅ¾e nie je potrebnÃ© maÅ¥ kryptografickÃº hash funkciu (napr. sha-256), ktorÃ¡ sÃ­ce nedÃ¡va kolÃ­zie, ale pre potreby rÃ½chleho vyhÄ¾adÃ¡vania je pomalÃ¡. Je dÃ´leÅ¾itÃ© maÅ¥ rÃ½chlu hash funkciu s primeranÃ½m poÄtom kolÃ­ziÃ­ pre indexovanÃ© dÃ¡ta. PrincÃ­p fungovania je znÃ¡zornenÃ½ na Obr. 11. V rÃ¡mci prÃ­kladu je pouÅ¾itÃ¡ hash funkcia mod 4. JednotlivÃ© hodnoty sÃº uloÅ¾enÃ© do oblastÃ­. KaÅ¾dÃ¡ oblasÅ¥ mÃ´Å¾e obsahovaÅ¥ rÃ´zne hodnoty, a preto pri vyhÄ¾adÃ¡vanÃ­ zÃ¡znamu je potrebnÃ© eÅ¡te vyhÄ¾adaÅ¥ kÄ¾ÃºÄ aj v samotnÃ½ch strÃ¡nkach danej oblasti. V prÃ­pade, Å¾e prvÃ¡ strÃ¡nka oblasti je uÅ¾ plnÃ¡, tak je potrebnÃ© zapisovaÅ¥ ÄalÅ¡ie zÃ¡znamy na druhÃº strÃ¡nku. PrvÃ¡ strÃ¡nka bude nÃ¡sledne ukazovaÅ¥ na druhÃº strÃ¡nku. Pri prehÄ¾adÃ¡vanÃ­ danej oblasti je potrebnÃ© prejsÅ¥ vÅ¡etky zreÅ¥azenÃ© strÃ¡nky. Takto zreÅ¥azene strÃ¡nky sa nazÃ½vajÃº overflow strÃ¡nky (z angl. overflow pages)."
59,581,0.518,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"AkÃ¡ je Ãºloha uÄiteÄ¾a (angl. supervisor) v tomto vÅ¡eobecnom prÃ­stupe k uÄeniu agenta interagujÃºceho so systÃ©mom? V Å¡tandardnom prÃ­stupe k uÄeniu agenta uÄiteÄ¾ vyhodnocuje vÃ½stupy agenta, ktorÃ© je agent schopnÃ½ ovlÃ¡daÅ¥ svojÃ­m vÃ½stupom (blÃ­zkou premennou). V Äalej rozoberanom vÅ¡eobecnom prÃ­stupe uÄiteÄ¾ vyhodnocuje aÅ¾ vÃ½sledok systÃ©mu, ktorÃ½ agent mÃ´Å¾e ovlÃ¡daÅ¥ len sprostredkovane pomocou akciÃ­. TÃ½mto dochÃ¡dza k podstatnÃ©mu posunu vÃ½znamu uÄenia. V Å¡tandardnom prÃ­stupe uÄiteÄ¾ hodnotÃ­ bezprostrednÃ½ vÃ½stup agenta, ktorÃ½ je schopnÃ½ agent ovlÃ¡daÅ¥ svojou intenciou. V tomto vÅ¡eobecnom prÃ­stupe uÄiteÄ¾ hodnotÃ­ vzdialenÃ½ vÃ½stup systÃ©mu, ktorÃ½ agent mÃ´Å¾e ovlÃ¡daÅ¥ len sprostredkovane pomocou svojich akciÃ­. NiekoÄ¾ko âpsychologickÃ½châ poznÃ¡mok o priebehu uÄenia sa v komplexe agent â systÃ©m: Proces uÄenia moÅ¾no rozdeliÅ¥ na dve etapy. V prvej etape si agent pomocou svojho kognitÃ­vneho orgÃ¡nu vytvÃ¡ra tzv. doprednÃ½ model (angl. feed-forward model) zloÅ¾itÃ©ho systÃ©mu, na zÃ¡klade svojich akciÃ­ sa uÄÃ­ predvÃ­daÅ¥ pre danÃ½ stav vÃ½stupy. V druhej etape agent adaptuje svoj kognitÃ­vny orgÃ¡n (vzhÄ¾adom na doprednÃ½ model), aby mohol transformovaÅ¥ predvÃ­danÃ© vÃ½stupy pomocou svojich akciÃ­, vytvÃ¡ra si vo svojom kognitÃ­vnom orgÃ¡ne tzv. inverznÃ½ model, pomocou ktorÃ©ho agent dokÃ¡Å¾e predvÃ­daÅ¥ akcie na zÃ¡klade jeho intencie a poÅ¾adovanÃ½ch vÃ½stupov systÃ©mu, ktorÃ© sÃº simulovanÃ© doprednÃ½m modelom. NaznaÄenÃ½ dvojetapovÃ½ model uÄenia, keÄ sa agent uÄÃ­ riadiÅ¥ komplexnÃ½ systÃ©m pomocou svojich akciÃ­ a zÃ¡merov, mÃ¡ dÃ´leÅ¾itÃ© postavenie v informatike a v kognitÃ­vnej vede samozrejme, aj v teÃ³rii riadenia). MÃ´Å¾e byÅ¥ uÅ¾itoÄnÃ½ na pochopenie reflexÃ­vnych aktivÃ­t Äloveka pri riadenÃ­ takÃ½ch komplexnÃ½ch zariadenÃ­, ako je napr. auto alebo lietadlo. NeobyÄajne veÄ¾kÃ¡ rÃ½chlosÅ¥, s akou Älovek reaguje pri riadenÃ­ komplexnÃ©ho zariadenia, podporuje hypotÃ©zu, Å¾e Älovek sa uÄÃ­ riadiÅ¥ systÃ©m v dvoch etapÃ¡ch. V prvej etape sa vytvÃ¡ra v mozgu doprednÃ½ model systÃ©mu, ktorÃ½ dokÃ¡Å¾e s dobrou presnosÅ¥ou predpovedaÅ¥ vÃ½stupy zariadenia na zÃ¡klade aktivÃ­t Äloveka. Tento doprednÃ½ model mÃ¡ veÄ¾kÃ½ vÃ½znam pre vznik reflexÃ­vneho riadenia celÃ©ho zariadenia na zÃ¡klade zÃ¡meru a aktuÃ¡lneho vÃ½stupu a stavu systÃ©mu. V druhej etape uÄenia sa uÅ¾ Älovek nemusÃ­ neustÃ¡le obracaÅ¥ na systÃ©m ako takÃ½, jeho odozvy sÃº simulovanÃ© doprednÃ½m modelom, predvÃ­da potrebnÃ© akcie ako odozvu na poÅ¾adovanÃ½ vÃ½stup pomocou inverznÃ©ho modelu. To umoÅ¾Åuje vznik reflexÃ­vneho (veÄ¾mi rÃ½chleho) âmoduluâ v mozgu na riadenie zloÅ¾itÃ½ch zariadenÃ­."
111,53,0.518,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"AnalÃ½za uzavretÃ½ch triedenÃ­ kariet UzavretosÅ¥ uzavretÃ©ho triedenia kariet vyplÃ½va zo skutoÄnosti, Å¾e vÅ¡etky kategÃ³rie sÃº urÄenÃ© vopred. NiektorÃ© z otÃ¡zok, ktorÃ© si moÅ¾no poloÅ¾iÅ¥ na zÃ¡klade uzavretÃ©ho triedenia kariet: â¢ Do ktorÃ½ch kategÃ³riÃ­ boli jednotlivÃ© karty zaradenÃ© najviac?"
393,142,0.518,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PoÅ¾iadavky pre vyjadrovaciu notÃ¡ciu ZvyÄajnÃ¡ vlastnosÅ¥ vÃ½razovÃ½ch notÃ¡ciÃ­ je prÃ­liÅ¡nÃ¡ zloÅ¾itosÅ¥ na Ãºkor efektÃ­vnosti. V sÃºvislosti s webom so sÃ©mantikou je toto tvrdenie vhodnejÅ¡ie poopraviÅ¥ do tvaru: âpokiaÄ¾ sa zvolÃ­ prÃ­liÅ¡ zloÅ¾itÃ¡ notÃ¡cia, ktorÃ¡ sa pouÅ¾Ã­va cez urÄitÃ© rozhrania, aÅ¾ toto samotnÃ© pouÅ¾itie sa dÃ¡ oznaÄiÅ¥ za neefektÃ­vneâ."
135,56,0.518,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Obaova sa pouÅ¾Ã­va v dvoch typickÃ½ch situÃ¡ciÃ¡ch: 1. SÃºiastky A a B uÅ¾ existujÃº a potrebujeme, aby spolupracovali, priom ich nemÃ´Å¾em (resp. to nie je vhodnÃ©) meni. 2. SÃºiastku A vytvÃ¡rame. SÃºiastka B uÅ¾ existuje, avÅ¡ak jej rozhranie Râ nÃ¡m nevyhovuje. DÃ´vodom mÃ´Å¾e by naprÃ­klad nÃ­zka Ãºrove abstrakcie, na ktorej Râ pracuje alebo technologickÃ¡ odliÅ¡nos Râ od A."
59,12,0.518,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1.3 KognitÃ­vna veda a psycholÃ³gia PsycholÃ³gia je veda [3,17], ktorÃ¡ sa zaoberÃ¡ reprezentÃ¡ciou a spracovanÃ­m informÃ¡cie Å¾ivoÄÃ­chmi s vyÅ¡Å¡ou nervovou aktivitou (a teda aj Ä¾uÄmi). Tieto sÃº schopnÃ© prijÃ­maÅ¥ informÃ¡ciu z okolia, vytvÃ¡raÅ¥ jej vnÃºtornÃº reprezentÃ¡ciu a transformovaÅ¥ ju s cieÄ¾om vÃ½beru a vÃ½konu akciÃ­. InteligentnÃ© informaÄnÃ© procesy sÃº vyjadrenÃ© schopnosÅ¥ou zÃ­skavaÅ¥ a spracovÃ¡vaÅ¥ informÃ¡ciu z okolia s cieÄ¾om vykonÃ¡vania adaptÃ­vnych akciÃ­, ktorÃ© zvyÅ¡ujÃº schopnosÅ¥ organizmu preÅ¾Ã­vaÅ¥ a rozmnoÅ¾ovaÅ¥ sa. V tejto sÃºvislosti je dÃ´leÅ¾itÃ½ pojem âadaptÃ­vna akciaâ, Äo znamenÃ¡, Å¾e proces vytvÃ¡rania akcie je vÃ½sledkom uÄenia organizmu v danom prostredÃ­ s cieÄ¾om optimalizÃ¡cie danej akcie. ÃstrednÃ½ problÃ©m Å¡tudovanÃ½m psycholÃ³giou sÃº informaÄnÃ© procesy, ktorÃ© prebiehajÃº medzi vstupom informÃ¡cie prostrednÃ­ctvom zmyslov a vÃ½stupom informÃ¡cie prostrednÃ­ctvom motorickÃ½ch centier. ZloÅ¾itÃ© formy inteligencie, ktorÃ© sÃº pozorovanÃ© u humanoidov, vyÅ¾adujÃº teÃ³rie mechanizmov vÃ½konu kognitÃ­vnych akciÃ­ a vnÃºtornej skÃºsenosti (existencia pamÃ¤ti a schopnosti vytvÃ¡rania vnÃºtornÃ½ch modelov prostredia). Tieto organizmy sÃº schopnÃ© vÃ½konu zloÅ¾itÃ½ch kognitÃ­vnych akciÃ­, akÃ½mi sÃº rozhodovanie (angl. decision making), rieÅ¡enie problÃ©mov (angl. problem solving) a plÃ¡novania (angl. planning); u Ä¾udÃ­ pristupuje k tÃ½mto aktivitÃ¡m schopnosÅ¥ komunikÃ¡cie prostrednÃ­ctvom jazyka formÃ¡lne reprezentovanÃ©ho generatÃ­vnou gramatikou. Ä½udia sÃº schopnÃ­ najzloÅ¾itejÅ¡Ã­ch a najvÅ¡eobecnejÅ¡Ã­ch foriem spracovania a transformÃ¡cie, preto podstatnÃ¡ ÄasÅ¥ psycholÃ³gie je orientovanÃ¡ na pochopenie procesov spracovania informÃ¡cie a inteligencie u Ä¾udÃ­ s cieÄ¾om vytvÃ¡rania kognitÃ­vnych architektÃºr a modelov tÃ½chto procesov (vyÅ¡Å¡Ã­ch kognitÃ­vnych procesov). PsycholÃ³gia (menovite tÃ¡ jej ÄasÅ¥, ktorÃ¡ sa zaoberÃ¡ kognitÃ­vnymi procesmi, t. j. kognitÃ­vna psycholÃ³gia) patrÃ­ do jadra kognitÃ­vnej vedy. VÃ½skum kognitÃ­vnej vedy mÃ¡ vÅ¾dy bezprostrednÃ½ alebo sprostredkovanÃ½ vÃ½znam v psycholÃ³gii. Nie vÅ¡etky vÃ½skumy o inteligentnÃ½ch informaÄnÃ½ch procesoch sÃº vÃ½znamnÃ© pre psycholÃ³giu. MusÃ­me poznamenaÅ¥, Å¾e odbornÃ½ zÃ¡ber kognitÃ­vnej vedy je o mnoho vÅ¡eobecnejÅ¡Ã­ ako psycholÃ³gie, preto nie vÅ¡etky vÃ½sledky tohto novÃ©ho vednÃ©ho odboru sÃº relevantnÃ© pre psycholÃ³giu. Vznik informatiky v 50. rokoch minulÃ©ho storoÄia znamenal novÃ½ impulz pre rozvoj psycholÃ³gie, menovite jej odklon od striktnÃ©ho behaviorizmu, ktorÃ½ oznaÄoval za nevedeckÃ©"
135,336,0.518,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"126 Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informanÃ½ch systÃ©mov UvedenÃ¡ koncepcia dovouje abstrahova od konkrÃ©tneho prostredia, kde bude aplikÃ¡cia nasadenÃ¡. CLR poskytuje sluÅ¾by tÃ½kajÃºce sa manaÅ¾mentu pamÃ¤ti, manaÅ¾mentu vlÃ¡ken, spracovania vÃ½nimiek, tzv. istenia pamÃ¤ti (manaÅ¾ment odstraovania nepotrebnÃ½ch entÃ­t z pamÃ¤ti) a bezpenosti. Okrem BCL a CLR medzi alÅ¡ie kÃºovÃ© vlastnosti rÃ¡mca patrÃ­ interoperabilita. RÃ¡mec .NET obsahuje podporu pre realizÃ¡ciu funkcionality sÃºiastok, ktorÃ¡ je vykonÃ¡vanÃ¡ mimo rÃ¡mec (poskytuje sÃºpravu sluÅ¾ieb pre prÃ­stup k sÃºiastkam modelu COM a obsahuje podporu pre inÃ© modely prostrednÃ­ctvom metÃ³dy P/Invoke). RÃ¡mec alej obsahuje podporu pre nasadzovanie softvÃ©ru, ktorÃ¡ zah a kontrolu bezpenostnÃ½ch poÅ¾iadaviek a integrity voi predchÃ¡dzajÃºcim verziÃ¡m. RÃ¡mec poskytuje spolonÃ½ bezpenostnÃ½ model pre aplikÃ¡cie a vlastnÃ½ manaÅ¾ment pamÃ¤ti. Ten zabezpeuje zbera odpadu, ktorÃ½ je spÃºÅ¡anÃ½ periodicky v samostatnom vlÃ¡kne, aby identifikoval nepouÅ¾itÃ© objekty a zÃ­skal spÃ¤ nimi alokovanÃº pamÃ¤. Autori rÃ¡mca deklarujÃº aj platformovÃº nezÃ¡vislos. TÃ¡ je vÅ¡ak limitovanÃ¡ na komernÃ© implementÃ¡cie rÃ¡mca, ktorÃ© pokrÃ½vajÃº platformy Windows, Windows CE a Xbox 360."
265,173,0.518,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"KoneÄnÃ© rozhodnutie, Äo sa bude realizovaÅ¥ sa dosiahne na konci etapy Å¡pecifikÃ¡cie poÅ¾iadaviek. NajtvrdÅ¡ie toto rozhodnutie reprezentujÃº akceptaÄnÃ© testy. Toto rozhodnutie vÅ¡ak neprÃ­de âodrazuâ ale cesta k nemu trvÃ¡ od zaÄiatku analÃ½zy. Vtedy sa zisÅ¥ujÃº ciele zÃ¡kaznÃ­ka a nÃ¡sledne biznis procesy, v rÃ¡mci ktorÃ½ch by zÃ¡kaznÃ­k potreboval softvÃ©r uplatniÅ¥. Potom sa Å¡pecifikujÃº scenÃ¡re pouÅ¾itia (prÃ­pady pouÅ¾itia) a z nich sÃº potom odvodenÃ© akceptaÄnÃ© testy. OdpoveÄ na otÃ¡zku âÄo sa bude realizovaÅ¥â sa preto postupne tvorÃ­ poÄas etapy analÃ½zy poÅ¾iadaviek (Å¡pecifikÃ¡cie poÅ¾iadaviek)."
190,379,0.518,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"NajvÃ¤ÄÅ¡ou prekÃ¡Å¾kou pri zlepÅ¡ovanÃ­ kvalitatÃ­vnych parametrov softvÃ©ru je jeho komplexnosÅ¥ a zloÅ¾itosÅ¥. Je znÃ¡me, Å¾e Ä¾udskÃ½ mozog dokÃ¡Å¾e v jednom momente pracovaÅ¥ so 7 Â± 2 jednoduchÃ½mi objektmi. Dokonca pokiaÄ¾ ide o abstraktnÃ© pojmy zniÅ¾uje sa tento poÄet len na 2 â 3 objekty [4], Äo sa javÃ­ byÅ¥ dosÅ¥ veÄ¾kÃ© obmedzenie pri tvorbe zloÅ¾itÃ½ch systÃ©mov ako sÃº tie softvÃ©rovÃ©."
130,374,0.517,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PevnÃ© vzÅ¥ahy. Nemenia sa, ostÃ¡vajÃº zachovanÃ© poÄas celÃ©ho Å¾ivota organizÃ¡cie, a to na Ãºrovni Å¡truktÃºry organizÃ¡cie aj konkrÃ©tnej organizÃ¡cie. VzÅ¥ahy v organizÃ¡cii sÃº v tomto prÃ­pade presne zadefinovanÃ© a nemÃ´Å¾u vznikaÅ¥ novÃ©, zanikaÅ¥ alebo meniÅ¥ svoj charakter. OrganizÃ¡cia s pevnÃ½mi vzÅ¥ahmi je na hranici medzi multiagentovÃ½m systÃ©mom a systÃ©mom so spolupracujÃºcimi modulmi."
369,235,0.517,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Podtriedy OperÃ¡cie s ÃºÄtom vo vÅ¡eobecnosti nezodpovedajÃº inÅ¡tanciÃ¡m triedy Typ operÃ¡cie s ÃºÄtom. InÅ¡tancie triedy Typ operÃ¡cie s ÃºÄtom sa vytvÃ¡rajÃº predovÅ¡etkÃ½m z âobchodnÃ©hoâ hÄ¾adiska, kÃ½m podtriedy OperÃ¡cie s ÃºÄtom sa definujÃº z âinformatickÃ©hoâ pohÄ¾adu (v prÃ­pade, ak prinÃ¡Å¡ajÃº novÃ© atribÃºty a relÃ¡cie)."
393,174,0.517,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Postup: Â Zadefinuje sa miera podobnosti medzi objektami â kaÅ¾dÃ½ prvok tvorÃ­ osobitnÃ½ jednoprvkovÃ½ zhluk. Â PokiaÄ¾ nie je splnenÃ¡ podmienka (vÅ¡etky objekty jeden zhluk) vyberÃº sa dva najpodobnejÅ¡ie zhluky a zlÃºÄia sa. VytvorÃ­ sa novÃ½ rozklad â¦i, kde i je zluÄovacia hladina. TÃ½mto sa postupne vytvÃ¡ra podobnostnÃ½ strom. GrafickÃ½m znÃ¡zornenÃ­m podobnostnÃ©ho stromu je dendrogram: Â Os x predstavuje mnoÅ¾inu zhlukovacÃ­ch hladÃ­n Â Os y poradovÃ© ÄÃ­sla zhlukovacÃ­ch objektov"
59,180,0.517,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.21. Priebeh evolÃºcie v chemostate, kde poÄiatoÄnÃ½ genotyp je Å¡pecifikovanÃ½ binÃ¡rnym reÅ¥azcom xini a cieÄ¾ovÃ½ fenotyp je Å¡pecifikovanÃ½ Ãºtvarom znÃ¡zornenÃ½m na Obr. 3.19. Identifikovalo sa 18 prechodnÃ½ch stavov, ktorÃ© sÃº zostrojenÃ© z predchÃ¡dzajÃºcich pomocou 1-bitovej mutÃ¡cie (t. j. medzi danÃ½mi binÃ¡rnymi reÅ¥azcami je jednotkovÃ¡ Hammingova vzdialenosÅ¥). ExistujÃº dva prÃ­pady neutrÃ¡lnych mutÃ¡ciÃ­, prechody 11 a 15. Tieto prechody sÃº rÃ´zneho typu, prvÃ½ prechod je priradenÃ½ postupnosti neutrÃ¡lnych mutÃ¡ciÃ­, zatiaÄ¾ Äo, druhÃ½ prechod reprezentuje dve paralelnÃ© neutrÃ¡lne mutÃ¡cie."
265,312,0.517,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"VÃ½vojÃ¡ri. V prvom rade je to vÃ½vojÃ¡r, ktorÃ½ kÃ³d sÃ¡m naprogramoval, ale aj inÃ­ vÃ½vojÃ¡ri, ktorÃ­ s kÃ³dom pracujÃº alebo pracujÃº na kÃ³de, ktorÃ½ je od neho zÃ¡vislÃ½ (testy spÃºÅ¡Å¥ajÃº preto, aby sa ubezpeÄili, Å¾e vÅ¡etko stÃ¡le funguje sprÃ¡vne aj po ich zmenÃ¡ch, pokojne aj v zdanlivo nesÃºvisiacich moduloch)."
205,49,0.517,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","ZÃ¡klady webu mÃ©na com, v ktorej prÃ­pade to bolo uÅ¾ len 20%. Najmenej reklamy sa podÄ¾a tohto vÃ½skumu nachÃ¡dzalo na strÃ¡nkach s domÃ©nou uk a org. PriÄom takmer Å¾iadna reklama nebola na strÃ¡nkach z domÃ©ny edu, ktorÃ¡ je rezervovanÃ¡ pre vzdelÃ¡vacie ÃºÄely."
265,187,0.516,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Ako by ste postupovali pri Å¡tÃºdii uskutoÄniteÄ¾nosti na prÃ­klade univerzitnÃ©ho softvÃ©ru na zdieÄ¾anie prepravy v osobnÃ½ch autÃ¡ch (carpooling)? Predpokladajte, Å¾e na vytvorenie softvÃ©ru by bolo vyhradenÃ½ch 9 mesiacov prÃ¡ce troch vÃ½vojÃ¡rov. V prvom rade si treba povedaÅ¥, akÃ½ rozsah prÃ¡ce Å¡tÃºdia mÃ´Å¾e vyÅ¾adovaÅ¥. Å tandardne ide o jednotky percent celkovÃ©ho Ãºsilia (skÃ´r bliÅ¾Å¡ie k 0 ako ku 10). Povedzme teda, Å¾e chceme Å¡tÃºdii venovaÅ¥ okolo 3% celkovÃ©ho Ãºsilia. K dispozÃ­cii mÃ¡me celkovo 540 Äloveko-dnÃ­ (3 vÃ½vojÃ¡ri x 9 mesiacov x 20 pracovnÃ½ch dnÃ­). Tri percentÃ¡ toho je 16 Äloveko-dnÃ­, ktorÃ© by sme mali na Å¡tÃºdiu pouÅ¾iÅ¥."
122,126,0.516,Modelovanie softvÃ©ru,"AlgebraickÃ¡ Å¡pecifikÃ¡cia najprv deklaruje typy, ktorÃ© v nej vystupujÃº okrem implicitne definovanÃ½ch typov, akÃ½m je Boolean. JednÃ½m z deklarovanÃ½ch typov je vÅ¾dy aj typ, ktorÃ©ho sa Å¡pecifikÃ¡cia tÃ½ka. Å pecifikÃ¡cia nÃ¡sledne deklaruje funkcie nad Å¡pecifikovanÃ½m typom. V terminolÃ³gii programovania, domÃ©nou (definiÄnÃ½ obor) funkcie sÃº jej parametre, a kodomÃ©nou (obor hodnÃ´t) jej nÃ¡vratovÃ¡ hodnota, t. j. ich typy. Ak ich je viac, bÃ½vajÃº zdruÅ¾enÃ© pomocou kartÃ©zskeho sÃºÄinu, ÄÃ­m tvoria n-tice. Jadrom Å¡pecifikÃ¡cie sÃº axiÃ³my: tvrdenia, ktorÃ© platia vÅ¾dy. Na axiÃ³mu A1 sme priÅ¡li uÅ¾ v ÃºvodnÃ½ch ÃºvahÃ¡ch. Tu je len explicitne uvedenÃ½ zÃ¡sobnÃ­k ako parameter, ktorÃ½ sme my pokladali za implicitnÃ½. PodÄ¾a A2, po funkcii pop() dostaneme spÃ¤Å¥ zÃ¡sobnÃ­k bez vloÅ¾enÃ©ho prvku e. AxiÃ³my A3 a A4 sÃº tu pre ÃºplnosÅ¥. Funkcia new nemÃ¡ parametre: z niÄoho vytvÃ¡ra zÃ¡sobnÃ­k. Ak funkcia nemÃ¡ parametre, mÃ´Å¾eme vynechaÅ¥ zÃ¡tvorky. Funkcia empty () vracia hodnotu pravda (angl. true) alebo nepravda (angl. false) podÄ¾a toho, Äi je zÃ¡sobnÃ­k prÃ¡zdny alebo nie. AxiÃ³ma A3 hovorÃ­, Å¾e novÃ½ zÃ¡sobnÃ­k je prÃ¡zdny, kÃ½m axiÃ³ma A4 hovorÃ­, Å¾e zÃ¡sobnÃ­k, na ktorÃ½ je vloÅ¾enÃ½ prvok, prÃ¡zdny nie je. Funkcie mÃ´Å¾u byÅ¥ ÃºplnÃ© (angl. total) a parciÃ¡lne (angl. partial) podÄ¾a toho, Äi je pre kaÅ¾dÃ½ prvok domÃ©ny definovanÃ½ prvok kodomÃ©ny, t. j. hodnota funkcie. Pri ÃºplnÃ½ch funkciÃ¡ch sa medzi domÃ©nou a kodomÃ©nou pouÅ¾Ã­va oznaÄenie â, a pri parciÃ¡lnych 7 . NaprÃ­klad, funkcia top() nemÃ¡ definovanÃº hodnotu pre prÃ¡zdny zÃ¡sobnÃ­k. V tejto sÃºvislosti vystupujÃº eÅ¡te predpoklady a to presne v zmysle v akom sme sa nimi zaoberali v kapitole 7. KonkrÃ©tne, funkcie top() a pop() vyÅ¾adujÃº na vstupe neprÃ¡zdny zÃ¡sobnÃ­k. VznikÃ¡ otÃ¡zka, Äi a kde sÃº uvedenÃ© dÃ´sledky. Ak sa pozrieme bliÅ¾Å¡ie, rozpoznÃ¡me ich v axiÃ³mach. Funkcie chÃ¡peme matematicky. NetrÃ¡pi nÃ¡s, Å¾e niektorÃ© vracajÃº celÃ½ novÃ½ zÃ¡sobnÃ­k, lebo algebraickÃ¡ Å¡pecifikÃ¡cia je deklaratÃ­vna a nebude sa vykonÃ¡vaÅ¥ na poÄÃ­taÄi."
265,371,0.516,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Modely softvÃ©ru vytvÃ¡rame vo vÅ¡etkÃ½ch etapÃ¡ch Å¾ivotnÃ©ho cyklu softvÃ©ru. Od modelovania biznis procesov v analÃ½ze, cez Å¡pecifikÃ¡ciu funkcionÃ¡lnych poÅ¾iadaviek (ktorÃ© sÃº sami o sebe modelom), pokraÄujÃºc cez nÃ¡vrh architektÃºry, Ãºdajov, komunikÃ¡cie Äi algoritmov v nÃ¡vrhu a implementÃ¡ciÃ­ aÅ¾ po dokumentovanie rozmiestnenia komponentov pri nasadenÃ­ softvÃ©ru, pri vÅ¡etkÃ½ch tÃ½chto Äinnostiach vytvÃ¡rame modely Äi uÅ¾ formou grafickÃ½ch diagramov alebo obyÄajnÃ½m textom (Ã¡no, aj obyÄajnÃ½ text mÃ´Å¾e slÃºÅ¾iÅ¥ ako model softvÃ©ru)."
343,55,0.516,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"Existuje veÄ¾a spÃ´sobov, ako prenÃ¡Å¡aÅ¥ Bitcoin, naprÃ­klad RNBTC. ProblÃ©mom tÃ½chto relayov je, Å¾e obÄas sa mÃ´Å¾e zaseknÃºÅ¥ full node a relay mÃ´Å¾e byÅ¥ pozadu voÄi reÃ¡lnej sieti. Ak sa to stane, musÃ­te sledovaÅ¥ stav a poÄkaÅ¥, kÃ½m sa relay synchronizuje so svojou full node. VÃ½hodou je, Å¾e nemÃ¡te ÄasovÃ© obmedzenie, takÅ¾e ak prÃ­dete za tÃ½Å¾deÅ, vaÅ¡e prostriedky budÃº stÃ¡le tam. Transakcia bude stÃ¡le existovaÅ¥ na Bitcoine, takÅ¾e staÄÃ­ zavolaÅ¥ 3 funkcie a mÃ¡te svoj Ether spÃ¤Å¥. Existuje aj inÃ¡ alternatÃ­va, ktorÃ¡ sa volÃ¡ InterBTC. TÃ¡to sluÅ¾ba umoÅ¾Åuje prepojiÅ¥ Bitcoin na Substrate alebo na Polkadot ekosystÃ©m. Bridge je ÄalÅ¡ou iterÃ¡ciou chain relays akurÃ¡t vÃ½sledkom bridgeu alebo mostu je, Å¾e sa aktÃ­vum aj reÃ¡lne presunie, tj. v jednej sieti âzmizneâ"
240,102,0.515,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"2.2 Cykly ZatiaÄ¾ sme v programoch pouÅ¾Ã­vali len prÃ­kazy, ktorÃ© sa vykonajÃº v programe raz a vykonÃ¡vanie pokraÄuje nasledujÃºcim prÃ­kazom. V praxi vÅ¡ak Äasto potrebujeme prehÄ¾adne zapÃ­saÅ¥ prÃ­kazy, ktorÃ© sa vykonajÃº opakovane. V jazyku C existujÃº tri typy cyklov: for, while a do-while. Cyklus vhodnÃ½ pre vopred danÃ½ poÄet opakovanÃ­ (napr. prÃ­kazy chceme opakovaÅ¥ 20-krÃ¡t, alebo x-krÃ¡t, kde x je premennÃ¡) â zvyÄajne pouÅ¾ijeme cyklus for."
393,193,0.515,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Mierne modifikovanÃ½ prÃ­stup sa dÃ¡ pouÅ¾iÅ¥ aj pre predpovedanie hlasovania pre konkrÃ©tny objekt pouÅ¾Ã­vateÄ¾om A: nÃ¡jde sa pouÅ¾Ã­vateÄ¾ B najbliÅ¾Å¡Ã­ k A, ktorÃ½ hlasoval pre danÃ½ objekt. MÃ´Å¾eme potom predpokladaÅ¥ s istou pravdepodobnosÅ¥ou, Å¾e pouÅ¾Ã­vateÄ¾ A bude pre danÃ½ objekt hlasovaÅ¥ rovnako, ako pouÅ¾Ã­vateÄ¾ B. Tento prÃ­stup mÃ¡ nevÃ½hodu v tom, Å¾e je Äasovo nÃ¡roÄnÃ½. Na dobrÃº predpoveÄ musÃ­me porovnÃ¡vaÅ¥ pouÅ¾Ã­vateÄ¾a A s veÄ¾kÃ½m mnoÅ¾stvom potenciÃ¡lnych pouÅ¾Ã­vateÄ¾ov B. Pre rÃ½chlu odozvu musÃ­me potom vÃ½razne zredukovaÅ¥ mnoÅ¾inu pouÅ¾Ã­vateÄ¾ov, s ktorÃ½mi A porovnÃ¡vame, ÄÃ­m trpÃ­ presnosÅ¥ predpovede. VÃ½hodou je, Å¾e tento prÃ­stup sa dÃ¡ pouÅ¾iÅ¥ nielen pre textovÃ© dokumenty."
76,164,0.515,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"DerivovanÃ­m zÃ­skame hustotu rovnako, ako v prÃ­pade > 0. OstatnÃ© Äasti vety sa dokÃ¡Å¾u analogicky. Veta 2.5.7 mÃ¡ zÃ¡sadnÃ½ vÃ½znam a Äasto sa budeme na Åu odvolÃ¡vaÅ¥. UmoÅ¾Åuje vyjadriÅ¥ hodnoty (x; , ï³2) prostrednÃ­ctvom funkcie , teda pomocou distribuÄnej funkcie normovanÃ©ho normÃ¡lneho rozdelenia. To ilustruje nasledujÃºci prÃ­klad. ~ N(3, 4). UrÄime P(1 ï£"
205,254,0.515,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Filtrovanie dokumentov Vo fÃ¡ze klasifikÃ¡cie naivnÃ½ bayesovskÃ½ klasifikÃ¡tor kombinuje pravdepodobnosti vÃ½skytu jednotlivÃ½ch vlastnostÃ­ dokumentu v jednotlivÃ½ch triedach dokumentov a odvodzuje z nich pravdepodobnosÅ¥ toho, Å¾e celÃ½ dokument patrÃ­ do jednej zo zvolenÃ½ch tried. Na vÃ½poÄet tejto pravdepodobnosti sa pouÅ¾Ã­va Bayesovo pravidlo, ktorÃ© mÃ¡ pre nÃ¡Å¡ prÃ­klad tÃºto podobu:"
130,579,0.515,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Model prostredia PouÅ¾itie modelu prostredia nie je v existujÃºcich AH systÃ©moch beÅ¾nÃ©. Pri prispÃ´sobovanÃ­ prezentÃ¡cie pritom mÃ´Å¾e byÅ¥ dÃ´leÅ¾itÃ½m faktorom prostredie, v ktorom pouÅ¾Ã­vateÄ¾ pracuje. PouÅ¾Ã­vateÄ¾ovi, ktorÃ½ si informÃ¡cie prezerÃ¡ za poÄÃ­taÄom s veÄ¾kou farebnou obrazovkou, by sa asi mali zobraziÅ¥ inak, ako pouÅ¾Ã­vateÄ¾ovi, ktorÃ½ surfuje cez mobilnÃ½ telefÃ³n. Patria tu vÅ¡ak aj inÃ© charakteristiky, ako napr. preferovanÃ½ jazyk prezentÃ¡cie, ÄasovÃ© a priestorovÃ© sÃºvislosti, sociÃ¡lne aspekty, ale aj kvalita pripojenia, typ prehliadaÄa a pod. PrispÃ´sobovanie mÃ´Å¾e zabezpeÄiÅ¥ aj vÃ½ber vhodnÃ©ho mÃ©dia pre prezentÃ¡ciu. NepoÄujÃºcemu namiesto zvuku systÃ©m poskytne obrazovÃº alebo textovÃº verziu informÃ¡cie, pouÅ¾Ã­vateÄ¾ovi s nÃ­zkym rozlÃ­Å¡enÃ­m displeja systÃ©m ponÃºkne redukovanejÅ¡iu verziu strÃ¡nky. Model prostredia mÃ´Å¾e byÅ¥ realizovanÃ½ formou atribÃºtov nezÃ¡vislÃ½ch od domÃ©ny v absolÃºtnych alebo relatÃ­vnych hodnotÃ¡ch, naprÃ­klad Äas (konkrÃ©tny dÃ¡tum ako absolÃºtna hodnota, oznaÄenie dÅa vo forme âdruhÃ½ deÅ piateho tÃ½Å¾dÅa aktuÃ¡lneho rokuâ ako relatÃ­vna hodnota) alebo poloha (konkrÃ©tne sÃºradnice ako absolÃºtna hodnota, oznaÄenie miesta vo forme âv blÃ­zkosti objektuâ ako relatÃ­vna hodnota). JednÃ½m zo systÃ©mov, ktorÃ½ pri prispÃ´sobovanÃ­ uvaÅ¾uje model prostredia, konkrÃ©tne model Äasu, je systÃ©m adaptÃ­vnej elektronickej nÃ¡stenky opÃ­sanÃ½ v (BielikovÃ¡, 2004a). Tento systÃ©m pri prezentÃ¡cii informÃ¡ciÃ­, ktorÃ© sprÃ­stupÅuje formou nÃ¡stenky berie do Ãºvahy ÄasovÃ© obdobie, v ktorom sÃº informÃ¡cie prezentovanÃ© a vyberÃ¡ len relevantnÃ© z nich. SystÃ©m obsahuje aj podporu relatÃ­vnych hodnÃ´t atribÃºtov, kde je Äas platnosti informÃ¡cie danÃ½ formou tÃ½Å¾dÅa semestra."
122,57,0.515,Modelovanie softvÃ©ru,"3.12 Vyjadrenie prÃ­padu pouÅ¾itia diagramom sekvenciÃ­ ObrÃ¡zok 3.11 ukazuje inÃ½ spÃ´sob vyjadrenia prÃ­padu pouÅ¾itia diagramom: diagramom sekvenciÃ­. Diagram sekvenciÃ­ zobrazuje postupnosÅ¥ posielania sprÃ¡v medzi inÅ¡tanciami. InÅ¡tancie sÃº vyznaÄenÃ© vo vrchnej Äasti diagramu, priÄom z kaÅ¾dej vychÃ¡dza preruÅ¡ovanÃ¡ Äiara, ktorÃ¡ sa oznaÄuje ako lÃ­nia Å¾ivota (angl. lifeline). Äas plynie zhora nadol. SprÃ¡vy najÄastejÅ¡ie majÃº vÃ½znam volania operÃ¡ciÃ­ objektov prÃ­sluÅ¡nÃ½ch tried. :SprÃ¡vca vÃ½robkov"
369,351,0.515,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 6.9. Vzor RozpoÄet zdrojov zÃ¡kazky NajniÅ¾Å¡iu ÃºroveÅ tvoria rozpoÄty jednotlivÃ½ch Ãºloh. Pri hierarchickom ÄlenenÃ­ Ãºloh sa uÅ¾ Äasto evidujÃº iba pre najvrchnejÅ¡ie Ãºrovne (najvyÅ¡Å¡Ã­mi Äinnosti/Ãºlohami mÃ´Å¾u byÅ¥ naprÃ­klad vÃ½robnÃ© etapy). RozpoÄet Ãºlohy sa skladÃ¡ z rozpoÄtu na pracovnÃº silu, rozpoÄtu zariadenÃ­ a zdrojov. Pri pracovnÃ­koch sa rozpoÄet pracovnÃ­ka mÃ´Å¾e v mnohÃ½ch prÃ­padoch vypoÄÃ­taÅ¥ z jeho vÃ½kazu prÃ¡ce."
135,740,0.515,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ku, ktorÃº Ãº odporuil sa povaÅ¾uje strÃ¡nka, ktorÃ¡ bola dlhodobo najviac propagovanÃ¡ v taniarni. Urovanie kvality zdroja Kvalita zdroja je z intervalu 0,1 priom 0 je najniÅ¾Å¡ia a 1 najvyÅ¡Å¡ia kvalita. Kvalita vzdialenosti Vzdialenos dvoch strÃ¡nok definujme ako poet krokov, ktorÃ© vela potrebuje, aby sa z jednej domÃ©ny dostala na druhÃº. Ã­m je poet krokov menÅ¡Ã­, tÃ½m je vÃ¤Å¡ia pravdepodobnos, Å¾e danÃ© strÃ¡nky sÃº obsahovo prÃ­buznÃ©. Na kvantifikÃ¡ciu vzdialenosti boli navrhnutÃ© vzahy: DISTmax = 0 Â qdist = QDIST"
130,28,0.515,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Vzor staviteÄ¾ sa vyuÅ¾Ã­va v prÃ­padoch, keÄ algoritmus tvorby zloÅ¾itÃ½ch objektov mÃ¡ byÅ¥ nezÃ¡vislÃ½ od jednotlivÃ½ch ÄastÃ­ vytvÃ¡ranÃ©ho objektu, prÃ­p. od toho ako sÃº tieto Äasti spÃ¡janÃ© dohromady alebo v prÃ­padoch, keÄ proces tvorby musÃ­ umoÅ¾niÅ¥ rÃ´zne reprezentÃ¡cie vytvÃ¡ranÃ©ho objektu (rozhrania)."
196,61,0.515,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"pojem LATEX v domÃ©ne tvorby dokumentov. Je to systÃ©m na prÃ­pravu dokumentov. Jeho autorom je Leslie Lamport. Vznikol (1984) ako rozÅ¡Ã­renie TeX sadzacieho systÃ©mu, ktorÃ½ vyvinul (1978) Donald Ervin Knuth. AktuÃ¡lna verzia je oznacÌovanÃ¡ ako LATEX 2Îµ (1994, aktualizovanÃ¡ v 2020). Projekt pokracÌuje vÃ½vojom vo verzii s nÃ¡zvom LATEX3. Jeho nÃ¡zov sa vyslovuje ""LeyTekh"", alebo ""LahTekh"" avÅ¡ak udomÃ¡cnenÃ¡ je aj vÃ½slovnostâ ""Latech""."
369,143,0.515,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"InÃ½m prÃ­kladom je uzavretÃ¡ poistnÃ¡ zmluva na poistenie motorovÃ©ho vozidla, na zÃ¡klade ktorej si klient uplatÅuje nÃ¡rok na Ãºhradu Å¡kody pri poistnej udalosti, naprÃ­klad havÃ¡rii poistenÃ©ho motorovÃ©ho vozidla. Tento prÃ­klad podrobnejÅ¡ie rozoberieme v 5. kapitole. ZovÅ¡eobecnenÃ½ model vo forme vzoru NÃ¡rokovanie zÃ¡vÃ¤zku poskytuje obr. 3.9. Bazicky Zavazok Narok Polozka Naroku"
135,722,0.514,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â d A a d B sÃº asy tancovania vely za zdroj A alebo zdroj B ; as tancovania je priamoÃºmernÃ½ kvalite zdroja, teda, Ã­m je zdroj kvalitnejÅ¡Ã­, tÃ½m je vÃ¤Å¡ia pravdepodobnos, Å¾e pozorujÃºce vely odpozorujÃº vÃ¡bny tanec a nechajÃº sa zlÃ¡ka na zdroj potravy,"
135,382,0.514,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â KompozÃ­cia sprÃ¡vania je zaloÅ¾enÃ¡ na elementoch hrajÃºcich uritÃ© role v rÃ´znych vzoroch. PrÃ­stup pouÅ¾Ã­va modely zaloÅ¾enÃ© na roliach, ktorÃ© zachytÃ¡vajÃº statickÃ© a z asti aj dynamickÃ© aspekty vzorov v jednom diagrame. UML nepodporuje takÃ½ spÃ´sob integrÃ¡cie, o znamenÃ¡ menÅ¡iu podporu pre tento prÃ­stup. Tento spÃ´sob kompozÃ­cie vzorov bol pouÅ¾itÃ½ napr. v [17]."
59,549,0.514,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 11.3. (A) ZnÃ¡zornenie pozitÃ­vneho tvaru predpokladu uzavretÃ©ho sveta â ak pre kaÅ¾dÃ½ objekt X z U0 platÃ­ vlastnosÅ¥ P, potom tÃ¡to vlastnosÅ¥ platÃ­ aj mimo mnoÅ¾inu U0. (B) ZnÃ¡zornenie negatÃ­vneho tvaru predpokladu uzavretÃ©ho sveta â ak pre kaÅ¾dÃ½ objekt X z U0 platÃ­ vlastnosÅ¥ P, potom mimo tÃºto mnoÅ¾inu platÃ­ negÃ¡cia vlastnosti ïP."
393,475,0.514,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Podpora implementaÄnÃ½ch jazykov SÃºÄasnÃ© CASE nÃ¡stroje vo vÃ¤ÄÅ¡ine prÃ­padov podporujÃº implementaÄnÃ© jazyky ako JAVA, C++, C# a VB. Od CASE nÃ¡stroja v zÃ¡sade oÄakÃ¡vame generovanie zdrojovÃ©ho kÃ³du v jazyku, resp. V jazykoch, v ktorÃ½ch sa realizuje celÃ½ projekt. VÃ½ber nÃ¡stroja ale Äasto nie je zÃ¡leÅ¾itosÅ¥ou iba jedinÃ©ho projektu a teda pri investÃ­ciÃ­ do kvalitnÃ©ho nÃ¡stroja budeme oÄakÃ¡vaÅ¥ podporu pre Äo moÅ¾no najviac implementaÄnÃ½ch jazykov."
236,19,0.514,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"KeÄ Ä¾udia z WYSIWYGovÃ©ho sveta stretnÃº Ä¾udÃ­, ktorÃ­ pouÅ¾Ã­vajÃº LATEX, najÄastejÅ¡ie sa diskutuje âo vÃ½hodÃ¡ch LATEXu v porovnanÃ­ s normÃ¡lnym textovÃ½m procesoromÃ¿ alebo naopak. NajlepÅ¡ie urobÃ­te, ak takÃ½to rozhovor zaÄne, keÄ budete v ÃºzadÃ­, keÄÅ¾e sa takÃ¡to diskusia Äasto vymykÃ¡ z rÃºk. AvÅ¡ak niekedy niet Ãºniku. . . Teda tu je troÅ¡ka streliva. NajvÃ¤ÄÅ¡ie vÃ½hody LATEXu oproti normÃ¡lnym textovÃ½m procesorom sÃº nasledujÃºce: â¢ SÃº dostupnÃ© profesionÃ¡lne vytvorenÃ© Ãºpravy strÃ¡nky, takÅ¾e dokument skutoÄne vyzerÃ¡, ako keby bol âvytlaÄenÃ½Ã¿. â¢ PÃ­sanie matematickÃ½ch vzorcov je zabezpeÄenÃ© pohodlnÃ½m spÃ´sobom. â¢ UÅ¾Ã­vateÄ¾ovi sa staÄÃ­ nauÄiÅ¥ niekoÄ¾ko Ä¾ahko pochopiteÄ¾nÃ½ch prÃ­kazov, definujÃºcich logickÃº Å¡truktÃºru dokumentu. Takmer nikdy nemusÃ­ âfuÅ¡ovaÅ¥Ã¿ do nastavenej Ãºpravy dokumentu. â¢ Ä½ahko mÃ´Å¾u byÅ¥ vygenerovanÃ© aj zloÅ¾itÃ© Å¡truktÃºry, ako poznÃ¡mky pod Äiarou, odkazy, obsah, pouÅ¾itÃ¡ literatÃºra a register. â¢ Na rieÅ¡enie mnohÃ½ch typografickÃ½ch Ãºloh priamo nepodporovanÃ½ch zÃ¡kladnÃ½m LATEXom existujÃº voÄ¾ne pripojiteÄ¾nÃ© balÃ­ky makier. NaprÃ­klad mÃ´Å¾ete pomocou nich vloÅ¾iÅ¥ do textu PostScriptovÃº grafiku alebo vytvoriÅ¥ bibliografie dodrÅ¾ujÃºc presnÃ© Å¡tandardy. Mnoho z tÃ½chto voÄ¾ne pripojiteÄ¾nÃ½ch makier je opÃ­sanÃ½ch v The LATEX Companion [3]. â¢ LATEX povzbudzuje autorov pÃ­saÅ¥ texty s kvalitnou Å¡truktÃºrou, pretoÅ¾e toto je spÃ´sob, ako LATEX pracuje â Å¡pecifikovanÃ­m Å¡truktÃºry. â¢ TEX, formÃ¡tovacÃ­ motor LATEXu2Îµ, je bezplatnÃ½ a Ä¾ahko prenositeÄ¾nÃ½. Preto beÅ¾Ã­ takmer na kaÅ¾dej dostupnej hardvÃ©rovej platforme. LATEX mÃ¡ aj urÄitÃ© nevÃ½hody, ale myslÃ­m si, Å¾e je pre mÅa trochu obtiaÅ¾ne nÃ¡jsÅ¥ nejakÃº rozumnÃº, hoci som si istÃ½, Å¾e inÃ­ Ä¾udia by vÃ¡m mohli povedaÅ¥ o stovkÃ¡ch ;-) â¢ LATEX nefunguje dobre Ä¾uÄom, ktorÃ­ predali svoju duÅ¡u. . . â¢ Hoci pri preddefinovanÃ½ch formÃ¡toch strÃ¡n sa dajÃº upravovaÅ¥ niektorÃ© parametre, vytvorenie novÃ©ho formÃ¡tu je nÃ¡roÄnÃ© a zaberie veÄ¾a Äasu2 . â¢ Je veÄ¾mi Å¥aÅ¾kÃ© napÃ­saÅ¥ neÅ¡truktÃºrovanÃ½ a chaotickÃ½ dokument."
76,330,0.514,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ak rozsah vÃ½beru konverguje do nekoneÄna, tak vychÃ½lenie odhadu konverguje k nule. HovorÃ­me, Å¾e odhad je asymptoticky nevychÃ½lenÃ½. 7.1.10 V tomto ÄlÃ¡nku diskutujeme zÃ¡kladnÃº vlastnosÅ¥ bodovÃ½ch odhadov â nevychÃ½lenosÅ¥. Preto zopakujme to, Äo sme povedali uÅ¾ v ÄlÃ¡nku 6.3, na okraj odhadov strednej hodnoty a variancie (tentoraz aj s dÃ´kazmi). StrednÃ¡ hodnota je zÃ¡kladnÃ¡ ÄÃ­selnÃ¡ charakteristika a ak ide o rozdelenie, v ktorom figuruje parameter ï±, tak obyÄajne E( ) zÃ¡visÃ­ na ï±. Niekedy je E( ) priamo rovnÃ© ï± (napr. pri Poissonovom rozdelenÃ­), inokedy E( ) je znÃ¡mou funkciou ï± (napr. pri exponenciÃ¡lnom rozdelenÃ­, E( ) = 1/ï±). Vo vete 7.1.11 nie je dÃ´leÅ¾itÃ© akou funkciou parametra ï± je strednÃ¡ hodnota E( ), resp. akou funkciou parametra ï± je variancia var( ). StrednÃº hodnotu oznaÄme , resp. varianciu oznaÄme ï³2 a mÃ´Å¾eme ich povaÅ¾ovaÅ¥ za novÃ© parametre. 7.1.11 Veta. Ak je nÃ¡hodnÃ½ vÃ½ber z rozdelenia, ktorÃ©ho strednÃ¡ hodnota sa rovnÃ¡ , tak vÃ½berovÃ½ priemer Ì je nevychÃ½lenÃ½ odhad strednej hodnoty , pretoÅ¾e E( â"
393,228,0.514,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ZloÅ¾itosÅ¥ webu znemoÅ¾Åuje pouÅ¾iÅ¥ techniky z manaÅ¾mentu databÃ¡z. TextovÃ© vyhÄ¾adÃ¡vacie nÃ¡stroje fungujÃº Ãºboho, nezohÄ¾adÅujÃº postupy vytvÃ¡rania obsahu strÃ¡nok, Å¾e strÃ¡nky neukazujÃº na ÄalÅ¡ie strÃ¡nky pomocou hypertextovÃ½ch odkazov bezdÃ´vodne. Prepojenia strÃ¡nok sÃº prejavom autorovÃ½ch kontaktov na znÃ¡mych."
393,73,0.514,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"V tejto Äasti sme predstavili rÃ´zne prÃ­stupy k vyhÄ¾adÃ¡vaniu informÃ¡ciÃ­ v priestoroch webovÃ½ch strÃ¡nok. Z opÃ­sanÃ½ch metÃ³d a pouÅ¾itÃ½ch algoritmov vyplÃ½va, Å¾e tieto prÃ­stupy sÃº skÃ´r vhodnÃ© pre menÅ¡ie webovÃ© priestory (rÃ¡dovo stovky â tisÃ­ce strÃ¡nok). DÃ´vodom je vlastnosÅ¥ opÃ­sanÃ½ch algoritmov â reprezentÃ¡cia jednotlivÃ½ch dokumentov pomocou kÄ¾ÃºÄovÃ½ch slov, alebo uchovÃ¡vanie jednotlivÃ½ch asociaÄnÃ½ch pravidiel pre kaÅ¾dÃ½ dokument. DÃ´sledkom uvedenÃ©ho mÃ´Å¾e byÅ¥ spÃ´sob nasadenia takÃ©hoto systÃ©mu v zÃ¡vislosti od poÅ¾iadaviek pouÅ¾Ã­vateÄ¾a na vyhÄ¾adÃ¡vacÃ­ systÃ©m."
240,81,0.514,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Zo zadania Ãºlohy vyplÃ½va, Å¾e na vstupe mÃ´Å¾u byÅ¥ desatinnÃ© ÄÃ­sla, preto v definÃ­cii premennÃ½ch v riadku 6 pouÅ¾ijeme dÃ¡tovÃ½ typ double. Potom doplnÃ­me formÃ¡tovacÃ­ reÅ¥azec a adresy premennÃ½ch pri naÄÃ­tanÃ­ v riadku 7. Riadok 8 obsahuje trochu"
43,376,0.514,Objektovo orientovanÃ© programovanie v C++,"Pri prÃ¡zdnom konÅ¡truktore, resp. pri konÅ¡truktore bez parametrov, mÃ¡me aj druhÃº moÅ¾nosÅ¥ â neuviesÅ¥ ho vÃ´bec. Ak neÅ¡peciï¬kujeme, ktorÃ½ konÅ¡truktor rodiÄovskej triedy sa mÃ¡ zavolaÅ¥, automaticky sa zavolÃ¡ konÅ¡truktor, ktorÃ½ nemÃ¡ parametre. Tak to bolo aj v prÃ­kladoch v predchÃ¡dzajÃºcej Äasti. V takÃ½chto prÃ­padoch musÃ­me ale pamÃ¤taÅ¥ na to, aby v rodiÄovskej triede takÃ½to konÅ¡truktor bol. V opaÄnom prÃ­pade program neprejde kompilÃ¡ciou. Pozrime sa teraz bliÅ¾Å¡ie na konÅ¡truktor rodiÄovskej triedy s parametrami. Ako sme si povedali, v konÅ¡truktore odvodenej triedy sa vykonajÃº vÅ¡etky prÃ­kazy obsiahnutÃ© vo vybranom konÅ¡truktore rodiÄovskej triedy. V prÃ­pade tried ï¬rma a vydavatelstvo sa v konÅ¡truktore triedy ï¬rma s parametrami vykonÃ¡va naprÃ­klad prÃ­kaz nazov=n;"
59,244,0.513,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"PristÃºpime teraz k formulÃ¡cii mÃ©mov a ich komplexov s chromozÃ³mami. MÃ©m je reÅ¥azec n symbolov 0, 1 a ïª m ï½ ï¨ m1m2 ...mn ï© ïï»0,1,ïªï½ (4.13) Å Ã­rka mÃ©mu m, oznaÄenÃ¡ |m|, je urÄenÃ¡ poÄtom binÃ¡rnych (nehviezdiÄkovÃ½ch) symbolov, napr. mÃ©m m = (01ïªïª01ïªïªïª) mÃ¡ Å¡Ã­rku |m| = 4. MÃ©m budeme pouÅ¾Ã­vaÅ¥ ako pomocnÃ½ nositeÄ¾ informÃ¡cie zÃ­skanej v rÃ¡mci procesu uÄenia. Ak Å¡Ã­rka mÃ©mu je nulovÃ¡, potom hovorÃ­me, Å¾e mÃ©m neobsahuje vhodnÃº informÃ¡ciu a jeho aplikÃ¡cia v rÃ¡mci evoluÄnÃ©ho procesu je bezpredmetnÃ¡. MemetickÃ½ chromozÃ³m (m-chromosome) je urÄenÃ½ ako usporiadanÃ¡ dvojica chromozÃ³mu a mÃ©mu o rovnakej dÄºÅ¾ke ï¡ ï½ ï¨ x , m ï© ï½ ï¨ ï¨ x1 x2 ...xn ï© ,ï¨ m1m2 ...mn ï© ï© ïï»0,1,#ï½ ï´ ï»0,1,ïªï½ (4.14)"
135,51,0.513,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"za nÃ¡sledok vyÅ¡Å¡ie pamÃ¤ovÃ© nÃ¡roky v prÃ­pade pouÅ¾Ã­vania vzoru abstraktnej tovÃ¡rne. RieÅ¡enie tohto problÃ©mu dÃ¡va nÃ¡vrhovÃ½ vzor Prototyp. Vzor Prototyp ako alternatÃ­va k Abstraktnej tovÃ¡rni AbstraktnÃ¡ tovÃ¡re je vemi podobnÃ¡ vzoru Prototyp. Prototyp je vzor, kde sa novÃ© objekty vytvÃ¡rajÃº kopÃ­rovanÃ­m prototypovÃ©ho objektu. MÃ´Å¾eme poveda, Å¾e prototyp sa dÃ¡ pouÅ¾i vÅ¡ade, kde moÅ¾no pouÅ¾i abstraktnÃº tovÃ¡re. Vzor Prototyp poskytuje vÃ¤Å¡iu flexibilitu za cenu niÅ¾Å¡ieho vÃ½konu. Prototyp mÃ¡ vÅ¡ak niÅ¾Å¡ie pamÃ¤ovÃ© nÃ¡roky, vytvÃ¡ra totiÅ¾ menej abstraktnÃ½ch tried ako abstraktnÃ¡ tovÃ¡re."
184,267,0.513,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"WebovÃ© sluÅ¾by a servisne orientovanÃ¡ architektÃºra predstavujÃº dÃ´leÅ¾itÃ½ aspekt webu so sÃ©mantikou. TechnolÃ³gie opÃ­sanÃ© v tejto kapitole boli primÃ¡rne navrhnutÃ© s cieÄ¾om poskytnÃºÅ¥ Ä¾uÄom a programom moÅ¾nosti sprÃ­stupÅovania dÃ¡t na zÃ¡klade ich vÃ½znamu, teda sÃ©mantickÃ© vyhÄ¾adÃ¡vanie informÃ¡ciÃ­. S postupnÃ½m vÃ½vojom webu so sÃ©mantikou sa Äoraz viac kladie dÃ´raz aj na sÃ©mantickÃ© vyhÄ¾adÃ¡vanie sluÅ¾ieb. WebovÃ© sluÅ¾by, ktorÃ© takÃ©to vyhÄ¾adÃ¡vanie podporujÃº oznaÄujeme prÃ­vlastkom sÃ©mantickÃ©. Fungovanie webu so sÃ©mantikou zÃ¡visÃ­ od ochoty Ä¾udÃ­ vytvÃ¡raÅ¥ a spravovaÅ¥ metadÃ¡ta o informÃ¡ciÃ¡ch publikovanÃ½ch na webe. Z obrovskÃ©ho mnoÅ¾stva informÃ¡ciÃ­, ktorÃ© sÃº dostupnÃ© na webe je zatiaÄ¾ anotovanÃ½ch iba veÄ¾mi mÃ¡lo, aj keÄ existujÃº nÃ¡stroje, ktorÃ© tÃºto ÄinnosÅ¥ v urÄitej miere podporujÃº (Äi uÅ¾ poÄas vytvÃ¡rania samotnÃ©ho obsahu alebo aÅ¾ âex postâ). Ä½udia Äasto nevidia priamu vÃ½hodu vytvÃ¡rania metadÃ¡t o dÃ¡tach, nevedia o moÅ¾nostiach, ktorÃ© sa tÃ½m otvÃ¡rajÃº a nie sÃº nijako nÃºtenÃ­ ich vytvÃ¡raÅ¥. Naproti tomu webovÃ© sluÅ¾by uÅ¾ vo svojej podstate pracujÃº s metadÃ¡tami. Tieto metadÃ¡ta vÅ¡ak opisujÃº iba sprÃ¡vy, ktorÃ½mi sa sluÅ¾ba volÃ¡ a ktorÃ½mi odpovedÃ¡, bez explicitnÃ©ho definovania toho, akÃ½ je presnÃ½ vÃ½znam sprÃ¡v a Äo vlastne sluÅ¾ba vykonÃ¡va. ExistujÃºce opisy webovÃ½ch sluÅ¾ieb dostupnÃ© na webe sÃº neÅ¡truktÃºrovanÃ© a urÄenÃ© pre Ä¾udÃ­, nie pre programy. Plne automatizovanÃ¡ orchestrÃ¡cia webovÃ½ch sluÅ¾ieb do vÃ¤ÄÅ¡Ã­ch systÃ©mov je teda stÃ¡le viac snom ako realitou, avÅ¡ak poskytovatelia webovÃ½ch sluÅ¾ieb si uvedomujÃº prÃ­tomnosÅ¥ metadÃ¡t a sÃº motivovanÃ­ vytvÃ¡raÅ¥ Äo najlepÅ¡ie opisy svojich sluÅ¾ieb tak, aby boli vyhÄ¾adateÄ¾nÃ© a zakomponovateÄ¾nÃ© do inÃ½ch systÃ©mov. To dÃ¡va predpoklady pre pouÅ¾itie technolÃ³giÃ­ webu so sÃ©mantikou na opis webovÃ½ch sluÅ¾ieb."
43,421,0.513,Objektovo orientovanÃ© programovanie v C++,"9.2 GenerickÃ© funkcie GenerickÃ¡ funkcia je Å¡ablÃ³na na vÃ½robu funkciÃ­. PouÅ¾Ã­vame ju vtedy, ak chceme maÅ¥ viacero funkciÃ­, ktorÃ© sa lÃ­Å¡ia len typom niektorÃ½ch parametrov, nÃ¡vratovej hodnoty, alebo niektorÃ½ch lokÃ¡lnych premennÃ½ch. Predpokladajme, Å¾e chceme vytvoriÅ¥ generickÃº funkciu moja funkcia s vopred neurÄenÃ½mi dÃ¡tovÃ½mi typmi T1, T2, . . . , Tn. Å ablÃ³nu v C++ vytvÃ¡rame pomocou kÄ¾ÃºÄovÃ©ho slova template. template<class T1, class T2, . . . , class Tn> T moja funkcia(...)"
94,476,0.513,Sprievodca svetom vedeckÃ©ho publikovania,"individuÃ¡lnych benefitov pre konkrÃ©tnych klientov. Typy takÃ½chto sluÅ¾ieb podÄ¾a zamerania: tvorba obsahu, zdokonalenie produktov, asistencia a zdieÄ¾anie rieÅ¡enia. PrÃ­klady takÃ½chto sluÅ¾ieb: Experts-Exchange â v tomto virtuÃ¡lnom priestore moÅ¾no zakÃºpiÅ¥ odpovede na svoje otÃ¡zky. PortÃ¡ly fungujÃºce na princÃ­pe voÄ¾nej vÃ½meny znalostÃ­ (free knowledge exchange): Quora, Ask Metafilter, Yahoo! Answers, Wikipediaâs Reference Desk alebo 3form Free Knowledge Exchange. kolaboratÃ³rium â virtuÃ¡lna platforma na medzinÃ¡rodnÃº prezentÃ¡ciu vÃ½skumnÃ½ch aktivÃ­t s moÅ¾nosÅ¥ou vzÃ¡jomnej interakcie medzi vedcami, na zdieÄ¾anie dÃ¡t a elektronickÃ½ch zdrojov a prÃ­stup k zdrojom digitÃ¡lnych kniÅ¾nÃ­c. NeskÃ´r sa toto ponÃ­manie rozÅ¡Ã­rilo na priestor pre realizÃ¡ciu experimentÃ¡lneho a empirickÃ©ho vÃ½skumu aÅ¾ na tzv. open space pre kreatÃ­vne aktivity jednotlivcov a skupÃ­n spojenÃ© s rieÅ¡enÃ­m konkrÃ©tnych vedeckÃ½ch problÃ©mov, t. j. ide o virtuÃ¡lny priestor pre realizÃ¡ciu kolektÃ­vnej inteligencie. komunikÃ¡cia â vÃ½mena informÃ¡ciÃ­ prostrednÃ­ctvom spoloÄnej sÃºstavy symbolov (z latinskÃ©ho communicare, radiÅ¥ sa, diskutovaÅ¥, communicatio, spoloÄnÃ¡ ÃºÄasÅ¥). megaÄasopis â vedeckÃ½ Äasopis publikujÃºci otvorenÃ½m prÃ­stupom na internete veÄ¾kÃ© mnoÅ¾stvo ÄlÃ¡nkov v dÃ´sledku redakÄnej politiky, ktorÃ¡ je menej selektÃ­vna ako u beÅ¾nÃ½ch vedeckÃ½ch Äasopisov (tzv. âsoundness only peer reviewââ posudzuje kvalitu metodickÃ©ho spracovania ÄlÃ¡nku a hodnotenie jeho vedeckÃ©ho vÃ½znamu nechÃ¡va na komunite), napr. PLOS One, e-Life, PeerJ a pod. meta-analÃ½za â sÃºhrnnÃ¡ analÃ½za vypracovanÃ¡ z mnohÃ½ch Å¡tÃºdiÃ­ uverejnenÃ½ch v sÃºvislosti s jednÃ½m problÃ©mom alebo javom. metadÃ¡ta â Å¡truktÃºrovanÃ© Ãºdaje nesÃºce informÃ¡cie o primÃ¡rnych dÃ¡tach (napr. knihe alebo ÄlÃ¡nku v elektronickom Äasopise). MÃ´Å¾u to byÅ¥ informÃ¡cie o type primÃ¡rneho dokumentu, jeho zdroji, uloÅ¾enÃ­, rozsahu, Äase, kedy bol naposledy zmenenÃ½, alebo inÃ© Ãºdaje. Å truktÃºra a formÃ¡t metadÃ¡t bÃ½vajÃº Å¡tandardizovanÃ©. Existuje niekoÄ¾ko typov metadÃ¡t, napr. deskriptÃ­vne, Å¡trukturÃ¡lne, referenÄnÃ©, Å¡tatistickÃ© s ÄalÅ¡Ã­mi sub-typmi. MetadÃ¡ta sÃº zvyÄajne Å¡truktÃºrovanÃ© podÄ¾a urÄitej konkrÃ©tnej Å¡tandardizovanej koncepcie s pouÅ¾itÃ­m definovanej schÃ©my metadÃ¡t (prvkov). MetadÃ¡tovÃ© schÃ©my vytvÃ¡rajÃº nÃ¡sledne systÃ©m metadÃ¡tovÃ½ch Å¡tandardov a metadÃ¡tovÃ½ch modelov. VÃ½sledkom ÄalÅ¡ej Å¡tandardizÃ¡cie sÃº potom naprÃ­klad rÃ´zne kontrolovanÃ© slovnÃ­ky, taxonÃ³mie, slovnÃ­ky, metadÃ¡tovÃ© registre a pod., ktorÃ© prispievajÃº k ÄalÅ¡ej Å¡tandardizÃ¡cii. K najznÃ¡mejÅ¡Ã­m metadÃ¡tovÃ½m Å¡tandardom patrÃ­ Dublin Core. obÄianska veda (citizen science alebo aj crowd science, civic science, volunteer monitoring alebo networked science, v slovenÄine je niekedy pouÅ¾Ã­vanÃ½ aj termÃ­n dobrovoÄ¾nÃ­cka veda) â projekty navrhnutÃ© a vedenÃ© kvalifikovanÃ½mi vedcami tak, aby umoÅ¾Åovali participÃ¡ciu verejnosti. Äasto sa jednÃ¡ o prÃ¡cu s veÄ¾kÃ½mi sÃºbormi dÃ¡t, ktorÃ© by malÃ¡ skupina vedcov nedokÃ¡zala vlastnÃ½mi silami dosÅ¥ rÃ½chlo analyzovaÅ¥, napr. fotografie z vesmÃ­rnych sond, alebo digitalizovanÃ© tkanivovÃ© rezy, na ktorÃ½ch (Äasto formou poÄÃ­taÄovej hry) ÃºÄastnÃ­ci projektu hÄ¾adajÃº vybranÃ© Å¡truktÃºry. NavzÃ¡jom sa kontrolujÃº (jednu vzorku analyzujÃº nezÃ¡visle viacerÃ­), ÄÃ­m zniÅ¾ujÃº pravdepodobnosÅ¥ chÃ½b."
135,287,0.513,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.8.1 Opis softvÃ©rovÃ½ch architektÃºr PÃ´vodne sa na kreslenie architektÃºry systÃ©mu pouÅ¾Ã­vali jednoduchÃ© kresliace nÃ¡stroje. SoftvÃ©rovÃ½ architekt zakreslil architektÃºru systÃ©mu pomocou niekokÃ½ch Å¡katuliek a iar, ktorÃ© reprezentovali jednotlivÃ© sÃºiastky a prepojenia. OpÃ­sanie architektÃºry tÃ½mto spÃ´sobom sa obmedzuje len na syntaktickÃ© vyjadrenie architektÃºry a neobsahuje sÃ©mantiku jednotlivÃ½ch sÃºiastok a prepojenÃ­. Tieto neformÃ¡lne diagramy vÅ¡ak nemohli by formÃ¡lne analyzovanÃ© s cieom posÃºdi konzistentnos, Ãºplnos a sprÃ¡vnos architektÃºry. Tento stav bol vÃ½chodiskom pre hadanie novÃ½ch moÅ¾nostÃ­, ktorÃ© boli zameranÃ© bu na definovanie opisnÃ½ch jazykov pre architektÃºru alebo na rozÅ¡Ã­renia existujÃºceho jazyka UML (Unified Modelling Language). OpisnÃ© jazyky pre architektÃºru (angl. Architecture description languages â ADLs) sa vÅ¡ak v komernom sektore zatia nerozÅ¡Ã­rili a v rÃ¡mci rozÅ¡Ã­renÃ­ UML jazyka nie je zatia k dispozÃ­cii modul, ktorÃ½m by bolo moÅ¾nÃ© plnohodnotne architektÃºru softvÃ©ru opÃ­sa."
240,15,0.513,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Pri rÃ´znych vykonaniach programu mÃ´Å¾e pouÅ¾Ã­vateÄ¾ zadaÅ¥ na vstup rÃ´zne slovo a program bude reagovaÅ¥ prÃ­sluÅ¡nÃ½m pozdravom. Tento upravenÃ½ program teda predstavuje veÄ¾mi jednoduchÃº formu rozhovoru, ktorÃº by sme mohli doplnenÃ­m ÄalÅ¡Ã­ch prÃ­kazov Äalej rozÅ¡irovaÅ¥. RozÅ¡Ã­renÃ­m tohto prÃ­stupu s vyuÅ¾itÃ­m pokroÄilÃ½ch prÃ­stupov umelej inteligencie sÃº tzv. chatboty, ktorÃ© dokÃ¡Å¾u s pouÅ¾Ã­vateÄ¾mi viesÅ¥ netriviÃ¡lne rozhovory, pri ktorÃ½ch Ä¾udia mÃ´Å¾u Ä¾ahko nadobudnÃºÅ¥ pocit, Å¾e sa rozprÃ¡vajÃº so skutoÄnÃ½m Älovekom."
265,234,0.513,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NÃ¡vrhom sÃº tie Äinnosti, v ktorÃ½ch vznikajÃº rozhodnutia ako mÃ¡ byÅ¥ softvÃ©r zrealizovanÃ½, no zÃ¡roveÅ eÅ¡te nejde o realizÃ¡ciu samotnÃº (ktorÃ¡ uÅ¾ spadÃ¡ pod implementÃ¡ciu). DÃ´leÅ¾itÃ½mi ÄinnosÅ¥ami etapy nÃ¡vrhu sÃº najmÃ¤: â¢ Navrhovanie architektÃºry (identifikÃ¡cia komponentov, rozhranÃ­ a prepojenÃ­ medzi nimi). â¢ Rozhodnutia o pouÅ¾itÃ­ technolÃ³giÃ­ na implementÃ¡ciu (pokiaÄ¾ neboli danÃ© uÅ¾ v Å¡pecifikÃ¡cii). â¢ Tvorba integraÄnÃ½ch testov (ako zodpovedajÃºci typ testovania komponentov v architektÃºre). â¢ PrÃ¡ce na modeloch Ãºdajov (prechod od konceptuÃ¡lnych modelov zaloÅ¾enÃ½ch predovÅ¡etkÃ½m na biznis analÃ½ze, k logickÃ½m modelom Ãºdajov, ktorÃ© sÃº viac technickÃ©). â¢ IdentifikÃ¡cia a nÃ¡vrh budÃºcich programovÃ½ch Å¡truktÃºr (tried, ich vzÅ¥ahov, rozhranÃ­, dÃ¡tovÃ½ch typov) a algoritmov (tÃ¡to ÄinnosÅ¥ uÅ¾ istÃ½m spÃ´sobom hraniÄÃ­ s implementÃ¡ciou). â¢ Tvorba jednotkovÃ½ch testov (taktieÅ¾ na hranici s etapou implementÃ¡cie). â¢ Navrhovanie pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­ (napr. dotvÃ¡ranie predstÃ¡v, ktorÃ© uÅ¾ sÃº danÃ© Å¡pecifikÃ¡ciou). VÅ¡imnime si, Å¾e hranica etapy nÃ¡vrhu s etapou implementÃ¡cie nie je vÅ¾dy zreteÄ¾nÃ¡. To je dÃ´sledkom aj toho, Å¾e nÃ¡vrh softvÃ©ru je spravidla postupnÃ½m zjemÅovanÃ­m a konkretizovanÃ­m modelov softvÃ©ru (napr. najskÃ´r robÃ­me âveÄ¾kÃ©â rozhodnutia, napr. o architektÃºre a aÅ¾ neskÃ´r sa dostÃ¡vame k detailom, ako naprÃ­klad rozhodnutie o pouÅ¾itÃ­ dÃ¡tovÃ©ho typu pre istÃ½ atribÃºt, ktorÃ© uÅ¾ spravidla nemÃ¡ vÃ½znam zachytÃ¡vaÅ¥ len dokumentaÄne, ale rovno sa zapÃ­Å¡e na Ãºrovni zdrojovÃ©ho kÃ³du)."
240,167,0.513,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"3.2 RekurzÃ­vne funkcie ProgramovacÃ­ jazyk C prostrednÃ­ctvom zÃ¡sobnÃ­ku volanÃ­ umoÅ¾Åuje kaÅ¾dej funkcii v rÃ¡mci svojho tela zavolaÅ¥ akÃºkoÄ¾vek inÃº funkciu. Je teda Ãºplne beÅ¾nÃ©, Å¾e funkcia priamo alebo nepriamo zavolÃ¡ funkciu s tÃ½m istÃ½m nÃ¡zvom, zvyÄajne vÅ¡ak s inÃ½mi parametrami (hodnotami argumentov). TakÃ©to funkcie nazÃ½vame rekurzÃ­vne funkcie a princÃ­p rieÅ¡enia Ãºloh vyuÅ¾Ã­vajÃºci rekurzÃ­vne funkcie nazÃ½vame rekurzia. UvaÅ¾ujme nasledujÃºci prÃ­klad (rekurzÃ­vnej) funkcie nekonecno():"
43,29,0.512,Objektovo orientovanÃ© programovanie v C++,"V hlavnom programe potom mÃ´Å¾u byÅ¥ zÃ¡kaznÃ­ci s rÃ´znymi kritÃ©riami. NiektorÃ½ch mÃ´Å¾e zaujÃ­maÅ¥ len cena bez ohÄ¾adu na to, kde ï¬rma sÃ­dli, inÃ­ zase mÃ´Å¾u hÄ¾adaÅ¥ len v konkrÃ©tnom mieste. ProgramÃ¡torovi, ktorÃ½ program vytvÃ¡ra, staÄÃ­ vedieÅ¥, Å¾e v kaÅ¾dom prÃ­pade treba pouÅ¾iÅ¥ metÃ³du Zisti cenu, ktorej treba odovzdaÅ¥ sprÃ¡vne parametre. Äalej sa uÅ¾ mÃ´Å¾e spoÄ¾ahnÃºÅ¥ na kompilÃ¡tor, ktorÃ½ zabezpeÄÃ­, Å¾e kaÅ¾dÃ½ zÃ¡kaznÃ­k dostane to, o Äo mÃ¡ zÃ¡ujem. Pre ilustrÃ¡ciu si ukÃ¡Å¾me program s dvomi zÃ¡kaznÃ­kmi Z1 a Z2. ZÃ¡kaznÃ­k Z1 sa orientuje len podÄ¾a ceny. ZÃ¡kaznÃ­k Z2 hÄ¾adÃ¡ len ï¬rmy z Bratislavy, teda v blÃ­zkosti svojho bydliska. HlavnÃ½ program() ZÃ¡kaznÃ­k Z1(""Pavol"",""KovÃ¡Ä"",""Bratislava"",6000,1000) ZÃ¡kaznÃ­k Z2(""TomÃ¡Å¡"",""PetrÃ­k"",""Stupava"",10000,1200) Firma F1(""First a.s."",""TrenÄÃ­n"",20,10) Firma F2(""Second s.r.o."",""Bratislava"",25,8) Firma F3(""Third s.r.o."",""Trnava"",18,8) Z1.VypÃ­Å¡ meno a bydlisko() Z1.Zisti cenu(F1) Z1.Zisti cenu(F2) Z1.Zisti cenu(F3)"
240,18,0.512,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"vykonÃ¡ v riadku 10 prÃ­kaz podmienky: ak zvyÅ¡ok po delenÃ­ i deliteÄ¾om j je 0, tak pokraÄuj na prÃ­kaz v riadku 11, ktorÃ½ ukonÄÃ­ vykonÃ¡vanie cyklu j predtÃ½m ako by presiahol hodnotu â . Teda v prÃ­pade, Å¾e j je deliteÄ¾om i, tak hodnota premennej j v riadku 12 bude menÅ¡ia alebo rovnÃ¡ ako â . Podmienka v riadku 12 sa vykonÃ¡"
240,361,0.512,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-32 DoplÅte chÃ½bajÃºce prÃ­kazy v implementÃ¡cii pÃ­smenkovÃ©ho hadÃ­ka. Program by mal pre nezÃ¡pornÃ© celÃ© ÄÃ­slo N na vstupe vykresliÅ¥ hadÃ­ka z pÃ­smen malej anglickej abecedy (znaky: a, b, c, ..., z) v dvojrozmernej matici N x N podÄ¾a ukÃ¡Å¾ky niÅ¾Å¡ie. PÃ­smenkÃ¡ sÃº v matici v abecednom poradÃ­: od a do z, priÄom za pÃ­smenkom z nasleduje opÃ¤Å¥ a. Zo Å¡tandardnÃ©ho vstupu program spracuje postupne vÅ¡etky ÄÃ­sla. Ãloha vyÅ¾aduje dynamicky alokovaÅ¥ pamÃ¤Å¥ pre dvojrozmernÃ© pole."
129,12,0.512,Sprievodca licenciami Creative Commons,"Kedy je moÅ¾nÃ© pouÅ¾iÅ¥ dielo bez sÃºhlasu autora? Bez sÃºhlasu autora moÅ¾no dielo pouÅ¾iÅ¥ najmÃ¤ v prÃ­pade, ak ide o pouÅ¾itie na zÃ¡klade zÃ¡konnÃ½ch licenciÃ­ (Â§ 34-57), ktorÃ© predstavujÃº vÃ½nimky a obmedzenia z prÃ¡va autora na udelenie sÃºhlasu na pouÅ¾itie diela. Medzi takÃ©to vÃ½nimky a obmedzenia patrÃ­ napr.: citÃ¡cia diela (Â§ 37), karikatÃºra, parÃ³dia, pastiÅ¡, pouÅ¾itie diela na informaÄnÃ© ÃºÄely, pouÅ¾itie diela na vyuÄovacie ÃºÄely a pri vÃ½skume a inÃ©. Bez sÃºhlasu autora je tieÅ¾ moÅ¾nÃ© pouÅ¾iÅ¥ voÄ¾nÃ© dielo (Â§ 9). Bez sÃºhlasu autora moÅ¾no pouÅ¾iÅ¥ dielo aj ÄalÅ¡Ã­m prevodom vlastnÃ­ckeho prÃ¡va (napr. predajom a darovanÃ­m) po tom, ako doÅ¡lo k vyÄerpaniu tohto prÃ¡va autora. VÄaka tomu mÃ´Å¾e v EÃ fungovaÅ¥ sekundÃ¡rny trh, naprÃ­klad antikvariÃ¡ty. TÃ¡to vÃ½nimka sa vÅ¡ak nevzÅ¥ahuje na e-knihy a inÃ© digitÃ¡lne rozmnoÅ¾eniny okrem poÄÃ­taÄovÃ½ch programov. Ako mÃ´Å¾e autor udeliÅ¥ inej osobe sÃºhlas na pouÅ¾itie diela? Pred pouÅ¾itÃ­m diela osobou odliÅ¡nou od autora je potrebnÃ© zÃ­skaÅ¥ na jeho pouÅ¾itie sÃºhlas autora (pokiaÄ¾ nie je moÅ¾nÃ© vyuÅ¾iÅ¥ tzv. zÃ¡konnÃº licenciu). SÃºhlas autora na pouÅ¾itie diela sa udeÄ¾uje licenÄnou zmluvou (Â§ 65 a nasl.). LicenÄnÃ¡ zmluva stanovuje predovÅ¡etkÃ½m spÃ´sob pouÅ¾itia diela, rozsah licencie, Äas, na ktorÃ½ autor licenciu udeÄ¾uje, alebo spÃ´sob jeho urÄenia a odmenu alebo spÃ´sob jej urÄenia, ak sa autor s nadobÃºdateÄ¾om nedohodol na bezodplatnom poskytnutÃ­ licencie. AutorskÃ½ zÃ¡kon vo svojich ustanoveniach zÃ¡roveÅ urÄuje domnienky, ktorÃ© platia v prÃ­pade, ak licenÄnÃ¡ zmluva neobsahuje uvedenÃ© nÃ¡leÅ¾itosti. VÃ½hradnÃ¡ licencia musÃ­ maÅ¥ pÃ­somnÃº formu (Ak autor udelil vÃ½hradnÃº licenciu, nesmie udeliÅ¥ tretej osobe licenciu na spÃ´sob pouÅ¾itia diela udelenÃ½ vÃ½hradnou licenciou a je povinnÃ½, ak nie je v licenÄnej zmluve dohodnutÃ© inak, sÃ¡m sa zdrÅ¾aÅ¥ pouÅ¾itia diela spÃ´sobom, na ktorÃ½ udelil vÃ½hradnÃº licenciu). LicenÄnÃ¡ zmluva nemusÃ­ byÅ¥ pÃ­somnÃ¡, ak sa uzatvÃ¡ra ako nevÃ½hradnÃ¡. Autor mÃ´Å¾e ponÃºknuÅ¥ udelenie licencie aj jednostrannÃ½m prejavom vÃ´le smerujÃºcim voÄi neurÄitÃ½m osobÃ¡m (Â§ 76 VerejnÃ¡ licencia). Licencia je platne udelenÃ¡ v okamihu, keÄ sa nadobÃºdateÄ¾ podÄ¾a nej zachovÃ¡ (urÄitÃ© konanie nadobÃºdateÄ¾a licencie, z ktorÃ©ho moÅ¾no vyvodiÅ¥ jeho sÃºhlas s podmienkami licencie aj bez"
59,173,0.512,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.18. SchematickÃ© znÃ¡zornenie zobrazenÃ­ genotypu na fenotyp a fenotypu na fitnes pre prÃ­pad binÃ¡rnych reÅ¥azcov. Obe zobrazenia sÃº typu mnoho-na-jeden, t. j. existuje silnÃ¡ redundancia v kÃ³dovanÃ­ fenotypu pomocou genotypu a v kÃ³dovanÃ­ fitnes pomocou fenotypu. TÃ¡to vlastnosÅ¥ redundancie je dÃ´leÅ¾itÃ½ predpoklad pre existenciu neutrÃ¡lnych etÃ¡p darwinovskej evolÃºcie, v ktorÃ½ch je fitnes konÅ¡tantnÃ½."
393,536,0.512,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Rozdelenie softvÃ©ru na koncerny a adaptÃ©ry nielenÅ¾e umoÅ¾Åuje ÄiastoÄne prehÄ¾adnejÅ¡ie znovupouÅ¾itie ÄastÃ­ systÃ©mu, ale ponÃºka i akÃ©hosi sprievodcu pri znovupouÅ¾itÃ­, podÄ¾a ktorÃ©ho mÃ´Å¾e vÃ½vojÃ¡r postupovaÅ¥ a sprÃ¡vne pouÅ¾iÅ¥ koncern uloÅ¾enÃ½ v kniÅ¾nici. DÃ¡ sa povedaÅ¥, Å¾e protokol skladania definuje akÃºsi metodolÃ³giu, akou moÅ¾no danÃ½ koncern znovupouÅ¾iÅ¥. OpÃ­sanÃ½ prÃ­stup je pomerne mladÃ½ a je spojenÃ½ s viacerÃ½mi problÃ©mami, napr. pri adaptÃ¡ciÃ­ ClassMerging mÃ´Å¾e nastaÅ¥ problÃ©m s jazykmi podporujÃºcimi iba jeden strom dediÄnosti, keÄÅ¾e je potrebnÃ© spojiÅ¥ dva zoznamy rodiÄovskÃ½ch tried, ktorÃ© sa mÃ´Å¾u navyÅ¡e opakovaÅ¥."
190,433,0.512,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Zaujala ma diametrÃ¡lna odliÅ¡nosÅ¥ scenÃ¡rov (ktorÃ©, ak to preÅ¾enieme, staÄÃ­ maÅ¥ niekde na papieri) a analytickÃ½ch pokusov o predikcie a podporu rozhodovania. ScenÃ¡re sa v tomto smere ukazujÃº ako silnejÅ¡Ã­ nÃ¡stroj. Na druhej strane nezaÅ¡kodÃ­ pokiaÄ¾ sa budÃº rozhodnutia vytvorenÃ© na ich zÃ¡klade dodatoÄne konfrontovaÅ¥ s vÃ½sledkami predikciÃ­. Nezhody sÃº vyuÅ¾iteÄ¾nÃ© pri korekciÃ¡ch metÃ³d, sÃºhlas potvrdÃ­ sprÃ¡vnosÅ¥ oboch (pokiaÄ¾ samozrejme ÃºspeÅ¡ne dopadne aj projekt)."
265,270,0.512,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"1. ZdrojovÃ© kÃ³dy (tvoriace alebo preloÅ¾iteÄ¾nÃ© priamo na fungujÃºci softvÃ©r). 2. DokumentÃ¡cia (zahÅÅa jednak âinlineâ dokumentÃ¡ciu priamo v zdrojovÃ½ch kÃ³doch, jednak externÃ© dokumenty ako opisy a nÃ¡vody na pouÅ¾itie sÃºÄiastok, inÅ¡talaÄnÃ© a pouÅ¾Ã­vateÄ¾skÃ© prÃ­ruÄky a podobne). 3. Testy a zÃ¡znamy o testovanÃ­."
367,11,0.511,CESTA K OTVORENEJ VEDE,"DÃ¡tovÃ© repozitÃ¡re: MÃ´Å¾u byÅ¥ viacodborovÃ©, alebo Å¡pecializovanÃ©. UmoÅ¾ÅujÃº vyhÄ¾adÃ¡vanie rÃ´znych druhov dÃ¡t a ukladanie, uchovÃ¡vanie a zdieÄ¾anie vÃ½skumnÃ½ch dÃ¡t. qFAIRsharing.org uvÃ¡dza zoznam dostupnÃ½ch dÃ¡tovÃ½ch repozitÃ¡rov."
135,30,0.511,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â aplikovatenos â predstavuje obmedzenia, kedy vzor zodpovedÃ¡ reÃ¡lnej situÃ¡cii, â prÃ­klady â prÃ­klady aktuÃ¡lneho pouÅ¾itia vzoru pri rieÅ¡enÃ­ reÃ¡lnych problÃ©mov, â ukÃ¡Å¾kovÃ½ kÃ³d â implementÃ¡cia vzoru v danom kontexte, â racionÃ¡lny vÃ½znam â formou strunÃ©ho vysvetlenia, preo bolo rieÅ¡enie aplikovanÃ© a pre danÃ½ problÃ©m uÅ¾itonÃ©,"
184,254,0.511,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 3-14. ICDE API pred a po pouÅ¾itÃ­ webovÃ½ch sluÅ¾ieb. Na lokÃ¡lnej sieti ICDE pouÅ¾Ã­valo autentifikÃ¡ciu pomocou pouÅ¾Ã­vateÄ¾skÃ©ho mena a hesla. V otvorenom priestore Internetu je vÅ¡ak potrebnÃ¡ silnejÅ¡ia ochrana. WS-* Å¡tandardy webovÃ½ch sluÅ¾ieb podporujÃº viacero moÅ¾nostÃ­ vrÃ¡tane Å¡tandardov X-509 a Kerberos. TaktieÅ¾ sÃº podporovanÃ© silnÃ© kryptografickÃ© algoritmy, ktorÃ© sÃº v sÃºÄasnosti postaÄujÃºce na Å¡ifrovanie prenÃ¡Å¡anÃ½ch dÃ¡t."
76,379,0.511,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Parameter rozdelenia sa nazÃ½va poÄet stupÅov voÄ¾nosti. Hodnotou parametra mÃ´Å¾e byÅ¥ Ä¾ubovoÄ¾nÃ© prirodzenÃ© ÄÃ­slo. SkalÃ¡r (zÃ¡visÃ­ od ) zaruÄuje, Å¾e integrÃ¡l z hustoty (cez celÃº ÄÃ­selnÃº os) sa rovnÃ¡ jednej (Äo je zÃ¡kladnÃ¡ vlastnosÅ¥ kaÅ¾dej hustoty). Jeho explicitnÃ© vyjadrenie je trochu komplikovanÃ© (vyÅ¾aduje znalosÅ¥ gamma funkcie). Pre predstavu uveÄme, Å¾e hodnoty sÃº z intervalu (0.3, 0.4). Z predpisu hustoty je zrejmÃ©, Å¾e je to pÃ¡rna funkcia. Graf mÃ¡ zvonovitÃ½ tvar a nÃ¡padne pripomÃ­na graf hustoty normovanÃ©ho Gaussovho rozdelenia. DÃ¡ sa ukÃ¡zaÅ¥, Å¾e ak â¥ 2, tak E(T) = 0 a ak â¥ 3, tak uÅ¾ existuje aj variancia rozdelenia a platÃ­: var(T) = /( â 2)."
190,298,0.511,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V USA majÃº pÃ¤Å¥stupÅovÃ½ protiteroristickÃ½ varovnÃ½ systÃ©m. Älovek, ktorÃ½ je na Äele tohto systÃ©mu, mÃ¡ za Ãºlohu pravidelne stanovovaÅ¥ ÃºroveÅ ohrozenia krajiny. AnalÃ³gia k softvÃ©rovÃ©mu inÅ¾inierstvu je evidentnÃ¡, keÄÅ¾e jedinÃ©, Äo tento Älovek mÃ´Å¾e vo svojej pozÃ­cii urobiÅ¥, je zbieraÅ¥ âhorduâ materiÃ¡lov, komunikovaÅ¥ so svojimi kolegami a âvycucaÅ¥â si potrebnÃº informÃ¡ciu"
43,197,0.511,Objektovo orientovanÃ© programovanie v C++,"V predchÃ¡dzajÃºcich dvoch prÃ­kladoch, resp. aj v kapitole 1, sme mali do Äinenia s problÃ©mami, kde sa ukÃ¡zalo uÅ¾itoÄnÃ© vytvoriÅ¥ neprÃ¡zdny konÅ¡truktor. DosiaÄ¾ sme sa vÅ¡ak nestretli s prÃ­kladom, v ktorom by nejakÃº Ãºlohu hral aj deÅ¡truktor. Preto si teraz ukÃ¡Å¾eme prÃ­klad, v ktorom neprÃ¡zdny deÅ¡truktor mÃ¡ svoje opodstatnenie â je pouÅ¾itÃ½ na dealokÃ¡ciu pamÃ¤Å¥ovÃ©ho miesta, ktorÃ© je potrebnÃ© uvoÄ¾niÅ¥ pri zÃ¡niku objektu."
41,44,0.511,InformaÄnÃ© vzdelÃ¡vanie,"â informaÄnÃ© zdroje, informaÄnÃ© produkty, informaÄnÃ© systÃ©my a informaÄnÃ© inÅ¡titÃºcie, â informaÄnÃ© technolÃ³gie, elektronickÃ¡ komunikÃ¡ciu. Hoci informaÄnÃ½ch technolÃ³giÃ­ sa priamo tÃ½ka iba bod 3., zvyÅ¡nÃ© dva si je bez vplyvu informatiky v sÃºÄasnej dobe len Å¥aÅ¾ko predstaviÅ¥. InformaÄnÃ© sprÃ¡vanie Ä¾udÃ­ v sÃºÄasnosti je vo veÄ¾kej miere ovplyvnenÃ© nielen prebytkom informÃ¡ciÃ­, ale aj ich spÃ´sobom predkladania, vplyvom sociÃ¡lnych sietÃ­, agresÃ­vnymi metÃ³dami prezentÃ¡cie informÃ¡ciÃ­, vplyvom komunikaÄnÃ½ch prostriedkov na prenos informÃ¡ciÃ­ a ich dostupnosÅ¥. Je Äoraz Å¥aÅ¾Å¡ie overovaÅ¥ si informaÄnÃ© zdroje a validovaÅ¥ ich presnosÅ¥ a pravdivosÅ¥. VÄaka rÃ½chlemu prenosu informÃ¡ciÃ­ a ich relatÃ­vnej dostupnosti je Äoraz jednoduchÅ¡ie vyvolaÅ¥ paniku, prezentovaÅ¥ klamlivÃº informÃ¡ciu (hoax), ovplyvniÅ¥ verejnÃº mienku. A to vÅ¡etko vÄaka pokroku v informaÄnÃ½ch systÃ©moch a technolÃ³giÃ¡ch. Ãno, to, Å¾e sme vyvinuli programovacie jazyky, zdokonaÄ¾ujeme komunikaÄnÃ© siete, protokoly prenosu informÃ¡ciÃ­, Äi sa ako informatici snaÅ¾Ã­me zjednoduÅ¡ovaÅ¥ spÃ´soby prezentÃ¡cie mÃ¡ vplyv na vzÅ¥ah Äloveka k informÃ¡ciÃ¡m, ktorÃ© sÃº prezentovanÃ© ako informaÄnÃ© dÃ¡ta prenÃ¡Å¡anÃ© informaÄnÃ½mi systÃ©mami. A informaÄnÃ© systÃ©my sÃº zase postavenÃ© na procesoch, ktorÃ½mi sa riadia, a tie nie vÅ¾dy zodpovedajÃº prijateÄ¾nÃ©mu Ä¾udskÃ©mu chÃ¡paniu, Äi jednoduchÃ©mu pouÅ¾Ã­vaniu. SpÃ´sob riadenia, procesy, prezentovanÃ© dÃ¡ta, Äi architektÃºru informaÄnÃ½ch systÃ©mov je moÅ¾nÃ© informatikom ovplyvniÅ¥. Na toto ovplyvnenie mÃ´Å¾u slÃºÅ¾iÅ¥ uÅ¾ dnes znÃ¡me nÃ¡stroje pre nÃ¡vrh a prevÃ¡dzku informaÄnÃ½ch systÃ©mov, ktorÃ© sÃº beÅ¾ne pouÅ¾Ã­vanÃ©. Medzi najznÃ¡mejÅ¡ie (a tÃ½mto sa budeme aj venovaÅ¥) patria SOA, ITIL, TOGAF, ProjektovÃ½ manaÅ¾ment. Je vÅ¡ak na mieste spomenÃºÅ¥, Å¾e postupom Äasu a rokov, Äo aj sÃºvisÃ­ so zdokonaÄ¾ovanÃ­m informaÄnÃ½ch technolÃ³giÃ­, boli vÅ¡etky vyÅ¡Å¡ie spomÃ­nanÃ© nÃ¡stroje atomizovanÃ© na rÃ´zne odnoÅ¾e a klony (mnohokrÃ¡t s rovnakÃ½m obsahom, ale inÃ½m nÃ¡zvom â prÃ­klad: KYC â Know Your Customer jednoznaÄne pokrÃ½val oblasÅ¥ nielen individuÃ¡lnych, ale aj korporÃ¡tnych klientov, a dnes sa uÅ¾ hovorÃ­ o KYB - Know Your Business), Äi z nich boli vytvÃ¡ranÃ© stromovÃ© Å¡truktÃºry vÅtajÃºce sa v nezmyselnÃ½ch detailoch danej oblasti. V prÃ­pade KYC je to skratka eKYC, ktrÃ¡ zdÃ´razÅuje, Å¾e procesy sÃº elektronickÃ©... POZNÃMKA: Za vÅ¡etkÃ½m hÄ¾adaj peniaze. A tie sa dajÃº aj zÃ­skaÅ¥ vytvÃ¡ranÃ­m certifikÃ¡ciÃ­, certifikovanÃ½ch Å¡kolenÃ­ a podobne. Sarkasticky povedanÃ©, informatici dali ekonÃ³mom, marketÃ©rom a promotÃ©rom do rÃºk nÃ¡stroje pÃ´vodne urÄenÃ© na"
130,539,0.511,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Obsah. PrezentovanÃ½ obsah pozostÃ¡va z informaÄnÃ½ch fragmentov, ktorÃ© tvoria mnoÅ¾inu dostupnÃ½ch informÃ¡ciÃ­. InformaÄnÃ©mu fragmentu zodpovedÃ¡ koncept, ktorÃ½ reprezentuje prÃ­sluÅ¡nÃº ÄasÅ¥ aplikaÄnej domÃ©ny. VÃ½sledkom zdruÅ¾enia elementÃ¡rnych konceptov do zloÅ¾enÃ½ch konceptov a vyjadrenÃ­m vzÅ¥ahov medzi nimi je graf vyjadrujÃºci Å¡truktÃºru informÃ¡ciÃ­ v aplikaÄnej domÃ©ne. ZÃ¡roveÅ je urÄenÃ½ vzÅ¥ah medzi fragmentmi informaÄnÃ©ho priestoru."
122,34,0.51,Modelovanie softvÃ©ru,"Obr. 3.1: VzÅ¥ah zahrnutia. VÅ¡imnime si, Å¾e v diagrame ako ÃºÄastnÃ­k nevystupuje systÃ©m. Mohli by sme ho tam uviesÅ¥, ale musel by byÅ¥ spojenÃ½ s kaÅ¾dÃ½m prÃ­padom pouÅ¾itia, Äo by znaÄne zneprehÄ¾adnilo diagram. Ak namiesto jednoliateho systÃ©mu uvÃ¡dzame jeho Äasti alebo modelujeme interakciu s viacerÃ½mi prepojenÃ½mi systÃ©mami, mÃ´Å¾e byÅ¥ potrebnÃ© ich uviesÅ¥. Treba myslieÅ¥ na to, Å¾e diagramy prÃ­padov pouÅ¾itia nie sÃº urÄenÃ© na modelovanie sÃºvislosti medzi systÃ©mami alebo komponentmi. Na to sÃº vhodnejÅ¡ie diagramy komponentov a kompozitnej Å¡truktÃºry, ktorÃ½mi sa zaoberÃ¡ kapitola 5."
393,232,0.51,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Je web dobre prepojenÃ½ alebo sa dÃ¡ rozdeliÅ¥ na malÃ© Äasti? Je moÅ¾nÃ© dostaÅ¥ sa na akÃºkoÄ¾vek strÃ¡nku z akejkoÄ¾vek strÃ¡nky len pomocou hypertextovÃ½ch odkazov? V prÃ¡ci (Albert et al., 1999) sa spomÃ­na web ako digraf s priemerom 19. NiektorÃ© prÃ¡ce demonÅ¡trovali zÃ¡kon exponentu pre stupne vrcholov. Broder (Broder et al., 2000) Å¡tudoval ÄasÅ¥ webu okolo strÃ¡nky Altavista."
43,71,0.51,Objektovo orientovanÃ© programovanie v C++,"Aj v tomto prÃ­pade prebehne vÅ¡etko sprÃ¡vne, o Äo sa postarÃ¡ sprÃ¡vne pouÅ¾itÃ© oznaÄenie formÃ¡tu %s. Äo sa vÅ¡ak stane, ak namiesto sprÃ¡vneho formÃ¡tu %s pouÅ¾ijeme nesprÃ¡vny, napr. %d? Ako na takÃ½to logicky nesprÃ¡vny zÃ¡pis zareaguje kompilÃ¡tor? char retazec[5]=""slovo""; printf(""%d"",retazec);"
236,69,0.51,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"sa vytvorÃ­ na konci danej strany poznÃ¡mka pod Äiarou. PoznÃ¡mky by mali byÅ¥ vÅ¾dy pouÅ¾itÃ© za slovom9 alebo za vetou, na ktorÃº sa vzÅ¥ahujÃº.10 PoznÃ¡mky pod Äiarou\footnote{Toto je poznÃ¡mka pod Äiarou} sÃº Äasto pouÅ¾Ã­vanÃ© Ä¾udmi, pouÅ¾Ã­vajÃºcimi \LaTeX."
205,239,0.51,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","14.4 VizualizÃ¡cia zhlukov Na vizualizÃ¡ciu zhluknutÃ½ch Ãºdajov poznÃ¡me niekoÄ¾ko metÃ³d. V tomto texte spomenieme metÃ³du nazvanÃº viacrozmernÃ© Å¡kÃ¡lovanie (angl. multidimensional scaling), ktorÃ¡ slÃºÅ¾i na dvojrozmernÃ© zobrazenie viacrozmernÃ½ch Ãºdajov. TÃ¡to metÃ³da pouÅ¾Ã­va maticu M, ktorej prvky (Mi,j) obsahujÃº vzdialenosti medzi i-tou a j-tou poloÅ¾kou. VizualizovanÃ© poloÅ¾ky sa snaÅ¾ia presÃºvaÅ¥ takÃ½m spÃ´sobom, aby vzdialenosti medzi nimi koreÅ¡pondovali s hodnotami v matici M."
195,206,0.51,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"12 OdporÃºÄanie vo fÃ¡ze analÃ½zy poÅ¾iadaviek Vo fÃ¡ze analÃ½zy poÅ¾iadaviek vznikajÃº rÃ´zne predstavy a ciele o produkte viacerÃ½ch ÃºÄastnÃ­kov, ktorÃ­, eÅ¡te navyÅ¡e, nemusia byÅ¥ vÅ¾dy dostupnÃ­ geograficky. Preto vzÃ¡jomnÃ¡ dohoda mÃ´Å¾e byÅ¥ problematickÃ¡ a prinÃ¡Å¡a rÃ´zne vÃ½zvy. RieÅ¡enÃ­m sa mÃ´Å¾u zdaÅ¥ online fÃ³ra, avÅ¡ak tie trpia viac problÃ©mami, ako sa zdÃ¡. JednÃ½m z prÃ­kladov mÃ´Å¾e byÅ¥ nÃ­zka efektivita dohadovania sa na fÃ³re Ãºstiaca do neschopnosti ÃºÄastnÃ­kov sa dohodnÃºÅ¥. OdporÃºÄanÃ­m sa vÅ¡ak dajÃº zmierniÅ¥ rÃ´zne, aj tieto problÃ©my, napr. odporÃºÄanÃ­m ÃºÄastnÃ­kovâexpertov, tÃ©m diskusii, Äi dokonca funkciÃ­ podÄ¾a podobnÃ©ho produktu. Dohadovanie potom naberÃ¡ inÃ½ rozmer; systÃ©m prispieva k formovaniu produktu. Tento ÄlÃ¡nok diskutuje a opisuje postupy, existujÃºce systÃ©my a algoritmy pre odporÃºÄanie vo fÃ¡ze analÃ½zy poÅ¾iadaviek. Formovanie softvÃ©rovÃ©ho produktu je zloÅ¾itÃ½ proces, v ktorom pÃ´sobÃ­ mnoho Ä¾udÃ­. Za cieÄ¾ si kladÃº explicitnÃº identifikÃ¡ciu potrieb, poÅ¾iadaviek a tÃºÅ¾ob ÃºÄastnÃ­kov. PrÃ¡ve tu je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e tÃ­to ÃºÄastnÃ­ci zvÃ¤ÄÅ¡a orientovanÃ­ na podnikanie nemajÃº technickÃ© pozadie a preto sÃº potrebnÃ­ aj ÄalÅ¡Ã­ ÃºÄastnÃ­ciâprÃ¡ve tÃ­ s technickÃ½m pozadÃ­m. V sÃºÄte je to potom tÃ½chto mnoho Ä¾udÃ­, kde kaÅ¾dÃ½ je orientovanÃ½ na inÃº problematiku, ktorÃ­ sa spoloÄne podieÄ¾ajÃº na formovanÃ­ analÃ½zy poÅ¾iadaviek a teda identifikÃ¡ciu potrieb, poÅ¾iadaviek a tÃºÅ¾ob. VÅ¡etci tÃ­to Ä¾udia sa musia dohodnÃºÅ¥ a Äasto sa nenachÃ¡dzajÃº na rovnakom mieste, alebo majÃº rovnakÃ½ ÄasovÃ½ priestor. Preto systÃ©m vo fÃ¡ze analÃ½zy poÅ¾iadaviek musÃ­ umoÅ¾niÅ¥ formovaÅ¥ poÅ¾iadavky v iterÃ¡ciÃ¡ch a asynchrÃ³nne. Okrem spomenutÃ©ho, kaÅ¾dÃ½ ÃºÄastnÃ­k mÃ´Å¾e maÅ¥ inÃ© predstavy a eÅ¡te navyÅ¡e do toho vstupuje expert, ktorÃ½ mÃ´Å¾e vo veÄ¾kej miere ovplyvniÅ¥ rozhodovanie."
43,300,0.51,Objektovo orientovanÃ© programovanie v C++,"Pre eÅ¡te vÃ¤ÄÅ¡iu nÃ¡zornosÅ¥ je princÃ­p kopÃ­rovacieho konÅ¡truktora ilustrovanÃ½ na obr. 7.1. Ide o vÅ¡eobecnÃ½ prÃ­klad objektu s tromi Ãºdajmi, z ktorÃ½ch jeden je smernÃ­k pouÅ¾itÃ½ na dynamickÃº alokÃ¡ciu jednorozmernÃ©ho poÄ¾a. VidÃ­me, Å¾e jedinÃ©, ÄÃ­m sa objekt a jeho kÃ³pia vytvorenÃ¡ pomocou kopÃ­rovacieho konÅ¡truktora lÃ­Å¡ia, je miesto v pamÃ¤ti, kde je toto pole uloÅ¾enÃ©. A presne tak to mÃ¡ byÅ¥."
239,46,0.51,Ãvod do matematickej logiky,"Veta 3.2 (Postova). Pre lâubovolânuÌ formulu A vyÌrokovej logiky platÄ±Ì â¢ A praÌve vtedy, kedâ  A. DoÌkaz. Nech platÄ±Ì â¢ A. Z CvicÌenia 1.2 vieme, zÌe vsÌetky axioÌmy suÌ tautoloÌgie a podlâa CvicÌenia 1.3 ak  B a  BâC, tak aj  C. Teda pre lâubovolânyÌ doÌkaz A1 , A2 , . . . , An formuly A platÄ±Ì  Ai pre vsÌetky i = 1, 2, . . . , n a teda aj  A. (Poznamenajme, zÌe doÌkaz A1 , A2 , . . . , An bol doÌkaz v zmysle deï¬nÄ±Ìcie pred Lemou 2.1, cÌizÌe bez predpokladov. Vzhlâadom na poznaÌmku za Vetou o dedukcii, z kazÌdeÌho doÌkazu formuly A, aj z toho, ktoryÌ vyuzÌÄ±Ìva Vetu o dedukcii a ineÌ pomocneÌ tvrdenia, vieme vytvoritâ doÌkaz v zmysle deï¬nÄ±Ìcie pred Lemou 2.1.) Naopak, majme danuÌ tautoloÌgiu A. UkaÌzÌeme, zÌe A je dokaÌzatelânaÌ. Nech suÌ {p1 , p2 , . . . , pn } vsÌetky prvotneÌ formuly vyskytujuÌce sa v A. Potom podlâa Lemy 3.1 pre lâubovolâneÌ ohodnotenie Âµ prvotnyÌch formuÌl platÄ±Ì {pÂµ1 , pÂµ2 , . . . , pÂµn } â¢ A. (KedâzÌe A je tautoloÌgiou, tak AÂµ je vzÌdy A.) Nech je Âµâ² ohodnotenie lÄ±ÌsÌiace sa od Âµ len v hodnote pre pn . Potom aj pre Âµâ² platÄ±Ì Lema 3.1 a teda: 1â² : {pÂµ1 , pÂµ2 , . . . , pÂµnâ1 , pn } â¢ A Lema 3.1 Âµ Âµ 2 : {p1 , p2 , . . . , pnâ1 , q pn } â¢ A Lema 3.1 Âµ Âµ 3 : {p1 , p2 , . . . , pnâ1 } â¢ A Veta 2.10 na 1â² a 2â² Teraz zvolâme Âµâ²â² takeÌ, zÌe Âµâ²â² sa lÄ±ÌsÌi od Âµ len v hodnote priradenej pnâ1 . Potom obdobne, ako v predchaÌdzajuÌcom (Âµ bolo lâubovolâneÌ), vieme odvoditâ aj:"
205,189,0.51,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","10.4 Zhrnutie PopulÃ¡rne webovÃ© aplikÃ¡cie poskytujÃºce sluÅ¾by sociÃ¡lnych sietÃ­ podnecujÃº skÃºmanie Å¡truktÃºr sociÃ¡lnych sietÃ­ a interakciu jedincov v sieÅ¥ach. Jeden z princÃ­pov, ktorÃ½ na Å¡truktÃºru zÃ¡sadne vplÃ½va, je homofÃ­lia. Medzi podobnÃ½mi Ä¾uÄmi sa vytvÃ¡rajÃº prepojenia s veÄ¾kou pravdepodobnosÅ¥ou a naopak Ä¾udia, medzi ktorÃ½mi sÃº prepojenia, sa ovplyvÅujÃº svojimi zÃ¡ujmami. Za tieto javy sÃº zodpovednÃ© mechanizmy selekcie a sociÃ¡lneho vplyvu. SociÃ¡lno-afiliaÄnÃ¡ sieÅ¥ berie do"
265,259,0.51,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"âNajtuÄnejÅ¡Ã­mi prÃ­kladmiâ mÃ´Å¾u byÅ¥ naprÃ­klad HTML5 hry. PoznÃ¡mka: Striktne vzatÃ© moÅ¾no pod pojmom webovÃ¡ aplikÃ¡cia chÃ¡paÅ¥ len aplikÃ¡cie postavenÃ© na HTML. V Å¡irÅ¡om ponÃ­manÃ­ by sme mohli uvaÅ¾ovaÅ¥ aj tzv. bohatÃ© internetovÃ© aplikÃ¡cie (rich internet applications), beÅ¾iace na Å¡peciÃ¡lnych platformÃ¡ch ako Flash alebo Silverlight. TakÃ©to aplikÃ¡cie zo svojej podstaty tieÅ¾ spadajÃº skÃ´r do kategÃ³rie tuÄnÃ½ch klientov."
76,296,0.51,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ak zvolÃ­me 14 tried, triedy majÃº Å¡Ã­rku 1 a teraz (pre zmenu) tabuÄ¾ka namiesto hranÃ­c tried, uvÃ¡dza stredy tried, tzv. triednych reprezentantov NeskÃ´r ukÃ¡Å¾eme ako ich vyuÅ¾ijeme pri aproximovanÃ­ vÃ½berovÃ½ch Å¡tatistÃ­k. Tu je tabuÄ¾ka poÄetnostÃ­:"
196,49,0.51,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"novÃ©ho projektu, v adresÃ¡ri sÃºbor main.tex v implicitnej Å¡ablÃ³ne a dâalÅ¡ie sÃºbory (output.aux, output.chktex, output.log, output.stderr, output.stdout a output.synctex.gz). 7. SystÃ©m Overleaf skompiluje zdrojovÃ½ main.tex do formÃ¡tu .pdf a uloÅ¾Ã­ pod nÃ¡zvom rovnomennÃ½m s nÃ¡zvom projektu. 8. SystÃ©m Overleaf zobrazÃ­ vytvorenÃ© sÃºbory â zdrojovÃ½ sÃºbor main.tex v ediore a .pdf v nÃ¡hlâade (obr. 2.3 a 2.4). 9. PrÃ­pad pouÅ¾itia koncÌÃ­. AlternatÃ­vny tok: V kroku 5 pouÅ¾Ã­vatelâ zruÅ¡Ã­ operÃ¡ciu:"
265,104,0.509,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ZisÅ¥ovanie, Äi softvÃ©r zodpovedÃ¡ svojej Å¡pecifikÃ¡ciÃ­. VerifikÃ¡cia prebieha uskutoÄÅovanÃ­m scenÃ¡rov pouÅ¾itia softvÃ©ru, definovanÃ½ch v Å¡pecifikÃ¡ciÃ­ a kontrolou, Äi sa softvÃ©r sprÃ¡va tak, ako Å¡pecifikÃ¡cia oÄakÃ¡va. ScenÃ¡re pritom mÃ´Å¾u pokrÃ½vaÅ¥ funkcionalitu v rÃ´znej miere: od jednoduchÃ½ch jednotkovÃ½ch (angl. unit) testov, verifikujÃºcich jednotlivÃ© metÃ³dy aÅ¾ po komplexnÃ© akceptaÄnÃ© testy, predstavujÃºce typickÃ© scenÃ¡re pouÅ¾itia softvÃ©ru. Pozor: ako synonymum verifikÃ¡cie sa Äasto nesprÃ¡vne pouÅ¾Ã­va termÃ­n âoverovanieâ."
43,92,0.509,Objektovo orientovanÃ© programovanie v C++,"Pre textovÃ© sÃºbory zostÃ¡va platnÃ© prakticky vÅ¡etko, o Äom sme si hovorili v prÃ­pade vÃ½stupu na konzolu a vstupu z klÃ¡vesnice. FungujÃº rovnakÃ© operÃ¡tory aj metÃ³dy. UkÃ¡Å¾eme si to na jednoduchÃ½ch prÃ­kladoch. PrÃ­klad. Vytvorme program, ktorÃ½ urobÃ­ roÄnÃº Å¡tatistiku turistickÃ©ho ruchu na Slovensku. V textovom sÃºbore turisti.txt sÃº uloÅ¾enÃ© poÄty turistov, ktorÃ­ navÅ¡tÃ­vili Slovensko v jednotlivÃ½ch mesiacoch roka. Program urÄÃ­ maximum, minimum a aritmetickÃ½ priemer z tÃ½chto Ãºdajov a zapÃ­Å¡e ich do novÃ©ho sÃºboru rocna statistika.txt. V programe budeme maÅ¥ dva objekty triedy fstream â vstup, ktorÃ½ otvorÃ­me na ÄÃ­tanie, a vystup, ktorÃ½ bude otvorenÃ½ na zapisovanie. KeÄÅ¾e ide o Å¡tatistiku z jednotlivÃ½ch mesiacov roka, vieme urÄite, Å¾e v sÃºbore je 12 Ãºdajov. PrvÃ½ z nich naÄÃ­tame zvlÃ¡Å¡Å¥ a pouÅ¾ijeme ho na inicializÃ¡ciu maxima, minima a sÃºÄtu Ãºdajov zo vÅ¡etkÃ½ch mesiacov. VzÃ¡pÃ¤tÃ­ zaÄneme naÄÃ­tavaÅ¥ zvyÅ¡nÃ½ch 11 Ãºdajov a urÄujeme novÃ© hodnoty maxima, minima a sÃºÄtu. Po prebehnutÃ­ cyklu vstupnÃ½ sÃºbor zatvorÃ­me a vypÃ­Å¡eme vÃ½sledky do vÃ½stupnÃ©ho sÃºboru. #include <fstream> using namespace std; int main() fstream vstup(""turisti.txt"", fstream::in); int max, min, sucet, pocet;"
343,19,0.509,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"okrem spomenutÃ©ho burn mechanizmu, ktorÃ½ pri kaÅ¾dej transakcii spÃ¡li urÄitÃ© mnoÅ¾stvo ETH, aby sa dosahoval cieÄ¾ deflaÄnej meny, sÃº tam aj simulÃ¡cie, keby ETH ostalo pri PoW, ale aj inÃ© porovnania s ÄalÅ¡Ã­mi kryptomenami. MÃ¡te tam graf, ktorÃ½ hovorÃ­ o tom, Å¾e ako roÄne sa zvÃ¤ÄÅ¡uje/zmenÅ¡uje Ethereum. PÃ´vodne pri PoW platilo, Å¾e pribudne 18 miliÃ³nov novÃ½ch ETH kaÅ¾dÃ½ rok. Na obrÃ¡zku 4, ale moÅ¾no vidieÅ¥, Å¾e medziroÄne mÃ¡me mÃ­nus 1,24 miliÃ³na ETH, Äo je priemerne -0,30 % na rok."
43,247,0.509,Objektovo orientovanÃ© programovanie v C++,"6.3 SmernÃ­k this V rÃ¡mci objektu existuje jeden Å¡peciÃ¡lny smernÃ­k, ktorÃ½ obsahuje adresu v pamÃ¤ti, na ktorej je objekt uloÅ¾enÃ½. Je to teda smernÃ­k, ktorÃ½m objekt ukazuje sÃ¡m na seba, smernÃ­k, ktorÃ½ slÃºÅ¾i na to, aby objekt sÃ¡m o sebe vedel, kde sa v pamÃ¤ti nachÃ¡dza. Tento smernÃ­k sa nazÃ½va this. Kedy sa takÃ½to smernÃ­k pouÅ¾Ã­va? UkÃ¡Å¾eme si dva najÄastejÅ¡ie sa vyskytujÃºce prÃ­pady. Predstavme si triedu obdlznik s dvomi Ãºdajmi a, b, ktorÃ© reprezentujÃº dÄºÅ¾ky jeho strÃ¡n. Nech sa tieto dÄºÅ¾ky nastavujÃº v konÅ¡truktore. class obdlznik private: float a, b; public: obdlznik(float strana a, float strana b); obdlznik::obdlznik(float strana a, float strana b) a=strana a; b=strana b;"
43,420,0.509,Objektovo orientovanÃ© programovanie v C++,"9.1 Å ablÃ³ny a generickÃ© programovanie V celom doterajÅ¡om texte sme postupovali tak, Å¾e pri vytvÃ¡ranÃ­ nejakej triedy alebo funkcie sme presne urÄili vÅ¡etky dÃ¡tovÃ© typy. Ãdaje tried, parametre funkciÃ­, ich nÃ¡vratovÃ© hodnoty a vÃ´bec vÅ¡etky premennÃ© v programe mali jednoznaÄne danÃ½ svoj typ. Ak by sme to neurobili, nÃ¡Å¡ program by ani nepreÅ¡iel kompilÃ¡ciou. MoÅ¾nosti objektovo orientovanÃ©ho programovania v C++ sÃº Å¡irokÃ© a pri ich sprÃ¡vnom pouÅ¾itÃ­ dokÃ¡Å¾eme skutoÄne zefektÃ­vniÅ¥ a prehÄ¾adne usporiadaÅ¥ zÃ¡pis programu. Autor C++ vÅ¡ak v snahe o eÅ¡te vÃ¤ÄÅ¡iu efektÃ­vnosÅ¥ zaÅ¡iel eÅ¡te Äalej a sÃºstredil sa prÃ¡ve na dÃ¡tovÃ© typy. V programoch sa totiÅ¾ Äasto stÃ¡valo, Å¾e vznikali naprÃ­klad funkcie, ktorÃ© mali v podstate identickÃ½ obsah a lÃ­Å¡ili sa len typom niektorÃ½ch premennÃ½ch, parametrov alebo nÃ¡vratovej hodnoty. Polymorï¬zmus umoÅ¾Åuje takÃ©to funkcie pomenovaÅ¥ rovnakÃ½m nÃ¡zvom a tÃ½m odbÃºra mnoÅ¾stvo rÃ´znych mien, ktorÃ© by sa v programe mohli nahromadiÅ¥. Faktom ale zostÃ¡va, Å¾e vÅ¡etky verzie funkcie musÃ­ programÃ¡tor napÃ­saÅ¥ a kÃ³d tak obsahuje opakujÃºce sa Äasti. RieÅ¡enie tohto problÃ©mu ponÃºkajÃº Å¡ablÃ³ny (angl. template). VÄaka Å¡ablÃ³nam mÃ´Å¾eme deï¬novaÅ¥ vÅ¡eobecnÃ© funkcie alebo aj triedy, v ktorÃ½ch sa typ dÃ¡t urÄÃ­ aÅ¾ v okamihu ich pouÅ¾itia. V reÃ¡lnom svete je Å¡ablÃ³nou naprÃ­klad strih Å¡iat â podÄ¾a jednÃ©ho strihu sa dajÃº uÅ¡iÅ¥ Å¡aty rÃ´znych farieb alebo z rÃ´znych materiÃ¡lov. VÅ¡etky budÃº maÅ¥ rovnakÃ½ tvar, ale v konkrÃ©tnom prevedenÃ­ sa budÃº lÃ­Å¡iÅ¥. Strih mÃ´Å¾eme pouÅ¾iÅ¥ kedykoÄ¾vek a Ä¾ubovoÄ¾ne veÄ¾akrÃ¡t. RovnakÃ© je to aj so Å¡ablÃ³nami funkciÃ­ a tried. MÃ´Å¾eme podÄ¾a nich kedykoÄ¾vek vyrobiÅ¥ funkciu alebo triedu, ktorÃ¡ bude maÅ¥ presne danÃ½ tvar, rovnako ako je danÃ½ tvar Å¡iat, a Ãºlohu farby alebo materiÃ¡lu tu budÃº hraÅ¥ dÃ¡tovÃ© typy â v nich bude kaÅ¾dÃ¡ funkcia alebo trieda originÃ¡lna a odliÅ¡nÃ¡ od ostatnÃ½ch funkciÃ­ alebo tried s rovnakÃ½m tvarom. GenerickÃ© programovanie (angl. generic programming) je programovanie vyuÅ¾Ã­vajÃºce Å¡ablÃ³ny. GenerickÃ© znamenÃ¡ vÅ¡eobecnÃ©, Äo nÃ¡m napovedÃ¡, Å¾e v programe sa budÃº vyskytovaÅ¥ zovÅ¡eobecnenÃ© funkcie alebo triedy."
239,82,0.509,Ãvod do matematickej logiky,"V dâalsÌom, tretâom kroku, zÄ±Ìskame â¡ ako rezolventu 14, 37, respektÄ±Ìve 20, 31. ZnamenaÌ to, zÌe A je kontradikcia. PoznaÌmka. VsÌimnime si doÌkladne znenie Vety 5.1. Mohli by sme iba na zaÌklade tejto vety tvrditâ, zÌe A je splnitelânaÌ kedâ v zÌiadnom kroku nedostaneme praÌzdnu klauzulu â¡ ? Tento probleÌm vyriesÌime vo Vete 5.2"
135,9,0.508,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Diel 2: VybranÃ© tÃ©my programovÃ½ch a informanÃ½ch systÃ©mov Do druhej asti zaraujeme osem Å¡tÃºdiÃ­, ktorÃ© sa venujÃº vybranÃ½m otvorenÃ½m vedeckÃ½m problÃ©mom, tÃ½kajÃºcim sa programovÃ½ch a informanÃ½ch systÃ©mov. Ide o oblasti, v ktorÃ½ch prebieha vemi intenzÃ­vny vÃ½voj. ProgramovÃ© systÃ©my sa stÃ¡vajÃº systÃ©mami, pÃ´sobiacimi v oraz rÃ´znorodejÅ¡om prostredÃ­, vrÃ¡tane internetu. StÃ¡vajÃº sa sÃºasou oraz komplexnejÅ¡Ã­ch systÃ©mov â na jednej strane rozsiahlych informanÃ½ch systÃ©mov, na druhej strane systÃ©mov, spolu urenÃ½ch technickou platformou, ktorou uÅ¾ dÃ¡vno nie je len poÃ­ta v klasickom slova zmysle, ale aj najrÃ´znejÅ¡ie vnorenÃ© systÃ©my, (tele)komunikanÃ© systÃ©my a pod. InformanÃ© systÃ©my sa stÃ¡vajÃº univerzÃ¡lnym modelom spÃ´sobov vyhadÃ¡vania, zÃ­skavania, sprÃ­stupovania, uchovÃ¡vania, odovzdÃ¡vania, spolonÃ©ho pouÅ¾Ã­vania, prezentovania informÃ¡ciÃ­. I ke sa v zÃ¡sade dÃ¡ na ne nazera odhliadnuc od toho, i sÃº operÃ¡cie"
135,160,0.508,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"NovÃ© triedy sa vytvÃ¡rajÃº odvodenÃ­m od existujÃºcich tried. Podtrieda zdedÃ­ rozhrania a ich implementÃ¡cie z rodiovskej triedy. MetÃ³dy mÃ´Å¾eme preaÅ¾i. NovÃ© metÃ³dy mÃ´Å¾u by pridanÃ©, starÃ© mÃ´Å¾u by preaÅ¾enÃ©. SOM podporuje viacnÃ¡sobnÃ© dedenie. Rozhrania k SOM objektom sa definujÃº pomocou SOM IDL (Interface Definition Language), ktorÃ© je rozÅ¡Ã­renÃ­m CORBA IDL o moÅ¾nos Å¡pecifikova dodatonÃ© informÃ¡cie o implementÃ¡cii. Objekt Å¡pecifikujeme v IDL (prÃ­klad 2-5), pre ktorÃ© SOM IDL kompilÃ¡tor vytvorÃ­ jazykovo Å¡pecifickÃ© previazania pre cieovÃ½ kompilÃ¡tor (podporovanÃ© sÃº C a C++) koreÅ¡pondujÃºce s definÃ­ciou triedy v jazyku IDL. #include <somobj.idl> interface Hello : SOMObject void sayHello(); PrÃ­klad 2-5. JednoduchÃ½ IDL sÃºbor."
195,157,0.508,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"8.4 Zhrnutie V tejto prÃ¡ci sme sa venovali oblastnÃ½m Å¡tÃºdiÃ¡m v kontexte odporÃºÄacÃ­ch systÃ©mov v softvÃ©rovom inÅ¾inierstve. NaÅ¡Ã­m cieÄ¾om bolo ukÃ¡zaÅ¥, ako viesÅ¥ krok za krokom oblastnÃº Å¡tÃºdiu na vytvorenie odporÃºÄacÃ­ch systÃ©mov. Na zaÄiatku sme predstavili akÃ© metÃ³dy, metodolÃ³gie a epistemolÃ³gie sa vyuÅ¾Ã­vajÃº na vÃ½skum vÅ¡eobecne. Tento prehÄ¾ad a poznatky by nÃ¡m mali daÅ¥ urÄitÃº perspektÃ­vu a konzistenciu v oblastnej Å¡tÃºdii. Äalej sme opÃ­sali, akÃ© kroky zahÅÅajÃº vedenie oblastnej Å¡tÃºdie. Nakoniec sme zvÃ½raznili vÃ½zvy tohto procesu. OblastnÃ© Å¡tÃºdie sÃº jedinÃ½m spÃ´sobom, ako vÃ½skumnÃ­ci mÃ´Å¾u pochopiÅ¥ oblasti svojho zÃ¡ujmu a navrhnÃºÅ¥ technickÃ© rieÅ¡enia pre reÃ¡lne potreby praktikantov. Bolo zistenÃ©, Å¾e technickÃ© vÃ½zvy sa Ä¾ahko prekonÃ¡vajÃº, za to sociÃ¡lne, organizaÄnÃ© a poznÃ¡vacie vÃ½zvy sÃº tie, ktorÃ© robia prijatie a pouÅ¾itie odporÃºÄacie systÃ©mu Å¥aÅ¾Å¡Ã­m. Preto je potrebnÃ© viesÅ¥ viac oblastnÃ½ch Å¡tÃºdiÃ­ na prekonÃ¡vanie tÃ½chto problÃ©mov a navrhnÃºÅ¥ ich rieÅ¡enia. KombinÃ¡cia softvÃ©rovÃ©ho inÅ¾inierstva, strojovÃ©ho uÄenia a dolovania dÃ¡t vie pomÃ´cÅ¥ prÃ­stupu k veÄ¾kÃ½m dÃ¡tam a hÄºbkovej analÃ½ze. Preto by odporÃºÄacie systÃ©my nemali byÅ¥ vytvorenÃ© obmedzenÃ½m poÄtom offline experimentov. Potrebujeme pochopiÅ¥ zÃ¡kladnÃ© pojmy a skÃºmaÅ¥ ich s dostupnÃ½mi dÃ¡tami a modelmi. V tomto zmysle sÃº oblastnÃ© Å¡tÃºdie jedinÃ½m spÃ´sobom k prekonaniu limitov a predpokladov."
59,191,0.508,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.24. VÃ½sledky genetickÃ©ho algoritmu pouÅ¾itÃ©ho pre emergenciu vÃ½slednej stratÃ©gie, priÄom populÃ¡cia stratÃ©giÃ­ bola inicializovanÃ¡ nÃ¡hodne. V priebehu evolÃºcie algoritmu spontÃ¡nne emergovali dve âkooperatÃ­vneâ stratÃ©gie (001) a (000), ktorÃ© zahajujÃº hru kooperÃ¡ciou a na kooperÃ¡ciu sÃºpera v predchÃ¡dzajÃºcom Å¥ahu odpovedajÃº kooperÃ¡ciou v nasledujÃºcom Å¥ahu. V dÃ´sledku toho, Å¾e vÃ¤ÄÅ¡inovÃ¡ stratÃ©gia (001) neprodukuje âpodvodâ, menÅ¡inovÃ¡ stratÃ©gia (000) nemÃ¡ prÃ­leÅ¾itosÅ¥ reagovaÅ¥ spoluprÃ¡cou na podvod."
130,510,0.508,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Nie sÃº tu Å¾iadne prÃ­davnÃ© vÃ½hody, aspoÅ nie evidentnÃ© pre âobyÄajnÃ½châ koncovÃ½ch pouÅ¾Ã­vateÄ¾ov. KÃ½m HTML strÃ¡nky, ktorÃ© sÃº ÄitateÄ¾nÃ© Ä¾uÄmi a primÃ¡rne navrhovanÃ© pre inÃ½ch Ä¾udÃ­, mohli byÅ¥ pouÅ¾itÃ© aj pre osobnÃ© ÃºÄely, toto neplatÃ­ pre RDF fakty, ktorÃ½ch dÃ´vodom pouÅ¾itia je hlavne ich strojovÃ© spracovanie."
59,280,0.508,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"5.5 KlasickÃ½ prÃ­stup k adaptÃ¡cii neurÃ³novÃ½ch sietÃ­ reprezentujÃºcich kognitÃ­vny orgÃ¡n agenta KlasickÃ½ prÃ­stup [5] k adaptÃ¡cii neurÃ³novÃ½ch sietÃ­ je zaloÅ¾enÃ½ na pouÅ¾itÃ­ tzv. trÃ©ningovej mnoÅ¾iny, ktorÃ¡ obsahuje dvojice vektorov vstupnÃ½ch a poÅ¾adovanÃ½ch vÃ½stupnÃ½ch aktivÃ­t (poznamenajme, Å¾e vektor vstupnÃ½ch aktivÃ­t obvykle je numerickou reprezentÃ¡ciou objektu klasifikovanÃ©ho neurÃ³novou sieÅ¥ou, priÄom poÅ¾adovanÃ© vÃ½stupnÃ© aktivity klasifikujÃº danÃ½ objekt) (5.6) Atrain ï½ ï» x ï½ ï¨ x1 ,x2 ,...,xn ï© zreq ï½ To znamenÃ¡, Å¾e neurÃ³novÃ¡ sieÅ¥ je parametrickÃ© zobrazenie n-rozmernÃ½ch vektorov na reÃ¡lne ÄÃ­slo z otvorenÃ©ho intervalu (0,1) G ï¨ wï© :Rn ï® ï¨ 0,1ï© (5.7) AdaptÃ¡cia neurÃ³novej siete je realizovanÃ¡ pomocou minimalizÃ¡cie ÃºÄelovej funkcie vyjadrujÃºcej sumu kvadrÃ¡tov rozdielov medzi vypoÄÃ­tanÃ½mi a poÅ¾adovanÃ½mi vÃ½stupnÃ½mi aktivitami"
59,266,0.508,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 5.3. Diagramy A-B znÃ¡zorÅujÃº zÃ¡kladnÃ© typy vidliÄkovÃ½ch pozÃ­ciÃ­, ktorÃ© sÃº aplikovateÄ¾nÃ© pouÅ¾itÃ­m pravidiel 3 a 4. Tak naprÃ­klad, diagram A znÃ¡zorÅuje vÃ½chodiskovÃº pozÃ­ciu pre prÃ­pravu âvidliÄkyâ; pÃ­smena E Å¡pecifikujÃº prÃ¡zdne bunky. Z diagramu A mÃ´Å¾eme vytvoriÅ¥ dve âvidliÄkovÃ©â pozÃ­cie. Diagram C znÃ¡zorÅuje hru, ktorÃ¡ je prehranÃ¡ pre hrÃ¡Äa O uÅ¾ po druhom Å¥ahu. DruhÃ½ hrÃ¡Ä urobil âfatÃ¡lnuâ chybu, keÄ umiestnil svoju figÃºru O v druhom Å¥ahu v druhom stÄºpci hore, podÄ¾a pravidla mal obsadiÅ¥ rohovÃ© pole. Diagram D znÃ¡zorÅuje hru, ktorÃ¡ prebieha podÄ¾a pravidiel, konÄÃ­ remÃ­zou."
265,183,0.508,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Samozrejme, cieÄ¾om Å¡tÃºdie je primerane kvalifikovanÃ½ odhad reÃ¡lnosti vytvorenia softvÃ©ru, preto ju nemÃ´Å¾eme v zÃ¡ujme rÃ½chlosti a ceny Ãºplne zanedbaÅ¥. PlatÃ­ vÅ¡ak, Å¾e s lineÃ¡rne rastÃºcim ÃºsilÃ­m vloÅ¾enÃ½m do Å¡tÃºdie rastie presnosÅ¥ jej odhadov len logaritmicky. OplatÃ­ sa teda do nej investovaÅ¥ len malÃ© (ale zÃ¡roveÅ aspoÅ nejakÃ©) mnoÅ¾stvo Ãºsilia."
361,20,0.508,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","NaprÄ±Ìklad slovenskaÌ abeceda moÌzÌe pozostaÌvatâ zo 46 zaÌkladnyÌch znakov â pÄ±Ìsmen a, aÌ, b, ..., zÌ. Jedno z mozÌnyÌch rozsÌÄ±ÌrenÄ±Ì je abeceda UNICODE, ktoraÌ pokryÌva symboly vaÌcÌsÌiny svetovyÌch jazykov. DefinÄ±Ìcia 2.2: Retâazec symbolov abecedy vytvaÌra slovo v. Slovom budeme teda oznacÌovatâ kazÌduÌ konecÌnuÌ postupnostâ symbolov z abecedy Î£. PraÌzdnym retâazcom budeme nazyÌvatâ praÌzdnu postupnostâ symbolov, teda postupnostâ, ktoraÌ neobsahuje zÌiadny symbol. PraÌzdny retâazec oznacÌujeme . PocÌet symbolov v slove v vyjadruje jeho dlÌzÌku â |v|. DlÌzÌka praÌzdneho slova je teda || = 0. FormaÌlne slovo definujeme ako: 1. kazÌdyÌ symbol z abecedy Î£ je aj slovom nad abecedou Î£ 2. praÌzdne slovo  je slovo nad abecedou Î£ 3. ak u je slovo nad Î£ a zaÌrovenÌ t je slovo nad Î£, potom ut â Î£ 4. slovo v je slovo nad Î£ â ak vieme v zÄ±Ìskatâ aplikaÌciou pravidiel 1, 2 a 3 Na zjednodusÌenie zaÌpisu, budeme pocÌet vyÌskytov symbolu a v slove v oznacÌovatâ ako #a (v). NaprÄ±Ìklad pocÌet vyÌskytu symbolu a v slove abbbaba je #a (v) = 3."
343,69,0.508,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"10 ZaujÃ­mavÃ© vybranÃ© aplikÃ¡cie tvorenÃ© vÃ½vojÃ¡rmi z okolia Slovenska V tejto kapitole by sme na zÃ¡ver radi poukÃ¡zali na zopÃ¡r aplikÃ¡ciÃ­, ktorÃ© nÃ¡s zaujali a myslÃ­me si, Å¾e prinÃ¡Å¡ajÃº inovÃ¡cie do ekosystÃ©mu blockchain sietÃ­. KeÄÅ¾e celosvetovo je takÃ½chto aplikÃ¡ciÃ­ prÃ­liÅ¡ veÄ¾a, tak sme naÅ¡e pohÄ¾ady upriamili na Slovensko a blÃ­zke okolie, ako je MaÄarsko, Äesko, PoÄ¾sko, RakÃºsko, Srbsko, Slovinsko, Ukrajina, Rumunsko."
343,18,0.507,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"https://ultrasound.money/ si mÃ´Å¾eme porovnaÅ¥, ako sa Ethereum zmenilo na deflaÄnÃº menu. CelkovÃ© mnoÅ¾stvo vÅ¡etkÃ½ch ETH v sieti, tzv. supply, by pri Proof of Work bolo plus cca 2 miliÃ³ny ETH. KeÄ sa pozrieme na realitu s PoS, tak mÃ¡me mÃ­nus 400 tisÃ­c ETH od oktÃ³bra 2022, kedy bol Merge a projekcia do roku 2224 je minus 40 miliÃ³nov ETH. Toto sÃº hlavnÃ© ukazovatele, ktorÃ© by nÃ¡s mali presvedÄiÅ¥ o tom, Å¾e Ethereum je deflaÄnÃ¡ mena. Na tejto strÃ¡nke je veÄ¾a Å¡tatistÃ­k a"
196,73,0.507,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Tie po preklade indikuje rÃ¡mcÌekom a nÃ¡zvom sÃºboru. Pre finÃ¡lne vysÃ¡dzanie dokumentu vrÃ¡tane obrÃ¡zkov je potrebnÃ© draft nahraditâ vlastnostâou final. V prÃ­pade triedy prezentÃ¡cia nadpisy, titulky a bocÌnÃ© pruhy budÃº nahradenÃ© sivÃ½mi obdlÌÅ¾nikmi https://mirror.szerverem.hu/ct an/macros/latex/contrib/beamer/doc/beameruserg uide.pdf (kapitola 4.3.3 Ways of Improving Compilation Speed, p 31.). â¢ ObojstrannÃ¡ sadzba â umoÅ¾nÌuje nastavitâ reÅ¾im oneside (prednastavenÃ½ pre article a report), pri ktorom sÃº lâavÃ½ a pravÃ½ okraj rovnakÃ½ a dokument nerozliÅ¡uje medzi vnÃºtornÃ½m a vonkajÅ¡Ã­m okrajom ako je tomu v prÃ­pade twoside (prednastavenÃ½ pre book), kedy LATEX rozliÅ¡uje medzi stranami a vytvÃ¡ra vonkajÅ¡Ã­ okraj Å¡irÅ¡Ã­ v prÃ­pade pÃ¡rnej strany vlâavo a nepÃ¡rnej vpravo. â¢ ZarovnÃ¡vanie matematickÃ½ch vzorcov â prednastavenÃ© je centrovanie vzorcov na stred s cÌÃ­slovanÃ­m umiestnenÃ½m vpravo. Parameter fleqn zmenÃ­ zarovnÃ¡vanie vzorcov vlâavo a parameter leqno zmenÃ­ umiestnenie cÌÃ­slovania vlâavo. â¢ SamostatnÃ¡ titulnÃ¡ strana â vlastnostâ titlepage je moÅ¾nÃ© nastavitâ iba pre triedu article (prednastavenÃ¡ je hodnota notitlepage). NÃ¡zov bude umiestnenÃ½ na samostatnÃº necÌÃ­slovanÃº stranu (takto je to implicitnÃ© pre report a book) prÃ­kazom \maketitle. V prÃ­pade triedy memoir, sa pouÅ¾Ã­va titlingpage prostredie vidâ. memoir documentation http://mirror.ctan.org/macros/latex/contrib /memoir/memman.pdf (chapter Four: Titles, p. 61). â¢ ZacÌiatok kapitoly â vlastnostâ openright otvÃ¡ra kapitolu vÅ¾dy na novej strane vpravo (implicitne v prÃ­pade triedy book) zatialâ cÌo openany na nasledujÃºcej volânej strane (implicitne v prÃ­pade triedy report). RelevantnÃ© okrem triedy cÌlÃ¡nok, ktorÃ¡ sa necÌlenÃ­ na kapitoly."
184,153,0.507,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ZdieÄ¾anie zdrojov viacerÃ½mi pouÅ¾Ã­vateÄ¾mi SystÃ©m ICDE je moÅ¾nÃ© nasadiÅ¥ oddelene pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a, ktorÃ½ bude maÅ¥ vlastnÃº serverovÃº ÄasÅ¥ s databÃ¡zou. AlternatÃ­vne mÃ´Å¾u viacerÃ­ pouÅ¾Ã­vatelia zdieÄ¾aÅ¥ jednu inÅ¡tanciu serverovej Äasti systÃ©mu s databÃ¡zou. ZdieÄ¾anie zdrojov viacerÃ½mi pouÅ¾Ã­vateÄ¾mi prinÃ¡Å¡a spravidla viacerÃ© vÃ½hody v podobe niÅ¾Å¡Ã­ch celkovÃ½ch nÃ¡kladov a jednoduchÅ¡ej sprÃ¡vy systÃ©mu, najmÃ¤ kvÃ´li moÅ¾nosti lepÅ¡ieho vyuÅ¾itia zdrojov a niÅ¾Å¡ej zloÅ¾itosti systÃ©mu. V prÃ­pade systÃ©mu ICDE mÃ¡ zdieÄ¾anie zdrojov tieto potenciÃ¡lne prÃ­nosy: Â ZnÃ­Å¾enie nÃ¡kladov na databÃ¡zovÃ© licencie; staÄÃ­ jedna databÃ¡za pre celÃ½ systÃ©m namiesto jednej databÃ¡zy pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a. Â ZnÃ­Å¾enie poÅ¾iadaviek na vÃ½konnosÅ¥ pracovnÃ½ch stanÃ­c pouÅ¾Ã­vateÄ¾ov â bude sa na nich vykonÃ¡vaÅ¥ len ICDE klient a nie celÃ¡ databÃ¡za. ZnÃ­Å¾enie poÅ¾iadaviek nÃ¡sledne znÃ­Å¾i nÃ¡klady potrebnÃ© na nasadenie systÃ©mu. Â ZnÃ­Å¾enie nÃ¡kladov na podporu, keÄÅ¾e je potrebnÃ© spravovaÅ¥ a sledovaÅ¥ len jeden zdieÄ¾anÃ½ ICDE server."
76,207,0.507,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"3.3.9 PrÃ­klad. V prÃ­klade 3.2.6 sme uvaÅ¾ovali o Å¾iarivkÃ¡ch, ktorÃ½ch Å¾ivotnosÅ¥ modelovala veliÄina s rozdelenÃ­m Exp( ), kde = 0.01. Predpokladajme, Å¾e v prÃ­stroji mÃ¡me jednu Å¾iarivku a naviac sme si pribalili jednu nÃ¡hradnÃº. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e poÄas 300 hodÃ­n prÃ¡ce s prÃ­strojom nebudeme maÅ¥ problÃ©m so Å¾iarivkou? RieÅ¡enie. Zrejme ak modelujÃº Å¾ivotnosti Å¾iariviek, tak ~ Exp(0.01) a sÃº nezÃ¡vislÃ©. Preto podÄ¾a bodu 3 vety 3.3.7 pre sÃºÄet + platÃ­: + ~ Erl(2, 0.01). Pre hustotu rozdelenia Erl(2, ) mÃ¡me (x) = x exp(- x), a preto P( +"
195,202,0.507,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄanie systematickÃ½ch zmien zdrojovÃ©ho kÃ³du Sydit ponÃºkne programÃ¡torovi miesta, kde sa mÃ´Å¾e vzor transformÃ¡cie uplatniÅ¥ a ten ich po zvÃ¡Å¾enÃ­ pouÅ¾ije. ProgramÃ¡tor tak nemusÃ­ identifikovaÅ¥ miesta pre transformÃ¡ciu sÃ¡m a transformÃ¡cia sa vykonÃ¡ automaticky pomocou vzoru, Äo mu znaÄne uÄ¾ahÄuje prÃ¡cu a potrebu poznaÅ¥ miesta, kde je vzor moÅ¾nÃ© uplatniÅ¥."
135,143,0.507,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.3.3 alÅ¡ie moÅ¾nosti a sluÅ¾by v rÃ¡mci architektÃºry CORBA Okrem uÅ¾ naznaenÃ½ch moÅ¾nostÃ­ poskytuje architektÃºra CORBA mnohÃ© alÅ¡ie, najmÃ¤: 1. Napriek tomu, Å¾e najastejÅ¡Ã­m prÃ­padom je volanie znÃ¡mych a vopred definovanÃ½ch rozhranÃ­ (o umoÅ¾uje pouÅ¾itie predkompilÃ¡tora generujÃºceho kÃ³d pre zÃ¡stupcov na strane klienta), CORBA poskytuje moÅ¾nos vola aj rozhrania definovanÃ© aÅ¾ v ase vykonÃ¡vania klienta. ProstrednÃ­ctvom Å¡pecializovanÃ©ho rozhrania (Dynamic Invocation Interface) mÃ´Å¾e klient postupne Å¡pecifikova nÃ¡zov operÃ¡cie, ktorÃ¡ mÃ¡ by zavolanÃ¡ (napr. âsetValueâ) a hodnoty jednotlivÃ½ch parametrov (napr. 100) a nÃ¡sledne operÃ¡ciu zavola. PrincÃ­p je podobnÃ½ dynamickÃ©mu volaniu metÃ³d objektov, napr. prostrednÃ­ctvom Java Reflection API a je vhodnÃ½ vtedy, ke konkrÃ©tne rozhranie, ktorÃ© sa mÃ¡ zavola, nie je v ase kompilÃ¡cie klienta znÃ¡me."
59,177,0.507,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.19. (A) PoÄiatoÄnÃ½ binÃ¡rny reÅ¥azec xini vyjadrenÃ½ binÃ¡rnym reÅ¥azcom dÄºÅ¾ky 39, v hornej Äasti diagramu je taktieÅ¾ uvedenÃ½ folding â fenotyp tohto reÅ¥azca. (B) CieÄ¾ovÃ½ fenotyp pre genotypy vyjadrenÃ© binÃ¡rnymi reÅ¥azcami dÄºÅ¾ky n = 39. V dolnej Äasti obrÃ¡zku je uvedenÃ¡ zÃ¡tvorkovÃ¡ reprezentÃ¡cia fenotypu. Fenotyp âvrtuÄ¾aâ obsahuje 3 Ã 6 = 18 vÃ¤zieb, ktorÃ© sÃº tvorenÃ© dvojicami komplementÃ¡rnych ÄÃ­sel 01 a 10, tento fenotyp mÃ´Å¾e byÅ¥ priradenÃ½ aspoÅ 218 = 262144 binÃ¡rnym reÅ¥azcom. Å Ã­pka na obrÃ¡zku znamenÃ¡ âevoluÄnÃº transformÃ¡ciuâ poÄiatoÄnÃ©ho fenotypu na cieÄ¾ovÃ½ fenotyp, ktorÃ¡ je uskutoÄnenÃ¡ pomocou chemostatovÃ©ho algoritmu (pozri Algoritmus 2)."
59,712,0.507,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Symbol C (U) znamenÃ¡ â crowded â preplnenÃ½ (uncrowded â nepreplnenÃ½). Tak naprÃ­klad: histÃ³ria (UUC) je v Äase t interpretovanÃ¡ tak, Å¾e pre predchÃ¡dzajÃºce tri ÄasovÃ© okamÅ¾iky (soboty) platÃ­: xt ï­3 ï£ 60 ï¨U ï© , xt ï­2 ï£ 60 ï¨U ï© , xt ï­1 ï¾ 60 ï¨ C ï© JednotlivÃ© zloÅ¾ky binÃ¡rneho vektora stratÃ©gie s sÃº opÃ­sanÃ© takto (pozri hore uvedenÃº tabuÄ¾ku): si = 0 ï na zÃ¡klade i-tej histÃ³rie agent nenavÅ¡tÃ­vi predstavenie si = 1 ï na zÃ¡klade i-tej histÃ³rie agent navÅ¡tÃ­vi predstavenie Na lepÅ¡ie pochopenie tohto spÃ´sobu kÃ³dovania stratÃ©gie rozoberme binÃ¡rny vektor s = (1,1,0,1,1,0,0,1), jednotlivÃ© zloÅ¾ky stratÃ©gie majÃº tento vÃ½znam: 1. s1 = 1, histÃ³ria (UUU) ï agent navÅ¡tÃ­vi bar, 2. s2 = 1, histÃ³ria (UUC) ï agent navÅ¡tÃ­vi bar, 3. s3 = 0, histÃ³ria (UCU) ï agent nenavÅ¡tÃ­vi bar, 4. s4 = 1, histÃ³ria (UCC) ï agent navÅ¡tÃ­vi bar, 5. s5 = 1, histÃ³riu (CUU) ï agent navÅ¡tÃ­vi bar, 6. s6 = 0, histÃ³ria (CUC) ï agent nenavÅ¡tÃ­vi bar, 7. s7 = 0, histÃ³ria (CCU) ï agent nenavÅ¡tÃ­vi bar, 8. s8 = 1, histÃ³ria (CCC) ï agent navÅ¡tÃ­vi bar. Nech Pt ï½ ï»s1 , s2 ,..., s100 ï½ je populÃ¡cia stratÃ©giÃ­ vÅ¡etkÃ½ch 100 agentov v epoche t. TÃ¡to mnoÅ¾ina nemÃ´Å¾e byÅ¥ homogÃ©nna (obsahujÃºca len jeden druh stratÃ©gie), ak by takÃ¡ bola, potom vÅ¡etci agenti by sa na zÃ¡klade predchÃ¡dzajÃºcej histÃ³rie rozhodli buÄ Ã­sÅ¥, alebo nejsÅ¥ v Å¡tvrtok podveÄer do baru El Farol na predstavenie. Z tÃ½chto dÃ´vodov kaÅ¾dÃ½ agent musÃ­ maÅ¥ svoju vlastnÃº stratÃ©giu s, podÄ¾a ktorej sa rozhoduje, Äi Ã­sÅ¥, alebo nejsÅ¥ do baru. Jedna epocha v simulÃ¡cii znamenÃ¡ Å¡tvrtkovÃ½ podveÄer, keÄ sa kaÅ¾dÃ½ agent populÃ¡cie musÃ­ rozhodnÃºÅ¥, Äi Ã­sÅ¥ alebo neÃ­sÅ¥ na predstavenie do baru El Farol. Aby v populÃ¡cii samovoÄ¾ne vznikol stav, kde pribliÅ¾ne 60 agentov navÅ¡tÃ­vi kaÅ¾dÃº sobotu bar, musÃ­me pripustiÅ¥ proces"
240,353,0.507,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,Prvky poÄ¾a sÃº v pamÃ¤ti uloÅ¾enÃ© po riadkoch za sebou. Nie je vÅ¡ak Ãºplne nevyhnutnÃ© poznaÅ¥ skutoÄnÃ© rozloÅ¾enie jednotlivÃ½ch prvkov poÄ¾a v pamÃ¤ti: pre zÃ¡kladnÃº prÃ¡cu s dvojrozmernÃ½mi poÄ¾ami staÄÃ­ jednoduchÃ¡ predstava rozloÅ¾enia prvkov v tabuÄ¾ke: p[0][0]
184,112,0.507,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,Rady mÃ´Å¾u byÅ¥ usporiadanÃ© na komunikaÄnÃ½ch koncoch alebo replikovanÃ© na klastroch serverov na zasielanie sprÃ¡v usporiadanÃ½ch do jednÃ©ho alebo viacerÃ½ch zariadenÃ­. Toto robÃ­ architektÃºru zasielania sprÃ¡v vysoko Å¡kÃ¡lovateÄ¾nou.
393,205,0.507,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Pri vytvorenÃ­ vÃ½konnej predprÃ­pravy na redukciu oneskorenia treba splniÅ¥ tri podmienky. Prvou je, Å¾e dokument sa mÃ´Å¾e predpripraviÅ¥ pred tÃ½m, neÅ¾ ho nieÄo poÅ¾aduje. Predikcia sa Å¡tandardne zakladÃ¡ na histÃ³rii webovÃ©ho prehliadaÄa. Druhou podmienkou je, Å¾e predpripravenÃ½ dokument je v Äase poÅ¾iadavky âÄerstvÃ½â. Poslednou podmienkou je, Å¾e na predprÃ­pravu existuje urÄitÃ½ ÄasovÃ½ interval pred odoslanÃ­m poÅ¾iadavky."
369,321,0.507,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V skutoÄnosti je to trochu zloÅ¾itejÅ¡ie. MaklÃ©rovi sa zvyÄajne ÄasÅ¥ z jeho provÃ­ziÃ­ odvÃ¡dza na jeho tzv. storno rezervu. Ak storno rezerva dosiahne stanovenÃº vÃ½Å¡ku, doprednÃ© provÃ­zie mÃ´Å¾u byÅ¥ vyplÃ¡canÃ© v plnej vÃ½Å¡ke."
240,25,0.507,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÅ¡imnime si, Å¾e napriek tomu, Å¾e prvÃ½ program vykonÃ¡ viac ako 50-krÃ¡t toÄ¾ko operÃ¡ciÃ­, Äas vÃ½poÄtu je len 15-krÃ¡t pomalÅ¡Ã­. DÃ´vod je ten, Å¾e v prÃ­pade druhÃ©ho programu pouÅ¾Ã­vame pomocnÃ© pole veÄ¾kosti 10 000 001 prvkov (pribliÅ¾ne 10MB) a prÃ­stup k nemu cez pamÃ¤Å¥ovÃ½ radiÄ je vÃ½razne pomalÅ¡Ã­ ako beÅ¾nÃ¡ aritmetickÃ¡ operÃ¡cia, ktorÃº vykonÃ¡va procesor vo svojich registroch. Na tejto ukÃ¡Å¾ke teda mÃ´Å¾eme pomerne efektne pozorovaÅ¥ ako vyuÅ¾itie pomocnej pamÃ¤te urÃ½chÄ¾uje vÃ½poÄty. Ãlohou programÃ¡tora pri nÃ¡vrhu rieÅ¡enÃ­ (programov) pre zadanÃ© Ãºlohy je vhodne navrhnÃºÅ¥ pouÅ¾itie dostupnÃ½ch zdrojov v poÄÃ­taÄi, tak aby vykonÃ¡vanie bolo Äo najefektÃ­vnejÅ¡ie. BeÅ¾nÃ© poÄÃ­taÄe majÃº v sÃºÄasnosti (pÃ­Å¡e sa rok 2018) v priemere 8GB alebo viac operaÄnej pamÃ¤te a pouÅ¾itie 10 MB v tomto prÃ­pade je len veÄ¾mi malÃ¡ ÄasÅ¥. V prÃ­pade, Å¾e program mÃ´Å¾e (vzhÄ¾adom na inÃ© beÅ¾iace programy na poÄÃ­taÄi) pouÅ¾iÅ¥ aj vÃ¤ÄÅ¡iu ÄasÅ¥ pamÃ¤te: napr. 100MB alebo aj 1000MB, nevÃ¡hajte ju pouÅ¾iÅ¥. Na poÄÃ­taÄi s procesorom i7-4702MQ (2,2 GHz) z roku 2013 s 8GB pamÃ¤te (DDR3 1600) trvÃ¡ druhÃ©mu programu vÃ½poÄet pre n=1 000 000 000 Äas 42,41 sekundy."
184,252,0.506,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Ako uÅ¾ bolo spomenutÃ©, pouÅ¾itie Java API v systÃ©me ICDE sa neukÃ¡zalo byÅ¥ Å¡Å¥astnou voÄ¾bou. Z nepochopiteÄ¾nÃ½ch prÃ­Äin sa tento prÃ­stup nepozdÃ¡val dodÃ¡vateÄ¾om, ktorÃ­ by radi vyvÃ­jali aplikÃ¡cie pre ICDE, ale nevenovali sa vÃ½voju v Jave, prÃ­padne uÅ¾ mali predtÃ½m hotovÃ© analytickÃ© nÃ¡stroje implementovanÃ© v inom jazyku."
59,412,0.506,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"2. SÃ©mantickÃ½ prÃ­stup, kde mentÃ¡lny model je zaloÅ¾enÃ½ na sÃ©mantickÃ½ch tablÃ¡ch. Tento prÃ­stup poÅ¾aduje od pouÅ¾Ã­vateÄ¾a len schopnosÅ¥ korektne pravdivostne (sÃ©manticky) interpretovaÅ¥ elementÃ¡rne logickÃ© spojky, k Äomu dochÃ¡dza podÄ¾a Inhelderovej a Piageta u detÃ­ vo veku okolo 10 rokov. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e tento sÃ©mantickÃ½ prÃ­stup ku konÅ¡trukcii mentÃ¡lneho modelu logiky je aplikovanÃ½ uÅ¾Ã­vateÄ¾mi, ktorÃ­ neabsolvovali trÃ©ning vo vÃ½rokovej logike, ktorÃ½ch jedinou kognitÃ­vnou schopnosÅ¥ou je korektne pravdivostnÃ© (sÃ©manticky) interpretovaÅ¥ elementÃ¡rne logickÃ© spojky. Samozrejme, v tomto prÃ­stupe neustÃ¡le pretrvÃ¡vajÃº problÃ©my s korektnou interpretÃ¡ciou implikÃ¡cie, ktorÃ© mÃ´Å¾u byÅ¥ zdrojom chÃ½b (experimentÃ¡lne pozorovanÃ½ch) v usudzovanÃ­."
195,45,0.506,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Krok 3: Rozdelenie datasetu Najprv treba rozdeliÅ¥ dataset data na trÃ©novaciu a testovaciu mnoÅ¾inu pomocou metÃ³dy stratifikovanÃ©ho vzorkovania (stratified sampling). PrvÃ© dva riadky R kÃ³du slÃºÅ¾ia na oddelenie premennej, ktorÃ¡ obsahuje informÃ¡ciu o poÄte identifikovanÃ½ch chÃ½b od zvyÅ¡nÃ½ch premennÃ½ch obsahujÃºcich zÃ¡vislostnÃ© metriky, podÄ¾a ktorÃ½ch sa budÃº trÃ©novaÅ¥ vybranÃ© predikÄnÃ© modely. V treÅ¥om riadku sa upravÃ­ informÃ¡cia o poÄte chÃ½b. BudÃº sa rozliÅ¡ovaÅ¥ iba dve hodnoty: âOneâ ak trieda obsahuje aspoÅ jednu chybu a âZeroâ ak trieda neobsahuje ani jednu chybu. Nakoniec sa pouÅ¾ije funkcia createDataPartition, ktorÃ¡ rozdelÃ­ dataset na trÃ©novaciu a testovaciu mnoÅ¾inu. Testovacia mnoÅ¾ina obsahuje dve tretiny zÃ¡znamov. ZostÃ¡vajÃºca tretina zÃ¡znamov je zaradenÃ¡ do trÃ©novacej mnoÅ¾iny. > dataX <- data[,which(!colnames(data) %in% c(""numBugs""))] > dataY <- data[, which(colnames(data) %in% c(""numBugs""))]"
236,18,0.506,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"TypografickÃ½ dizajn je remeslo. NeskÃºsenÃ­ autori sa Äasto dopÃºÅ¡Å¥ajÃº vÃ¡Å¾nych chÃ½b, mysliac si, Å¾e vÃ½zor knihy je hlavne vec estetiky-âAk dokument vyzerÃ¡ dobre po umeleckej strÃ¡nke, potom je navrhnuÃ½.Ã¿ KeÄÅ¾e vÅ¡ak mÃ¡ dokument slÃºÅ¾iÅ¥ na ÄÃ­tanie a nie visieÅ¥ niekde v galÃ©rii, ÄitateÄ¾nosÅ¥ a zrozumiteÄ¾nosÅ¥ sÃº najdÃ´leÅ¾itejÅ¡ie a aÅ¾ potom nasleduje peknÃ½ vÃ½zor. PrÃ­klady: â¢ veÄ¾kosÅ¥ textu a ÄÃ­slovanie kapitol sa mÃ¡ vyberaÅ¥ tak, aby Å¡truktÃºra kapitol a odsekov bola jasnÃ¡ pre ÄitateÄ¾a, â¢ riadky majÃº byÅ¥ dostatoÄne krÃ¡tke, aby nenamÃ¡hali zrak ÄitateÄ¾a a zÃ¡roveÅ dosÅ¥ dlhÃ©, aby pekne zaplnili stranu. PouÅ¾itÃ­m systÃ©mov WYSIWYG autori Äasto dosahujÃº esteticky zrak poteÅ¡ujÃºce dokumenty s nedostatoÄnou alebo nedÃ´slednou Å¡truktÃºrou. LATEX predchÃ¡dza takÃ½mto chybÃ¡m pri formÃ¡tovanÃ­, nÃºtiac autora vysvetliÅ¥ logickÃº Å¡truktÃºru svojho dokumentu. LATEX nÃ¡sledne zvolÃ­ vÃ½stup, najviac zodpovedajÃºci poÅ¾iadavkÃ¡m autora."
59,26,0.506,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 1.2. ZnÃ¡zornenie symbolickÃ©ho procesoru, ktorÃ½ uskutoÄÅuje pravidlo usudzovania vÃ½rokovej logiky âmodus ponensâ, ktorÃ© je vyjadrenÃ© pomocou schÃ©my usudzovania p ï q 1. predpoklad 2. predpoklad dÃ´sledok kde p a q sÃº symboly â vÃ½rokovÃ© premennÃ©."
43,525,0.506,Objektovo orientovanÃ© programovanie v C++,"PoznÃ¡mka â ako zachytiÅ¥ vÅ¡etko naraz? V uvedenÃ½ch prÃ­kladoch sa v programe vyskytovali vÃ½nimky rÃ´znych typov a kaÅ¾dÃ©mu typu zodpovedal jeden blok catch. V skutoÄnosti vieme v C++ vytvoriÅ¥ aj blok catch, ktorÃ½ dokÃ¡Å¾e zachytiÅ¥ vÃ½nimku akÃ©hokoÄ¾vek typu. Je pravda, Å¾e v programoch rÃ´zne typy vÃ½nimiek vyvolÃ¡vajÃº rÃ´zne reakcie, a preto obyÄajne chceme maÅ¥ prÃ­sluÅ¡nÃ© bloky catch oddelenÃ©. Ak sa vÅ¡ak rozhodneme, Å¾e na akÃºkoÄ¾vek vÃ½nimku zareaguje program rovnako, naprÃ­klad tÃ½m, Å¾e sa korektne ukonÄÃ­ alebo vypÃ­Å¡e univerzÃ¡lnu chybovÃº sprÃ¡vu, mÃ´Å¾eme pouÅ¾iÅ¥ blok catch s hlaviÄkou catch(...)"
369,201,0.506,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"BalÃ­ky poplatkov Podobne ako pri maloobchodnej firme na obr. 3.43, aj vo finanÄnej inÅ¡titÃºcii sa mÃ´Å¾u poplatky viazaÅ¥ na zloÅ¾enÃ© produkty. Poplatok za zloÅ¾enÃ½ produkt je menÅ¡Ã­, ako by bol sÃºÄet poplatkov za jeho jednotlivÃ© Äasti, keÄ by ich klient kupoval samostatne. PrÃ­kladom mÃ´Å¾e byÅ¥ balÃ­k produktov, ktorÃ½ zahÅÅa beÅ¾nÃ½ ÃºÄet a debetnÃº platobnÃº kartu. PodrobnejÅ¡ie sa balÃ­kom bankovÃ½ch produktov budeme venovaÅ¥ v 4. kapitole. BalÃ­k produktov vo finanÄnej inÅ¡titÃºcii sa nemusÃ­ obmedzovaÅ¥ iba na agregÃ¡ciu produktov, ale mÃ´Å¾e zahÅÅaÅ¥ aj mnoÅ¾inu operÃ¡ciÃ­.22 PrÃ­kladom je balÃ­k, ktorÃ½ zahÅÅa beÅ¾nÃ½ ÃºÄet, debetnÃº platobnÃº kartu, urÄitÃ½ poÄet vÃ½berov z bankomatu a urÄitÃ½ poÄet ÃºÄtovnÃ½ch poloÅ¾iek (t. j. zÃ¡kladnÃ½ch poplatkov za operÃ¡cie). ZÃ¡kladnÃ½ model pre poplatky za zloÅ¾enÃ© produkty ukazuje obr. 3.50. (PodrobnejÅ¡ie opÃ¤Å¥ v 4. kapitole.)"
205,150,0.506,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","PreliezaÄ webu v jazyku python User-Agent. Tento beÅ¾ne slÃºÅ¾i na identifikÃ¡ciu prehliadaÄa. V prÃ­pade vytvÃ¡rania webovÃ©ho preliezaÄa sa odporÃºÄa pouÅ¾iÅ¥ tento parameter pre informÃ¡cie o vaÅ¡om preliezaÄi. SprÃ¡vcovia www strÃ¡nok, ktorÃ© navÅ¡tevujete, nebudÃº vÄaka nemu zmÃ¤tenÃ­ pri ÄÃ­tanÃ­ zÃ¡znamu Äinnosti. OdporÃºÄa sa v tomto parametri uviesÅ¥ aj kontakt na vÃ½vojovÃ½ tÃ­m preliezaÄa. Tento kontakt potom administrÃ¡tori mÃ´Å¾u vyuÅ¾iÅ¥ v prÃ­pade, keÄ chcÃº kontaktovaÅ¥ vÃ½vojÃ¡rov preliezaÄa. NÃ¡Å¡ kÃ³d nÃ¡sledne len otvorÃ­ webovÃº strÃ¡nku a zÃ­ska jej obsah. Tento nÃ¡sledne vracia ako vÃ½stup z danej funkcie. Å etrenie zdrojov NÃ¡Å¡ sÅ¥ahovaÄ by bolo nÃ¡sledne eÅ¡te moÅ¾nÃ© obmedziÅ¥ na sÅ¥ahovanie iba strÃ¡nok typu HTML prÃ­kazom: content_type = response.info().get('Content-Type') If(content_type != 'text/html') raise UnsupportedFileTypeError()"
135,349,0.506,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,b. BalÃ­kovÃ¡ (Packaged) zmena â dochÃ¡dza k pridaniu alebo odobratiu nezÃ¡vislej triedy a k nej prislÃºchajÃºcich vÃ¤zieb a sÃºasne k pridaniu (odobratiu) atribÃºtov alebo operÃ¡cii danej triedy. NaprÃ­klad pridanie ConcreteObserver do vzoru Observer (obrÃ¡zky . 5-3 a 5-4).
59,316,0.505,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Z tejto tabuÄ¾ky jasne vyplÃ½va, Å¾e prekryvy sÃº dostatoÄne veÄ¾kÃ© len pre diagonÃ¡lne hodnoty, zatiaÄ¾ Äo nediagonÃ¡lne prekryvy sÃº rÃ¡dovo menÅ¡ie. MÃ´Å¾eme teda jednoznaÄne rozhodnÃºÅ¥ pomocou prekryvu, Äi ciïª ï ti ï» xi je asociÃ¡ciou s ânarÃ¡Å¾kouâ ci. DruhÃ½ prÃ­klad V tomto ilustraÄnom prÃ­klade budeme vyuÅ¾Ã­vaÅ¥ trÃ©ningovÃº mnoÅ¾inu Atrain ï½ ï»ci xi ï½ , generovanÃº pre m = 10 asociatÃ­vnych pÃ¡rov â vektorov dimenzie n=1000. TÃ¡to pamÃ¤Å¥ je reprezentovanÃ¡ pamÃ¤Å¥ovÃ½m vektorom t ï½ c1 ï x1 ï« ... ï« cm ï xm . NasledujÃºca tabuÄ¾ka obsahuje 20 pokusov âÄisteniaâ, pri ktorÃ½ch sme s 50 % pravdepodobnosÅ¥ou pouÅ¾ili ako asociatÃ­vny vstup vektor ci z trÃ©ningovej mnoÅ¾iny alebo nÃ¡hodne vygenerovanÃ½ konceptuÃ¡lny vektor. TabuÄ¾ka obsahuje maximÃ¡lne hodnoty prekryvov (6.29), pomocou ktorÃ½ch mÃ´Å¾eme jednoznaÄne identifikovaÅ¥, Äi pouÅ¾itÃ½ vstup mÃ¡ asociÃ¡ciu v rÃ¡mci trÃ©ningovej mnoÅ¾iny."
94,52,0.505,Sprievodca svetom vedeckÃ©ho publikovania,"VÃ½skum (podÄ¾a dÃ¡t z 23 krajÃ­n) odhaduje, Å¾e eurÃ³pske Å¡tÃ¡ty platili roÄne za vedeckÃ© Äasopisy spolu viac neÅ¾ 383 miliÃ³nov Eur. 65 % tejto sumy inkasoval Elsevier, 22 % Wiley, 7 % Springer, 5 % Taylor & Francis a 1 % ostatnÃ© vydavateÄ¾stvÃ¡. Zmluvy âBig Dealâ zvyÄajne trvali tri roky a roÄnÃ½ nÃ¡rast cien dosahoval najÄastejÅ¡ie 3-4 %."
43,500,0.505,Objektovo orientovanÃ© programovanie v C++,"CviÄenia 1. Vytvorte vektor celÃ½ch ÄÃ­sel. Nech uÅ¾Ã­vateÄ¾ zadÃ¡ dÄºÅ¾ku vektora a jeho prvÃ© dva prvky. Potom doplÅte ostatnÃ© prvky tak, Å¾e kaÅ¾dÃ½ prvok bude sÃºÄtom dvoch predchÃ¡dzajÃºcich. 2. Vytvorte si sÃºbor, v ktorom budÃº zapÃ­sanÃ© celÃ© ÄÃ­sla. Vytvorte si vektor celÃ½ch ÄÃ­sel a naÄÃ­tajte doÅho vÅ¡etky ÄÃ­sla zo sÃºboru. Potom spoÄÃ­tajte, koÄ¾ko je v zozname pÃ¡rnych a koÄ¾ko nepÃ¡rnych ÄÃ­sel. V prvej verzii naprogramujte poÄÃ­tanie pÃ¡rnych a nepÃ¡rnych ÄÃ­sel sami. V druhej verzii pouÅ¾ite funkciu count if z kniÅ¾nice algorithm. 3. V sÃºbore sÃº zapÃ­sanÃ© slovÃ¡, kaÅ¾dÃ© v jednom riadku. Vytvorte vektor s prvkami typu string a naÄÃ­tajte doÅho vÅ¡etky slovÃ¡. Potom nech uÅ¾Ã­vateÄ¾ zadÃ¡ nejakÃ© pÃ­smeno. VymaÅ¾te zo zoznamu vÅ¡etky slovÃ¡, ktorÃ© sa zaÄÃ­najÃº danÃ½m pÃ­smenom. 4. Nech uÅ¾Ã­vateÄ¾ postupne zadÃ¡va vrcholy mnohouholnÃ­ka (predpokladajme, Å¾e ich zadÃ¡va sprÃ¡vne, teda Å¾e sa jednotlivÃ© strany nepretÃ­najÃº). Nech sa naÄÃ­tanie konÄÃ­ vtedy, ak znova zadÃ¡ prvÃ½ bod, ÄÃ­m sa mnohouholnÃ­k uzavrie. Vytvorte triedu bod, ktorÃ¡ bude maÅ¥ dva Ãºdaje - sÃºradnice x a y. Nech sa vrcholy mnohouholnÃ­ka ukladajÃº vo vektore, ktorÃ©ho prvkami budÃº objekty triedy bod. Po naÄÃ­tanÃ­ vrcholov vypoÄÃ­tajte obvod mnohouholnÃ­ka. 5. Zoberte si nejakÃ½ program v C alebo C++. Vytvorte si vektor s prvkami typu string a naÄÃ­tajte doÅho postupne vÅ¡etky riadky programu (kaÅ¾dÃ½ prvok bude obsahovaÅ¥ jeden riadok). Potom vytvorte novÃ½ sÃºbor tak, Å¾e odstrÃ¡nite vÅ¡etky komentÃ¡re, teda budÃº v Åom len samotnÃ© prÃ­kazy. JednoduchÅ¡ia verzia mÃ´Å¾e vymazÃ¡vaÅ¥ len jednoriadkovÃ© komentÃ¡re, teda riadky, ktorÃ© zaÄÃ­najÃº znakmi â//â. PokroÄilejÅ¡ia verzia mÃ´Å¾e odstraÅovaÅ¥ aj viacriadkovÃ© komentÃ¡re ohraniÄenÃ© znakmi â/*â a â*/â. MÃ´Å¾ete predpokladaÅ¥, Å¾e komentÃ¡re nikdy nezaberajÃº len ÄasÅ¥ riadku. 6. Vytvorte mnoÅ¾inu znakov obsahujÃºcu len malÃ© pÃ­smenÃ¡ abecedy. PÃ­smenÃ¡ v nej budÃº usporiadanÃ© abecedne, ale s malou obmenou â samohlÃ¡sky budÃº vÅ¾dy pred spoluhlÃ¡skami. Nech program postupne ÄÃ­ta od uÅ¾Ã­vateÄ¾a znaky a zaraÄuje ich do mnoÅ¾iny. Ak uÅ¾Ã­vateÄ¾ zadÃ¡ nieÄo inÃ© ako malÃ© pÃ­smeno abecedy, bude tento vstup ignorovanÃ½ okrem prÃ­padu, keÄ zadÃ¡ pÃ­smeno âKâ. Vtedy program ukonÄÃ­ naÄÃ­tavanie a vypÃ­Å¡e obsah mnoÅ¾iny. 7. Vytvorte multimapu, v ktorej budÃº uloÅ¾enÃ© Ãºdaje o knihÃ¡ch â jeden prvok dvojice bude nÃ¡zov knihy a druhÃ½ rok vydania. Navrhnite multimapu najprv"
43,402,0.505,Objektovo orientovanÃ© programovanie v C++,"ZdÃ¡ sa, Å¾e pouÅ¾itÃ­m virtuÃ¡lnej metÃ³dy Predstav sa sme v naÅ¡om prÃ­klade uÅ¾ dosiahli Å¾elanÃ½ vÃ½sledok. V tomto prÃ­klade je vÅ¡ak eÅ¡te jeden skrytÃ½ problÃ©m, ktorÃ½ na prvÃ½ pohÄ¾ad nevidieÅ¥. TÃ½ka sa deÅ¡truktora. Ak uÅ¾ pole oddelenie nechceme viac pouÅ¾Ã­vaÅ¥, musÃ­me v pamÃ¤ti uvoÄ¾niÅ¥ miesto, ktorÃ© zaberali objekty, na ktorÃ© ukazujÃº smernÃ­ky z tohto poÄ¾a."
66,20,0.505,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"dÃ¡tovÃ© typy sÃº rÃ´zne textovÃ© alebo ÄÃ­selnÃ©. Oproti Å¡tandardnÃ½m programovacÃ­m jazykom mÃ´Å¾e kaÅ¾dÃ½ dÃ¡tovÃ½ typ obsahovaÅ¥ Å¡peciÃ¡lnu hodnotu NULL. 3.2.1 Hodnota NULL V rÃ¡mci SQL existuje Å¡peciÃ¡lna hodnota NULL, ktorÃ¡ predstavuje neznÃ¡mu hodnotu pre atribÃºty. Je moÅ¾nÃ© si to predstaviÅ¥, Å¾e v rÃ¡mci databÃ¡zy je evidencia osÃ´b s kontaktnÃ½mi Ãºdajmi, medzi ktorÃ© patrÃ­ telefÃ³nne ÄÃ­slo. Pri niektorÃ½ch osobÃ¡ch vÅ¡ak toto ÄÃ­slo nie je znÃ¡me, a preto nie je vyplnenÃ©. V takomto prÃ­pade obsahuje atribÃºt pre telefÃ³ne ÄÃ­slo hodnotu NULL. TÃ¡to hodnota sa vÅ¡ak z hÄ¾adiska podmienok sprÃ¡va podÄ¾a uvedenÃ½ch tabuliek X. TabuÄ¾ka 2 SprÃ¡vanie hodnoty NULL pre operÃ¡cie negÃ¡cie, logickÃ©ho sÃºÄinu a sÃºÄtu"
135,510,0.505,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"TakÃ©to odkazovÃ© farmy v kontexte vyhlâadÃ¡vacÌov sÃº vÅ¡ak pomerne jednoducho odhalitelânÃ©, pretoÅ¾e sÃº vÃ¤cÌÅ¡inou aÅ¾ prÃ­liÅ¡ pravidelnÃ½ch tvarov a na takto generovanÃ© strÃ¡nky vÃ¤cÌÅ¡inou neodkazujÃº inÃ© strÃ¡nky [2, 7, 8, 20, 21]."
59,463,0.505,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 9.1. GrafickÃ© znÃ¡zornenie konÅ¡trukcie expanzie, kontrakcie a revÃ­zie. HlavnÃ½ teoretickÃ½ problÃ©m navrhnutej schÃ©my je blok konÅ¡trukcie minimÃ¡lnej mnoÅ¾iny ïï¬ï ktorÃ¡ odstraÅuje nekonzistentnosÅ¥ poÄiatoÄnej teÃ³rie."
369,199,0.505,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.48. Vzor Poplatky za operÃ¡ciu Na metaÃºrovni mÃ´Å¾e typ poplatku zÃ¡visieÅ¥ od viacerÃ½ch vecÃ­: ï· Typ operÃ¡cie â naprÃ­klad poplatok za vÃ½ber hotovosti z ÃºÄtu na poboÄke je inÃ½ ako poplatok za prevod z ÃºÄtu zadanÃ½ na poboÄke. ï· Miesto operÃ¡cie â naprÃ­klad poplatok za prevod z ÃºÄtu zadanÃ½ na poboÄke je inÃ½ (vyÅ¡Å¡Ã­) ako poplatok za prevod z ÃºÄtu zadanÃ½ prostrednÃ­ctvom internet bankingu. ï· Typ zÃ¡vÃ¤zku â naprÃ­klad vÃ½ber hotovosti z ÃºÄtu na poboÄke zÃ¡visÃ­ od toho, Äi ide o beÅ¾nÃ½ ÃºÄet alebo termÃ­novanÃ½ ÃºÄet. VÃ½bery z termÃ­novanÃ©ho ÃºÄtu v deÅ splatnosti sa nespoplatÅujÃº."
196,0,0.505,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,2.1.6 CÌo znamenajÃº jednotlivÃ© riadky vo vygenerovanom zdrojovom sÃºbore main.tex pre tzv. prÃ¡zdny projekt (Blank Projekt)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 2.1.7 KtorÃ© praktiky aj v sÃºvislosti so spolocÌnÃ½m pÃ­sanÃ­m v Overleaf by som mal vyuÅ¾Ã­vatâ? 11 2.1.8 Ako nastavitâ zdielâanie dokumentu? . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 2.1.9 Ako sa orientovatâ v dokumente a zdrojovom sÃºbore?
76,305,0.505,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"6.5.2 DruhÃº verziu empirickej (t. j. vÃ½berovej) distribuÄnej funkcie budeme oznaÄovaÅ¥ . Jej vÃ½hodou je, Å¾e nÃ¡m pohodlne poskytuje vÃ½berovÃ© kvantily, resp. vÃ½berovÃ© kvartily, resp. akÃ½koÄ¾vek vÃ½berovÃ½ -kvantil. Funkcia je spojitÃ¡ a po Äastiach lineÃ¡rna. Budeme ju definovaÅ¥ tak, Å¾e popÃ­Å¡eme konÅ¡trukciu jej grafu. Najprv spojme ÃºseÄkami dvojice bodov ["
59,497,0.505,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"10 KolektÃ­vna pamÃ¤Å¥ 10.1 ÃvodnÃ© poznÃ¡mky KolektÃ­vna pamÃ¤Å¥, tak ako je chÃ¡panÃ¡ v sÃºÄasnosti v sociÃ¡lnych vedÃ¡ch (menovite v sociolÃ³gii) [5,14,15,33], je unikÃ¡tny typ pamÃ¤ti, ktorÃ½ sa lÃ­Å¡i od obvyklÃ½ch neurovednÃ½ch typov pamÃ¤tÃ­ [8,16]. KolektÃ­vna pamÃ¤Å¥ je distribuovanÃ½ systÃ©m jednotlivÃ½ch mozgov-myslÃ­-pamÃ¤tÃ­ patriacich do vybranej sociÃ¡lnej skupiny a ktorÃ¡ je (kolektÃ­vna pamÃ¤Å¥) sÃºÄasÅ¥ou jej kultÃºry [33]. Aj napriek tomu, Å¾e podstatnÃ© Äasti kolektÃ­vnej pamÃ¤ti sÃº âumiestnenÃ©â v jednotlivÃ½ch mozgoch, jej vznik a pretrvÃ¡vanie sa povaÅ¾uje za neÅ¡tandardnÃº kolektÃ­vnu vlastnosÅ¥ sociÃ¡lnej skupiny. KolektÃ­vna pamÃ¤Å¥ patrÃ­ medzi zÃ¡kladnÃ© Å¡pecifikÃ¡ sociÃ¡lnej skupiny, ktorÃ© sÃº prenÃ¡Å¡anÃ© negenetickÃ½mi (kultÃºrnymi) metÃ³dami v priebehu Å¾ivota jednotlivÃ½ch indivÃ­duÃ­ skupiny. KolektÃ­vna pamÃ¤Å¥ mÃ¡ tri sÃºÄasti: (1) poznatky, (2) atribÃºty a (3) procesy. PrvÃ¡ sÃºÄasÅ¥ â poznatky â aj napriek tomu, Å¾e sa mÃ´Å¾e v priebehu Äasu meniÅ¥, patrÃ­ do zÃ¡kladnÃ½ch konÅ¡tituÄnÃ½ch elementov kultÃºry sociÃ¡lnej skupiny. DruhÃ¡ sÃºÄasÅ¥, atribÃºty, tvorÃ­ Å¡pecifickÃ½ holistickÃ½ pohÄ¾ad na histÃ³riu sociÃ¡lnej skupiny a preto je Äasto pouÅ¾Ã­vanÃ¡ ako jedna zo zÃ¡kladnÃ½ch Å¡pecifikÃ¡ciÃ­ vybranej skupiny. KoneÄne, tretia sÃºÄasÅ¥, procesy, sÃº tvorenÃ© neustÃ¡le prebiehajÃºcim dialÃ³gom medzi jednotlivcami skupiny alebo jej podskupinami, ktorÃ½ mÃ´Å¾e meniÅ¥ v urÄitom rozsahu prvÃ© dve sÃºÄasti kolektÃ­vnej pamÃ¤ti. Za neÅ¡tandardnÃº sÃºÄasÅ¥ kolektÃ­vnej pamÃ¤ti mÃ´Å¾eme pokladaÅ¥ aj E. Durkheimovo âkolektÃ­vne vedomieâ [9] obsahujÃºce âsociÃ¡lne skutoÄnostiâ, ktorÃ© chÃ¡pal ako emergovanÃ½ kolektÃ­vny poznatok o postojoch, hodnotÃ¡ch a sprÃ¡vanÃ­ prÃ­sluÅ¡nÃ­kov danÃ©ho sociÃ¡lneho systÃ©mu. NeskorÅ¡ie C. Jung [19] rozpracoval tÃºto ideu tak, Å¾e je umiestnenÃ¡ v âhlbokÃ½ch vrstvÃ¡châ naÅ¡ej psychiky a obsahuje univerzÃ¡lnu prvotnÃº pamÃ¤Å¥ alebo âarchetypyâ. Jung Å¡tudoval tento pamÃ¤Å¥ovÃ½ systÃ©m pomocou mÃ½tov. Z pohÄ¾adu evoluÄnej psycholÃ³gie, Jungovo âkolektÃ­vne nevedomieâ mÃ´Å¾e byÅ¥ chÃ¡panÃ© tak, Å¾e vzniklo v priebehu evolÃºcie Ä¾udskÃ©ho druhu a obsahuje âuniverzÃ¡lieâ Ä¾udskÃ½ch mentÃ¡lnych schopnostÃ­, ktorÃ© ovplyvÅujÃº sociÃ¡lne sprÃ¡vanie sa Ä¾udÃ­. Na zÃ¡ver tohto prehÄ¾adu o koncepcii âkolektÃ­vnej pamÃ¤tiâ obrÃ¡time naÅ¡u pozornosÅ¥ na aspekty zÃ­skavania, revÃ­zie, pretrvÃ¡vania a zÃ¡niku kolektÃ­vnej pamÃ¤ti. V klasickej (halbwachovskej) teÃ³rii kolektÃ­vnej pamÃ¤ti sÃº tieto jej aspekty prezentovanÃ© len v nÃ¡znakoch bez vzÅ¥ahu k umelej inteligencii. ModernÃ© prÃ­stupy k revÃ­zii databÃ¡z poznatkov, k ich tvorbe a spÃ¡janiu sÃº rozpracovanÃ© do veÄ¾kej hÄºbky [1,11-13] a stali sa integrÃ¡lnou sÃºÄasÅ¥ou sÃºÄasnej logiky a teÃ³rie vedy (boli prezentovanÃ© v prechÃ¡dzajÃºcej 9. kapitole). Je potrebnÃ© na tomto mieste zdÃ´razniÅ¥, Å¾e sÃºÄasnÃ¡ umelÃ¡ inteligencia, hlavne zÃ¡sluhou jej Äasti tvorenou teÃ³riou multiagentovÃ½ch systÃ©mov, sa stala schopnou vykonÃ¡vaÅ¥ teoretickÃ© Å¡tÃºdie a poÄÃ­taÄovÃ© simulÃ¡cie rÃ´znych javov a procesov prebiehajÃºcich v sociÃ¡lnych systÃ©moch a ktorÃ© sÃºvisia s koncepciou kolektÃ­vnej pamÃ¤ti. Z tohto pohÄ¾adu teda nejde o nÃ¡hodu, Å¾e koncepcia kolektÃ­vnej pamÃ¤ti tak v sociÃ¡lnych vedÃ¡ch ako aj v umelej inteligencii mÃ¡ spoloÄnÃ½ teoretickÃ½ zÃ¡klad. SÃºÄasne moÅ¾nosti prieniku prÃ­stupov umelej inteligencie do sociÃ¡lnych vied sÃº nepomerne vÃ¤ÄÅ¡ie neÅ¾ tie, akÃ© boli pred 20 â 30 rokmi, keÄ prebiehal znÃ¡my âexperimentâ s pouÅ¾itÃ­m synergetickej fyzikÃ¡lnej terminolÃ³gie [21] v sociÃ¡lnych vedÃ¡ch [18,35]. ModernÃ½ informatickÃ½ odbor umelÃ¡ inteligencia vypracoval teoretickÃ½ aparÃ¡t, ktorÃ½ je vhodnÃ½ (a nato bol vlastne zostrojenÃ½) na Å¡tÃºdium vzniku (hovorÃ­me emergencie)"
43,32,0.504,Objektovo orientovanÃ© programovanie v C++,"dÄºÅ¾ka kÃ³du, zvÃ¤ÄÅ¡uje sa jeho prehÄ¾adnosÅ¥ a zÃ¡roveÅ aj ÄitateÄ¾nosÅ¥. Ak majÃº viacerÃ© triedy spoloÄnÃ© prvky, potom na pochopenie ich Å¡truktÃºry staÄÃ­ pochopiÅ¥ Å¡truktÃºru ich rodiÄovskej triedy a Äalej sa zaoberaÅ¥ len ich Å¡peciï¬ckÃ½mi vlastnosÅ¥ami a metÃ³dami. Aby sme si ukÃ¡zali, ako tento postup funguje v praxi, predstavme si, Å¾e v naÅ¡om prÃ­klade potrebujeme Å¡pecializovanÃ© ï¬rmy, ktorÃ© vyrÃ¡bajÃº nieÄo konkrÃ©tne. Dajme tomu, Å¾e to budÃº dva typy ï¬riem â ï¬rmy, ktorÃ© vyrÃ¡bajÃº drevenÃ© stoliÄky, a vydavateÄ¾skÃ© ï¬rmy, ktorÃ© na zÃ¡kazku pripravujÃº vÃ¤ÄÅ¡ie mnoÅ¾stvÃ¡ CD alebo DVD s nejakÃ½m obsahom a prÃ­padne s potlaÄou. Na tento ÃºÄel potrebujeme vytvoriÅ¥ dve novÃ© triedy â VÃ½robca stoliÄiek a VydavateÄ¾stvo. Trieda VÃ½robca stoliÄiek bude maÅ¥ rovnakÃ© Ãºdaje ako trieda Firma a navyÅ¡e bude maÅ¥ Ãºdaje typ dreva a cena dreva, ktorÃ© udÃ¡vajÃº, z akÃ©ho dreva ï¬rma zhotovuje vÃ½robky a akÃ¡ je nÃ¡kupnÃ¡ cena dreva potrebnÃ¡ na vÃ½robu jednej stoliÄky. V metÃ³dach pribudne jedna metÃ³da VypÃ­Å¡ typ, ktorÃ¡ vypÃ­Å¡e informÃ¡ciu o pouÅ¾Ã­vanom type dreva. V triede VydavateÄ¾stvo budÃº oproti triede Firma navyÅ¡e Ãºdaje typ disku, cena disku a potlaÄ. Ãdaj typ disku mÃ´Å¾e nadobÃºdaÅ¥ hodnoty âCDâ alebo âDVDâ, cena disku udÃ¡va nÃ¡kupnÃº cenu jednÃ©ho disku a potlaÄ hovorÃ­, Äi je ï¬rma schopnÃ¡ vyrÃ¡baÅ¥ aj disky s potlaÄou. Medzi metÃ³dami pribudne metÃ³da InformÃ¡cie o produktoch, ktorÃ¡ vypÃ­Å¡e informÃ¡cie o diskoch, ktorÃ© ï¬rma vyrÃ¡ba. Trieda VÃ½robca stoliÄiek sÃºkromnÃ© nÃ¡zov sÃ­dlo hodinovÃ¡ mzda hodinovÃ½ vÃ½kon typ dreva cena dreva verejnÃ© KonÅ¡truktor(n,s,h m,h v,t d,c d) VypÃ­Å¡ nÃ¡zov a sÃ­dlo() VypÃ­Å¡ typ VypoÄÃ­taj cenu(mnoÅ¾stvo) Trieda VydavateÄ¾stvo sÃºkromnÃ© nÃ¡zov sÃ­dlo hodinovÃ¡ mzda hodinovÃ½ vÃ½kon typ disku cena disku potlaÄ verejnÃ© KonÅ¡truktor(n,s,h m,h v,t d,c d,p) VypÃ­Å¡ nÃ¡zov a sÃ­dlo() InformÃ¡cie o produktoch VypoÄÃ­taj cenu(mnoÅ¾stvo)"
205,3,0.504,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","PREDHOVOR TÃ¡to kniÅ¾ka je pokusom opÃ­saÅ¥ pokus. PokÃºÅ¡ame sa opÃ­saÅ¥ vo svete prÃ¡ve prebiehajÃºci pokus zaviesÅ¥ novÃº vednÃº disciplÃ­nu. Web je tu a niektorÃ­ sa domnievajÃº, Å¾e je to tak dÃ´leÅ¾itÃ½ predmet skÃºmania s tak osobitnÃ½mi vedeckÃ½mi metÃ³dami, Å¾e je rozumnÃ© zaviesÅ¥ (a rozvÃ­jaÅ¥ a pestovaÅ¥) zvlÃ¡Å¡tnu vedenÃº disciplÃ­nu, ktorÃ¡ sa tomu bude venovaÅ¥. Podobne zmÃ½Å¡Ä¾ajÃºci nadÅ¡enci sa stretli v septembri 2005 v LondÃ½ne na dvojdÅovej tvorivej dielni uÅ¾ nazvanej Web Science Workshop. NÃ¡zov Web Science je trochu provokujÃºci a kontroverznÃ½ aj v angliÄtine. Web sa stÃ¡va predmetom skÃºmania a Å¡tÃºdia podobne ako prÃ­roda (alebo jej urÄitÃ¡ ÄasÅ¥ Äi aspekt), Älovek alebo spoloÄnosÅ¥. Web je vÅ¡ak aj predmetom navrhovania a treba ho spravovaÅ¥ a prevÃ¡dzkovaÅ¥, Äo si vyÅ¾aduje inÅ¾inierstvo. Web sa dnes skÃºma vo viacerÃ½ch disciplÃ­nach. Ukazuje sa vÅ¡ak, Å¾e to na jeho celostnÃ© pochopenie a rozvÃ­janie nemusÃ­ staÄiÅ¥. Treba interdisciplinÃ¡rny prÃ­stup. Podporovatelia myÅ¡lienky zrodu novej vednej disciplÃ­ny v nej vidia najlepÅ¡iu moÅ¾nosÅ¥ pre takÃ½to prÃ­stup. Fakt, Å¾e uÅ¾ vznikli vedeckÃ© Äasopisy a usporadÃºvajÃº sa vedeckÃ© konferencie, venovanÃ© Web Science, je v tomto smere sÄ¾ubnÃ½. Äi sa vÅ¡ak naozaj novÃ¡ vednÃ¡ disciplÃ­na definitÃ­vne etabluje vo vedeckom priestore, je otÃ¡zkou budÃºcnosti. MedzitÃ½m Web Science prenikla do vzdelÃ¡vacieho priestoru a uÅ¾ sÃº univerzity, ktorÃ© ponÃºkajÃº Å¡tudijnÃ© programy s tÃ½mto nÃ¡zvom. TÃ¡to kniÅ¾ka je vÃ½sledkom doktorandskÃ©ho seminÃ¡ra, ktorÃ½ som viedol v akademickom roku 2013/2014. Na Fakulte informatiky a informaÄnÃ½ch technolÃ³giÃ­ mÃ¡me Å¡Å¥astie na Å¡ikovnÃ½ch premÃ½Å¡Ä¾ajÃºcich Å¡tudentov. Neboja sa vÃ½ziev. Ãloha opÃ­saÅ¥ v sÃ©rii seminÃ¡rnych prÃ­spevkov rodiacu sa vednÃº disciplÃ­nu, s ktorou som priÅ¡iel na zaÄiatku seminÃ¡ra, bola celkom sluÅ¡nou vÃ½zvou. NÃ¡roÄnÃ© bolo uÅ¾ len hÄ¾adaÅ¥ vedeckÃ© pramene vzhÄ¾adom na novosÅ¥ tÃ©matiky. Pri nÃ¡vrhu tÃ©m jednotlivÃ½ch seminÃ¡rnych stretnutÃ­ sme sa nechali inÅ¡pirovaÅ¥ McCownovÃ½m sylabusom pre Ãºvod do webovedy [1, 2], keÄÅ¾e predstavuje celkom dobrÃ½ vyvÃ¡Å¾enÃ½ pohÄ¾ad na jednotlivÃ© obsahovÃ© tÃ©my, spadajÃºce do alebo sÃºvisiace s webovedou. S vÄakou uvÃ¡dzame, Å¾e aj pri pÃ­sanÃ­ viacerÃ½ch kapitol sme vychÃ¡dzali z obsahu inÅ¡piratÃ­vnych McCownovÃ½ch prednÃ¡Å¡ok. Jednou z pretrvÃ¡vajÃºcich otÃ¡zok nÃ¡Å¡ho seminÃ¡ra bolo hÄ¾adanie slovenskÃ©ho nÃ¡zvu pre novÃº vednÃº disciplÃ­nu. OtÃ¡znikov je pritom viac. ZdÃ¡ sa, Å¾e slovo web sa v slovenÄine uÅ¾ udomÃ¡cnilo, aj keÄ sa zaÄala pouÅ¾Ã­vaÅ¥ aj pavuÄina a nie je jasnÃ©, Äo sme prebratÃ­m cudzieho slova zÃ­skali. NÃ¡vrh na pavuÄinolÃ³giu bol vÅ¡ak tÃ½mto znevÃ½hodnenÃ½. NÃ¡vrh na sieÅ¥opis mal zasa tÃº nevÃ½hodu, Å¾e sieÅ¥ je Å¡irÅ¡Ã­ pojem ako web. Po viacerÃ½ch diskusiÃ¡ch sme sa ustÃ¡lili na webovede. Uvedomujeme si, Å¾e ide o novotvar. MÃ´Å¾e vyvolÃ¡vaÅ¥ rÃ´zne reakcie, ale to uÅ¾ patrÃ­ k veci. Po prednesenÃ­ prÃ­spevkov a diskusii na seminÃ¡ri spracovali autori tÃ©my aj pÃ­somne. PrvotnÃº zodpovednosÅ¥ za kapitoly sme si podelili takto: NÃ¡vrat za kapitoly 1, 16, KubÃ¡n za kapitoly 9, 14, KrÃ¡tky za kapitoly 5, 10, Macko za kapitoly 2, 8, MÃ³ro za kapitoly 6, 13, Srba za kapitolu 12, Å ajgalÃ­k za kapitolu 7, Å evcech za kapitoly 3, 10, 15, VrablecovÃ¡ za kapitoly 4, 11. PÃ­sanie"
76,428,0.504,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"xïK, H0 nezamietame. PrijÃ­mame teda hypotÃ©zu, Å¾e Å¾ivotnosÅ¥ je najviac 1500 hodÃ­n. Priali sme si zamietnuÅ¥ H0, ale, Å¾iaÄ¾, naÅ¡e dÃ¡ta to neumoÅ¾ÅujÃº. VziaÅ¥ zÃ¡very testov (1), (2) do Ãºvahy a prehlÃ¡siÅ¥, Å¾e prijÃ­mame hypotÃ©zu ï­ = 1500, vyzerÃ¡ na pohÄ¾ad logickÃ©, ale nie je to korektnÃ©. Teda nie v zmysle Å¡tatistickÃ©ho testovania, v ktorom hovorÃ­me o pravdepodobnosti moÅ¾nÃ½ch omylov â pozri poznÃ¡mku 8.4.6. Namiesto takÃ©ho prehlÃ¡senia je korektnÃ© previesÅ¥ test H0: ï­ = 1500 proti H1: ï­ ï¹ 1500. : | Ì"
59,299,0.504,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Å¡pecifikovanÃ© pomocou distribuovanÃ½ch obrazcov neurÃ¡lnych aktivÃ­t, priÄom nad tÃ½mito distribuovanÃ½mi obrazcami mÃ´Å¾eme zaviesÅ¥ formÃ¡lne algebraickÃ© operÃ¡cie, ktorÃ© umoÅ¾ÅujÃº matematicky modelovaÅ¥ nielen kognitÃ­vne operÃ¡cia, ale aj simulovaÅ¥ procesy pri ukladanÃ­ a vyberanÃ­ informÃ¡cie uloÅ¾enej v pamÃ¤ti. NaÅ¡u pozornosÅ¥ usmernÃ­me na netradiÄnÃ½ Å¡tÃ½l uskutoÄÅovania vÃ½poÄtov pomocou distribuovanÃ½ch obrazcov, ktorÃ½ sa diametrÃ¡lne lÃ­Å¡i od klasickÃ½ch numerickÃ½ch a symbolickÃ½ch vÃ½poÄtov a je vhodnÃ½m modelovÃ½m prostriedkom pre pochopenie globÃ¡lnych vlastnostÃ­ neurÃ³novÃ½ch sietÃ­. UkÃ¡Å¾eme, Å¾e takÃ©to âneuropoÄÃ­tanieâ je zaloÅ¾enÃ© na rozsiahlych nÃ¡hodne vytvorenÃ½ch obrazcoch (reprezentovanÃ½mi mnohorozmernÃ½mi vektormi s nÃ¡hodnÃ½mi zloÅ¾kami), pozri Obr. 6.1. Tento prÃ­stup, ktorÃ©ho zÃ¡kladnÃ© prÃ­stupy boli formulovanÃ© uÅ¾ koncom 60. rokov [3,4,5,813], bol zavÅÅ¡enÃ½ sÃ©riou prÃ¡c Tony Plateom [8-10] o âholografickej reprezentÃ¡ciiâ (HR). UkÃ¡Å¾eme, akÃ© typy vÃ½poÄtov sÃº tÃ½mto prÃ­stupom uskutoÄniteÄ¾nÃ© a Äi nÃ¡m umoÅ¾nia pochopiÅ¥ procesy prebiehajÃºce v mozgu pri kognitÃ­vnych aktivitÃ¡ch."
94,178,0.504,Sprievodca svetom vedeckÃ©ho publikovania,"Hodnotenie vedeckÃ©ho prÃ­nosu je pri hodnotenÃ­ vedy najtvrdÅ¡Ã­m orieÅ¡kom. ZatiaÄ¾ Äo dnes uÅ¾ disponujeme pomerne jasnÃ½mi ukazovateÄ¾mi na hodnotenie vedeckej produkcie, hodnotenie vedeckÃ©ho prÃ­nosu je oveÄ¾a komplexnejÅ¡ie a nie vÅ¾dy musÃ­ maÅ¥ nutne progresÃ­vny charakter (Martin a Irvine 1983). Z tohto dÃ´vodu je hodnotenie vedeckÃ©ho prÃ­nosu z tradiÄnÃ½ch schematickÃ½ch hÄ¾adÃ­sk âkvalityâ a âkvantityâ diskutabilnÃ© a nÃ¡jdenie jednoznaÄnÃ½ch kritÃ©riÃ­ problematickÃ©. PrÃ¡ve vedeckÃ½ prÃ­nos je vÅ¡ak pri hodnotenÃ­ vedy a vÃ½skumu tou najpodstatnejÅ¡ou otÃ¡zkou a jeho meranie zostÃ¡va pre hodnotiace organizÃ¡cie z celÃ©ho sveta vÃ½zvou."
94,417,0.504,Sprievodca svetom vedeckÃ©ho publikovania,"AutentifikaÄnÃ© systÃ©my Tieto systÃ©my (naprÃ­klad Athens, Shibboleth alebo bX Recommender Service) slÃºÅ¾ia na identifikÃ¡ciu oprÃ¡vnenia prÃ­stupu k e-zdrojom, priÄom sa odbÃºrava nutnosÅ¥ individuÃ¡lneho zadÃ¡vania hesla do kaÅ¾dÃ©ho EIZ separÃ¡tne. Å tatistiky z tÃ½chto systÃ©mov umoÅ¾ÅujÃº zistiÅ¥ naprÃ­klad to, akÃ© skupiny pouÅ¾Ã­vateÄ¾ov vyuÅ¾Ã­vajÃº EIZ kniÅ¾nice."
272,333,0.504,Reconsidering Constitutional Formation Ii Decisive Constitutional Normativity : From Old Liberties To New Precedence (Volume 12.0),"âZalecono iest takÅ¼e na Sesyi Zawczorayszey Deputacyi Konstytucyiney stosowaÄ wszystkie przepisy dalszych projektÃ³w RzÄdÃ³wych do tegoÅ¼ aktu fundamentalnegoâ, letter of Oraczewski to NN, 7th May 1791, Warszawa, AGAD, ZbiÃ³r PopielÃ³w, sygn. 418k. 569. âWszystkie prawa dawne i teraÅºniejsze przeciwne niniejszej Konstytucji lub ktÃ³remukolwiek jej artykuÅowi znosimy, a opisy szczegÃ³lne do artykuÅÃ³w i kaÅ¼dej materii w niniejszej Konstytucji zamkniÄtych potrzebne, jako dokÅadniej wyszczegÃ³lniajÄce obowiÄzki i ukÅad rzÄdu, za czeÅÄ skÅadajÄcÄ teÅ¼ KonstytucjÄ deklarujemy (â¦) Uczyniwszy zadosyÄ radoÅci powszechnej, dajemy pilne oko na ubezpieczenie tej Konstytucji, stanowiÄc, iÅ¼ ktobykolwiek ÅmiaÅ byÄ przeciwnym niniejszej Konstytucji lub targaÄ siÄ na jej zepsucie, albo wzruszaÅ spokojnoÅÄ dobrego i szczÄÅliwym byÄ zaczynajÄcego narodu przez zasiewanie nieufnoÅci, przewrotne tÅumaczenie Konstytucjiâ¦ ten za nieprzyjaciela ojczyzny, za jej zdrajcÄ, za buntownika uznany, najsurowszymi karami natychmiast przez sÄd sejmowy ukarany bÄdzieâ. Deklaracya stanÃ³w zgromadzonych, Volumina Legum, Wydawnictwo Komisyi Prawniczej Akademii UmiejÄtnoÅci w Krakowie, Vol. IX, KrakÃ³w 1889, pp. 225â226. Sessya 82, 27 Maia 1791, AGAD, ASCz, sygn. 19, pp. 353â354v."
240,435,0.503,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"reÅ¥azec str a nÃ¡vratovÃ¡ hodnota je celÃ© ÄÃ­slo. Zamyslime sa, v akÃ½ch prÃ­padoch nie je moÅ¾nÃ© n znakov od pozÃ­cie offset odstrÃ¡niÅ¥? OznaÄme len dÄºÅ¾ku vstupnÃ©ho reÅ¥azca str. Znaky nie je moÅ¾nÃ© odstrÃ¡niÅ¥ vtedy, ak od pozÃ­cie offset reÅ¥azec obsahuje menej ako n znakov (len-offset < n), funkcia vrÃ¡ti 1. V prÃ­pade, Å¾e znaky moÅ¾no odstrÃ¡niÅ¥, tak cyklom od pozÃ­cie i=offset+n prejdeme znaky (str[i]) po jednom aÅ¾ do konca (vrÃ¡tane"
240,61,0.503,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Zamyslite sa aj nad alternatÃ­vnou Ãºlohou: Na vstupe je hodnota BMI a hmotnosÅ¥ v kg, na vÃ½stup vypÃ­Å¡te vÃ½Å¡ku Äloveka v cm zaokrÃºhlenÃº na jedno desatinnÃ© miesto. UkÃ¡Å¾ka vstupu: 20.346 58.8 VÃ½stup pre ukÃ¡Å¾kovÃ½ vstup: 170.0 MoÅ¾no doplniÅ¥ pÃ´vodnÃ½ program, aby rieÅ¡il tÃºto alternatÃ­vnu Ãºlohu? Ak nie, akÃ© Ãºpravy je potrebnÃ© vykonaÅ¥? Ãloha 1-9 UrÄite vÃ½stup vykonania nasledujÃºceho programu s uvedenÃ½m vstupom."
130,370,0.503,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"VzÅ¥ahy a ich Å¡truktÃºra sÃº jednÃ½m z dvoch zÃ¡kladnÃ½ch prvkov kaÅ¾dej organizÃ¡cie (druhÃ½m sÃº entity, ktorÃ© organizÃ¡ciu tvoria a medzi ktorÃ½mi tieto vzÅ¥ahy sÃº). TÃ¡to kapitola sa pokÃºsi daÅ¥ odpoveÄ na otÃ¡zku preÄo vlastne vzÅ¥ahy vznikajÃº a akÃ© sÃº ich zÃ¡kladnÃ© typy z pohÄ¾adu Å¡truktÃºry organizÃ¡cie."
239,96,0.503,Ãvod do matematickej logiky,"Porovnajte PrÄ±Ìklad 5.2 s PrÄ±Ìkladom 4.1 a ObraÌzok 12 s DNF-formulou ekvivalentnou s Q. Ako vidno, DNF-formulu ekvivalentnuÌ s Q vieme urcÌitâ pomocou mnozÌiny QM . Z Vety 4.1 dostaÌvame nasledujuÌce tvrdenie: Veta 5.5. Nech je A vyÌrokovaÌ formula. Potom platÄ±Ì (1) A je kontradikcia praÌve vtedy, kedâ AM = â, cÌizÌe kedâ je AM praÌzdna mnozÌina. (2) A je tautoloÌgia praÌve vtedy, kedâ AM = U, cÌizÌe kedâ suÌ vsÌetky prvky univerza v AM . (3) A je splnitelânaÌ praÌve vtedy, kedâ AM 6= â, cÌizÌe kedâ je AM nepraÌzdna. Podobne, z Vety 4.4 maÌme: Veta 5.6. (1) MnozÌina formuÌl A1 , A2 , . . . , An je splnitelânaÌ praÌve vtedy, kedâ je mnozÌina (A1 â§ A2 â§ . . . â§ An )M nepraÌzdna, cÌizÌe kedâ majuÌ (A1 )M , (A2 )M , . . . , (An )M nepraÌzdny prienik. (2) A1 , A2 , . . . , An  B pre vtedy, kedâ je (A1 â§ A2 â§ . . . â§ An â§ q B)M praÌzdna mnozÌina, cÌizÌe kedâ majuÌ mnozÌiny (A1 )M , (A2 )M , . . . , (An )M , (BM )c praÌzdny prienik. (3) Formuly A a B suÌ ekvivalentneÌ praÌve vtedy, kedâ (A â B)M = U, cÌizÌe kedâ suÌ AM a BM rovnakeÌ mnozÌiny."
196,55,0.502,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"zdielâanie dokumentu. V reÅ¾ime zadarmo mÃ´Å¾e autor zdielâatâ dokument s dâalÅ¡ou osobou. Je potrebnÃ© kliknÃºtâ v pravom hornom rohu na ikonu Share obr. 2.5. NÃ¡sledne v okne zdielâania uviestâ mailovÃº adresu spolupracovnÃ­ka v cÌasti Share with your collaborators a nastavitâ jeho prÃ¡va (len cÌÃ­tanie, aj pÃ­sanie) obr. 2.6 UvedenÃ½ spolupracovnÃ­k tak bude mailom notifikovanÃ½ o moÅ¾-"
190,242,0.502,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,PoÄme sa pozrieÅ¥ konkrÃ©tne na softvÃ©rovÃ© projekty. V [1] sa pojednÃ¡va o zdrojoch nestÃ¡losti takÃ½chto projektov. V sÃºvislosti s projektmi menÅ¡ieho rozsahu sÃº podÄ¾a mÅa najzaujÃ­mavejÅ¡ie prÃ¡ve tieto dva:
240,375,0.502,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-3 (rieÅ¡enie) NiektorÃ© chÃ½bajÃºce miesta vieme doplniÅ¥ veÄ¾mi Ä¾ahko: premennÃº vysledok, ktorÃ¡ nie je vo funkcii eÅ¡te deklarovanÃ¡, doplnÃ­me v riadku 3. NÃ¡vratovÃ¡ hodnota funkcie zodpovedÃ¡ hodnote prvku poÄ¾a â typ int. VstupnÃ© pole a musÃ­ do funkcie prÃ­sÅ¥ ako vstupnÃ½ argument, preto do argumentov funkcie v riadku 1 doplnÃ­me int *a alebo a[]. Funkcia musÃ­ prejsÅ¥ kaÅ¾dÃ½ prvok poÄ¾a a, preto cyklus v riadku 4 mÃ¡ podmienku i < n."
265,269,0.502,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"1. RealizÃ¡cia softvÃ©rovÃ½ch sÃºÄiastok (programovanie, tvorba pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­ v produkÄnej kvalite, transformÃ¡cia modelu Ãºdajov do fyzickej podoby, konfigurovanie znovupouÅ¾itÃ½ch sÃºÄiastok, ...). 2. Tvorba dokumentÃ¡cie k softvÃ©rovÃ½m sÃºÄiastkam. 3. Testovanie implementovanÃ½ch softvÃ©rovÃ½ch sÃºÄiastok (vykonÃ¡vanie jednotkovÃ½ch a integraÄnÃ½ch testov, prÃ­padne programovanie ÄalÅ¡Ã­ch)."
59,187,0.502,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ktorÃ½ urÄuje fitnes agenta A ako sumu âplatiebâ, ktorÃ© sÃº priradenÃ© interakciÃ¡m danÃ©ho agenta s ostatnÃ½mi agentmi populÃ¡cie. Fitnes agentov je plne urÄenÃ½ âstratÃ©giouâ vzÃ¡jomnej interakcie, ktorÃ¡ je dominantnÃ¡ pre ich preÅ¾Ã­vanie a reprodukciu, zatiaÄ¾ Äo, architektÃºra samotnÃ©ho agenta je v tomto prÃ­stupe nemennÃ¡. V tomto prÃ­stupe je fenotyp agenta reprezentovanÃ½ stratÃ©giou interakcie s ostatnÃ½mi agentmi. V zjednoduÅ¡enom prÃ­stupe tieto stratÃ©gie splÃ½vajÃº priamo s genotypom agenta, takÅ¾e koncepcia dichotÃ³mie medzi genotypom a fenotypom agenta v tomto prÃ­stupe neplatÃ­."
59,453,0.502,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"9 RevÃ­zia poznatkov 9.1 ÃvodnÃ© poznÃ¡mky1 ProblÃ©m revÃ­zie poznatkov mÃ¡ vo filozofii a v logike dlhÃº tradÃ­ciu. Stal sa integrÃ¡lnou sÃºÄasÅ¥ou mnohÃ½ch traktÃ¡tov a monografiÃ­ z filozofie poznania (epistemolÃ³gie) a logiky od staroveku aÅ¾ po sÃºÄasnosÅ¥, ktorÃ© obsahovali rozsiahle kapitoly, kde vÃ¤ÄÅ¡inou na fenomenologicko-Å¡pekulatÃ­vnej Ãºrovni sa formulovali zÃ¡sady nÃ¡Å¡ho myslenia, argumentÃ¡cie a zmeny poznatkov vyplÃ½vajÃºcich zo zmien vÃ½chodiskovÃ½ch predpokladov, ich rozÅ¡Ã­renia alebo ÄiastoÄnej falzifikÃ¡cie. TÃ¡to zaujÃ­mavÃ¡ problematika sa stala sÃºÄasÅ¥ou aplikovanej matematickej logiky aÅ¾ koncom minulÃ©ho storoÄia, keÄ jej formÃ¡lny aparÃ¡t bol pouÅ¾itÃ½ na formulÃ¡ciu teÃ³rie revÃ­zie poznatkov. TaktieÅ¾, problÃ©m revÃ­zie poznatkov sa stal v sÃºÄasnosti integrÃ¡lnou ÄasÅ¥ou informatiky a umelej inteligencie a tÃ½m musel prejsÅ¥ z roviny vÅ¡eobecnoÅ¡pekulatÃ­vnej k rovine formÃ¡lno-exaktnej, ktorÃ¡ mÃ´Å¾e slÃºÅ¾iÅ¥ ako zÃ¡klad algoritmizÃ¡cie problematiky revÃ­zie poznatkov na poÄÃ­taÄoch. Tak naprÃ­klad, ak chceme Å¡pecifikovaÅ¥ zÃ¡kladnÃ© epistemickÃ© princÃ­py vÃ½vinu vedy, dynamiku jej vÃ½voja v Äase, tento cieÄ¾ mÃ´Å¾e byÅ¥ realizovanÃ½ na abstraktnej Ãºrovni tak, Å¾e Å¡tudujeme danÃº konzistentnÃº databÃ¡zu poznatkov. TÃ¡to databÃ¡za je v Äase postupne modifikovanÃ¡ elementÃ¡rnymi operÃ¡ciami, ako je dodanie novÃ©ho poznatku a odstrÃ¡nenie pÃ´vodnÃ©ho poznatku. V obidvoch prÃ­padoch tieto operÃ¡cie zmeny mÃ´Å¾u ovplyvÅovaÅ¥ ostatnÃ© poznatky, preto sa vykonÃ¡va ich revÃ­zia, aby sa odstrÃ¡nili prÃ­padnÃ© nekonzistentosti. V poÄiatoÄnom obdobÃ­ vzniku teÃ³rie revÃ­zie poznatkov (80. roky minulÃ©ho storoÄia) zÃ¡kladnÃ© idey boli formulovanÃ© Å¡vÃ©dskym kognitÃ­vnym vedcom Petrom GÃ¤rdenforsom [3,4] a dvojicou americkÃ½ch logikov Carlosom AlchourrrÃ³nom a Davidom Makinsomom [1], ktorÃ­ spoloÄne v r. 1985 publikovali v Journal of Symbolic Logic vÃ½znamnÃº prÃ¡cu [1] (ktorÃ¡ sa v odbornej literatÃºre oznaÄuje akronymom AGM poÄiatoÄnÃ½ch pÃ­smen ich priezvisk v abecednom poriadku jej autorov), v ktorej formulovali zÃ¡kladnÃ© princÃ­py, koncepcie a konÅ¡trukcie teÃ³rie revÃ­zie poznatkov. PrÃ­klad 9.1. Predpokladajme, Å¾e teÃ³ria obsahuje tieto Å¡tyri poznatky: p1 = Â´vÅ¡etky eurÃ³pske labute sÃº bieleÂ´ p2 = Â´vtÃ¡k zachytenÃ½ do siete je labuÅ¥Â´ p3 = Â´vtÃ¡k zachytenÃ½ v sieti pochÃ¡dza zo SlovenskaÂ´ p4 = Â´Slovensko je ÄasÅ¥ EurÃ³pyÂ´ Ak tieto Å¡tyri poznatky tvoria vstup do programu simulujÃºceho logickÃ© usudzovanie, potom ako vÃ½stup z tohto programu dostaneme novÃ½ poznatok p5 = Â´vtÃ¡k zachytenÃ½ v sieti je bielyÂ´ Teraz predpokladajme, Å¾e naÅ¡a databÃ¡za bola doplnenÃ¡ o ÄalÅ¡Ã­ poznatok p6 = Â´vtÃ¡k zachytenÃ½ v sieti je ÄiernyÂ´ Tento novÃ½ âpoznatokâ je v kontradikcii so zÃ¡verom p5 , t. j. platÃ­ p6 ï½ ïp5 . Potom musÃ­me vykonaÅ¥ revÃ­ziu databÃ¡zy, aby sme odstrÃ¡nili tÃºto nekonzistentnosÅ¥, t. j. niektorÃ½ poznatok z pÃ´vodnej databÃ¡zy {p1, p2, p3, p4} musÃ­ byÅ¥ odstrÃ¡nenÃ½ alebo modifikovanÃ½. Tak naprÃ­klad, ak poznatok p1 nahradÃ­me novÃ½m poznatkom"
130,529,0.502,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"OsobnÃ© asistenty. Ide o systÃ©my beÅ¾iace na pozadÃ­, ktorÃ© poÄas toho ako sa pouÅ¾Ã­vateÄ¾ pohybuje v rÃ¡mci hyperpriestoru, sÃº schopnÃ© zvÃ½razÅovaÅ¥ Äasti prezentovanÃ½ch informÃ¡ciÃ­, ktorÃ© na zÃ¡klade skÃºmania zÃ¡ujmov pouÅ¾Ã­vateÄ¾a (alebo prÃ­padne prednastavenia urÄitÃ©ho profilu) oznaÄia ako relevantnÃ©."
369,307,0.502,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"PoistnÃ¡ zmluva obsahuje jeden alebo viac predmetov poistenia, priÄom kaÅ¾dÃ½ predmet poistenia sa tÃ½ka jednÃ©ho poistnÃ©ho objektu. Ak naprÃ­klad fyzickÃ¡ osoba uzatvÃ¡ra zÃ¡konnÃ© poistenie motorovÃ©ho vozidla, poistnÃ¡ zmluva mÃ¡ iba jeden predmet poistenia. Dva alebo niekoÄ¾ko predmetov poistenia mÃ¡ poistnÃ¡ zmluva naprÃ­klad pri Å¾ivotnom poistenÃ­ manÅ¾elov alebo rodiÄa s dieÅ¥aÅ¥om. Viac predmetov poistenia vystupuje pri skupinovom poistenÃ­, naprÃ­klad (tzv. flotily) motorovÃ½ch vozidiel firmy alebo pri Ãºrazovom poistenÃ­ pracovnÃ­kov firmy. KeÄÅ¾e jeden poistnÃ½ objekt mÃ´Å¾e byÅ¥ pouÅ¾itÃ½ vo viacerÃ½ch poistnÃ½ch zmluvÃ¡ch (naprÃ­klad ten istÃ½ automobil v zmluve o povinnom zmluvnom poistenÃ­ aj v zmluve o havarijnom poistenÃ­), Äasto sa odÄleÅuje od samotnÃ©ho predmetu poistenia. Pre poistnÃ© objekty sa, v zÃ¡vislosti od ich typov, evidujÃº tieÅ¾ rÃ´zne popisnÃ© atribÃºty. Pre motorovÃ© vozidlo sa naprÃ­klad evidujÃº Ãºdaje podÄ¾a osvedÄenia o evidencii (technickÃ©ho preukazu): druh vozidla, znaÄka a typ vozidla, Å¡tÃ¡tna poznÃ¡vacia znaÄka, vÃ½robnÃ© ÄÃ­slo karosÃ©rie, vÃ½robnÃ© ÄÃ­slo motora, rok vÃ½roby, farba, objem valcov, vÃ½kon motora a ÄalÅ¡ie. UvedenÃ© atribÃºty slÃºÅ¾ia nielen na identifikÃ¡ciu poistnÃ©ho objektu, ale niekedy tieÅ¾ na vÃ½poÄet poistnÃ©ho (poistnÃ© mÃ´Å¾e naprÃ­klad zÃ¡visieÅ¥ od typu vozidla, objemu valcov, prÃ­padne inÃ½ch atribÃºtov) a Å¡tatistiky a poistnÃº matematiku, ktorÃ¡ tak mÃ´Å¾e presnejÅ¡ie urÄovaÅ¥ sadzby poistnÃ©ho (vozidlÃ¡ urÄitÃ½ch typov sa naprÃ­klad kradnÃº viac ako vozidlÃ¡ inÃ½ch typov a majÃº preto vyÅ¡Å¡ie sadzby poistnÃ©ho). Predmet poistenia zÃ¡roveÅ spÃ¡ja poistnÃ½ objekt s poistnÃ½mi rizikami, ktorÃ© sÃº dohodnutÃ© pre tento poistnÃ½ objekt. PoistnÃ½ objekt mÃ´Å¾e byÅ¥ na jednej zmluve poistenÃ½ voÄi viacerÃ½m poistnÃ½m rizikÃ¡m, naprÃ­klad motorovÃ© vozidlo voÄi Å¾ivlu, odcudzeniu a krÃ¡deÅ¾i. JednotlivÃ© poistnÃ© rizikÃ¡ mÃ´Å¾u maÅ¥ svoje Å¡pecifickÃ© poistnÃ© sumy, poistnÃ© a zÄ¾avy. Pri havarijnom poistenÃ­ motorovÃ©ho vozidla je naprÃ­klad havÃ¡ria pravdepodobnejÅ¡ia ako poÅ¡kodenie vozidla Å¾ivelnou udalosÅ¥ou, preto mÃ¡va poistnÃ© riziko havÃ¡rie vyÅ¡Å¡ie poistnÃ©. TaktieÅ¾ bonus/malus sa Å¡tandardne poskytuje na poistnÃ© riziko havÃ¡rie a nie na poistnÃ© riziko krÃ¡deÅ¾e motorovÃ©ho vozidla. Pri poistenÃ­ zodpovednosti za Å¡kodu mÃ´Å¾u byÅ¥ jednotlivÃ½mi poistnÃ½mi rizikami: Å¡koda na zdravÃ­, Å¡koda na veciach a uÅ¡lÃ½ zisk. KaÅ¾dÃ© z tÃ½chto poistnÃ½ch rizÃ­k mÃ´Å¾e maÅ¥ inÃº poistnÃº sumu. Podobne mÃ´Å¾e byÅ¥ pri Ãºrazovom poistenÃ­ dohodnutÃ½ch viacero poistnÃ½ch rizÃ­k: Ãºmrtie nÃ¡sledkom Ãºrazu, trvalÃ© nÃ¡sledky poÅ¡kodenia zdravia, dennÃ© odÅ¡kodnenie po dobu nevyhnutnÃ©ho lieÄenia. KaÅ¾dÃ© z tÃ½chto poistnÃ½ch rizÃ­k mÃ¡ inÃº poistnÃº sumu. Pri viacerÃ½ch poistnÃ½ch rizikÃ¡ch na jeden poistnÃ½ objekt, predovÅ¡etkÃ½m pri Å¾ivotnom poistenÃ­, sa zvyÄajne jedno poistnÃ© riziko povaÅ¾uje za hlavnÃ© riziko a na jeho zÃ¡klade sa odvÃ¡dzajÃº hlavnÃ© parametre zmluvy: poistnÃ¡ suma, minimÃ¡lna dÄºÅ¾ka poistnÃ©ho obdobia a poistnÃ©. Pri Å¾ivotnom poistenÃ­ je takÃ½mto poistnÃ½m rizikom poistenie na doÅ¾itie7, poistenie na Ãºmrtie alebo ich kombinÃ¡cia. HlavnÃ© poistnÃ© riziko je povinnÃ© a nie je moÅ¾nÃ© ho zruÅ¡iÅ¥. Zmena parametrov hlavnÃ©ho poistnÃ©ho je spravidla moÅ¾nÃ¡, vyÅ¾aduje vÅ¡ak prepoÄÃ­tanie ostatnÃ½ch parametrov zmluvy (najmÃ¤ poistnÃ©ho) a mÃ´Å¾e dokonca viesÅ¥ k vytvoreniu novej verzie zmluvy (nahradeniu starej poistnej zmluvy novou zmluvou). PoistnÃ© riziko, ktorÃ© nie je hlavnÃ½m rizikom, moÅ¾no zvyÄajne v priebehu existencie poistnej zmluvy pri-"
236,140,0.502,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Pomocou prostredÃ­ figure a table poskytuje LATEX zÃ¡kladnÃ© moÅ¾nosti na prÃ¡cu s plÃ¡vajÃºcimi objektmi, naprÃ­klad s obrÃ¡zkami alebo grafikou. Pomocou LATEXu alebo LATEXovÃ½ch doplÅujÃºcich balÃ­kov je moÅ¾nÃ© vytvÃ¡raÅ¥ aj obrÃ¡zky. NaneÅ¡Å¥astie vÃ¤ÄÅ¡ina uÅ¾Ã­vateÄ¾ov povaÅ¾uje tento spÃ´sob za nÃ¡roÄnÃ½ na pochopenie. Z tohoto dÃ´vodu sa Äalej nebudeme vytvÃ¡ranÃ­m obrÃ¡zkov v LATEXu v tomto manuÃ¡le zaoberaÅ¥.1 BliÅ¾Å¡ie informÃ¡cie o tvorbe obrÃ¡zkov nÃ¡jdete v The LATEX Companion [3] a LATEX Manual [1]. OveÄ¾a jednoduchÅ¡Ã­m spÃ´sobom, ako dostaÅ¥ grafiku do dokumentu, je vytvoriÅ¥ si danÃ½ obrÃ¡zok Å¡peciÃ¡lnym grafickÃ½m programom2 a potom vloÅ¾iÅ¥ hotovÃ½ obrÃ¡zok do dokumentu. LATEX tu znovu ponÃºka Å¡irokÃº Å¡kÃ¡lu balÃ­kov, ktorÃ© ponÃºkajÃº mnoÅ¾stvo spÃ´sobov, ako to urobiÅ¥. V tomto Ãºvode sa budeme zaoberaÅ¥ len typom Encapsulated PostScript (EPS), nakoÄ¾ko je pomerne jednoduchÃ½ a Äasto pouÅ¾Ã­vanÃ½. Aby ste mohli pouÅ¾Ã­vaÅ¥ obrÃ¡zky vo formÃ¡te EPS, musÃ­te maÅ¥ k dispozÃ­cii PostScriptovÃº tlaÄiareÅ.3 ProspeÅ¡nÃº sadu prÃ­kazov na vkladanie grafiky poskytuje balÃ­k graphicx, ktorÃ©ho autorom je D. P. Carlisle. Je to ÄasÅ¥ celej rodiny balÃ­kov nazÃ½vanej âgrafickÃ½Ã¿ uzol.4"
205,137,0.501,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","E predstavuje mnoÅ¾inu vÅ¡etkÃ½ch orientovanÃ½ch hrÃ¡n a epq predstavuje prepojenie zo strÃ¡nky p na strÃ¡nku q. Podobne ako v algoritme PageRank, aj algoritmus HITS vyÅ¾aduje vÃ½poÄet vo viacerÃ½ch iterÃ¡ciÃ¡ch, aÅ¾ kÃ½m hodnoty centier a autorÃ­t neskonvergujÃº. ProblÃ©my JednÃ½m z problÃ©mov oproti algoritmu PageRank je, Å¾e algoritmus HITS nikdy nepouÅ¾ili vo vÃ¤ÄÅ¡om rozsahu, pretoÅ¾e IBM naÅ vlastnÃ­ patent. NavyÅ¡e algoritmus HITS je zÃ¡vislÃ½ na dopyte, takÅ¾e sa vykonÃ¡va aÅ¾ po zadanÃ­ dopytu, nie poÄas indexovania, Äo mÃ¡ znaÄnÃ½ dopad na jeho ÄasovÃº efektÃ­vnosÅ¥ pri spracovanÃ­ dopytu."
196,4,0.501,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.3.2 Ako vytvoritâ poloÅ¾kovÃ½, necÌÃ­slovanÃ½ prÃ­padne cÌÃ­slovanÃ½ zoznam? . . . . . . . . . . . 40 3.3.3 Ako pokracÌovatâ v preruÅ¡enom cÌÃ­slovanom zozname? . . . . . . . . . . . . . . . . . . 42 3.3.4 AkÃ½ je rozdiel medzi \RequirePackage a \usepackage prÃ­kazmi cÌo sa tÃ½ka pouÅ¾itia? 43 3.3.5 Ako zarovnatâ odsek (vpravo, vlâavo, na stred a do bloku)? . . . . . . . . . . . . . . . 43 3.3.6 Ako oÅ¡etritâ situÃ¡ciu kedâ text presahuje cez okraj dokumentu? . . . . . . . . . . . . 44 3.3.7 Ako zalomitâ text dlhej adresy URL tak, aby nepresahoval za okraj dokumentu? . . . 45 3.3.8 Ako zabezpecÌitâ zalomenie riadku? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 3.3.9 Ako zabezpecÌitâ zalomenie strany? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 3.3.10 Ako menitâ rozloÅ¾enie prvkov strany ako sÃº zÃ¡hlavie, pÃ¤ta a cÌÃ­slovanie strÃ¡n? . . . 46 3.3.11 Ako vloÅ¾itâ inÃ½ sÃºbor do hlavnÃ©ho dokumentu? . . . . . . . . . . . . . . . . . . . . . 48 3.3.12 Ako rieÅ¡itâ architektÃºru vÃ¤cÌÅ¡ieho projektu ako napr. BP, DP, DizP? . . . . . . . . . . 49 3.3.13 AkÃº prÃ­ponu majÃº LATEX zdrojovÃ© sÃºbory? 3.4.1"
265,142,0.501,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NajznÃ¡mejÅ¡ie generickÃ© modely vÃ½voja softvÃ©ru sÃº vodopÃ¡dovÃ½ model a iteratÃ­vno-inkrementÃ¡lny model. Z tÃ½chto generickÃ½ch modelov vychÃ¡dzajÃº aj ÄalÅ¡ie modely vÃ½voja softvÃ©ru â sÃº od nich odvodenÃ©, rozÅ¡irujÃº ich, vylepÅ¡ujÃº alebo prispÃ´sobujÃº pre potrebu Å¡pecifickÃ©ho typu softvÃ©ru."
59,162,0.501,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.15. Chemostat obsahuje âzmesâ molekÃºl â replikÃ¡torov. ReplikaÄnÃ½ akt spoÄÃ­va v tom, Å¾e nÃ¡hodne vybranÃ¡ molekula sa zreplikuje (buÄ perfektne alebo s malou mutÃ¡ciou), vzniknutÃ½ produkt â molekula vytesnÃ­ inÃº nÃ¡hodne vybranÃº molekulu (chemostat obsahuje v celej svojej histÃ³rii konÅ¡tantnÃ½ poÄet molekÃºl)."
76,230,0.501,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ako bolo povedanÃ© v Ãºvode ÄlÃ¡nku, variancia (rozptyl) je momentovou charakteristikou rozptÃ½lenosti. NasledujÃºca definÃ­cia uvÃ¡dza ÄalÅ¡iu moÅ¾nÃº mieru rozptÃ½lenosti, ktorÃ¡ je kvantilovou charakteristikou (lebo sa opiera o kvantily). 4.1.18 DefinÃ­cia. Nech je nÃ¡hodnÃ¡ veliÄina s hustotou a takÃ¡, Å¾e jej distribuÄnÃ¡ funkcia je na mnoÅ¾ine ( ) rastÃºca. MedzikvartilovÃ© rozpÃ¤tie mkr( ) definujeme vzÅ¥ahom mkr( ) = t. j. mkr( ) je vzdialenosÅ¥ medzi dolnÃ½m a hornÃ½m kvartilom rozdelenia veliÄiny . Samozrejme, ÄÃ­m je rozptÃ½lenosÅ¥ veliÄiny vÃ¤ÄÅ¡ia, tÃ½m vÃ¤ÄÅ¡ie je mkr( ). 4.1.19 PrÃ­klad. Nech"
240,233,0.501,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"NÃ¡vratovÃ¡ hodnota volania ciferny_sucet(x / 10) predstavuje cifernÃ½ sÃºÄet cifier ÄÃ­sla x bez poslednej cifry. K tomuto vÃ½sledku pripoÄÃ­tame (riadok 5) hodnotu poslednej cifry (x % 10), ÄÃ­m urÄÃ­me celkovÃ½ vÃ½sledok pre hodnotu x. RekurzÃ­vne volania budÃº pokraÄovaÅ¥ pre zmenÅ¡ujÃºce sa hodnoty ÄÃ­sla x, a preto na zabrÃ¡nenie nekoneÄnÃ©ho rekurzÃ­vneho vnorenia musÃ­me zabezpeÄiÅ¥, aby sme pre nejakÃ© malÃ© hodnoty x vÃ½sledok vo funkcii urÄili bez rekurzÃ­vneho volania. ZÃ¡kladnÃ½ prÃ­pad"
41,82,0.501,InformaÄnÃ© vzdelÃ¡vanie,"TÃ©me tvorby internetovÃ½ch strÃ¡nok sa v nie tak dÃ¡vnej minulosti venovalo veÄ¾kÃ© mnoÅ¾stvo Ä¾udÃ­. DÃ¡ sa povedaÅ¥, Å¾e k popularizÃ¡cii internetu prispelo pomerne jednoduchÃ© vytvÃ¡ranie internetovÃ½ch strÃ¡nok, ktorÃ© sa zjednoduÅ¡ilo vznikom mnohÃ½ch CMS â Content Management System. Mnoho programÃ¡torov pÃ´vodne zaÄÃ­nalo tvorbou strÃ¡nok. Je to aj oblasÅ¥, kde naÅ¡li svoje uplatnenie aj informatickÃ­ laici, Äi mnoÅ¾stvo designerov a grafikov. CMS sÃº v podstate administraÄnÃ½mi systÃ©mami na tvorbu, sprÃ¡vu a ukladanie obsahu na strÃ¡nkach. MnohÃ© disponujÃº vlastnosÅ¥ami, ktorÃ© im umoÅ¾ÅujÃº jednoducho vkladaÅ¥ texty, obrÃ¡zky, upravovaÅ¥ obsah, prideÄ¾ovaÅ¥ administraÄnÃ© prÃ¡va. Ako prÃ­klad CMS mÃ´Å¾eme uviesÅ¥ WordPress, Documentum, Mambo... Je jasnÃ©, Å¾e internetovÃ½ch strÃ¡nok je v dneÅ¡nej dobe veÄ¾kÃ© mnoÅ¾stvo, ale samotnÃ½ obsah a vizuÃ¡lna strÃ¡nka u mnohÃ½ch z nich nie je na vysokej Ãºrovni. Objavila sa aj tendencia pridÃ¡vania veÄ¾kÃ©ho mnoÅ¾stva tetu na strÃ¡nky, ÄÃ­m strÃ¡cajÃº svoju vypovedaciu schopnosÅ¥. Inou chybou je prÃ­liÅ¡nÃ© prelinkovanie strÃ¡nok, priÄom sa v ich navigÃ¡cii nakonci dÅa stratÃ­te. ProblÃ©mom je aj prÃ­liÅ¡nÃ© zameranie na marketingovÃ© a biznis informÃ¡cie, ktorÃ½ch informaÄnÃ¡ hodnota je prakticky Å¾iadna. A samozrejme vÅ¡adeprÃ­tomnÃ© reklamy a systÃ©my a plug-in-y snaÅ¾iace sa vystopovaÅ¥ lokalitu, osobnÃ© informÃ¡cie... Preto je na mieste si pripomenÃºÅ¥ a spÃ­saÅ¥ niekoÄ¾ko dobrÃ½ch rÃ¡d, ako postupovaÅ¥ pri tvorbe internetovÃ½ch strÃ¡nok, aby boli zrozumiteÄ¾nÃ©, prehÄ¾adnÃ© a navÅ¡tevovanÃ©. DobrÃ¡ a kvalitnÃ¡ webovÃ¡ prezentÃ¡cia musÃ­ nÃ¡vÅ¡tevnÃ­ka zaujaÅ¥, musÃ­ udrÅ¾aÅ¥ jeho pozornosÅ¥ na strÃ¡nke a prinÃºtiÅ¥ ho, aby klikol na ÄalÅ¡ie odkazy, ktorÃ© sÃº na web strÃ¡nke prÃ­tomnÃ©. Preto je dobrÃ© hneÄ v Ãºvode pamÃ¤taÅ¥ na: â¢ OznaÄenie pÃ´vodcu strÃ¡nky na viditeÄ¾nom mieste. â¢ MaÅ¥ kvalitnÃ½ a sprÃ¡vne napÃ­sanÃ½ obsah. â¢ PouÅ¾iÅ¥ prehÄ¾adnÃ½ design bez zbytoÄnostÃ­. â¢ PouÅ¾iÅ¥ jednoduchÃº navigÃ¡ciu. â¢ StrÃ¡nku pravidelne aktualizovaÅ¥. â¢ NeumiestÅovaÅ¥ na strÃ¡nku dlho sa sÅ¥ahujÃºci obsah. Je potrebnÃ© si uvedomiÅ¥, Å¾e strÃ¡nka mÃ¡ nÃ¡vÅ¡tevnÃ­ka nielen pritiahnuÅ¥, ale ho aj zaujaÅ¥ a Äo najdlhÅ¡ie udrÅ¾aÅ¥. Malo by sa pamÃ¤taÅ¥ na prÃ­stupnosÅ¥ strÃ¡nky aj z inÃ½ch zariadenÃ­, ako sÃº PC a notebooky, takÅ¾e responzÃ­vny design (responzÃ­vny dizajn je prÃ­stup k nÃ¡vrhu grafickÃ©ho pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania â GUI - pouÅ¾Ã­vanÃ½ na vytvÃ¡ranie obsahu,"
40,44,0.501,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Pri bliÅ¾Å¡om pohÄ¾ade na rovnicu (15) zistÃ­me, Å¾e je urÄitÃ½m spÃ´sobom obmedzujÃºca. NepripÃºÅ¡Å¥a tÃº moÅ¾nosÅ¥, Å¾e vÃ½stup systÃ©mu y (n + 1) mÃ´Å¾e zÃ¡visieÅ¥ aj na predchÃ¡dzajÃºcich vÃ½stupoch y (n), y (n â 1),... . Echo State neurÃ³novÃ© siete dokÃ¡Å¾u pracovaÅ¥ aj s autoregresÃ­vnymi systÃ©mami, ale v tejto Äasti sa obmedzÃ­me iba na Äisto neautoregresÃ­vny prÃ­pad. Teraz predpokladajme, Å¾e mÃ¡me Echo State neurÃ³novÃº sieÅ¥. Äalej si predstavme, Å¾e sieti bola predkladanÃ¡ dlhÃ¡ vstupnÃ¡ sekvencia. VzhÄ¾adom na to, Å¾e naÅ¡a RC ANN mÃ¡ vlastnosÅ¥ echo stavov a nachÃ¡dza sa uÅ¾ v stave po poÄiatoÄnom prechodnom procese, mÃ´Å¾u byÅ¥ stavy vnÃºtornÃ½ch neurÃ³nov zapÃ­sanÃ© nasledujÃºcou rovnicou (s urÄitou voÄ¾nosÅ¥ou k notÃ¡cii): xi (n) â ei (..., u (n), u (n + 1)), kde ei je echo funkcia i-teho neurÃ³nu. Ak je sieÅ¥ nehomogÃ©nna, rÃ´zne echo funkcie sa budÃº vÃ½razne navzÃ¡jom odliÅ¡ovaÅ¥, a tak budÃº vytvÃ¡raÅ¥ potrebnÃº dynamiku neurÃ³novej siete. NaÅ¡Ã­m cieÄ¾om je teda v zmysle rovnice (15) aproximovaÅ¥ systÃ©m yteach (n + 1) = Gteach (..., u (n), u (n + 1)) pomocou vÃ½stupu neurÃ³novej siete. ZÃ¡kladnou myÅ¡lienkou je aproximÃ¡cia Gteach pomocou kombinÃ¡cie jednotlivÃ½ch echo funkciÃ­ E = (e1 ,..., e N ), v zmysle minimalizÃ¡cie strednej kvadratickej chyby. VÃ½stup neurÃ³novej siete vypoÄÃ­tame na zÃ¡klade vzÅ¥ahu y (n + 1) = f out (W out (u (n + 1), x (n + 1))). Ako aktivaÄnÃ¡ funkcia vÃ½stupnÃ½ch neurÃ³nov je v tomto prÃ­pade pouÅ¾itÃ¡ funkcia tanh (hyperbolickÃ½ tangens). KeÄÅ¾e tÃ¡to funkcia je invertovateÄ¾nÃ¡, mÃ´Å¾eme prepÃ­saÅ¥ rovnicu (17) nasledujÃºcim spÃ´sobom ( f out ) â1 ( y (n + 1)) = W out (u (n + 1), x (n + 1)). VloÅ¾enÃ­m echo funkciÃ­ E vytvorÃ­me novÃ½ zÃ¡pis ( f out ) â1 ( y (n + 1)) = W out (u (n + 1), E (..., u (n â 1), u (n), u (n + 1))). Rozdiel medzi skutoÄnÃ½m a poÅ¾adovanÃ½m vÃ½stupom (invertovanÃ½m vzhÄ¾adom na aktivaÄnÃº funkciu vÃ½stupnÃ½ch neurÃ³nov) si oznaÄÃ­me Îµ train (n) . Îµ train (n) = ( f out ) â1 ( yteach (n)) â ( f out ) â1 ( y (n))  out â1   out  = ( f ) ( yteach (n)) â W (u (n), E (..., u (n â 1), u (n))). PoslednÃ½m krokom je vypoÄÃ­tanie vÃ¡hovÃ½ch koeficientov nachÃ¡dzajÃºcich sa v matici W out takÃ½m spÃ´sobom, aby sme minimalizovali strednÃº kvadratickÃº chybu (MSE)"
122,72,0.501,Modelovanie softvÃ©ru,"klad, vÃ½robok hrÃ¡ rolu poloÅ¾ky v objednÃ¡vke. ObchodnÃ­k mÃ´Å¾e byÅ¥ expeditÃ©r alebo schvaÄ¾ovateÄ¾. ÄasovÃ½ interval predstavuje platnosÅ¥ ceny. InÃ½ spÃ´sob vyjadrenia roly je prostrednÃ­ctvom rozhrania (angl. interface). SprÃ¡vca objednÃ¡vok na vyhÄ¾adanie vÃ½robkov pouÅ¾Ã­va triedu SprÃ¡vca vÃ½robkov. Tento vzÅ¥ah bol vyjadrenÃ½ priamo v predchÃ¡dzajÃºcej verzii diagramu tried znÃ¡zornenej na obrÃ¡zku 4.2. SprÃ¡vca vÃ½robkov len hrÃ¡ rolu vyhÄ¾adÃ¡vaÄa vÃ½robkov, Äo je indikovanÃ© vzÅ¥ahom realizÃ¡cie: SprÃ¡vca vÃ½robkov realizuje rozhranie VyhÄ¾adÃ¡vaÄ vÃ½robkov. V diagrame tried sa rozhranie oznaÄuje streotypom Â«interfaceÂ». TÃºto rolu mÃ´Å¾e zohraÅ¥ aj inÃ¡ trieda, t. j. jej inÅ¡tancie. Rozhranie predpisuje VyhÄ¾adÃ¡vaÄ vÃ½robkov prÃ­sluÅ¡nÃº metÃ³du, ktorÃº SprÃ¡vca vÃ½robkov implementuje. SprÃ¡vca vÃ½robkov sa stÃ¡va podtypom typu VyhÄ¾adÃ¡vaÄ vÃ½robkov: jeho inÅ¡tancie mÃ´Å¾u vystupovaÅ¥ kdekoÄ¾vek je oÄakÃ¡vanÃ¡ inÅ¡tancia typu VyhÄ¾adÃ¡vaÄ vÃ½robkov. Pritom rozhranie ako takÃ© inÅ¡tancie nemÃ´Å¾e maÅ¥. RealizÃ¡cia rozhrania zodpovedÃ¡ vzÅ¥ahu implements medzi triedou a rozhranÃ­m v Jave. Rozhrania podporuje aj C#. C++ nepodporuje rozhrania, ale moÅ¾no ich emulovaÅ¥ pomocou tried, ktorÃ½ch vÅ¡etky metÃ³dy (ÄlenskÃ© funkcie) sÃº plne virtuÃ¡lne. AgregÃ¡ciu moÅ¾no vyjadriÅ¥ aj vo forme atribÃºtu a to vrÃ¡tane nÃ¡sobnosti, ako ukazuje obrÃ¡zok 4.4. PodÄ¾a Å¡pecifikÃ¡cie UML, to vÅ¡ak bude tzv. silnÃ¡ agregÃ¡cia v UML oznaÄovanÃ¡ aj ako kompozitnÃ¡ agregÃ¡cia alebo kompozÃ­cia. V kompozitnej agregÃ¡cii agregovanÃ¡ inÅ¡tancia mÃ´Å¾e byÅ¥ sÃºÄasÅ¥ou iba jednej agregujÃºcej inÅ¡tancie. V naÅ¡om prÃ­pade by sme tÃ½m stanovili, Å¾e jeden vÃ½robok mÃ´Å¾e byÅ¥ sÃºÄasÅ¥ou iba jednej objednÃ¡vky. Ak kaÅ¾dÃ¡ inÅ¡tancia triedy VÃ½robok predstavuje jeden vÃ½robok, toto je v poriadku. Ak vÅ¡ak inÅ¡tancia triedy VÃ½robok predstavuje typ vÃ½robku, Äo je pravdepodobne to, Äo sme chceli, sprÃ¡vnou voÄ¾bou je agregÃ¡cia ako na obrÃ¡zku 4.2, ktorÃ¡ sa oznaÄuje ako zdieÄ¾anÃ¡ agregÃ¡cia (angl. shared aggregation). Pri triede Cena pouÅ¾itie kompozitnej agregÃ¡cie korektne vyjadruje zÃ¡mer: cena bude jedineÄnÃ¡ pre kaÅ¾dÃ½ vÃ½robok."
130,154,0.5,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"NÃ¡vrhovÃ½ vzor PrenositeÄ¾, v angliÄtine znÃ¡my ako Transfer Object, rieÅ¡i situÃ¡ciu, kedy je potrebnÃ© ÄastÃ© ÄÃ­tanie (rovnakÃ½ch) Ãºdajov bez potreby opakovanÃ©ho volania vzdialenÃ½ch metÃ³d. Vzor umoÅ¾Åuje prenos sÃºvisiacich Ãºdajov vo forme jedinÃ©ho objektu (s odkazmi na hodnoty jednotlivÃ½ch atribÃºtov) ako vÃ½sledku volania jedinej metÃ³dy."
184,131,0.5,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Äastiach architektÃºry. DÃ´leÅ¾itÃ© je uvedomiÅ¥ si, Å¾e po kaÅ¾dej zmene komponentu je potrebnÃ© nanovo spustiÅ¥ proces testovania systÃ©mu. Â Je vhodnÃ© navrhovaÅ¥ komponenty, ktorÃ© sÃº vysoko sÃºdrÅ¾nÃ©. SÃºdrÅ¾nosÅ¥ hovorÃ­ nakoÄ¾ko spolu jednotlivÃ© Äasti komponentu vnÃºtorne sÃºvisia. Vysoko sÃºdrÅ¾nÃ© komponenty zapuzdrujÃº dobre definovanÃº funkcionalitu. Ich vÃ½hodou je, Å¾e sÃºstreÄujÃº potenciÃ¡lne zmeny do jednÃ©ho miesta, ÄÃ­m minimalizujÃº nÃ¡klady na udrÅ¾iavanie a potrebu testovania. Â Å truktÃºru komponentov je potrebnÃ© hierarchicky dekomponovaÅ¥. JednotlivÃ© komponenty pozostÃ¡vajÃº zo subkomponentov. VonkajÅ¡Ã­ komponent pritom poskytuje dostupnÃ© rozhrania subkomponentov. Â Je potrebnÃ© minimalizovaÅ¥ volania medzi komponentmi najmÃ¤ v prÃ­pade distribuovanÃ½ch komponentov a snaÅ¾iÅ¥ sa sÃºstreÄovaÅ¥ postupnosÅ¥ volanÃ­ medzi komponentmi do jednÃ©ho volania. Na obrÃ¡zku 2-20 je znÃ¡zornenÃ½ prÃ­klad pohÄ¾adu na Å¡truktÃºru aplikÃ¡cie na spracovanie objednÃ¡vok. SystÃ©m prijÃ­ma objednÃ¡vky a ukladÃ¡ ich do databÃ¡zy. KaÅ¾dÃ¡ objednÃ¡vka musÃ­ byÅ¥ validovanÃ¡ voÄi existujÃºcemu zÃ¡kaznÃ­ckemu systÃ©mu na overenie zÃ¡kaznÃ­ckych informÃ¡ciÃ­ a platnosti platby. Po ÃºspeÅ¡nej validÃ¡cii je objednÃ¡vka uloÅ¾enÃ¡ do databÃ¡zy (rad objednÃ¡vok) a zÃ¡kaznÃ­kovi je zaslanÃ½ email informujÃºci o zaÄatÃ­ spracovania jeho objednÃ¡vky."
265,385,0.5,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Kapitola 4. Tvorba softvÃ©ru â modely a metÃ³dy softvÃ©r nasadenÃ½. LogickÃ© modely sÃº flexibilnejÅ¡ie a lepÅ¡ie sa s nimi pracuje, fyzickÃ© je zase nevyhnutnÃ© vypracovaÅ¥ ak mÃ¡ softvÃ©r naozaj fungovaÅ¥ (efektÃ­vne). NajlepÅ¡ie rozdiel vidieÅ¥ pri modeloch Ãºdajov (ktorÃ© nazÃ½vame tÃ½mito prÃ­vlastkami) alebo pri dekompozÃ­cii na komponenty (tu je viac logickÃ½ model balÃ­kov, viac fyzickÃ½ model rozmiestnenia)."
59,333,0.5,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Proces âÄisteniaâ agregovanÃ©ho vektora t Å¡pecifikovanÃ©ho (6.39h) je znÃ¡zornenÃ¡ na Obr. 6.14. V 1. etape rekognoskujeme vektor t, zistÃ­me, Å¾e obsahuje dva agregÃ¡ty s12 a s345. V 2. etape analyzujeme agregÃ¡ty z predchÃ¡dzajÃºcej 1, etapy, zistÃ­me, Å¾e obsahujÃº agregÃ¡ty s1, s2,..., s5. V poslednej tretej etape analyzujeme agregÃ¡ty z predchÃ¡dzajÃºceho kroku, ktorÃ© uÅ¾ obsahujÃº elementÃ¡rne konceptuÃ¡lne vektory a, b, ..., k. Prekryvy rezultujÃºcich vektorov v procese âÄisteniaâ sÃº znÃ¡zornenÃ© na Obr. 6.15. t=s12345"
135,286,0.499,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.8 VÃ½zvy softvÃ©rovej architektÃºry VedeckÃ¡ komunita a komernÃ© firmy sa problematike architektÃºry softvÃ©ru venujÃº uÅ¾ niekoko rokov. TÃ¡to tÃ©ma je teda znane rozsiahla a dobre zdokumentovanÃ¡. AvÅ¡ak vekÃ¡ as vÃ½skumu bola zameranÃ¡ predovÅ¡etkÃ½m na modelovanie a opis architektÃºry softvÃ©ru. Problematika vyhodnocovania a porovnÃ¡vania jednotlivÃ½ch architektÃºr bola zatia pokrytÃ¡ len v obmedzenej miere. To znamenÃ¡, Å¾e sme schopnÃ­ navrhnÃº a namodelova zloÅ¾itÃº architektÃºru, ale nie sme schopnÃ­ exaktne vyhodnoti vhodnos pouÅ¾itia navrhnutej architektÃºry. Rozvoj v rÃ¡mci nÃ¡vrhu a modelovania architektÃºry softvÃ©ru viedol k vÃ½voju softvÃ©ru vedenÃ©mu architektÃºrou (angl. architecture-driven software development). VÃ½voj softvÃ©ru vedenÃ½ architektÃºrou mal vÅ¡ak za nÃ¡sledok, Å¾e softvÃ©r sa stal vekÃ½m a zloÅ¾itÃ½m. MÃ¡me teda vekÃ½ poet implementÃ¡ciÃ­ vychÃ¡dzajÃºcich z rÃ´znych architektÃºr avÅ¡ak bez moÅ¾nosti"
240,93,0.499,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"sme sa tÃ½m moÅ¾nosti, Å¾e by program pokraÄoval Äalej, ale vykazoval by nedefinovanÃ© sprÃ¡vanie, priÄom by sme nevedeli, Äi vÃ½sledok nakoniec bude sprÃ¡vny! Chybu Ãºplne odstrÃ¡nime vtedy, keÄ pred kaÅ¾dÃ½m priradenÃ­m do smernÃ­ka bude prÃ­sluÅ¡nÃ½ smernÃ­k ukazovaÅ¥ na pamÃ¤Å¥ v rozsahu vykonÃ¡vanÃ©ho programu. V tomto prÃ­pade by mal ukazovaÅ¥ na premennÃº a napr. takto:"
115,90,0.499,Algebra a diskrÃ©tna  matematika,"2 TEÃRIA MNOÅ½ÃN I MNOÅ½INA â¢ OPERÃCIE NAD MNOÅ½INAMI â¢ MNOÅ½INOVÃ ALGEBRA â¢ MOHUTNOSÅ¤ A ENUMERÃCIA â¢ KARTEZIÃNSKY SÃÄIN V tejto kapitole budeme Å¡tudovaÅ¥ klasickÃº teÃ³riu mnoÅ¾Ã­n, ktorÃ¡ patrÃ­ medzi zÃ¡kladnÃ© matematickÃ© formÃ¡lne prostriedky. UmoÅ¾Åuje formulovaÅ¥ prehÄ¾adnÃ½m a jednotnÃ½m spÃ´sobom vÅ¡etky oblasti matematiky prostrednÃ­ctvom elementÃ¡rnej Å¡truktÃºry mnoÅ¾iny a operÃ¡ciami nad Åou. TeÃ³ria mnoÅ¾Ã­n vznikla koncom 19. storoÄia hlavne zÃ¡sluhou nemeckÃ©ho matematika Georga Cantora (1845 â 1918). ZÃ¡sluhu na jej rozÅ¡Ã­renÃ­ mÃ¡ anglickÃ½ logik a filozof Bertrand Russell (1872 â 1970), ktorÃ½ objavil vnÃºtornÃ© nekonzistentnosti jej intuitÃ­vnej formulÃ¡cie, ktorÃ© boli neskÃ´r prekonanÃ© jej dÃ´slednou axiomatickou vÃ½stavbou. V tejto kapitole budeme prezentovaÅ¥ pÃ´vodnÃº intuitÃ­vnu (neaxiomatickÃº) vÃ½stavbu teÃ³rie mnoÅ¾Ã­n. Budeme sa zaoberaÅ¥ algebrou teÃ³rie mnoÅ¾Ã­n, problÃ©mom enumerÃ¡cie elementov v mnoÅ¾inÃ¡ch a na zÃ¡ver budeme Å¡pecifikovaÅ¥ dÃ´leÅ¾itÃ© mnoÅ¾inovÃ© Å¡truktÃºry â binÃ¡rne relÃ¡cie nad mnoÅ¾inami."
94,259,0.499,Sprievodca svetom vedeckÃ©ho publikovania,"VÃ½skumnÃ­k poÄas zberu dÃ¡t ruÄÃ­ za ich autenticitu. AutentickÃ© dÃ¡ta sÃº pravÃ©, teda takÃ©, akÃ© skutoÄne vyÅ¡li z experimentu. Autenticitu mÃ´Å¾u naruÅ¡iÅ¥ chyby v dÃ´sledku nedbanlivosti, sebaklamu (prÃ­liÅ¡nej snahy zÃ­skaÅ¥ Å¾iaduce vÃ½sledky) alebo falÅ¡ovanie."
94,366,0.499,Sprievodca svetom vedeckÃ©ho publikovania,"voÄ¾ne dostupnÃ© informaÄnÃ© zdroje: katalÃ³gy kniÅ¾nÃ­c, informaÄnÃ© zdroje z neziskovej sfÃ©ry, dokumenty z legislatÃ­vnej oblasti, servery ministerstiev a inÃ½ch Å¡tÃ¡tnych Ãºradov a inÅ¡titÃºciÃ­, informaÄnÃ© materiÃ¡ly, ktorÃ© svojou povahou nie sÃº predmetom obchodovania, zdroje, ktorÃ© sÃº vstupnou brÃ¡nou ku komerÄnÃ½m informaÄnÃ½m zdrojom â adresÃ¡re, domovskÃ© strÃ¡nky firiem,"
240,400,0.499,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"argumenty ani nÃ¡vratovÃº hodnotu funkcia nemÃ¡. VÅ¡imnime si v ukÃ¡Å¾ke vstupu, Å¾e znÃ¡mky vo vstupnom poli sÃº v Ä¾ubovoÄ¾nom poradÃ­. JednotlivÃ© poÄty znÃ¡mok preto musÃ­me urÄiÅ¥ predtÃ½m ako zaÄneme vÃ½pis na vÃ½stup. Tieto poÄty (vÃ½sledok) budeme reprezentovaÅ¥ poÄ¾om celÃ½ch ÄÃ­sel pocet[6]. Pre kaÅ¾dÃº hodnotu znÃ¡mky (1, 2, 3, 4 a 5) urÄÃ­me poÄet znÃ¡mok"
94,371,0.498,Sprievodca svetom vedeckÃ©ho publikovania,"â prÃ­stup prostrednÃ­ctvom niektorej z vedeckÃ½ch kniÅ¾nÃ­c na Slovensku, napr.: Centrum vedecko-technickÃ½ch informÃ¡ciÃ­ SR v Bratislave, ÃstrednÃ¡ kniÅ¾nica SAV v Bratislave, UniverzitnÃ¡ kniÅ¾nica v Bratislave, SlovenskÃ¡ nÃ¡rodnÃ¡ kniÅ¾nica v Martine. Podmienkou vyuÅ¾Ã­vania licencovanÃ½ch EIZ je Älenstvo pouÅ¾Ã­vateÄ¾a v danej kniÅ¾nici."
240,8,0.498,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"PrvÃ½ program Program je zmysluplnÃ½ vtedy, keÄ po jeho vykonanÃ­ mÃ´Å¾eme pozorovaÅ¥ nejakÃ½ vÃ½sledok. VzniknutÃ½ vÃ½sledok mÃ´Å¾e maÅ¥ rÃ´znu formu: vÃ½pis na obrazovku, zÃ¡pis sÃºboru na disku (napr. vytvorenie ZIP archÃ­vu), tlaÄ dokumentu na tlaÄiarni, odoslanie obsahu webovej strÃ¡nky po sieÅ¥ovom rozhranÃ­ a pod. Programy vytvÃ¡rame v ÄitateÄ¾nom, zvyÄajne textovom, zÃ¡pise tzv. zdrojovom kÃ³de, ktorÃ½ je prekladaÄom (kompilÃ¡torom) preloÅ¾enÃ½ do binÃ¡rneho strojovÃ©ho kÃ³du, ktorÃ½ potom uÅ¾ dokÃ¡Å¾e vykonaÅ¥ poÄÃ­taÄ. SamotnÃ½ program tvoria len âneÅ¾ivÃ©â prÃ­kazy pre poÄÃ­taÄ a bez spustenia programu neprebehne Å¾iaden vÃ½poÄet. VykonÃ¡vanÃ½"
94,388,0.498,Sprievodca svetom vedeckÃ©ho publikovania,"11.2.1 Stanovenie kÄ¾ÃºÄovÃ½ch slov PrvÃ½m krokom je definÃ­cia kÄ¾ÃºÄovÃ½ch slov, ktorÃ© vyjadrujÃº obsah stanovenej tÃ©my a pomocou ktorÃ½ch sa v elektronickÃ½ch informaÄnÃ½ch zdrojoch (EIZ), discovery systÃ©moch alebo online katalÃ³goch vyhÄ¾adÃ¡va. Rovnako je dÃ´leÅ¾itÃ© nedrÅ¾aÅ¥ sa prÃ­liÅ¡ striktne iba"
184,317,0.498,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"sÃºbor x nachÃ¡dza na serveri 1, ale nehovorÃ­ o tom, kde sa danÃ½ server nachÃ¡dza. Server sa mÃ´Å¾e voÄ¾ne pohybovaÅ¥ kdekoÄ¾vek po sieti bez toho, aby sa zmenila cesta k sÃºborom, ktorÃ© sa na Åom nachÃ¡dzajÃº. TakÃ½to systÃ©m je lokÃ¡ciou transparentnÃ½. PrÃ­kladmi takÃ½chto systÃ©mov mÃ´Å¾u byÅ¥ naprÃ­klad NFS, Locus a Sprite. Transparencia lokÃ¡cie vÅ¡ak vÅ¾dy nemusÃ­ postaÄovaÅ¥. Predpokladajme, Å¾e je sÃºbor x extrÃ©mne veÄ¾kÃ½ a miesto na serveri 1 je uÅ¾ Äalej nepostaÄujÃºce. TieÅ¾ predpokladajme, Å¾e na serveri 2 je dostatoÄnÃ© voÄ¾nÃ© miesto. DistribuovanÃ½ systÃ©m by mohol presunÃºÅ¥ sÃºbor x na server 2 automaticky. Å½iaÄ¾ pokiaÄ¾ je prvÃ½m komponentom mena kaÅ¾dÃ©ho sÃºboru meno servera, systÃ©m nemÃ´Å¾e sÃºbor presunÃºÅ¥ na inÃ© miesto automaticky ani keby adresar1 existoval na oboch serveroch. ProblÃ©mom je, Å¾e automatickÃ½ presun sÃºborov menÃ­ cestu k nemu z /server1/adresar1/x na /server2/adresar1/x. Program, ktorÃ½ mÃ¡ pÃ´vodnÃº cestu v sebe nakompilovanÃº alebo nastavenÃº prestane pracovaÅ¥, keÄÅ¾e sa cesta zmenila. SystÃ©m v ktorom mÃ´Å¾u byÅ¥ sÃºbory presunutÃ© bez zmeny ich mien spÄºÅa podmienky nezÃ¡vislosti lokÃ¡cie. SÃºborovÃ½ systÃ©m spÄºÅajÃºci tÃºto poÅ¾iadavku je naprÃ­klad Andrew File System (Wachsmann, 2005). DistribuovanÃ½ systÃ©m, ktorÃ½ ukladÃ¡ menÃ¡ poÄÃ­taÄov alebo serverov do cesty k sÃºborom nie je nezÃ¡vislÃ½ od lokÃ¡cie. TÃºto vlastnosÅ¥ taktieÅ¾ nespÄºÅajÃº systÃ©my zaloÅ¾enÃ© na vzdialenom pripÃ¡janÃ­, keÄÅ¾e nie je moÅ¾nÃ© presunÃºÅ¥ sÃºbor z jednej skupiny sÃºborov (zvÃ¤zku pripojenia) do inej skupiny a sÃºÄasne dosiahnuÅ¥, aby bolo moÅ¾nÃ© pouÅ¾iÅ¥ starÃ© meno sÃºboru. NezÃ¡vislosÅ¥ lokÃ¡cie nie je jednoduchÃ© dosiahnuÅ¥, napriek tomu mÃ´Å¾e byÅ¥ tÃ¡to vlastnosÅ¥ v distribuovanÃ½ch systÃ©moch Å¾iaduca. SumarizÃ¡cia vyÅ¡Å¡ie opÃ­sanÃ½ch moÅ¾nostÃ­ hovorÃ­ o troch zÃ¡kladnÃ½ch dostupnÃ½ch prÃ­stupoch pri pomenovanÃ­ sÃºborov a adresÃ¡rov v distribuovanom prostredÃ­ (Tanenbaum, 2001): Â Meno poÄÃ­taÄa + cesta k sÃºboru, ako naprÃ­klad /pocitac1/cesta/k/suboru Â PripÃ¡janie vzdialenÃ½ch sÃºborovÃ½ch systÃ©mov do lokÃ¡lnej hierarchie sÃºborovÃ©ho systÃ©mu Â JednotnÃ½ mennÃ½ priestor, ktorÃ½ je identickÃ½ na vÅ¡etkÃ½ch poÄÃ­taÄoch PrvÃ© dve moÅ¾nosti sÃº Ä¾ahko implementovateÄ¾nÃ©, Å¡peciÃ¡lne v prÃ­padoch prepojenia existujÃºcich systÃ©mov, ktorÃ© neboli navrhnutÃ© na distribuovanÃ© pouÅ¾itie. PoslednÃ¡ moÅ¾nosÅ¥ je najzloÅ¾itejÅ¡ou, vyÅ¾aduje si starostlivÃ½ nÃ¡vrh, je vÅ¡ak potrebnÃ¡ v prÃ­pade, ak chceme dosiahnuÅ¥, aby sa distribuovanÃ½ systÃ©m sprÃ¡val ako jeden poÄÃ­taÄ."
393,185,0.497,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"a inÃ½ch akciÃ­. Keby sa ten Å¡pecifickÃ½ identifikÃ¡tor nenaÅ¡iel, tak sa jeden nÃ¡hodne vytvorÃ­ a odovzdÃ¡ jeho poÄÃ­taÄu pre ÄalÅ¡ie pouÅ¾itie. OpÃ­sanÃ½ prÃ­stup mÃ¡ jednu zrejmÃº nevÃ½hodu: pouÅ¾Ã­vateÄ¾a moÅ¾no identifikovaÅ¥, ak pristÃºpi do systÃ©mu len z jeho Å¡pecifikovanÃ©ho prostredia."
196,91,0.497,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"â¢ commentstyle=\color{grey} â nastavÃ­ farbu komentÃ¡rov. â¢ stringstyle=\color{red} â nastavÃ­ farbu retâazcov. â¢ backgroundcolor=\color{black} â nastavÃ­ cÌiernu farbu pozadia, zaujÃ­mavÃ© v sÃºvislosti s vypisovanÃ­m obsahu zobrazovanÃ©ho v prostredÃ­ Windows PowerShell, Bash shell a pod. NevyhnutnÃ© je pouÅ¾itâ balÃ­k pre farby color, alebo xcolor [38]. â¢ basicstyle=\scriptsize\color{grey}\ttfamily â nastavÃ­ velâkostâ fontu a jeho farbu. â¢ extendedchars=true â nastavÃ­ moÅ¾nostâ pracovatâ so znakmi nad rÃ¡mec ASCII. â¢ escapeinside={\%*}{*)} â umoÅ¾nÃ­ vÃ½pis znakov nad rÃ¡mec ASCII. Znaky musia bytâ umiestnenÃ© v uvedenÃ½ch oddelâovacÌoch â¢ frame=single â orÃ¡muje vÃ½pis zdrojovÃ©ho kÃ³du. â¢ numbers=left â vysÃ¡dza cÌÃ­sla riadkov zdrojovÃ©ho kÃ³du vlâavo v riadku. Pre kompletnÃ½ zoznam je vhodnÃ© pozrietâ https://mirr or.szerverem.hu/ctan/macros/latex/contrib/listin gs/listings.pdf"
59,212,0.497,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"4 Ãloha uÄenia v evolÃºcii a memetika 4.1 Baldwinov efekt a Ãºloha uÄenia v evolÃºcii V r. 1896 americkÃ½ psycholÃ³g J. M. Baldwin [1] formuloval hypotÃ©zu, podÄ¾a ktorej jedinci z populÃ¡cie schopnÃ­ uÄiÅ¥ sa majÃº vÃ¤ÄÅ¡iu Å¡ancu preÅ¾itia, ich fitnes je vÃ¤ÄÅ¡ie ako fitnes jedincov, ktorÃ­ tÃºto vlastnosÅ¥ nemajÃº. Ak prostredie evolÃºcie zostÃ¡va dlhÃ½ Äas nemennÃ©, tak prirodzenÃ½ vÃ½ber mÃ´Å¾e viesÅ¥ k emergencii takÃ½ch jedincov populÃ¡cie, ktorÃ­ majÃº tÃºto schopnosÅ¥ uÄiÅ¥ sa geneticky zafixovanÃº, Baldwin nazval tento mechanizmus âorganickÃ¡ selekciaâ. V sÃºÄasnosti sa na poÄesÅ¥ Baldwina tento jav nazÃ½va Baldwinov efekt [2]. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e pri evolÃºcii kognitÃ­vneho aparÃ¡tu vystupuje do popredia aspekt uÄenia, t. j. schopnosÅ¥ jedincov adaptovaÅ¥ si svoj kognitÃ­vny orgÃ¡n tak, aby odrÃ¡Å¾al v urÄitom rozsahu zmeny v prostredÃ­ alebo novÃ© kognitÃ­vne funkcie dÃ´leÅ¾itÃ© pre preÅ¾itie a reprodukciu. VÃ½znam uÄenia v Darwinovej evolÃºcii spoÄÃ­va v tom, Å¾e organizmus s lepÅ¡Ã­m kognitÃ­vnym aparÃ¡tom mÃ¡ vÃ¤ÄÅ¡iu Å¡ancu na preÅ¾itie a reprodukciu. Poznamenajme, Å¾e zÃ¡kladnÃ¡ architektÃºra a snÃ¡Ä aj poÄiatoÄnÃ© nastavenie vybranÃ½ch vÃ¡hovÃ½ch koeficientov kognitÃ­vneho orgÃ¡nu sa dediÄne prenÃ¡Å¡ajÃº na potomkov, avÅ¡ak neprenÃ¡Å¡ajÃº sa vedomosti zÃ­skanÃ© rodiÄmi v priebehu ich Å¾ivota."
40,88,0.497,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"4 VirtuÃ¡lnÃ­ agent chodÃ­ a ohmatÃ¡vÃ¡ svÄt VirtuÃ¡lnÃ­ agent se mÅ¯Å¾e ve virtuÃ¡lnÃ­m svÄtÄ pohybovat â od toho koneckoncÅ¯ celÃ¡ simulace je. Z pozice programÃ¡tora to vypadÃ¡ tak, Å¾e agentovi pÅikÃ¡Å¾e pÅehrÃ¡t animaci chÅ¯ze, nebo jinÃ©ho typu pohybu, z pozice <x1, y1>, kde agent prÃ¡vÄ stojÃ­, na <x2, y2>, kde mÃ¡ stÃ¡t po ukonÄenÃ­ animace. PÅitom ovÅ¡em programÃ¡tor narazÃ­ na nÄkolik problÃ©mÅ¯:"
196,113,0.497,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"prÃ­kazmi \RequirePackage a \usepackage cÌo sa tÃ½ka pouÅ¾itia. SÃº to prÃ­kazy na pouÅ¾itie balÃ­ka Å¡pecifickÃ© ich upotrebenÃ­m. PodstatnÃ½ rozdiel je v tom, Å¾e \usepackage nemÃ´Å¾e bytâ pouÅ¾itÃ½ pred prÃ­kazom documentclass{}. PrÃ­kaz \RequirePackage preto bÃ½va sÃºcÌastâou definÃ­ciÃ­ tried. SÃºborov s prÃ­ponou *.cls prÃ­padne Å¡tÃ½lov *.sty."
76,19,0.497,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ak vezmeme do Ãºvahy fakt, Å¾e Å¡katuÄ¾a obsahovala 100 guliek, tak naÅ¡e tipy na zloÅ¾enie Å¡katule by boli: 50 â 30 â 20, resp. 51 â 29 â 20 a pod. AvÅ¡ak 100 %-nÃ½ tip zrejme neexistuje. 1.1.4 PrÃ­klad. Nech pokus spoÄÃ­va v hode dvoma riadnymi hracÃ­mi kockami, modrou a Äervenou. Za vÃ½sledok pokusu povaÅ¾ujme usporiadanÃº dvojicu ÄÃ­sel ( ), ktorÃ© padli na kockÃ¡ch ( bodov na modrej, na Äervenej). UvaÅ¾ujme nasledujÃºce udalosti A, B: A â spoÄÃ­va v tom, Å¾e na modrej padne aspoÅ toÄ¾ko bodov ako na Äervenej, B â spoÄÃ­va v tom, Å¾e na kaÅ¾dej kocke padne pÃ¡rne ÄÃ­slo. Modelujme ich ako podmnoÅ¾iny mnoÅ¾iny vÅ¡etkÃ½ch vÃ½sledkov. VÅ¡imneme si, Å¾e systÃ©m nÃ¡hodnÃ½ch udalostÃ­ mÃ¡ istÃº Å¡truktÃºru, Äo znamenÃ¡, Å¾e s dvojicou udalostÃ­ A, B sa prirodzene objavujÃº ÄalÅ¡ie udalosti: AïB, AïB, A\B, resp. B\A. Nakoniec, definujme pravdepodobnosÅ¥ v tomto pokuse. RieÅ¡enie. Zrejme mnoÅ¾ina ï (ktorÃ¡ modeluje vÅ¡etky moÅ¾nÃ© vÃ½sledky pokusu) mÃ¡ 36 prvkov. Prvky ï· mnoÅ¾iny ï sÃº usporiadanÃ© dvojice ( ) a mÃ´Å¾eme ich znÃ¡zorniÅ¥ ako uzlovÃ© body mrieÅ¾ky (obr. 1-1) a oÄÃ­slovaÅ¥ zÄ¾ava doprava a zhora nadol: = (1, 1), = (1, 2), ... , = (1, 6), = (2, 1), = (2, 2), ... , = (2, 6) , ... , = (6, 1), = (6, 2), ... , = (6, 6). UdalosÅ¥ A modelujeme mnoÅ¾inou A = {("
205,165,0.497,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","9 RozdeÄ¾ovanie grafov V sÃºÄasnosti sa takmer vo vÅ¡etkÃ½ch oblastiach zÃ¡ujmov Ä¾udstva vytvÃ¡ra veÄ¾kÃ© mnoÅ¾stvo Ãºdajov. Tvorba tÃ½chto Ãºdajov je dÃ´sledkom rozÅ¡irovania a uÄ¾ahÄovania prÃ­stupu k internetu a tÃ½m aj prÃ­stupu k informÃ¡ciÃ¡m. AvÅ¡ak dnes uÅ¾ sa o internete nehovorÃ­ len v oblasti informaÄnÃ½ch a komunikaÄnÃ½ch technolÃ³giÃ­ ale aj o takzvanom internete vecÃ­ (angl. Internet of Things), kde internet prenikÃ¡ do najrÃ´znejÅ¡Ã­ch oblastÃ­ nÃ¡Å¡ho kaÅ¾dodennÃ©ho Å¾ivota. Pri takomto mnoÅ¾stve Ãºdajov mÃ¡ zmysel snaÅ¾iÅ¥ sa vytvÃ¡raÅ¥ a hÄ¾adaÅ¥ novÃ© spÃ´soby, metÃ³dy a algoritmy na prÃ¡cu s nim ako naprÃ­klad ich rozdeÄ¾ovanie alebo zoskupovanie. RozdeÄ¾ovanie grafov zahÅÅa prÃ¡ve niekoÄ¾ko takÃ½chto metÃ³d. S pojmom veÄ¾kÃ© ÃºdajovÃ© korpusy (angl. Big Data) sa v dneÅ¡nej dobe stretÃ¡vame uÅ¾ pomerne Äasto. Je to populÃ¡rny pojem opisujÃºci exponenciÃ¡lny nÃ¡rast Ãºdajov a ich dostupnosÅ¥ (Å¡truktÃºrovanÃ© aj neÅ¡truktÃºrovanÃ© Ãºdaje) [3]. So sÃºÄasnÃ½mi moÅ¾nosÅ¥ami jednoduchej komunikÃ¡cie a spoluprÃ¡ce v rÃ¡mci celÃ©ho sveta sa novÃ© Ãºdaje generujÃº obrovskou rÃ½chlosÅ¥ou a v obrovskom mnoÅ¾stve. VÃ½znamnÃ½m zdrojom novÃ½ch Ãºdajov sÃº webovÃ© systÃ©my poskytujÃºce sluÅ¾by pre sociÃ¡lne siete, komunitnÃ© weby, weby otÃ¡zok a odpovedÃ­ (angl. Community Question Answering) alebo aj weby zameranÃ© na vedu a vÃ½skum a ÄalÅ¡ie. V takÃ½chto sieÅ¥ach Äasto potrebujeme identifikovaÅ¥ pevne zoskupenÃ© skupiny (ObrÃ¡zok 30) alebo zisÅ¥ovaÅ¥ ako ich rozdeliÅ¥ (ObrÃ¡zok 31). Siete a vzÃ¡jomnÃ© vzÅ¥ahy ich poloÅ¾iek sa dajÃº reprezentovaÅ¥ pomocou grafov, kde uzly grafu predstavujÃº poloÅ¾ky siete a hrany medzi nimi ich vzÃ¡jomnÃ½ vzÅ¥ah. V sociÃ¡lnych sieÅ¥ach uzly mÃ´Å¾u reprezentovaÅ¥ naprÃ­klad osoby a hrany ich vzÃ¡jomnÃ© priateÄ¾stvo. V sieti spoluautorov uzly predstavujÃº osoby a hrany spoloÄnÃº publikÃ¡ciu. Na identifikovanie skupÃ­n v takÃ½chto grafoch alebo ich rozdelenie je vhodnÃ© pouÅ¾iÅ¥ niektorÃ© metÃ³dy rozdeÄ¾ovania grafov [2]."
205,39,0.496,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","2.2.1 Å truktÃºra webu Å truktÃºra dneÅ¡nÃ©ho webu sa veÄ¾mi podobÃ¡ grafovej. V Å¡truktÃºre webu totiÅ¾ vystupujÃº webovÃ© strÃ¡nky ako uzly a prepojenia medzi nimi ako hrany, Äo je znÃ¡zornenÃ© na obrÃ¡zku 2. WebovÃ½ graf mÃ¡ obrovskÃ© rozmery a okrem toho rozloÅ¾enie hrÃ¡n nemÃ¡ normÃ¡lne rozdelenie."
240,250,0.496,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"DoplnÃ­me externÃº deklarÃ¡ciu premennej na_vyhry a pripoÄÃ­tame k nej potrebnÃº hodnotu, tak aby podmienka (online_herna.c:11) vo funkcii stavka() umoÅ¾nila vyplatiÅ¥ vÃ½hru. Po 100 dÅoch je teraz vÃ½sledok pre hrÃ¡Äa viac poteÅ¡ujÃºci: Hrac: 2704.8 EUR Stat(5%): 852.4 EUR Stat(20%): 0.0 EUR Zisk herne: -2557.2 EUR"
43,404,0.496,Objektovo orientovanÃ© programovanie v C++,"Teraz uÅ¾ program bude pracovaÅ¥ skutoÄne korektne. Na zÃ¡ver eÅ¡te spomeÅme, Å¾e zatiaÄ¾ Äo deÅ¡truktor mÃ´Å¾e byÅ¥ virtuÃ¡lny, konÅ¡truktor nie. Pri konÅ¡truktoroch vÅ¡ak ani nenastÃ¡va uvedenÃ½ problÃ©m â vÅ¾dy sa zavolÃ¡ sprÃ¡vny konÅ¡truktor prislÃºchajÃºci k objektu, ktorÃ½ vytvÃ¡rame."
135,189,0.496,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â vonkajÅ¡ia komunikÃ¡cia â je potrebnÃ¡ na prijÃ­manie Ãºloh a odovzdÃ¡vanie vÃ½sledkov vÃ½potu. Je realizovanÃ¡ prostrednÃ­ctvom portov, rozhranÃ­ (angl. interfaces). AtribÃºty predstavujÃº informÃ¡ciu pre analÃ½zu a vÃ½voj softvÃ©ru. Konektory VzÃ¡jomnÃº komunikÃ¡ciu sÃºiastok systÃ©mu zabezpeujÃº konektory. DefinujÃº interakciu medzi sÃºiastkami a jej pravidlÃ¡. Konektor mÃ´Å¾e spÃ¡ja 2 a viac sÃºiastok. V rÃ¡mci pravidiel definovanÃ½ch konektorom sÃº aj roly v komunikÃ¡cii, napr. definovanÃ© roly zdroj â prÃ­jemca. Konektor predstavuje aplikane nezÃ¡vislÃ½ mechanizmus spojenia. MÃ¡ zadefinovanÃ© svoje vlastnosti a rozhranie pre pouÅ¾itie a zabezpeuje komunikÃ¡ciu bez ohadu na aplikanÃ© urenie systÃ©mu. Toto umoÅ¾uje lepÅ¡iu modularitu systÃ©mu a alÅ¡iu nahraditenos samotnÃ©ho konektora (napr. lepÅ¡Ã­m, efektÃ­vnejÅ¡Ã­m a pod). Pre konektory existujÃº rÃ´zne implementÃ¡cie, ktorÃ© majÃº aj rÃ´zne vlastnosti, napr. oneskorenie pri komunikÃ¡cii a pod. Konektor ako sprostredkovate komunikÃ¡cie svojimi vlastnosami umoÅ¾uje rÃ´zne typy interakciÃ­:"
59,652,0.495,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 13.6. DiagramatickÃ¡ ilustrÃ¡cia aplikÃ¡cie mnoÅ¾iny elementÃ¡rnych transformÃ¡ciÃ­ F(ï¡,ï¢) k reÅ¥azcu ï§ ï½ pqqrrr za vzniku vÃ½slednÃ©ho reÅ¥azca ï¤ ï½ pqqrcs , ktorÃ½ reprezentuje jedno z moÅ¾nÃ½ch rieÅ¡enÃ­ Ãºlohy. Charakter aplikÃ¡cie âfunkcieâ F(ï¡,ï¢) k reÅ¥azcu ï§ mÃ¡ urÄitÃ© stochastickÃ© Ärty spoÄÃ­vajÃºce v tom, Å¾e vÃ½ber elementÃ¡rnej transformÃ¡cie z F(ï¡,ï¢) mÃ´Å¾e byÅ¥ v urÄitom malom rozsahu nÃ¡hodnÃ½ a taktieÅ¾ aj v tom, Å¾e aj aplikÃ¡cia vybranej elementÃ¡rnej transformÃ¡cie mÃ´Å¾e maÅ¥ obvykle dve alternatÃ­vne moÅ¾nosti, z ktorÃ½ch vyberÃ¡me obvykle prvÃº moÅ¾nosÅ¥."
190,48,0.495,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Tento problÃ©m je v kontexte outsourcingu eÅ¡te zloÅ¾itejÅ¡Ã­ ako v prÃ­pade vlastnÃ½ch zamestnancov. OdpadÃ¡ totiÅ¾ jeden z najvÃ¤ÄÅ¡Ã­ch motivaÄnÃ½ch faktorov, ktorÃ½ mÃ´Å¾e firma uplatniÅ¥, aby motivovala svojich zamestnancov. Iba veÄ¾mi nepriamo totiÅ¾ moÅ¾no ovplyvniÅ¥ finanÄnÃ© odmeÅovanie outsourcovanÃ½ch Ä¾udÃ­. Rozhodli sme sa teda vniesÅ¥ do projektu nielen outsourcovanÃ½ch pracovnÃ­kov, ale aj ich materskÃº firmu s tÃ½m, Å¾e boli vytvorenÃ© zmluvy, ktoMotivovaÅ¥ rÃ½ch sÃºÄasÅ¥ou boli platby za produkty a nie za Äas strÃ¡venÃ½ na ich vytvÃ¡ranÃ­. outsourcovanÃ½ch DodÃ¡vateÄ¾skÃ¡ firma teda zodpovedala za dodanie produktu v dohodnutom pracovnÃ­kov je termÃ­ne a nie za prenÃ¡jom Ä¾udÃ­ pre projekt. ZÃ¡roveÅ sme chceli zvÃ½Å¡iÅ¥ zodpovednosÅ¥ aj tÃ½m, Å¾e sme sa od zaÄiatku veÄ¾mi nÃ¡roÄnÃ©. snaÅ¾ili vytvoriÅ¥ atmosfÃ©ru jednÃ©ho veÄ¾kÃ©ho tÃ­mu a nie nejakÃ©ho dodÃ¡vateÄ¾/odberateÄ¾ vzÅ¥ahu. ZatiaÄ¾ ale nemÃ´Å¾em zhodnotiÅ¥ vÃ½sledky postupov, ktorÃ© sme zvolili, pretoÅ¾e projekt je eÅ¡te Äaleko od svojho konca. PoÄiatoÄnÃ¡ fÃ¡za nÃ¡behu vÅ¡ak prebehla veÄ¾mi dobre a myslÃ­m, Å¾e mÃ¡ Å¡ancu na ÃºspeÅ¡nÃ½ koniec."
111,23,0.495,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"to, ako zatriediÅ¥ karty do kategÃ³riÃ­, ktorÃ© ste im poskytli. KaÅ¾dÃ¡ technika je ideÃ¡lna na pouÅ¾itie v rÃ´znych podmienkach a vÃ½ber tej sprÃ¡vnej je nevyhnutnÃ½, ak chcete zÃ­skaÅ¥ Ãºdaje, ktorÃ© sÃº relevantnÃ© pre vÃ¡Å¡ zÃ¡mer. 3.1.1"
59,481,0.495,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"TÃ½mto sme dokÃ¡zali, Å¾e ïï¢ p ï ïp , t. j. rozÅ¡Ã­renÃ¡ teÃ³ria je nekonzistentnÃ¡. PravdivostnÃ¡ tabuÄ¾ka formÃºl z rozÅ¡Ã­renej teÃ³rie ïï¢ je znÃ¡zornenÃ¡ v Tab. 9.3. V tejto tabuÄ¾ke je âvysvietenÃ½châ pÃ¤Å¥ riadkov, ktorÃ© obsahujÃº novÃ© formuly z mnoÅ¾iny ï. Poznamenajme, Å¾e len tieto riadky sa podieÄ¾ajÃº na tvorbe alternatÃ­vnych ârevidovanÃ½châ teÃ³riÃ­ ïï¢ï¢i , pretoÅ¾e uÅ¾ v Ãºvode tejto podkapitoly sme postulovali, Å¾e novÃ© poznatky z mnoÅ¾iny ï sa pri revÃ­zii ponechÃ¡vajÃº, odstraÅujÃº sa len poznatky z pÃ´vodnej teÃ³rie ï."
393,43,0.495,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,PodmienenÃ© vykonÃ¡vanie Q poznÃ¡ vetvenie na zÃ¡klade vÃ½skytu urÄitÃ©ho podnetu podobne ako inÃ© programovacie jazyky. Podmienku oznaÄuje kÄ¾ÃºÄovÃ© slovo guard: (guard ((?pocujes âAhojâ :od Jaro) (!povedz âAhojâ :k Jaro) ...) ((?vidis vlakova_stanica :smer juh)
122,117,0.495,Modelovanie softvÃ©ru,"OperÃ¡cia SpecialOrder::confirm() prekonÃ¡va (angl. override) operÃ¡ciu Order::confirm(). ZachovÃ¡va podmienku, Å¾e sa nedÃ¡ potvrdiÅ¥ prÃ¡zdna objednÃ¡vka, ale umoÅ¾Åuje potvrdiÅ¥ objednÃ¡vku bez obmedzenia hodnoty: pre CantConfirmEmptyOrder: not self.itemâ>isEmpty() ââNeda sa potvrdit prazdna objednavka pre CantConfirmOrderWorthMoreThan1000euros: true ââSpecialna objednavka sa da potvrdit bez ohladu na jej hodnotu Je toto problÃ©m? Aby sme to posÃºdili, musÃ­me sa zamyslieÅ¥ z pohÄ¾adu klientskeho kÃ³du. Je znÃ¡me, Å¾e pri dedenÃ­ musÃ­ byÅ¥ dodrÅ¾anÃ½ Liskovej princÃ­p substitÃºcie (angl. Liskov substitution principle) [Lis87]: Ak pre kaÅ¾dÃ½ objekt o1 typu S jestvuje objekt o2 typu T takÃ½, Å¾e pre vÅ¡etky programy P definovanÃ© v zmysle T sprÃ¡vanie P je nezmenenÃ©, keÄ o1 nahradÃ­ o2 , potom je S podtypom T . Inak povedanÃ©, ak klientsky kÃ³d funguje korektne s objektom urÄitÃ©ho typu, musÃ­ fungovaÅ¥ korektne aj s objektom jeho podtypu. Korektne znamenÃ¡, Å¾e nezlyhÃ¡, a ani nespÃ´sobÃ­ to, Å¾e sa atribÃºty objektu zmenia tak, Å¾e danÃ½ objekt uÅ¾ nebude korektnÃ½. Predstavme si sluÄku, v ktorej budÃº potvrdzovanÃ© objednÃ¡vky: for (Order order : orders) if (calculatePrice(order) <= 100000) order.confirm(); VÄaka polymorfizmu, zoznam orders mÃ´Å¾e obsahovaÅ¥ aj inÅ¡tancie tried odvodenÃ½ch od triedy Order. Tento kÃ³d zbehne korektne aj pre inÅ¡tanciu triedy SpecialOrder. Ak mÃ¡ hodnotu vyÅ¡Å¡iu ako 100000, nepotvrdÃ­ ju, Äo je v poriadku, lebo takto je koncipovanÃ½ klientsky kÃ³d. InÅ¡tancia triedy SpecialOrder nebude Å¾iadnym spÃ´sobom naruÅ¡enÃ¡. VidÃ­me, Å¾e zoslabenie predpokladu nespÃ´sobuje problÃ©my, kÃ½m jeho zosilnenie Ã¡no. Ako je to s dÃ´sledkami? Ak by pre operÃ¡ciu SpecialOrder::confirm() bol zavedenÃ½ nasledujÃºci dÃ´sledok: pre OrderIsConfirmed: self.confirmed bolo by to zosilnenie implicitnÃ©ho dÃ´sledku operÃ¡cie Order::confirm(): pre OrderIsConfirmed: true"
76,233,0.495,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"4.1.4 Pre veliÄiny z Ãºlohy 2.5.1 urÄte ich strednÃ© hodnoty a variancie. Preverte vÃ½sledky vÃ½poÄtov tak, Å¾e budete postupovaÅ¥ dvomi spÃ´sobmi â jednak podÄ¾a definÃ­cie E( ), resp. E( ) (vyuÅ¾Ã­vajÃºc vÃ½sledky Ãºlohy 2.5.1) a jednak pouÅ¾itÃ­m vety 4.1.16. 4.1.5 UkÃ¡Å¾te, Å¾e pre nÃ¡hodnÃº veliÄinu z prÃ­kladu 2.1.6 strednÃ¡ hodnota E( ) neexistuje. 4.1.6 Pre niektorÃ© Ãºlohy z Ãºloh 2.2.1 aÅ¾ 2.2.12 urÄite E( ) a var( ), med( ) a mkr( ). 4.1.7 Nech ~ R(â , ), ~ ï(â , 0, ), ~ N( , ). NÃ¡jdite hodnoty parametrov , , , tak, aby E( ) = E( ) = E( ) = 0, a pritom aby var( ) = var( ) = var( ) = 1. Ãloha ilustruje zÃ¡kladnÃº skutoÄnosÅ¥, Å¾e strednÃ¡ hodnota a variancia zÄaleka neurÄujÃº (vo vÅ¡eobecnosti) rozdelenie nÃ¡hodnej veliÄiny. 4.1.8 Je danÃ© rozdelenie a nech = ( ). NÃ¡jdite E( ) pouÅ¾itÃ­m vety 4.1.16. Potom overte sprÃ¡vnosÅ¥ vÃ½sledku vÃ½poÄtom E( ) z definÃ­cie. a) Nech"
265,366,0.495,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"â¢ AgilnÃ© metÃ³dy â metÃ³dy, ktorÃ½ch cieÄ¾ je znÃ­Å¾enie rÃ©Å¾ie sÃºvisiacej s prehnanÃ½m plÃ¡novanÃ­m vÃ½voja softvÃ©ru vo veÄ¾kÃ½ch projektoch. PovaÅ¾ujÃº sa skÃ´r za Ä¾ahkÃ© metÃ³dy, nakoÄ¾ko sÃº charakterizovanÃ© krÃ¡tkym, iteratÃ­vnym vÃ½vojovÃ½m cyklom, samoorganizovanÃ½mi tÃ­mami, refaktoringom kÃ³du, testom riadenÃ½ vÃ½voj, zahrnutÃ­m zÃ¡kaznÃ­ka a dÃ´razom na stÃ¡le fungujÃºci softvÃ©r. Medzi agilnÃ© metÃ³dy patria metÃ³dy: rapÃ­dny vÃ½voj aplikÃ¡ciÃ­ (RAD), extrÃ©mne programovanie (XP), Scrum alebo funkciami riadenÃ½ vÃ½voj (FDD). Poznamenajme, Å¾e pri tvorbe softvÃ©ru sa takmer nikdy nevyuÅ¾Ã­vajÃº metÃ³dy vÃ½luÄne z jednej skupiny. MetÃ³dy sa dajÃº vzÃ¡jomne kombinovaÅ¥, i keÄ platÃ­, Å¾e vÃ¤ÄÅ¡inou jedna skupina metÃ³d predstavuje jeden ucelenÃ½ prÃ­stup k vÃ½voju softvÃ©ru."
135,212,0.494,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â komunikÃ¡cia, â synchronizÃ¡cia, â plÃ¡novanie, â reprezentÃ¡cia zÃ¡vislosti medzi Ãºdajmi. 3.2.8 Zhrnutie Hlavnou vÃ½hodou architektÃºry zaloÅ¾enej na riadenÃ­ tokom Ãºdajov je podpora paralelizmu. Vlastnosti tohto paralelizmu moÅ¾no zhrnÃº do niekokÃ½ch bodov:"
94,27,0.494,Sprievodca svetom vedeckÃ©ho publikovania,"1.4.2 Journal des sÃ§avans (Äasopis uÄencov) Journal des sÃ§avans (Äasopis uÄencov) zaÄal v ParÃ­Å¾i vydÃ¡vaÅ¥ prÃ¡vnik a spisovateÄ¾ Denis de Sallo pod pseudonymom Sieur dÊ¼HÃ©donville s podporou Jeana-Baptista Colberta, ministra financiÃ­, ktorÃ½ o dva roky neskÃ´r stÃ¡l aj pri zaloÅ¾enÃ­ francÃºzskej AcadÃ©mie royale des sciences (KrÃ¡Ä¾ovskej akadÃ©mie vied) (Potts 2011). Journal publikoval ÄlÃ¡nky z oblasti histÃ³rie, prÃ¡va, recenzie knÃ­h a nekrolÃ³gy znÃ¡mych vzdelancov, informoval o novÃ½ch objavoch z rÃ´znych vednÃ½ch odborov (âÄo stojÃ­ za to poznaÅ¥ z republiky listovâ) a prispieval k Å¡Ã­reniu karteziÃ¡nskej filozofie. PrvÃ© ÄÃ­slo Äasopisu malo dvanÃ¡sÅ¥ strÃ¡n a vyÅ¡lo 5. januÃ¡ra 1665. Äoskoro sa zaÄali objavovaÅ¥ aj pirÃ¡tske kÃ³pie v Amsterdame. Zhodou okolnostÃ­ prÃ¡ve im a vysokej kvalite holandskÃ©ho papiera vÄaÄia starÃ© ÄÃ­sla Journalu za to, Å¾e sa vÃ´bec zachovali. Journal vychÃ¡dzal kaÅ¾dÃ½ pondelok, neskÃ´r raz mesaÄne, potom dvakrÃ¡t roÄne. Z interdisciplinÃ¡rneho charakteru sa jeho zameranie v priebehu storoÄÃ­ posunulo do oblasti"
115,177,0.494,Algebra a diskrÃ©tna  matematika,"â 5.4., Eratosthenovo sito, 116 â 8.1., nÃ¡sobenie matÃ­c, 184 â 10.1., konÅ¡trukcia uzavretÃ©ho eulerovskÃ©ho Å¥ahu prehÄ¾adÃ¡vanÃ­m do hÄºbky, 240 â 10.2., konÅ¡trukcia otvorenÃ©ho eulerovskÃ©ho Å¥ahu prehÄ¾adÃ¡vanÃ­m do hÄºbky, 241 â 10.3., pre konÅ¡trukciu vÅ¡etkÃ½ch moÅ¾nÃ½ch hamiltonovskÃ½ch ciest, 248 â 11.1., Dijkstrov, 259 â 11.2., greedy, zafarbenie obyÄajnÃ©ho grafu, 267, greedy Quinova a McCluskeyho metÃ³da, 169, greedy konÅ¡trukcia zÃ¡tvorkovania pri nÃ¡sobenÃ­ matÃ­c, 186 â 12.1., prehÄ¾adÃ¡vanie binÃ¡rneho stromu, resp. priradenie novÃ©ho zÃ¡znamu, 282 â 12.2., Huffmanove kÃ³dovanie, 286-287 â 13.1., minimÃ¡lne ÄasovÃ© ohodnotenie v sieti, 302-304 â 13.2., maximÃ¡lne ÄasovÃ© ohodnotenie v sieti, 304-305 â 13.3., urÄenie maximÃ¡lneho toku v sieti, 305307 â 13.4., Primov, na minimÃ¡lnu kostru, 308-309 â 13.5., Kruskalov, na minimÃ¡lnu kostru, 309, â 13.6., prehÄ¾adÃ¡vanie do hÄºbky s rekurziou, 310-311 â 13.7., prehÄ¾adÃ¡vanie do hÄºbky pomocou zÃ¡sobnÃ­ka, 311-312 â 13.8., prehÄ¾adÃ¡vanie do hÄºbky s vÃ½pisom cesty od koreÅa, 313-314 â 13.9., prehÄ¾adÃ¡vanie do Å¡Ã­rky s radom, 319321 â Ford-Fulkersonov, 306-307 â polynomiÃ¡lny, 260, 284 â ârozdeÄ¾uj a panujâ, 108-113 â usporiadania so spÃ¡janÃ­m (merge sort), 111113 â binÃ¡rne prehÄ¾adÃ¡vanie, 108-109 algoritmus, zloÅ¾itosÅ¥, 100, 108-109, 112, 169, 184, 237, 259, 267, 284, 295, 309, 310, 319 alkÃ¡ny, 277-278 antisymetrickÃ¡ relÃ¡cia, 58 argument, 1-2, 66"
276,78,0.494,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"5. Na prepÃ­naÄoch vytvorte prÃ­sluÅ¡nÃ© VLAN siete podÄ¾a obrÃ¡zka. Linky medzi prepÃ­naÄmi a medzi S2 a R2 prepnite do trunk reÅ¾imu, ostatnÃ© porty prepÃ­naÄov priraÄte do prÃ­sluÅ¡nej VLAN. Nastavte prepÃ­naÄom IP adresy v sieti VLAN5, priÄom S1 mÃ¡ tretiu pouÅ¾iteÄ¾nÃº IP adresu a S2 mÃ¡ Å¡tvrtÃº. Na prepÃ­naÄoch nezabudnite nastaviÅ¥ predvolenÃº brÃ¡nu. 6. Nakonfigurujte smerovaÄom zodpovedajÃºce pomenovanie, heslÃ¡ do konzoly a privilegovanÃ©ho reÅ¾imu a nakonfigurujte SSH prÃ­stup na kaÅ¾dÃ½ smerovaÄ. Deaktivujte preklad domÃ©n a synchronizujte logovanie. Pri kaÅ¾dom prÃ­stupe na smerovaÄ zobrazte sprÃ¡vu âRestricted accessâ pomocou MOTD (Message Of The Day). 7. Na rozhraniach smerovaÄa R1 nakonfigurujte prvÃº pouÅ¾iteÄ¾nÃº IP adresu z prÃ­sluÅ¡nej siete. Nezabudnite rozhrania smerovaÄa aktivovaÅ¥. 8. âRouter-on-a-stickâ: Aktivujte rozhranie smerovaÄa R2. Nakonfigurujte mu 2 podrozhrania, priÄom ich priradÃ­te do rÃ´znych VLAN (podÄ¾a obrÃ¡zka) a nastavÃ­te im IP adresy (druhÃ¡ pouÅ¾iteÄ¾nÃ¡ IP z VLAN5 a prvÃ¡ z VLAN20). 9. Pomocou ping overte konektivitu medzi smerovaÄmi v rÃ¡mci VLAN5 a konektivitu medzi PC a smerovaÄom vo svojej VLAN sieti. Overte funkÄnosÅ¥ vzdialenÃ©ho prÃ­stupu z poÄÃ­taÄov na prepÃ­naÄe. 10. Viete preÄo nefunguje ping medzi poÄÃ­taÄmi? Skontrolujte obsah smerovacÃ­ch tabuliek na smerovaÄoch. 11. Na smerovaÄoch nakonfigurujte statickÃ© cesty do chÃ½bajÃºcich VLAN sietÃ­ cez IP adresu z VLAN5 susednÃ©ho smerovaÄa a lokÃ¡lne rozhranie patriace do VLAN5 (tzv. fully specified static route). Pomocou ping potom overte konektivitu medzi poÄÃ­taÄmi. DoplnkovÃ© Ãºlohy 12. Prepojte"
59,300,0.494,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"6.2 MatematickÃ¡ formulÃ¡cia holografickej reprezentÃ¡cie CieÄ¾om tejto kapitoly je prezentÃ¡cia zÃ¡kladnÃ½ch vlastnostÃ­ holografickej reprezentÃ¡cie, ktorÃ¡ bola vypracovanÃ¡ A. Plateom [8-10]. ZÃ¡kladnÃ½ pojem je konceptuÃ¡lny vektor, ktorÃ½ je reprezentovanÃ½ n-rozmernÃ½m vektorom a ï Rn ï a ï½ ï¨ a0 ,a2 ,...,anï­1 ï© (6.1) priÄom jeho komponenty sÃº nÃ¡hodnÃ© ÄÃ­sla so Å¡tandardnÃ½m normÃ¡lnym rozdelenÃ­m ai ï½ N ï¨ 0,1 n ï© ï¢i ïï»0,1,...,n ï­ 1ï½ (6.2) kde N(.0,1/n) je nÃ¡hodnÃ© ÄÃ­slo so stredom v 0 a so strednou odchÃ½lkou 1/n. Nad konceptuÃ¡lnymi vektormi definujeme binÃ¡rnu operÃ¡ciu âkonvolÃºciuâ, ktorÃ¡ dvojici vektorov priradÃ­ tretÃ­ vektor, ï : Rn ï´ Rn ï® Rn , alebo (6.3) c ï½ a ïb ZloÅ¾ky vÃ½slednÃ©ho vektora c ï½ ï¨ c0 ,c1 ,...,cnï­1 ï© sÃº urÄenÃ© vzÅ¥ahom n ï­1"
184,430,0.493,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"0 â¤ d < 1 je tzv. âdamping factorâ najÄastejÅ¡ie nastavenÃ½ na 0,85 viÄ (Page, 1998b), Ti je strÃ¡nka ktorÃ¡ ukazuje na strÃ¡nku A, PR (Ti ) je PageRank tejto strÃ¡nky a C (Ti ) je poÄet prepojenÃ­ odchÃ¡dzajÃºcich zo strÃ¡nky Ti . Tento vÃ½poÄet opakujeme (iterujeme) dovtedy, kÃ½m hodnota PR ( A ) nezaÄne konvergovaÅ¥ k limitnej hodnote. Je potrebnÃ© si uvedomiÅ¥, Å¾e page rank webovÃ½ch strÃ¡nok vlastne tvoria rozdelenie pravdepodobnosti a teda suma vÅ¡etkÃ½ch page rank hodnÃ´t musÃ­ byÅ¥ 1. Na to aby sme dosiahli rozdelenie pravdepodobnosti musÃ­me eÅ¡te zÃ­skanÃ© hodnoty vydeliÅ¥ (normalizovaÅ¥) sumou vÅ¡etkÃ½ch page rank hodnÃ´t. InicializaÄnÃ© hodnoty PR (Ti ) je moÅ¾nÃ© nastaviÅ¥ na Ä¾ubovoÄ¾nÃ© hodnoty z dÃ´vodu konvergencie viÄ (Golub, 1996) alebo (Page, 1998ab) sa vÅ¾dy dopracujeme k tomu istÃ©mu rieÅ¡eniu (menÃ­ sa len poÄet iterÃ¡ciÃ­). PrÃ­klad 6-1: VypoÄÃ­tajme page rank jednotlivÃ½ch stÃ¡nok z obrÃ¡zku 6-2 ak damping d = 0,85 a prvotnÃ© ranky strÃ¡nok nasledovnÃ© factor"
66,73,0.493,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"V rÃ¡mci vÃ½sledku SQL dopytu je vidieÅ¥ id tÃ­mu, za ktorÃ½ odohrali hrÃ¡Äi sezÃ³nu, ale nie je zrejme akÃ½ je nÃ¡zov tÃ­mu. Id tÃ­mu nÃ¡m slÃºÅ¾i na jednoznaÄnÃ© identifikovanie zÃ¡znamu v tabuÄ¾ke teams a z pohÄ¾adu koncovÃ©ho pouÅ¾Ã­vateÄ¾a nepredstavuje pridanÃº informÃ¡ciu. Aby sa vo vÃ½sledku zobrazil nÃ¡zov tÃ­mu, za ktorÃ½ danÃ½ hrÃ¡Ä nastÃºpil v sezÃ³ne je potrebnÃ© prepojiÅ¥ okrem tabuliek players, player_seasons aj tabuÄ¾ky player_seasons a teams. PretoÅ¾e v predchÃ¡dzajÃºcom dopyte mÃ¡me uÅ¾ prepojenÃ© tabuÄ¾ky players a player_seasons, tak nÃ¡m zostÃ¡va vÃ½sledok tohto prepojenia spojiÅ¥ s tabuÄ¾kou teams. VÃ½slednÃ½ SQL dopyt je:"
122,45,0.493,Modelovanie softvÃ©ru,"3.7 CRUD prÃ­pad pouÅ¾itia V e-obchode je potrebnÃ© aj evidovaÅ¥ vÃ½robok. S tÃ½m sÃº spojenÃ© operÃ¡cie vytvorenia, zobrazenia, Ãºpravy a vyradenia vÃ½robku, t. j. typickÃ© operÃ¡cie nad Ãºdajovou entitou znÃ¡me pod skratkou CRUD: createâreadâupdateâdelete. Pre kaÅ¾dÃº z nich by mohol vzniknÃºÅ¥ samostatnÃ½ prÃ­pad pouÅ¾itia, ale to by len zahlcovalo model prÃ­padov pouÅ¾itia nie prÃ­liÅ¡ zaujÃ­mavÃ½mi prÃ­padmi pouÅ¾itia. Jacobson a Ng navrhujÃº zdruÅ¾iÅ¥ tieto operÃ¡cie do jednÃ©ho prÃ­padu pouÅ¾itia, oznaÄovanÃ©ho ako CRUD prÃ­pad pouÅ¾itia, ktorÃ½ potom bude obsahovaÅ¥ zÃ¡kladnÃ½ tok pre kaÅ¾dÃº z nich [JN04]. V naÅ¡om systÃ©me by to mohlo vyzeraÅ¥ takto s tÃ½m, Å¾e namiesto CRUD vÃ½robok prÃ­pad pouÅ¾itia pomenujeme Spravuj vÃ½robok: PrÃ­pad pouÅ¾itia: Spravuj vÃ½robok ZÃ¡kladnÃ½ tok: Vytvor vÃ½robok 1. ObchodnÃ­k zvolÃ­ vytvorenie vÃ½robku. 2. SystÃ©m vyÅ¾iada Ãºdaje o vÃ½robku. 3. ObchodnÃ­k zadÃ¡ nÃ¡zov, typ a obrÃ¡zok vÃ½robku. 4. SystÃ©m prispÃ´sobÃ­ veÄ¾kosÅ¥ obrÃ¡zku vÃ½robku Å¡tandardnej veÄ¾kosti. 5. ObchodnÃ­k zaradÃ­ vÃ½robok do kategÃ³rie."
240,462,0.493,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"budÃº uvedenÃ© ako vÃ½stupnÃ© argumenty (aby sme do nich mohli zapisovaÅ¥) ale budeme ich pouÅ¾Ã­vaÅ¥ aj ako vstupnÃ© argumenty (budeme z nich hodnoty aj ÄÃ­taÅ¥). V prÃ­pade, Å¾e by ÄÃ­slo, ktorÃ© do poÄ¾a vkladÃ¡me, malo presiahnuÅ¥ dÄºÅ¾ku poÄ¾a (n+1 > kapacita), tak pole zvÃ¤ÄÅ¡Ã­me funkciou realloc(). V tomto rieÅ¡enÃ­ demonÅ¡trujeme zvÃ¤ÄÅ¡enie poÄ¾a o konÅ¡tantnÃ½ prÃ­rastok (o 10 prvkov) lebo predpokladÃ¡me, Å¾e funkcia sa bude v programe volaÅ¥ len sporadicky. Potom ako funkcia vloz() zaruÄÃ­, Å¾e pole mÃ¡ dostatoÄnÃº kapacitu na pridanie ÄalÅ¡ieho prvku je potrebnÃ© nÃ¡jsÅ¥ umiestnenie novÃ©ho prvku vzhÄ¾adom na usporiadanie prvkov v poli. Ak sprÃ¡vne miesto nÃ¡jdeme, je moÅ¾nÃ©, Å¾e prvky, ktorÃ© sa nachÃ¡dzajÃº za tÃ½mto miestom budeme musieÅ¥ posunÃºÅ¥ na nasledujÃºce miesto v poli, ÄÃ­m vytvorÃ­me miesto pre novÃ½ prvok, do ktorÃ©ho priradÃ­me novÃº hodnotu. PosÃºvanie prvkov o jedno miesto Äalej mÃ´Å¾eme realizovaÅ¥ v cykle sÃºÄasne s hÄ¾adanÃ­m sprÃ¡vneho miesta pre pridÃ¡vanÃ½ prvok tak, Å¾e prvky poÄ¾a budeme prechÃ¡dzaÅ¥ (i) od konca (poslednÃ©ho prvku) smerom na zaÄiatok (prvÃ½ prvok): ak hodnota i-teho prvku je menÅ¡ia ako pridÃ¡vanÃ¡ hodnota (cislo), tak vieme Å¾e potom ako i-tÃ½ prvok presunieme na i+1 miesto (a[i+1] = a[i]), tak na uvoÄ¾nenÃ© i-te miesto vloÅ¾Ã­me hodnotu cislo, inak pokraÄujeme Äalej pre prvok i-1 (ktorÃ½ presunieme na i-te miesto atÄ). VÃ½slednÃ¡ implementÃ¡cia funkcie vloz() podÄ¾a uvedenÃ©ho opisu:"
115,112,0.493,Algebra a diskrÃ©tna  matematika,"2.2 ENUMERÃCIA PRVKOV V KONEÄNÃCH MNOÅ½INÃCH V rÃ´znych aplikÃ¡ciÃ¡ch teÃ³rie mnoÅ¾Ã­n vystupuje do popredia problÃ©m enumerÃ¡cie prvkov danej koneÄnej mnoÅ¾iny, ÄiÅ¾e akÃ¡ je mohutnosÅ¥ danej mnoÅ¾iny. Poznamenajme, Å¾e v tejto kapitole sa budeme zaoberaÅ¥ len koneÄnÃ½mi mnoÅ¾inami. Nech A a B sÃº disjunktnÃ© mnoÅ¾iny (ich prienik je prÃ¡zdna mnoÅ¾ina, A â© B = â ), potom mohutnosÅ¥ ich zjednotenia je urÄenÃ¡ sÃºÄtom mohutnostÃ­ jednotlivÃ½ch mnoÅ¾Ã­n Aâª B = A + B (2.14a) Tento vÃ½sledok mÃ´Å¾e byÅ¥ jednoducho zovÅ¡eobecnenÃ½ pomocou matematickej indukcie na mohutnosÅ¥ zjednotenia n vzÃ¡jomne disjunktnÃ½ch mnoÅ¾Ã­n A1 âª A2 âª ... âª An = A1 + A2 + ... + An (2.14b) ZovÅ¡eobecnenie formuly (2.14a) pre mnoÅ¾iny, ktorÃ© majÃº neprÃ¡zdny prienik (nedisjunktnÃ© mnoÅ¾iny) je Å¡pecifikovanÃ© vetou VETA 2.1."
59,418,0.492,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Aï¢ ï½ ï¨ï» p, p ï q,q ï rï½ ,r ï q ï© , priÄom v zmysle definÃ­cie 8.2 argument A je konzervatÃ­vnejÅ¡Ã­ ako argument AÂ´. PrÃ­klad 8.3. Podmienka 2 z definÃ­cie 8.1 nÃ¡m zabezpeÄuje, Å¾e zloÅ¾enie podpory ï je dostaÄujÃºce na to, aby sme dostali poÅ¾adovanÃ½ dÃ´sledok ï¡. Sledujme jednoduchÃ½ ilustraÄnÃ½ prÃ­klad nazÃ½vanÃ½ v klasickej logike âentymÃ©maâ, kde urÄitÃ¡ premisa nie je uvedenÃ¡ explicitne, pretoÅ¾e je oÄividnÃ¡. Nech MarikovÃ¡ nemÃ´Å¾e byÅ¥ hosÅ¥ujÃºce mesto zimnej olympiÃ¡dy, pretoÅ¾e je malÃ© mesto, mÃ´Å¾e byÅ¥ hosÅ¥ujÃºce mesto olympiÃ¡dy len vtedy, ak je veÄ¾kÃ½m mestom. Formalizujme tieto poznatky mar ï vm ï½ Â´MarikovÃ¡ hosÅ¥uje olympiÃ¡duÂ´ïÂ´MarikovÃ¡ je veÄ¾kÃ© mestoÂ´ mm ï½ Â´MarikovÃ¡ je malÃ© mestoÂ´"
138,12,0.492,LATEXovnÃ­k - Å truktÃºra zdrojovÃ©ho sÃºboru,"â OddeÄ¾ovaÄe, medzery, riadkovÃ© a strÃ¡nkovÃ© zlomy âTextâ ââTextââ ââTextââ ""Text"" Ãvodzovky âTextâ âTextâ âTextâ âTextâ SlovenskÃ© a ÄeskÃ© Ãºvodzovky âTextÃ¿. \uv{Text} - -- --- $-$ PomlÄky - â â a â (mÃ­nus). ( ) [ ] \{ \} ZÃ¡tvorky ( ) [ ] { }. MenÅ¡Ã­ < a vÃ¤ÄÅ¡Ã­ > (nie v matematickom mÃ³de). \textless \textgreater $\! \: \;$ \, \â£ ZÃ¡pornÃ¡ (\!) a kladnÃ© medzery rÃ´znych Å¡iriek. \enspace \quad \qquad Å irÅ¡ie kladnÃ© medzery. \smallskip \medskip \bigskip VertikÃ¡lne medzery od najmenÅ¡ej po najvÃ¤ÄÅ¡iu. \\, resp. \newline Skok na novÃ½ riadok (\\* zakÃ¡Å¾e strÃ¡nkovÃ½ zlom). \pagebreak, resp. \newpage Skok na novÃº stranu. \noindent Odstavec zaÄne od zaÄiatku riadku bez odrÃ¡Å¾ky. \indent Odstavec zaÄne s odrÃ¡Å¾kou veÄ¾kosti \parindent. NastavÃ­ riadkovanie na hodnotu n (pouÅ¾itie v preambule). \linespread{n} \underline{text} PoÄiarknutÃ½ text (text). \today VytlaÄÃ­ systÃ©movÃ½ dÃ¡tum poÄÃ­taÄa (30. Äervna 2024). NezlomiteÄ¾nÃ¡ medzera (riadok sa tu nezlomÃ­), napr. v~lete. Indikuje, Å¾e bodka konÄÃ­ vetu a sÃ¡dzajÃº sa Å¡irÅ¡ie medzery. \hspace{l } HorizontÃ¡lna medzera dÄºÅ¾ky l napr. \hspace{2cm}. \vspace{l } VertikÃ¡lna medzera dÄºÅ¾ky l, napr. \vspace{.5\baselineskip}. \rule{d }{v } Äiara s dÄºÅ¾kou d a vÃ½Å¡kou v, napr. \rule{5cm}{2mm}. \hrule VoodorovnÃ¡ Äiara cez celÃº Å¡Ã­rku strany. \textnormal{text} NastavÃ­ font dokumentu, rovnako aj {\normalfont text}. \textcircled{s} NakreslÃ­ symbol s v krÃºÅ¾ku, napr. \textcircled{=} dÃ¡va â. Medzery \hspace{l } a \vspace{l } mÃ´Å¾u byÅ¥ aj zÃ¡pornÃ©, napr. \hspace{-0.5em}."
190,364,0.492,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"nedostatoÄnÃ¡ metodolÃ³gia v projekte, vÃ½voj nepotrebnÃ½ch a zlÃ½ch softvÃ©rovÃ½ch funkciÃ­, nedostatoÄnÃ© vyuÅ¾Ã­vanie zdrojov a zabezpeÄenie maximÃ¡lneho vÃ½konu tÃ­mu, zavedenie novej technolÃ³gie, pouÅ¾itie nesprÃ¡vnych nÃ¡strojov, nedostatoÄnÃ© zohÄ¾adnenie analÃ½zy a nÃ¡vrhu softvÃ©ru vo fÃ¡ze implementÃ¡cie."
115,141,0.492,Algebra a diskrÃ©tna  matematika,"Pre danÃº mnoÅ¾inu A potenÄnÃ¡ mnoÅ¾ina P(A) obsahuje ako prvky vÅ¡etky moÅ¾nÃ© podmnoÅ¾iny mnoÅ¾iny A. Kardinalita potenÄnej mnoÅ¾iny je urÄenÃ¡ jednoduchou formulou P ( A) = 2 . Pre dve mnoÅ¾iny X a Y karteziÃ¡nsky sÃºÄin X Ã Y je mnoÅ¾ina, ktorÃ¡ obsahuje vÅ¡etky moÅ¾nÃ© usporiadanÃ© dvojice (x,y) , pre x â X a y â Y . VÃ½znam karteziÃ¡nskeho sÃºÄinu spoÄÃ­va v tom, Å¾e pomocou vhodnÃ½ch mnoÅ¾Ã­n A1, A2, ..., An mÃ´Å¾eme vytvÃ¡raÅ¥ sÃºÄiny A1 Ã A2 Ã ... Ã An , ktorÃ© majÃº nÃ¡zornÃº geometrickÃº interpretÃ¡ciu pomocou rÃ´znych telies. Tak naprÃ­klad nech A je ÃºseÄka a B je kruÅ¾nica, potom A Ã B je plÃ¡Å¡Å¥ valca (pozri obr. 2.9)."
130,7,0.492,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Diel 2: VybranÃ© tÃ©my programovÃ½ch a informaÄnÃ½ch systÃ©mov Do druhej Äasti zaraÄujeme pÃ¤Å¥ Å¡tÃºdiÃ­, ktorÃ© sa venujÃº vybranÃ½m otvorenÃ½m vedeckÃ½m problÃ©mom, tÃ½kajÃºcim sa programovÃ½ch a informaÄnÃ½ch systÃ©mov. Ide o oblasti, v ktorÃ½ch prebieha veÄ¾mi intenzÃ­vny vÃ½voj. ProgramovÃ© systÃ©my sa stÃ¡vajÃº systÃ©mami, pÃ´sobiacimi v Äoraz rÃ´znorodejÅ¡om prostredÃ­, vrÃ¡tane internetu. StÃ¡vajÃº sa sÃºÄasÅ¥ou Äoraz komplexnejÅ¡Ã­ch systÃ©mov â na jednej strane rozsiahlych informaÄnÃ½ch systÃ©mov, na druhej strane systÃ©mov, spolu urÄenÃ½ch technickou platformou, ktorou uÅ¾ dÃ¡vno nie je len poÄÃ­taÄ v klasickom slova zmysle, ale aj najrÃ´znejÅ¡ie vnorenÃ© systÃ©my, (tele-)komunikaÄnÃ© systÃ©my, atÄ."
59,32,0.492,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Ak tieto elementÃ¡rne logickÃ© brÃ¡ny prepojÃ­me do funkÄnÃ©ho celku nazÃ½vanÃ©ho neurÃ³novÃ¡ sieÅ¥ tak, aby boli âimplementovanÃ©â boolovskÃ© funkcie pre jednotlivÃ© komponenty vÃ½slednÃ©ho sÃºÄtu ï¢1ï¢2, potom zÃ­skame logickÃ½ obvod pre sÃºÄet dvoch 1-bitovÃ½ch ÄÃ­sel"
94,393,0.492,Sprievodca svetom vedeckÃ©ho publikovania,"? â nÃ¡hrada za Ä¾ubovoÄ¾nÃ½ znak alebo viac znakov na konkrÃ©tnom mieste slova. VyuÅ¾iteÄ¾nÃ½ je naprÃ­klad pri rozdielnom pravopise britskej a americkej angliÄtiny, napr. col?r vyhÄ¾adÃ¡ termÃ­n color aj colour."
196,68,0.492,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"plÃ¡novanÃ©ho formÃ¡tovania? Uvedâte, ako vyrieÅ¡itâ potrebu rozsiahlejÅ¡ieho textu pre testovanie plÃ¡novanÃ©ho formÃ¡tovania. PrvoplÃ¡novou moÅ¾nostâou je pouÅ¾itâ Ctrl+C a Ctrl+V na text skopÃ­rovanÃ½ z inÃ©ho dokumentu a prÃ­padne opakovane. InteligentnejÅ¡Ã­m rieÅ¡enÃ­m je pouÅ¾itâ funkcionalitu LATEXu a to generovanie fiktÃ­vneho textu. Prvou alternatÃ­vou je pouÅ¾itie balÃ­ka lipsum [20] konÅ¡trukciou \usepackage{lipsum} v preambule a vyvolanÃ­m funkcionality v tele dokumentu prÃ­kazom \lipsum[1-3], kde v hranatÃ½ch zÃ¡tvorkÃ¡ch je uvedenÃ½ rozsah odsekov fiktÃ­vneho textu, ktorÃ© budÃº zobrazenÃ©. V tomto prÃ­pade konkrÃ©tne prvÃ½ aÅ¾ tretÃ­ odsek. KonÅ¡trukcia \lipsum[7-7] zobrazÃ­ jedinÃ½ a to siedmy odsek. PrÃ­kaz \section{} cÌlenÃ­ dokument triedy cÌlÃ¡nok (article) na cÌasti (sekcie). Parametrom prÃ­kazu je nÃ¡zov sekcie."
369,294,0.492,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Na zabezpÄenie faktoringu sa faktoringovÃ© spoloÄnosti zdruÅ¾ujÃº do faktoringovÃ½ch sietÃ­54. FaktoringovÃ¡ spoloÄnosÅ¥ v krajine exportÃ©ra spolupracuje s faktoringovou spoloÄnosÅ¥ou v krajine importÃ©ra, ktorÃ¡ lepÅ¡ie poznÃ¡ ekonomickÃº situÃ¡ciu importÃ©ra a v prÃ­pade potreby aj prÃ¡vne postupy vymÃ¡hania pohÄ¾adÃ¡vok. Za tÃºto spoluprÃ¡cu si faktoringovÃ¡ spoloÄnosÅ¥ v krajine importÃ©ra ÃºÄtuje poplatok z kaÅ¾dej pohÄ¾adÃ¡vky. ZÃ¡kladnÃ½ model faktoringu poskytuje obr. 4.38. FaktoringovÃ¡ spoloÄnosÅ¥, po potvrdenÃ­ ruÄenia zahraniÄnou faktoringovou spoloÄnosÅ¥ou za importÃ©ra, uzatvÃ¡ra s exportÃ©rom faktoringovÃº zmluvu na odkupovanie faktÃºr pre obchodovanie exportÃ©ra s danÃ½m importÃ©rom. TretÃ­m ÃºÄastnÃ­kom zmluvy je zahraniÄnÃ¡ faktoringovÃ¡ spoloÄnosÅ¥, skrÃ¡tene faktor (pri tuzemskom faktoringu sa nevyskytuje). FaktoringovÃ¡ zmluva okrem inÃ©ho obsahuje typ faktoringu (exportnÃ½/importnÃ½/tuzemskÃ½) a jeho podtyp (ruÄenie a/alebo prefinancovanie), menu obchodu, spracovateÄ¾skÃ½ poplatok v percentÃ¡ch z vÃ½Å¡ky faktÃºry a v prÃ­pade prefinancovania tieÅ¾ ÃºrokovÃº sadzbu z prefinancovania. PredÃ¡vajÃºci postupuje faktoringovej spoloÄnosti balÃ­k faktÃºr (tzv. postÃºpenie faktÃºr), ktorÃ½ obsahuje jednotlivÃ© postÃºpenÃ© faktÃºry. PostÃºpenie faktÃºr sa viaÅ¾e na uzavretÃº zmluvu o faktoringu. Z hÄ¾adiska Å¡pecializovanÃ½ch finanÄnÃ½ch vzorov predstavuje postÃºpenie faktÃºr aplikÃ¡ciu vzoru NÃ¡rokovanie zÃ¡vÃ¤zku (obr. 3.9). V prÃ­pade, Å¾e uzavretÃ¡ zmluva zahÅÅa aj prefinancovanie, faktoringovÃ¡ spoloÄnosÅ¥ do 24 hodÃ­n odoÅ¡le na ÃºÄet predÃ¡vajÃºceho sumu peÅazÃ­, ktorÃ¡ sa vypoÄÃ­ta ako dohodnutÃ© percento v zmluve o faktoringu znÃ­Å¾enÃ© o spracovateÄ¾skÃ½ poplatok za kaÅ¾dÃº postÃºpenÃº faktÃºru. Po obdrÅ¾anÃ­ peÅazÃ­ od kupujÃºceho (prostrednÃ­ctvom zahraniÄnej faktoringovej spoloÄnosti), faktoringovÃ¡ spoloÄnosÅ¥ uhradÃ­ doplatok za kaÅ¾dÃº faktÃºru. Z dÃ´vodu, Å¾e pri faktoringu len zriedka dochÃ¡dza k neuhradeniu faktÃºry, resp. ÄiastoÄnej Ãºhrade faktÃºry, sme v modeli nepouÅ¾ili vzor Plnenie zÃ¡vÃ¤zku. Raz mesaÄne vystavuje faktoringovÃ¡ spoloÄnosÅ¥ dodÃ¡vateÄ¾ovi zÃºÄtovaciu faktÃºru za vÅ¡etky existujÃºce faktoringovÃ© zmluvy v rovnakej mene: poloÅ¾ka faktÃºry obsahuje napoÄÃ­tanÃ½ Ãºrok za jednu faktoringovÃº zmluvu. ZÃºÄtovacia faktÃºra predstavuje opÃ¤Å¥ aplikÃ¡ciu vzoru NÃ¡rokovanie zÃ¡vÃ¤zku, presnejÅ¡ie opakujÃºci sa nÃ¡rok. Rozdielom oproti postÃºpeniu faktÃºr je, Å¾e sÃº vymenenÃ© strany zÃ¡vÃ¤zku: zÃºÄtovaciu faktÃºru na rozdiel od postÃºpenia faktÃºr vystavuje faktoringovÃ¡ spoloÄnosÅ¥. V modeli na obr. 4.38 sme vynechali zÃºÄtovacie faktÃºry posielanÃ© vzÃ¡jomne medzi faktoringovÃ½mi spoloÄnosÅ¥ami, ktorÃ© prenechÃ¡vame ako Ãºlohu na cviÄenia. ZÃºÄtovacia faktÃºra medzi faktoringovÃ½mi spoloÄnosÅ¥ami obsahuje sÃºÄet poplatkov za postÃºpenÃ© faktÃºry vÅ¡etkÃ½ch predÃ¡vajÃºcich v danej mene s vykonanÃ­m vzÃ¡jomnÃ©ho zÃ¡poÄtu exportnÃ©ho a importnÃ©ho faktoringu."
41,22,0.492,InformaÄnÃ© vzdelÃ¡vanie,"Å¡kodiÅ¥!). Podmienky pouÅ¾Ã­vania open-source zvyÄajne definuje âvÅ¡eobecnÃ¡ verejnÃ¡ licenciaâ (General Public Licence), ktorÃ¡ slÃºÅ¾i ako licenÄnÃ¡ zmluva na softvÃ©r (SLA â v tomto prÃ­pade Software Licence Agreement) pre mnoho programov s otvorenÃ½m kÃ³dom. VeÄ¾a Ä¾udÃ­ uprednostÅuje open-source pred uzavretÃ½mi programami. ProgramÃ¡tori spravidla nemÃ´Å¾u ÃºÄtovaÅ¥ peniaze za softvÃ©r s otvorenÃ½m zdrojovÃ½m kÃ³dom, ktorÃ½ vytvÃ¡rajÃº, alebo ku ktorÃ©mu prispievajÃº. Preto mnoho softvÃ©rovÃ½ch programÃ¡torov s open-source spoplatÅuje softvÃ©rovÃ© sluÅ¾iby a podporu skÃ´r ako za samotnÃ½ softvÃ©r. Ich softvÃ©r tak zostÃ¡va bezplatnÃ½ a zarÃ¡bajÃº peniaze tÃ½m, Å¾e pomÃ¡hajÃº inÃ½m s jeho inÅ¡talÃ¡ciou, pouÅ¾Ã­vanÃ­m a rieÅ¡enÃ­m problÃ©mov. VÃ½hody open-source teda mÃ´Å¾eme zhodnotiÅ¥ nasledovne: âª kÃ³d mÃ´Å¾e byÅ¥ znÃ¡my a upravenÃ½ tak, aby rieÅ¡il problÃ©my s nÃ­m spojenÃ©, alebo ho moÅ¾no prispÃ´sobiÅ¥ konkrÃ©tnym potrebÃ¡m, âª kÃ³d zostÃ¡va v stave neustÃ¡leho zlepÅ¡ovania vÄaka zÃ¡sahom vÃ½vojÃ¡rov, revÃ­ziÃ¡m a novÃ½m nÃ¡padom, âª Ãºpravy kÃ³du je moÅ¾nÃ© Ä¾ubovoÄ¾ne redistribuovaÅ¥, âª obmedzuje predÃ¡torskÃ© sprÃ¡vanie pri presadzovanÃ­ softvÃ©ru, monopolu a zdraÅ¾ovaniu, âª pouÅ¾itÃ­m sa mÃ´Å¾u dosiahnuÅ¥ vyÅ¡Å¡ie Å¡tandardy kvality, âª open-source kÃ³d umoÅ¾Åuje kontinuitu projektov, a to aj po zmene programÃ¡torov alebo pÃ´vodnÃ½ch rieÅ¡iteÄ¾ov, âª umoÅ¾Åuje spoloÄnostiam a vÃ½vojÃ¡rom zaviesÅ¥ urÄitÃ© obmedzenia pouÅ¾Ã­vania, a tak chrÃ¡niÅ¥ integritu kÃ³du. POZNÃMKA: PoslednÃ© dva body v zozname mÃ´Å¾u Ä¾ahko spÃ´sobiÅ¥ protichodnÃ© ÃºÄinky. SpoloÄnosÅ¥, alebo zdruÅ¾enie (aj na Slovensku mÃ¡me takÃ©...) na prvÃ½ pohÄ¾ad bojujÃº za pouÅ¾Ã­vanie open-source pri rieÅ¡enÃ­ informatickÃ½ch systÃ©mov. Ak sa uÅ¾ vÅ¡ak âubytujÃºâ v danom systÃ©me a niekto by ich chcel vytlaÄiÅ¥, staÄÃ­ aplikovaÅ¥ licenÄnÃ© obmedzenia, a eÅ¡te lepÅ¡ie vÅ¡etky zmeny vydÃ¡vaÅ¥ na nevyhnutnÃ© servisnÃ© Ãºkony, a to uÅ¾ predsa patrÃ­ pod kategÃ³riu rieÅ¡enia problÃ©mov."
59,441,0.492,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"TÃ½mto jednoduchÃ½m postupom mÃ´Å¾eme pomocou techniky sÃ©mantickÃ½ch tabiel zostrojiÅ¥ dÃ´sledok ï¡ pre zvolenÃº podporu ï. VyÅ¡Å¡ie Å¡pecifikovanÃ¡ dvojkrokovÃ¡ procedÃºra zabezpeÄuje aj platnosÅ¥ podmienky minimÃ¡lnosti podpory ï vzhÄ¾adom k dÃ´sledku ï¡. To znamenÃ¡, Å¾e metÃ³da sÃ©mantickÃ½ch tabiel nÃ¡m poskytuje jednoduchÃº dvojkrokovÃº procedÃºru konÅ¡trukcie argumentov ï¨ ï ,ï¡ ï© a teda aj mnoÅ¾iny ï, pomocou ktorej mÃ´Å¾eme pristÃºpiÅ¥ ku konÅ¡trukcii stromu argumentÃ¡ciÃ­, Äo chÃ¡peme, ako hlavnÃ½ cieÄ¾ tejto kapitoly. TabuÄ¾ka 8.4. SchÃ©my usudzovania jednotlivÃ½ch argumentov A0-4 z prÃ­kladu 8.7 argument A0"
76,172,0.492,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"RieÅ¡enie. V tejto situÃ¡cii je Ä¾ahkÃ© vidieÅ¥ ( ) ako zobrazenie, keÄ ï definujeme ako vÅ¡etky usporiadanÃ© pÃ¤tice nÃºl a jednotiek. Ak napr. ï· = (0, 1, 0, 1, 1), hodnotou vektora ( ) je dvojica (1, 3), pretoÅ¾e (ï·) = 1 a (ï·) = 3. Ak ï· = (1, 0, 1, 1, 1), hodnotou vektora ( ) je dvojica (2, 4), pretoÅ¾e (ï·) = 2 a (ï·) = 4. Priestor ï mÃ¡ zrejme 32 ( = ) bodov."
393,196,0.491,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"kde docsj je mnoÅ¾ina dokumentov, ktorÃ© pouÅ¾Ã­vateÄ¾ ohodnotil znÃ¡mkou j, docs je mnoÅ¾ina vÅ¡etkÃ½ch dokumentov, ktorÃ© pouÅ¾Ã­vateÄ¾ hodnotil, n je celkovÃ½ poÄet slov v kolekcii docsj, ni je poÄet vÃ½skytov slova ai v kolekcii docsj, a vocabulary je kolekcia vÅ¡etkÃ½ch rÃ´znych slov v docs. Proces vytvorenia potrebnÃ½ch Å¡truktÃºr pre naivnÃº Bayesovu analÃ½zu vyhodnotenÃ­m textovÃ©ho obsahu kaÅ¾dÃ©ho objektu, pre ktorÃ½ pouÅ¾Ã­vateÄ¾ hlasoval, nazÃ½vame procesom trÃ©novania. Jeho vÃ½stupom je model pouÅ¾Ã­vateÄ¾a, ktorÃ½ charakterizuje jeho sprÃ¡vanie pri hlasovanÃ­. V druhom kroku vypoÄÃ­tame pravdepodobnosti, s ktorÃ½mi novÃ½ dokument, pre ktorÃ½ pouÅ¾Ã­vateÄ¾ eÅ¡te nehlasoval, bude patriÅ¥ do jednotlivÃ½ch klasifikaÄnÃ½ch stupÅov (v naÅ¡om prÃ­pade od 1 do 10). NajvyÅ¡Å¡ia pravdepodobnosÅ¥ urÄuje hÄ¾adanÃ½ klasifikaÄnÃ½ stupeÅ â to bude naÅ¡a predpoveÄ hlasovania. ProblÃ©mom pri tomto prÃ­stupe je vÃ½poÄtovÃ¡ nÃ¡roÄnosÅ¥: systÃ©m musÃ­ analyzovaÅ¥ veÄ¾kÃ© mnoÅ¾stvo dokumentov. Toto sa dÃ¡ trochu obÃ­sÅ¥ inkrementÃ¡lnymi obnovami (updateami) pouÅ¾Ã­vateÄ¾ovho modelu po kaÅ¾dom jeho hlasovanÃ­. NavyÅ¡e po dostatoÄnom mnoÅ¾stve trÃ©novacÃ­ch dokumentov Å¡truktÃºry naivnej Bayesovej analÃ½zy budÃº dostatoÄne robustnÃ© na generovanie presnÃ½ch predpovedÃ­. Po tomto okamihu uÅ¾ nemusÃ­me robiÅ¥ obnovu modelu, ÄÃ­m Å¡etrÃ­me zdroje."
369,258,0.491,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.21. Vzor Poplatky bankovÃ©ho produktu Pokladnica mÃ´Å¾e obsahovaÅ¥ viacero foriem hotovosti: hotovosÅ¥ v domÃ¡cej mene, hotovosÅ¥ v rÃ´znych cudzÃ­ch menÃ¡ch, cestovnÃ© Å¡eky rÃ´znych spoloÄnostÃ­, Å¡eky na inkaso, bankovÃ© Å¡eky danej banky, pamÃ¤tnÃ© mince a ÄalÅ¡ie. V porovnanÃ­ s ÃºÄtom klienta je tak potrebnÃ© evidovaÅ¥ na pokladnici viacero zostatkov: zvlÃ¡Å¡Å¥ pre kaÅ¾dÃº formu hotovosti a menu. NavyÅ¡e sa individuÃ¡lne eviduje kaÅ¾dÃ½ Å¡ek na inkaso. CestovnÃ© Å¡eky je moÅ¾nÃ© evidovaÅ¥ po spojitÃ½ch ÄÃ­selnÃ½ch intervaloch. Na uschovacÃ­ch miestach a v centrÃ¡lnej pokladni banky sa hotovosÅ¥ uchovÃ¡va v balÃ­Äkoch. KaÅ¾dÃ¡ pokladnica mÃ¡ z bezpeÄnostnÃ½ch dÃ´vodov definovanÃ½ minimÃ¡lny a maximÃ¡lny limit zostatku. (Pokladnice s vyÅ¡Å¡Ã­m maximÃ¡lnym limitom musia maÅ¥ aj vyÅ¡Å¡Ã­ stupeÅ zabezpeÄenia.) Po prekroÄenÃ­ celkovÃ©ho zostatku, ktorÃ½ je sÃºÄtom vÅ¡etkÃ½ch jej zostatkov, musÃ­ pokladnÃ­k do predpÃ­sanÃ©ho Äasu odviesÅ¥ prebytoÄnÃ½ zostatok na uschovacie miesto38. Podobne po prekroÄenÃ­ zostatku na uschovacom mieste musÃ­ poboÄka odviesÅ¥ prebytoÄnÃº hotovosÅ¥ do centrÃ¡lnej pokladne banky. Zostatok na pokladnici sa, podÄ¾a predpisov banky, mÃ´Å¾e evidovaÅ¥ aÅ¾ na Ãºrovni nominÃ¡lnych hodnÃ´t. Pri urÄitÃ½ch typoch pokladnÃ­c (uschovacie miesta, centrÃ¡lna pokladÅa banky)"
76,335,0.491,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"DÃ¡ sa ukÃ¡zaÅ¥ viac (Äo je vÅ¡ak nad naÅ¡e sily), totiÅ¾, Å¾e je to najlepÅ¡Ã­ nevychÃ½lenÃ½ odhad parametra ï³2. ÄastejÅ¡ia je vÅ¡ak situÃ¡cia, keÄ treba odhadovaÅ¥ ï³2, a pritom nepoznÃ¡me. Z vety 7.1.11 vieme, Å¾e vÃ½berovÃ¡ variancia je nevychÃ½lenÃ½ odhad variancie, teda nevychÃ½lenÃ½ odhad ï³2. DÃ¡ sa ukÃ¡zaÅ¥, Å¾e je to najlepÅ¡Ã­ nevychÃ½lenÃ½ odhad ï³2. Pre zaujÃ­mavosÅ¥ poznamenÃ¡vame, Å¾e Å¡tatistika"
76,194,0.491,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"3.2.10 PrÃ­klad. NÃ¡hodne vyberieme dva vÃ½robky z produkcie vÃ½robkov, ktorÃ½ch Å¾ivotnosÅ¥ modeluje rozdelenie N(210, 64). Potom nÃ¡hodne vyberieme ÄalÅ¡ie dva, tentoraz z produkcie takÃ½ch, ktorÃ½ch Å¾ivotnosÅ¥ modeluje rozdelenie N(218, 81). AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e kaÅ¾dÃ½ vybratÃ½ vÃ½robok bude fungovaÅ¥ aspoÅ 200 hodÃ­n? RieÅ¡enie. Ak Å¾ivotnosÅ¥ prvÃ½ch dvoch vybratÃ½ch modelujÃº veliÄiny"
195,41,0.491,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov slÃºÅ¾ia na testovanie. Tento prÃ­stup sa podobÃ¡ situÃ¡ciÃ¡m v reÃ¡lnom svete, kde dÃ¡ta a dokumentÃ¡cia z minulÃ½ch projektov slÃºÅ¾ia na odhalenie potenciÃ¡lne chÃ½b v nasledujÃºcich verziÃ¡ch softvÃ©ru."
369,254,0.491,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.18. Vzor BankovÃ½ produkt â alternatÃ­va 1 Model na obr. 4.18 je nehomogÃ©nny: niektorÃ© bankovÃ© produkty sÃº dvojÃºrovÅovÃ© (zahÅÅajÃº aj inÅ¡tanciu triedy BalÃ­k produktov), kÃ½m inÃ© iba jednoÃºrovÅovÃ© (obsahujÃº iba inÅ¡tanciu triedy ZÃ¡kladnÃ½ produkt). Z implementaÄnÃ©ho hÄ¾adiska bÃ½va Äasto jednoduchÅ¡ie rieÅ¡enie"
59,63,0.491,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Pojem lineÃ¡rnej separovateÄ¾nosti BooleovÃ½ch funkciÃ­ je Ä¾ahko zovÅ¡eobecniteÄ¾nÃ½ na kvadratickÃº (kubickÃº,â¦) separovateÄ¾nosÅ¥ pomocou kvadratickej (kubickej,â¦) nadplochy. DefinÃ­cia 2.1. Booleova funkcia f sa nazÃ½va kvadraticky separovateÄ¾nÃ¡, ak existujÃº takÃ© vÃ¡hovÃ© koeficienty wi, wij a prahovÃ½ faktor ïï¬ Å¾e pre kaÅ¾dÃº Å¡pecifikÃ¡ciu premennÃ½ch x1 ,x2 ,...,xn platÃ­"
130,393,0.491,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"mÃ´Å¾e prinÃ¡Å¡aÅ¥ znevÃ½hodnenie agentov v ÄalÅ¡Ã­ch interakciÃ¡ch. PrÃ­kladom mÃ´Å¾e byÅ¥ oblasÅ¥ elektronickÃ©ho trhu, kde poruÅ¡enie pravidiel vedie k znevÃ½hodneniu agenta pri ÄalÅ¡Ã­ch obchodoch (Dellarocas, 1999)."
205,158,0.491,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","V tejto implementÃ¡cii vytvÃ¡rame triedu DuplCheckDB, ktorÃ¡ vytvÃ¡ra samotnÃº databÃ¡zu. TÃ¡to trieda pri inicializÃ¡cii vytvorÃ­ databÃ¡zu typu DB_HASH. VÄaka tomu bude maÅ¥ vyhÄ¾adÃ¡vanie v tejto databÃ¡ze zloÅ¾itosÅ¥ O(1). HorÅ¡ie to bude v prÃ­pade vkladania Ãºdajov, kde bude zloÅ¾itosÅ¥ exponenciÃ¡lna. Trieda mÃ¡ okrem toho ÄalÅ¡ie dve funkcie; prvÃº na zistenie, Äi sa danÃ¡ adresa nachÃ¡dza v databÃ¡ze a druhÃº na vloÅ¾enie adresy do databÃ¡zy."
369,164,0.491,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ZÃºÄtovanie zÃ¡vÃ¤zkov S partnerom mÃ´Å¾e existovaÅ¥ viacero zÃ¡vÃ¤zkov. Tieto zÃ¡vÃ¤zky mÃ´Å¾u maÅ¥ navyÅ¡e opaÄnÃ½ charakter, t. j. jeden zÃ¡vÃ¤zok predstavuje zÃ¡vÃ¤zok povinnosÅ¥ platby partnerovi a druhÃ½ zÃ¡vÃ¤zok povinnosÅ¥ platby partnera voÄi naÅ¡ej firme. Aby sa zbytoÄne neposielali peniaze oboma smermi, resp. aby sa uÅ¡etrilo na bankovÃ½ch poplatkoch, mÃ´Å¾e maÅ¥ vÃ½znam vytvoriÅ¥ sumÃ¡rny zÃºÄtovacÃ­ zÃ¡vÃ¤zok, ktorÃ½ spoÄÃ­ta sumy jednotlivÃ½ch zÃ¡vÃ¤zkov vrÃ¡tane znamienok tÃ½chto sÃºm. NÃ¡sledne sa medzi partnermi realizuje iba jednosmernÃ¡ Ãºhrada sumÃ¡rneho zÃ¡vÃ¤zku."
135,218,0.49,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.3.3 Tok riadenia Z hadiska toku riadenia rozliÅ¡ujeme dva druhy filtrov: aktÃ­vne a pasÃ­vne filtre (Buschmann, 1996). AktÃ­vne filtre implementujÃº vlastnÃ½ tok riadenia: preberajÃº Ãºdaje zo vstupu, spracÃºvajÃº ich a posielajÃº na vÃ½stup. Naproti tomu pasÃ­vne filtre nemajÃº vlastnÃ½ tok riadenia, t.j. akajÃº, kÃ½m od nich nebude Å¾iada Ãºdaje vÃ½stupnÃ½ dÃ¡tovod resp. dÃ¡tovÃ½ spotrebi alebo naopak, kÃ½m im Ãºdaje na spracovanie nepoÅ¡le vstupnÃ½ dÃ¡tovod resp. zdroj Ãºdajov. V prvom prÃ­pade hovorÃ­me o pasÃ­vnom filtri typu âahajâ (angl. pull), v druhom o pasÃ­vnom filtri typu âtlaâ (angl. push). Analogicky mÃ´Å¾eme uvaÅ¾ova o aktÃ­vnom a pasÃ­vnom zdroji Ãºdajov a dÃ¡tovom spotrebii. DÃ¡tovod spÃ¡jajÃºci dva aktÃ­vne prvky musÃ­ realizova synchronizÃ¡ciu medzi nimi, teda musÃ­ rieÅ¡i napr. prÃ­pady, kedy prvÃ½ prvok poÅ¡le Ãºdaje, ale druhÃ½ si ich eÅ¡te nemÃ¡ zÃ¡ujem prevzia. DÃ¡tovod spÃ¡jajÃºci aktÃ­vny prvok s pasÃ­vnym, prÃ­padne dva kompatibilnÃ© pasÃ­vne prvky mÃ´Å¾e by realizovanÃ½ jednoduchÃ½m volanÃ­m procedÃºry alebo metÃ³dy, typicky s nÃ¡zvom read, write, resp. analogickÃ½m. Nasleduje niekoko sekvennÃ½ch diagramov znÃ¡zorujÃºcich jednotlivÃ© situÃ¡cie, prevzatÃ½ch z (Buschmann, 1996). V prvom diagrame (obrÃ¡zok 3-5) sÃº zobrazenÃ© dva pasÃ­vne filtre a pasÃ­vny dÃ¡tovÃ½ spotrebi, vÅ¡etky sÃº typu âtlaâ. AktÃ­vny je zdroj Ãºdajov, ktorÃ½ posiela Ãºdaje prvÃ©mu z filtrov volanÃ­m procedÃºry write. PrvÃ½ filter Ãºdaje spracuje (naznaenÃ© volanÃ­m procedÃºry f1) a poÅ¡le druhÃ©mu filtru volanÃ­m jeho procedÃºry write. Analogicky i tento filter Ãºdaje spracuje (procedÃºra f2) a poÅ¡le dÃ¡tovÃ©mu spotrebiu (procedÃºra write). Toto vÅ¡etko prebieha v rÃ¡mci vlÃ¡kna riadenia umiestnenÃ©ho primÃ¡rne v zdroji Ãºdajov. zdroj Ãºdajov (aktÃ­vny)"
240,500,0.49,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ako bude pracovaÅ¥ nÃ¡Å¡ program, ak premennÃº max inicializujeme na hodnotu 0? Na ukÃ¡Å¾kovom vstupe je vÃ½sledok sprÃ¡vny a moÅ¾no aj na zopÃ¡r ÄalÅ¡Ã­ch vstupoch, ktorÃ© vyskÃºÅ¡ate, bude vÃ½sledok sprÃ¡vny. Je teda program uÅ¾ sprÃ¡vny? Aby sme to spoÄ¾ahlivo povedali, tak sa skÃºsme zamyslieÅ¥, kedy by vÃ½sledok mohol byÅ¥ nesprÃ¡vny? VÃ½sledok programu (vypÃ­sanie hodnoty premennej max) by mohol byÅ¥ nesprÃ¡vny ak by sme nevypÃ­sali prvok z postupnosti (teda poÄiatoÄnÃ¡ hodnota max by nikdy nebola prepÃ­sanÃ¡ prvkom postupnosti), alebo ak by sme vypÃ­sali nejakÃ½ nesprÃ¡vny prvok postupnosti (existoval by eÅ¡te vÃ¤ÄÅ¡Ã­ prvok). NesprÃ¡vny prvok vypÃ­saÅ¥ nemÃ´Å¾eme, pretoÅ¾e naÄÃ­tame a spracujeme kaÅ¾dÃ½ z prvkov a ak niektorÃ½ je vÃ¤ÄÅ¡Ã­ ako hodnota max, tak hodnotu max upravÃ­me. Äo sa vÅ¡ak stane v situcÃ¡cii, v ktorej vÅ¡etky prvky postupnosti budÃº menÅ¡ie ako poÄiatoÄnÃ¡ hodnota max? V naÅ¡om prÃ­pade to je vtedy, keÄ by na vstupe boli len zÃ¡pornÃ© ÄÃ­sla: potom by sme vypÃ­sali 0 napriek tomu, Å¾e 0 nie je najvÃ¤ÄÅ¡ie ÄÃ­slo postupnosti."
115,152,0.49,Algebra a diskrÃ©tna  matematika,"12.10. Nech n je mocnina dvoch. UkÃ¡Å¾te, Å¾e n ÄÃ­sel mÃ´Å¾e byÅ¥ sÄÃ­tanÃ½ch v log2 n krokoch pri pouÅ¾itÃ­ siete so stromovou Å¡truktÃºrou o n -1 procesoroch. Predpokladajme, Å¾e n = 2k, kde k je kladnÃ© celÃ© ÄÃ­slo. Chceme ukÃ¡zaÅ¥ ako sÄÃ­taÅ¥ n ÄÃ­sel za log2n krokov pri pouÅ¾itÃ­ siete so stromovou Å¡truktÃºrou o n-1 procesoroch. DokÃ¡Å¾me to matematickou indukciou na k. KeÄ k = 1, potom n = 2 a n-1 = 1 a v log22 = 1 kroku dokÃ¡Å¾eme sÄÃ­taÅ¥ 2 ÄÃ­sla jednÃ½m procesorom. Predpokladajme ako induktÃ­vnu hypotÃ©zu, Å¾e mÃ´Å¾eme sÄÃ­taÅ¥ n = 2k v log2 n krokoch pri pouÅ¾itÃ­ siete so stromovou Å¡truktÃºrou o n-1 procesoroch. Predpokladajme teraz, Å¾e mÃ¡me 2n = 2k+1 ÄÃ­sel na sÄÃ­tanie, x1, x2, ..., x2n. SieÅ¥ so stromovou Å¡truktÃºrou o 2n-1 procesoroch vytvorÃ­me zo siete so stromovou Å¡truktÃºrou o n-1 procesoroch spolu s dvoma novÃ½mi procesormi ako deÅ¥mi kaÅ¾dÃ©ho listu v (n-1)-procesorovej sieti. V jednom kroku mÃ´Å¾eme pouÅ¾iÅ¥ listy rozÅ¡Ã­renej siete pre sÄÃ­tanie x1 + x2, x3 + x4, x2n-1 + x2n. To nÃ¡m dÃ¡va n ÄÃ­sel. PodÄ¾a induktÃ­vnej hypotÃ©zy teraz mÃ´Å¾eme pouÅ¾iÅ¥ zvyÅ¡ok siete na sÄÃ­tanie tÃ½chto ÄÃ­sel v log2 n krokoch. Dovedna sme pouÅ¾ili 1 + log2 n krokov a ako sme potrebovali ukÃ¡zaÅ¥ log2(2n) = log22 + log2n = 1+ log2n. Ã"
240,3,0.49,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"StruÄne o autoroch: Anna Bou Ezzeddine prednÃ¡Å¡a programovanie v jazyku C na Fakulte informatiky a informaÄnÃ½ch technolÃ³giÃ­ Slovenskej technickej univerzity v Bratislave (FIIT STU) a mÃ¡ za sebou vyÅ¡e 25 rokov praxe s jazykom C, vyÅ¡e 15 rokov praxe vo vyuÄovanÃ­ programovania v jazyku C a niekoÄ¾ko tisÃ­c ÃºspeÅ¡nÃ½ch Å¡tudentov. Jozef TvaroÅ¾ek Å¡tvrtÃ½ rok prednÃ¡Å¡a zÃ¡klady programovania v jazyku C na FIIT STU v Bratislave, mÃ¡ za sebou vyÅ¡e 20 rokov praxe s programovanÃ­m v jazyku C a vytvoril viac ako miliÃ³n riadkov zdrojovÃ©ho kÃ³du. WebovÃ¡ strÃ¡nka knihy obsahuje ÄalÅ¡ie podpornÃ© materiÃ¡ly: www.turing.sk/c"
40,108,0.49,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"ReaktivnÃ­ pravidla jsou jenom jednÃ­m ze zpÅ¯sobÅ¯, jak psÃ¡t do Knihy PÅedpisÅ¯. Mezi dalÅ¡Ã­ zpÅ¯soby patÅÃ­ napÅÃ­klad koneÄnÃ© automaty (âfinite state machinesâ) nebo stromy chovÃ¡nÃ­ (âbehavioral treesâ). Ãvod k tÄmto a dalÅ¡Ã­m technikÃ¡m mÅ¯Å¾ete nalÃ©zt napÅÃ­klad v [10], [13], [14]) nebo opÄt v knihÃ¡ch ze sÃ©rie AI Game Programming Wisdom [48]. KomplexnÃ­ text, kterÃ½ uvÃ¡dÃ­ ÄtenÃ¡Åe do mnoha technik pouÅ¾Ã­vanÃ½ch pro tvorbu agentÅ¯ v poÄÃ­taÄovÃ½ch hrÃ¡ch je [30]. PojednÃ¡vÃ¡ dokonce i o nÄkolika nesmÄlÃ½ch pokusech tÃ½kajÃ­cÃ­ch se uÄenÃ­. JinÃ½ ÄlÃ¡nek pojednÃ¡vajÃ­cÃ­ o uÄenÃ­ agentÅ¯ v poÄÃ­taÄovÃ½ch hrÃ¡ch je [24]. Nejde ovÅ¡em o uÄenÃ­ celÃ© Knihy PÅedpisÅ¯, ale pouze o drobnÃ© modifikace (napÅÃ­klad: umÃ­m uÅ¾ jÃ­st a nauÄÃ­m se, Å¾e krÃ¡va chutnÃ¡ lÃ©pe neÅ¾ kamenÃ­). ProblÃ©mu uÄenÃ­ se vÄnuje takÃ© open source hra NERO [41]. Agenti z tÃ©to hry jsou namÃ­sto Knihy PÅedpisÅ¯ ÅÃ­zeni umÄlou neuronovou sÃ­tÃ­, pro jejÃ­Å¾ uÄenÃ­ se pouÅ¾Ã­vajÃ­ genetickÃ© algoritmy [55]. Pokud bylo agentovo chovÃ¡nÃ­ uÅ¾ivatelem kladnÄ ohodnoceno, budou jeho geny, kÃ³dujÃ­cÃ­ vÃ½slednÃ© chovÃ¡nÃ­, s velkou pravdÄpodobnostÃ­ pÅeneseny i na dalÅ¡Ã­ generaci agentÅ¯. Naopak geny Å¡patnÄ hodnocenÃ½ch agentÅ¯ z populace vymizÃ­. MÅ¯Å¾e bÃ½t zajÃ­mavÃ© sledovat, jak se agenti postupnÄ uÄÃ­ jednotlivÃ¡ chovÃ¡nÃ­ jako napÅÃ­klad chÅ¯zi podÃ©l stÄn, vÃ½slednÃ© chovÃ¡nÃ­ ale zdaleka nedosahuje komplexnosti chovÃ¡nÃ­ napsanÃ©ho ÄlovÄkem. PodobnÃ© tvrzenÃ­ platÃ­ i o poÄÃ­taÄovÃ© hÅe Creatures, kterÃ¡ uvÃ¡dÃ­ virtuÃ¡lnÃ­ agenty, jejichÅ¾ chovÃ¡nÃ­ se rovnÄÅ¾ ÄÃ¡steÄnÄ uÄÃ­ neuronovÃ½mi sÃ­tÄmi [28] (tentokrÃ¡t bez pouÅ¾itÃ­ genetickÃ½ch algoritmÅ¯). Kniha PÅedpisÅ¯ je ve skuteÄnosti Äasto naprogramovanÃ¡ pÅÃ­mo v programovacÃ­m jazyce, jÃ­mÅ¾ je psanÃ¡ poÄÃ­taÄovÃ¡ hra (napÅ. C++), nebo v âpomocnÃ©mâ, tzv. skriptovacÃ­m jazyce, kterÃ½ zÃ¡kladnÃ­ jazyk doplÅuje (napÅ. Lua). SpecielnÄ pro rozhodovacÃ­ pravidla ale takÃ© existuje nÄkolik programÅ¯, kterÃ© umoÅ¾ÅujÃ­ takovÃ© Knihy psÃ¡t a pak v nich vyhledÃ¡vat â napÅÃ­klad reaktivnÃ­ plÃ¡novaÄ POSH [12], nÃ¡stroj Jess [26] nebo nÃ¡stroj Soar [57] (kterÃ½ toho ve skuteÄnosti umÃ­ mnohem vÃ­c). Jak vÃ­ kaÅ¾dÃ½, kdo nÄkdy potkal Å¡patnÃ©ho ÃºÅednÃ­ka, pomocÃ­ Knihy PÅedpisÅ¯ se mnoho problÃ©mÅ¯ vyÅeÅ¡it nedÃ¡. O omezenÃ­ tohoto pÅÃ­stupu se pÃ­Å¡e v [5]. O alternativÄ se doÄtete dÃ¡le."
393,501,0.49,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ObrÃ¡zok 9-12. ZÃ¡pis vzoru metÃ³dy vÄlenenÃ©ho do vzoru triedy. Autori rozÅ¡Ã­renÃ­ sa vÅ¡ak obmedzili na zÃ¡pis metÃ³d pomocou vzorov iba v nevyhnutnÃ½ch prÃ­padoch, kedy bude vzÅ¥ah metÃ³dy k vzoru metÃ³dy nevyhnutnÃ½ k pochopeniu modelu."
184,280,0.49,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Pri poÅ¾iadavke vytvÃ¡raÅ¥ softvÃ©r vyuÅ¾Ã­vajÃºci softvÃ©rovÃ© agenty je rozumnÃ© uvaÅ¾ovaÅ¥ o vplyve tohto prÃ­stupu na viacerÃ© vlastnosti systÃ©mu. BliÅ¾Å¡ie rozoberieme tri hlavnÃ© vlastnosti typickÃ© pre softvÃ©rovÃ© agenty â sÃºperenie/zdieÄ¾anie zdrojov, Å¡kÃ¡lovateÄ¾nosÅ¥ systÃ©mu vzhÄ¾adom na mnoÅ¾stvo agentov a ich komunikÃ¡ciu a mobilita agentov."
59,207,0.489,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ProblÃ©m 3.18. Pomocou Algoritmu 3 zostrojte vÅ¡etky moÅ¾nÃ© maximÃ¡lne foldingy (s maximÃ¡lnym poÄtom spÃ¡rovanÃ½ch komplemntÃ¡rnych dvojÃ­c) pre danÃ½ binÃ¡rny reÅ¥azec x ï ï»0,1ï½ . ProblÃ©m 3.19. Ako je Å¡pecifikovanÃ¡ vÃ¤zenskÃ¡ dilema? Ako je definovanÃ¡ stratÃ©gia s pamÃ¤Å¥ou predchÃ¡dzajÃºcej Å¥ahu protihrÃ¡Äa? ZovÅ¡eobecnite tÃºto stratÃ©giu pre pamÃ¤Å¥ predchÃ¡dzajÃºcich dvoch Å¥ahov sÃºpera. ProblÃ©m 3.20. NapÃ­Å¡te algoritmus v pseudokÃ³de, ktorÃ½ pre danÃ© dve stratÃ©gie"
94,128,0.489,Sprievodca svetom vedeckÃ©ho publikovania,"antivakcinaÄnÃ©ho hnutia. AntivakcinaÄnÃ© hnutia existovali uÅ¾ od poÄiatkov oÄkovania a zdÃ´vodÅovali odpor voÄi tejto preventÃ­vnej praxi rÃ´zne, vÃ¤ÄÅ¡inou nÃ¡boÅ¾ensky alebo politicky (povinnÃ© oÄkovanie vnÃ­mali ako nedÃ´veru v boÅ¾iu ochranu, alebo ako naruÅ¡enie osobnej slobody), bez odbornÃ½ch argumentov. NovÃ½ vietor do plachiet im dodal ÄlÃ¡nok Andrewa Wakefielda, ktorÃ½ vyÅ¡iel v roku 1998 v znÃ¡mom lekÃ¡rskom Äasopise Lancet. V recenznom konanÃ­ preÅ¡iel ÄlÃ¡nok rukami Å¡iestich hodnotiteÄ¾ov. VychÃ¡dzajÃºc z prÃ­padovej Å¡tÃºdie dvanÃ¡stich detÃ­ Wakefield vyslovil domnienku, Å¾e vakcÃ­na MMR (proti osÃ½pkam, prÃ­uÅ¡niciam a ruÅ¾ienke) spÃ´sobuje autizmus prostrednÃ­ctvom poÅ¡kodenia Ärevnej vÃ½stelky. V skutoÄnosti napÃ­sal, Å¾e vÃ½skum tÃºto sÃºvislosÅ¥ priamo nedokazuje. Iba ju celÃ½ Äas naznaÄoval, podporil 20-minÃºtovÃ½m sugestÃ­vnym videom a tlaÄovou konferenciou. Autizmus sa u detÃ­ zaÄÃ­na prejavovaÅ¥ spravidla medzi prvÃ½m a druhÃ½m rokom, Äo je aj vek oÄkovania MMR vakcÃ­nou. MnohÃ­ rodiÄia, zÃºfalo hÄ¾adajÃºci prÃ­Äinu stavu, ktorÃ½ im lekÃ¡ri nedokÃ¡zali uspokojivo vysvetliÅ¥, odrazu mali koho obviniÅ¥. AntivakcinaÄnÃ© hnutie zaÄalo ÄlÃ¡nok pouÅ¾Ã­vaÅ¥ ako argument, hoci nasledujÃºce, metodicky robustnejÅ¡ie epidemiologickÃ© Å¡tÃºdie (1999, 2001 a ÄalÅ¡ie, z novÅ¡Ã­ch napr. Jain et al. (2015)) Wakefieldove domnienky nepotvrdili (Plotkin et al. 2009). KontroverznÃ¡ diskusia o vzÅ¥ahu MMR vakcÃ­n a autizmu vÅ¡ak pokraÄovala. Po podozreniach z podvodu oslovil Lancet v roku 2004 nemocnicu, kde Wakefield vÃ½skum uskutoÄnil, aby preskÃºmala jeho podklady. Nemocnica nenaÅ¡la Å¾iadne pochybenia, okrem nepriznanÃ©ho konfliktu zÃ¡ujmov â eÅ¡te pred vÃ½skumom dostal Wakefield financie od prÃ¡vnych zÃ¡stupcov rodiÄov, ktorÃ­ Å¾alovali vÃ½robcu MMR vakcÃ­ny a existujÃº pÃ­somnÃ© doklady, Å¾e mal v Ãºmysle patentovaÅ¥ si vlastnÃº vakcÃ­nu. DesaÅ¥ (z dvanÃ¡stich) spoluautorov sa v roku 2004 od tvrdenÃ­ vo Wakefieldovom ÄlÃ¡nku diÅ¡tancovalo tak, Å¾e uverejnili âstiahnutie interpretÃ¡cieâ (Murch et al. 2004). AÅ¾ vyÅ¡etrovanie NajvyÅ¡Å¡ej lekÃ¡rskej rady (General Medical Council) v roku 2010 usvedÄilo Wakefielda z poruÅ¡enia etiky vo vzÅ¥ahu k detskÃ½m pacientom (museli okrem inÃ©ho podstÃºpiÅ¥ lumbÃ¡lnu punkciu, kolonoskopiu a kontrastnÃ© vyÅ¡etrenie s poÅ¾itÃ­m bÃ¡ria, niektorÃ­ z nich bez medicÃ­nskej prÃ­Äiny) a podvodu (tvrdenia o spÃ´sobe vÃ½beru pacientov a aj inÃ© Ãºdaje v ÄlÃ¡nku boli v rozpore s dokumentÃ¡ciou), Äo ho stÃ¡lo lekÃ¡rsku licenciu. AÅ¾ vtedy Äasopis Lancet ÄlÃ¡nok definitÃ­vne stiahol. Ani to vÅ¡ak nebrÃ¡ni antivakcinaÄnÃ©mu hnutiu Äalej zavÃ¡dzaÅ¥ verejnosÅ¥ o vzÅ¥ahu autizmu a oÄkovania. NÃ¡sledky sÃº viditeÄ¾nÃ© uÅ¾ dnes â pokles kolektÃ­vnej imunity vedie k vypuknutiu lokÃ¡lnych epidÃ©miÃ­ chorÃ´b, ktorÃ© boli vÄaka oÄkovaniu v rozvinutÃ½ch krajinÃ¡ch takmer vyhubenÃ©. V oblasti fyziky patrÃ­ k najznÃ¡mejÅ¡Ã­m prÃ­padom falÅ¡ovania vÃ½sledkov Jan Hendrik SchÃ¶n, nemeckÃ½ vedec-podvodnÃ­k (Reich 2009), laureÃ¡t prestÃ­Å¾nych ocenenÃ­, ktorÃ½ v roku 2001 zaÄal tvrdiÅ¥, Å¾e vyrobil organickÃ½ tranzistor. Publikoval o Åom mnoho ÄlÃ¡nkov v Nature, Science, Äi Physical Letters. LaboratÃ³riÃ¡ po celom svete sa ho mÃ¡rne snaÅ¾ili napodobniÅ¥, aÅ¾ si jedna vedkyÅa vÅ¡imla, Å¾e v experimentoch pri rÃ´znych teplotÃ¡ch nameral celkom rovnakÃ½ Å¡um. Aj inÃ­ zaÄali kriticky skÃºmaÅ¥ detaily jeho prÃ¡ce. KeÄ jeho zamestnÃ¡vateÄ¾ (Bellove laboratÃ³riÃ¡) v roku 2002 spustil kontrolu, J. SchÃ¶n tvrdil, Å¾e nemÃ¡ laboratÃ³rne knihy a chÃ½bajÃºce zÃ¡znamy v poÄÃ­taÄi vysvetÄ¾oval nedostatkom pamÃ¤Å¥ovej kapacity na uchovanie dÃ¡t z experimentov. PriÅ¡iel o zamestnanie, dokonca aj o titul PhD, ÄlÃ¡nky boli stiahnutÃ©. No vÃ¤ÄÅ¡iu hanbu neÅ¾ podvodnÃ­k zaÅ¾Ã­vali redakcie Äasopisov, ktorÃ© sa nechali oklamaÅ¥ a boli dokonca ochotnÃ© naruÅ¡iÅ¥ svoje zauÅ¾Ã­vanÃ© postupy, aby atraktÃ­vne novinky z jeho dielne vydÃ¡vali rÃ½chlejÅ¡ie. J. SchÃ¶n praktizoval vedu odzadu â pri rozhovoroch s kolegami"
59,583,0.489,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Ako jednoduchÃ½ prÃ­klad takÃ©hoto Å¡tudovanÃ©ho komplexu uvedieme hrÃ¡Äa basketbalu (agent), ktorÃ½ na basketbalovom ihrisku obsadenom inÃ½mi hrÃ¡Ämi (systÃ©m) mÃ¡ zÃ¡mer hodiÅ¥ loptu do koÅ¡a (pozri Obr. 12.2). SystÃ©m je charakterizovanÃ½ stavom, ktorÃ½ je reprezentovanÃ½ polohami inÃ½ch hrÃ¡Äov, priÄom vÃ½stupom zo systÃ©mu â vÃ½sledkom, sÃº audiovizuÃ¡lne efekty sprevÃ¡dzajÃºce hodenie lopty do koÅ¡a. Agent â hrÃ¡Ä je schopnÃ½ rekognoskovaÅ¥ stav systÃ©mu, t. j. postavenia ostatnÃ½ch hrÃ¡Äov, tÃºto skutoÄnosÅ¥ svojÃ­m kognitÃ­vnym orgÃ¡nom pretransformuje na prÃ­kazy pre svoje motorickÃ© centrÃ¡, pomocou ktorÃ½ch vykonÃ¡ sekvenciu elementÃ¡rnych pohybov. To mÃ´Å¾e byÅ¥ chÃ¡panÃ© ako akcia agenta, ktorÃ¡ menÃ­ stav systÃ©mu. VyÅ¡Å¡ie uvedenÃ© dvojetapovÃ© uÄenie sa agenta v komplexe so systÃ©mom znamenÃ¡, Å¾e agent â hrÃ¡Ä si v prvej"
122,11,0.489,Modelovanie softvÃ©ru,"5.8 BalÃ­k Util (vzÅ¥ah Â«bindÂ» je vysvetlenÃ½ v Äasti 5.3). . . . . . . . . . . . 5.9 BalÃ­k GUIObserver. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.10 CelkovÃ½ diagram tried e-obchodu s plne kvalifikovanÃ½mi nÃ¡zvami tried. 5.11 VzÅ¥ahy medzi balÃ­kmi v e-obchode. . . . . . . . . . . . . . . . . . . . . 5.12 VzÅ¥ah zÃ¡vislosti medzi balÃ­kmi nie je tranzitÃ­vny. . . . . . . . . . . . . 5.13 RieÅ¡enie cirkulÃ¡rnej zÃ¡vislosti medzi balÃ­kmi. . . . . . . . . . . . . . . 5.14 ObjednÃ¡vanie. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.15 ZÃ¡sobovanie. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.16 VyhÄ¾adÃ¡vanie. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.17 AplikÃ¡cia vzoru Observer v pouÅ¾Ã­vateÄ¾skom rozhranÃ­. . . . . . . . . . . 5.18 Hierarchia typov pouÅ¾Ã­vateÄ¾ov evidovanÃ½ch v e-obchode. . . . . . . . . 5.19 Rozhranie je Äasto umiestnenÃ© v inom balÃ­ku neÅ¾ trieda, ktorÃ¡ ho realizuje. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.20 Viazanie parametrov Å¡ablÃ³ny triedy prostrednÃ­ctvom vzÅ¥ahu Â«bindÂ». . 5.21 Komponenty e-obchodu. . . . . . . . . . . . . . . . . . . . . . . . . . 5.22 ZÃ¡vislosti medzi komponentmi e-obchodu. . . . . . . . . . . . . . . . . 5.23 VzÅ¥ahy medzi komponentmi e-obchodu prostrednÃ­ctvom rozhrania. . . 5.24 Rozhranie v lÃ­zatkovej notÃ¡cii. . . . . . . . . . . . . . . . . . . . . . . 5.25 ZavedenÃ­m komponentu AdvancedOrderManager diagram komponentov sa zneprehÄ¾adÅuje. . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.26 ZnÃ¡zornenie ÄiastkovÃ©ho diagramu komponentov s komponentmi, ktorÃ© realizujÃº rozhrnanie Ordering. . . . . . . . . . . . . . . . . . . . . . . 5.27 KompozitnÃ¡ Å¡truktÃºra. . . . . . . . . . . . . . . . . . . . . . . . . . . 5.28 Diagram sekvenciÃ­ zachytÃ¡va partikulÃ¡rnu situÃ¡ciu interakcie komponentov. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.29 Diagram kolaborÃ¡cie. . . . . . . . . . . . . . . . . . . . . . . . . . . . 5.30 Zaznamenanie pÃ´vodu triedy OrderManager z rovnomennÃ©ho komponentu. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."
41,99,0.489,InformaÄnÃ© vzdelÃ¡vanie,"ZÃ¡kladnÃ© pravidlÃ¡ online prezentÃ¡cie: â Vyberte si sprÃ¡vny nÃ¡stroj. â VyÅ¾adujte, ale aj pomÃ´Å¾te s tÃ½m, aby vÅ¡etci boli prÃ­tomnÃ½ naÄas. â PouÅ¾ite jednoduchÃ© slides/snÃ­mky. â BuÄte presnÃ­ a efektÃ­vni. â PouÅ¾Ã­vajte vizuÃ¡lne prÃ­klady. â Zapojte publikum. â Majte jasnÃ½ cieÄ¾. â Nechajte Äas na otÃ¡zky. â SkonÄite naÄas."
130,467,0.489,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 8-4. ReprezentÃ¡cia RDF modelu pomocou orientovanÃ©ho grafu s pomenovanÃ½mi hranami. DÃ¡tovÃ½ model RDF neÅ¡pecifikuje konkrÃ©tnu reprezentÃ¡ciu â v prÃ­pade grafickej reprezentÃ¡cie to mÃ´Å¾e byÅ¥ graf, presnejÅ¡ie orientovanÃ½ graf s pomenovanÃ½mi hranami"
59,675,0.488,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 14.5. V Ä¾avom diagrame je vybranÃ¡ diagonÃ¡lna bunka 5-5, ktorÃ¡ obsahuje podmnoÅ¾inu alternatÃ­vnych moÅ¾nostÃ­ {4,6,7}. PretoÅ¾e ÄÃ­slo 6 sa nevyskytuje v inÃ½ch bunkÃ¡ch danej centrÃ¡lnej podoblasti, z troch alternatÃ­vnych moÅ¾nosti v polohe 5-5 vyberieme ÄÃ­slo 4, ostatnÃ© mÃ´Å¾eme vylÃºÄiÅ¥ z mnoÅ¾iny alternatÃ­vnych moÅ¾nostÃ­ (pozri pravÃ½ diagram)."
367,35,0.488,CESTA K OTVORENEJ VEDE,"O tvorenÃ© archÃ­vy a repozitÃ¡re mÃ´Å¾u byÅ¥ odborovÃ©, inÅ¡titucionÃ¡lne alebo nÃ¡rodnÃ©. Ak nemÃ¡te konkrÃ©tne usmernenia, mÃ´Å¾ete o radu ohÄ¾adom voÄ¾by najvhodnejÅ¡ieho repozitÃ¡ra poÅ¾iadaÅ¥ aj kniÅ¾nicu svojej inÅ¡titÃºcie."
130,457,0.488,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"IntuitÃ­vne pod pojmom zdroj rozumieme vÅ¡etko, Äomu mÃ´Å¾eme priradiÅ¥ identitu, priÄom identita nemusÃ­ priamo implikovaÅ¥ prÃ­stupnosÅ¥ zdroja Äi jeho umiestnenie. Fielding vo svojej dizertaÄnej prÃ¡ci (Fielding, 2000) povaÅ¾uje zdroj za kÄ¾ÃºÄovÃº abstrakciu informÃ¡cie v architektÃºre modernÃ©ho webu. Zdrojom mÃ´Å¾e byÅ¥ Ä¾ubovoÄ¾nÃ¡ informÃ¡cia, ktorÃº mÃ´Å¾eme pomenovaÅ¥. Ako prÃ­klad zdroja mÃ´Å¾eme uviesÅ¥ dokument, obrÃ¡zok, kolekciu inÃ½ch zdrojov, Ä¾ubovoÄ¾nÃ½ nevirtuÃ¡lny objekt (napr. osoba, kniha, monitor, stÃ´l) a inÃ©. InÃ½mi slovami, zdroj je konceptuÃ¡lne mapovanie do mnoÅ¾iny entÃ­t. IdentifikÃ¡tor je objekt, ktorÃ½ slÃºÅ¾i ako referencia na nieÄo, Äo mÃ¡ identitu (napr. zdroj). Ak je zdroj prÃ­stupnÃ½, identifikÃ¡tor moÅ¾no pouÅ¾iÅ¥ na âdereferencovanieâ zdroja. PrÃ­kladom identifikÃ¡tora mÃ´Å¾e byÅ¥ priezvisko, ISBN, cesta k sÃºboru."
115,147,0.488,Algebra a diskrÃ©tna  matematika,"Grafy G1 a G2 sÃº stromy, neobsahujÃº cyklus a sÃº sÃºvislÃ©, graf G3 nie je strom, obsahuje cyklus, graf G4 nie je strom, nie je sÃºvislÃ½. 12.2. Odpovedzte pre graf na obr. 12.20 nasledujÃºce dotazy: (a) KtorÃ½ z vrcholov je koreÅ? KoreÅ je a. (b) KtorÃ© vrcholy sÃº vnÃºtornÃ©? VnÃºtornÃ© vrcholy sÃº {a, b, c, d, f, h, i, j, k, l, m, n, r, s}. (c) KtorÃ© vrcholy sÃº listy? Listy sÃº {e, u, v, w, g, x, o, p, q, y, z, Å¾, t}. (d) KtorÃ© vrcholy sÃº nasledovnÃ­ci (synovia) vrcholu k? NasledovnÃ­ci vrcholu k sÃº vrcholy q a r. (e) KtorÃ© vrcholy sÃº rodiÄia vrcholu k? RodiÄ vrcholu k je d. (f) KtorÃ© vrcholy sÃº predkovia k? Predkovia vrcholu k sÃº vrcholy d a a. (g) KtorÃ© vrcholy sÃº potomkovia vrcholu k? Potomkovia vrcholu k sÃº vrcholy q, r, y, z."
239,148,0.488,Ãvod do matematickej logiky,"Nech je T teoÌria v jazyku L predikaÌtovej logiky a nech je A formula v L. Potom ak T â¢ A, tak T  A (ide o jednoducheÌ zovsÌeobecnenie Vety 8.1 o korektnosti). Teraz ak je teoÌria T spornaÌ, tak pre lâubovolânuÌ formulu B v jazyku L platÄ±Ì T â¢ B aj T â¢ q B, a preto T  B aj T  q B. To znamenaÌ, zÌe v kazÌdej realizaÌcii M teoÌrie T je splnenaÌ aj formula B aj q B, a preto podlâa Lemy 7.1 teoÌria T nemaÌ model. ZaujÄ±Ìmavou je opacÌnaÌ implikaÌcia: Ak teoÌria T nie je spornaÌ, tak maÌ model. Veta 8.4 (GoÌdelova veta o uÌplnosti). V jazyku predikaÌtovej logiky je teoÌria bezospornaÌ praÌve vtedy, kedâ maÌ model. DoÌkaz tohoto tvrdenia je dâaleko nad raÌmec naÌsÌho vyÌkladu. Podobne bez doÌkazu uvaÌdzame aj nasledujuÌci doÌsledok: DoÌsledok. Nech je T bezospornaÌ teoÌria a nech je A uzavretaÌ formula v jazyku predikaÌtovej logiky. Potom T  A platÄ±Ì praÌve vtedy, kedâ platÄ±Ì T â¢ A. ZaÌverom tejto podkapitoly poznamenajme, zÌe predikaÌtovaÌ logika (logika prveÌho raÌdu) obsahuje len premenneÌ pre indivÄ±ÌduaÌ, ale uzÌ nie pre skupiny indivÄ±ÌduÄ±Ì, a preto takeÌto skupiny nemozÌno v jazyku prveÌho raÌdu ani kvantiï¬kovatâ. Ak vsÌak rozsÌÄ±Ìrime jazyk prveÌho raÌdu o premenneÌ pre skupiny indivÄ±ÌduÄ±Ì, dostaneme jazyk logiky druheÌho raÌdu. Jazyk logiky tretieho raÌdu uzÌ obsahuje premenneÌ pre skupiny skupÄ±Ìn indivÄ±ÌduÄ±Ì a podobne. PrÄ±Ìklad. V jazyku elementaÌrnej aritmetiky nie sme schopnÄ±Ì sformulovatâ tvrdenie: KazÌdaÌ konecÌnaÌ podmnozÌina mnozÌiny prirodzenyÌch cÌÄ±Ìsel je ohranicÌenaÌ. To preto, lebo nemaÌme premenneÌ pre skupiny prirodzenyÌch cÌÄ±Ìsel."
369,111,0.488,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,RodnÃ© ÄÃ­slo v danom tvare existuje iba pre Å¡tÃ¡tnych obÄanov Slovenskej republiky a jeho pouÅ¾Ã­vanie v informaÄnom systÃ©me podlieha schvÃ¡leniu na to urÄenej Å¡tÃ¡tnej inÅ¡titÃºcii. NavyÅ¡e z hÄ¾adiska modelovania nespÄºÅa princÃ­p normalizÃ¡cie (pozri poznÃ¡mku k obr. 1.13).
343,7,0.488,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"SÃº to tri vÃ½znamnÃ© postavy v oblasti kryptografie - Martin Hellman, Whitfield Diffie a Ralph Merkle. Boli to vedci a vÃ½skumnÃ­ci z MIT a Stanfordu, ktorÃ­ priÅ¡li s konceptom asymetrickej kryptografie v 70. rokoch 20. storoÄia. Tento koncept umoÅ¾nil Å¡irokej verejnosti prÃ­stup k silnej kryptografii, ktorÃ¡ dovtedy bola domÃ©nou iba vlÃ¡dnych agentÃºr. AsymetrickÃ¡ kryptografia umoÅ¾Åuje generovanie privÃ¡tneho a verejnÃ©ho kÄ¾ÃºÄa. Strana, ktorÃ¡ odosiela sprÃ¡vu, ju zaÅ¡ifruje verejnÃ½m kÄ¾ÃºÄom prijÃ­mateÄ¾a a prijÃ­majÃºca strana ju odÅ¡ifruje svojim privÃ¡tnym kÄ¾ÃºÄom. Tento koncept je vyuÅ¾Ã­vanÃ½ v kryptomenÃ¡ch a v mnohÃ½ch inÃ½ch oblastiach na internete. V poslednÃ½ch 50 rokoch sa udiali mnohÃ© vÃ½znamnÃ© udalosti, ktorÃ© ovplyvnili vznik digitÃ¡lnych mien a blockchainu. V 70. rokoch vznikli hashovacie funkcie a eliptickÃ© krivky, v 80. rokoch ÄasovÃ© peÄiatky a bol definovanÃ½ problÃ©m byzantskÃ½ch generÃ¡lov. Tieto technolÃ³gie umoÅ¾nili vznik prvÃ½ch digitÃ¡lnych mien, ako bol DigiCash, startup zaloÅ¾enÃ½ Davidom Chaumom, ktorÃ½"
59,381,0.488,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ImplikÃ¡cia ï¡ ï ï¢ je pravdivÃ¡ vtt, ak prvÃ½ jej komponenta (ï¡) je nepravdivÃ¡ alebo druhÃ½ komponent (ï¢) je pravdivÃ½, v opaÄnom prÃ­pade (prvÃ½ komponent je pravdivÃ½ a druhÃ½ komponent je nepravdivÃ½) je nepravdivÃ¡ val ï¨ ï¡ ï ï¢ï© ï½ 1 vtt val ï¨ ï¡ ï© ï½ 0 alebo val ï¨ï¢ ï© ï½ 1"
196,30,0.487,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"3.8.2 Uvedâte, ako zobrazitâ citÃ¡cie v dokumente. . . . . . . . . . . . . . . . . . . . . . . . 86 3.8.3 Uvedâte, ako zÃ­skatâ BibTeX zÃ¡znamy pouÅ¾itÃ½ch zdrojov z ISBN a DOI. . . . . . . . . 87 3.8.4 Uvedâte, ako uviestâ v texte logÃ¡ TEX, LATEX, BibTEX a LATEX 2Îµ . . . . . . . . . . . . . . 87 3.8.5 Uvedâte, ako uviestâ v dokumente prÃ­lohu. . . . . . . . . . . . . . . . . . . . . . . . . 87 4.1.1 Uvedâte, ako mÃ´Å¾e vyzeratâ zÃ¡klad dokumentu typu prezentÃ¡cia. . . . . . . . . . . . 91 4.1.2 Uvedâte, ako moÅ¾no vytvoritâ slajd pre obsah s klikatelânÃ½mi odkazmi na slajdy. . . . 92 4.1.3 Uvedâte, ako moÅ¾no vytvoritâ slajd reprezentovanÃ½ necÌÃ­slovanÃ½m zoznamom s vnorenÃ­m. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 4.1.4 Uvedâte, ako moÅ¾no vloÅ¾itâ na slajd artefakt (obrÃ¡zok, tabulâku cÌi diagram). . . . . . 93 4.1.5 Uvedâte, ako moÅ¾no vloÅ¾itâ odkaz pod cÌiarou (footnote). . . . . . . . . . . . . . . . . 95"
115,169,0.487,Algebra a diskrÃ©tna  matematika,"rieÅ¡enie. Ako ÄalÅ¡iu zaÄneme pozÃ­ciu (2,1) pre prvÃº dÃ¡mu. Po niekoÄ¾kÃ½ch nÃ¡vratoch v strome rieÅ¡enÃ­ nÃ¡jdeme umiestnenie zvyÅ¡nÃ½ch dÃ¡m na pozÃ­ciÃ¡ch (4,2), (6,3), (1,4), (3,5), a (5,6). 13.14. PouÅ¾ite prehÄ¾adÃ¡vanie do hÄºbky na nÃ¡jdenie podmnoÅ¾iny, pokiaÄ¾ existuje, pre mnoÅ¾inu {27, 24, 19, 14, 11, 8} so sÃºÄtom rovnÃ½m (a) 41 Po prekroÄenÃ­ hÄ¾adanÃ©ho sÃºÄtu sa uÅ¾ nepokraÄuje hlbÅ¡ie do stromu prehÄ¾adÃ¡vania a pridÃ¡vajÃº sa vÅ¾dy iba menÅ¡ie ÄÃ­sla, ako je uÅ¾ najmenÅ¡ie obsiahnutÃ© vo vytvÃ¡ranej podmnoÅ¾ine."
59,541,0.487,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Alebo v inom tvare, nech Sï ï½ ï»ïª; ï ïªï½ je mnoÅ¾ina formÃºl, ktorÃ© sÃº logickÃ½m dÃ´sledkom formÃºl z teÃ³rie T, potom (11.2c) ï¨ ï ï ïï¢ï© ï ï¨ Sï ï Sïï¢ ï© 2. SÃ©mantickÃ½ prÃ­stup â nazÃ½vanÃ½ metÃ³da modelu â je zaloÅ¾enÃ½ na predpoklade, Å¾e ak kaÅ¾dÃ½ model teÃ³rie ï je aj modelom formuly ï¹, potom hovorÃ­me, Å¾e formula ï¹ je sÃ©mantickÃ½m dÃ´sledkom teÃ³rie ï , ï ï¹ . Predpokladajme platnosÅ¥ tejto formuly, potom pre kaÅ¾dÃ½ model teÃ³rie ï je formula ï¹ pravdivÃ¡. FormÃ¡lne ï¨ ï¢ï´ï ï ï© ï¨ valï´ ï¨ ï¹ ï© ï½ 1ï© , kde ï ï½ ï»ï´1 , ï´2 ,...ï½"
135,299,0.486,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â âna servÃ­tkeâ, â UML nÃ¡stroje, â ADL. PrvÃ½ spÃ´sob je moÅ¾nÃ© nazva analÃ½za âna servÃ­tkeâ. Tento spÃ´sob analÃ½zy vychÃ¡dza zo skÃºsenostÃ­ softvÃ©rovÃ©ho architekta, ktorÃ½ je expertom v danej domÃ©ne. Architekt nakreslÃ­ architektÃºru pomocou obrÃ¡zkov a diagramov. ProblÃ©m je, Å¾e interpretova tieto diagramy vie len danÃ½ softvÃ©rovÃ½ architekt, ktorÃ½ vychÃ¡dza so svojich skÃºsenostÃ­."
236,17,0.486,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"KeÄ chcÃº autori nieÄo publikovaÅ¥, odnesÃº svoj rukopis do vydavateÄ¾stva. KniÅ¾nÃ½ dizajnÃ©r vydavateÄ¾stva potom rozhodne o Ãºprave dokumentu (o Å¡Ã­rke stÄºpcov, druhoch pÃ­sma, medzerÃ¡ch pred a po nadpisoch, . . . ). DizajnÃ©r napÃ­Å¡e inÅ¡trukcie do rukopisu a dÃ¡ ho sadzaÄovi, ktorÃ½ pripravÃ­ knihu podÄ¾a tÃ½chto inÅ¡trukciÃ­. Ä½udskÃ½ dizajnÃ©r sa snaÅ¾Ã­ zistiÅ¥, Äo si autor myslel poÄas pÃ­sania rukopisu. Na zÃ¡klade svojich profesionÃ¡lnych vedomostÃ­ a obsahu rukopisu rozhoduje o nadpisoch kapitol, citÃ¡ciÃ¡ch, prÃ­kladoch, vzorcoch, atÄ. V prostredÃ­ LATEXu berie na seba Ãºlohu dizajnÃ©ra LATEX a pouÅ¾Ã­va TEX ako svojho sadzaÄa. Ale LATEX je tieÅ¾ âlenÃ¿ program a preto potrebuje ÄalÅ¡ie vedenie. Autor musÃ­ poskytnÃºÅ¥ dodatoÄnÃ© informÃ¡cie, ktorÃ© opisujÃº Å¡truktÃºru jeho prÃ¡ce. Tieto informÃ¡cie sa vpisujÃº do textu ako âLATEXovÃ© prÃ­kazyÃ¿. Toto je trochu odliÅ¡nÃ© od prÃ­stupu WYSIWYG1 , ktorÃ½ vyuÅ¾Ã­va vÃ¤ÄÅ¡ina modernÃ½ch procesorov ako MS Word alebo Corel WordPerfect. Pri tÃ½chto aplikÃ¡ciÃ¡ch, autori urÄujÃº vÃ½stup interaktÃ­vne poÄas pÃ­sania textu do poÄÃ­taÄa. PoÄas celej prÃ¡ce takto mÃ´Å¾u vidieÅ¥ na monitore, ako bude prÃ¡ca nakoniec vyzeraÅ¥, keÄ bude vytlaÄenÃ¡. Pri LATEXu zvyÄajne nie je moÅ¾nÃ© poÄas pÃ­sania vidieÅ¥ koneÄnÃ½ vÃ½stup. VÃ½slednÃ½ tvar textu sa vÅ¡ak mÃ´Å¾e prezeraÅ¥ na monitore po spracovanÃ­ LATEXom. ÄalÅ¡ie Ãºpravy sa mÃ´Å¾u urobiÅ¥ pred vlastnou tlaÄou dokumentu."
369,84,0.486,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Idea vzoru pochÃ¡dza od stavebnÃ©ho architekta Christophera Alexandra, ktorÃ½ v roku 1977 publikoval svoju prvÃº knihu v tejto oblasti [Alexander 1977]. SformulovanÃ© myÅ¡lienky Äalej rozÅ¡Ã­ril v nasledujÃºcej knihe [Alexander 1979]. So svojimi kolegami vytvoril poÄas dvadsiatich rokov viac neÅ¾ 250 vzorov rÃ´znych typov, od plÃ¡novania miest, cez nÃ¡vrh rodinnÃ½ch domov aÅ¾ po vÃ½zdobu izieb. V informatike sa vzory objavili aÅ¾ o desaÅ¥ rokov neskÃ´r, keÄ Kent Beck a Ward Cunningham v roku 1987 pri vÃ½voji systÃ©mu pre firmu Tektronix navrhli prvÃ½ch pÃ¤Å¥ vzorov na nÃ¡vrh pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­ v systÃ©me Smalltalk, ktorÃ© publikovali na konferencii OOPSLAâ87 [Beck+ 1987]. Systematicky sa vÅ¡ak softvÃ©rovÃ½mi vzormi zaÄal zaoberaÅ¥ aÅ¾ Erich Gamma, v rÃ¡mci svojej dizertaÄnej prÃ¡ce na tÃ©mu objektovo orientovanÃ©ho nÃ¡vrhu na univerzite v Zurichu [Gamma 1991]. V rÃ¡mci svojej prÃ¡ce opÃ­sal pribliÅ¾ne polovicu vzorov z neskorÅ¡ej knihy [Gamma 1995]. Prvou knihou o softvÃ©rovÃ½ch vzoroch bola [Coplien 1991], ktorÃ¡ sa venuje softvÃ©rovÃ½m vzorom pre programovanie v jazyku C++. Do povedomia Å¡irÅ¡ej informatickej verejnosti sa vÅ¡ak vzory dostali aÅ¾ vÄaka vynikajÃºcej knihe âgangu Å¡tyrochâ (angl. Gang of Four alebo skrÃ¡tene GoF) Gamma, Helm, Johnson, Vlissides s nÃ¡zvom NÃ¡vrhovÃ© vzory (angl. Design Patterns) [Gamma+ 1995]. UvedenÃ¡ kniha sa venuje vzorom pre etapu nÃ¡vrhu pri vÃ½voji softvÃ©rovÃ©ho systÃ©mu. Kniha sa rÃ½chlo stala bestsellerom a zaraÄuje sa medzi najvÃ½znamnejÅ¡ie knihy v oblasti informatiky vÃ´bec. NÃ¡vrhovÃ© vzory sÃº vÄaka knihe âgangu Å¡tyrochâ najznÃ¡mejÅ¡Ã­mi typmi vzorov. Okrem nich existujÃº aj ÄalÅ¡ie typy vzorov, ktorÃ© sÃº urÄenÃ© pre inÃ© etapy vÃ½voja softvÃ©rovÃ©ho systÃ©mu alebo pre inÃ© hÄ¾adiskÃ¡ pri vÃ½voji systÃ©mu. Medzi najznÃ¡mejÅ¡ie typy vzorov patria: 1. AnalytickÃ© vzory â vzory pre modely vytvÃ¡ranÃ© v etape analÃ½zy vÃ½voja softvÃ©rovÃ©ho systÃ©mu. PrvÃ© analytickÃ© vzory, ako urÄitÃº analÃ³giu nÃ¡vrhovÃ½ch vzorov, publikoval v kniÅ¾nej forme Peter Coad ([Coad 1997] je druhÃ½m, prepracovanÃ½m vydanÃ­m). Z hÄ¾adiska analytickÃ½ch vzorov vÅ¡ak bola vÃ½znamnejÅ¡ia aÅ¾ kniha Davida Haya [Hay 1996], ktorÃ¡ priniesla niekoÄ¾ko desiatok vzorov pre oblasÅ¥ vÃ½robnÃ½ch podnikov. Å irÅ¡ej informatickej verejnosti sa analytickÃ© vzory stali znÃ¡me aÅ¾ vÄaka elegantne napÃ­sanej knihe Martina Fowlera [Fowlera 1997]. 2. ArchitektonickÃ© vzory â vzory pre Å¡pecifikÃ¡ciu architektÃºry softvÃ©rovÃ©ho systÃ©mu, ktorÃ¡ sa zvyÄajne vytvÃ¡ra na zaÄiatku etapy nÃ¡vrhu softvÃ©rovÃ©ho systÃ©mu. Prvou"
265,268,0.486,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"â¢ KonzistentnosÅ¥ v rÃ¡mci a aj medzi jednotlivÃ½mi modelmi (metÃ³dy zodpovedajÃºce scenÃ¡rom, triedy zodpovedajÃºce Ãºdajom, Ãºdaje zodpovedajÃºce scenÃ¡rom a pouÅ¾Ã­vateÄ¾skÃ½m rozhraniam atÄ). â¢ DekompozÃ­cia v takej miere, Å¾e moÅ¾no pomerne presne odhadnÃºÅ¥ mieru Ãºsilia potrebnÃ©ho na dokonÄenie projektu. â¢ JasnÃ© mapovanie navrhnutÃ½ch artefaktov na poÅ¾iadavky. â¢ ZrozumiteÄ¾nÃ¡ dokumentÃ¡cia (skÃºÅ¡kou sprÃ¡vnosti je prÃ­chod novÃ½ch Ä¾udÃ­ do projektu a rÃ½chlosÅ¥ ich oboznamovania sa s nÃ­m). â¢ RozÅ¡Ã­riteÄ¾nosÅ¥ nÃ¡vrhu, pripravenosÅ¥ na zmeny."
94,249,0.486,Sprievodca svetom vedeckÃ©ho publikovania,"VÅ¡etky tieto aktivity zÃ¡roveÅ sÃºvisia zÃ¡roveÅ s procesmi prezentÃ¡cie, trÃ©ningu a vzdelÃ¡vania, technickÃ©ho vybavenia, s komunikÃ¡ciou a budovanÃ­m kontaktov s konkrÃ©tnymi firmami zainteresovanÃ½mi na zhodnotenÃ­ poznatkov vedy pri vÃ½robe konkrÃ©tnych produktov, ako aj s novÃ½m prÃ­stupom k samotnÃ©mu recenznÃ©mu posudzovaniu. Projekt Comparative Assessment of Peer Review sa naprÃ­klad zaoberÃ¡ otÃ¡zkou posudzovania projektov agentÃºrami verejnÃ©ho financovania, ich zodpovednosÅ¥ou voÄi poskytovateÄ¾om verejnÃ½ch financiÃ­ a verejnosti ako takej a zohÄ¾adnenÃ­m prepojenia vedy s verejnÃ½mi potrebami."
43,129,0.485,Objektovo orientovanÃ© programovanie v C++,"Na zÃ¡ver eÅ¡te doplÅme, Å¾e okrem triedy string existuje v C++ na reprezentÃ¡ciu reÅ¥azcov aj trieda wstring. TÃº pouÅ¾Ã­vame vtedy, ak potrebujeme pouÅ¾iÅ¥ Å¡irÅ¡iu sadu znakov, ako je Å¡tandardnÃ¡ 256-znakovÃ¡ sada. Trieda wstring je obdobou triedy string, ktorÃ¡ namiesto poÄ¾a typu char obsahuje pole typu wchar t."
94,242,0.485,Sprievodca svetom vedeckÃ©ho publikovania,"ObrÃ¡zok 7.8. VzÅ¥ahy medzi jednotlivÃ½mi disciplÃ­nami, ktorÃ© sa venujÃº kvantifikÃ¡cii informaÄnÃ©ho a komunikaÄnÃ©ho prostredia â zelenou sÃº vyznaÄenÃ© tie, ktorÃ© sa tÃ½kajÃº vedy a Hausstein pre ne navrhuje zastreÅ¡ujÃºci termÃ­n âscholarly metricsâ, do slovenÄiny voÄ¾ne preloÅ¾iteÄ¾nÃ½ ako âakademetriaâ (podÄ¾a BjÃ¶rneborn a Ingwersen (2004) a Haustein (2016). Pozn.: relatÃ­vna veÄ¾kosÅ¥ jednotlivÃ½ch oblastÃ­ na obrÃ¡zku nevyjadruje relatÃ­vnu veÄ¾kosÅ¥ jednotlivÃ½ch disciplÃ­n)."
205,86,0.485,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","5.1 DÃ´vody archivovania Web je extrÃ©mne prchavÃ½. VÃ¤ÄÅ¡ina informÃ¡ciÃ­ sa nenÃ¡vratne stratÃ­ po krÃ¡tkej dobe. AÅ¾ 80% strÃ¡nok sa po roku zmenÃ­ alebo zmizne. SpoloÄnosÅ¥ tak prichÃ¡dza o digitÃ¡lne dediÄstvo, ktorÃ© pozostÃ¡va naprÃ­klad z historickÃ½ch a vedeckÃ½ch informÃ¡ciÃ­. TlaÄenÃ© publikÃ¡cie sa degradujÃº, ak citujÃº"
76,40,0.485,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.2 V Å¡katuli mÃ¡me 50 vÃ½robkov a medzi nimi 5 nepodarkov. Realizujme nÃ¡hodnÃ½ vÃ½ber bez vrÃ¡tenia rozsahu 10. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e medzi vybranÃ½mi a) nie je nepodarok? b) je jeden nepodarok? c) sÃº dva nepodarky? d) sÃº najviac dva nepodarky? 1.2.3 V Å¡katuli mÃ¡me 100 vÃ½robkov a medzi nimi 10 nepodarkov. NÃ¡hodne vyberieme 20 (bez vrÃ¡tenia) a zistÃ­me, Å¾e medzi vybranÃ½mi je jeden nepodarok. S akou pravdepodobnosÅ¥ou medzi ÄalÅ¡Ã­mi desiatimi nÃ¡hodne vybratÃ½mi (opÃ¤Å¥ bez vrÃ¡tenia) a) nie je nepodarok? b) je jeden nepodarok? c) sÃº dva nepodarky? d) sÃº najviac dva nepodarky? 1.2.4 ZÃ¡mok na heslo mÃ¡ na spoloÄnej osi pÃ¤Å¥ kotÃºÄikov a na obvode kaÅ¾dÃ©ho z nich sÃº cifry 0, 1, 2, 3, 4, 5, 6. ZÃ¡mok sa otvÃ¡ra len na jedinÃº pÃ¤ticu cifier (heslo zÃ¡mku). AkÃ¡ je pravdepodobnosÅ¥ otvorenia zÃ¡mku, ak a) nÃ¡hodne zvolÃ­me nejakÃº pÃ¤ticu cifier? b) vieme, Å¾e v hesle sa Å¾iadna cifra neopakuje? c) vieme, Å¾e v hesle sa nevyskytuje nula? 1.2.5 V Å¡katuli mÃ¡me 5 bielych, 4 ÄervenÃ© a 2 modrÃ© guÄ¾ky. NÃ¡hodne vyberÃ¡me naraz dve. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e a) obe budÃº biele? b) vytiahneme bielu a ÄervenÃº? c) vytiahnutÃ© guÄ¾ky budÃº guÄ¾ky rovnakej farby? 1.2.6 V Å¡katuli mÃ¡me 5 bielych, 4 ÄervenÃ© a 2 modrÃ© guÄ¾ky. NÃ¡hodne vyberÃ¡me naraz tri. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e a) sÃº rovnakej farby? b) medzi nimi nie je biela? c) medzi vybranÃ½mi je aspoÅ jedna modrÃ¡? d) vytiahnutÃ© guliÄky budÃº guliÄky len dvoch farieb? 1.2.7 V Å¡katuli je 9 lÃ­stkov oÄÃ­slovanÃ½ch ÄÃ­slami 1, 2, 3, ..., 9. NÃ¡hodne vyberieme naraz dva lÃ­stky. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e a) ÄÃ­sla na vytiahnutÃ½ch lÃ­stkoch sa lÃ­Å¡ia o viac ako o dva? b) sÃºÄet ÄÃ­sel na vytiahnutÃ½ch lÃ­stkoch je aspoÅ 7? c) sÃºÄin ÄÃ­sel na vytiahnutÃ½ch lÃ­stkoch je aspoÅ 9? 1.2.8 V Å¡katuli je 9 lÃ­stkov oÄÃ­slovanÃ½ch ÄÃ­slami 1, 2, 3, ..., 9. NÃ¡hodne vyberieme dva lÃ­stky tak, Å¾e najprv Å¥ahÃ¡me prvÃ½, poznaÄÃ­me si ÄÃ­slo na Åom, vrÃ¡time ho spÃ¤Å¥ a potom Å¥ahÃ¡me druhÃ½. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e a) ÄÃ­sla na vytiahnutÃ½ch lÃ­stkoch sa lÃ­Å¡ia o viac ako o dva? b) sÃºÄet ÄÃ­sel na vytiahnutÃ½ch lÃ­stkoch je aspoÅ 7? c) sÃºÄin ÄÃ­sel na vytiahnutÃ½ch lÃ­stkoch je aspoÅ 9?"
265,443,0.485,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Ak v diagrame chceme naznaÄiÅ¥, Å¾e objekt vykonÃ¡va nejakÃº ÄinnosÅ¥ (aktivitu), zakreslÃ­me to zvislÃ½m obdÄºÅ¾nikom prekrÃ½vajÃºcim Äiaru Å¾ivota danÃ©ho objektu. VertikÃ¡lnym rozmerom a umiestnenÃ­m pritom naznaÄÃ­me, odkedy a dokedy v rÃ¡mci scenÃ¡ra aktivita pretrvÃ¡va. SekvenÄnÃ½ diagram poznÃ¡ viacero typov interakciÃ­. Medzi najbeÅ¾nejÅ¡ie patria synchrÃ³nne volanie (plnÃ¡ orientovanÃ¡ Äiara zakonÄenÃ¡ trojuholnÃ­kovou vyplnenou Å¡Ã­pkou), asynchrÃ³nne volanie (plnÃ¡ orientovanÃ¡ Äiara zakonÄenÃ¡ obyÄajnou Å¡Ã­pkou) a nÃ¡vratovÃ½ signÃ¡l (preruÅ¡ovanÃ¡ orientovanÃ¡ Äiara zakonÄenÃ¡ obyÄajnou Å¡Ã­pkou). Niekedy sa vyuÅ¾Ã­vajÃº aj signÃ¡ly create a destroy (kreslenÃ© rovnako ako nÃ¡vratovÃ½ signÃ¡l), ktorÃ½mi moÅ¾no ukÃ¡zaÅ¥ presnÃ½ moment zaÄiatku, resp. konca existencie objektu. S vyÅ¡Å¡ie uvedenou notÃ¡ciou by mal sekvenÄnÃ½ diagram vÅ¾dy jednoznaÄnÃ½ priebeh. Diagram vÅ¡ak umoÅ¾Åuje aj nelineÃ¡rnosÅ¥ prostrednÃ­ctvom tzv. blokov. Blok je obdÄºÅ¾nikovÃ¡ oblasÅ¥ v diagrame, ktorou oznaÄÃ­me nejakÃº jeho ÄasÅ¥. Blok je vÅ¾dy v Ä¾avom hornom rohu oznaÄenÃ½ svojim typom, ktorÃ½ urÄuje, Äo presne blok znamenÃ¡. NaprÃ­klad blok alt umoÅ¾Åuje definovaÅ¥ alternatÃ­vne priebehy scenÃ¡ra po vyhodnotenÃ­ podmienky, blok loop zasa definuje opakujÃºcu sa sekvenciu."
196,19,0.485,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"3.3.2 Uvedâte, ako vytvoritâ poloÅ¾kovÃ½, necÌÃ­slovanÃ½ prÃ­padne cÌÃ­slovanÃ½ zoznam. . . . . . . 40 3.3.3 Uvedâte, ako pokracÌovatâ v preruÅ¡enom cÌÃ­slovanom zozname. . . . . . . . . . . . . . 42 3.3.4 Uvedâte, akÃ½ je rozdiel medzi prÃ­kazmi \RequirePackage a \usepackage cÌo sa tÃ½ka pouÅ¾itia. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 3.3.5 Uvedâte, ako zarovnatâ odsek (vpravo, vlâavo, na stred a do bloku). . . . . . . . . . . 43 3.3.6 Uvedâte, ako oÅ¡etritâ situÃ¡ciu kedâ text presahuje cez okraj dokumentu. . . . . . . . . 44 3.3.7"
59,617,0.484,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 12.15. Diagram znÃ¡zorÅuje rekurentnÃº neurÃ³novÃº sieÅ¥, ktorÃº mÃ´Å¾eme chÃ¡paÅ¥ ako spriahnutÃ½ model inverznÃ©ho systÃ©mu, ktorÃ©ho zÃ¡kladnÃ¡ Å¡truktÃºra je reprezentovanÃ¡ diagramom A. SpÃ¤tnÃ© preruÅ¡ovanÃ© Äiary reprezentujÃº rekurentnÃ© spoje, ktorÃ© vytvÃ¡rajÃº orientovanÃ© cykly. AdaptaÄnÃ½ proces tejto siete bol Å¡pecifikovanÃ½ v legende k Obr. 12.14."
76,380,0.484,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"To, Äo budeme potrebovaÅ¥, sÃº kvantily -rozdelenia. Na rozdiel od kvantilov rozdelenia N(0, 1), teraz tabuÄ¾ka kvantilov mÃ¡ dva vstupy: a . Preto bude oznaÄenie kvantilov komplikovanejÅ¡ie. Napr. -kvantil ( ) pre = 10, budeme oznaÄovaÅ¥: (10). TabuÄ¾ky uvÃ¡dzajÃº hodnoty kvantilov len pre najÄastejÅ¡ie hodnoty , = 0.9, 0.95, 0.975, 0.99, 0.995. 8.3.9 Veta. Ak ("
43,454,0.484,Objektovo orientovanÃ© programovanie v C++,"MÃ´Å¾eme sami deï¬novaÅ¥ aj porovnÃ¡vacie kritÃ©rium, podÄ¾a ktorÃ©ho budÃº prvky zoradenÃ©. Pre celÃ© ÄÃ­sla je to Å¡tandardne generickÃ½ funkÄnÃ½ objekt less (podrobnejÅ¡ie v kapitole 10.6), teda ÄÃ­sla sÃº usporiadanÃ© vzostupne. Ak by sme naopak chceli zostupnÃ© usporiadanie, pouÅ¾ijeme generickÃº funkÄnÃ½ objekt greater. set<int,greater<int> > S;"
265,380,0.484,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"napr. do logickÃ½ch a fyzickÃ½ch dÃ¡tovÃ½ch modelov, ktorÃ© predstavujÃº uÅ¾ inÃ½ typ modelov. â¢ BehaviorÃ¡lne modely (modely sprÃ¡vania) â identifikujÃº a definujÃº funkcie vytvÃ¡ranÃ©ho softvÃ©ru. Typicky majÃº tri zÃ¡kladnÃ© formy: stavovÃ© modely, modely toku riadenia a modely toku dÃ¡t. StavovÃ© modely vidia softvÃ©r (jeho vybranÃº ÄasÅ¥) ako mnoÅ¾inu definovanÃ½ch stavov, udalostÃ­ a prechodov. Prechody medzi stavmi sÃº vyvolanÃ© udalosÅ¥ami v modelovanom prostredÃ­. Modely toku riadenia opisujÃº aktivÃ¡cie/deaktivÃ¡cie procesov na zÃ¡klade sekvencie udalostÃ­. Modely toku dÃ¡t ukazujÃº, ako prÃºdia dÃ¡ta medzi ÃºloÅ¾iskami (producentmi, spotrebiÄmi) a jednotlivÃ½mi procesmi. â¢ Å trukturÃ¡lne modely â ukazujÃº logickÃº alebo fyzickÃº Å¡truktÃºru softvÃ©ru, jednotlivÃ© jeho Äasti a komponenty (vertikÃ¡lna ÃºroveÅ). Tieto modely vyhraÅujÃº softvÃ©r v prostredÃ­, kde bude pouÅ¾Ã­vanÃ½ (horizontÃ¡lna ÃºroveÅ). TypickÃ© konÅ¡trukcie pouÅ¾Ã­vanÃ© v modeloch tohto typu sÃº kompozÃ­cia, dekompozÃ­cia, generalizÃ¡cia, Å¡pecializÃ¡cia entÃ­t; identifikÃ¡cia vzÅ¥ahov medzi entitami a ich kardinalÃ­t; a definovanie procesnÃ½ch alebo funkcionÃ¡lnych rozhranÃ­."
94,282,0.484,Sprievodca svetom vedeckÃ©ho publikovania,"KeÄÅ¾e vÃ½skumnÃ© dÃ¡ta mÃ´Å¾u maÅ¥ viacerÃ© verzie, vzÅ¥ahy s inÃ½mi dÃ¡tami alebo dokumentmi, minimÃ¡lny rozsah metadÃ¡t pre otvorenÃ© Ãºdaje na Slovensku definuje VÃ½nos Ministerstva financiÃ­ Slovenskej republiky o Å¡tandardoch pre informaÄnÃ© systÃ©my verenej sprÃ¡vy Ä. 55/2014 Z. z.. OdporÃºÄa sa doplniÅ¥ metadÃ¡ta hodnotiacimi Ãºdajmi o kvalite, aktuÃ¡lnosti, ÃºÄele a mieste vytvorenia a sprÃ­stupnenia. âZverejnenÃ© dÃ¡ta mÃ´Å¾u byÅ¥ v procese aktÃ­vneho vÃ½skumu dopÄºÅanÃ© a aktualizovanÃ©. Ak je ich zverejnenie z objektÃ­vnych dÃ´vodov ukonÄenÃ©, resp. je ukonÄenÃ¡ ich sprÃ¡va, naÄalej dostupnÃ© by mali zostaÅ¥ metadÃ¡tovÃ© alebo bibliografickÃ© zÃ¡znamy v katalÃ³goch a dÃ¡ta majÃº zostaÅ¥ archivovanÃ© v repozitÃ¡ri.â (MÅ VVaÅ  SR 2015, Novela vÃ½nosu o Å¡tandardoch pre IS VS [Ä. 137/2015 Z. z.] â s ÃºÄinnosÅ¥ou od 1. jÃºla 2015, vydanÃ¡ v Zbierke zÃ¡konov)."
76,430,0.484,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"(x, y)ïK, a preto na hladine 0.05 H0 zamietame (prijÃ­mame teda hypotÃ©zu, Å¾e pevnosÅ¥ vlÃ¡kna sa znÃ­Å¾ila). 8.5.15 V tejto situÃ¡cii ide o pÃ¡rovÃ½ -test, teda nie o dvojvÃ½berovÃ½ test. VeliÄina X predstavuje Äas, ktorÃ½ potrebuje prvÃ½ kompilÃ¡tor na skompilovanie nÃ¡hodne vybratÃ©ho programu a Y je Äas, ktorÃ½ potrebuje na skompilovanie toho istÃ©ho programu druhÃ½ kompilÃ¡tor. Zrejme veliÄiny X, Y sÃº zÃ¡vislÃ©, pretoÅ¾e sa vzÅ¥ahujÃº na ten istÃ½ objekt (na ten istÃ½ program). Chceme porovnaÅ¥ E(X) a E(Y). PoloÅ¾Ã­me Z = X â Y a budeme testovaÅ¥ strednÃº hodnotu E(Z). Ide o jednovÃ½berovÃ½ -test o strednej hodnote ï­ veliÄiny Z, o ktorej vieme, Å¾e platÃ­: Z ~ N(ï­, ï³2), ï­ = E(Z) = E(X) â E(Y). VzhÄ¾adom na okolnosti, test mÃ¡ tvar H0: ï­ ï£ 0"
122,105,0.484,Modelovanie softvÃ©ru,"Obr. 6.5: StavovÃ½ diagram s paralelnÃ½m stavom. RegiÃ³nov mÃ´Å¾e byÅ¥ viac. TakÃ½to stav sa oznaÄuje ako paralelnÃ½ (nie v terminolÃ³gii UML). Ako vidÃ­me, aj vnÃºtornÃ© stavy mÃ´Å¾u byÅ¥ kompozitnÃ©, hoci prÃ­liÅ¡nÃ© vnÃ¡ranie mÃ´Å¾e byÅ¥ kontraproduktÃ­vne. V takÃ½chto prÃ­padoch mÃ¡ vÃ½znam pouÅ¾iÅ¥ hlbokÃ½ historickÃ½ stav (angl. deep history state), ktorÃ½ oznaÄuje ako H* v krÃºÅ¾ku. Potom si vnÃºtornÃ½ stavovÃ½ stroj pamÃ¤tÃ¡ stav, v ktorom bol, bez ohÄ¾adu na to, ako hlboko ten stav je."
369,289,0.484,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Faktoring je prÃ­kladom bankovÃ©ho produktu, ktorÃ½ kombinuje Ärty bankovÃ½ch Ãºverov, obchodovania a platobnÃ©ho styku. Faktoring predstavuje financovanie krÃ¡tkodobÃ½ch pohÄ¾adÃ¡vok z obchodnÃ©ho styku. ZvyÄajne sa uplatÅuje pri zahraniÄnom obchode, pri ktorom chce maÅ¥ exportnÃ¡ firma zÃ¡ruku, Å¾e dostane za svoj tovar zaplatenÃ©. Faktoring mÃ¡ z hÄ¾adiska exportnej firmy tieto funkcie: 1. ZabezpeÄenie inkasa pohÄ¾adÃ¡vok â banka alebo inÃ¡ faktoringovÃ¡ spoloÄnosÅ¥ odkupuje od exportnej firmy pohÄ¾adÃ¡vky (faktÃºry) aÅ¾ do Åou schvÃ¡lenÃ©ho limitu (60 % aÅ¾ 90 %) a zabezpeÄuje v spoluprÃ¡ci s faktoringovou spoloÄnosÅ¥ou v krajine importÃ©ra Ãºhradu tÃ½chto pohÄ¾adÃ¡vok. Po obdrÅ¾anÃ­ peÅazÃ­ faktoringovÃ¡ spoloÄnosÅ¥ uhradÃ­ dodÃ¡vateÄ¾ovi zvyÅ¡nÃº ÄasÅ¥ hodnoty pohÄ¾adÃ¡vok. 2. RuÄenie â faktoringovÃ¡ spoloÄnosÅ¥ preberÃ¡ riziko platobnej neschopnosti importÃ©ra. Pri platobnej neschopnosti importÃ©ra faktoringovÃ¡ spoloÄnosÅ¥ uhradÃ­ exportÃ©rovi hodnotu pohÄ¾adÃ¡vky a sama (resp. v spoluprÃ¡ci s faktoringovou spoloÄnosÅ¥ou v krajine importÃ©ra) zabezpeÄuje vymÃ¡hanie pohÄ¾adÃ¡vok od importÃ©ra. 3. Prefinancovanie â faktÃºry v zahraniÄnom obchode majÃº dlhÃ½ Äas splatnosti, zvyÄajne 90 dnÃ­. FaktoringovÃ¡ spoloÄnosÅ¥ preplatÃ­ 60 % aÅ¾ 90 % hodnoty faktÃºry (znÃ­Å¾enÃº o spracovateÄ¾skÃ½ poplatok) zvyÄajne do 24 hodÃ­n, Äo umoÅ¾Åuje exportÃ©rovi okamÅ¾ite tieto peniaze pouÅ¾iÅ¥. UvedenÃ¡ funkcia mÃ¡ podobnÃ© Ärty ako poskytnutie krÃ¡tkodobÃ©ho Ãºveru."
205,154,0.484,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","PreliezaÄ webu v jazyku python funkcia nÃ¡m z tÃ½chto parametrov vytvorÃ­ adresu http://fi.it/stuff/index.html. HlavnÃ¡ vÃ½hoda je vÅ¡ak v tom, Å¾e ak budÃº parametre http://fi.it/ a http://stuba.sk/stuff2/index.html, funkcia nÃ¡m vrÃ¡ti neporuÅ¡enÃº adresu http://stuba.sk/stuff2/index.html. VÄaka tejto funkcii teda dostaneme vÅ¾dy sprÃ¡vnu adresu pre ÄalÅ¡ie spracovanie. 8.3.4 NormalizÃ¡cia adries KeÄ uÅ¾ mÃ¡me adresy, ktorÃ© sÃº v rovnakej podobe, ostÃ¡va nÃ¡m poslednÃ½ problÃ©m - identifikÃ¡cia duplicitnÃ½ch adries. ProblÃ©m dneÅ¡nÃ©ho webu je to, Å¾e existuje viacero podÃ´b tej istej adresy. NaprÃ­klad adresa www.fi.it je to istÃ©, ako www.fi.it/index.html, http://www.fi.it alebo fi.it. Okrem toho mÃ´Å¾u maÅ¥ adresy rozdiely vo veÄ¾kÃ½ch a malÃ½ch pÃ­smenÃ¡ch, alebo je na ceste adresy niekde pouÅ¾itÃ½ reÅ¥azec â..â pre nÃ¡vrat do predchÃ¡dzajÃºceho adresÃ¡ra, alebo mnoho rÃ´znych ÄalÅ¡Ã­ch odliÅ¡nostÃ­. My vÅ¡ak potrebujeme to, aby sme adresu navÅ¡tÃ­vili iba raz a nepridÃ¡vali ju viackrÃ¡t do zoznamu. To zabezpeÄÃ­me procesom, ktorÃ½ sa nazÃ½va normalizovanie. Normalizovanie zahÅÅa: - prevod na malÃ© pÃ­smenÃ¡, - konvertovanie adresy do tvaru IDN (medzinÃ¡rodnÃ© menÃ¡ domÃ©n, angl. Internationalized domain name), - vymazÃ¡vanie predvolenÃ©ho portu 80, - zmenÅ¡ovanie cesty (nahrÃ¡dzanie znakov ./ ../ // a podobne), - vymazÃ¡vanie poslednÃ©ho znaku â.â z cesty, - vÃ½mena vÅ¡etkÃ½ch znakov % ÄÃ­slo znaku za konkrÃ©tny znak tam, kde je to moÅ¾nÃ©, - pri ostatnÃ½ch znakoch s % ÄÃ­slo znaku premieÅa na veÄ¾kÃ© pÃ­smenÃ¡, - premena medzier na %20, - normalizovanie IP adries. Na to, aby sme pridali sprÃ¡vne adresy, vyuÅ¾Ã­vame kniÅ¾nicu urlnorm [11]. V hore uvedenom kÃ³de spÃºÅ¡Å¥ame normalizovanie prÃ­kazom: urlnorm.norm(link). Na tento ÃºÄel existuje veÄ¾kÃ© mnoÅ¾stvo kniÅ¾nÃ­c nielen pre python, ale aj pre inÃ© programovacie jazyky. Nie je takisto problÃ©m spraviÅ¥ si vlastnÃ© pravidlÃ¡ pre normalizovanie, hoci v takom prÃ­pade je veÄ¾kÃ© riziko zabudnutia na niektorÃº z podmienok a teda vytvorenie nedokonalej normalizÃ¡cie. 8.3.5 Zoznamy navÅ¡tÃ­venÃ½ch adries a adries na navÅ¡tÃ­venie ÄalÅ¡Ã­m problÃ©mom, s ktorÃ½m sa pri tvorbe preliezaÄa stretneme, je ukladanie webovÃ½ch adries. Na tento ÃºÄel potrebujem dve ÃºloÅ¾iskÃ¡: - Pre adresy, ktorÃ© chceme navÅ¡tÃ­viÅ¥ - pre navÅ¡tÃ­venÃ© adresy. PrvÃ© ÃºloÅ¾isko potrebuje z dÃ´vodu, Å¾e nie okamÅ¾ite po nÃ¡jdenÃ­ ÄalÅ¡ej adresy ju ideme navÅ¡tÃ­viÅ¥. Adresy si musÃ­me ukladaÅ¥ a podÄ¾a zvolenej stratÃ©gie ich Äalej navÅ¡tevovaÅ¥. Medzi najpouÅ¾Ã­vanejÅ¡ie stratÃ©gie patria: stratÃ©gia do hÄºbky, do Å¡Ã­rky, stratÃ©gie zaloÅ¾enÃ© na ÄiastoÄnom skÃ³re strÃ¡nok (angl. PageRank) a ÄalÅ¡ie."
76,250,0.483,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ak sa vÅ¡ak obmedzÃ­me na prÃ­pad vektora ( ) s hustotou, ktorÃ©ho rozdelenie je normÃ¡lne, tak pojmy nekorelovanosÅ¥ a nezÃ¡vislosÅ¥ splÃ½vajÃº. To je obsah nasledujÃºcej vety. 4.2.19 Veta. Nech ( ) ~ N( , , ï³ , ï³ ï²). Potom ï²( nezÃ¡vislÃ© prÃ¡ve vtedy, keÄ sÃº nekorelovanÃ©."
43,526,0.483,Objektovo orientovanÃ© programovanie v C++,"Ak sa vrÃ¡time k prvej verzii prÃ­kladu so spÃ¡janÃ­m 2D snÃ­mok, mÃ´Å¾eme spracovanie vÃ½nimiek v hlavnom programe prepÃ­saÅ¥ do univerzÃ¡lnej (ale menej pruÅ¾nej) podoby. E.Vytvor3D(meno vystupu,zaklad,prvy,posledny,x,y); catch(...) cout<<""Spajanie snimok neprebehlo spravne.""<<endl;"
240,340,0.483,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"UvaÅ¾ujme teraz nasledujÃºci program, ktorÃ½ vo funkcii najdi_parne() nÃ¡jde vÅ¡etky pÃ¡rne ÄÃ­sla zo vstupnÃ©ho poÄ¾a. Funkcia musÃ­ vrÃ¡tiÅ¥ pole, teda je potrebnÃ©, aby okrem smernÃ­ka na zaÄiatok vÃ½slednÃ©ho poÄ¾a vrÃ¡tila aj poÄet prvkov (vrÃ¡tenÃ©ho) poÄ¾a. PoÄet prvkov funkcia vrÃ¡ti ako nÃ¡vratovÃº hodnotu (typ int), smernÃ­k na zaÄiatok poÄ¾a funkcia vrÃ¡ti ako vÃ½stupnÃ½ argument (typ int**):"
135,354,0.483,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"5.2.1 MetamodelovacÃ­ jazyk zaloÅ¾enÃ½ na roliach PrÃ¡ca [10] predstavuje jazyk urenÃ½ na Å¡pecifikÃ¡ciu vzorov: MetamodelovacÃ­ jazyk zaloÅ¾enÃ½ na roliach (Role Based Metamodeling Language â RBML). RBML umoÅ¾uje autorom Å¡pecifikova nÃ¡vrhovÃ© vzory z viacerÃ½ch perspektÃ­v: statickej Å¡truktÃºry, interakcie, stavovÃ©ho sprÃ¡vania sa. RBML pouÅ¾Ã­va na Å¡pecifikÃ¡ciu vlastnostÃ­ vzorov vizuÃ¡lnu notÃ¡ciu zaloÅ¾enÃº na UML [33] a textovÃ© obmedzenia zaznamenanÃ© v jazyku OCL [26]. Ide o Å¡pecifikanÃ½ jazyk opisujÃºci skupiny UML modelov. SamotnÃ¡ Å¡pecifikÃ¡cia vzorov je zaloÅ¾enÃ¡ na bÃ¡ze rolÃ­, ktorÃ© sÃº asociovanÃ© s UML metatriedami. Role Å¡pecifikujÃº vlastnosti, ktorÃ© musia sp a elementy modelu hrajÃºce danÃº rolu. To znamenÃ¡, Å¾e model, ktorÃ½ zodpovedÃ¡ Å¡pecifikÃ¡ciÃ­ vzoru, pozostÃ¡va z elementov hrajÃºcich role tejto Å¡pecifikÃ¡cie. MÃ´Å¾e obsahova aj inÃ© aplikane Å¡pecifickÃ© elementy, ak sa tÃ½m nedostÃ¡va do konfliktu s metamodelovou Å¡pecifikÃ¡ciou vzoru. ZÃ¡kladnÃ½m modelom RBML je StatickÃ¡ Å¡pecifikÃ¡cia vzoru (Static Pattern Specification â SPS) predstavujÃºca obmedzenia UML metamodelu, ktorÃ© spresujÃº priestor rieÅ¡enia vzoru zo Å¡trukturÃ¡lneho aspektu. SPS pozostÃ¡va z klasifikÃ¡torov (classifier) a vzahov (relationship), ktorÃ© vychÃ¡dzajÃº z metatried Classifier a Relationship UML metamodelu. Rola definovanÃ¡ v rÃ¡mci SPS mÃ´Å¾e by asociovanÃ¡ s obmedzeniami definovanÃ½mi pomocou OCL. PrÃ­klad SPS Å¡pecifikÃ¡cie vzoru Visitor sa nachÃ¡dza na obrÃ¡zku 5-9. Na zachytenie dynamickÃ©ho sprÃ¡vania sa ÃºastnÃ­kov vzoru slÃºÅ¾i InteraknÃ¡ Å¡pecifikÃ¡cia vzoru (Interaction Pattern Specifications â IPS). IPS pozostÃ¡va z interaknej role, ktorÃ¡ je Å¡pecializÃ¡ciou triedy Interaction UML metamodelu. InteraknÃ¡ rola je Å¡truktÃºrou lifeline a sprÃ¡vy (message), ktorÃ© sÃº zaloÅ¾enÃ© na metatriedach Lifeline a Message UML metamodelu. Z vizuÃ¡lneho hadiska sa IPS je obdobou sekvennÃ©ho diagramu UML. Na opis stavovÃ©ho sprÃ¡vania sa ÃºastnÃ­kov vzoru RBML definuje StavovÃº Å¡pecifikÃ¡ciu vzoru (StateMachine Pattern Specifications â SMPS), ktorÃ¡ vychÃ¡dza zo stavovÃ©ho diagramu UML."
361,105,0.483,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","PoznaÌmka: Je potrebneÌ si vsÌimnuÌtâ, zÌe  pravidlo pri zacÌiatocÌnom (sÌtartovacom) symbole odstraÌneneÌ nebolo. Ak by sme ho odstraÌnili, vyÌslednaÌ gramatika, resp. jazyk by neboli ekvivalentneÌ, nakolâko by sme nevedeli vygenerovatâ praÌzdne slovo. V tomto prÄ±Ìpade sa preto zavaÌdza novyÌ sÌtartovacÄ±Ì symbol, ktoryÌ obsahuje  pravidlo (novaÌ gramatika sa povazÌuje za gramatiku bez  pravidla). VyÌslednaÌ transformaÌcia vyzeraÌ takto: P : S0 â S |  SâA|B A â aBa | aa b â bAb | bb"
59,478,0.483,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"9.4 RevÃ­zia teÃ³rie Nech ï ï½ ï»ïª1 ,ïª2 ,...,ïªn ï½ je konzistentnÃ¡ teÃ³ria, ktorÃ¡ je rozÅ¡Ã­renÃ¡ o novÃ© poznatky z konzistentnej mnoÅ¾iny ï, priÄom novÃ¡ teÃ³ria ïï¢ ï½ ï ï ï stÃ¡va sa nekonzistentnou. ProblÃ©m revÃ­zie potom spoÄÃ­va v tom, Å¾e hÄ¾adÃ¡me takÃº minimÃ¡lnu mnoÅ¾inu formÃºl ï ï ï , ktorÃº keÄ odpoÄÃ­tame od ïï¢ , dostaneme maximÃ¡lnu konzistentnÃº teÃ³riu ïï¢ï¢ ï½ ï¨ ï ï ï ï© ï­ ï , ktorÃ¡ nie je podmnoÅ¾inou pÃ´vodnej teÃ³rie ïï¢ï¢ ï ï . To znamenÃ¡, Å¾e pri kontrakcii sa snaÅ¾Ã­me uchovaÅ¥ novÃ© poznatky z ï a odstraÅovaÅ¥ len poznatky z pÃ´vodnej teÃ³rie ï, pozri Obr. 9.4. Z tÃ½chto ÃºvodnÃ½ch poznÃ¡mok opÃ¤Å¥ vyplÃ½va, Å¾e proces revÃ­zie nie je jednoznaÄnÃ½ a preto musÃ­me pouÅ¾iÅ¥ âmimologickÃ©â prostriedky na aspoÅ ÄiastoÄnÃ© odstrÃ¡nenie tejto nejednoznaÄnosti."
276,46,0.483,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"3. Nakonfigurujte zariadeniam pomenovanie podÄ¾a obrÃ¡zka. Deaktivujte preklad domÃ©n a synchronizujte logovanie. 4. Overte stav portov prepÃ­naÄov z hÄ¾adiska prÃ­sluÅ¡nosti do VLAN. 5. Vytvorte a pomenujte prÃ­sluÅ¡nÃ© VLAN siete podÄ¾a tabuÄ¾ky. Nakonfigurujte prÃ­stupovÃ½ reÅ¾im pouÅ¾Ã­vanÃ½m portom a nastavte ich prÃ­sluÅ¡nosÅ¥ do zodpovedajÃºcej VLAN. Overte vytvorenie virtuÃ¡lnych sietÃ­ a priradenie portov. 6. Nakonfigurujte jednu linku medzi prepÃ­naÄmi tak, aby prenÃ¡Å¡ala dÃ¡ta pre VLAN 10 a druhÃº pre VLAN 20 (rozhrania tÃ½chto liniek sÃº taktieÅ¾ prÃ­stupovÃ© a patria do danej VLAN). Overte funkÄnosÅ¥ spojenia pomocou ping medzi PC1 a PC2, kontrolujte cez Wireshark. 7. Nakonfigurujte 802.1Q trunk na oboch linkÃ¡ch medzi prepÃ­naÄmi a nÃ¡sledne overte trunk na portoch. Na prepÃ­naÄoch nastavte IP adresy na rozhraniach SVI pre Management VLAN (nezabudnite rozhrania aktivovaÅ¥) a overte funkÄnosÅ¥ spojenia pomocou ping medzi S1 a S2. 8. Na jednej linke obmedzte povolenÃ© virtuÃ¡lne siete len na VLAN 10. Overte odpojenÃ­m (alebo vypnutÃ­m) druhej linky a pomocou ping medzi PC1 a PC2 a medzi S1 a S2 (iba medzi poÄÃ­taÄmi by mal fungovaÅ¥). 9. Na aktÃ­vnej trunk linke (druhÃ¡ je stÃ¡le odpojenÃ¡) zruÅ¡te obmedzenie povolenÃ½ch VLAN (vÅ¡etky pouÅ¾Ã­vanÃ© VLAN by mali byÅ¥ povolenÃ©) a nakonfigurujte natÃ­vnu VLAN 10 pre S1 a natÃ­vnu VLAN 20 pre S2. 10. Overte ako to ovplyvnÃ­ komunikÃ¡ciu pomocou ping medzi PC1 a PC2, pozorujte komunikÃ¡ciu na PC3 vo Wireshark. V prÃ­pade potreby vypnite STP pre vÅ¡etky pouÅ¾Ã­vanÃ© VLAN siete pomocou prÃ­kazu no spanningtree vlan 10,20,99. DoplnkovÃ© Ãºlohy 11. PriraÄte port Fa0/24 do Management VLAN a zapojte na tento port druhÃº sieÅ¥ovÃº kartu poÄÃ­taÄa (nastavte na nej IP adresu z podsiete VLAN 99). 12. Na prepÃ­naÄoch nastavte heslo âciscoâ do privilegovanÃ©ho reÅ¾imu a nakonfigurujte vzdialenÃ½ prÃ­stup pomocou SSH (domÃ©novÃ© meno âcisco.comâ, 1024 b Å¡ifrovacÃ­ kÄ¾ÃºÄ, pouÅ¾Ã­vateÄ¾ âadminâ a heslo âciscoâ). 13. Pripojte sa z poÄÃ­taÄa cez SSH na prepÃ­naÄ a vo Wireshark sa pokÃºste odchytiÅ¥ heslo."
184,168,0.483,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"spolu s notifikaÄnou sluÅ¾bou JMS (Java Messaging Service) a sluÅ¾bami pre zber dÃ¡t vykonÃ¡vanÃ© na J2EE aplikaÄnom serveri. ZÃ¡vislosÅ¥ pÃ´vodnÃ½ch sluÅ¾ieb pre zber dÃ¡t z ICDE v1.0 na dÃ¡tovom ÃºloÅ¾isku bola odstrÃ¡nenÃ¡ pomocou ich refaktorizÃ¡cie, priÄom vÅ¡etky operÃ¡cie pre prÃ­stup k dÃ¡tam boli presunutÃ© do J2EE komponentov. Tieto umoÅ¾ÅujÃº zaznamenanie udalostÃ­ viacerÃ½mi pouÅ¾Ã­vateÄ¾mi sÃºÄasne a tieÅ¾ podporujÃº sÃºÄasnÃº prÃ­stup viacerÃ½ch nÃ¡strojov tretÃ­ch strÃ¡n k dÃ¡tam v ÃºloÅ¾isku."
205,215,0.483,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","KolektÃ­vna inteligencia a mÃºdrosÅ¥ davu V sÃºÄasnosti existuje viacero aplikÃ¡ciÃ­, ktorÃ© vyuÅ¾Ã­vajÃº dav pouÅ¾Ã­vateÄ¾ov na dosiahnutie poÅ¾adovanÃ½ch vÃ½sledkov. KlasickÃ½m prÃ­kladom sÃº aplikÃ¡cie, ktorÃ© distribujÃº Ãºlohy (alebo ich Äasti) zadanÃ© jednÃ½m pouÅ¾Ã­vateÄ¾om medzi ostatnÃ½ch pouÅ¾Ã­vateÄ¾ov, ktorÃ­ majÃº moÅ¾nosÅ¥ sa podieÄ¾aÅ¥ na ich rieÅ¡enÃ­ (vÃ¤ÄÅ¡inou individuÃ¡lne). Medzi takÃ©to systÃ©my patrÃ­ napr. MechanickÃ½ Turek firmy Amazon (ObrÃ¡zok 52). Poskytuje pouÅ¾Ã­vateÄ¾om rozhranie na vÃ½ber Ãºloh oznaÄovanÃ½ch ako HIT (angl. human intelligence task), ich vyrieÅ¡enie a odovzdanie vÃ½sledkov autorovi Ãºlohy. RieÅ¡iteÄ¾om sa zvyÄajne nÃ¡sledne poskytne finanÄnÃ¡ odmena."
41,14,0.483,InformaÄnÃ© vzdelÃ¡vanie,"RozmnoÅ¾enie a rozÅ¡irovanie diela KaÅ¾dÃ¡ fyzickÃ¡ osoba mÃ´Å¾e vyhotoviÅ¥ bez sÃºhlasu autora pre svoju osobnÃº potrebu rozmnoÅ¾eninu zverejnenÃ©ho diela, ale iba na neobchodnÃ½ ÃºÄel! Za takÃ©to pouÅ¾itie nevznikÃ¡ autorovi povinnosÅ¥ na odmenu, to jest nemÃ´Å¾e si nÃ¡rokovaÅ¥ akÃ½koÄ¾vek honorÃ¡r."
393,119,0.482,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Vyhodnotenie vzorov a pravidiel CieÄ¾om analÃ½zy vzorov, pravidiel a vyhodnocovania je vyfiltrovanie nezaujÃ­mavÃ½ch pravidiel alebo vzorov z mnoÅ¾iny nÃ¡jdenej vo fÃ¡ze objavovania vzorov a pravidiel. DomÃ©novÃ© znalosti predstavujÃº veÄ¾mi dÃ´leÅ¾itÃ½ faktor pre eliminÃ¡ciu nepouÅ¾iteÄ¾nÃ½ch a nezaujÃ­mavÃ½ch vzorov a pravidiel. 2.4.4"
184,357,0.482,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 5-1. Å truktÃºra hypertextu â orientovanÃ½ graf. Koncept hypertextu vÃ´bec nie je novÃ½. Usporiadanie informÃ¡ciÃ­ v encyklopÃ©diÃ¡ch alebo slovnÃ­koch predpoÄÃ­taÄovej Ã©ry je svojim charakterom hypertextovÃ©. VeÄ aj naprÃ­klad Talmud svojimi poÄetnÃ½mi odkazmi a vetvenÃ½mi komentÃ¡rmi sa dÃ¡ oznaÄiÅ¥ za prahypertextovÃ½ dokument. Hypertext, ktorÃ½ svojim charakterom umoÅ¾Åuje ukladanie informÃ¡ciÃ­ nelineÃ¡rnym spÃ´sobom, sa javÃ­ ako vhodnejÅ¡ie mÃ©dium pre ukladanie naÅ¡ich myÅ¡lienok ako klasickÃ© mÃ©diÃ¡ lineÃ¡rneho charakteru. My sami premÃ½Å¡Ä¾ame v nelineÃ¡rne usporiadanÃ½ch zhlukoch, ktorÃ© sa snaÅ¾Ã­me v mozgu prepojiÅ¥ a vybudovaÅ¥ si sieÅ¥ pojmov a znalostÃ­. KeÄ ÄÃ­tame odbornÃº knihu, Äasto sa pri ÄÃ­tanÃ­ vraciame, pozerÃ¡me dopredu a obÄas si pripomenie uÅ¾ preÄÃ­tanÃ© pasÃ¡Å¾e. Niekedy si urobÃ­me poznÃ¡mku o pochopenÃ½ch sÃºvislostiach, preskoÄÃ­me inÃº ÄasÅ¥ nÃ¡jdenÃº pomocou obsahu alebo registra. V koneÄnom dÃ´sledku z lineÃ¡rneho textu vytvÃ¡rame obecnÃº Å¡truktÃºru informÃ¡ciÃ­, ktorÃ¡ je blÃ­zka aj nÃ¡Å¡mu chÃ¡paniu a ukladaniu informÃ¡ciÃ­ v pamÃ¤ti. Naopak, keÄ pripravujeme nejakÃ½ tlaÄenÃ½ dokument, mÃ¡me na zaÄiatku naÅ¡ej prÃ¡ce mnoÅ¾inu viac-menej neusporiadanÃ½ch myÅ¡lienok, logicky alebo sÃ©manticky vzÃ¡jomne prepojenÃ½ch. HlavnÃ¡ ÄinnosÅ¥ pri vytvÃ¡ranÃ­ tlaÄenÃ©ho dokumentu je tieto informÃ¡cie usporiadaÅ¥ â snaÅ¾Ã­me sa informÃ¡cie usporiadaÅ¥ do jednotnÃ©ho lineÃ¡rneho prÃºdu"
369,259,0.482,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"sa musÃ­ evidovaÅ¥ po nominÃ¡lnych hodnotÃ¡ch (resp. balÃ­Äkoch nominÃ¡lnych hodnÃ´t). Banka mÃ¡ definovanÃ½ ÄÃ­selnÃ­k nominÃ¡lnych hodnÃ´t, s ktorÃ½mi obchoduje (banka naprÃ­klad nemusÃ­ kupovaÅ¥ a predÃ¡vaÅ¥ mince z niektorej cudzej meny). KaÅ¾dÃ¡ nominÃ¡lna hodnota mÃ¡ svoj typ (bankovka, minca, pamÃ¤tnÃ¡ minca, cestovnÃ½ Å¡ek a inÃ©). Z jednej nominÃ¡lnej hodnoty mÃ´Å¾e existovaÅ¥ aj viacero typov (naprÃ­klad bankovka aj cestovnÃ½ Å¡ek v hodnote 20 USD alebo 50 CZK vo forme mince aj bankovky). Model pokladnÃ­c banky a ich zostatkov ukazuje obr. 4.22."
272,261,0.482,Reconsidering Constitutional Formation Ii Decisive Constitutional Normativity : From Old Liberties To New Precedence (Volume 12.0),"Cf. âkonstytucyeâ, Zbior potrzebnieyszych wiadomoÅci porzÄdkiem alfabetu uÅoÅ¼onych, Vol. II, Za przywilejem w Warszawie i Lwowie 1781, NakÅadem i Drukiem MichaÅa GrÃ¶lla, KsiÄgarza Nadwornego J.K. Mci w Marywilu pod Nro 24, p. 473. âte wszystkie prawa, ktÃ³re w powszechnoÅci stanowiÄ bezpieczeÅstwo wolnoÅci, majÄtku, honoru i Å¼ycia kaÅ¼dego w szczegÃ³lnoÅci Obywatela, ktÃ³rych odmiany nie moÅ¼e zyskaÄ jedna osoba, tylko z pokrzywdzeniem drugiej; to iest, ktÃ³re opi-suiÄ stany, moc, powagÄ, urzÄdy, i onych wÅadzÄ, a tym opisem urzÄdzajÄ istotnÄ fundamentalnÄ KonstytucyÄ RzÄduâ, ZbiÃ³r Pism, do ktÃ³rych byÅy powodem Uwagi nad Å¼yciem Zamoyskiego. Osme pismoâ¦, p. 37. âWolnoÅÄ narodu zasadza siÄ na Konstytucyi RzÄdu, nie na wyborze Osoby do Panowania, wÅadza krÃ³la rozsÄdnemi opisana prawami, Prawa CzÅowieka zawarowane w caÅej swej zupeÅnoÅci, WÅadza prawodawcza zÅoÅ¼ona w rÄku StanÃ³w NarÃ³d skÅadajÄcych, wÅadza Wykonawcza powierzona magistratom przez Stany wybranym, skÅadem iest prawdziwey wolnoÅci, reszta iest tylko prÃ³Å¼nym uÅudzeniem, ktÃ³rym rozchukane (sic) moÅ¼nowÅadztwo siebie mamiÄ, a innych w niewoli trzymaÄ usiÅuieâ, NN (Jezierski, Franciszek Salezy), O Bez-KrÃ³lewiach w Polszcze y wybieraniu krolow poczÄwszy od Åmierci Zygmunta Augusta JagieÅÅy aÅ¼ do Naszych czasÃ³w. DzieÅo w teraÅºnieyszych okolicznoÅciach do wiadomoÅci przydatne, w Warszawie 1790 Roku (On interregnum times in Poland and the election of kings from the death of Sigismund Augustus JagieÅÅo until our times. A useful work in the present circumstances, in Warsaw, 1790), p. 8."
135,58,0.482,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Ak by sme mali tÃºto situÃ¡ciu opÃ­sa v symboloch zavedenÃ½ch vyÅ¡Å¡ie, potom A je TextovyEditor, R je GrafickyObjekt, F je oakÃ¡vanÃ¡ funknos tÃ½kajÃºca sa zobrazenia a editÃ¡cie objektu. Na druhej strane B je existujÃºca trieda TextView, Râ je jej rozhranie, Fâ je jej funknos. Poznamenajme, Å¾e F a Fâ sa zhodujÃº len iastone: napr. TextView neposkytuje moÅ¾nosti posÃºvania textu po obrazovke. Na tento Ãºel musÃ­ by preto pouÅ¾itÃ¡ pomocnÃ¡ trieda ManipulatorTextu (na obrÃ¡zku nie sÃº jej detaily zobrazenÃ©). V alÅ¡ej knihe, Pattern-Oriented Software Architecture, Patterns for Concurrent and Networked Objects (Schmidt, 2000), venovanej softvÃ©rovÃ½m vzorom v oblasti sieovÃ½ch a paralelnÃ½ch aplikÃ¡ciÃ­, je definovanÃ½ vzor ObaujÃºca fasÃ¡da (angl. Wrapper Facade), ktorÃ½ slÃºÅ¾i na âzabalenie funkciÃ­ a Ãºdajov poskytovanÃ½ch existujÃºcimi nie-objektovo orientovanÃ½mi aplikanÃ½mi programÃ¡torskÃ½mi rozhraniami (API) do koncÃ­znejÅ¡Ã­ch, robustnejÅ¡Ã­ch, portabilnejÅ¡Ã­ch, udrÅ¾iavatenejÅ¡Ã­ch a sÃºdrÅ¾nejÅ¡Ã­ch objektovo orientovanÃ½ch rozhranÃ­â (s. 48). Tento vzor je v istom zmysle zÃºÅ¾enÃ­m myÅ¡lienky AdaptÃ©ra poda GoF, nakoko sa Å¡pecializuje na sprÃ­stupnenie nie-objektovo orientovanÃ½ch API vhodnou formou. ZodpovedÃ¡ nami opÃ­sanej situÃ¡cii . 2, kedy rozhranie Râ existujÃºcej sÃºiastky B nevyhovuje z dÃ´vodu nÃ­zkej Ãºrovne abstrakcie. Autormi uvÃ¡dzanÃ© prÃ­klady pouÅ¾itia sa tÃ½kajÃº rozhranÃ­ na sieovÃº komunikÃ¡ciu, prÃ¡cu s vlÃ¡knami a s mechanizmami vzÃ¡jomnÃ©ho vylÃºenia v prostrediach so sÃºbeÅ¾nÃ½m vykonÃ¡vanÃ­m Ãºloh. V knihe Patterns of Enterprise Application Architecture (Fowler, 2002) venovanej vzorom pouÅ¾Ã­vanÃ½m pri vÃ½voji podnikovÃ½ch aplikÃ¡ciÃ­ sa opisuje vzor BrÃ¡na (angl. Gateway) slÃºÅ¾iaci na sprÃ­stupnenie zdroja externÃ©ho vzhadom na vyvÃ­janÃº aplikÃ¡ciu. TakÃ½mto zdrojom mÃ´Å¾e by relanÃ¡ databÃ¡za, partnerskÃ¡ aplikÃ¡cia, externÃ© Ãºdaje (napr. v XML) a podobne. ExternÃ© zdroje sÃº typicky sprÃ­stupovanÃ© prostrednÃ­ctvom Å¡pecializovanÃ©ho aplikanÃ©ho programÃ¡torskÃ©ho rozhrania, asto pomerne komplikovanÃ©ho. Z dÃ´vodov jednoduchosti vyvÃ­janej aplikÃ¡cie a jej flexibility (vzhadom k moÅ¾nej vÃ½mene externÃ©ho zdroja, prÃ­padne zmene jeho rozhrania) Fowler odporÃºa obali toto API triedou s jednoduchÃ½m rozhranÃ­m vhodnÃ½m pre vyvÃ­janÃº aplikÃ¡ciu. Takto chÃ¡panÃ½ vzor je zÃºÅ¾enÃ­m vzoru AdaptÃ©r (GoF) v tom zmysle, Å¾e brÃ¡na sprÃ­stupuje len zdroje externÃ© vzhadom k aplikÃ¡cii, na druhej strane je jeho rozÅ¡Ã­renÃ­m, nakoko API externÃ©ho zdroja mÃ´Å¾e (ale nemusÃ­) by objektovo orientovanÃ©."
130,419,0.481,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"operÃ¡tor = ( pre, del , adds ) kde pre, del a adds sÃº mnoÅ¾iny literÃ¡lov. MnoÅ¾ina pre obsahuje predpodmienku operÃ¡tora, teda podmienky na stav sveta, v ktorom je moÅ¾nÃ© operÃ¡tor aplikovaÅ¥. Pred vykonanÃ­m operÃ¡tora je vÅ¾dy nutnÃ© overiÅ¥ platnosÅ¥ jeho predpodmienky v sÃºÄasnom stave sveta. MnoÅ¾iny literÃ¡lov del a adds obsahujÃº literÃ¡ly, ktorÃ© sa po vykonanÃ­ operÃ¡tora odstrÃ¡nia, respektÃ­ve pridajÃº do aktuÃ¡lneho sveta. ModifikÃ¡cia stavu sveta"
130,369,0.481,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ObrÃ¡zok 7-5. PÃ¤Å¥ rozmerov organizÃ¡cie: fyzickÃ¡ dimenzia (Ï), sociÃ¡lna dimenzia (Ï), dimenzia vzÅ¥ahov (Î±), dimenzia prostredia(Ï) a osobnÃ¡ dimenzia (Ï). ObrÃ¡zok 7-5 zobrazuje spomenutÃ½ch pÃ¤Å¥ dimenziÃ­ organizÃ¡cie usporiadanÃ½ch pozdÄºÅ¾ dvoch osÃ­. HorizontÃ¡lna os predstavuje interakciu s organizÃ¡ciami a prostredÃ­m na tej istej Ãºrovni. VertikÃ¡lna os predstavuje na jednej strane vzÅ¥ah organizÃ¡cie k svojim komponentom a na druhej strane vzÅ¥ah k organizÃ¡cii na vyÅ¡Å¡ej Ãºrovni, ktorej sÃºÄasÅ¥ tvorÃ­. Uprostred je osobnÃ¡ dimenzia, ktorÃ¡ predstavuje samotnÃº organizÃ¡ciu. KeÄ skÃºmame organizÃ¡ciu na viacerÃ½ch Ãºrovniach, zistÃ­me, Å¾e fyzickÃ¡ dimenzia na vyÅ¡Å¡ej Ãºrovni koreÅ¡ponduje so sociÃ¡lnou dimenziou na Ãºrovni niÅ¾Å¡ej (obrÃ¡zok 7-6). To, Äo pre organizÃ¡ciu predstavuje Å¡truktÃºra jej ÄastÃ­, zÃ¡roveÅ pre jednotlivÃ© Äasti predstavuje sociÃ¡lnu Å¡truktÃºru. Hoci tÃ½chto 5 dimenziÃ­ organizÃ¡cie slÃºÅ¾i skÃ´r ako podklad pre analÃ½zu organizÃ¡cie a jej funkciÃ­, modifikÃ¡cie tohto modelu sa pouÅ¾Ã­vajÃº priamo ako zÃ¡klad Å¡truktÃºry niektorÃ½ch organizÃ¡ciÃ­, prÃ­kladom sÃº organizÃ¡cie zaloÅ¾enÃ© na Å¡truktÃºre structure-in-5 (Kolp, 2001)."
190,209,0.481,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V prÃ­pade, Å¾e nÃ¡Å¡ projekt voÄi plÃ¡nu meÅ¡kÃ¡ (v opaÄnom prÃ­pade, teda ak sa plÃ¡n predbehol, nemusÃ­me samozrejme robiÅ¥ niÄ, prÃ­padne mÃ´Å¾eme oslavovaÅ¥), netreba panikÃ¡riÅ¥. V panike totiÅ¾ moÅ¾no aj s tÃ½m najlepÅ¡Ã­m Ãºmyslom spraviÅ¥ neefektÃ­vne, ba aÅ¾ deÅ¡truktÃ­vne rozhodnutia, ktorÃ½m treba, napriek veÄ¾kÃ©mu nutkaniu, odolaÅ¥."
369,161,0.481,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.24. MenovÃ¡ bezhotovostnÃ¡ platba Kurz, ktorÃ½ banka pouÅ¾ije pre prevode sumy z originÃ¡lnej meny na menu ÃºÄtu, bÃ½va zvyÄajne zo Å¡tandardnÃ©ho kurzovÃ©ho lÃ­stku banky. KurzovÃ½ lÃ­stok zverejÅuje banka kaÅ¾dÃ½ pracovnÃ½ deÅ9, priÄom vo vÃ½nimoÄnÃ½ch prÃ­padoch (pri veÄ¾kÃ½ch zmenÃ¡ch na burze) mÃ´Å¾e zverejniÅ¥ aj viacero kurzovÃ½ch lÃ­stkov v rÃ¡mci jednÃ©ho dÅa. KurzovÃ½ lÃ­stok obsahuje pre kaÅ¾dÃº menu, s ktorou banka obchoduje, Å¡esÅ¥ hodnÃ´t, ktorÃ© vzniknÃº kombinÃ¡ciou dvoch typov hodnÃ´t: ï· Valuty (hotovostnÃ© peniaze) alebo devÃ­zy (bezhotovostnÃ©, elektronickÃ© peniaze). BankovnÃ­ctvo nemÃ¡ pre uvedenÃ½ typ spoloÄnÃ½ nÃ¡zov. V tejto uÄebnici budeme pouÅ¾Ã­vaÅ¥ pracovnÃ½ nÃ¡zov forma peÅazÃ­. ï· NÃ¡kup (t. j. banka nakupuje zahraniÄnÃº menu od klienta), stred (pouÅ¾Ã­va sa pri neutrÃ¡lnych operÃ¡ciÃ¡ch) alebo predaj (t. j. banka predÃ¡va zahraniÄnÃº menu klientovi). Pre uvedenÃ© hodnoty neexistuje v bankovnÃ­ctve spoloÄnÃ½ nÃ¡zov. V tejto uÄebnici budeme pre ne pracovne pouÅ¾Ã­vaÅ¥ termÃ­n smer kurzu. VlastnÃ½ kurzovÃ½ lÃ­stok si nemusia viesÅ¥ iba banky, ale aj ÄalÅ¡ie vÃ½znamnÃ© finanÄnÃ© inÅ¡titÃºcie. PrÃ­kladom nebankovÃ½ch finanÄnÃ½ch inÅ¡titÃºciÃ­, ktorÃ© pouÅ¾Ã­vajÃº vlastnÃ© kurzovÃ© lÃ­stky, sÃº naprÃ­klad kartovÃ© spoloÄnosti (MasterCard a inÃ©)."
94,71,0.481,Sprievodca svetom vedeckÃ©ho publikovania,"uÅ¾itoÄnejÅ¡ie mÃ´cÅ¥ si preÄÃ­taÅ¥, ako problÃ©my prekonal. Na zÃ¡ver metodickej Äasti patrÃ­ odsek o Å¡tatistickom spracovanÃ­ vÃ½sledkov (pouÅ¾itÃ© testy vrÃ¡tane zdÃ´vodnenia, nÃ¡zov a verzia Å¡tatistickÃ©ho softvÃ©ru, zvolenÃ¡ hladina vÃ½znamnosti)."
239,39,0.481,Ãvod do matematickej logiky,"Pravidlo nahradenia ekvivalentnyÌch formuÌl V nasledujuÌcich cvicÌeniach maÌme mnozÌstvo formuÌl, ktoreÌ treba dokaÌzatâ (odvoditâ). V doÌkazoch moÌzÌete vyuzÌÄ±Ìvatâ pravidlo nahradenia ekvivalentnyÌch formuÌl, ktoreÌ sme sÄ±Ìce nedokaÌzali, avsÌak jeho doÌkaz sa daÌ spravitâ podobnyÌm spoÌsobom ako sa dokaÌzala veta o dedukcii, cÌi Veta 2.13. Veta 2.14 (pravidlo nahradenia ekvivalentnyÌch formuÌl). Nech platÄ±Ì tvrdenie T â¢ A a nech suÌ formuly P a Q navzaÌjom ekvivalentneÌ. To znamenaÌ, zÌe platÄ±Ì â¢ P â Q aj â¢ Q â P . Nahradâme niektoreÌ podformuly P v T âª {A} formulou Q a oznacÌme modifikovanuÌ mnozÌinu predpokladov symbolom T â² a modifikovanuÌ formulu A symbolom Aâ² . Potom platÄ±Ì T â² â¢ Aâ² . Vo VetaÌch 2.6 a 2.7 sme dokaÌzali â¢ q q A â A a â¢ A â q q A. Vieme teda, zÌe A a q q A suÌ navzaÌjom ekvivalentneÌ formuly a lâubovolânyÌ vyÌskyt formuly A moÌzÌeme nahraditâ formulou q q A a naopak. DÌalsÌie dvojice ekvivalentnyÌch formuÌl tvoria podlâa vety o obraÌtenej implikaÌcii formuly A â B a q B â q A, dâalej formuly A â q B a B â q A, ako aj formuly q A â B a q B â A. Vo vsÌetkyÌch tyÌchto prÄ±Ìpadoch moÌzÌeme vyuzÌitâ pravidlo nahradenia ekvivalentnyÌch formuÌl, ale v zÌiadnych inyÌch, pretozÌe pre ineÌ dvojice P a Q sme nedokaÌzali â¢ P â Q a zaÌrovenÌ â¢ Q â P ."
369,169,0.481,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.29. Vzor ÃÄet TabuÄ¾ka 3.1 mÃ¡ jeden podstatnÃ½ nedostatok. Stranu zÃ¡vÃ¤zku, t. j. kto komu dlÅ¾Ã­, sme v nej oznaÄovali znamienkom. ProblÃ©m vznikÃ¡ pri stornÃ¡ch operÃ¡ciÃ­, ktorÃ© sa nesmÃº evidovaÅ¥ ako vymazanie operÃ¡cie (so zahÄ¾adenÃ­m stÃ´p), ale osobitnou operÃ¡ciou so sumou s opaÄnÃ½m znamienkom. Z uvedenÃ©ho dÃ´vodu rozdelÃ­me stÄºpec Suma z tabuÄ¾ky 3.1 na dva stÄºpce: kredit a debet. Do stÄºpca kredit budeme zapisovaÅ¥ kreditnÃ© ÃºÄtovÃ© zÃ¡pisy (pÃ´vodnÃ© sumy so znamienkom plus) a do stÄºpce debet budeme zapisovaÅ¥ debetnÃ© ÃºÄtovÃ© zÃ¡pisy (pÃ´vodnÃ© sumy so znamienkom mÃ­nus). Sumy v novej tabuÄ¾ke budeme pri evidencii v dvoch stÄºpcoch Å¡tandardne pÃ­saÅ¥ bez znamienka, Äo bude zodpovedaÅ¥ znamienku plus. Pri sumÃ¡ch budeme pÃ­saÅ¥ iba znamienko mÃ­nus â v prÃ­pade, Å¾e ide o operÃ¡ciu storna. V sÃºlade s terminolÃ³giou ÃºÄtovnÃ­ctva stÄºpec s nÃ¡zvom OperÃ¡cia premenujeme na ÃÄtovnÃ½ zÃ¡pis a stÄºpec CelkovÃ½ stav zÃ¡vÃ¤zku premenujeme na nÃ¡zov Stav ÃºÄtu. VÃ½sledok poskytuje tabuÄ¾ka 3.2."
94,413,0.481,Sprievodca svetom vedeckÃ©ho publikovania,"Z priestorovÃ½ch dÃ´vodov sa nebudeme venovaÅ¥ obchodnÃ½m modelom zÃ­skavania/nÃ¡kupu EIZ ani technickÃ½m nÃ¡leÅ¾itostiam implementÃ¡cie. PozornosÅ¥ upriamime na azda najdÃ´leÅ¾itejÅ¡iu ÄasÅ¥ celÃ©ho Å¾ivotnÃ©ho cyklu, a to je fÃ¡za evaluÃ¡cie elektronickÃ½ch informaÄnÃ½ch zdrojov v kniÅ¾nici."
122,141,0.48,Modelovanie softvÃ©ru,"9.4 ParametrizÃ¡cia v UML UML nepodporuje priamo modelovanie vlastnostÃ­. Mohol by vÅ¡ak byÅ¥ rozÅ¡Ã­renÃ½ v tomto zmysle [Vn06]. PrÃ­padne mÃ´Å¾eme jestvujÃºcim prvkom, akÃ½mi sÃº triedy a prÃ­pady pouÅ¾itia, prisÃºdiÅ¥ vÃ½znam vlastnostÃ­, a tak zÃ­skaÅ¥ komplexnÃº podporu modelovania vlastnostÃ­ bez potreby zÃ¡sahu do UML [Gom04]. Variabilita je to, Äo je premenlivÃ©, a jeden zo spÃ´sobov regulÃ¡cie premenlivosti je parametrizÃ¡cia. ObrÃ¡zok 9.5, zopakovanÃ½ z Äasti 5.3, pripomÃ­na Å¡ablÃ³nu triedy a viazanie parametrov prostrednÃ­ctvom vzÅ¥ahu Â«bindÂ»."
184,288,0.48,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Pre kaÅ¾dÃº sÃºborovÃº sluÅ¾bu je zÃ¡kladnou otÃ¡zkou: âÄo je sÃºbor?â. Existuje viacero definÃ­ciÃ­ sÃºborov, priÄom jedna z nich je nasledujÃºca: SÃºbory predstavujÃº abstraktnÃ½ mechanizmus, ktorÃ½ poskytuje spÃ´sob na ukladanie informÃ¡ciÃ­ na disk a ich neskorÅ¡ie ÄÃ­tanie (Silberschatz & Galvin, 1998). Vo vÃ¤ÄÅ¡ine operaÄnÃ½ch systÃ©mov ako naprÃ­klad UNIX a MS-DOS je sÃºbor neinterpretovanÃ¡ postupnosÅ¥ slabÃ­k. VÃ½znam a Å¡truktÃºra informÃ¡ciÃ­ v sÃºboroch je Ãºplne ponechanÃ¡ na aplikaÄnÃ© programy, pre operaÄnÃ½ systÃ©m je neznÃ¡ma. V starÅ¡Ã­ch (mainframe) systÃ©moch existuje veÄ¾a rÃ´znych typov sÃºborov, priÄom kaÅ¾dÃ½ typ mÃ¡ rÃ´zne vlastnosti. SÃºbor mÃ´Å¾e byÅ¥ koncipovanÃ½ naprÃ­klad ako sekvencia zÃ¡znamov (podobne ako v operaÄnÃ½ch systÃ©moch OS/400 a IBM i5/OS (Scholerman et al., 1993)), priÄom operaÄnÃ½ systÃ©m tieto zÃ¡znamy ÄÃ­ta a zapisuje. ZÃ¡znam je zvyÄajne Å¡pecifikovanÃ½ svojim ÄÃ­slom zÃ¡znamu (pozÃ­cia v sÃºbore) alebo hodnotou niektorej z poloÅ¾iek zÃ¡znamu. OperaÄnÃ½ systÃ©m mÃ´Å¾e udrÅ¾iavaÅ¥ sÃºbory tieÅ¾ ako binÃ¡rne stromy alebo inÃ© vhodnÃ© ÃºdajovÃ© Å¡truktÃºry, prÃ­padne pouÅ¾Ã­vaÅ¥ heÅ¡ovacie tabuÄ¾ky na rÃ½chle nÃ¡jdenie zÃ¡znamu. VÃ¤ÄÅ¡ina sÃºÄasnÃ½ch sÃºborovÃ½ch systÃ©mov uprednostÅuje ponÃ­manie sÃºborov ako sekvenciu slabÃ­k pred sekvenciou zÃ¡znamov s kÄ¾ÃºÄmi. SÃºbory mÃ´Å¾u maÅ¥ atribÃºty, ktorÃ© predstavujÃº Äasti informÃ¡ciÃ­ o nich, avÅ¡ak netvoria ich sÃºÄasÅ¥. TypickÃ½mi atribÃºtmi sÃº naprÃ­klad vlastnÃ­k, veÄ¾kosÅ¥ sÃºboru, dÃ¡tum vytvorenia a prÃ­stupovÃ© prÃ¡va. SÃºborovÃ© sluÅ¾by poskytujÃº primitÃ­vy na ÄÃ­tanie a zÃ¡pis tÃ½chto atribÃºtov. UmoÅ¾ÅujÃº naprÃ­klad zmeniÅ¥ prÃ­stupovÃ© prÃ¡va sÃºboru, nie vÅ¡ak zmeniÅ¥ jeho veÄ¾kosÅ¥ (bez zmeny obsahu). NiektorÃ© novÅ¡ie systÃ©my poskytujÃº okrem Å¡tandardnÃ½ch atribÃºtov aj operÃ¡cie na vytvÃ¡ranie a manipulÃ¡ciu s prÃ­stupovÃ½mi zoznamami â ACL (GrÃ¼nbacher, 2003) ako aj s pouÅ¾Ã­vateÄ¾mi definovanÃ½mi atribÃºtmi. Tieto prÃ­stupovÃ© zoznamy spolu s pouÅ¾Ã­vateÄ¾mi definovanÃ½mi atribÃºtmi podstatne rozÅ¡irujÃº bezpeÄnosÅ¥ systÃ©mu a jeho moÅ¾nosti vyuÅ¾itia. V operaÄnÃ½ch systÃ©moch ako naprÃ­klad UNIX a Linux existujÃº aj inÃ©, ako len ÃºdajovÃ© (regulÃ¡rne) sÃºbory. V tÃ½chto systÃ©moch predstavujÃº niektorÃ© druhy sÃºborov abstrakciu nad zariadeniami poÄÃ­taÄa. Pravdepodobne najznÃ¡mejÅ¡Ã­m takÃ½mto sÃºborovÃ½m systÃ©mom je sÃºborovÃ½ systÃ©m DevFS (Kroah-Hartman, 2003). Okrem reprezentÃ¡cie blokovÃ½ch a znakovÃ½ch zariadenÃ­ tu mÃ´Å¾u sÃºbory reprezentovaÅ¥ aj pomenovanÃ© dÃ¡tovody alebo sokety."
43,152,0.48,Objektovo orientovanÃ© programovanie v C++,VÃ½stup mÃ´Å¾e vyzeraÅ¥ takto Na adrese 0x22ff74 je zapisana hodnota 5 Na adrese 0x22ff70 je zapisana hodnota 3 Na adrese 0x22ff6c je zapisana hodnota 1 Na adrese 0x3e24a0 je zapisana hodnota 9 Na adrese 0x3e2508 je zapisana hodnota 15
265,262,0.48,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Oba pojmy oznaÄujÃº softvÃ©r (nazvime ho jednotne znovupouÅ¾itÃ½ softvÃ©r), ktorÃ½ vytvoril niekto inÃ½ a my ho (znovu)vyuÅ¾Ã­vame v nami vyvÃ­janom softvÃ©ri (ktorÃ½ by sme analogicky mohli nazvaÅ¥ klientsky softvÃ©r; pouÅ¾Ã­va sa vÅ¡ak skÃ´r pojem klientsky kÃ³d)."
76,403,0.48,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"UrÄte kritickÃº oblasÅ¥ K veÄ¾kosti 0.05 (t. j. hladina testu sa mÃ¡ rovnaÅ¥ 0.05) a nÃ¡jdite silu testu zaloÅ¾enÃ©ho na K, keÄ skutoÄnÃ¡ hodnota = 12. Porovnajte nÃ¡jdenÃº hodnotu sily tohoto testu so silou v teste z Ãºlohy 8.5.7. 8.5.9 Automat zabezpeÄuje vÃ¡Å¾enie a balenie 250 gramovÃ½ch balÃ­Äkov mletej kÃ¡vy. Na overenie sprÃ¡vnosti jeho nastavenia sme nÃ¡hodne vybrali 10 balenÃ­ a presnÃ½m vÃ¡Å¾enÃ­m sme dostali hmotnosti (v gramoch) 248.2 253.4 255.3 253.6 252.7 253.3 254.1 246.2 249.4 249.2 Na hladine 0.05 preveÄte test hypotÃ©zy o tom, Å¾e funkcia vÃ¡Å¾enia pracuje bezchybne. 8.5.10 VÃ½robca deklaruje, Å¾e strednÃ¡ hodnota bezporuchovej prÃ¡ce vÃ½robkov istÃ©ho typu je aspoÅ 1500 hodÃ­n. NÃ¡hodne sme vybrali 12 vÃ½robkov tohoto typu a odmerali Äasy ich bezporuchovej prÃ¡ce:"
59,178,0.48,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"RedundantnosÅ¥ zobrazenia genotypu na fenotyp znamenÃ¡, Å¾e danÃ½ obraz â fenotyp mÃ¡ mnoho rÃ´znych argumentov â genotypov, alebo inÃ¡Ä povedanÃ©, spÃ´sob kÃ³dovania fenotypu je vysoko redundantnÃ½ â nadbytoÄnÃ½. V opaÄnom prÃ­pade hovorÃ­me, Å¾e zobrazenie y = f(x) nie je redundantnÃ©, ak kaÅ¾dÃ©mu obrazu y existuje len jeden argument x, t. j. ak zobrazenie je 1-1-znaÄnÃ©."
195,11,0.479,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov Å tandardnÃ½mi kvantitatÃ­vnymi metrikami, ktorÃ© sÃº pri validÃ¡cii odporÃºÄacÃ­ch systÃ©mov Å¡iroko pouÅ¾Ã­vanÃ© a to dokonca aj mimo domÃ©ny OSSI, sÃº pokrytie, presnosÅ¥ a ich kombinÃ¡cia zvanÃ¡ F-skÃ³re [6, 17, 24]. Pomocou pokrytia je moÅ¾nÃ© jednoznaÄne identifikovaÅ¥, ako komplexne odporÃºÄanie pokrÃ½va mnoÅ¾inu existujÃºcich rieÅ¡enÃ­. To znamenÃ¡ zistiÅ¥, akÃº ÄasÅ¥ z moÅ¾nÃ½ch rieÅ¡enÃ­ dokÃ¡Å¾e systÃ©m pre pouÅ¾Ã­vateÄ¾a nÃ¡jsÅ¥ a odporuÄiÅ¥. PresnosÅ¥ vyjadruje mieru relevantnÃ½ch odporÃºÄanÃ­ voÄi vÅ¡etkÃ½m odporuÄenÃ½m. To znamenÃ¡, Å¾e metrika hovorÃ­ o tom, koÄ¾ko z odporÃºÄanÃ­ bolo v danej chvÃ­li vhodnÃ½ch. Pokrytie a presnosÅ¥ sa v praxi javia ako nepriamoÃºmernÃ©. Ak jedna rastie, druhÃ¡ klesÃ¡. Z tohto dÃ´vodu bola zavedenÃ¡ metrika F-skÃ³re, ktorÃ¡ vyjadruje pomer medzi nimi a dokÃ¡Å¾e presne vyjadriÅ¥, ktorÃ© nastavenie systÃ©mu poskytuje lepÅ¡Ã­ vÃ½sledok â teda vhodnejÅ¡iu kombinÃ¡ciu dosahovanÃ½ch vÃ½sledkov oboch metrÃ­k. 1.1.8 Interakcia ValidÃ¡cia vytvorenÃ©ho odporÃºÄacieho systÃ©mu sa z pohÄ¾adu jeho interakcie s pouÅ¾Ã­vateÄ¾mi robÃ­ pomocou rozliÄnÃ½ch typov interakcie. Typ zvolenÃ½ pre konkrÃ©tny odporÃºÄacÃ­ systÃ©m zÃ¡visÃ­ od zamerania pouÅ¾Ã­vateÄ¾ov danÃ©ho systÃ©mu. V prÃ­pade, Å¾e sÃº pouÅ¾Ã­vateÄ¾mi systÃ©mu vÃ½vojÃ¡ri, sledujeme podporu ich prÃ¡ce pri vÃ½voji softvÃ©ru, Äas odozvy odporÃºÄaÄa [1, 5, 13], mieru nÃ¡roÄnosti jeho pouÅ¾itia (preferovanÃ¡ je Äo najniÅ¾Å¡ia), Äi struÄnosÅ¥ a vÃ½stiÅ¾nosÅ¥ vÃ½sledkov [12, 16, 19]. Druhou a znaÄne odliÅ¡nou skupinou cieÄ¾ovÃ½ch pouÅ¾Ã­vateÄ¾ov sÃº vÃ½skumnÃ­ci. Tu nÃ¡s zaujÃ­majÃº najmÃ¤ moÅ¾nosti porovnania s inÃ½mi rieÅ¡eniami â teda inÃ½mi odporÃºÄaÄmi. DÃ´leÅ¾itÃ© vlastnosti interakcie so systÃ©mom, ktorÃ© meriame nezÃ¡visle od typu jeho pouÅ¾Ã­vateÄ¾ov sÃº najmÃ¤ dostupnosti systÃ©mu ako takÃ©ho a tieÅ¾ dÃ¡t, s ktorÃ½mi pracuje. V prÃ­pade systÃ©mu (vyvÃ­janÃ©ho, nie odporÃºÄaÄa) nÃ¡s zaujÃ­majÃº jeho softvÃ©rovÃ© artefakty, napr. Äi majÃº pouÅ¾Ã­vatelia k dispozÃ­cii celÃ½ jeho zdrojovÃ½ kÃ³d alebo len jeho ÄasÅ¥, Äi len binÃ¡rne sÃºbory [7, 8, 11, 19]. TieÅ¾ je dÃ´leÅ¾itÃ©, Äi majÃº k dispozÃ­cii doplÅujÃºce informÃ¡cie, napr. opis systÃ©mu, dokumentÃ¡ciu alebo vÃ´bec niÄ. Z pohÄ¾adu dostupnosti dÃ¡t rozliÅ¡ujeme najmÃ¤, Äi majÃº pouÅ¾Ã­vatelia k dispozÃ­cii ÃºplnÃ© dÃ¡ta alebo len vÃ½sledky [14]. Na zÃ¡klade dÃ¡t sa totiÅ¾ dajÃº robiÅ¥ ÄalÅ¡ie experimenty a sledovaÅ¥ novÃ© vlastnosti systÃ©mu. HotovÃ© vÃ½sledky sÃº na ÄalÅ¡iu prÃ¡cu zvÃ¤ÄÅ¡a pouÅ¾iteÄ¾nÃ© v znaÄne obmedzenejÅ¡ej miere."
190,337,0.479,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"ÃplnosÅ¥ je miera, do akej sÃºÄiastka implementuje vÅ¡etky poÅ¾adovanÃ© schopnosti. Pre ÄÃ­selnÃ© vyjadrenie sa pouÅ¾Ã­vajÃº prÃ­Äiny a efekty danÃ© na zÃ¡klade Å¡pecifikÃ¡cie (angl. cause and effect graphing). Podmienky zo Å¡pecifikÃ¡cie so Å¾iadnym efektom a efekty bez Å¾iadnych podmienok sa identifikujÃº ako nejasnosti. VÃ½sledkom je vyjadrenie poÄtu zostÃ¡vajÃºcich nejasnostÃ­ a neÃºplnostÃ­:"
94,268,0.479,Sprievodca svetom vedeckÃ©ho publikovania,"8.3 RepozitÃ¡re RepozitÃ¡r (repository) je digitÃ¡lny archÃ­v, Å¡truktÃºrovanÃ© dÃ¡tovÃ© ÃºloÅ¾isko, ktorÃ©ho prevÃ¡dzkovateÄ¾ poskytuje pouÅ¾Ã­vateÄ¾om sluÅ¾by sÃºvisiace s ukladanÃ­m dokumentov, organizÃ¡ciou ich vyhÄ¾adateÄ¾nosti, dostupnosti a dlhodobÃ©ho uchovÃ¡vania (Lynch 2003). TermÃ­n digitÃ¡lny repozitÃ¡r zaviedli v roku 1995 Robert Kahn a Robert Wilensky (Kahn a Wilensky 1995, 2006). Autori koncipovali teoretickÃ© princÃ­py otvorenÃ©ho univerzÃ¡lneho informaÄnÃ©ho systÃ©mu, znÃ¡meho pod nÃ¡zvom Kahn-Wilensky Framework (KWF). Definovali komponenty otvorenÃ©ho systÃ©mu na uchovÃ¡vanie, prÃ­stup a manaÅ¾ment (organizÃ¡ciu, riadenie) informÃ¡ciÃ­, priÄom architektÃºru systÃ©mu oddeÄ¾ujÃº od uchovÃ¡vanÃ©ho obsahu. DigitÃ¡lny repozitÃ¡r/informaÄnÃ½ systÃ©m predstavuje organizovanÃº zbierku digitÃ¡lnych dokumentov zhromaÅ¾denÃº za ÃºÄelom ich dlhodobÃ©ho uchovÃ¡vania, priÄom zabezpeÄuje ich profesionÃ¡lnu ochranu, integritu, autenticitu a sprÃ­stupnenie. V sÃºvislosti so zakladanÃ­m repozitÃ¡rov mÃ´Å¾eme odlÃ­Å¡iÅ¥ dve zÃ¡kladnÃ© koncepcie: inÅ¡titucionÃ¡lne repozitÃ¡re ako ÃºloÅ¾iskÃ¡ pÃ´vodne urÄenÃ© pre potreby konkrÃ©tnej inÅ¡titÃºcie, fungujÃºce ako relatÃ­vne uzavretÃ© systÃ©my so sluÅ¾bami orientovanÃ½mi dovnÃºtra inÅ¡titÃºcie a otvorenÃ© pre-printovÃ© repozitÃ¡re. PrvÃ½m reprezentantom skupiny otvorenÃ½ch repozitÃ¡rov je ArXiv (od roku 1991, detailnejÅ¡ie o Åom v kapitole 1.4.11 a 4.4.2), v ktorom zaÄali ÄasticovÃ­ 122 https://clockss.org/clockss/Home 123 https://www.portico.org/ 124 https://www.jstor.org/ 125 https://www.hathitrust.org/"
196,189,0.479,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"zdrojovÃ½ kÃ³d na slajd. Jednou z moÅ¾nostÃ­ je pouÅ¾itie balÃ­ka listings [21] tak ako aj v prÃ­pade inÃ½ch tried dokumentu v LATEXu, avÅ¡ak slajdu je potrebnÃ© nastavitâ nepovinnÃ½ parameter fragile a nÃ¡sledne zdrojovÃ½ kÃ³d uviestâ v rÃ¡miku."
239,207,0.479,Ãvod do matematickej logiky,"VsÌimnime si, zÌe kedâ sa v operaÌciaÌch q, â§, â¨, â a â obmedzÄ±Ìme na ohodnotenia 0 a 1, dostaneme vyÌsledky ako v klasickej dvojhodnotovej logike. DruheÌ pozorovanie je, zÌe A â B a q A â¨ B uzÌ nie suÌ ekvivalentneÌ formuly. To vieme zistitâ pomocou pravdivostnyÌch tabuliek. PrÄ±Ìklad. Pomocou pravdivostnyÌch tabuliek ukaÌzÌte, zÌe v trojhodnotovej logike A â B a q A â¨ B nie suÌ ekvivalentneÌ formuly, teda nenadobuÌdajuÌ pre lâubovolâneÌ ohodnotenie prvotnyÌch formuÌl rovnakeÌ hodnoty."
184,130,0.478,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"AlokÃ¡cia komponentov Po vÃ½bere rÃ¡mca zaloÅ¾enÃ©ho na architektonickÃ½ch vzoroch treba definovaÅ¥ hlavnÃ© komponenty architektÃºry: Â identifikovaÅ¥ hlavnÃ© komponenty a spÃ´sob akÃ½m sÃº zasadenÃ© do rÃ¡mca, Â identifikovaÅ¥ rozhrania a sluÅ¾by, ktorÃ© budÃº jednotlivÃ© komponenty ponÃºkaÅ¥, Â identifikovaÅ¥ zodpovednosti komponentov, Â identifikovaÅ¥ zÃ¡vislosti medzi komponentmi, Â identifikovaÅ¥ tie Äasti architektÃºry, ktorÃ© mÃ´Å¾u byÅ¥ distribuovanÃ© na rÃ´znych serveroch po sieti. Komponenty, z ktorÃ½ch je postavenÃ¡ architektÃºra sÃº hlavnÃ½mi abstrakciami v aplikÃ¡cii. Nie je prekvapenÃ­m, Å¾e existuje podobnosÅ¥ medzi nÃ¡vrhom komponentov architektÃºry a objektovo-orientovanÃ½m nÃ¡vrhom. Diagramy tried a balÃ­kov sa Äasto pouÅ¾Ã­vajÃº na opis komponentov architektÃºry a vzÅ¥ahov medzi nimi. Pri nÃ¡vrhu komponentov je vhodnÃ©: Â MinimalizovaÅ¥ zÃ¡vislosti medzi komponentmi. VÅ¾dy sa treba snaÅ¾iÅ¥ vytvÃ¡raÅ¥ komponenty medzi ktorÃ½mi je slabÃ¡ previazanosÅ¥, aby zmena jednÃ©ho komponentu nevyÅ¾adovala zmenu celÃ©ho radu ÄalÅ¡Ã­ch komponentov v ostatnÃ½ch"
59,437,0.478,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Pre kaÅ¾dÃ½ argument zostrojÃ­me prÃ­sluÅ¡nÃ© schÃ©ma usudzovania prirodzenej dedukcie, pomocou ktorÃ©ho z predpokladov argumentu uvedenÃ½ch v zloÅ¾enÃ½ch zÃ¡tvorkÃ¡ch zostrojÃ­me dÃ´sledok (pozri tabuÄ¾ku 8.3). Strom argumentÃ¡cie mÃ¡ tvar znÃ¡zornenÃ½ na Obr. 8.9."
59,501,0.478,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 10.1. RÃ´zne reprezentÃ¡cie agentov. (A) HypotetickÃ½ agent, ktorÃ½ obsahuje percepÄnÃ½ orgÃ¡n (vidÃ­), vÃ½stupy z tohto orgÃ¡nu vstupujÃº do kognitÃ­vneho orgÃ¡nu â mozgu, motorickÃ© vÃ½stupy z tohto mozgu riadia pohybovÃ© orgÃ¡ny agenta. (B) Mechanicko-elektronickÃ½ agent â Å¡vÃ¡b, ktorÃ½ sa dokÃ¡Å¾e v prostredÃ­ pohybovaÅ¥ pomocou 6 nÃ´h a optickÃ½m Äidlom (zrakom) vnÃ­ma okolie. Pohyb agenta je riadenÃ½ malou neurÃ³novou sieÅ¥ou. (C) JaponskÃ¡ robotickÃ¡ hraÄka pes Aibo, dokÃ¡Å¾e sa pohybovaÅ¥, vnÃ­ma svoje okolie, snÃ­ma hlasovÃ© povely, atÄ."
59,448,0.478,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ProblÃ©my ProblÃ©m 8.1. Ako je Å¡pecifikovanÃ½ argument? ProblÃ©m 8.2. Nech ï ï½ ï»ï¡,ï¡ ï ï¢, ï§ ï ïï¢, ï§ ,ï¤,ï¤ ï ï¢,ïï¡ ,ïï§ï½ , potom nad touto mnoÅ¾inou Å¡pecifikujte vÅ¡etky moÅ¾nÃ© argumenty. ProblÃ©m 8.3. Ako je definovanÃ¡ relÃ¡cia âkonzervatÃ­vnÃ½â argument?"
76,9,0.478,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Teraz niekoÄ¾ko myÅ¡lienok ku kolegom, ktorÃ­ budÃº pri svojej prÃ¡ci text pouÅ¾Ã­vaÅ¥. ÃvodnÃ½ kurz pravdepodobnosti a Å¡tatistiky by mal pripraviÅ¥ Å¡tudenta do tej miery, aby si v budÃºcich kontaktoch so stochastikou vedel poradiÅ¥. Pre Å¡tudenta informatiky to napr. znamenÃ¡ byÅ¥ pripravenÃ½ Å¡tudovaÅ¥ problematiku MarkovovÃ½ch reÅ¥azcov. Aj na toto som myslel pri koncipovanÃ­ (pomerne obsiahlej) prvej kapitoly, konkrÃ©tne ÄlÃ¡nku o podmienenej pravdepodobnosti. Na druhej strane, pri spoluprÃ¡ci s informatikmi som pochopil, Å¾e keÄ vytvoria nejakÃ½ IT produkt, potrebujÃº disponovaÅ¥ prostriedkami, ktorÃ½mi preukÃ¡Å¾u prÃ­nos svojho vÃ½robku (mÃ¡m na mysli napr. Å¡tatistickÃ© testy o strednÃ½ch hodnotÃ¡ch dvoch nÃ¡hodnÃ½ch veliÄÃ­n). Aj keÄ to kolegyne Majka a Gabika nemÃ´Å¾u tuÅ¡iÅ¥, prÃ¡ve oni iniciovali zaradenie ÄlÃ¡nku 8.4 do tejto uÄebnice. PretoÅ¾e predmet PaS sa ocitol (na moje prekvapenie) uÅ¾ v prvom roÄnÃ­ku FIIT, zo Å¡tatistiky v Åom ide len o absolÃºtne zÃ¡klady. SkutoÄnÃ¡ Å¡tatistika, samozrejme, pracuje s reÃ¡lnymi dÃ¡tami, Äo dnes znamenÃ¡ pracovaÅ¥ v nejakom vÃ½poÄtovom prostredÃ­. To by sa mohlo realizovaÅ¥, podÄ¾a mojej mienky, v rÃ¡mci ÄalÅ¡ieho predmetu, tentoraz venovanÃ©mu vÃ½hradne Å¡tatistike (lebo zÃ¡klady pravdepodobnosti podanÃ© v tomto texte iste postaÄujÃº). Nakoniec by som rÃ¡d poÄakoval obom recenzentom za ochotu venovaÅ¥ sa tomuto textu, za cennÃ© pripomienky, ktorÃ© text zlepÅ¡ili a za priaznivÃº kritiku. Moje poÄakovanie patrÃ­ aj Katke Jelemenskej, ktorÃ¡ â moÅ¾no to nevie â veÄ¾kou mierou ovplyvnila moje uÄiteÄ¾ovanie (vÄaka akejsi zhode nÃ¡hod a poskytnutÃ­ HP tabletu). Äakujem aj Majke Bielikovej za dÃ´veru a za Äas, ktorÃ½ mi ochotne venovala pri finÃ¡lnom formÃ¡tovanÃ­ textu."
76,336,0.478,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ktorÃ¡ â ako vieme â je sÃ­ce vychÃ½lenÃ½ odhad ï³2, mÃ¡ menÅ¡iu strednÃº kvadratickÃº chybu ako . To je dÃ´vod, preÄo niekedy dÃ¡vame prednosÅ¥ pred . Nakoniec hovorme o odhade smerodajnej odchÃ½lky ï³. Z poznÃ¡mky 6.3.5 vieme, Å¾e na odhad ï³ pouÅ¾ijeme Å¡tatistiku"
43,105,0.478,Objektovo orientovanÃ© programovanie v C++,"PrÃ­klad. NapÃ­Å¡me program, ktorÃ½ vytvorÃ­ graf funkcie z(x, y) = x2 + y2 vo forme 2D obrÃ¡zku. Funkcia sa bude vyÄÃ­sÄ¾ovaÅ¥ na intervale [â1, 1] Ã [â1, 1]. Pri rieÅ¡enÃ­ tejto Ãºlohy postupujeme tak, Å¾e kaÅ¾dÃ½ z intervalov sa rozdelÃ­ na 200 rovnakÃ½ch podintervalov. DÄºÅ¾ka jednÃ©ho podintervalu bude teda 0,01. TÃ½m dostaneme sieÅ¥ 201 Ã 201 rovnomerne rozloÅ¾enÃ½ch uzlovÃ½ch bodov. KaÅ¾dÃ½ z tÃ½chto bodov bude predstavovaÅ¥ jeden pixel obrÃ¡zku. Hodnotu z pre kaÅ¾dÃ½ pixel uloÅ¾Ã­me do sÃºboru v binÃ¡rnej forme. FunkÄnÃ© hodnoty budÃº typu ï¬oat."
369,45,0.477,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 1.8. Diagram pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov Podobne ako diagram tried je aj pouÅ¾Ã­vateÄ¾skÃ½ scenÃ¡r na typovej Ãºrovni, t. j. opisuje vÅ¡eobecnÃº postupnosÅ¥ interakciÃ­, nie postupnosÅ¥ interakciÃ­ vykonanÃº konkrÃ©tnym pouÅ¾Ã­vateÄ¾om v konkrÃ©tnom Äase. (PouÅ¾Ã­vateÄ¾skÃ½ scenÃ¡r v textovej Å¡pecifikÃ¡cii preto obsahuje aj alternatÃ­vy a vÃ½nimoÄnÃ© situÃ¡cie. Tieto majÃº byÅ¥ oddelenÃ© od hlavnej postupnosti interakciÃ­.) PodrobnejÅ¡ie informÃ¡cie o diagrame pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov, vrÃ¡tane moÅ¾nosti podscenÃ¡rov (relÃ¡cia zahÅÅa, angl. âincludeâ) a rozÅ¡Ã­renÃ½ch scenÃ¡rov (relÃ¡cia rozÅ¡iruje, angl. âextendâ) je moÅ¾nÃ© nÃ¡jsÅ¥ v [Booch 1998] a v [UML 2009]. V tejto uÄebnici budeme diagram pouÅ¾Ã­vateÄ¾skÃ½ch scenÃ¡rov pouÅ¾Ã­vaÅ¥ iba v obmedzenej miere; ako doplnok dÃ¡tovÃ©ho modelu v prÃ­pade, Å¾e z dÃ¡tovÃ©ho modelu nebudÃº zrejmÃ© funkcie, ktorÃ© by mal Å¡pecifikovanÃ½ systÃ©m poskytovaÅ¥."
240,331,0.477,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-26 NapÃ­Å¡te program, ktorÃ½ pre kladnÃ© celÃ© ÄÃ­slo n (typ int) na vstupe vypÃ­Å¡e na vÃ½stup hodnotu faktoriÃ¡lu n! Program navrhnite tak, aby dokÃ¡zal rÃ½chlo pracovaÅ¥ s Äo najvÃ¤ÄÅ¡Ã­mi hodnotami n. Zistite, akÃ½ najvÃ¤ÄÅ¡Ã­ faktoriÃ¡l dokÃ¡Å¾e navrhnutÃ½ program vypoÄÃ­taÅ¥, ak ho nechÃ¡te beÅ¾aÅ¥ 1 minÃºtu. Stihne do 1 minÃºty vypoÄÃ­taÅ¥ faktoriÃ¡l pre n = 10 000, ktorÃ½ mÃ¡ 35 660 cifier? Stihne vypoÄÃ­taÅ¥ aj faktoriÃ¡l pre n = 100 000, ktorÃ½ mÃ¡ 456 574 cifier?"
265,101,0.477,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Kvalitu softvÃ©ru definujeme ako mieru naplnenia potrieb (zÃ¡kaznÃ­kov, pouÅ¾Ã­vateÄ¾ov), kvÃ´li ktorÃ½m softvÃ©r vytvÃ¡rame. CelkovÃ¡ kvalita softvÃ©ru je zloÅ¾enÃ¡ z viacerÃ½ch hÄ¾adÃ­sk, ktorÃ© spravidla nÃ¡jdeme medzi poÅ¾iadavkami na softvÃ©r, keÄÅ¾e poÅ¾iadavky sÃº v princÃ­pe formÃ¡lne vyjadrenie potrieb. Kvalitu softvÃ©ru mÃ´Å¾eme vnÃ­maÅ¥ z dvoch hÄ¾adÃ­sk:"
196,27,0.477,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"3.6.6 Uvedâte, ako nastavitâ farbu textu, pozadia buniek, riadkov, stlÌpcov a orÃ¡movania v tabulâke. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 3.6.7 Uvedâte, ako vloÅ¾itâ dlhÃº tabulâku cez viacero strÃ¡n. . . . . . . . . . . . . . . . . . . . 71 3.7.1 Uvedâte, ako vloÅ¾itâ do dokumentu matematickÃ½ vzorec tak, aby bol sÃºcÌastâou textu v riadku v rÃ¡mci odseku. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 3.7.2 Uvedâte, ako vloÅ¾itâ do dokumentu matematickÃ½ vzorec tak, aby bol samostatne."
393,53,0.477,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"SociÃ¡lno-psychologickÃ½ vÃ½skum agentov Aby sme pochopili podstatu agentov, vykonali sa viacerÃ© sociÃ¡lno-psychologickÃ© experimenty. MomentÃ¡lne sa zameriavajÃº na zistenie, do akej miery mÃ´Å¾u agenty podporiÅ¥ medziÄ¾udskÃº komunikÃ¡ciu a ovplyvniÅ¥ medziÄ¾udskÃ© vzÅ¥ahy. Agenty mÃ´Å¾u pÃ´sobiÅ¥ ako prostrednÃ­ky medzi Ä¾uÄmi v rÃ´znych sociÃ¡lnych rolÃ¡ch, naprÃ­klad medzi obyvateÄ¾mi a nÃ¡vÅ¡tevnÃ­kmi, starÅ¡Ã­mi a mladÅ¡Ã­mi a podobne. Vykonali sa konkrÃ©tne experimenty, na ktorÃ½ch sa zÃºÄastnili americkÃ­ a japonskÃ­ Å¡tudenti, ktorÃ­ s pomocou agentov medzi sebou diskutovali."
59,328,0.477,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1. etapa â pomocou procesu âÄisteniaâ identifikujeme agregÃ¡ty vyskytujÃºce sa v t (predpokladÃ¡me, Å¾e âupratovanieâ mÃ¡ mnoÅ¾inu X ï½ ï» x1 , x2 ,..., xn ï½ z konca 2. kapitoly, kde bol tento proces Å¡pecifikovanÃ½, rozÅ¡Ã­renÃº aj o agregÃ¡ty s1 , s2 , s3 , s4 , t.j. v naÅ¡om ilustraÄnom prÃ­klade X ï½ ï»a ,b,c ,d ,e , f , g , h, s1 , s2 , s3 , s4 ï½ ). 2. etapa â identifikovanÃ© agregÃ¡ty sÃº Äalej analyzovanÃ© pomocou procesu upratovania."
393,50,0.476,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ObrÃ¡zok 1-4. Q architektÃºra. Aj keÄ je jazyk Q implementovanÃ½ ako nadstavba jazyka Scheme, existujÃº rozhrania pre C++ a Javu umoÅ¾ÅujÃºce kombinovaÅ¥ Q a inÃ© agentskÃ© systÃ©my. ArchitektÃºra Q je rozdelenÃ¡ do dvoch vrstiev: vykonÃ¡vacej vrstvy (execution layer) a meta-vrstvy (meta-layer). Vo vykonÃ¡vacej vrstve Q interpret vyhodnocuje podnety a akcie podÄ¾a definovanÃ©ho scenÃ¡ra. Ak pri tom narazÃ­ na problÃ©m v scenÃ¡ri, prepne sa do meta-vrstvy, v ktorej Q analyzÃ¡tor vyÅ¡etrÃ­ scenÃ¡r. Na zÃ¡klade vÃ½sledkov Q analyzÃ¡tora mÃ´Å¾e dÃ´jsÅ¥ ku komunikÃ¡cii s tvorcami scenÃ¡rov. Agenty mÃ´Å¾u byÅ¥ autonÃ³mne alebo zÃ¡vislÃ©. V prÃ­pade autonÃ³mnych sÃº scenÃ¡re jednoduchÃ©, v prÃ­pade zÃ¡vislÃ½ch Å¡pecifikujÃº vÅ¡etky detaily. VÅ¡imnime si, Å¾e vÅ¡eobecnosÅ¥ (granularita) podnetov a akciÃ­ zÃ¡visÃ­ od dvoch nezÃ¡vislÃ½ch faktorov: miery autonÃ³mie agenta a stupÅa presnosti, ktorÃ½ potrebujÃº tvorcovia scenÃ¡rov."
130,378,0.476,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"VeÄ¾mi dÃ´leÅ¾itÃ½m faktorom pri nÃ¡vrhu multiagentovÃ©ho systÃ©mu je rozhodnutie, akÃ© schopnosti pridelÃ­me jednotlivÃ½m agentom pre rieÅ¡enie ich Ãºloh a koÄ¾kÃ© agenty budÃº schopnÃ© vykonÃ¡vaÅ¥ konkrÃ©tnu Ãºlohu. Je dÃ´leÅ¾itÃ© zabezpeÄiÅ¥ aby agenty v systÃ©me mali spolu dostatoÄnÃ© schopnosti aby dokÃ¡zali plniÅ¥ svoje Ãºlohy, je vÅ¡ak na nÃ¡vrhÃ¡rovi, aby tieto schopnosti rozdelil medzi jednotlivÃ© agenty. SpÃ´sob rozdelenia schopnostÃ­ medzi agenty mÃ´Å¾eme opÃ­saÅ¥ dvoma parametrami: stupÅom Å¡pecializÃ¡cie a stupÅom redundancie."
94,418,0.476,Sprievodca svetom vedeckÃ©ho publikovania,"WebovÃ© Å¡tatistiky V tomto prÃ­pade ide o Å¡tandardnÃ© spÃ´soby sledovania webovÃ½ch ukazovateÄ¾ov prostrednÃ­ctvom systÃ©mov ako je Google Analytics, WebTrends a. i. Tieto systÃ©my nÃ¡m poskytnÃº dÃ¡ta naprÃ­klad k pouÅ¾Ã­vateÄ¾skÃ©mu sprÃ¡vaniu â v ktorÃ½ch hodinÃ¡ch pouÅ¾Ã­vatelia pristupujÃº k webu, ako dlho zostÃ¡vajÃº priemerne na strÃ¡nke, atÄ. KniÅ¾niÄnÃ© systÃ©my a systÃ©my na sprÃ¡vu EIZ (ERMS, Electronic Resources Management Systems) Tieto ukazovatele poskytujÃº prehÄ¾ad o cestÃ¡ch, ktorÃ½mi pouÅ¾Ã­vatelia kniÅ¾nice k EIZ pristupujÃº."
135,192,0.476,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â dodrÅ¾a heuristiky nÃ¡vrhu a pravidlÃ¡ Å¡tÃ½lu. Na zÃ¡klade analÃ½zy topolÃ³gie systÃ©mu spolu s informÃ¡ciami o sÃºiastkach a konektoroch moÅ¾no odvodi vlastnosti celÃ©ho systÃ©mu ako aj identifikova mnohÃ© problÃ©my. Medzi takÃ©to vlastnosti a problÃ©my patria napr. vÃ½konnos, problÃ©m Ãºzkeho hrdla, otÃ¡zky paralelizmu, bezpenosti a pod."
184,77,0.475,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"SpojovacÃ­ softvÃ©r orientovanÃ½ na sprÃ¡vy (Message-Oriented Middleware, MOM) je kÄ¾ÃºÄovou technolÃ³giou pri stavbe veÄ¾kÃ½ch systÃ©mov. Je spojovacÃ­m ÄlÃ¡nkom inak nezÃ¡vislÃ½ch a samostatnÃ½ch aplikÃ¡ciÃ­, ktorÃ½ ich zoskupuje do jednÃ©ho integrovanÃ©ho celku. Tieto aplikÃ¡cie mÃ´Å¾u byÅ¥ navyÅ¡e vytvorenÃ© rÃ´znymi technolÃ³giami a nasadenÃ© na rÃ´znych platformÃ¡ch."
196,118,0.475,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"strany ako sÃº zÃ¡hlavie, pÃ¤ta a cÌÃ­slovanie strÃ¡n. Zmenu moÅ¾no realizovatâ prÃ­kazom \pagestyle{<Å¡tÃ½l>}. SÃº k dispozÃ­cii Å¡tyri Å¡tÃ½ly: â¢ plain â je prednastavenÃ½m Å¡tÃ½lom pokialâ to nie je zmenenÃ© v triede dokumentu resp. pouÅ¾itÃ½m balÃ­kom. ZabezpecÌÃ­ centrovanÃ© cÌÃ­slovanie strÃ¡n v pÃ¤te strany. â¢ empty â zÃ¡hlavie a pÃ¤ta budÃº prÃ¡zdne akurÃ¡t na strane s nÃ¡zvom kapitoly bude v pÃ¤te centrovanÃ© cÌÃ­slo strany (nie vÅ¡ak v prÃ­pade triedy article, ktorÃ¡ necÌlenÃ­ dokument na kapitoly). â¢ headings â v zÃ¡hlavÃ­ bude umiestnenÃ© cÌÃ­slovanie aj nÃ¡zvy kapitol (okrem triedy article) a jednotlivÃ½ch cÌastÃ­. â¢ myheadings â v zÃ¡hlavÃ­ bude umiestnenÃ© len cÌÃ­slovanie vo vonkajÅ¡om hornom rohu. Len pre konkrÃ©tnu stranu je moÅ¾nÃ© definovatâ Å¡tÃ½l prÃ­kazom \thispagestyle{<Å¡tÃ½l>}. Okrem uvedenÃ½ch Å¡tyroch natÃ­vnych Å¡tÃ½lov existuje rad dâalÅ¡Ã­ch dostupnÃ½ch prostrednÃ­ctvom tried cÌi balÃ­kov ako napr. fancyhdr [14], ktorÃ½ definuje Å¡tÃ½l fancy. PrÃ­kazom \pagestyle{fancy} je moÅ¾nÃ© menitâ nastavenie zÃ¡hlavia a \fancyhead a pÃ¤ty \fancyfoot na pozÃ­cii: vlâavo L, stred C, vpravo R, nepÃ¡rna strana O (Odd), pÃ¡rna strana E (Even). V prÃ­pade jednostrannej tlacÌe sÃº strany formÃ¡tovanÃ© ako nepÃ¡rne."
367,16,0.475,CESTA K OTVORENEJ VEDE,"sprÃ­stupnenie dÃ¡t popis dÃ¡t DÃ¡ta zbierate, vytvÃ¡rate a pouÅ¾Ã­vate od prvej chvÃ­le svojho vÃ½skumu. ManaÅ¾ment vÃ½skumnÃ½ch dÃ¡t prispieva k efektivite, prehÄ¾adnosti a reprodukovateÄ¾nosti vÃ½skumnÃ©ho procesu. Patria doÅ vÅ¡etky Äinnosti tÃ½kajÃºce sa zhromaÅ¾Äovania, popisu, ukladania, spracovania, analyzovania, archivÃ¡cie a sprÃ­stupÅovania dÃ¡t. archivÃ¡cia dÃ¡t"
135,711,0.475,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"11.2.1 SamoorganizÃ¡cia v biologickÃ½ch systÃ©moch V knihe (Camazine, 2003) v kapitolÃ¡ch 12, 15, 16 sa autori zaoberajÃº popisom samoorganizÃ¡cie sa velieho spoloenstva. Spoloenstvo si pomocou jednoduchÃ½ch pravidiel vyberÃ¡ najlepÅ¡Ã­ zdroj nektÃ¡ru. Vely vylietavajÃº do okolia a hadajÃº potravu pre spoloenstvo. Ke vela nÃ¡jde potravu, vracia sa s ou do Ãºa a pritom prinÃ¡Å¡a pre ostatnÃ© vely aj sprÃ¡vu o zdroji potravy. V tomto procese hadania potravy mÃ¡ vela nasledujÃºce moÅ¾nosti:"
369,157,0.474,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.21.SpÃ´soby platieb faktÃºry VÅ¡eobecnÃ½ vzor pre rÃ´zne spÃ´soby platieb zÃ¡vÃ¤zkov ukazuje obr. 3.22. Platba, bez ohÄ¾adu na svoj typ, uhrÃ¡dza nejakÃ½ zÃ¡vÃ¤zok alebo zÃ¡vÃ¤zky a viaÅ¾e sa na miesto platby. Miesto platby mÃ´Å¾e byÅ¥ medzi partnermi dohodnutÃ© v bÃ¡zickom zÃ¡vÃ¤zku."
369,388,0.474,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"NiektorÃ© objekty pritom patria do viacerÃ½ch kategÃ³riÃ­. Ako prÃ­klad slÃºÅ¾i regulaÄnÃ¡ stanica, ktorej Ãºlohou je nielen zmena tlakovej hladiny, ale zvyÄajne obsahuje aj odorizaÄnÃ© zariadenie a zariadenie na meranie prietoku plynu. 7.5. Vytvorte model ÃºdrÅ¾by plynovodnej siete. Typy ÄinnostÃ­ pri ÃºdrÅ¾be plynovodnej siete sÃº: 1. kontrola pochÃ´dzkou, 2. kontrola tesnosti, 3. revÃ­zia plynovodu, 4. revÃ­zia regulaÄnej/kompresorovej stanice, 5. ciachovanie plynomerov, 6. oprava plynovodu, 7. oprava regulaÄnej/kompresorovej stanice."
265,302,0.474,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Testovanie sivej skrinky oznaÄuje prÃ­pad podobnÃ½ bielej skrinke, avÅ¡ak tu vychÃ¡dzame iba z predpokladanej vnÃºtornej Å¡truktÃºry programu (pouÅ¾Ã­vame nÃ¡vrhovÃ© dokumenty obsahujÃºce informÃ¡cie o algoritmoch a vnÃºtornÃ½ch dÃ¡tovÃ½ch typoch)."
94,234,0.474,Sprievodca svetom vedeckÃ©ho publikovania,"VlastnÃ© citÃ¡cie â definovanÃ© ako poÄet citÃ¡ciÃ­, ktorÃ½mi Äasopis cituje sÃ¡m seba v porovnanÃ­ s inÃ½mi titulmi v rovnakom vedeckom odbore. Äasopis so Å¡irÅ¡Ã­m zÃ¡berom by mal maÅ¥ menej vlastnÃ½ch citÃ¡ciÃ­ ako Äasopis Ãºzko Å¡pecializovanÃ½. NajprestÃ­Å¾nejÅ¡ie Äasopisy vo Web of Science majÃº cca 15 % alebo menej vlastnÃ½ch citÃ¡ciÃ­."
393,162,0.474,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"WebovÃ© prostredie RDF Schema je veÄ¾mi jednoduchÃ½ jazyk pre ontolÃ³gie od W3C urÄenÃ½ pre pouÅ¾itie vo webe so sÃ©mantikou. Tento jazyk poskytuje prostriedky na definovanie mien tried a vlastnostÃ­, axiÃ³my pre triedy a vlastnosti, domÃ©novÃ© a rozsahovÃ© obmedzenia vlastnostÃ­. InÅ¡tancie tried a vlastnostÃ­ sÃº definovanÃ© v RDF. Jazyk OIL je nadmnoÅ¾inou konÅ¡trukciÃ­ z RDF Schema. Ãrovne jazyka OIL 1. Core OIL (prienik Standard OIL a RDFS) 2. Standard OIL (neÃºplnÃ¡ nadmnoÅ¾ina RDFS) 3. Instance OIL (Standard OIL + inÅ¡tancie) 4. Heavy OIL (Instance OIL + ÄalÅ¡ie budÃºce rozÅ¡Ã­renia) Jazyk OIL prijala spojenÃ¡ EU-USA iniciatÃ­va, ktorÃ¡ vyvinula jazyk DAML+OIL a Å¡tandardizovanÃ½ W3C. Äalej W3C vyvÃ­ja jazyk OWL (Ontology Web Language)."
94,196,0.474,Sprievodca svetom vedeckÃ©ho publikovania,"OdborovÃ© kategÃ³rie (Subject categories â Journal Citation Reports, Essential Science Indicators) KaÅ¾dÃ¡ publikÃ¡cia je zaradenÃ¡ do odborovÃ½ch kategÃ³riÃ­. Toto rozdelenie tvorÃ­ zÃ¡klad pre vzÃ¡jomnÃ© porovnanie citovanosti v rÃ¡mci odboru (napr. ktorÃ½ Äasopis je najcitovanejÅ¡Ã­ v biolÃ³gii), ale aj pre medziodborovÃ© porovnanie (napr. akÃ¡ je citovanosÅ¥ Äasopisov vo fyzike oproti citovanosti Äasopisov z oblasti chÃ©mie). VzhÄ¾adom k dneÅ¡nÃ©mu trendu multidisciplinÃ¡rneho vÃ½skumu sa Äasopis Äasto nedÃ¡ zaradiÅ¥ do jednej kategÃ³rie a v takom prÃ­pade mÃ¡ priradenÃ½ch viac kategÃ³riÃ­. Pri Äasopisoch spÃ¡jajÃºcich disciplÃ­ny s rÃ´zne intenzÃ­vnym citaÄnÃ½m tokom mÃ´Å¾e nastaÅ¥ situÃ¡cia, keÄ ÄlÃ¡nky z citovanejÅ¡ieho odboru zvÃ½Å¡ia metriky Äasopisu tak, Å¾e v druhom, menej citovanom odbore Äasopis stÃºpne neprimerane jeho reÃ¡lnemu vÃ½znamu. Äasopisy (Journal Citation Reports) AnalÃ½za citÃ¡ciÃ­ ÄasopiseckÃ½ch titulov vychÃ¡dza z dvoch indexov â Science Citation Index Expanded (SCIE) a Social Science Citation Index (SSCI). MÃ´Å¾eme porovnÃ¡vaÅ¥ Äasopisy v rÃ¡mci kategÃ³rie (napr. environmentalistika), vytvÃ¡raÅ¥ si zoznam vlastnÃ½ch Äasopisov, porovnÃ¡vaÅ¥ Äasopisy od jednÃ©ho vydavateÄ¾a atÄ. CitaÄnÃ© metriky pouÅ¾Ã­vanÃ© v citaÄnej analÃ½ze Äasopisov:"
59,109,0.474,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.1. SchematickÃ© znÃ¡zornenie vzniku novÃ½ch druhov (oznaÄenÃ½ch pÃ­smenami A, B, ...) v priebehu evolÃºcie. Druh A je predchodcom druhu B, druh B je spoloÄnÃ½ predchodca novÃ½ch druhov C, D a E. Priebeh evolÃºcie sa dÃ¡ nÃ¡zorne reprezentovaÅ¥ pomocou tohto âstromu Å¾ivotaâ."
276,39,0.474,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"funkcionality na porte pouÅ¾Ã­vajÃº kÄ¾ÃºÄovÃ© slovo switchport. PrepÃ­naciu funkcionalitu mÃ´Å¾eme na niektorÃ½ch prepÃ­naÄoch (L3 prepÃ­naÄe â prepÃ­naÄe podporujÃºce tretiu vrstvu modelu OSI) vypnÃºÅ¥ pomocou prÃ­kazu no switchport. Potom sa k portu pristupuje ako k rozhraniu tretej vrstvy (napr. mÃ´Å¾e byÅ¥ na Åom nastavenÃ¡ IP adresa). InformÃ¡cie tÃ½kajÃºce sa prepÃ­nacej funkcionality portu, a teda najmÃ¤ konfigurÃ¡cie VLAN, moÅ¾no overiÅ¥ nasledujÃºcim prÃ­kazom. Switch# show interfaces [<oznaÄenie portu>] switchport Ak chceme zabezpeÄiÅ¥ aby sa cez niektorÃº linku medzi prepÃ­naÄmi prenÃ¡Å¡ala komunikÃ¡cia patriaca do viacerÃ½ch VLAN, musÃ­me prepnÃºÅ¥ porty na oboch stranÃ¡ch danej linky do reÅ¾imu âtrunkâ. Port v tomto reÅ¾ime nepatrÃ­ do Å¾iadnej VLAN a pouÅ¾Ã­va znaÄkovanie (tzv. tagging) na identifikÃ¡ciu, do ktorej VLAN prijatÃ½ rÃ¡mec patrÃ­. Å tandardnÃ½ protokol pouÅ¾Ã­vanÃ½ na znaÄkovanie je IEEE 802.1Q, ktorÃ½ obsahuje vo svojej hlaviÄke ÄÃ­slo prÃ­sluÅ¡nej VLAN. Tento protokol je potrebnÃ© na niektorÃ½ch prepÃ­naÄoch explicitne nastaviÅ¥ (vo vÅ¡eobecnosti napr. L3 prepÃ­naÄe)."
369,67,0.474,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Typovanie sa v porovnanÃ­ s relÃ¡ciou generalizÃ¡cie pouÅ¾Ã­va v prÃ­pade, Å¾e zoznam typov je dynamickÃ½ (pri relÃ¡cii generalizÃ¡cie je zoznam Å¡pecializovanejÅ¡Ã­ch tried statickÃ½). Typovanie tak uÄ¾ahÄuje rozÅ¡irovateÄ¾nosÅ¥ systÃ©mu pri dopÄºÅanÃ­ novÃ½ch typov. Jeho nevÃ½hodou je, Å¾e nezahÅÅa automaticky dedenie a preto je menej vÃ½hodnÃ½ pri dopÄºÅanÃ­ atribÃºtov a funkciÃ­."
393,178,0.474,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Äasto pouÅ¾Ã­vanou metÃ³dou na hÄ¾adanie taxonomickÃ½ch relÃ¡ciÃ­ je metÃ³da najbliÅ¾Å¡Ã­ch susedov (kNN) (Hearst & SchÃ¼tze, 1993). MetÃ³da najbliÅ¾Å¡Ã­ch susedov: Â podÄ¾a zvolenej funkcie podobnosti vyhÄ¾adÃ¡ k najbliÅ¾Å¡Ã­ch susedov z trÃ©novacej mnoÅ¾iny, Â na zÃ¡klade tried priradenÃ½ch najbliÅ¾Å¡Ã­m susedom a podobnosti urÄÃ­ skÃ³re dokumentu, Â ak skÃ³re prekroÄÃ­ danÃº hranicu, dokument sa zaradÃ­ do prÃ­sluÅ¡nej triedy. Podobnou metÃ³dou je metÃ³da zaloÅ¾enÃ¡ na kategorizÃ¡cii (Resnik, 1993). ÄalÅ¡Ã­mi metÃ³dami, ktorÃ© sa pouÅ¾ili na experimenty sÃº centroidnÃ¡ metÃ³da (Periera et al., 1993), stromovÃ¡ zostupnÃ¡ a stromovÃ¡ vzostupnÃ¡ metÃ³da (Meadche & Staab, 2000). Na experimenty pouÅ¾ili ontolÃ³giu z projektu GETESS â 1999. OntolÃ³gia obsahovala 1052 slov a frÃ¡z, ktorÃ© rozdelili do 182 tried. DÃ¡ta, ktorÃ© pouÅ¾ili na experiment boli webovÃ© strÃ¡nky hotelov po celom svete â cca 988 000 slov. SlovÃ¡ podÄ¾a frekvencie rozdelili do troch skupÃ­n: 0 â 40, 40 â 500 a viac ako 500."
195,113,0.473,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Poskytovanie odporÃºÄania pomoc pri nÃ¡vrhu a pod.). Je nevyhnutnÃ© zvoliÅ¥ primeranÃº formu prvotnÃ©ho kontaktu medzi pouÅ¾Ã­vateÄ¾om a OSSI ako aj formu poskytovania ÄalÅ¡Ã­ch doplÅujÃºcich informÃ¡cii a odporÃºÄanÃ­, aby pouÅ¾Ã­vateÄ¾ dostal potrebnÃ©, zrozumiteÄ¾nÃ© a dÃ´veryhodnÃ© odporÃºÄania v sprÃ¡vny Äas."
240,87,0.473,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ak je na vstupe menej ako 5 ÄÃ­sel, potrebovali by sme, aby chÃ½bajÃºce ÄÃ­sla neovplyvÅovali sÃºÄet v riadku 3. To mÃ´Å¾eme docieliÅ¥ napr. tak, Å¾e nastavÃ­me poÄiatoÄnÃº hodnotu vÅ¡etkÃ½ch premennÃ½ch na 0, a teda v prÃ­pade, Å¾e ich hodnotu scanf() nenaÄÃ­ta zo vstupu, zostane ich hodnota nastavenÃ¡ na 0, a sÃºÄet na riadku 3"
59,691,0.473,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"pomocou pravidiel. TÃ¡to skutoÄnosÅ¥ otvÃ¡ra novÃ© moÅ¾nosti vÃ½skumu v kognitÃ­vnej vede v oblasti rieÅ¡enia problÃ©mov, vytvÃ¡raÅ¥ mentÃ¡lne modely pouÅ¾Ã­vania zÃ¡kladnÃ©ho mentÃ¡lneho modelu, t. j. hÄ¾adaÅ¥ pravidlÃ¡ â regularity pre pouÅ¾Ã­vania pravidiel 0 â 3. PoznÃ¡mka 1: V kapitole 3 boli Å¡pecifikovanÃ© zÃ¡kladnÃ© princÃ­py evoluÄnÃ½ch algoritmov, ktorÃ© moÅ¾no charakterizovaÅ¥ ako stochastickÃ© optimalizaÄnÃ© algoritmy akcelerovanÃ© heuristikou darwinovskÃ©ho prirodzenÃ©ho vÃ½beru. Tieto algoritmy sÃº aplikovateÄ¾nÃ© aj na rieÅ¡enie sudoku. V dÃ´sledku ich stochastiÄnosti, zapÄºÅanie prÃ¡zdnych buniek v matici sa deje kvÃ¡zi-nÃ¡hodne. Ich efektivita rieÅ¡enia uÅ¾ najjednoduchÅ¡Ã­ch sudoku nie je veÄ¾kÃ¡. TÃ½m, ako bolo ukÃ¡zanÃ© v predchÃ¡dzajÃºcej Äasti tejto publikÃ¡cie, Å¾e obsadzovanie prÃ¡zdnych buniek je deterministickÃ½ problÃ©m riadenÃ½ jednoduchÃ½mi logickÃ½mi Ãºvahami, pouÅ¾itie evoluÄnÃ½ch algoritmov (aj keÄ v princÃ­pu moÅ¾nÃ©) nie je vhodnÃ½m prÃ­stupom k rieÅ¡eniu sudoku. ÄalÅ¡Ã­ problÃ©m s pouÅ¾itÃ­m evoluÄnÃ½ch algoritmov pre rieÅ¡enie sudoku spoÄÃ­va v tom, Å¾e poÅ¾adovanÃ© rieÅ¡enie je reprezentovanÃ© globÃ¡lnym minimom, inÃ© â suboptimÃ¡lne rieÅ¡enia sÃº nezaujÃ­mavÃ©, priÄom evoluÄnÃ© algoritmy svoju efektÃ­vnosÅ¥ manifestujÃº schopnosÅ¥ou rÃ½chlej konÅ¡trukcie prÃ¡ve suboptimÃ¡lneho rieÅ¡enia. PoznÃ¡mka 2: Chceme upozorniÅ¥ seniorov informatickej komunity na skutoÄnosÅ¥, Å¾e rieÅ¡enie sudoku je v podstate deterministickÃ½ problÃ©m riadenÃ½ jednoduchÃ½mi logickÃ½mi Ãºvahami. MetÃ³da rieÅ¡enia sudoku prezentovanÃ¡ v tejto prÃ¡ci mÃ¡ jednoduchÃ½ algoritmickÃ½ charakter a preto je zaujÃ­mavÃ¡ aj pre seniorov ako vhodnÃ© âprecviÄovanieâ kognitÃ­vneho aparÃ¡tu â mozgu (pre ktorÃ½ platÃ­ to, Äo platÃ­ pre kaÅ¾dÃ½ orgÃ¡n, jeho âneprecviÄovanieâ vedie k jeho atrofii)."
43,532,0.473,Objektovo orientovanÃ© programovanie v C++,"Typickou vÃ½nimkou je aj neÃºspeÅ¡nÃ© otvorenie sÃºboru. TakÃ©to prÃ­pady uÅ¾ vieme oÅ¡etriÅ¥, no eÅ¡te sme si nehovorili o tom, Å¾e metÃ³du open triedy fstream mÃ´Å¾eme nastaviÅ¥ tak, aby oznamovala Å¡tandardnÃº vÃ½nimku, Äo v zÃ¡kladnom nastavenÃ­ nerobÃ­. TÃ¡to vÃ½nimka je typu ios base::failure â pochÃ¡dza vlastne uÅ¾ zo zÃ¡kladnej triedy pre vstupy a vÃ½stupy ios base. Jej oznamovanie aktivujeme pomocou metÃ³dy exceptions triedy fstream. fstream subor; subor.exceptions(fstream::failbit | fstream::badbit);"
76,67,0.473,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.5 PodmienenÃ¡ pravdepodobnosÅ¥ Äasto sa v rÃ¡mci nÃ¡hodnÃ©ho pokusu pÃ½tame na pravdepodobnosÅ¥ udalosti A, pritom vÄaka okolnostiam vieme, Å¾e v pokuse nastala udalosÅ¥ B. TÃ¡ skutoÄnosÅ¥ (teda ten fakt, Å¾e v pokuse B nastala) niekedy viac a niekedy menej podmieÅuje (ovplyvÅuje) pravdepodobnosÅ¥ udalosti A. UÅ¾ teda nejde o pÃ´vodnÃº P(A), ale o ânovÃºâ, podmienenÃº HovorÃ­me, Å¾e udalosÅ¥ B je podmieÅujÃºcou udalosÅ¥ou a odrazu je na scÃ©ne okrem pÃ´vodnej pravdepodobnosti P(.) aj pravdepodobnosÅ¥ novÃ¡, podmienenÃ¡ (.). 1.5.1 PrÃ­klad. V Å¡katuli mÃ¡me 20 lÃ­stkov s ÄÃ­slami od 1 po 20. Pokus spoÄÃ­va v nÃ¡hodnom Å¥ahanÃ­ lÃ­stku zo Å¡katule. UvaÅ¾ujme o udalostiach A â ÄÃ­slo na vytiahnutom lÃ­stku je nanajvÃ½Å¡ 15, B â ÄÃ­slo na vytiahnutom lÃ­stku je aspoÅ 11. Je zrejmÃ©, Å¾e pre pÃ´vodnÃ© (nepodmienenÃ©) pravdepodobnosti platÃ­: P(A) = P(B) ="
184,421,0.472,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Â Matica termov dokumentu: pouÅ¾Ã­va sa najmÃ¤ v latentnom sÃ©mantickom modeli ktorÃ½ je rozÅ¡Ã­renÃ­m vektorovÃ©ho modelu, priÄom sa ukladÃ¡ vÃ½skyt slov v riedkej dvojrozmernej matici. Â Stromy: sÃº vyuÅ¾Ã­vanÃ© na ukladanie indexov pomocou asociatÃ­vnych polÃ­ kde kÄ¾ÃºÄmi sÃº jednotlivÃ© reÅ¥azce alebo termy. TakÃ¡to Å¡truktÃºra je rovnako rÃ½chla ako pouÅ¾itie hash tabuliek ale vyÅ¾aduje vÃ¤ÄÅ¡iu pamÃ¤Å¥ pre indexy. Â SufixovÃ© stromy: majÃº lineÃ¡rnu ÄasovÃº nÃ¡roÄnosÅ¥ a ukladajÃº slovÃ¡ alebo termy pomocou prÃ­pon slov. ProblÃ©mom je najmÃ¤ veÄ¾kosÅ¥ vÃ½slednÃ½ch indexov. Â TaktieÅ¾ je moÅ¾nÃ© pouÅ¾iÅ¥ techniky ako n-gram, citaÄnÃ© alebo hyperlinkovÃ© indexy a ÄalÅ¡ie."
76,401,0.472,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"(kde je pravdepodobnosÅ¥ padnutia znaku). Teraz nech = 20 a hypotÃ©zu zamietajme, keÄ rozdiel poÄtu padnutÃ½ch znakov a padnutÃ½ch ÄÃ­sel je vÃ¤ÄÅ¡Ã­ alebo rovnÃ½ 6. Sformulujte kritickÃº oblasÅ¥ pomocou Å¡tatistiky + , ktorÃ¡ odpovedÃ¡ uvedenÃ©mu postupu"
130,503,0.472,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Zariadenia, ktorÃ© ukladajÃº na web Ãºdaje v strojovo-zrozumiteÄ¾nej podobe, majÃº v sÃºÄasnosti pre mnohÃ© komunity vysokÃº prioritu. Web mÃ´Å¾e dosiahnuÅ¥ svoj plnÃ½ potenciÃ¡l len vtedy, ak sa stane miestom, kde sa mÃ´Å¾u spracovÃ¡vaÅ¥ a zdieÄ¾aÅ¥ Ãºdaje, a to jednak automatickÃ½mi nÃ¡strojmi ako aj Ä¾uÄmi. KvÃ´li Å¡kÃ¡lovateÄ¾nosti webu budÃº musieÅ¥ maÅ¥ budÃºce programy schopnosÅ¥ zdieÄ¾aÅ¥ a spracovÃ¡vaÅ¥ Ãºdaje dokonca aj vtedy, ak by boli programy vyvinutÃ© Ãºplne nezÃ¡visle. Web so sÃ©mantikou je vÃ­ziou, je to myÅ¡lienka maÅ¥ Ãºdaje na webe definovanÃ© a prepojenÃ© takÃ½m spÃ´sobom, Å¾e sa budÃº daÅ¥ pouÅ¾iÅ¥ nielen na zobrazenie, ale aj na automatizÃ¡ciu, integrÃ¡ciu a ich opÃ¤tovnÃ© pouÅ¾itie rÃ´znymi aplikÃ¡ciami. V tejto Äasti sa budeme snaÅ¾iÅ¥ identifikovaÅ¥ problÃ©my, s ktorÃ½mi sa stretÃ¡va web so sÃ©mantikou, a nÃ¡sledne poukÃ¡Å¾eme na problÃ©my tÃ½kajÃºce sa Å¡peciÃ¡lne prezentÃ¡cie informÃ¡ciÃ­ a znalostÃ­ v priestore ânovÃ©hoâ webu so sÃ©mantikou."
59,274,0.472,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"5.4 Å truktÃºra kognitÃ­vneho orgÃ¡nu â neurÃ³novej siete Prv ako pristÃºpime k Å¡pecifikÃ¡cii kognitÃ­vneho orgÃ¡nu agentov, musÃ­me zaviesÅ¥ tzv. numerickÃº reprezentÃ¡ciu pozÃ­ciÃ­. PozÃ­cia je reprezentovanÃ¡ 9-rozmernÃ½m vektorom (5.2a) x P ï½ x1 , x2 ,..., x9 ï 0,1,ï­1 kde jednotlivÃ© zloÅ¾ky urÄujÃº jednotlivÃ© polÃ­Äka v pozÃ­cii P"
239,51,0.472,Ãvod do matematickej logiky,"Veta o uÌplnosti V tejto podkapitole ukaÌzÌeme, zÌe pre lâubovolânuÌ mnozÌinu formuÌl T platÄ±Ì T  A praÌve vtedy, kedâ T â¢ A. ObmedzÄ±Ìme sa vsÌak na prÄ±Ìpad, kedâ bude mnozÌina T konecÌnaÌ. Pre nekonecÌneÌ mnozÌiny T sa uÌplne rovnakeÌ tvrdenie dokaÌzÌe za pomoci takzvanej Vety o kompaktnosti. DefinÄ±Ìcia. MnozÌina vyÌrokovyÌch formuÌl T je spornaÌ, ak je z T dokaÌzatelânaÌ lâubovolânaÌ vyÌrokovaÌ formula. V opacÌnom prÄ±Ìpade je T bezospornaÌ (konzistentnaÌ)."
59,553,0.472,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"TÃ½mto sme ukÃ¡zali, Å¾e aplikÃ¡cia defaultovÃ©ho pravidla (11.12) na teÃ³riu ï Å¡pecifikovanej (11.13) produkuje pre x = holub zÃ¡ver lieta (holub). AvÅ¡ak pre vtÃ¡k (kiwi) defaultovÃ© pravidlo (11.12) je neaplikovateÄ¾nÃ©, podmienka konzistentnosti lieta (kiwi) s danou teÃ³riou ï nie je splnenÃ¡. V tomto prÃ­pade, mÃ´Å¾eme dospieÅ¥ k zÃ¡veru pomocou princÃ­pu uzavretÃ©ho sveta, pretoÅ¾e lieta (kiwi) nie je obsiahnutÃ¡ v teÃ³rii, potom mÃ´Å¾eme predpokladaÅ¥, Å¾e platÃ­ ïlieta (kiwi), t. j. vtÃ¡k kiwi nelieta."
130,134,0.472,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory V memente sa Äasto uchovÃ¡vajÃº objekty nÃ¡vrhovÃ© vzoru PrÃ­kaz. VykonanÃ­m ich inverznÃ½ch prÃ­kazov sa objekt dostane do pÃ´vodnÃ©ho stavu. Na memento sa niekedy odvolÃ¡va ako na externalizÃ¡ciu, alebo serializÃ¡ciu stavu objektu."
94,79,0.472,Sprievodca svetom vedeckÃ©ho publikovania,"(2012) (teÃ³riu citovania aj s praktickÃ½mi ukÃ¡Å¾kami podÄ¾a tejto normy zrozumiteÄ¾ne vysvetÄ¾uje napr. LichnerovÃ¡ (2013a, 2013b)). JednotlivÃ© vednÃ© odbory sa nelÃ­Å¡ia len formÃ¡lnou strÃ¡nkou citovania, ale aj citaÄnou kultÃºrou (problematikou citovania, vrÃ¡tane jeho sociologickÃ½ch a historickÃ½ch aspektov sa podrobne zaoberÃ¡ prÃ¡ca Citation Culture (Wouters 1999)). Kedysi vypracovÃ¡vanie a kontrola zoznamu literatÃºry (prÃ­padne jeho prepisovanie na inÃ½ formÃ¡t pri zmene Äasopisu) predstavovali hodiny mravÄej prÃ¡ce. Dnes sa dÃ¡ tÃ¡to prÃ¡ca skrÃ¡tiÅ¥ a zjednoduÅ¡iÅ¥ s pouÅ¾itÃ­m elektronickÃ½ch nÃ¡strojov, citaÄnÃ½ch manaÅ¾Ã©rov ako EndNote, Mendeley alebo Zotero (viac v Äasti 11.4). Aj ich vÃ½stup vÅ¡ak treba na zÃ¡ver skontrolovaÅ¥. Citovanie patrÃ­ k zÃ¡kladnÃ½m akademickÃ½m povinnostiam a citÃ¡cie okrem inÃ©ho vyjadrujÃº Ãºctu k prÃ¡ci autorov pÃ´vodnÃ½ch myÅ¡lienok. Treba maÅ¥ na pamÃ¤ti, Å¾e autor, ktorÃ½ necituje a uvÃ¡dza v ÄlÃ¡nku cudzie myÅ¡lienky ako vlastnÃ©, alebo bez primeranÃ©ho a jasnÃ©ho definovania vzÅ¥ahu k zdrojovÃ½m dokumentom, sa dopÃºÅ¡Å¥a vÃ¡Å¾neho prehreÅ¡ku voÄi vedeckej a publikaÄnej etike â plagiÃ¡torstva. V sÃºÄasnosti redakcie Äasto analyzujÃº rukopisy niektorÃ½m z dostupnÃ½ch antiplagiÃ¡torskÃ½ch programov (napr. iThenticate, CrossCheck) (Zhang a Jia 2012), ktorÃ© vyhÄ¾adÃ¡vajÃº zhody medzi skÃºmanÃ½m dokumentom a ostatnÃ½mi dokumentami v databÃ¡ze. Na strÃ¡nkach sluÅ¾by Turnitin je definovanÃ½ch a na prÃ­kladoch ilustrovanÃ½ch âdesaÅ¥ odtieÅov plagiÃ¡torskÃ©ho spektraâ28, teda praktÃ­k, ktorÃ½m sa pri akademickom pÃ­sanÃ­ treba vyhÃ½baÅ¥: od doslovnÃ©ho kopÃ­rovania cudzieho textu bez citovania (âklonâ), cez kopÃ­rovanie s niekoÄ¾kÃ½mi pozmenenÃ½mi slovami bez citovania (âCtrl+Câ), prÃ­padne s pozmenenÃ½mi kÄ¾ÃºÄovÃ½mi slovami bez citovania (ânÃ¡jdi a nahraÄâ), parafrÃ¡zovanie niekoÄ¾kÃ½ch zdrojov zmieÅ¡anÃ½ch dokopy bez citovania (âremixâ), opakovanie autorovho vlastnÃ©ho textu (ârecyklovanieâ, viac o Åom niÅ¾Å¡ie), kombinÃ¡ciu sprÃ¡vne citovanej pasÃ¡Å¾e s necitovanÃ½mi pasÃ¡Å¾ami z inÃ©ho zdroja (âhybridâ), zmieÅ¡anÃ½ materiÃ¡l z rÃ´znych zdrojov bez citovania (âseÄkaâ), citovanie spÃ´sobom, ktorÃ½ neumoÅ¾Åuje identifikovaÅ¥ zdroj, alebo citovanie neexistujÃºceho zdroja (âerror 404â), kombinovanie sprÃ¡vne citovanÃ½ch pasÃ¡Å¾Ã­, avÅ¡ak bez vlastnÃ©ho autorskÃ©ho prÃ­nosu (âagregÃ¡torâ), aÅ¾ po sprÃ¡vne citovanÃº pasÃ¡Å¾, ktorÃ¡ voÄ¾bou slov takmer kopÃ­ruje zdroj (âretweetâ). Osobitnou kategÃ³riou je pÃ­sanie prÃ¡c na objednÃ¡vku (âcontract cheatingâ, âghostwritingâ), ktorÃ© tieÅ¾ patrÃ­ k plagiÃ¡torskÃ½m preÄinom bez ohÄ¾adu na kvalitu vypracovania zoznamu literatÃºry, lebo aj v tomto prÃ­pade objednÃ¡vateÄ¾ vydÃ¡va cudzie dielo za svoje. ZvlÃ¡Å¡tnym pojmom, ktorÃ½ sa s rozÅ¡Ã­renÃ­m antiplagiÃ¡torskÃ½ch softvÃ©rov udomÃ¡cnil vo svete vedeckÃ©ho publikovania, je samovykrÃ¡danie (self-plagiarism), teda jav, keÄ autor v novom diele pouÅ¾Ã­va pasÃ¡Å¾e z vlastnÃ©ho uÅ¾ publikovanÃ©ho diela. MnohÃ­ zavedenie tohoto termÃ­nu kritizujÃº (nemÃ¡ zmysel hovoriÅ¥ o krÃ¡deÅ¾i myÅ¡lienok od seba samÃ©ho) a nahrÃ¡dzajÃº ho termÃ­nom recyklovanie textu (text recycling). Z hÄ¾adiska publikaÄnej etiky je recyklÃ¡cia textu do istej miery ospravedlniteÄ¾nÃ¡ v Ãºvode Äi metodike, autor by ju vÅ¡ak mal vÅ¾dy priznaÅ¥"
265,379,0.472,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Existuje niekoÄ¾ko jazykov pre vyjadrenie viacerÃ½ch modelov softvÃ©ru. VÅ¡etky modely mÃ´Å¾eme zaradiÅ¥ do troch hlavnÃ½ch skupÃ­n modelov : â¢ InformaÄnÃ© modely â zameriavajÃº sa na modelovanie dÃ¡t a informÃ¡ciÃ­. DÃ¡tovÃ© entity reprezentujÃº koncepty a ich atribÃºty, ohraniÄenia Äi vzÅ¥ahy k inÃ½m konceptom. InformaÄnÃ© modely sÃº Äasto abstraktnÃ© modely bez mapovania na konkrÃ©tnu softvÃ©rovÃº realizÃ¡ciu. AÅ¾ neskÃ´r sa pretavia"
205,247,0.472,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","15.2 PrÃ­stupy k filtrovaniu dokumentov Pre filtrovanie dokumentov postupne vzniklo mnoÅ¾stvo rÃ´znorodÃ½ch prÃ­stupov zaloÅ¾enÃ½ch na kategorizÃ¡ciÃ­ do dvoch tried (dokument vyhovuje dopytu / nevyhovuje dopytu). PrÃ­stupy sa mÃ´Å¾u lÃ­Å¡iÅ¥ rÃ´znymi heuristikami, kde je filter definovanÃ½ ruÄne alebo poloautomaticky. ZnÃ¡me je aj kolaboratÃ­vne filtrovanie, Äo je pomerne Å¡pecifickÃ¡ forma filtrovania dokumentov, kde sa dokumenty vyberajÃº na zÃ¡klade interakcie pouÅ¾Ã­vateÄ¾ov s dokumentami a podobnosti medzi pouÅ¾Ã­vateÄ¾mi. Pri klasifikÃ¡cii dokumentov do dvoch tried je moÅ¾nÃ© pouÅ¾iÅ¥ rÃ´zne z mnoÅ¾stva algoritmov strojovÃ©ho uÄenia pre klasifikÃ¡ciu. VyuÅ¾Ã­va sa tam uÄenie s uÄiteÄ¾om na zÃ¡klade mnoÅ¾iny dokumentov, ktorÃ© sÃº vopred zaradenÃ© do zvolenÃ½ch kategÃ³riÃ­. Pri rieÅ¡enÃ­ tohto problÃ©mu je moÅ¾nÃ© vybraÅ¥ niektorÃ½ z mnoÅ¾stva algoritmov na zÃ¡klade znalosti problÃ©mu a vlastnostÃ­ algoritmov, ako sÃº naprÃ­klad neurÃ³novÃ© siete, SVM, naivnÃ½ bayesovskÃ½ klasifikÃ¡tor alebo rozhodovacie stromy. MnoÅ¾stvo rÃ´znych aplikÃ¡ciÃ­ bolo zaloÅ¾enÃ½ch na ruÄnom definovanÃ­ rÃ´znych filtrov. Priamu podporu pre takÃ©to filtrovanie zabudovali naprÃ­klad do populÃ¡rneho open-source vyhÄ¾adÃ¡vacieho"
135,95,0.472,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.5.5 Zhodnotenie vzorov HCI Vzory pri nÃ¡vrhu rozhranÃ­ lovek-poÃ­ta zachytÃ¡vajÃº overenÃ© prÃ­stupy k rieÅ¡eniu opakujÃºcich sa problÃ©mov. Neuviedli sme vÅ¡etky doteraz existujÃºce vzory, nakoko to nie je"
76,117,0.471,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"RieÅ¡enie. PretoÅ¾e mÃ¡ platiÅ¥ ( ) ï³ 0 pre vÅ¡etky ïR, musÃ­ byÅ¥ ï³ 0. Zrejme prÃ­pad = 0 vylÃºÄime, veÄ identicky nulovÃ¡ funkcia nemÃ´Å¾e byÅ¥ pravdepodobnostnou funkciou. Preto nutne > 0. ÄalÅ¡ie ohraniÄenie pre zÃ­skame z podmienky, Å¾e sÃºÄet vÅ¡etkÃ½ch hodnÃ´t ( ) sa musÃ­ rovnaÅ¥ 1. PretoÅ¾e"
41,26,0.471,InformaÄnÃ© vzdelÃ¡vanie,"5. Open access Open access oznaÄuje model uverejÅovania vÃ½sledkov vedeckÃ©ho vÃ½skumu, ktorÃ½ zaisÅ¥uje okamÅ¾itÃ½ a bezplatnÃ½ prÃ­stup k vÃ½sledkom vedy a vÃ½skumu na Internete (v podstate bezplatnÃ½ online prÃ­stup). Nie je obmedzenÃ½ vÃ¤ÄÅ¡inou zloÅ¾itÃ½ch licenÄnÃ½ch politÃ­k a obmedzenÃ­ vytvÃ¡ranÃ½ch autorskÃ½mi prÃ¡vami. Open Access je zÃ¡roveÅ zmena v spÃ´soboch publikovania vo vede, ku ktorej doÅ¡lo po prÃ­chode internetu, kde prÃ­stup k dokumentom je motivovanÃ½ problÃ©mami sociÃ¡lnej nerovnosti spÃ´sobujÃºcimi obmedzenie prÃ­stupu k akademickÃ©mu vÃ½skumu. Jednoducho povedanÃ©, nedostatok peÅazÃ­ na kÃºpenie si vedeckÃ½ch ÄlÃ¡nkov mÃ¡ byÅ¥ odstrÃ¡nenÃ½ ich voÄ¾nou dostupnosÅ¥ou. A to najmÃ¤ v prÃ­pade, keÄ ÄlÃ¡nky vznikli za podpory Å¡trukturÃ¡lnych fondov EÃ, ale to je eurÃ³pska iniciatÃ­va. PodÄ¾a FOAA (Fair Open Access Alliance) sÃº princÃ­pmi Open Access nasledovnÃ© charakteristiky [15]: â Äasopis mÃ¡ transparentnÃº vlastnÃ­cku Å¡truktÃºru a je riadenÃ½ vedeckou komunitou a reaguje na Åu. â Autori ÄlÃ¡nkov v Äasopise si zachovÃ¡vajÃº autorskÃ© prÃ¡va. â VÅ¡etky ÄlÃ¡nky sÃº publikovanÃ© s otvorenÃ½m prÃ­stupom a pouÅ¾Ã­va sa vÃ½slovnÃ¡ licencia s otvorenÃ½m prÃ­stupom. â PredloÅ¾enie a zverejnenie nie je nijako podmienenÃ© zaplatenÃ­m poplatku od autora alebo jeho zamestnÃ¡vajÃºcej inÅ¡titÃºcie alebo Älenstvom v inÅ¡titÃºcii alebo spoloÄnosti. â VÅ¡etky poplatky zaplatenÃ© vydavateÄ¾om v mene Äasopisu sÃº nÃ­zke, transparentnÃ© a ÃºmernÃ© vykonanej prÃ¡ci. OtvorenÃ½ prÃ­stup â open access, ako je definovanÃ½ v BerlÃ­nskej deklarÃ¡cii, znamenÃ¡ neobmedzenÃ½ online prÃ­stup k recenzovanÃ½m vedeckÃ½m vedeckÃ½m prÃ¡cam na"
265,368,0.471,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ÄiastkovÃ© vÃ½sledky v procese tvorby softvÃ©ru sÃº prÃ¡ve modely softvÃ©ru, ktorÃ© predpisujÃº a opisujÃº to, Äo sa vytvÃ¡ra. DÃ´leÅ¾itÃ© je uvedomiÅ¥ si, Å¾e vytvÃ¡ranie modelov â modelovanie â je samo osebe tieÅ¾ metÃ³da tvorby softvÃ©ru (vytvÃ¡ranie rÃ´znych modelov predstavuje rÃ´zne metÃ³dy tvorby softvÃ©ru)."
240,220,0.471,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"ktorÃ½ potreboval rÃ¡dovo n operÃ¡ciÃ­. Ãloha 3-3 (rieÅ¡enie) NajskÃ´r musÃ­me urÄiÅ¥ hlaviÄku funkcie: vstupnÃ© a vÃ½stupnÃ© argumenty. VstupnÃ© argumenty vyplÃ½vajÃº zo zadania, vÃ½stup bude hodnota ÄalÅ¡ieho prvoÄÃ­sla (typ int), resp. prvoÄÃ­slo nemÃ´Å¾e byÅ¥ zÃ¡pornÃ© a mohli by sme pouÅ¾iÅ¥ typ unsigned int, ale ak na vstupe je int, tak to zachovÃ¡me. HlaviÄka teda bude takÃ¡to: int dalsie_prvocislo(int n)"
343,17,0.471,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"ÄalÅ¡ou tÃ©mou v poradÃ­ je sieÅ¥ Ethereum, ktorÃ¡ je druhou najvÃ¤ÄÅ¡ou kryptomenou po Bitcoine. Ethereum je takisto vÃ½znamnÃ½m hrÃ¡Äom v oblasti blockchainu kvÃ´li mnohÃ½m inovÃ¡ciÃ¡m a predstaveniu modelu ÃºÄtov na rozdiel od UTXO v Bitcoine. Bol zaloÅ¾enÃ½ v roku 2013 Vitalikom Buterinom s takmer nulovÃ½m rozpoÄtom a za 10 rokov sa jeho hodnota zvÃ½Å¡ila na takmer 300 miliÃ¡rd dolÃ¡rov. Ethereum bol vytvorenÃ½ s cieÄ¾om byÅ¥ Turingovsky ÃºplnÃ½, Äo znamenÃ¡, Å¾e dokÃ¡Å¾e vykonÃ¡vaÅ¥ vÃ½poÄty a funkcie, ktorÃ© Bitcoin nemÃ´Å¾e. Toto sa developerom podarilo dosiahnuÅ¥ a dnes je Ethereum veÄ¾mi dynamickÃ½ a inovatÃ­vny projekt. VÃ½hodou Etherea je aj jeho predvÃ­dateÄ¾nÃ½ charakter inovÃ¡ciÃ­, keÄÅ¾e na vÅ¡etko pouÅ¾Ã­vajÃº Ethereum Improvement Proposal (EIP), za ktorÃ© hlasuje celÃ¡ komunita. DÃ´vodom tejto predvÃ­dateÄ¾nosti je aj jeden z hlavnÃ½ch tvorcov Etherea Vitalik Buterin, ktorÃ½ je znÃ¡my svojou introvertnosÅ¥ou. Je to Älovek, ktorÃ½ potrebuje maÅ¥ vÅ¡etko naplÃ¡novanÃ© a neznÃ¡Å¡a prekvapenia. Ethereum sa od zaÄiatku snaÅ¾ilo byÅ¥ inovatÃ­vne a priniesÅ¥ novÃ© moÅ¾nosti do sveta blockchainu. NaprÃ­klad, vytvorili svoj vlastnÃ½ programovacÃ­ jazyk Solidity, ktorÃ½ je urÄenÃ½ pre vytvÃ¡ranie smart kontraktov a berie si to najlepÅ¡ie z Javascriptu, Typescriptu a dalÅ¡Ã­ch modernÃ½ch objektovo orientovanÃ½ch jazykov. Ethereum je tieÅ¾ znÃ¡me svojou transparentnosÅ¥ou a presnosÅ¥ou. VÅ¡etky transakcie sÃº verejne dostupnÃ© a kaÅ¾dÃ½ krok je presne zaznamenanÃ½. V tejto kapitole sa venujeme tomu, ako vytvoriÅ¥ peÅaÅ¾enku v Ethereu a ako s Åou pracovaÅ¥. Budeme tieÅ¾ hovoriÅ¥ o smart kontraktoch a ako ich vytvoriÅ¥ a pouÅ¾Ã­vaÅ¥. Ethereum preÅ¡lo veÄ¾kou aktualizÃ¡ciou, tzv. hard forkom na jeseÅ 2022, ktorÃ½ sa volal Merge a priniesol zmenu konsenzuÃ¡lneho algoritmu z Proof of Work (PoW) na Proof of Stake (PoS). Od tohto momentu bol tieÅ¾ zavedenÃ½ mechanizmus spaÄ¾ovania mincÃ­, tzv. burn, Å¾e pri kaÅ¾dej transakcii"
369,115,0.471,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"NÃ¡sobnosÅ¥ou nula sme v skutoÄnosti vyjadrili dve veci: po prvÃ©, Å¾e nie kaÅ¾dÃ½ objekt musÃ­ maÅ¥ svoj typ a po druhÃ©, Å¾e objekty vo vÅ¡eobecnosti nemusia byÅ¥ v modeli typovanÃ© a trieda Typ objektu nemusÃ­ v danom modeli vÃ´bec existovaÅ¥."
196,122,0.471,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"moÅ¾nÌuje vymenovatâ sÃºbory pomocou \includeonly prÃ­p. \excludeonly, ktorÃ© budÃº cÌi nebudÃº sÃºcÌastâou prekladu. UrÃ½chlâuje to preklad rozsiahlejÅ¡ieho dokumentu, tÃ½m Å¾e sa nemusia opakovane prekladatâ cÌasti, ktorÃ© neboli zmenenÃ©. Pri zostavovanÃ­ dokumentu sa pouÅ¾ije informÃ¡cia uloÅ¾enÃ¡ v sÃºvisiacom *.aux sÃºbore."
130,46,0.471,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"MoÅ¾nosÅ¥ meniÅ¥ vytvÃ¡ranÃ© inÅ¡tancie menenÃ­m jej Å¡truktÃºry. S vyuÅ¾itÃ­m vzoru ZloÅ¾enina je moÅ¾nÃ© vytvÃ¡raÅ¥ zloÅ¾itÃ© objekty, ktorÃ© je moÅ¾nÃ© znovupouÅ¾iÅ¥. TypickÃ½m prÃ­kladom pouÅ¾itia vzoru Prototyp je realizÃ¡cia palety prvkov pre kresliaci program â napr. program na kreslenie logickÃ½ch obvodov. V takomto programe by sme mohli vytvoriÅ¥ novÃ½ prvok palety pospÃ¡janÃ­m existujÃºcich prvkov do Å¡tandardnej sÃºÄiastky a pridanÃ­m tejto zloÅ¾eniny do palety."
135,706,0.471,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â poÅ¾adova informÃ¡ciu uloÅ¾enÃº na vzdialenom poÃ­tai cez sie, â vymiea informÃ¡cie v beÅ¾nom formÃ¡te, â prepojenie dokumentov jednotlivca s inÃ½mi dokumentmi prostrednÃ­ctvom odkazov. V jeho nÃ¡vrhu bol v podstate nartnutÃ½ distribuovanÃ½ hypertextovÃ½ systÃ©m, ktorÃ½ sa stal zÃ¡kladnou architektÃºrou webu. Vo februÃ¡ri roku 1993 Marc Andreesen a jeho skupina z Illionskej univerzity NCSA (National Center for Supercomputing Applications) predviedli Mosaic for X, grafickÃ½ webovÃ½ prehliada (browser) pre UNIX. alÅ¡ie verzie systÃ©mu boli vlenenÃ© do systÃ©mov Macintosh a Windows. Toto grafickÃ© prostredie umoÅ¾ovalo pouÅ¾Ã­vateovi jednoduchÃº obsluhu. V roku 1994 Jim Clark, zakladate Silicon Graphics, sa spojil s Marcom Andreesenom a vytvorili spolonos Mosaic Communitations neskÃ´r premenovanÃº na Netscape Communications. Po predstavenÃ­ prehliadaa Netscape zaal obrovskÃ½ Ãºspech webu. Internet Explorer z Microsoftu priÅ¡iel na trh v auguste 1995 a zaal konkurova Netscapu. Objavenie celosvetovÃ©ho webu Timom Bernersom-Leeom nasledovanÃ© predvedenÃ­m prehliadaa Mosaic sÃº asto povaÅ¾ovanÃ© za dva najvÃ½znamnejÅ¡ie faktory, ktorÃ© prispeli k Ãºspechu a popularite webu. Web by nemohol existova bez Internetu, ktorÃ½ poskytuje komunikanÃº sie pre funknos webu. VÃ½voj internetu zaal poÃ­taovou sieou ARPANET v ase studenej vojny. TÃ¡to sie vznikla v USA kvÃ´li kontrole raketovÃ½ch striel. PrvÃ© spojenia prostrednÃ­ctvom ARPANETu boli vykonanÃ© roku 1969. V roku 1972 bol ARPANET predstavenÃ½ na prvej medzinÃ¡rodnej konferencii poÃ­taov a komunikÃ¡cie, ktorÃ¡ sa uskutonila vo Washingtone. Na tejto konferencii boli prepojenÃ© poÃ­tae zo 40-tich rÃ´znych miest. So vzrastajÃºcim potom prepojenÃ½ch dokumentov vznikla potreba efektÃ­vneho vyhadÃ¡vania informÃ¡ciÃ­. PrvÃ½ vyhadÃ¡vajÃºci systÃ©m EXCITE bol predstavenÃ½ v roku 1993 Å¡tudentmi Stanfordskej univerzity. Jerry Yang a David Filo vytvorili v roku 1994 YAHOO systÃ©m. SystÃ©m GOOGLE vznikol v roku 1998. Jeho tvorcovia sÃº Sergey Brin a Larry Page."
40,30,0.47,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"kde index t oznaÄuje transponovanie a n predstavuje ÄasovÃº jednotku. Zavedieme si eÅ¡te vektor poÅ¾adovanÃ½ch vÃ½stupov, ktorÃ½ si oznaÄÃ­me ako: d (n) = (d1 (n),..., d L (n)) t , VÅ¡etky synaptickÃ© vÃ¡hy v ESN budeme ukladaÅ¥ do takzvanÃ½ch vÃ¡hovÃ½ch matÃ­c. Matica vstupnÃ½ch vÃ¡h bude maÅ¥ rozmery N Ã K a oznaÄÃ­me si ju W in = ( wijin )."
369,28,0.47,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V literatÃºre sa Äasto pouÅ¾Ã­va priamoÄiarejÅ¡Ã­ preklad z angliÄtiny Diagram prÃ­padov pouÅ¾itia. V tejto uÄebnici sme pouÅ¾ili nÃ¡zov, ktorÃ½ zodpovedÃ¡ originÃ¡lnemu nÃ¡zvu autora diagramu, Ivara Jacobsona, vo Å¡vÃ©dskom jazyku. AnglickÃ½ termÃ­n âuse caseâ je nepresnÃ½ preklad pÃ´vodnÃ©ho pojmu vo Å¡vÃ©dskom jazyku."
361,34,0.47,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Vysvetlenie: Ak existuje odvodenie (derivaÌcia) retâazca x aplikovanÄ±Ìm prepisovacÄ±Ìch pravidiel zacÌÄ±ÌnajuÌc v zacÌiatocÌnom symbole S, hovorÄ±Ìme o retâazci x ako o vetnej forme v danej gramatike. Jazyk definovanyÌ danou gramatikou je teda mnozÌina viet (resp. retâazcov) zÄ±ÌskatelânyÌch derivaÌciou (postupnou aplikaÌciou priamych derivaÌciÄ±Ì) zo zacÌiatocÌneÌho symbolu S. V prÄ±Ìpade, zÌe existuje priama derivaÌcia (je mozÌneÌ priamo aplikovanÄ±Ìm prepisovacieho pravidla Î± â Î² na x zÄ±Ìskatâ retâazec y), hovorÄ±Ìme zÌe retâazec y mozÌno priamo generovatâ z retâazca x v gramatike G. V prÄ±Ìpade, zÌe existuje viac pravidiel v tvare Î± â Î²1 , Î± â Î²2 , ..., Î± â Î²n , pricÌom Î±, Î² â (N âª T ) , budeme ich skraÌtene zapisovatâ ako Î± â Î²1 | Î²2 | ... | Î²n . DefinÄ±Ìcia 2.16:"
190,81,0.47,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"konfliktov medzi vÃ½vojÃ¡rmi a testermi mÃ´Å¾eme kategorizovaÅ¥ do troch vrstiev: (i) proces testovania softvÃ©ru, (ii) Ä¾udia a (iii) organizÃ¡cia [1]. V kaÅ¾dej z tÃ½chto vrstiev sa dajÃº identifikovaÅ¥ moÅ¾nÃ© zdroje konfliktu a nÃ¡sledne moÅ¾nosti podpory rieÅ¡enia zo strany manaÅ¾Ã©ra."
41,105,0.47,InformaÄnÃ© vzdelÃ¡vanie,"Tieto postrehy sÃº branÃ© z pouÅ¾Ã­vateÄ¾skÃ©ho hÄ¾adiska. Ako informatici by sme mali minimÃ¡lne pridaÅ¥: âª Je strÃ¡nka, kde sa mÃ´Å¾u nachÃ¡dzaÅ¥ pre nÃ¡s potrebnÃ© infromÃ¡cie optimalizovanÃ¡ pre vyhÄ¾adÃ¡vanie? (MÃ´Å¾e to znaÄne urÃ½chliÅ¥ hÄ¾adanie sprÃ¡vnej informÃ¡cie napriek uprednostÅovaniu platenÃ½ch strÃ¡nok) âª AkÃ½ vyhÄ¾adÃ¡vacÃ­ nÃ¡stroj pouÅ¾Ã­vam (Google, Yahoo, Zoznam...)? âª Ako som pochopil a vopred analyzoval Ãºlohu, ktorÃº som dostal? (Ak dostanem zadanie, neviem terminolÃ³giu v danej oblasti, Äi vÃ´bec neviem, Äo mÃ¡ byÅ¥ vÃ½sledkom mÃ´jho vyhÄ¾adÃ¡vania, tak zÃ­skanÃ© vÃ½sledky mÃ´Å¾u vyzeraÅ¥ skutoÄne zaujÃ­mavo. PrÃ­klad: ITMS â slovenskÃ½ portÃ¡l na sprÃ¡vu europrojektov, ale je to aj oznaÄenie IT Service Managementu â ITSM â ktorÃ½ sa na internetovÃ½ch strÃ¡nkach dÃ¡ vyhÄ¾adaÅ¥ ako ITMS. MoÅ¾no je dÃ´vodom aj skutoÄnosÅ¥, Å¾e autori mnohokrÃ¡t nie sÃº angliÄania, respektÃ­ve. A moÅ¾no mal autor nÃ¡zvu ITMS urÄitÃ½ zmysel pre humor, pretoÅ¾e z obsahovej strÃ¡nky sa dÃ¡ hovoriÅ¥ o manaÅ¾mente sluÅ¾ieb sÃºvisiacich s poskytovanÃ­m eurÃ³pskych fondov...) ReÅ¡erÅ¡nÃº poÅ¾iadavku tvorÃ­m pomocou kÄ¾ÃºÄovÃ½ch slov, ktorÃ© vo vyhÄ¾adÃ¡vacÃ­ch databÃ¡zach spÃ¡jam pomocou BOOLEOVSKÃCH logickÃ½ch operÃ¡torov. KÄ½ÃÄOVÃ SLOVÃ: SÃº najdÃ´leÅ¾itejÅ¡ie pojmy textu â charakterizujÃº obsah textu ( v knihovnÃ­ctve slovo umoÅ¾ÅujÃºce informaÄnÃ½ prieskum). SprÃ¡vne zvolenÃ© kÄ¾ÃºÄovÃ© slovÃ¡ sÃº podmienkou kvalitnÃ©ho vÃ½sledku vyhÄ¾adÃ¡vania. Nie je zaruÄenÃ©, Å¾e prvÃ© pouÅ¾itÃ© kÄ¾ÃºÄovÃ© slovÃ¡ a ich spojenie logickÃ½mi operÃ¡tormi nÃ¡m poskytnÃº Å¾elanÃ½ vÃ½sledok. PouÅ¾itie logickÃ½ch operÃ¡torov AND, OR, NOT (BooleovskÃ© operÃ¡tory). V niektorÃ½ch vyhÄ¾adÃ¡vaÄoch alebo databÃ¡zach sa pouÅ¾Ã­va aj znak +, vo vyhÄ¾adÃ¡vaÄi Google zastupuje tento operÃ¡tor automaticky medzera medzi vyhÄ¾adanÃ½mi termÃ­nmi. Pomocou tohto operÃ¡tora spresnÃ­me (zÃºÅ¾ime) vyhÄ¾adÃ¡vanie. VÅ¡etky kÄ¾ÃºÄovÃ© slovÃ¡ sa budÃº nachÃ¡dzaÅ¥ vo vyhÄ¾adanÃ½ch vÃ½sledkoch. ReÅ¡erÅ¡nÃ¡ stratÃ©gia / taktika, ponÃ­ma â¢ zhodnotenie tÃ©my (obsahovÃ© zameranie), â¢ vÅ¡etkÃ½ch aspektov s tÃ½m sÃºvisiacich,"
94,433,0.469,Sprievodca svetom vedeckÃ©ho publikovania,"K profesijnÃ½m kompetenciÃ¡m neoddeliteÄ¾ne patrÃ­ aj morÃ¡lny rozmer. V priestore, ktorÃ½ tvoria sociÃ¡lne sluÅ¾by a mÃ©diÃ¡ tak vznikla aj potreba a iniciatÃ­vy na definovanie a aplikÃ¡ciu etickÃ½ch zÃ¡sad prÃ¡ce. NaprÃ­klad EtickÃ½ kÃ³dex ALA177 (Americal Library Association) zdÃ´razÅuje rovnakÃ½ demokratickÃ½ prÃ­stup k informaÄnÃ½m zdrojom pre vÅ¡etkÃ½ch"
369,210,0.469,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ÃÄty klientov a sprÃ¡va hotovosti spolu sÃºvisia: vklad klienta na ÃºÄet znamenÃ¡ nielen zvÃ½Å¡enie zostatku na ÃºÄte klienta, ale aj prÃ­rastok hotovosti v pokladnici pracovnÃ­ka na poboÄke banky. Ukazuje sa, Å¾e model ÃºÄtov klientov a sprÃ¡vy hotovosti mÃ´Å¾eme nielen umiestniÅ¥ vedÄ¾a seba a navzÃ¡jom ich prepojiÅ¥, ale oba modely zovÅ¡eobecniÅ¥ do jednÃ©ho spoloÄnÃ©ho modelu. PrÃ­nosom uvedenÃ©ho zovÅ¡eobecnenia je deklaratÃ­vne definovanie pravidiel operÃ¡ciÃ­ a rozÅ¡irovateÄ¾nosÅ¥ vÃ½slednÃ©ho modelu. DruhÃº stranu bankovnÃ­ctva (tzv. aktÃ­vne operÃ¡cie banky) predstavuje predovÅ¡etkÃ½m poskytovanie Ãºverov. NajjednoduchÅ¡Ã­mi typmi Ãºverov sÃº spotrebnÃ© Ãºvery pre obyvateÄ¾stvo. SpotrebnÃ© Ãºvery sÃº krÃ¡tkodobÃ© aÅ¾ strednodobÃ© Ãºvery do ohraniÄenej vÃ½Å¡ky urÄenÃ© predovÅ¡etkÃ½m na nÃ¡kup spotrebnÃ©ho tovaru (automobil, zariadenie domÃ¡cnosti a inÃ©). Å peciÃ¡lnym prÃ­padom spotrebnÃ½ch Ãºverov sÃº bezÃºÄelovÃ© Ãºvery, t. j. Ãºvery, pri ktorÃ½ch klient neuvÃ¡dza ÃºÄel ich pouÅ¾itia. ZloÅ¾itejÅ¡Ã­mi typmi Ãºverov pre obyvateÄ¾stvo sÃº hypotekÃ¡rne Ãºvery. HypotekÃ¡rne Ãºvery sÃº dlhodobÃ© Ãºvery urÄenÃ© na investÃ­cie do nehnuteÄ¾nostÃ­ a zabezpeÄenÃ© nehnuteÄ¾nosÅ¥ami. Z dÃ´vodu ich dlhodobÃ©ho charakteru, vÃ¤ÄÅ¡ej vÃ½Å¡ky Ãºveru a zloÅ¾itejÅ¡ieho spÃ´sobu posudzovania zabezpeÄenia (nehnuteÄ¾nosti) majÃº v porovnanÃ­ so spotrebnÃ½mi Ãºvermi komplexnejÅ¡Ã­ proces schvaÄ¾ovania. NajzloÅ¾itejÅ¡Ã­mi typmi Ãºverov sÃº firemnÃ© Ãºvery. FiremnÃ© Ãºvery sÃº do znaÄnej miery âÅ¡itÃ©â na individuÃ¡lne potreby klienta, mÃ¡vajÃº zloÅ¾itejÅ¡ie zabezpeÄenia (vrÃ¡tane zabezpeÄenÃ­ nehnuteÄ¾nosÅ¥ami) a vyÅ¾adujÃº si zloÅ¾itejÅ¡ie finanÄnÃ© analÃ½zy klientov. PrÃ­kladom bankovÃ©ho produktu, ktorÃ½ kombinuje Ärty bankovÃ½ch Ãºverov, obchodovania a platobnÃ©ho styku, je faktoring. Tejto problematike sa venujeme v samostatnej podkapitole. V zÃ¡vereÄnej Äasti uvedieme typickÃ© softvÃ©rovÃ© systÃ©my pouÅ¾Ã­vanÃ© v banke. V banke bÃ½va zvyÄajne nasadenÃ½ jeden hlavnÃ½ bankovÃ½ systÃ©m (angl. core banking system), ktorÃ½ zabezpeÄuje vedenie ÃºÄtovnÃ­ctva a zÃ¡kladnÃ½ch produktov, predovÅ¡etkÃ½m vkladovÃ½ch a ÃºverovÃ½ch ÃºÄtov klientov. Tento systÃ©m bÃ½va zvyÄajne realizovanÃ½ v klasickÃ½ch (angl. legacy) technolÃ³giÃ¡ch. HlavnÃ½ bankovÃ½ systÃ©m dopÄºÅa viacero satelitnÃ½ch systÃ©mov vytvorenÃ½ch v modernejÅ¡Ã­ch technolÃ³giÃ¡ch, ktorÃ© poskytujÃº nadstavbovÃº funkcionalitu. Z hÄ¾adiska Å¡pecializovanÃ½ch finanÄnÃ½ch vzorov z 3. kapitoly je bankovnÃ­ctvo postavenÃ© na koncepte ÃºÄtu a operÃ¡ciÃ¡ch s ÃºÄtom. VyuÅ¾itie vzorov pre zÃ¡vÃ¤zky pristupuje aÅ¾ v zloÅ¾itejÅ¡Ã­ch produktoch (platobnÃ© karty, faktoring, Ãºvery). ZÃ¡kladnÃ½m mechanizmom pre bankovnÃ­ctvo je podvojnÃ© ÃºÄtovnÃ­ctvo9, ktorÃ© sa premieta aj do softvÃ©rovÃ½ch systÃ©mov v bankÃ¡ch. V tejto uÄebnici, z dÃ´vodu prehÄ¾adnosti, sme modelovanie bankovnÃ­ctva zjednoduÅ¡ili na âklientsku ÄasÅ¥â. KonkrÃ©tne povedanÃ©, pri operÃ¡ciÃ¡ch s ÃºÄtom klienta sa zaoberÃ¡me iba jednou ÄasÅ¥ou podvojnej ÃºÄtovnej operÃ¡cie, t. j. zÃ¡pisom na ÃºÄte klienta a vynechÃ¡vame protizÃ¡pisy na internÃ© ÃºÄty banky."
240,198,0.469,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"na konkrÃ©tnu implementÃ¡ciu. MÃ´Å¾eme takto vytvoriÅ¥ âvÅ¡eobecnÃ©â funkcie, ktorÃ© pri vykonÃ¡vanÃ­ zavolajÃº pomocnÃ© funkcie prostrednÃ­ctvom prÃ­sluÅ¡nÃ©ho smernÃ­ku na funkciu, ktorÃ½ dostali ako argument. TÃºto vÅ¡eobecnÃº implementÃ¡ciu potom moÅ¾no pouÅ¾iÅ¥ s rÃ´znymi implementÃ¡ciami pomocnÃ½ch funkciÃ­ predpÃ­sanÃ©ho typu. VyuÅ¾itie tohto prÃ­stupu zniÅ¾uje previazanosÅ¥ medzi rÃ´znymi ÄasÅ¥ami kÃ³du. VyuÅ¾itÃ­m smernÃ­ka na funkciu je napr. moÅ¾nÃ© v jazyku C implementovaÅ¥ zauÅ¾Ã­vanÃ© nÃ¡vrhovÃ© vzory Strategy (stratÃ©gia) a Observer (pozorovateÄ¾), resp. posielanie sprÃ¡v vzorom Publish-subscribe. UvaÅ¾ujme nasledujÃºcu vÅ¡eobecnÃº funkciu tabulka(), ktorÃ¡ pre danÃº aritmetickÃº operÃ¡ciu vypÃ­Å¡e vÃ½sledkovÃº tabuÄ¾ku veÄ¾kosti do n, priÄom ÄÃ­sla sÃº zarovnanÃ© na k miest:"
40,45,0.469,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"MSEtrain je chyba na trÃ©novacej mnoÅ¾ine, nmin je index trÃ©novacej vzorky, pri ktorej uÅ¾ doÅ¡lo k âvymytiuâ vplyvu poÄiatoÄnej inicializÃ¡cie a nmax je index poslednej trÃ©novacej vzorky. TÃºto sekciu si uzavrieme krÃ¡tkym zhrnutÃ­m vÅ¡eobecnej verzie trÃ©novacieho procesu."
236,78,0.469,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,TypografickÃ© pravidlo palca pre dÄºÅ¾ku riadku: Å½iaden riadok nemÃ¡ obsahovaÅ¥ viac ako 66 znakov. Preto majÃº strany LATEXu nastavenÃ© ako vÃ½chodzie takÃ© veÄ¾kÃ© okraje. Preto sa v tlaÄi novÃ­n Äasto pouÅ¾Ã­va viacero stÄºpcov.
190,263,0.469,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"1. PlÃ¡novanie a prÃ­prava testov â zahrÅuje vytÃ½Äenie cieÄ¾ov, stanovenie stratÃ©gie testovania, prÃ­prava testovacÃ­ch prÃ­padov a testovacÃ­ch procedÃºr. 2. VykonÃ¡vanie testov â vykonanie testov, sledovanie a meranie sprÃ¡vania produktu. 3. AnalÃ½za a vyvodenie dÃ´sledkov â aby sme mohli plÃ¡novaÅ¥ a pripraviÅ¥ ÄalÅ¡ie testy."
361,122,0.469,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Gramatiky ako sÌpecifikacÌneÌ prostriedky umozÌnÌujuÌ cez derivaÌciu generovatâ vety jazyka. Teraz gramatiku rozsÌÄ±Ìrime tak, aby pocÌas generovania vety zo vstupneÌho jazyka, generovala aj vety z cielâoveÌho jazyka. DefinÄ±Ìcia 5.1: Prekladovou gramatikou (PG) budeme volatâ takuÌ bezkontextovuÌ gramatiku P G = (N, T, D, R, S), kde: â N je nepraÌzdna konecÌnaÌ mnozÌina neterminaÌlych symbolov â T je nepraÌzdna konecÌnaÌ mnozÌina terminaÌlnych symbolov â vstupnaÌ abeceda a N â© T = â â D je konecÌnaÌ mnozÌina vyÌstupnyÌch terminaÌlnych symbolov pricÌom N â© D = â, T â© D = â â R je nepraÌzdna konecÌnaÌ mnozÌina pravidiel tvaru N Ã (N âª T âª D)â , A â Î±, A â N , Î± â (N âª T âª D)â â S je zacÌiatocÌnyÌ symbol Na oddelenie vstupnyÌch a vyÌstupnyÌch slov (kedâzÌe generovaneÌ slovaÌ prekladovou gramatikou suÌ z mnozÌiny (T âª D)â ) pouzÌijeme homomorfizmus. DefinÄ±Ìcia 5.2:"
59,505,0.469,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"PouÅ¾itie evoluÄnÃ½ch algoritmov v umelej inteligencii spolu s paradigmou multiagentovÃ½ch systÃ©mov otvÃ¡ra novÃ© a neoÄakÃ¡vanÃ© moÅ¾nosti pre tvorbu stratÃ©giÃ­ a modelov (ktorÃ© reprezentujÃº obvykle veÄ¾mi zloÅ¾itÃ© problÃ©my pre Äloveka), ich tvorba je prenechanÃ¡ poÄÃ­taÄu pomocou prÃ­stupu darwinovskej evolÃºcie âin silicoâ. NajvÅ¡eobecnejÅ¡ia formulÃ¡cia zÃ¡kladnej"
184,211,0.469,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Aspektovo-orientovanÃ¡ analÃ½za softvÃ©ru â Theme/Doc PrÃ­stup Theme/Doc (Baniassad, 2004) umoÅ¾Åuje identifikovaÅ¥ pretÃ­najÃºce zÃ¡leÅ¾itosti na zÃ¡klade poÅ¾iadaviek na vytvÃ¡ranÃ½ systÃ©m. ÃstrednÃ½ je pojem tÃ©ma, ktorÃ½ predstavuje urÄitÃ½ pohÄ¾ad na systÃ©m. PrÃ­stup Theme/Doc sa skladÃ¡ z nasledovnÃ½ch krokov: 1. IdentifikÃ¡cia akciÃ­ a entÃ­t, predstavujÃºcich sprÃ¡vanie systÃ©mu. Akcie sa rozdelia podÄ¾a vÃ½znamu a dÃ´leÅ¾itosti na hlavnÃ© a vedÄ¾ajÅ¡ie. HlavnÃ© akcie sa stanÃº tÃ©mami, podruÅ¾nÃ© akcie tvoria metÃ³dy v rÃ¡mci tÃ©m. 2. Äalej sa identifikujÃº vzÅ¥ahy medzi tÃ©mami, podstatnÃ© sÃº najmÃ¤ poÅ¾iadavky, ktorÃ© zdieÄ¾a viacero tÃ©m. PrÃ­klad je na obrÃ¡zku 3-7. 3. Po identifikovanÃ­ zÃ¡kladnÃ½m a pretÃ­najÃºcich tÃ©m je moÅ¾nÃ© tento model transformovaÅ¥ do Theme/UML."
135,152,0.469,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â sprÃ¡vu transakciÃ­ pri prÃ­stupe do ÃºloÅ¾iska: zaatie, odosielanie a spÃ¤vzatie, â udrÅ¾iavanie zdieanÃ½ch inÅ¡tanciÃ­ bÃ´bov pre spracovanie prichÃ¡dzajÃºcich poÅ¾iadaviek a prepÃ­nanie medzi aktÃ­vnym a neaktÃ­vnym stavom bÃ´bu,"
205,80,0.469,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","4.3.3 MÅtve linky: problÃ©m 404 ProblÃ©m 404 veÄ¾mi sÃºvisÃ­ s evolÃºciou webu. V dÃ´sledku neustÃ¡leho zanikania a nahradzovania strÃ¡nok sa mnohÃ© prepojenia stÃ¡vajÃº neplatnÃ½mi, tzv. mÅtvymi, pretoÅ¾e odkazujÃº na uÅ¾ neexistujÃºci obsah. Za poslednÃ½ch takmer dvadsaÅ¥ rokov vÃ½skumu v oblasti charakterizovania webu sa tomuto problÃ©mu venovalo viacero autorov, ktorÃ­ skÃºmali perzistenciu buÄ webovÃ½ch strÃ¡nok alebo prepojenÃ­ medzi nimi. PriemernÃ½ Äas existencie strÃ¡nky bol v roku 1997 podÄ¾a Kahleho 44 dnÃ­ [17]. V roku 2001 to bolo podÄ¾a [18] 75 dnÃ­. V roku 2003 bol podÄ¾a Kahleho priemernÃ½ Äas uÅ¾ 100 dnÃ­ [19]. Z uvedenÃ½ch vÃ½skumov vyplÃ½va, Å¾e priemernÃ½ Äas existencie strÃ¡nky sa predlÅ¾uje. NenaÅ¡li sme vÅ¡ak Å¾iadne Å¡tÃºdie, ktorÃ© by urÄili priemernÃ½ Äas existencie strÃ¡nky dnes. KeÄÅ¾e analyzovaÅ¥ celÃ½ web je veÄ¾mi zloÅ¾itÃ© kvÃ´li jeho rozÄ¾ahlosti, viacerÃ© vÃ½skumy sa vykonali na nejakej podmnoÅ¾ine webu, naprÃ­klad na kniÅ¾niÄnÃ½ch zdrojoch. UÅ¾ v roku 2002 konÅ¡tatovali v OCLC, Å¾e kniÅ¾niÄnÃ© zdroje zodpovedajÃº v niektorÃ½ch ohÄ¾adoch webu (napr. jazykovÃ© zastÃºpenie zdrojov) [7]. Autori [18] priÅ¡li s vÃ½sledkom, Å¾e po piatich rokoch 23-53 % prepojenÃ­ z CiteSeer ÄlÃ¡nkov uÅ¾ neplatilo. V [21] sa uvÃ¡dza, Å¾e 27 % prepojenÃ­ z CACM/Computer ÄlÃ¡nkov bolo po piatich rokoch neplatnÃ½ch. VÃ½sledky [22] udÃ¡vajÃº polÄas premeny prepojenÃ­ v D-Lib Magazine ÄlÃ¡nkoch 10 rokov. Ãdaje z tÃ½chto troch nezÃ¡vislÃ½ch vÃ½skumov na troch odliÅ¡nÃ½ch kniÅ¾niÄnÃ½ch zdrojoch sÃº pribliÅ¾ne rovnakÃ© (cca 25% znehodnotenie prepojenÃ­ za 5 rokov). Ale z porovnania so Å¡tÃºdiou [20], ktorÃ¡ vyhodnocovala rovnakÃ½ parameter na Ãºdajoch zo vÅ¡eobecnÃ©ho webu s vÃ½sledkom znehodnotenia aÅ¾ 67% prepojenÃ­ za Å¡tyri roky, usudzujeme, Å¾e kniÅ¾niÄnÃ© zdroje a prepojenia v nich vykazujÃº vÃ¤ÄÅ¡iu perzistenciu ako zdroje na vÅ¡eobecnom webe. NajaktuÃ¡lnejÅ¡Ã­ vÃ½skum [23] sa zaoberal perzistenciou prepojenÃ­ v prÃ­spevkoch na sluÅ¾be sociÃ¡lnych sietÃ­ Twitter s vÃ½sledkom 11%"
66,174,0.469,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"6.4.2 Obnova dÃ¡t Pre samotnÃº obnovu dÃ¡t sÃº potrebnÃ© dodatoÄnÃ© informÃ¡cie, ktorÃ© sÃº vkladanÃ© do log sÃºboru. V sÃºÄasnosti sa vyuÅ¾Ã­vajÃº princÃ­pu algoritmu obnovy ARIES (Algorithms for Recovery and Isolation Exploiting Semantics), ktorÃ½ bol vynÃ¡jdenÃ½ spoloÄnosÅ¥ou IBM v roku 1990 pre ich databÃ¡zovÃ½ systÃ©m DB2. PrincÃ­py tohto algoritmu sa vyuÅ¾Ã­vajÃº dodnes s urÄitÃ½m Ãºpravami. SamotnÃ½ protokol definuje, akÃ© identifikÃ¡tory musia byÅ¥ obsiahnutÃ© v rÃ¡mci log zÃ¡znamu a pri obnove dÃ¡t sa uskutoÄÅujÃº tieto tri fÃ¡zy:"
236,123,0.469,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"PrÃ­kaz \nonumber spÃ´sobÃ­, Å¾e LATEX danÃº rovnicu neoÄÃ­sluje. MÃ´Å¾e byÅ¥ nÃ¡roÄnÃ© vytvoriÅ¥ pomocou tÃ½chto metÃ³d vertikÃ¡lne zarovnanÃ© rovnice, ktorÃ© vyzerajÃº dobre. BalÃ­k amsmath poskytuje viac moÅ¾nostÃ­ na rieÅ¡enie tohoto problÃ©mu (pozri prostredia split a align)."
393,109,0.469,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"KombinÃ¡cia dolovania v obsahu, dolovania Å¡truktÃºry a vyuÅ¾itia webu Vo veÄ¾a prÃ­padoch je obsah webu, Å¡truktÃºra a informÃ¡cie o vyuÅ¾itÃ­ reprezentovanÃ¡ v tom istom dÃ¡tovom sÃºbore. NaprÃ­klad meno sÃºboru, ktorÃ© sa objavÃ­ v zÃ¡znamovÃ½ch sÃºboroch a dÃ¡tach Å¡truktÃºry webu, obsahuje uÅ¾itoÄnÃ© informÃ¡cie o obsahu. Mohli by sme naprÃ­klad predpokladaÅ¥, Å¾e sÃºbor pomenovanÃ½ âWebLogMining.htmlâ musÃ­ obsahovaÅ¥ informÃ¡cie o dolovanÃ­ v zÃ¡znamoch webu. O troch kategÃ³riÃ¡ch dolovania vo webovÃ½ch zÃ¡znamoch nemÃ´Å¾eme uvaÅ¾ovaÅ¥ izolovane od ostatnÃ½ch â dolovanie v obsahu webu, naprÃ­klad niekedy musÃ­ vyuÅ¾iÅ¥ dÃ¡ta zo Å¡truktÃºry webu pre klasifikovanie webovej strÃ¡nky. 2.4.2"
59,465,0.469,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"9.2 Expanzia teÃ³rie OperÃ¡cia expanzie konzistentnej teÃ³rie o novÃ© poznatky, priÄom konzistentnosÅ¥ novej rozÅ¡Ã­renej teÃ³rie sa zachovÃ¡va, patrÃ­ medzi najjednoduchÅ¡ie operÃ¡cie zmeny databÃ¡z poznatkov. MÃ´Å¾eme povedaÅ¥, Å¾e touto operÃ¡ciou ja danÃ¡ databÃ¡za neustÃ¡le rozÅ¡irovanÃ¡ o novÃ© a novÃ© poznatky, priÄom nemusÃ­me pouÅ¾iÅ¥ operÃ¡ciu kontrakcie alebo revÃ­zie, pretoÅ¾e novÃ© poznatky sÃº konzistentnÃ© s poznatkami z predchÃ¡dzajÃºcich etÃ¡p rozÅ¡irovania databÃ¡zy poznatkov."
59,546,0.469,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"PrÃ­klad 11.1. Predpokladajme, Å¾e generickÃ¡ pravda je âkaÅ¾dÃ½ vtÃ¡k lietaâ, ktorÃº prepÃ­Å¡eme do tvaru predikÃ¡tovej logiky s univerzÃ¡lnym kvantifikÃ¡torom (11.4a) ï¨ ï¢x ï© ï¨ vtÃ¡k ï¨ x ï© ï lieta ï¨ x ï© ï© Äalej predpokladajme, Å¾e objekt Ävirik je vtÃ¡k (13:4b) vtÃ¡k ï¨ Ävirik ï© Tieto dva vÃ½roky tvoria teÃ³riu"
59,89,0.468,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"NaznaÄenÃ½ postup pre prechod od subsymbolickej k symbolickej reprezentÃ¡cii a naopak pomocou neurÃ³novÃ½ch sietÃ­ s logickÃ½mi neurÃ³nmi a koneÄnostavovÃ½ch strojov, mÃ´Å¾e slÃºÅ¾iÅ¥ Å¡tÃºdiu vlastnostÃ­ tÃ½chto modelov a prechodu medzi nimi."
59,444,0.467,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ï ï½ ï» p, p ï q,q ï rï½ z prÃ­kladu 8.8, ktorÃ© mÃ¡ len jednu vetvu otvorenÃº. Potom model M(ï) obsahuje len jednu interpretÃ¡ciou ï´ ï½ ï¨1,1,1ï© , kde vÅ¡etky tri vÃ½rokovÃ© premennÃ© p, q a r z podpory ï sÃº pravdivÃ©."
276,16,0.467,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"privilegovanom reÅ¾ime pomÃ½lime. IOS interpretuje nerozpoznanÃ½ prÃ­kaz ako domÃ©novÃ© meno a snaÅ¾Ã­ sa kontaktovaÅ¥ DNS (Domain Name System) server. KeÄÅ¾e sa s nÃ­m nevie skontaktovaÅ¥, musÃ­me poÄkaÅ¥ kÃ½m vyprÅ¡Ã­ ÄasovaÄ niekoÄ¾kokrÃ¡t a zariadenie to nakoniec vzdÃ¡. Na preruÅ¡enie takÃ©hoto vyhÄ¾adÃ¡vania mÃ´Å¾eme pouÅ¾iÅ¥ tzv. âescape sequenceâ, ktorÃº predstavuje kombinÃ¡cia klÃ¡ves CTRL+SHIFT+6+X. VhodnÃ© je vÅ¡ak funkciu vyhÄ¾adÃ¡vania domÃ©novÃ½ch mien Ãºplne deaktivovaÅ¥ pomocou nasledujÃºceho prÃ­kazu."
59,482,0.467,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"9.5 EpistemickÃ¡ vÃ½znamnosÅ¥ poznatkov Pri revÃ­zii a kontrakcii musÃ­me z mnoÅ¾iny poznatkov K odstrÃ¡niÅ¥ takÃ© pÃ´vodnÃ© poznatky, aby vÃ½slednÃ¡ mnoÅ¾ina ïÂ´ bola konzistentnÃ¡ a mala ÄalÅ¡ie poÅ¾adovanÃ© vlastnosti. PretoÅ¾e v rÃ¡mci vÃ½rokovej logiky nepoznÃ¡me kritÃ©riÃ¡ vÃ½znamnosti jednotlivÃ½ch vÃ½rokov z danej teÃ³rie ï (alebo databÃ¡zy poznatkov K ï½ Cn ï¨ ï ï© ), GÃ¤rdenfors [3,4] fenomelogickÃ½ zaviedol ako mimologickÃ½ prostriedok koncepciu epistemickej vÃ½znamnosti vÃ½rokov pomocou relÃ¡cie Â´ï£Â´ ïª ï£ ï¹ =def Â´epistemickÃ¡ vÃ½znamnosÅ¥ ïª je menÅ¡ia alebo rovnÃ¡ epistemickej vÃ½znamnosti ï¹Â´ (9.12a) ktorÃº mÃ´Å¾eme chÃ¡paÅ¥ ako binÃ¡rnu relÃ¡ciu nad jazykom vÃ½rokovej logiky Lï, kde vÃ½raz ïª ï£ ï¹ je definovanÃ½ pre Ä¾ubovoÄ¾nÃº dvojicu formÃºl ïª, ï¹ ï L . Pomocou tejto relÃ¡cie âusporiadaniaâ mÃ´Å¾eme definovaÅ¥ ÄalÅ¡ie dve odvodenÃ© relÃ¡cie (12b) ï¨ ïª ï½ ï¹ ï© ï½def ï¨ ïª ï£ ï¹ ï© ï ï¨ ï¹ ï£ ïªï©"
43,24,0.467,Objektovo orientovanÃ© programovanie v C++,"KeÄÅ¾e konÅ¡truktory obidvoch tried potrebujÃº vedieÅ¥ hodnoty, ktorÃ© majÃº do Ãºdajov priradiÅ¥, tak rovnako ako metÃ³dy Nastav Ãºdaje majÃº niekoÄ¾ko parametrov. Hodnoty tÃ½chto parametrov, teda konkrÃ©tne nÃ¡zvy, sÃ­dla atÄ., sa konÅ¡truktorom odovzdajÃº priamo pri vytvÃ¡ranÃ­ objektov. HlavnÃ½ program() //v prvÃ½ch Å¡tyroch riadkoch sa automaticky spustia konÅ¡truktory ZÃ¡kaznÃ­k Z(""Pavol"",""KovÃ¡Ä"",""Bratislava"",6000,1000) Firma F1(""First a.s."",""TrenÄÃ­n"",20,10) Firma F2(""Second s.r.o."",""Bratislava"",25,8) Firma F3(""Third s.r.o."",""Trnava"",18,8) Z.VypÃ­Å¡ meno a bydlisko() Z.Zisti cenu(F1) Z.Zisti cenu(F2) Z.Zisti cenu(F3)"
265,250,0.467,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ArchitektonickÃ½ Å¡tÃ½l je znovupouÅ¾iteÄ¾nÃ½ (a opakovane pouÅ¾Ã­vanÃ½, praxou preverenÃ½) spÃ´sob, akÃ½m navrhujeme architektÃºru softvÃ©ru a definuje niektorÃ© znaky, ktorÃ© takÃ¡to architektÃºra vykazuje. ZvolenÃ­m architektonickÃ©ho Å¡tÃ½lu do znaÄnej miery definujeme âfilozofiuâ organizÃ¡cie celÃ©ho softvÃ©ru a zÃ¡roveÅ architektÃºru Å¡tandardizujeme. Medzi znÃ¡mejÅ¡ie architektonickÃ© Å¡tÃ½ly patria naprÃ­klad: klient-server, dÃ¡tovody a filtre, vrstvy Äi tabuÄ¾a."
66,120,0.467,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Klauzula CREATE TRIGGER definuje vytvorenie trigger s definovanÃ½m nÃ¡zvom, za ktorÃ½m nasleduje definovanie udalosti. V tomto prÃ­pade je to udalosÅ¥ typu AFTER INSERT ON, Äo znamenÃ¡ Å¾e po vloÅ¾enÃ­ zÃ¡znamu do tabuÄ¾ky sa spustÃ­ posudzovanie tohto trigger. Nasleduje REFERENCING NEW ROW AS, Äo je definovanie oznaÄenia ako bude referencovanÃ½ novÃ½ zÃ¡znam, ktorÃ½ bol uÅ¾ vloÅ¾enÃ½ do tabuÄ¾ky. Klauzula FOR EACH ROW definuje, Å¾e posudzovanie podmienky a prÃ­padnÃ¡ akcia je vykonÃ¡vanÃ¡ pre kaÅ¾dÃ½ zÃ¡znam, ktorÃ½ bolo vloÅ¾enÃ½ do tabuÄ¾ky. V rÃ¡mci klauzuly WHEN je definovanÃ¡ podmienka, a ak je splnenÃ¡, tak trigger postupuje do vykonania akcie, ktorÃ¡ je definovanÃ¡ v rÃ¡mci bloku BEGIN a END. V prÃ­pade, Å¾e podmienka nie je splnenÃ¡ tak akcia nie je vykonanÃ¡. Pre inÃ½ prÃ­klad, kde by sme chceli spustiÅ¥ trigger pred vloÅ¾enÃ­m zÃ¡znam by bolo v rÃ¡mci typu udalosti namiesto klauzuly AFTER pouÅ¾itÃ¡ klauzula BEFORE. 3.14.2 Syntax v PostgeSQL Definovanie trigger v rÃ¡mci PostgreSQL je mierne odliÅ¡nÃ© oproti vÅ¡eobecnej syntaxi a to z toho dÃ´vodu, Å¾e je potrebnÃ© definovaÅ¥ samostatnÃº trigger funkciu. V tejto funkcii je referovanie na novÃ½ alebo starÃ½ zÃ¡znam pomocou vÃ½razov NEW a OLD a obsahuje podmienku spolu s akciou. Funkcia je nÃ¡sledne pouÅ¾itÃ¡ v rÃ¡mci definovania trigger, ktorÃ½ obsahuje informÃ¡ciu, pri akom type udalosti sa vykonÃ¡ definovanÃ¡ trigger funkcia. Je moÅ¾nÃ© definovaÅ¥ aj viacero udalosti, pri ktorom sa mÃ¡ uskutoÄniÅ¥ trigger. UvaÅ¾ujme prÃ­klad, kedy pri vkladanÃ­ zÃ¡znamu do tabuÄ¾ky alebo jeho aktualizovanÃ­ je potrebnÃ© overiÅ¥, Äi v danom Äase tÃ­m mÃ¡ menej ako 21 hrÃ¡Äov. Pre jednoduchosÅ¥ prÃ­kladu budeme porovnÃ¡vaÅ¥ dÃ¡tum iba s hodnotou 2022-09-01. Vytvorenie funkcie a trigger v PostgreSQL vyzerÃ¡ nasledovne:"
393,156,0.467,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"OntoEdit: vÃ½voj ontolÃ³giÃ­ â pouÅ¾Ã­vateÄ¾skÃ½ nÃ¡stroj pre inÅ¾iniera znalostÃ­ Je to prostredie pre vÃ½voj v pracovnej skupine, ktorÃ© je Ä¾ahko rozÅ¡Ã­riteÄ¾nÃ© cez rÃ¡mcovÃ½ systÃ©m doplnkov. Tento grafickÃ½ nÃ¡stroj je nÃ¡pomocnÃ½ pre vÃ½vojÃ¡rov ontolÃ³giÃ­ v kaÅ¾dom kroku prÃ¡ce. UmoÅ¾Åuje modelovanie nezÃ¡visle od konkrÃ©tnej reprezentÃ¡cie jazyka. Poskytuje jednoduchÃ½ editor inÅ¡tanciÃ­ pre vkladanie faktov podÄ¾a modelovanej ontolÃ³gie. KonceptuÃ¡lny model ontolÃ³gie je uloÅ¾enÃ½ v internom formÃ¡te, ktorÃ½ mÃ´Å¾e byÅ¥ prenesenÃ½ do inej reprezentÃ¡cie, napr. DAML+OIL, RDF, RDFS. OntolÃ³gie mÃ´Å¾u byÅ¥ pouÅ¾itÃ© nÃ¡strojom Sesame. Doplnky nÃ¡stroja OntoEdit: Â OntoKick â prÃ­prava Å¡pecifikÃ¡cie ontolÃ³gie Â Mind2Onto â prÃ­prava poloformÃ¡lnej Å¡truktÃºry ontolÃ³gie"
190,310,0.467,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pre potreby merania kvality softvÃ©ru boli identifikovanÃ© urÄitÃ© charakteristiky softvÃ©ru, ktorÃ© sa spravidla vyhodnocujÃº metrikami. Jednou zo zÃ¡kladnÃ½ch a najjednoduchÅ¡ie pochopiteÄ¾nÃ½ch je hodnotenie kvality na zÃ¡klade charakteristÃ­k kvality (pozri obrÃ¡zok 1). JednÃ¡ sa o takzvanÃ© statickÃ© posudzovanie kvality softvÃ©ru."
190,79,0.467,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"MnoÅ¾stvo konfliktov medzi vÃ½vojÃ¡rmi a testermi vznikÃ¡ na zÃ¡klade ich rozdielnych osobnostnÃ½ch charakteristÃ­k a rozdielneho spÃ´sobu myslenia. VÃ½vojÃ¡ri vyvÃ­jajÃº softvÃ©r tak, aby sa dal pouÅ¾iÅ¥ tak, ako je to vymyslenÃ©. NechÃ¡pu, preÄo by sa mal niekto pokÃºÅ¡aÅ¥ pouÅ¾Ã­vaÅ¥ ho inÃ½m spÃ´sobom. Testeri"
59,248,0.467,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"epocha ObrÃ¡zok 4.13. Priebeh priemernÃ©ho fitnes pre dve rÃ´zne verzie GA s a bez memetickej informÃ¡ciou, keÄ uÄenie (Baldwinov efekt) je zahrnutÃ½ v oboch verziÃ¡ch, priÄom parameter strmosti uÄenia je ï¸ï = 0.5. VidÃ­me, Å¾e GA s uÄenÃ­m a s memetickou informÃ¡ciou podstatne rÃ½chlejÅ¡ie konverguje k maximÃ¡lnej hodnote fitnes neÅ¾ ako GA s uÄenÃ­m bez zahrnutia memetickej informÃ¡cie."
265,434,0.467,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Diagram aktivÃ­t je orientovanÃ½ graf (prÃ­klad diagramu je na Obr. 4.7). Tvoria ho vrcholy a hrany viacerÃ½ch typov. NajdÃ´leÅ¾itejÅ¡Ã­ typ vrcholu je aktivita (znÃ¡zorÅovanÃ¡ obdÄºÅ¾nikom so zaoblenÃ½mi rohmi). NajdÃ´leÅ¾itejÅ¡Ã­ typ hrany je tok riadenia medzi aktivitami (znÃ¡zorÅovanÃ½ orientovanou plnou Äiarou s jednoduchou Å¡Ã­pkou na konci). SpÃ¡janÃ­m aktivÃ­t tokmi riadenia naznaÄujeme, ktorÃ© aktivity predchÃ¡dzajÃº ktorÃ½m. ÄalÅ¡ie dÃ´leÅ¾itÃ© typy vrcholov sÃº bloky rozhodovanie (angl. decision) a zlÃºÄenie (angl. merge) (oba znÃ¡zorÅovanÃ© kosoÅ¡tvorcami). RozhodovacÃ­ blok umoÅ¾Åuje podmienenÃ© rozvetvenie toku riadenia na dve alebo viac vetiev (priÄom tok riadenia sa aktivuje vÅ¾dy iba pri jednej z nich). ZluÄovacÃ­ blok umoÅ¾Åuje takto rozdelenÃ© vetvy opÃ¤Å¥ spojiÅ¥ do jednej. PodobnÃ½m spÃ´sobom ako decision a merge, fungujÃº aj bloky vetvenia (rozparalelnenia, angl. fork) a spojenia (angl. join) (znÃ¡zorÅovanÃ© vyfarbenÃ½mi podlhovastÃ½mi obdÄºÅ¾nikmi), avÅ¡ak s tÃ½m rozdielom, Å¾e nie sÃº podmienenÃ© a tok riadenia ârozmnoÅ¾ujÃºâ a umoÅ¾ÅujÃº tak paralelnÃ© vykonÃ¡vanie aktivÃ­t. SÃºÄasÅ¥ kaÅ¾dÃ©ho diagramu aktivÃ­t je tieÅ¾ zaÄiatoÄnÃ¡ aktivita (znÃ¡zorÅovanÃ¡ vyfarbenÃ½m kruhom), ktorÃ¡ sa pri uskutoÄnenÃ­ procesu vykonÃ¡ ako prvÃ¡. VÃ¤ÄÅ¡ina diagramov aktivÃ­t mÃ¡ tieÅ¾ jednu alebo viac koncovÃ½ch aktivÃ­t (znÃ¡zorÅovanÃ½ch vyfarbenÃ½m kruhom sÃºstrednÃ½m s Å¡irÅ¡ou kruÅ¾nicou). PoznÃ¡mka: Medzi menej pouÅ¾Ã­vanÃ© prvky notÃ¡cie diagramu aktivÃ­t patria hrany typu tok objektov (angl. object flow) (orientovanÃ¡ ÄiarkovanÃ¡ Äiara s jednoduchou Å¡Ã­pkou), pomocou ktorÃ½ch sa naznaÄuje, Å¾e do aktivÃ­t vstupuje alebo z nich vystupuje nejakÃ½ objekt (v diagrame aktivÃ­t zakresÄ¾ovanÃ© ako obdÄºÅ¾niky s ostrÃ½mi rohmi)."
122,67,0.466,Modelovanie softvÃ©ru,"4.1 Å truktÃºra z prÃ­padov pouÅ¾itia ÄasÅ¥ Å¡truktÃºry softvÃ©rovÃ©ho systÃ©mu moÅ¾no odvodiÅ¥ z prÃ­padov pouÅ¾itia. TÃ¡to Å¡truktÃºra odrÃ¡Å¾a mentÃ¡lny model pouÅ¾Ã­vateÄ¾a (jeho predstavy o fungovanÃ­ systÃ©mu). NieÄo z nej vyplÃ½va priamo z opisu prÃ­padov pouÅ¾itia, ale viac sa dÃ¡ zÃ­skaÅ¥ ich rozborom prostrednÃ­ctvom diagramov sekvenciÃ­, ako sme videli v Äasti 3.12. StaÄÃ­ vymenovaÅ¥ typy definovanÃ© lÃ­niami Å¾ivota. TÃºto Å¡truktÃºru mÃ´Å¾eme vyjadriÅ¥ diagramom tried (angl. class diagram) v UML. IniciÃ¡lne, to mÃ´Å¾u byÅ¥ iba prvky bez vzÅ¥ahov, ako sÃº uvedenÃ© v diagrame tried na obrÃ¡zku 4.2. Trieda je znÃ¡zornenÃ¡ ako obdÄºÅ¾nik. MÃ´Å¾e obsahovaÅ¥ oddiely, ktorÃ© zobrazujÃº jej atribÃºty a operÃ¡cie. ViditeÄ¾nosÅ¥ operÃ¡ciÃ­ pre ÄalÅ¡ie triedy sa vyjadruje podobne ako v objektovo-orientovanÃ½ch programovacÃ­ch jazykoch od ÃºplnÃ©ho skrytia, oznaÄovanÃ©ho"
369,110,0.466,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Partneri firmy Na reprezentÃ¡ciu externÃ½ch ÃºÄastnÃ­kov â partnerov, t. j. zÃ¡kaznÃ­kov a dodÃ¡vateÄ¾ov, sa kladÃº inÃ© poÅ¾iadavky. PredovÅ¡etkÃ½m bÃ½va uÅ¾itoÄnÃ©, aby vÅ¡etci partneri boli evidovanÃ­ na jednom mieste, Äo zabraÅuje redundancii dÃ¡t a zjednoduÅ¡uje programovÃ½ kÃ³d. KeÄÅ¾e osoby a firmy majÃº nielen spoloÄnÃ©, ale aj odliÅ¡nÃ© atribÃºty, rieÅ¡enie ponÃºka relÃ¡cia generalizÃ¡cie (obr. 2.26). SpoloÄnÃ½mi atribÃºtmi a relÃ¡ciami sÃº naprÃ­klad ÄÃ­slo partnera a jeho adresa. OdliÅ¡nÃ½mi atribÃºtmi sÃº jeho prirodzenÃ© identifikÃ¡tory: meno, priezvisko, dÃ¡tum narodenia a rodnÃ© ÄÃ­slo3 pri osobe a nÃ¡zov firmy, dÃ¡tum zaloÅ¾enia a identifikaÄnÃ© ÄÃ­slo organizÃ¡cie (IÄO), prÃ­padne inÃ© ÄÃ­slo identifikujÃºce danÃº organizÃ¡ciu. Pri partneroch je potrebnÃ¡ moÅ¾nosÅ¥ evidencie (minimÃ¡lne) dvoch adries: adresy trvalÃ©ho bydliska osoby/sÃ­dla firmy a kontaktnej adresy. Na obr. 2.26 sme v porovnanÃ­ s exaktnÃ½m modelom z Äasti 1.3 ukÃ¡zali v praxi ÄastejÅ¡ie pouÅ¾Ã­vanÃ½ prÃ­stup k modelovaniu adries: partner mÃ¡ samostatnÃ© relÃ¡cie do registra obcÃ­ a registra ulÃ­c, kÃ½m orientaÄnÃ© ÄÃ­sla sa zadÃ¡vajÃº iba ako znakovÃ© reÅ¥azce. UvedenÃ½ model nespÄºÅa princÃ­py normalizÃ¡cie (orientaÄnÃ© ÄÃ­sla by mali byÅ¥ samostatnÃ© inÅ¡tancie, ktorÃ© jednoznaÄne urÄujÃº ulice a obce a tieÅ¾ ulica jednoznaÄne urÄuje obec), je vÅ¡ak urÄitÃ½m kompromisom medzi presnÃ½m (a zriedkavo pouÅ¾Ã­vanÃ½m) modelom a modelom zaloÅ¾enÃ½m iba na znakovÃ½ch reÅ¥azcoch, ktorÃ½ prinÃ¡Å¡a mnoÅ¾stvo chÃ½b. Pri partneroch nebÃ½va potrebnÃ© evidovaÅ¥ ich organizaÄnÃº Å¡truktÃºru, pretoÅ¾e partnerom je firma/organizÃ¡cia ako celok. VÃ½nimkou je, ak mÃ¡ firma viacero teritoriÃ¡lnych poboÄiek alebo prevÃ¡dzok a firma, ktorÃ¡ prevÃ¡dzkuje softvÃ©rovÃ½ systÃ©m spolupracuje jednotlivo s viacerÃ½mi z nich. InÃ½m prÃ­padom je, ak firma patrÃ­ do nejakÃ©ho zdruÅ¾enia alebo (nadnÃ¡rodnÃ©ho) koncernu. (Oba prÃ­pady ponechÃ¡vame ÄitateÄ¾ovi ako cviÄenie.) Pri partneroch niekedy evidujeme aj jej zÃ¡stupcov, ktorÃ­ sÃº oprÃ¡vnenÃ­ konaÅ¥ v jej mene. TakÃ½chto zÃ¡stupcov mÃ´Å¾e byÅ¥ pre jednu firmu viac a dokonca mÃ´Å¾u byÅ¥ medzi nimi definovanÃ© vzÅ¥ahy. (Firma mÃ¡ naprÃ­klad Å¡tyroch konateÄ¾ov, priÄom za firmu musia vystupovaÅ¥ vÅ¾dy minimÃ¡lne dvaja z nich a nesmÃº to byÅ¥ sÃºÄasne konatelia X a Y.). EvidovaÅ¥ zÃ¡stupcov firmy v softvÃ©rovom systÃ©me mÃ´Å¾e byÅ¥ dosÅ¥ ambiciÃ³zny cieÄ¾, pretoÅ¾e tÃ½chto zÃ¡stupcov pri veÄ¾kej firme (naprÃ­klad banke) mÃ´Å¾e byÅ¥ veÄ¾a s rÃ´znymi kompetenciami a navyÅ¡e sa po Äase menia. Z uvedenÃ©ho dÃ´vodu sa zvyÄajne takÃ¡to evidencia redukuje na evidenciu"
43,199,0.466,Objektovo orientovanÃ© programovanie v C++,"hÄ¾adania. Hodnoty sx = 1, sy = 0 predstavujÃº vodorovnÃ½ smer, sx = 0, sy = 1 zvislÃ½ smer, sx = 1, sy = 1 diagonÃ¡lny smer zÄ¾ava zdola doprava hore a sx = -1, sy = 1 diagonÃ¡lny smer zÄ¾ava zhora doprava dole. MetÃ³da postupuje od aktuÃ¡lneho polÃ­Äka najprv smerom âdozaduâ v danom smere, potom âdopreduâ. V premennej sucet je uloÅ¾enÃ½ poÄet znakov leÅ¾iacich vedÄ¾a seba, ktorÃ© sa v danom smere naÅ¡li. KeÄÅ¾e aktuÃ¡lne polÃ­Äko sa prejde dvakrÃ¡t, metÃ³da vrÃ¡ti hodnotu sucet-1. Ak metÃ³da vrÃ¡ti hodnotu vÃ¤ÄÅ¡iu alebo rovnÃº 5, metÃ³da Tah nÃ¡sledne vrÃ¡ti hodnotu true â znamenÃ¡ to, Å¾e ide o vÃ­Å¥aznÃ½ Å¥ah. Nakoniec zostal bod 7, ktorÃ½ je typickou Ãºlohou pre deÅ¡truktor. Len metÃ³da Hraj, konÅ¡truktor a deÅ¡truktor sÃº volanÃ© z hlavnÃ©ho programu, ostatnÃ© metÃ³dy sÃº volanÃ© vnÃºtri triedy hra. Preto ich deklarujeme ako sÃºkromnÃ© â nie je potrebnÃ©, aby boli prÃ­stupnÃ© odkiaÄ¾koÄ¾vek. K tejto slovnej analÃ½ze prikladÃ¡me aj diagram usporiadania programu a komunikÃ¡cie."
94,67,0.466,Sprievodca svetom vedeckÃ©ho publikovania,"2.1.4 KÄ¾ÃºÄovÃ© slovÃ¡ NiekoÄ¾ko (zvyÄajne 3-10) slov alebo frÃ¡z najlepÅ¡ie vystihujÃºcich tÃ©my, o ktorÃ½ch ÄlÃ¡nok pojednÃ¡va, uÄ¾ahÄÃ­ vyhÄ¾adÃ¡vanie ÄlÃ¡nku v databÃ¡zach. Tieto termÃ­ny by mali vychÃ¡dzaÅ¥ z tezauru (pre lekÃ¡rske vedy Medical Subject Headings â MeSH, pre fyziku INSPEC, pre Å¾ivotnÃ© prostredie GEMET, pre poÄ¾nohospodÃ¡rske vedy AGROVOC, pre terminolÃ³giu EurÃ³pskej Ãºnie EUROVOCâ¦). Mali by byÅ¥ Äo najkonkrÃ©tnejÅ¡ie a najmÃ¤ takÃ©, ktorÃ© chÃ½bajÃº v nÃ¡zve ÄlÃ¡nku (EASE 2017)."
184,240,0.466,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"JednoduchosÅ¥ ZÃ¡sada ÄÃ­slo jedna vravÃ­ Å¾e webovÃ© sluÅ¾by sÃº z pohÄ¾adu klientov nezÃ¡vislÃ© aplikÃ¡cie, nie metÃ³dy zviazanÃ© s aplikÃ¡ciou klienta. MetÃ³da sluÅ¾by sa vykonÃ¡va mimo aktÃ­vny proces na klientovi. NajÄastejÅ¡ie dokonca Ãºplne mimo hardvÃ©r klienta, poÅ¾iadavka musÃ­ cestovaÅ¥ po sieti na vzdialenÃ½ server, kde sa vykonÃ¡ a nÃ¡sledne vrÃ¡ti vÃ½sledok. TaktieÅ¾ vÃ½vojÃ¡ri aplikÃ¡ciÃ­ a poskytovatelia sluÅ¾ieb mÃ´Å¾u byÅ¥ geograficky vzdialenÃ½. KvÃ´li spomenutÃ½m obmedzeniam je vÃ½hodnÃ© klÃ¡sÅ¥ veÄ¾kÃ½ dÃ´raz na jednoduchosÅ¥. KeÄÅ¾e vÃ½vojÃ¡ri nemÃ´Å¾u robiÅ¥ predpoklady o sprÃ¡vanÃ­ sa druhej strany inÃ© ako je uvedenÃ© v Å¡pecifikÃ¡cii, je vhodnÃ© robiÅ¥ rozhrania Äo najjednoduchÅ¡ie."
43,30,0.466,Objektovo orientovanÃ© programovanie v C++,"VÃ½stupom programu bude zoznam ï¬riem, ktorÃ© spÄºÅajÃº podmienky jednotlivÃ½ch zÃ¡kaznÃ­kov. Presne takto by sa mal sprÃ¡vaÅ¥ program, ktorÃ½ sprÃ¡vne vyuÅ¾Ã­va princÃ­p polymorï¬zmu. ZÃ¡kaznÃ­k Pavol KovÃ¡Ä, Bratislava Firma First a.s, TrenÄÃ­n Firma Third s.r.o, Trnava ZÃ¡kaznÃ­k TomÃ¡Å¡ PetrÃ­k, Stupava Firma Second s.r.o., Bratislava"
265,444,0.466,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"StavovÃ½ diagram opisuje stavovÃ½ priestor nejakej veci (napr. objektu, dÃ¡tovej entity, komponentu, podsystÃ©mu Äi celÃ©ho systÃ©mu). PrincÃ­p fungovania stavovÃ½ch priestorov je veÄ¾mi podobnÃ½ koneÄnÃ½m automatom. StavovÃ½ priestor tvorÃ­ mnoÅ¾ina stavov, v akÃ½ch sa vec mÃ´Å¾e nachÃ¡dzaÅ¥ a prechodov medzi nimi. Prechody predstavujÃº okolnosti, za akÃ½ch vec svoj stav mÃ´Å¾e meniÅ¥. S prechodmi sÃº asociovanÃ©: â¢ udalosti, predstavujÃºce spÃºÅ¡Å¥aÄe prechodov medzi stavmi, â¢ podmienky, urÄujÃºce Äi prechody mÃ´Å¾u byÅ¥ uskutoÄnenÃ© a â¢ akcie, ktorÃ© sa vykonajÃº poÄas prechodov. Vec sa naraz mÃ´Å¾e nachÃ¡dzaÅ¥ len v jednom stave pre jeden stavovÃ½ priestor, mÃ´Å¾e vÅ¡ak maÅ¥ definovanÃ½ch viacero stavovÃ½ch priestorov (viacero stavovÃ½ch diagramov). Stavy taktieÅ¾ mÃ´Å¾u existovaÅ¥ v hierarchii (stavovÃ½ diagram umoÅ¾Åuje definovaÅ¥ zloÅ¾enÃ© stavy, teda samostatnÃ½ stavovÃ½ priestor vhniezdenÃ½ stavu vyÅ¡Å¡ej Ãºrovne). Modelovanie stavov sa pouÅ¾Ã­va najmÃ¤ vtedy, ak od stavu vecÃ­ zÃ¡visÃ­ ich sprÃ¡vanie. NaprÃ­klad na stlaÄenie rovnakÃ©ho tlaÄidla reaguje bankomat (ktorÃ©ho"
111,35,0.465,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Trieditelânostâ kariet Na skutoÄnÃ½ch webovÃ½ch strÃ¡nkach sÃº informÃ¡cie zvyÄajne usporiadanÃ© hierarchicky. Preto pri vytvÃ¡ranÃ­ vlastnÃ©ho triedenia kariet mÃ´Å¾ete byÅ¥ v pokuÅ¡enÃ­ pridaÅ¥ karty, ktorÃ© sÃº na rÃ´znych koncepÄnÃ½ch Ãºrovniach (Ãºrovniach abstrakcie). NaprÃ­klad, na webovej strÃ¡nke ZOO sa karta niÅ¾Å¡ej Ãºrovne âholubyâ mieÅ¡a s kartou vyÅ¡Å¡ej Ãºrovne âvtÃ¡kyâ. Je to vÅ¡ak nesprÃ¡vny prÃ­stup (pozri Obr. 3.4)."
240,2,0.465,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"vysvetlenie a ukÃ¡Å¾ky programov, za ktorÃ½mi nasledujÃº Ãºlohy pre samostatnÃº prÃ¡cu. RieÅ¡enia Ãºloh uvÃ¡dzame na konci kaÅ¾dej kapitoly a verÃ­me, Å¾e prÃ¡ve tieto rieÅ¡enia budÃº pre ÄitateÄ¾a vÃ½znamnÃ½m prostriedkom pre hlbÅ¡ie porozumenie jednotlivÃ½ch aspektov programovania v jazyku C. V poslednej kapitole (Projekty) uvÃ¡dzame niekoÄ¾ko vÃ¤ÄÅ¡Ã­ch projektov spolu s podrobnÃ½m postupom rieÅ¡enia, ktorÃ© sÃº urÄenÃ© predovÅ¡etkÃ½m ako moÅ¾nosÅ¥ integrovaÅ¥ zÃ­skanÃ© znalosti z ostatnÃ½ch kapitol. TeÅ¡Ã­me sa, Å¾e ste sa rozhodli preniknÃºÅ¥ do zÃ¡kutÃ­ programovania v jazyku C prÃ¡ve s nami. Jazyk C je malÃ½ jazyk, obsahuje pomerne mÃ¡lo kÄ¾ÃºÄovÃ½ch slov a len zÃ¡kladnÃ© typy riadiacich Å¡truktÃºr. Napriek tomu si pri jeho pouÅ¾itÃ­ mÃ´Å¾e programÃ¡tor âÄ¾ahko streliÅ¥ do nohyâ, keÄ aj jeden zatÃºlanÃ½ (chybnÃ½) znak v zdrojovom kÃ³de, mÃ´Å¾e pri vykonanÃ­ programu spÃ´sobiÅ¥ neoÄakÃ¡vanÃ© sprÃ¡vanie, ktorÃ© v koneÄnom dÃ´sledku spÃ´sobÃ­ finanÄnÃ© alebo materiÃ¡lne Å¡kody. Je preto veÄ¾mi nÃ¡roÄnÃ© pÃ­saÅ¥ programy, ktorÃ© sÃº spoÄ¾ahlivÃ© a bezpeÄnÃ©, v zmysle, Å¾e vo vÅ¡etkÃ½ch predvÃ­dateÄ¾nÃ½ch aj nepredvÃ­dateÄ¾nÃ½ch situÃ¡ciÃ¡ch nespÃ´sobia aÅ¾ takÃ© vÃ¡Å¾ne Å¡kody. Programovanie v jazyku C je umenie, ktorÃ© vyÅ¾aduje roky prÃ¡ce a skÃºsenostÃ­. V Bratislave, 25. augusta 2018."
130,482,0.465,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"S rÃ½chlym rozvojom a zmenou obsahu, ktorÃ½ sa na webe nachÃ¡dza, sa menia aj jazyky, ktorÃ© sÃº prostriedkom na zobrazenie tohto obsahu. Publikovanie informÃ¡ciÃ­ pre globÃ¡lne distribuovanie si vyÅ¾aduje zrozumiteÄ¾nÃ½ jazyk, ktorÃ©mu budÃº rozumieÅ¥ potenciÃ¡lne vÅ¡etky poÄÃ­taÄe. Pre tento ÃºÄel sa pouÅ¾Ã­vajÃº znaÄkovacie jazyky, ktorÃ½ch spoloÄnÃ½m predkom je jazyk SGML (angl. Standard Generalized Markup Language). V prostredÃ­ webu sa najÄastejÅ¡ie pouÅ¾Ã­va jazyk HTML (angl. HyperText Markup Language). Autorom poskytuje prostriedky pre:"
59,54,0.465,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 2.8. ZnÃ¡zornenie objektov Booleovej funkcie XOR v stavovom priestore jej argumentov. Z obrÃ¡zku jasne plynie, Å¾e neexistuje priamka, ktorÃ¡ by separovala celÃº rovinu na dve polroviny tak, Å¾e objekty (prÃ¡zdne krÃºÅ¾ky) s ohodnotenÃ­m 0 budÃº v jednej polrovine, zatiaÄ¾ Äo objekty s ohodnotenÃ­m 1 (Äierne krÃºÅ¾ky) budÃº v druhej polrovine."
43,103,0.464,Objektovo orientovanÃ© programovanie v C++,"V praxi sa Äasto vyskytujÃº aj dÃ¡ta, pre ktorÃ© reprezentÃ¡cia pomocou jednÃ©ho bytu nestaÄÃ­. KaÅ¾dÃ½ Ãºdaj mÃ¡ viacero bytov a jednotlivÃ© Ãºdaje sa zapisujÃº do sÃºboru alebo ÄÃ­tajÃº z neho ako bloky. V rÃ¡mci tried istream a ostream sÃº deï¬novanÃ© metÃ³dy, ktorÃ© umoÅ¾ÅujÃº ÄÃ­tanie a zapisovanie bloku dÃ¡t po bytoch. Ide o tieto metÃ³dy istream& read(char* s, streamsize n); ostream& write(const char* s, streamsize n);"
122,28,0.464,Modelovanie softvÃ©ru,"3 ModularizÃ¡cia prÃ­padov pouÅ¾itia a ich vyjadrenie v UML Pokus o oÅ¡etrenie vÅ¡etkÃ½ch moÅ¾nosti v jednom slede krokov nevyhnutne vedie k zahmleniu podstaty prÃ­padu pouÅ¾itia. Preto je potrebnÃ© prÃ­pady pouÅ¾itia organizovaÅ¥ â alebo, inak povedanÃ©, modularizovaÅ¥ â ako na vnÃºtornej, tak aj na vonkajÅ¡ej Ãºrovni. CelistvÃ½ obraz o systÃ©me vznikÃ¡ na zÃ¡klade prepojenÃ­ tÃ½chto modulov. Pri vÃ¤ÄÅ¡om poÄte prÃ­padov pouÅ¾itia mÃ´Å¾eme zaÄaÅ¥ strÃ¡caÅ¥ prehÄ¾ad, a toto je moment, kedy je vhodnÃ© zobraziÅ¥ ich diagramom. UML za tÃ½mto ÃºÄelom poskytuje diagram prÃ­padov pouÅ¾itia. ÄasÅ¥ 3.1 vysvetÄ¾uje pojem zÃ¡kladnÃ©ho toku a podtoku prÃ­padu pouÅ¾itia. ÄasÅ¥ 3.2 vysvetÄ¾uje vzÅ¥ah zahrnutia. ÄasÅ¥ 3.3 vysvetÄ¾uje pojem alternatÃ­vneho toku. ÄasÅ¥ 3.4 vysvetÄ¾uje vzÅ¥ah rozÅ¡Ã­renia. ÄasÅ¥ 3.5 ukazuje, ako moÅ¾no transformovaÅ¥ zahrnutie na rozÅ¡Ã­renie a naopak. ÄasÅ¥ 3.6 vysvetÄ¾uje vzÅ¥ah dedenia. ÄasÅ¥ 3.7 ukazuje, ako zoskupiÅ¥ viac podobnÃ½ch hlavnÃ½ch tokov do jednÃ©ho prÃ­padu pouÅ¾itia. ÄasÅ¥ 3.8 vysvetÄ¾uje, ako zosÃºladiÅ¥ ÃºÄastnÃ­kov pri vzÅ¥ahu zahrnutia. ÄasÅ¥ 3.9 ozrejmuje pozÃ­ciu sekundÃ¡rneho ÃºÄastnÃ­ka. ÄasÅ¥ 3.10 vymedzuje ÃºÄel diagramov prÃ­padov pouÅ¾itia. Äasti 3.11â3.13 ukazujÃº, ako sa prÃ­pad pouÅ¾itia dÃ¡ vyjadriÅ¥ grafickÃ½m modelom: diagramom aktivÃ­t, diagramom sekvenciÃ­ a diagramom komunikÃ¡cie. ÄasÅ¥ 3.15 vysvetÄ¾uje prÃ­pad pouÅ¾itia ako kolaborÃ¡ciu. ÄasÅ¥ 3.16 prinÃ¡Å¡a zÃ¡vereÄnÃ© poznÃ¡mky."
393,257,0.464,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"RankPageRank, RankHITSAuth, RankPageRank(w), RankHITSAuth(w) sÃº postupne usporiadania urÄenÃ© algoritmami Pagerank, HITS, Pagerank na ohodnotenom grafe, HITS na ohodnotenom grafe. Komunita Ä¾udÃ­ vyjadrenÃ¡ sociÃ¡lnou sieÅ¥ou UPC je skupina vedcov a tak citaÄnÃ© indexy zÃ­skanÃ© zo CiteSeeru boli referenÄnÃ½mi hodnotami. VypoÄÃ­tali sa 2 usporiadania: Rankcite, v ktorom boli vÃ½skumnÃ­ci usporiadanÃ­ podÄ¾a poÄtu citÃ¡ciÃ­ a Rankcite-self, kde boli usporiadanÃ­ podÄ¾a poÄtu citÃ¡ciÃ­ bez citÃ¡ciÃ­ samÃ©ho seba. TabuÄ¾ka 5-1 ukazuje korelÃ¡cie medzi referenÄnÃ½mi usporiadaniami Rankcite a Rankcite-self a ostatnÃ½mi. Je vidieÅ¥, Å¾e nezÃ¡visle od referenÄnÃ©ho usporiadania, NodeRanking dÃ¡va lepÅ¡ie vÃ½sledky ako HITS a Pagerank. Je tieÅ¾ zaujÃ­mavÃ©, Å¾e HITS dÃ¡va lepÅ¡ie vÃ½sledky na ohodnotenÃ½ch grafoch neÅ¾ na neohodnotenÃ½ch."
240,62,0.464,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"PomÃ´cka: VÃ½raz s viacerÃ½mi operÃ¡tormi priradenia (=) vyhodnocujte sprava doÄ¾ava. Zamyslite sa aj nad alternatÃ­vnou Ãºlohou: UrÄite vstup pre ktorÃ½ uvedenÃ½ program vypÃ­Å¡e nasledujÃºci vÃ½stup: a) 4 3 2 1 0, b) 3 4 2 3 4."
361,21,0.464,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Vzhlâadom na vysÌsÌie uvedeneÌ definÄ±Ìcie je dobreÌ si uvedomitâ, zÌe jazyk nad abecedou Î£ je lâubovolânaÌ mnozÌina slov nad Î£ a teda jazyky nad Î£ suÌ podmnozÌiny Î£â . Je zrejmeÌ, zÌe praÌzdna mnozÌina je jazyk nad lâubovolânou abecedou. Na druhej strane moÌzÌu bytâ jazyky aj nekonecÌneÌ, napr. {abn |n = 0, 1, ...} je jazyk nad abecedou {a, b} obsahujuÌci slovaÌ , ab, abab, abababa pod."
40,47,0.464,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Vzorkovacia fÃ¡za ZaÄneme z Ä¾ubovoÄ¾nÃ©ho poÄiatoÄnÃ©ho stavu neurÃ³novej siete x (0) a vypoÄÃ­tame novÃ½ stav siete pre kaÅ¾dÃº vstupnÃº vzorku n = 0,..., nmax na zÃ¡klade vzorca:    x (n + 1) = f (W in u teach (n + 1) + Wx (n)) NÃ¡sledne je dÃ´leÅ¾itÃ© zvoliÅ¥ si vhodnÃ½ ÄasovÃ½ okamih nmin , po ktorom predpokladÃ¡me, Å¾e uÅ¾ doÅ¡lo k vymytiu vplyvu poÄiatoÄnej inicializÃ¡cie siete. Po tomto okamihu je uÅ¾ stav neurÃ³novej siete urÄovanÃ½ iba predchÃ¡dzajÃºcimi stavmi a vstupmi neurÃ³novej siete."
196,45,0.464,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"pilÃ¡cie, maximÃ¡lny pocÌet sÃºborov a velâkostâ projektu) pre prÃ­stup zdarma. Je potrebnÃ© rÃ¡tatâ s obmedzenÃ­m z titulu verzie zdarma. V cÌase pÃ­sania tejto knihy boli hranicÌnÃ© vlastnosti projektu Overleaf pre verziu zdarma nasledovnÃ©: â¢ MaximÃ¡lny cÌas kompilÃ¡cie je 60 sekÃºnd. â¢ MaximÃ¡lne 2000 sÃºborov/projekt. â¢ MaximÃ¡lna celkovÃ¡ velâkostâ editovatelânÃ½ch sÃºborov â 7 MB/projekt. â¢ MaximÃ¡lna velâkostâ samostatnÃ©ho editovatelânÃ©ho textovÃ©ho sÃºboru: 1 MB/projekt. â¢ MaximÃ¡lna velâkostâ importovanÃ©ho projektu: 50 MB"
369,252,0.464,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ObchodnÃ© produkty Model platobnÃ½ch kariet na obr. 4.10 naÄrtol tieÅ¾ ÄalÅ¡iu problematiku, ktorou je podpora âobchodnÃ©hoâ (angl. business) pohÄ¾adu. Model obsahuje triedu KartovÃ½ produkt, ktorÃ¡ je odÄlenenÃ¡ od triedy Typ platobnej karty. Trieda Typ platobnej karty reprezentuje typ platobnej karty z hÄ¾adiska kartovej spoloÄnosti, kÃ½m trieda KartovÃ½ produkt zachytÃ¡va obchodnÃº filozofiu banky. UvedenÃ© rieÅ¡enie mÃ´Å¾eme zovÅ¡eobecniÅ¥ do definovania âobchodnÃ½châ bankovÃ½ch produktov ako nadstavby (vzor FasÃ¡da z [Gamma+ 1995]) nad âtechnickÃ½miâ produktmi. Banky okrem zÃ¡kladnÃ½ch produktov predÃ¡vajÃº aj balÃ­ky produktov, ktorÃ© sa skladajÃº z viacerÃ½ch inÃ½ch produktov. Ako prÃ­klad slÃºÅ¾i balÃ­k produktov, ktorÃ½ zahÅÅa beÅ¾nÃ½ ÃºÄet klienta spolu s elektronickou debetnou platobnou kartou alebo balÃ­k produktov tvorenÃ½ beÅ¾nÃ½m ÃºÄtom, debetnou platobnou kartou a kreditnou platobnou kartou s jej ÃºverovÃ½m ÃºÄtom. ZÃ¡kladnÃ½ model pre (obchodnÃ©) bankovÃ© produkty poskytuje obr. 4.18. BankovÃ½ produkt je generalizovanÃ¡ trieda, ktorej Å¡pecializovanÃ½mi podtriedami sÃº BalÃ­k produktov a ZÃ¡kladnÃ½ produkt. KeÄÅ¾e balÃ­ky produktov sa uÅ¾ neskladajÃº z ÄalÅ¡Ã­ch balÃ­kov v porovnanÃ­ so vÅ¡eobecnÃ½m vzorom Kompozit z [Gamma+ 1995], nie je pouÅ¾itÃ¡ rekurzÃ­vna relÃ¡cia, ale trieda BalÃ­k produktov mÃ¡ priamu relÃ¡ciu agregÃ¡cie s triedou ZÃ¡kladnÃ½ produkt. ZÃ¡kladnÃ½ produkt je nadstavba typu ÃºÄtu klienta alebo typu predmetu zmluvy.36 ZÃ¡kladnÃ½ produkt mÃ´Å¾e byÅ¥ nadstavbou inÃ©ho zÃ¡kladnÃ©ho produktu. PrÃ­kladmi zÃ¡kladnÃ½ch produktov sÃº: ï· BeÅ¾nÃ½ ÃºÄet klienta â je reprezentovanÃ½ ako inÅ¡tancia triedy ZÃ¡kladnÃ½ produkt, ktorÃ¡ mÃ¡ asociÃ¡ciu s inÅ¡tanciou triedy Typ ÃºÄtu klienta, ktorÃ¡ zodpovedÃ¡ typu beÅ¾nÃ©ho ÃºÄtu. ï· ElektronickÃ¡ debetnÃ¡ platobnÃ¡ karta â inÅ¡tancia triedy ZÃ¡kladnÃ½ produkt s asociÃ¡ciou na Typ predmetu zmluvy, zodpovedajÃºci typu platobnej karty podÄ¾a"
43,530,0.464,Objektovo orientovanÃ© programovanie v C++,"11.3 Å tandardnÃ© vÃ½nimky Prostriedky pre prÃ¡cu s vÃ½nimkami nie sÃº v C++ obmedzenÃ© len na trojicu prÃ­kazov try, throw a catch. Okrem tÃ½chto prÃ­kazov nÃ¡m C++ ponÃºka aj niekoÄ¾ko tried, ktorÃ© sÃº urÄenÃ© Å¡peciÃ¡lne na reprezentÃ¡ciu vÃ½nimiek. VÅ¡etky tieto triedy sÃº odvodenÃ© od zÃ¡kladnej triedy exception, ktorÃ¡ je deï¬novanÃ¡ v rovnomennej kniÅ¾nici exception. KaÅ¾dÃ¡ z nich reprezentuje nejakÃº Å¡tandardne sa vyskytujÃºcu vÃ½nimku â problÃ©m pri alokÃ¡cii pamÃ¤te, pri otvÃ¡ranÃ­ sÃºboru, prekroÄenie"
135,100,0.464,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Rozhranie (angl. interface) sumarizuje ako mÃ¡ klient interagova so sÃºiastkou, ale skrÃ½va implementanÃ© detaily. Klient naopak mÃ´Å¾e by zÃ¡vislÃ½ od tohto rozhrania. Å pecifikÃ¡cia modelu rozhrania nie je implementanÃ½m nÃ¡vrhom. Rozhranie neobsahuje informÃ¡ciu o tom, ako sÃº dÃ¡ta vnÃºtri sÃºiastky uloÅ¾enÃ© alebo organizovanÃ©. Cez rozhranie nie je moÅ¾nÃ© pristupova k implementÃ¡cii sÃºiastky. Vzah medzi dvoma sÃºiastkami je znÃ¡zornenÃ½ na obrÃ¡zku 2-2. SÃºiastka B mÃ¡ Å¡pecifikÃ¡ciu, ktorÃ¡ je implementovanÃ¡ v nejakom programovacom jazyku. SÃºiastka A sp a poÅ¾iadavky aplikanÃ©ho rozhrania (API; angl. Aplication Programming Interface), ktorÃ© je obsiahnutÃ© v Å¡pecifikÃ¡cii sÃºiastky B, prÃ¡ve vtedy, ke A zavolÃ¡ funkcionalitu, ktorÃº poskytuje sÃºiastka B. V ideÃ¡lnom prÃ­pade by implementÃ¡cia sÃºiastok mohla by napÃ­sanÃ¡ v rÃ´znych programovacÃ­ch jazykoch a mohla by sa vykonÃ¡va na rÃ´znych softvÃ©rovÃ½ch platformÃ¡ch (odliÅ¡nÃ½ch od platformy klientskeho programu). AvÅ¡ak v sÃºasnosti sa spolupracujÃºce sÃºiastky programujÃº vÃ¤Å¡inou len v rovnakom programovacom jazyku. Opis rozhrania Rozhranie je sada sÃ©manticky prepojenÃ½ch funkciÃ­ implementovanÃ½ch na objekte (Brockschmidt, 1994). Rozhranie sumarizuje sprÃ¡vanie a zodpovednosti, ktorÃ© sÃºiastka bude musie dodrÅ¾a, ke bude sÃºasou zostavy (angl. assembly) reprezentujÃºcej nejakÃº aplikÃ¡ciu. Rozhranie Å¡pecifikuje API, ktorÃ© pouÅ¾Ã­vajÃº klienti sÃºiastok, aby zavolali sluÅ¾by sÃºiastok, ale neÅ¡pecifikuje implementÃ¡ciu. Toto oddelenie umoÅ¾uje zameni implementÃ¡-"
59,400,0.464,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 7.1. Tri zÃ¡kladnÃ© rozklady pre tvorbu sÃ©mantickÃ©ho tabla. V prÃ­pade, Å¾e vytvorenÃ¡ podformula mÃ¡ tvar ï ï¨ ïª ï ï¹ ï© alebo ï ï¨ ïª ï ï¹ ï© , pouÅ¾ijeme De Morganove vzÅ¥ahy na ich ekvivalentnÃ½ prepis na ï¨ ïïª ï ïï¹ ï© , resp. na"
59,58,0.464,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"V predchÃ¡dzajÃºcej Äasti tejto kapitoly bolo ukÃ¡zanÃ©, Å¾e samotnÃ© logickÃ© neurÃ³ny sÃº schopnÃ© korektne klasifikovaÅ¥ len lineÃ¡rne separovateÄ¾nÃ© Booleove funkcie. Toto podstatnÃ© obmedzenie logickÃ½ch neurÃ³nov mÃ´Å¾e byÅ¥ odstrÃ¡nenÃ© pomocou logickÃ½ch neurÃ³nov vyÅ¡Å¡Ã­ch rÃ¡dov [6], ktorÃ½ch aktivita je urÄenÃ¡ zovÅ¡eobecnenÃ­m formuly (2.3) o Äleny vyÅ¡Å¡Ã­ch rÃ¡dov ï¦ n (2.14) y ï½ s ï§ï§ ï¥ wi xi ï« ï¥ wij xi x j ï« ... ï« ï ï·ï· i , j ï½1 ï§ i ï½1 ï¨i ï¼ j ï©"
236,1,0.463,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"VÄaka! VÃ¤ÄÅ¡ina materiÃ¡lu pouÅ¾itÃ©ho v tejto prÃ­ruÄke pochÃ¡dza z rakÃºskeho Ãvodu do LATEXu 2.09, napÃ­sanÃ©ho po nemecky tÃ½mito autormi: Hubert Partl <partl@mail.boku.ac.at> Zentraler Informatikdienst der UniversitÃ¤t fÃ¼r Bodenkultur Wien"
41,107,0.463,InformaÄnÃ© vzdelÃ¡vanie,"KniÅ¾nica je systematicky, konzistentne a prehÄ¾adne organizovanÃ¡ zbierka knÃ­h, textov, uÄebnÃ­c alebo skrÃ­pt, urÄenÃ¡ na priame pouÅ¾Ã­vanie ÄitateÄ¾om, prezenÄnÃº alebo absenÄnÃº vÃ½poÅ¾iÄku, resp. kniÅ¾nica je kultÃºrna inÅ¡titÃºcia, ktorÃ¡ organizuje spoloÄenskÃ© vyuÅ¾Ã­vanie tlaÄenÃ½ch a rukopisnÃ½ch materiÃ¡lov i ostatnÃ½ch hmotnÃ½ch zdrojov/nositeÄ¾ov poznatkov a informÃ¡ciÃ­. KniÅ¾nice dnes plnia aj Ãºlohu kultÃºrno-spoloÄenskÃ½ch priestorov, sociÃ¡lnych a komunitnÃ½ch centier, ktorÃ© poskytujÃº odbornÃ© poradenstvo a konzultaÄnÃº odbornÃº pomoc pre obÄanov. KniÅ¾nice sÃº zriadenÃ© v zmysle KniÅ¾niÄnÃ©ho zÃ¡kona Ä. 126/2015 Z. z. KeÄÅ¾e jedna z funkciÃ­ kniÅ¾nic je aj uchovÃ¡vanÃ­ informÃ¡ciÃ­ hovorÃ­me o nich, ako o pamÃ¤Å¥ovÃ½ch a fondovÃ½ch inÅ¡titÃºciÃ¡ch. SÃº teda nositeÄ¾om (hlavnÃ½m), uchovÃ¡vateÄ¾om a sprostredkovateÄ¾om spoloÄenskÃ©ho, technickÃ©ho, vedeckÃ©ho a kultÃºrneho dediÄstva, poznania a poznatkov, ako aj inÅ¡titÃºciami zaoberajÃºcimi sa uchovÃ¡vanÃ­m, ochranou a sprÃ­stupÅovanÃ­m poznania a poznatkov o kultÃºrnom dediÄstve, umenÃ­ a kultÃºre, atÄ. Druhy pamÃ¤Å¥ovÃ½ch inÅ¡titÃºciÃ­:"
369,222,0.463,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,VkladovÃ© certifikÃ¡ty predstavujÃº âzhmotnenÃ©â termÃ­novanÃ© vklady. Ide o jednorazovÃ½ vklad na obdobie jednÃ©ho mesiaca aÅ¾ niekoÄ¾ko rokov. NemoÅ¾no k nim vkladaÅ¥ ÄalÅ¡ie peÅaÅ¾nÃ© prostriedky ani vykonÃ¡vaÅ¥ ÄiastoÄnÃ© vÃ½bery z vkladu.
240,339,0.463,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"dostaneme k pamÃ¤Å¥ovÃ©mu miestu, kde bude hodnota 10 zapÃ­sanÃ¡. KeÄÅ¾e v riadku 4 je na adrese p (140737225150104) zapÃ­sanÃ¡ adresa premennej a (140737225150100), bude hodnota 10 uloÅ¾enÃ¡ do pamÃ¤te premennej a. KoneÄnÃ½ stav pamÃ¤te: int **pp"
265,297,0.463,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"AkÃ½ je rozdiel medzi technikami testovania Äierna skrinka (angl. black-box) a biela skrinka (angl. white-box)? Testovanie Äiernou skrinkou vychÃ¡dza iba zo Å¡pecifikÃ¡cie testovanÃ©ho softvÃ©ru (sÃºÄiastky). Testovanie bielou skrinkou vychÃ¡dza z vnÃºtornej Å¡truktÃºry existujÃºceho programu (Ãºdaje pri Åom pripravujeme tak, aby sme overili sprÃ¡vnosÅ¥ fungovania vÅ¡etkÃ½ch moÅ¾nÃ½ch prechodov cez graf podmienok programu)."
135,259,0.463,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â RozpÃ­navos (angl. Extensibility): OODBS musia umoÅ¾ova definova novÃ© typy, ktorÃ© pochÃ¡dzajÃº z preddefinovanÃ½ch typov a nesmÃº rozliÅ¡ova typy definovanÃ© systÃ©mom a typy definovanÃ© pouÅ¾Ã­vateom. Objektovo orientovanÃ© databÃ¡zovÃ© systÃ©my mÃ´Å¾u obsahova alÅ¡ie rozÅ¡Ã­renia ako naprÃ­klad kontrola typov, zloÅ¾enÃ© transakcie, mechanizmy pre podporu verziovania."
122,0,0.462,Modelovanie softvÃ©ru,Podstata prÃ­padov pouÅ¾itia a ich zÃ¡kladnÃ© vyjadrenie 2.1 PrÃ­pady pouÅ¾itia zachytÃ¡vajÃº typickÃ© interakcie so systÃ©mom 2.2 Predpoklady a dÃ´sledky . . . . . . . . . . . . . . . . . . . . 2.3 ÃÄastnÃ­ci . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.4 PrÃ­pad pouÅ¾itia je koncept vedomia koncovÃ©ho pouÅ¾Ã­vateÄ¾a 2.5 PrÃ­pad pouÅ¾itia nie je opis pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania . . .
369,120,0.462,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,Obr. 2.40. Vzor Viacero majiteÄ¾ov objektu RelÃ¡cia medzi ÃºÄastnÃ­kom a objektom nemusÃ­ byÅ¥ iba typu vlastnÃ­ctvo. Objekt mÃ´Å¾e maÅ¥ pridelenÃ©ho svojho sprÃ¡vcu alebo vlastnÃ­ci mÃ´Å¾u objekt prenajaÅ¥ inÃ©mu ÃºÄastnÃ­kovi Äi ÃºÄastnÃ­kom. GeneralizÃ¡ciu rÃ´znych typov relÃ¡ciÃ­ medzi ÃºÄastnÃ­kom a objektom formou typovania relÃ¡cie poskytuje obr. 2.41.
135,386,0.462,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"nedostatonÃ© vyjadrenie prÃ­tomnosti inÅ¡tancie vzoru v nÃ¡vrhu, o je v prÃ­pade, ke je potrebnÃ© pracova s viacerÃ½mi inÅ¡tanciami vzorov, znanÃ½ nedostatok. Modely definovanÃ© v rÃ¡mci POAD tento problÃ©m odstraujÃº, Ã­m sa stÃ¡vajÃº vhodnejÅ¡ie na vytvÃ¡ranie kompozÃ­ciÃ­ inÅ¡tanciÃ­ nÃ¡vrhovÃ½ch vzorov. PrvÃ½m modelom je Model na Ãºrovni vzorov (Pattern Level Model), ktorÃ½ zachytÃ¡va spoluprÃ¡cu vzorov na vysokej Ãºrovni abstrakcie. Obsahuje inÅ¡tancie nÃ¡vrhovÃ½ch vzorov a vzahy opisujÃºce spÃ´sob, akÃ½m budÃº navzÃ¡jom inÅ¡tancie spolupracova. PrÃ­klad Modelu na Ãºrovni vzorov sa nachÃ¡dza na obrÃ¡zku 5-16."
393,170,0.462,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"zÃ­skavanie slovies bolo stredobodom pozornosti vÃ½skumu Camille. Camille testovali na niekoÄ¾kÃ½ch skutoÄnÃ½ch svetovÃ½ch domÃ©nach znÃ¡mymi metÃ³dami zÃ­skavania bodov za precÃ­znosÅ¥ a rozpamÃ¤tanie. RozpamÃ¤tanie sa definovalo ako podiel v percentÃ¡ch sprÃ¡vneho hypobooku..Hypobook povaÅ¾ovali za sprÃ¡vny, ak jeden z konceptov v hypobooku zamieril cieÄ¾ovÃ½ koncept. PresnosÅ¥ je celkovÃ½ poÄet sprÃ¡vnych konceptov delenÃ½ poÄtom konceptov vytvorenÃ½ch v celom hypobooku. Cammile dosiahla rozpamÃ¤tanie 42% a prednosÅ¥ 19% na sade 50 nÃ¡hodne vybranÃ½ch viet obsahujÃºcich 17 rÃ´znych slovies."
135,302,0.462,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.8.8 Zhrnutie ArchitektÃºra softvÃ©ru je pomerne novÃ½ pojem, ktorÃ½ so sebou nesie viacero vÃ½skumnÃ½ch vÃ½ziev. Do popredia v rÃ¡mci vedeckej komunity sa dostÃ¡vajÃº snahy o nÃ¡vrh jazyka pre opis architektÃºr, ktorÃ½ by umoÅ¾nil jednotlivÃ© architektÃºry softvÃ©ru vyhodnoti a vzÃ¡jomne porovna."
236,22,0.462,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"ZvyÅ¡nÃ© symboly (a mnoho ÄalÅ¡Ã­ch) mÃ´Å¾u byÅ¥ vytlaÄenÃ© pomocou Å¡peciÃ¡lnych prÃ­kazov v matematickom prostredÃ­ alebo ako diakritickÃ© znamienka. Znak obrÃ¡tenÃ©ho lomÃ­tka \ nemÃ´Å¾eme zÃ­skaÅ¥ pridanÃ­m ÄalÅ¡ieho spÃ¤tnÃ©ho lomÃ­tka pred neho (\\), tÃ¡to postupnosÅ¥ sa pouÅ¾Ã­va na zalamovanie riadkov.3"
59,14,0.461,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1.4 KognitÃ­vna neuroveda Neuroveda Å¡tuduje nervovÃ½ systÃ©m, jeho vlastnosti, architektÃºru, fyziolÃ³giu a biofyziku neurÃ³nov a spojov (synapsiÃ­) medzi nimi. Jej Å¡pecializovanÃ¡ ÄasÅ¥ kognitÃ­vna neuroveda [13] Å¡tuduje mechanizmy realizÃ¡cie kognitÃ­vnych aktivÃ­t mozgu. Je to veda o informaÄnÃ½ch procesoch prebiehajÃºcich v mozgu: (1) akÃ½m spÃ´sobom je tÃ¡to informÃ¡cia zÃ­skavanÃ¡ z naÅ¡ich zmyslov, (2) ako sÃº realizovanÃ© procesy vnÃ­mania a rozpoznÃ¡vania, (3) ako vznikÃ¡ myslenie a vedomie, (4) ako vznikajÃº procesy rozhodovania, ktorÃ© zahÅÅajÃº predvÃ­danie budÃºcich stavov nÃ¡Å¡ho okolia a dÃ´sledkov naÅ¡ej aktivity, (5) Äo je to uÄenie a ako je realizovanÃ¡ pamÃ¤Å¥ a koneÄne, (6) ako sÃº implementovanÃ© procesy tvoriace nÃ¡Å¡ jazyk? Tieto Äinnosti patria do fundamentÃ¡lneho jadra kognitÃ­vnej vedy. MÃ´Å¾eme si poloÅ¾iÅ¥ otÃ¡zku, akÃ½ je rozdiel medzi kognitÃ­vnou vedou a kognitÃ­vnou neurovedou? HÄ¾adaÅ¥ odpoveÄ na tÃºto otÃ¡zku nie je jednoduchÃ© v dÃ´sledku veÄ¾kÃ©ho presahu medzi tÃ½mito dvoma âkognitÃ­vnymiâ vednÃ½mi disciplÃ­nami. SnÃ¡Ä, pomocou urÄitÃ©ho zjednoduÅ¡enÃ©ho prÃ­stupu k tomuto problÃ©mu, mÃ´Å¾eme povedaÅ¥, Å¾e medzi âkognitÃ­vnou neurovedouâ a âkognitÃ­vnou vedouâ existuje demarkaÄnÃ¡ Äiara v predmete ich zÃ¡ujmu, predmet zÃ¡ujmu kognitÃ­vnej neurovedy je hardvÃ©r (t. j. biologickÃ¡ realizÃ¡cia procesov) a predmet zÃ¡ujmu kognitÃ­vnej vedy je softvÃ©r (t. j. informatickÃ¡ a/alebo algoritmickÃ¡ realizÃ¡cia procesov). Tu musÃ­me vÅ¡ak poznamenaÅ¥, Å¾e toto zakotvenie kognitÃ­vnej vedy v biologickÃ½ch vedÃ¡ch (na nervovom substrÃ¡te) je hlavnÃ© kritÃ©rium odlÃ­Å¡enia kognitÃ­vnej vedy od umelej inteligencie, ktorÃ¡ taktieÅ¾ Å¡tuduje algoritmickÃº realizÃ¡ciu kognitÃ­vnych (alebo vÅ¡eobecnejÅ¡ie â inteligentnÃ½ch) procesov, ale nie je zakotvenÃ¡ na neurÃ³novom substrÃ¡te. VeÄ¾mi zaujÃ­mavÃ¡ je histÃ³ria neurovedy (a teda aj kognitÃ­vnej neurovedy). Za prvÃ½ch experimentÃ¡torov s Ä¾udskÃ½m mozgom sÃº pokladanÃ­ EgypÅ¥ania, ktorÃ­ uÅ¾ pred 5000 rokmi vykonÃ¡vali chirurgickÃ© vÃ½kony na mozgu. O ÃºspeÅ¡nosti tÃ½chto zÃ¡krokov svedÄia archeologickÃ© nÃ¡lezy, kde boli nÃ¡jdenÃ© lebky so zahojenou trepanÃ¡ciou lebeÄnej kosti. Filozof Aristoteles veril, Å¾e centrom naÅ¡ej inteligencie je srdce (podÄ¾a neho mozog je orgÃ¡n na"
393,201,0.461,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"TypickÃ¡ nÃ¡vÅ¡teva webovej strÃ¡nky prechÃ¡dza cez niekoÄ¾ko zÃ¡kladnÃ½ch fÃ¡z: poÅ¾iadavka DNS, vytvorenie TCP spojenia, HTTP poÅ¾iadavka a odpoveÄ. PredprÃ­prava sa mÃ´Å¾e pouÅ¾iÅ¥ v predstihu ku kaÅ¾dej z tÃ½chto fÃ¡z."
76,107,0.461,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Pri takejto konÅ¡trukcii pravdepodobnosti zloÅ¾enÃ©ho pokusu platÃ­ veta 1.7.10. 1.7.10 Veta. OznaÄme priestory vÃ½sledkov prvÃ©ho a druhÃ©ho pokusu symbolmi ï( ) , resp. ï( ) . Definujme P na sÃºÄine ï( ) ï´ ï( ) tak, ako naznaÄuje schÃ©ma odseku 1.7.9, teda pre vÅ¡etky kladieme P( ( , ) ) = Ak Aï° ï ï( ) , Bï° ï ï( ) , potom pre udalosti A = Aï° ï´ ï( ) a B = ï( ) ï´ Bï° (A, B sÃº udalosti v zloÅ¾enom pokuse) platÃ­: P(AïB) = P(A) P(B). (To znamenÃ¡, Å¾e A, B sÃº nezÃ¡vislÃ©.) Ãlohy 1.7.1 Nech nÃ¡hodnÃ½ pokus spoÄÃ­va v trojnÃ¡sobnom hÃ¡dzanÃ­ obyÄajnou hracou kockou. ZvoÄ¾me nÃ¡hodnÃ© udalosti A â v prvom hode menej ako 4 body, B â v druhom hode aspoÅ 5 bodov, C â v treÅ¥om hode pÃ¡rny poÄet bodov. a) Stanovte pravdepodobnosti udalostÃ­ A, B, C, AïB, AïBïC. b) Overte, Å¾e udalosti A, B, C sÃº po dvoch nezÃ¡vislÃ©. c) SÃº udalosti A, B, C (ako trojica) nezÃ¡vislÃ©?"
369,343,0.461,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V realite to mÃ´Å¾e byÅ¥ zloÅ¾itejÅ¡ie, pretoÅ¾e poÅ¾iadavky nemusia byÅ¥ iba typu AND ale aj typu OR. NaprÃ­klad poÅ¾iadavka na dosiahnutie odbornÃ©ho stupÅa je ovlÃ¡danie Å¡pecifikovanej technolÃ³gie a jednej ÄalÅ¡ej technolÃ³gie z vymenovanej mnoÅ¾iny."
265,435,0.46,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PoznÃ¡mka: Menej vyuÅ¾Ã­vanÃ© sÃº tieÅ¾ vrcholy typu poslanie signÃ¡lu (angl. send signal) a akceptovanie udalosti (angl. accept event). PouÅ¾Ã­vajÃº sa na znÃ¡zornenie synchronizÃ¡cie. Send signal efektÃ­vne znamenÃ¡ vyslanie signÃ¡lu s urÄitÃ½m kÃ³dom, na ktorÃ½ mÃ´Å¾u poÄÃºvaÅ¥ accept event vrcholy. Ak vyslanie signÃ¡lu nastane, aktivujÃº accept event vrcholy toky riadenia, ktorÃ© z nich vychÃ¡dzajÃº, ÄÃ­m moÅ¾no aktivovaÅ¥ urÄitÃ© ÄalÅ¡ie Äasti procesnej postupnosti."
41,74,0.46,InformaÄnÃ© vzdelÃ¡vanie,"najznÃ¡mejÅ¡ie patria: Enterprise Architect, BiZZDesing Architect Studio, ARCHI (pouÅ¾Ã­va sa aj na FIIT STU), ABACUS, ARIS... ZaÄÃ­na sa zvyÄajne definovanÃ­m hlavnÃ½ch rolÃ­ v projekte, definovanÃ­m âpain pointsâ, zistenÃ­m existujÃºceho stavu systÃ©mu a Å¾elanÃ©ho stavu systÃ©mu. Pracuje sa pritom z pohÄ¾admi â views â ktorÃ© odrÃ¡Å¾ajÃº stav existujÃºci â as is â a stav poÅ¾adovanÃ½ â to Tento spÃ´sob modelovania stavov podÄ¾a stanovenÃ½ch pravidiel dostal nÃ¡zov ADM â Architekture Data Modeling. Pri implementÃ¡cii TOGAF a ADM sa veÄ¾mi Äasto stretÃ¡vame so Å¡tandardizovanÃ½mi pojmami: Architecture View: PohÄ¾ad je zobrazenÃ­m systÃ©mu z pohÄ¾adu sÃºvisiaceho sÃºboru âobÃ¡vâ. PohÄ¾ad je to, Äo vidÃ­te (alebo to, Äo vidÃ­ zainteresovanÃ¡ strana, teda ten, kto si Å¾iada vyrieÅ¡iÅ¥ problÃ©m). PohÄ¾ady sÃº konkrÃ©tne, hovoria o Å¡pecifickom zobrazenÃ­. Architecture Viewpoint: OdkiaÄ¾ sa pozerÃ¡te; vÃ½hÄ¾ad alebo perspektÃ­va. NÃ¡zory sÃº vÅ¡eobecnÃ©. Model (alebo popis) informÃ¡ciÃ­ obsiahnutÃ½ch v zobrazenÃ­. Architecture Vision: Å pecifickÃ½ pohÄ¾ad na cieÄ¾ovÃº architektÃºru na vysokej Ãºrovni â teda nerozoberÃ¡m detaily architektÃºry. / FÃ¡za v ADM, ktorÃ¡ poskytuje pochopenie a definÃ­ciu Vision of Architecture / ÃroveÅ podrobnosti prÃ¡ce /Å¡pecifikujÃº sa oblasti, sÃºbory/, ktorÃ¡ sa mÃ¡ vykonaÅ¥. Baseline: Å pecifikÃ¡cia, ktorÃ¡ bola formÃ¡lne skontrolovanÃ¡ a odsÃºhlasenÃ¡, tÃ¡, ktorÃ¡ potom slÃºÅ¾i ako zÃ¡klad pre ÄalÅ¡Ã­ vÃ½voj alebo zmenu, a ktorÃº je moÅ¾nÃ© zmeniÅ¥ iba prostrednÃ­ctvom formÃ¡lnych postupov kontroly zmien alebo typu postupu, naprÃ­klad riadenia konfigurÃ¡cie. Baseline Architecture: ExistujÃºca definovanÃ¡ systÃ©movÃ¡ architektÃºra pred vstupom do cyklu kontroly a redizajnu architektÃºry. Business Governance: ZaoberÃ¡ sa zaistenÃ­m toho, aby obchodnÃ© procesy a politiky (a ich prevÃ¡dzka) priniesli obchodnÃ© vÃ½sledky a dodrÅ¾iavali prÃ­sluÅ¡nÃ© obchodnÃ© nariadenia. Capability: SchopnosÅ¥, ktorou disponuje organizÃ¡cia, osoba alebo systÃ©m. Schopnosti sÃº zvyÄajne vyjadrenÃ© vÅ¡eobecne a na vysokej Ãºrovni a na ich dosiahnutie je zvyÄajne potrebnÃ¡ kombinÃ¡cia organizÃ¡cie, Ä¾udÃ­, procesov a technolÃ³giÃ­; naprÃ­klad marketing, kontakt so zÃ¡kaznÃ­kom alebo odchÃ¡dzajÃºci telemarketing. Concerns: KÄ¾ÃºÄovÃ© zÃ¡ujmy, ciele, ktorÃ© majÃº zÃ¡sadnÃ½ vÃ½znam pre zainteresovanÃ© strany v systÃ©me, a urÄujÃº prijateÄ¾nosÅ¥ systÃ©mu. MÃ´Å¾u sa tÃ½kaÅ¥ ktorÃ©hokoÄ¾vek aspektu fungovania, vÃ½voja alebo prevÃ¡dzky systÃ©mu, vrÃ¡tane Ãºvah, ako je vÃ½kon, spoÄ¾ahlivosÅ¥, bezpeÄnosÅ¥, distribÃºcia a vÃ½voj. SÃº dlhodobejÅ¡ie ako problÃ©m (napr. stav ekonomiky), nie poÅ¾iadavka, ktorÃ¡ je krÃ¡tkodobÃ¡. Enterprise: NajvyÅ¡Å¡ia ÃºroveÅ (zvyÄajne) popisu organizÃ¡cie a zvyÄajne pokrÃ½va vÅ¡etky misie a funkcie. Podnik sa Äasto skladÃ¡ z viacerÃ½ch organizÃ¡ciÃ­."
94,208,0.46,Sprievodca svetom vedeckÃ©ho publikovania,"CitÃ¡cia v odbore, kde citovanosÅ¥ nie je vysokÃ¡, mÃ¡ relatÃ­vne vyÅ¡Å¡iu âhodnotuâ a naopak. CitaÄnÃ¡ metrika SNIP hodnotÃ­ citaÄnÃ© Ãºdaje Äasopisu v kontexte jednotlivÃ½ch vedeckÃ½ch odborov. SNIP reprezentuje citaÄnÃ½ potenciÃ¡l Äasopisu odvodenÃ½ z citaÄnÃ½ch zvyklostÃ­ danÃ©ho odboru."
59,104,0.46,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3 DarwinovskÃ¡ evolÃºcia ako algoritmus 3.1 ÃvodnÃ© poznÃ¡mky EvoluÄnÃ¡ teÃ³ria spoÄÃ­va v jednoduchej myÅ¡lienke, Å¾e Å¾ivot je v Äase premenlivÃ½ a mladÅ¡ie formy Å¾ivota nasledujÃº za starÅ¡Ã­mi formami. TÃ¡to myÅ¡lienka uÅ¾ existovala pred Darwinom, ale aÅ¾ on a jeho nasledovnÃ­ci ju rozvinuli do podoby umoÅ¾ÅujÃºcej vysvetliÅ¥ nielen rÃ´znorodosÅ¥ foriem Å¾ivota, ale aj adaptÃ¡ciu Å¾ivÃ½ch organizmov vzhÄ¾adom na meniace sa okolie. PodÄ¾a filozofujÃºceho biolÃ³ga Mayra [40], koncepcia evolÃºcie spoÄÃ­va v kombinÃ¡cii nasledujÃºcich piatich princÃ­pov:"
94,322,0.459,Sprievodca svetom vedeckÃ©ho publikovania,"9.2.1 JednoznaÄnÃ© identifikÃ¡tory V informaÄnej zÃ¡plave sveta digitÃ¡lnej vedy prestÃ¡vajÃº staÄiÅ¥ klasickÃ© spÃ´soby identifikÃ¡cie, na ktorÃ© sa vedci spoliehali vo veku papiera. ÄÃ­selnÃ© kÃ³dy ISBN (medzinÃ¡rodnÃ½ Å¡tandard na jednoznaÄnÃº identifikÃ¡ciu knÃ­h, fungujÃºci od roku 1970) a ISSN (medzinÃ¡rodnÃ½ Å¡tandard na identifkÃ¡ciu periodÃ­k, od roku 1975) museli doplniÅ¥ ÄalÅ¡ie systÃ©my â naprÃ­klad SICI (Serial Item and Contribution Identifier, doplnok ISSN), ktorÃ½ identifikuje zvÃ¤zky, Äasti a ÄlÃ¡nky v Äasopisoch, PII (Publisher Item Identifier), URN (Uniform Resource Name), URI (Uniform Resource Identifier), URL â PURL (Persistent Uniform Resource Locator, Persistent URL), HDL (Handle). Postupne vznikla celÃ¡ skupina medzinÃ¡rodnÃ½ch Å¡tandardnÃ½ch identifikÃ¡torov, urÄenÃ½ch na jednoznaÄnÃº identifikÃ¡ciu digitÃ¡lnych informaÄnÃ½ch objektov v globÃ¡lnom sieÅ¥ovom komunikaÄnom prostredÃ­. OznaÄujÃº sa spoloÄne pod pojmom trvalÃ© (perzistentnÃ©) identifikÃ¡tory digitÃ¡lnych informaÄnÃ½ch entÃ­t. TrvalÃ½m identifikÃ¡torom vo vÃ½skume a inovÃ¡ciÃ¡ch sa venoval aj eurÃ³psky projekt FREYA (Connected Open Identifiers for Discovery, Access and Use of Research Resources). Vo svojej sprÃ¡ve zverejnil o. i aj prehÄ¾adnÃº tabuÄ¾ku existujÃºcich aj novovznikjÃºcich typov perzistentnÃ½ch identifikÃ¡torov, ktorÃ© sÃº v sÃºÄasnosti priradenÃ© jednotlivÃ½m kategÃ³riÃ¡m vÃ½skumnÃ½ch zdrojov."
361,31,0.459,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Jazyk, ako takyÌ, moÌzÌeme blizÌsÌie sÌpecifikovatâ gramatikou. Je zrejmeÌ, zÌe jazyk moÌzÌeme sÌpecifikovatâ vymenovanÄ±Ìm vsÌetkyÌch jeho slov, resp. viet, cÌo je vsÌak z praktickeÌho hlâadiska problematickeÌ nielen pre jazyky nekonecÌneÌ, ale aj pre velâmi rozsiahle jazyky. V tejto cÌasti si definujeme niekolâko typov gramatÄ±Ìk v zaÌvislosti od ich vyjadrovacej sily. Gramatiky splÌnÌajuÌ zaÌkladnuÌ pozÌiadavku pre reprezentaÌciu nekonecÌnyÌch jazykov â je to konecÌnaÌ reprezentaÌcia. Pri sÌpecifikaÌcii gramatiky budeme rozoznaÌvatâ dva typy symbolov: â konecÌnuÌ mnozÌinu neterminaÌlnych symbolov N â konecÌnuÌ mnozÌinu terminaÌlnych symbolov T , ktoraÌ je identickaÌ s abecedou Î£, nad ktorou je jazyk definovanyÌ"
196,193,0.458,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Ako animovatâ obrÃ¡zky v prezentÃ¡cii? Uvedâte, ako animovatâ obrÃ¡zky v prezentÃ¡cii. Podobne ako pri animÃ¡cii textu. Prostredie overprint sa postarÃ¡ o prekrytie. PrÃ­kazom onslide definujete na ktorom slajde sa bude nachÃ¡dzatâ."
40,38,0.458,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"DefinÃ­cia 2. (KontraktÃ­vnosÅ¥). S tÃ½mi istÃ½mi predpokladmi ako v definÃ­cii 1,    neurÃ³novÃ¡ sieÅ¥ (W in ,W ,W back ) je kontraktÃ­vna vzhÄ¾adom na U a D , ak pre vÅ¡etky vstupno/vÃ½stupnÃ© sekvencie (u (n), d (n â 1)) â U Ã D sprava idÃºce do nekoneÄna, kde n = 0,1,2,... existuje (Î´ n ) nâ¥0 , takÃ©, Å¾e pre vÅ¡etky poÄiatoÄnÃ© stavy x (0), x â²(0) a pre vÅ¡etky n â¥ 0 platÃ­, Å¾e x (n) â x â²(n) < Î´ n , kde x (n) (resp. x â²(n) ) je stav neurÃ³novej siete v Äase n. IntuitÃ­vne mÃ´Å¾eme povedaÅ¥, Å¾e Äasom dÃ´jde k takzvanÃ©mu âvymytiuâ vplyvu poÄiatoÄnej inicializÃ¡cie neurÃ³novej siete (obr. 5). SchopnosÅ¥ dosiahnuÅ¥ echo stavy Ãºzko sÃºvisÃ­ s algebraickÃ½mi vlastnosÅ¥ami vÃ¡hovej matice W . Å½iaÄ¾, zatiaÄ¾ nie sÃº znÃ¡me Å¾iadne nutnÃ© a postaÄujÃºce podmienky,    na zÃ¡klade ktorÃ½ch by sa dalo jednoznaÄne rozhodnÃºÅ¥, Äi pri zadanÃ½ch W in ,W ,W back mÃ¡ danÃ¡ neurÃ³novÃ¡ sieÅ¥ schopnosÅ¥ dosiahnuÅ¥ echo stavy alebo nie."
239,196,0.458,Ãvod do matematickej logiky,"Ako v Kapitole 4, ak sa vo vetve seÌmantickeÌho stromu vyskytne tvrdenie aj jeho negaÌcia, tak prÄ±ÌslusÌnuÌ vetvu uzÌ nemusÄ±Ìme dâalej rozvÄ±Ìjatâ. TakaÌto vetva je uzavretaÌ a oznacÌujeme ju symbolom . Vetva je otvorenaÌ ak v nej nie je dvojica tvrdenÄ±Ì, ktoreÌ by boli v spore. OtvorenuÌ vetvu oznacÌujeme symbolom . AvsÌak podobne ako v Kapitole 7, pri formulaÌch modaÌlnej logiky musÄ±Ìme bytâ ovelâa opatrnejsÌÄ±Ì ako pri formulaÌch vyÌrokovej logiky. PlatÄ±Ì nasledujuÌca analoÌgia Vety 4.3 (2). Veta 9.1. Formula modaÌlnej logiky A je tautoloÌgia praÌve vtedy, kedâ suÌ vsÌetky vetvy seÌmantickeÌho stromu pre q A uzavreteÌ. Teraz si ukaÌzÌeme pouzÌitie seÌmantickyÌch stromov na niekolâkyÌch prÄ±Ìkladoch. Podobne ako v predchaÌdzajuÌcich kapitolaÌch, cÌÄ±Ìslujeme iba tie formuly, ktoreÌ okamzÌite nerozvÄ±Ìjame a ku ktoryÌm sa esÌte musÄ±Ìme vraÌtitâ. PrÄ±Ìklad. Pomocou seÌmantickeÌho stromu dokaÌzÌte, zÌe je formula A tautoloÌgia"
240,106,0.458,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 2-7 NapÃ­Å¡te program, ktorÃ½ pre celÃ© ÄÃ­slo N zadanÃ© na vstupe vypÃ­Å¡e vÅ¡etky nepÃ¡rne ÄÃ­sla od 1 do N. Program by mal pracovaÅ¥ sprÃ¡vne pre vÅ¡etky prÃ­pustnÃ© hodnoty pre N. Pri overovanÃ­ sprÃ¡vnosti rieÅ¡enia experimentujte s rÃ´znymi hodnotami pre N. Ãloha 2-8 DoplÅte chÃ½bajÃºce Äasti v nasledujÃºcom programe, ktorÃ½ naÄÃ­ta celÃ© ÄÃ­slo N zo vstupu a na vÃ½stup vypÃ­Å¡e hodnotu N! (faktoriÃ¡l). Predpokladajte, Å¾e N < 20."
129,38,0.458,Sprievodca licenciami Creative Commons,"sa teda povaÅ¾uje za poruÅ¡enie autorskÃ½ch prÃ¡v. Autor mÃ´Å¾e vyÅ¾adovaÅ¥ aj to, aby pouÅ¾Ã­vatelia citovali pÃ´vodnÃ©ho vydavateÄ¾ diela. PouÅ¾Ã­vatelia tak musia uvÃ¡dzaÅ¥ aj odkaz na pÃ´vodnÃº verziu diela, ak ho autor sprÃ­stupnil â o to Ä¾ahÅ¡ie je potom rozpoznaÅ¥ zmeny vykonanÃ© v diele. http://wiki.creativecommons.org/FAQ"
240,518,0.458,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"bodovÃ©ho zisku pre jedno pÃ­smeno by sme potrebovali urÄiÅ¥, koÄ¾kokrÃ¡t sa pÃ­smeno vyskytuje v hÃ¡danom texte. VytvorÃ­me si preto pomocnÃº funkciu pocet_pismen(), ktorÃ¡ pre zvolenÃ½ text urÄÃ­ poÄet vÃ½skytov zvolenÃ©ho znaku:"
41,59,0.458,InformaÄnÃ© vzdelÃ¡vanie,"mÃ´Å¾e upravovaÅ¥ poÄas Sprint-u, v ktorom prebieha. Po dokonÄenÃ­ prÃ¡ce sa odhadovanÃ¡ zostÃ¡vajÃºca prÃ¡ca aktualizuje. Ak sa prvky plÃ¡nu povaÅ¾ujÃº za nepotrebnÃ©, odstrÃ¡nia sa. Sprint Backlog menÃ­ vÃ½vojovÃ½ tÃ­m poÄas prebiehajÃºceho Sprint-u a je odrazom prÃ¡ce v tÃ­me, jeho napredovania, zaostÃ¡vania, situÃ¡cie. Increment â je sÃºÄet vÅ¡etkÃ½ch poloÅ¾iek Product Backlogu dokonÄenÃ½ch poÄas Sprintu. Increment sa zapoÄÃ­tava, ak je ÄasÅ¥ produktu po skonÄenÃ­ Sprint-u dokonÄenÃ¡. Increment predstavuje kontrolovateÄ¾nÃºj a vykonanÃº prÃ¡cu na konci Sprint-u. Increment sa musÃ­ daÅ¥ pouÅ¾Ã­vaÅ¥. NemusÃ­ byÅ¥ ale Product Ownerom uvoÄ¾nenÃ½ na pouÅ¾Ã­vanie. KANBAN â je z japonÄiny a znamenÃ¡ nieÄo ako âvizuÃ¡lna kartaâ. UdomÃ¡cnilo sa aj spojenie s bilboardom, vÃ½veskou, Äi signalizaÄnÃ½m panelom. Jeho pÃ´vodnÃ½ ÃºÄel sa do znaÄnej miery zachoval, je vhodnÃ½ na obmedzenie rozpracovanosti pri vÃ½voji (aj vÃ½robe). KANBAN procesnÃ½ manaÅ¾ment je postavenÃ½ na: - vizualizÃ¡cii workflow (pracovnÃ©ho cyklu) - WIP â Work in Progress, teda stavu rozpracovanosti - meranÃ­ Äasu dodania (Lead Time Measurement) Medzi vÃ½hody KANBANu patria: âª ProblÃ©my sÃº zreteÄ¾ne viditeÄ¾nÃ© v reÃ¡lnom Äase. âª Je pouÅ¾iteÄ¾nÃ½ privysokej miere neistoty a variability âª Je Ä¾ahko ÄitateÄ¾nÃ½ aj pre inÃ© zloÅ¾ky organizÃ¡cie, takÅ¾e vytvÃ¡ra prehÄ¾ad o tom, Äo sa deje âª UmoÅ¾Åuje optimalizovaÅ¥ (znÃ­Å¾iÅ¥) zÃ¡soby, kapacity a zabraÅuje ich zbytoÄnÃ©mu vytvÃ¡raniu âª Stavy v pracovnom postupe vizuÃ¡lne usporiadava, takÅ¾e zniÅ¾uje Äakacie doby, zlepÅ¡uje rÃ½chlosÅ¥ KANBAN je populÃ¡rny v menÅ¡Ã­ch softvÃ©rovo-developerskÃ½ch firmÃ¡ch. Poskytuje flexibilitu pri plÃ¡novanÃ­ a pre programÃ¡torov, aj vÄaka aplikÃ¡ciÃ¡m, ktorÃ© vÃ½razne reÅ¡pektujÃº koncept âvizuÃ¡lnych kartiÄiekâ, je prijateÄ¾nÃ½ ako spÃ´sob manaÅ¾mentu. PrinÃ¡Å¡a totiÅ¾ poriadok do prostredia, ktorÃ© sa mu vyhÃ½ba (IT vÃ½vojÃ¡ri) a je pre neho prijateÄ¾nÃ©. Nepracuje ani s veÄ¾a termÃ­nmi, Äo mu tieÅ¾ zaruÄuje popularitu. PoznÃ¡ Value Stream, teda nepretrÅ¾itÃ½ pracovnÃ½ tok (workflow), ktorÃ½ pozostÃ¡va zo vÅ¡etkÃ½ch akciÃ­ potrebnÃ½ch na uskutoÄnenie projektu od pÃ´vodnej myÅ¡lienky po dokonÄenie. Elimination of Waste (podobÃ¡ sa to pÃ´vodnÃ©mu ÃºÄelu, ako vÃ½robnÃ©ho projekt manaÅ¾mentu) je zase eliminÃ¡ciou ÄohokoÄ¾vek, Äo neprinÃ¡Å¡a ÃºÅ¾itok, je nepotrebnÃ©. Pri softvÃ©rovom vÃ½voji poznÃ¡ eliminÃ¡ciu odpadu, ktorÃº predstavuje: âª Odpad pri vÃ½voji kÃ³du â nedokonÄenÃ¡ prÃ¡ca, poruchovÃ½ kÃ³d, zbytoÄnÃ© doplnky â¦ âª Odpad v riadenÃ­ projektu â zbytoÄnÃ© procesy riadenia, dokumentÃ¡cia, kontrola dokumentÃ¡cie, plÃ¡novanie procesov, funkcionality navyÅ¡e, zlÃ½ manaÅ¾ment pracovnÃ­kovâ¦"
361,104,0.458,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","1. VytvorÄ±Ìme N  = {A | A â N, A ââ } â N 0 = {} â N i = {A | A â N âiâ1 } âª N iâ1 2. Vo vsÌetkyÌch pravidlaÌch spravÄ±Ìme vsÌetky kombinaÌcie nahradenÄ±Ì neterminaÌlnych symbolov z N  poÌvodnyÌm neterminaÌlnym symbolom alebo  3. Ak S â N  pridaÌme pravidlaÌ S 0 â  | S, S 0 bude novyÌ zacÌiatocÌnyÌ symbol gramatiky Vysvetlenie: Najprv vytvorÄ±Ìme mnozÌinu N , ktoraÌ obsahuje vsÌetky neterminaÌlne symboly, z ktoryÌch je mozÌneÌ odvoditâ  (algoritmus je analogickyÌ k predchaÌdzajuÌcim). Potom upravÄ±Ìme pravidlaÌ tak, zÌe v kazÌdej pravej strane pravidla, ktoraÌ obsahuje neterminaÌlne symboly z mnozÌiny N , nahradÄ±Ìme tento neterminaÌlny symbol  alebo ho ponechaÌme. DoÌlezÌiteÌ je si uvedomitâ, zÌe v prÄ±Ìpade, zÌe pravaÌ strana pravidla obsahuje viac neterminaÌlnych symbolov z N musÄ±Ìme vytvoritâ vsÌetky mozÌneÌ kombinaÌcie nahradenÄ±Ì."
94,5,0.457,Sprievodca svetom vedeckÃ©ho publikovania,"3.1.3 NebÃ¡Å¥ sa opÃ½taÅ¥ ........................................................................................................................................................................ 58 3.1.4 VyskÃºÅ¡aÅ¥ aj elektronickÃ© nÃ¡stroje ...................................................................................................................................... 58 3.1.5 PreverovaÅ¥ Ãºdaje, ÄÃ­taÅ¥ informÃ¡cie pre autorov .......................................................................................................... 60 3.2 POCHYBNÃ ALEBO PREDÃTORSKÃ PUBLIKOVANIE ............................................................................................................................ 61 3.3 PODANIE ÄLÃNKU DO ÄASOPISU ........................................................................................................................................................... 64 OTÃZKY ........................................................................................................................................................................................................... 66 4 RECENZNÃ KONANIE (Z. StoÅ¾ickÃ¡) ................................................................................................................................. 67 4.1 PRIEBEH RECENZNÃHO KONANIA ........................................................................................................................................................ 67 4.2 HISTORICKÃ VÃVOJ RECENZNÃHO KONANIA....................................................................................................................................... 69 4.3 ZÃSADY POSUDZOVANIA ........................................................................................................................................................................ 72 4.4 LIMITÃCIE RECENZNÃHO KONANIA ..................................................................................................................................................... 74 4.4.1 Selektivita a subjektÃ­vnosÅ¥ .................................................................................................................................................... 75 4.4.2 ZdÄºhavosÅ¥ ..................................................................................................................................................................................... 75 4.4.3 ZaujatÃ­ recenzenti .................................................................................................................................................................... 76 4.5 ZLYHANIA RECENZNÃHO KONANIA ...................................................................................................................................................... 77 4.6 VOLANIE PO TRANSPARENTNOSTI ....................................................................................................................................................... 82 OTÃZKY ........................................................................................................................................................................................................... 83 5 PRÃVNE A ETICKÃ ASPEKTY VEDECKÃHO PUBLIKOVANIA (Z. StoÅ¾ickÃ¡) ....................................................... 84 5.1 AUTORSKÃ PRÃVA .................................................................................................................................................................................. 84 5.1.1 MedzinÃ¡rodnÃ¡ ochrana autorskÃ½ch prÃ¡v ....................................................................................................................... 87 5.1.2 Prepis autorskÃ½ch prÃ¡v pri publikovanÃ­ .......................................................................................................................... 88 5.2 VEDECKÃ A PUBLIKAÄNÃ ETIKA ........................................................................................................................................................... 89 5.2.1 KeÄ sa objavia pochybnosti.................................................................................................................................................. 93 5.2.2 Stiahnutie ÄlÃ¡nku ..................................................................................................................................................................... 94 5.2.3 PirÃ¡tske zdieÄ¾anie ÄlÃ¡nkov â Äierna cesta k otvorenÃ©mu prÃ­stupu ....................................................................... 96 OTÃZKY ........................................................................................................................................................................................................... 98 6 OTVORENÃ PUBLIKOVANIE (Z. StoÅ¾ickÃ¡) ................................................................................................................... 99 6.1 Å ÃRENIE POVEDOMIA (ADVOCACY) ................................................................................................................................................... 101 6.2 ELEKTRONICKÃ NÃSTROJE NA VYHÄ½ADÃVANIE OTVORENÃHO OBSAHU ..................................................................................... 101 6.3 OTVORENÃ PUBLIKOVANIE ................................................................................................................................................................ 102 6.3.1 ZelenÃ¡ cesta (autoarchivÃ¡cia)........................................................................................................................................... 102 6.3.2 ZlatÃ¡ cesta (Äasopisy) ........................................................................................................................................................... 103 6.3.3 PlatinovÃ¡ cesta ........................................................................................................................................................................ 104 6.4 POLITIKY............................................................................................................................................................................................... 104 6.5 OTVORENÃ VEDA ................................................................................................................................................................................. 106 OTÃZKY ........................................................................................................................................................................................................ 107 7 HODNOTENIE VEDY A VÃSKUMU (J. DobbersteinovÃ¡, S. HudecovÃ¡) ............................................................... 108 7.1 BIBLIOMETRIA ..................................................................................................................................................................................... 110 7.1.1 CitaÄnÃ¡ analÃ½za ...................................................................................................................................................................... 111 7.1.2 BibliometrickÃ© databÃ¡zy a ich poskytovatelia ............................................................................................................ 112 7.1.2.1 Clarivate Analytics .................................................................................................................................................................................112 7.1.2.2 Elsevier ........................................................................................................................................................................................................115"
115,81,0.457,Algebra a diskrÃ©tna  matematika,"DÃ´kaz vymenovanÃ­m prÃ­padov implikÃ¡cie ( p1 â¨ ... â¨ pn ) â q je zaloÅ¾enÃ½ na jej ekvivalentnom tvare ( ( p1 â¨ ... â¨ pn ) â q ) â¡ ( ( p1 â q ) â§ ... â§ ( pn â q ) ) To znamenÃ¡, Å¾e dÃ´kaz sa redukuje na dÃ´kazy vÅ¡etkÃ½ch implikÃ¡ciÃ­ pi â q , pre i = 1, 2, ..., n. Tento spÃ´sob dÃ´kazu je veÄ¾mi ÄastÃ½ v diskrÃ©tnej matematike. MATEMATICKÃ INDUKCIA"
76,284,0.457,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"DÃ´kaz vety sa opiera o 4.2.3 a 4.2.5. Veta odzrkadÄ¾uje intuitÃ­vne chÃ¡panie zÃ¡kladnej vlastnosti Å¡tatistiky Ì , Å¾e priemer akceptujeme ako prirodzenÃ½ odhad strednej hodnoty. ZÃ¡roveÅ vidÃ­me, Å¾e variancia (rozptyl) vÃ½berovÃ©ho priemeru je tÃ½m menÅ¡ia, ÄÃ­m je rozsah vÃ½beru vÃ¤ÄÅ¡Ã­. Uvedomme si, Å¾e pre smerodajnÃº odchÃ½lku ï³( Ì ), t. j. smerodajnÃº odchÃ½lku vÃ½berovÃ©ho priemeru platÃ­:"
369,324,0.457,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V roku 2009 bola sadzba poistnÃ©ho vo vÃ½Å¡ke 14 %,priÄom pri zamestnancoch z tejto sumy zamestnanec platil 4 % a zamestnÃ¡vateÄ¾ 10 %. Samostatne zÃ¡robkovo ÄinnÃ¡ osoba platila celÃ½ch 14 %. SamoplatiteÄ¾ mal vymeriavacÃ­ zÃ¡klad znÃ­Å¾enÃ½ koeficientom 0,6618. MinimÃ¡lny vymeriavacÃ­ zÃ¡klad bol 295,50 â¬ a maximÃ¡lny vymeriavacÃ­ zÃ¡klad 2 006,17 â¬ (trojnÃ¡sobok priemernej mesaÄnej mzdy v predchÃ¡dzajÃºcom roku)."
130,132,0.457,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,PrÃ­klad Editor vi si zapamÃ¤tÃ¡va kaÅ¾dÃº vykonanÃº zmenu v texte. Pri zavolanÃ­ prÃ­kazu :undo zvrÃ¡ti zmenu podÄ¾a tÃ½chto uloÅ¾enÃ½ch dÃ¡t. DokÃ¡Å¾e vykonaÅ¥ obnovu aj druhÃ½m smerom: pri nestabilite systÃ©mu z pÃ´vodnÃ©ho sÃºboru a zo zaznamenanÃ½ch Ãºdajov vie obnoviÅ¥
76,315,0.457,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"odkiaÄ¾ ï» 548.33. VÃ½berovÃ½ mediÃ¡n Ì stanovÃ­me lineÃ¡rnou interpolÃ¡ciou. Najprv overme, Å¾e Ì leÅ¾Ã­ v triede â¨ , 1200). KumulatÃ­vna poÄetnosÅ¥ hodnÃ´t do hranice 900 sa rovnÃ¡ 58 ( = 10 + 18 + 30), a preto relatÃ­vna poÄetnosÅ¥ sa rovnÃ¡ 58/150 = 0.387 (zaokrÃºhÄ¾ujeme na tri desatinnÃ© miesta). KumulatÃ­vna relatÃ­vna poÄetnosÅ¥ hodnÃ´t do hranice 1200 sa rovnÃ¡ 94/150 = 0.627. PretoÅ¾e hodnota = 0.5 (ide o vÃ½berovÃ½ mediÃ¡n) leÅ¾Ã­ v intervale (0.387, 0.627), mediÃ¡n je skutoÄne bodom intervalu â¨ , 1200). Jeho presnÃº hodnotu zÃ­skame lineÃ¡rnym interpolovanÃ­m: Ì = 900 + x, kde pre x platÃ­: . Takto Ì = 900 + 141.25 ï» 1041. AproximÃ¡cie kvartilov zÃ­skame Ãºplne analogicky. DolnÃ½ kvartil identifikujeme v triede , 900) a pre aproximÃ¡ciu Ì dostÃ¡vame (po zaokrÃºhlenÃ­) hodnotu 695. HornÃ½ kvartil je bodom triedy â¨ , 1700) a aproximÃ¡cia Ì sa (po zaokrÃºhlenÃ­) rovnÃ¡ 1457. Preto pre vÃ½berovÃ© medzikvartilovÃ© rozpÃ¤tie mÃ¡me = 1457 â 695 = 762."
240,58,0.456,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"KaÅ¾dÃ¡ premennÃ¡, ktorÃº v programe pouÅ¾Ã­vame musÃ­ byÅ¥ deklarovanÃ¡ (urÄenÃ½ jej typ â napr. int) a definovanÃ¡ (program vyhradÃ­ pre identifikÃ¡tor premennej rozsah pamÃ¤te, ktorÃ½ zodpovedÃ¡ typu premennej â napr. int je 32-bitovÃ© ÄÃ­slo, teda 4 bajty). KeÄ v zdrojovom kÃ³de do premennej priraÄujeme hodnotu (napr. inicializÃ¡cia hodnotou 0), tak program pri vykonanÃ­ tohto prÃ­kazu do prÃ­sluÅ¡nej pamÃ¤te uloÅ¾Ã­ tÃºto hodnotu. Napr. inicializÃ¡cia premennej priradenÃ­m: n = 0; naplnÃ­ obsah pamÃ¤te, ktorÃ½ je vyhradenÃ½ pre premennÃº n. Adresu premennej n, resp. umiestnenie (poradie byte v rÃ¡mci pamÃ¤te poÄÃ­taÄa) vyhradenej pamÃ¤ti pre premennÃº n vyjadrujeme v zdrojovom kÃ³de &n. PrÃ­kaz scanf(""%d"", &n); mÃ´Å¾eme teda struÄne interpretovaÅ¥ ako prÃ­kaz, ktorÃ½ do premennej n (do jej pamÃ¤te) priradÃ­ hodnotu celÃ©ho ÄÃ­sla, ktorÃ© sa nachÃ¡dza na vstupe, priÄom naÄÃ­tavanie vstupu sa posunie za naÄÃ­tanÃ© ÄÃ­slo."
240,399,0.456,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-5 (rieÅ¡enie) NajskÃ´r urÄÃ­me vstupnÃ© a vÃ½stupnÃ© argumenty funkcie. PodÄ¾a zadania je jedinÃ½ vstup pole celÃ½ch ÄÃ­sel, preto vstupnÃ© argumenty sÃº dva: adresa prvÃ©ho prvku poÄ¾a (typ int*) a poÄet prvkov poÄ¾a (typ int). CieÄ¾om funkcie je vÃ½pis na vÃ½stup, teda vÃ½stupnÃ©"
239,143,0.456,Ãvod do matematickej logiky,"VsÌimnime si, zÌe (E2) a (E3) nie suÌ formuly a teda to nie suÌ axioÌmy. Ide vlastne o scheÌmy axioÌm, z ktoryÌch vzniknuÌ axioÌmy ak zvolÄ±Ìme za f (alebo p) konkreÌtnu funkciu (predikaÌt). Veta 8.1 (o korektnosti). Nech je L jazyk predikaÌtovej logiky a nech je A formula v L. Ak je A dokaÌzatelânaÌ vo formaÌlom systeÌme predikaÌtovej logiky, tak je logicky pravdivaÌ (vsÌeobecne platnaÌ). DoÌkaz. AxioÌmy A1 azÌ A3 suÌ tautoloÌgie vyÌrokovej logiky a suÌ splneneÌ v lâubovolânej realizaÌcii M jazyka L pri lâubovolânom ohodnotenÄ±Ì premennyÌch. Preto suÌ A1, A2 a A3 logicky pravdiveÌ a podlâa Liem 7.4 a 7.3 suÌ logicky pravdiveÌ aj zvysÌneÌ dve axioÌmy. Podlâa TarskeÌho deï¬nÄ±Ìcie pravdivosti implikaÌcie je modus ponens korektneÌ pravidlo a podlâa Lemy 7.2 je korektneÌ aj pravidlo zovsÌeobecnenia. To znamenaÌ, zÌe vsÌetky formuly, ktoreÌ tvoria doÌkaz A, suÌ logicky pravdiveÌ, a preto je logicky pravdivaÌ aj poslednaÌ z nich, cÌizÌe A.  Veta 8.1 tvrdÄ±Ì, zÌe ak â¢ A, tak  A. PlatÄ±Ì vsÌak aj opacÌneÌ tvrdenie: ak  A, tak â¢ A, ako dokaÌzal GoÌdel v tridsiatych rokoch dvadsiateho storocÌia. Veta 8.4 nizÌsÌie je zovsÌeobecnenÄ±Ìm tohoto vyÌsledku."
361,62,0.456,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","â Q je konecÌnaÌ mnozÌina stavov automatu â T je konecÌnaÌ mnozÌina rozpoznaÌvanyÌch symbolov zo vstupu â Î´ je prechodovaÌ funkcia, ktoraÌ je zobrazenÄ±Ìm Î´ : (Q Ã T âª {}) â 2Q â q0 je zacÌiatocÌnyÌ stav konecÌneÌho automatu, pricÌom q0 â Q â F je konecÌnaÌ mnozÌina koncovyÌch stavov automatu, takaÌ zÌe F â Q V kontexte definÄ±Ìcie nedeterministickeÌho konecÌneÌho automatu musÄ±Ìme, vzhlâadom na zmenu oproti deterministickeÌmu konecÌneÌmu automatu, redefinovatâ relaÌciu prechodu. DefinÄ±Ìcia 3.6:"
240,30,0.456,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"jednoduchÃ½ch premennÃ½ch (rok narodenia, meno, ako aj prÃ­znak, Äi osoba je zena) do jednÃ©ho celku a umoÅ¾Åuje nÃ¡m s nimi pracovaÅ¥ v programe spolu. Funkcia nacitaj() otvorÃ­ na ÄÃ­tanie sÃºbor osoby.txt, preÄÃ­ta z neho poÄet osÃ´b (n), vyhradÃ­ v pamÃ¤ti miesto pre Ãºdaje o kaÅ¾dej osobe (pole o) a potom postupne pre kaÅ¾dÃº z osÃ´b v sÃºbore naÄÃ­ta Ãºdaje o i-tej osobe do prvku o[i]."
236,148,0.455,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Parametre Å¡Ã­rka a vÃ½Å¡ka udÃ¡vajÃº rozmery vytvorenÃ©ho âboxuÃ¿. Zadanie (0, 0) spÃ´sobÃ­, Å¾e vytvorenÃ½ objekt mÃ¡ nulovÃ½ rozmer, teda TEX ostÃ¡va na mieste, kde bol pred zadanÃ­m prostredia picture. NepovinnÃ© (xr , yr ) sÃº sÃºradnice âreferenÄnÃ©ho boduÃ¿, teda bodu, v ktorom sa momentÃ¡lne TEX nachÃ¡dza, v sÃºradnicovom systÃ©me prostredia picture. Uprostred slo\begin{picture}(0,0)(0,0) \unitlength=1mm \put(2,2.5) Uprostred slova mÃ´Å¾em na chvÃ­Ä¾u odÃ­sÅ¥. {\framebox(4,2.5)[tr]{$\bullet$}} \end{picture}va mÃ´Å¾em na chvÃ­Ä¾u odÃ­sÅ¥."
41,58,0.455,InformaÄnÃ© vzdelÃ¡vanie,"â¢ VidÃ­m prekÃ¡Å¾ku, ktorÃ¡ brÃ¡ni mne alebo vÃ½vojovÃ©mu tÃ­mu v splnenÃ­ cieÄ¾a Sprintu? Sprint Review â je prekvapivo neformÃ¡lne stretnutie, ktorÃ© hodnotÃ­ Product Backlog. Na tomto stretnutÃ­ by sa urÄite mal zÃºÄastniÅ¥ aj Product Owner, ktorÃ½ mimo inÃ©ho aj hodnotÃ­, akÃ© pokroky boli pri by prÃ­prave produktu spravenÃ©, Äo bolo dosiahnutÃ©, Äo mÃ¡ byÅ¥ a moÅ¾no ako optimalizovanÃ©. Sprint Review rovnako pripravuje podklad pre plÃ¡novanie noovÃ©ho Sprint-u. Toto stretnutie by nemalo trvaÅ¥ viac ako 4 hodiny pre mesaÄnÃ½ Sprint a ÃºÄasÅ¥ pozvanÃ½ch stakeholderov (sponzorov) na stretnutÃ­ je vÃ­tanÃ¡. VÃ½sledkom Sprint Review je aktualizovanÃ½ Product Backlog. Sprint Retrospective â jeho ÃºÄelom je: â¢ SkontrolovaÅ¥, ako prebiehal poslednÃ½ Sprint, Äo sa tÃ½ka Ä¾udÃ­, vzÅ¥ahov, procesov a nÃ¡strojov; â¢ IdentifikovaÅ¥ poloÅ¾ky, ktorÃ½ch vÃ½voj nevykazoval problÃ©my, nastaviÅ¥ potenciÃ¡lne vylepÅ¡enia â¢ vytvoriÅ¥ plÃ¡n implementÃ¡cie vylepÅ¡enÃ­, efektivizovaÅ¥ Scrum Team TÃ¡to retrospektÃ­va teda dosÅ¥ podstatne slÃºÅ¾i na skontrolu a vytvorenie plÃ¡nu vylepÅ¡enÃ­, ktorÃ© sa majÃº prijaÅ¥ poÄas nasledujÃºceho Sprint-u. Prebieha po kontrole Sprint-u pred ÄalÅ¡Ã­m Sprint-om a nemal by presiahnuÅ¥ 3 hodiny. Ãlohou Scrum Mastera poÄas retrospektÃ­vy je aj povzbudzovaÅ¥ tÃ­m (je teda pomyselnÃ½m trÃ©nerom), zisÅ¥ovaÅ¥ moÅ¾nosti vÃ¤ÄÅ¡ej efektivity a moÅ¾nÃ½ch zlepÅ¡enÃ­. Je to zÃ¡roveÅ priestor na kontrolu (Inspection) a adaptÃ¡ciu (Adaptation). UÅ¾ sme spomÃ­nali Product Backlog a Sprint Backlog. Spolu s inkrementom (Increment) sÃº oznaÄovanÃ© ako Sprint artefakty (Artefacts). Scrum sa spolieha na transparentnosÅ¥ (Transperency) a rozhodnutia o optimalizÃ¡cii sa prijÃ­majÃº na zÃ¡klade vnÃ­manÃ©ho stavu artefaktov. PokiaÄ¾ je transparentnosÅ¥ ÃºplnÃ¡, vÅ¡etko je v poriadku, ale ak sÃº artefakty netransparentnÃ©, mÃ´Å¾u byÅ¥ tieto rozhodnutia chybnÃ©. TranparentnosÅ¥ tu znamenÃ¡, Å¾e viem Äo som definoval a viem, Äo idem vyvinÃºÅ¥. Scrum Master musÃ­ spolupracovaÅ¥ s vlastnÃ­kom produktu, vÃ½vojovÃ½m tÃ­mom a ÄalÅ¡Ã­mi zÃºÄastnenÃ½mi stranami, aby tieto artefakty boli transparentnÃ©, netransparentnosÅ¥ musÃ­ pravidelne odstraÅovaÅ¥. Product Backlog je teda zoznam vÅ¡etkÃ½ch vlastnostÃ­, ktorÃ© mÃ¡ vÃ½slednÃ½ produkt obsahovaÅ¥. Je zaÅ zodpovednÃ½ Product Owner, rovnako za jeho aktuÃ¡lnu kompletnosÅ¥, dostupnosÅ¥, dopÄºÅanie. ProduktovÃ½ backlog nie je nikdy ÃºplnÃ½. Product Backlog sa vyvÃ­ja spolu s produktom. Product Backlog obsahuje zoznam vÅ¡etkÃ½ch funkciÃ­, poÅ¾iadaviek, vylepÅ¡enÃ­ a oprÃ¡v, ktorÃ© tvoria zmeny, ktorÃ© je potrebnÃ© v produkte vykonaÅ¥ v budÃºcich vydaniach. PoloÅ¾ky produktovÃ©ho backlogu majÃº atribÃºty popisu, objednÃ¡vky, odhadu a hodnoty. PoloÅ¾ky produktovÃ©ho backlogu Äasto obsahujÃº popisy testov. Sprint Backlog sÃº poloÅ¾ky Product Backlogu, ktorÃ© majÃº byÅ¥ obsahom Sprint-u. Sprint Backlog je o tom, akÃ© funkcionality budÃº v ÄalÅ¡om prÃ­rastku prÃ¡ce na produkte. Sprint Backlog je o prezentÃ¡cii postupu prÃ¡c v tÃ­me. Sprint Backlog sa"
369,52,0.455,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 1.12. NormalizÃ¡cia nÃ¡sobnosti mnoho-mnoho do prvej normÃ¡lnej formy PoÅ¾iadavka na reprezentÃ¡ciu Ãºdajov v prvej normÃ¡lnej forme vychÃ¡dzala tak z potreby jednoduchÃ©ho matematickÃ©ho modelu pre relaÄnÃ© databÃ¡zy ako aj efektÃ­vnosti implementÃ¡cie v reÃ¡lnych relaÄnÃ½ch databÃ¡zach. TakÃ¡to poÅ¾iadavka nie je uÅ¾ v sÃºÄasnosti kladenÃ¡ na vnÃºtropamÃ¤Å¥ovÃ© objekty (hodnotou atribÃºtu mÃ´Å¾e byÅ¥ kolekcia objektov) ani na objektovo orientovanÃ© databÃ¡zy (ktorÃ© sÃº vÅ¡ak pomerne zriedkavÃ©). PrvÃ¡ normÃ¡lna forma sa nemusÃ­ striktne dodrÅ¾iavaÅ¥ ani pri dÃ¡tovom modelovanÃ­ v etape analÃ½zy. NedodrÅ¾iava sa pri âhrubÅ¡omâ modelovanÃ­ v prvÃ½ch fÃ¡zach tejto etapy. Na druhej strane, ak vÃ½slednÃ½ model etapy analÃ½zy nie je (v prevaÅ¾nej vÃ¤ÄÅ¡ine) v prvej normÃ¡lnej forme, v etape nÃ¡vrhu bude zvyÄajne potrebnÃ© spraviÅ¥ jeho normalizÃ¡ciu, pri ktorej vzniknÃº novÃ© triedy. Ak takÃºto normalizÃ¡ciu robia nÃ¡vrhÃ¡ri a nie analytici, nÃ¡zvy tried nebÃ½vajÃº vÅ¾dy peknÃ©, Äo nÃ¡sledne sÅ¥aÅ¾uje ÄitateÄ¾nosÅ¥ modelu. Z uvedenÃ©ho dÃ´vodu sa zvyÄajne dÃ¡tovÃ© modely normalizujÃº uÅ¾ v etape analÃ½zy a tento zvyk budeme aÅ¾ na niekoÄ¾ko vÃ½nimiek dodrÅ¾iavaÅ¥ aj my v tejto uÄebnici. (VÃ½nimkami budÃº najmÃ¤ relÃ¡cie na metaÃºrovni, ktorÃ½ch normalizÃ¡cia by model skÃ´r zne-prehÄ¾adnila.)"
130,538,0.455,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"ZÃ¡kladnÃ½mi aspektmi hypermediÃ¡lnych systÃ©mov je obsah, forma a Å¡truktÃºra informÃ¡ciÃ­. Z hÄ¾adiska moÅ¾nostÃ­ prispÃ´sobovania je potrebnÃ© tieto aspekty posudzovaÅ¥ osobitne. VÃ½znam jednotlivÃ½ch aspektov je nasledovnÃ½:"
129,60,0.455,Sprievodca licenciami Creative Commons,"Je nutnÃ© registrovaÅ¥ sa pred pouÅ¾itÃ­m licencie Creative Commons? Nie. CC ponÃºka licencie, kÃ³d a ÄalÅ¡ie nÃ¡stroje na voÄ¾nÃ© pouÅ¾itie, bez nutnosti registrÃ¡cie. Je moÅ¾nÃ© aplikovaÅ¥ licenciu Creative Commons na softvÃ©r? NeodporÃºÄa sa pouÅ¾Ã­vaÅ¥ licenciu CC na softvÃ©r, pretoÅ¾e neobsahuje Å¡pecifickÃ© podmienky ohÄ¾adom Å¡Ã­renia zdrojovÃ©ho kÃ³du a patentov. Preto je vhodnÃ© radÅ¡ej pouÅ¾iÅ¥ softvÃ©rovÃ© licencie. Je moÅ¾nÃ© aplikovaÅ¥ licenciu Creative Commons na databÃ¡zu? Ãno. Licencia CC sa Äasto pouÅ¾Ã­va na dÃ¡ta a databÃ¡zy. MÃ´Å¾em zÃ­skaÅ¥ honorÃ¡r vÄaka svojej prÃ¡ci, aj keÄ je dostupnÃ¡ pod licenciou Creative Commons? Ãno. Aj keÄ svoje dielo sprÃ­stupnite pod niektorou licenciou CC, mÃ´Å¾ete ho pouÅ¾iÅ¥ na komerÄnÃ© ÃºÄely a zÃ­skaÅ¥ honorÃ¡r. Okrem toho mÃ´Å¾ete vyuÅ¾iÅ¥ protokol CC+. Je moÅ¾nÃ© pouÅ¾iÅ¥ materiÃ¡l aj inÃ½m spÃ´sobom ako uvÃ¡dza licencia? V tomto prÃ­pade je nutnÃ© kontaktovaÅ¥ drÅ¾iteÄ¾a prÃ¡v a zÃ­skaÅ¥ od neho povolenie, inak by sa mohlo staÅ¥, Å¾e podmienky licencie budÃº poruÅ¡enÃ©. Je moÅ¾nÃ© zdieÄ¾aÅ¥ licencovanÃ½ obsah CC na strÃ¡nkach zabezpeÄenÃ½ch heslom? Ãno. Nie je to zakÃ¡zanÃ©, pokiaÄ¾ toto zabezpeÄenie limituje iba to, kto mÃ¡ prÃ­stup k obsahu a neobmedzuje potenciÃ¡lnych pouÅ¾Ã­vateÄ¾ov vo vyuÅ¾Ã­vanÃ­ licencovanÃ©ho obsahu."
196,195,0.455,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,ciu ako celok. VybranÃº je potrebnÃ© uviestâ v preambule \usetheme{<nÃ¡zov tÃ©my spolu s jej farebnostâou \usecolortheme{seahorse}. KombinÃ¡ciu tÃ©m a farieb je vhodnÃ© zhliadnutâ na: https://www.hartwo rk.org/beamer-theme-matrix/
115,71,0.455,Algebra a diskrÃ©tna  matematika,"MetÃ³da matematickej indukcie bola znÃ¡ma uÅ¾ poÄiatkom novoveku talianskemu matematikovi Francescovi Maurolicovi (1494 â 1575), ktorÃ½ ju pouÅ¾Ã­val na dÃ´kaz niektorÃ½ch vlastnostÃ­ celÃ½ch ÄÃ­sel (napr. dokÃ¡zal, Å¾e suma prvÃ½ch n prirodzenÃ½ch nepÃ¡rnych ÄÃ­sel sa rovnÃ¡ n2). V modernej matematike a logike matematickÃ¡ indukcia bola vyuÅ¾itÃ¡ talianskym matematikom a logikom Giuseppom Peanom (1858 â 1932) pri formulÃ¡cii jeho axiomatickÃ©ho systÃ©mu aritmetiky celÃ½ch ÄÃ­sel."
76,371,0.455,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"a prÃ¡ve to sme mali ukÃ¡zaÅ¥. 8.3.3 PrÃ­klad. O smerodajnej odchÃ½lke ï³ nÃ¡hodnÃ½ch chÃ½b meracieho prÃ­stroja vieme, Å¾e sa rovnÃ¡ 0.15. SystematickÃ¡ chyba meracieho prÃ­stroja sa eliminuje nastavenÃ­m prÃ­stroja a detekuje sa meranÃ­m etalÃ³nu, pri ktorom sprÃ¡vnou nameranou hodnotou je = 10.00. NezÃ¡vislÃ½mi meraniami etalÃ³nu za rovnakÃ½ch podmienok sme zÃ­skali hodnoty 10.10"
76,86,0.455,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.6.7 DefinÃ­cia. Udalosti A, B, C, D sÃº (ako Å¡tvorica) nezÃ¡vislÃ©, ak kaÅ¾dÃ¡ trojica z nich je trojicou nezÃ¡vislÃ½ch udalostÃ­ a naviac platÃ­ P(AïBïCïD) = P(A) P(B) P(C) P(D). SlovÃ¡ âako trojicaâ, resp. âako Å¡tvoricaâ budeme vynechÃ¡vaÅ¥. Neprehliadnime, Å¾e nezÃ¡vislosÅ¥ udalostÃ­ A, B, C, D znamenÃ¡ platnosÅ¥ 6 + 4 + 1, t. j. 11 rovnostÃ­. TotiÅ¾ 6 rovnostÃ­ zaruÄÃ­ nezÃ¡vislosÅ¥ vÅ¡etkÃ½ch dvojÃ­c, ÄalÅ¡ie 4 zaruÄia nezÃ¡vislosÅ¥ vÅ¡etkÃ½ch trojÃ­c a jedenÃ¡stou rovnosÅ¥ou je rovnosÅ¥ P(AïBïCïD) = P(A) P(B) P(C) P(D). UkÃ¡Å¾te, Å¾e ak A, B, C, D sÃº nezÃ¡vislÃ© udalosti, tak nezÃ¡vislÃ½mi sÃº napr. aj a) Aï¢, B, C, D"
43,333,0.455,Objektovo orientovanÃ© programovanie v C++,"Prirodzene, hodnota tohto fantÃ³movÃ©ho parametra sa ani nikde nepouÅ¾ije, je to skutoÄne len oznaÄenie postï¬xovÃ©ho tvaru. Deï¬nujme teraz obe formy operÃ¡tora. Preï¬xovÃ½ tvar jednoducho pripoÄÃ­ta k pÃ´vodnej hodnote zlomku zlomok 11 , t. j. ÄitateÄ¾ bude maÅ¥ novÃº hodnotu citatel+menovatel a menovateÄ¾ sa nezmenÃ­. MetÃ³da potom vrÃ¡ti samotnÃ½ zlomok, uÅ¾ so zmenenÃ½mi Ãºdajmi. UÅ¾ vieme, Å¾e k samotnÃ©mu zlomku mÃ´Å¾eme pristupovaÅ¥ pomocou smernÃ­ka this. zlomok zlomok::operator++() citatel+=menovatel; return *this;"
343,13,0.454,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"KeÄ zahashujeme celÃº transakciu, vytvorÃ­ sa takzvanÃ© TXID, ktorÃ© je jedineÄnÃ© ID transakcie. NemÃ´Å¾u existovaÅ¥ dve transakcie, ktorÃ© majÃº rovnakÃ© TXID. Ak by sa to stalo, novÃ¡ transakcia by bola automaticky odmietnutÃ¡, pretoÅ¾e by bola povaÅ¾ovanÃ¡ za double spending, teda dvojnÃ¡sobnÃ© minutie rovnakÃ½ch prostriedkov. JedinÃ¡ vÃ½nimka tejto unikÃ¡tnosti TXID je pri Coinbase transakcii, ktorÃ¡ prideÄ¾uje odmenu minerom za vyÅ¥aÅ¾enie (zverifikovanie) bloku. Coinbase transakcia nemÃ¡ Å¾iadne inÅ¡trukcie v sebe. Ona iba vygeneruje odmenu ako output pre minera za vyÅ¥aÅ¾enie bloku. V rÃ¡mci Bitcoin siete existuje mechanizmus, ktorÃ½ nazÃ½vame Bitcoin Improvement Proposal (BIP). To sÃº odporÃºÄania od rÃ´znych matematikov, vedcov alebo aj od vÃ¡s samotnÃ½ch, ak sa rozhodnete, Å¾e chcete nieÄo odporuÄiÅ¥ Bitcoinu, aby sa zlepÅ¡il. Pri Ethereum to tieÅ¾ existuje pod nÃ¡zvom EIP a pri inÃ½ch sieÅ¥ach, naprÃ­klad pri Polkadote, je to tieÅ¾ podobnÃ©. TakÃ½mto spÃ´sobom sa na tieto Coinbase transakcie pozreli matematici z Ameriky, ktorÃ½m sa nepÃ¡Äilo to, Å¾e nemajÃº TXID. Navrhli teda BIP34, ktorÃ½ hovoril o tom, Å¾e ku kaÅ¾dej Coinbase transakcii, namiesto tÃ½ch inputov, pridaj ÄÃ­slo bloku, v ktorom je tÃ¡ Coinbase transakcia. V transakcii mÃ¡me teda poskladanÃ© tie inputy, vychÃ¡dzajÃºc na zÃ¡klade kombinÃ¡cie z transaction ID a output index, mÃ¡m script sig, to je podpis, v ktorom vyuÅ¾Ã­vam script, internÃ½ jazyk, ktorÃ½ je pouÅ¾Ã­vanÃ½ v rÃ¡mci Bitcoinu. A potom mÃ¡m outputy, kde uÅ¾ je hodnota a script PK, to je znova podpis s vyuÅ¾itÃ­m toho Bitcoin scriptu ako programu. Hodnota outputov musÃ­"
361,49,0.454,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Je teda zrejmeÌ, zÌe gramatika G je viacznacÌnaÌ. AlternatÄ±Ìvne naÌm stacÌÄ±Ì naÌjstâ dva roÌzne stromy odvodenia pre rovnakyÌ retâazec. AdekvaÌtne k odvodeniam vysÌsÌie buduÌ tieto stromy vyzeratâ takto â ObraÌzok 2-2."
94,420,0.454,Sprievodca svetom vedeckÃ©ho publikovania,"Existovalo niekoÄ¾ko inÅ¡titÃºciÃ­, ktorÃ© sa z tÃ½chto dÃ´vodov snaÅ¾ili zadefinovaÅ¥ minimÃ¡lne Å¡tandardy uÅ¾Ã­vateÄ¾skÃ½ch Å¡tatistÃ­k (Shepherd 2006). Ale aÅ¾ projekt COUNTER172 (Counting Online Usage of Networked Electronic Resources) zÃ­skal vÃ¤ÄÅ¡inovÃº podporu odbornÃ½ch asociÃ¡ciÃ­ a stal sa globÃ¡lnym a transparentnÃ½m Å¡tandardom na kvantitatÃ­vne meranie vyuÅ¾itia EIZ. COUNTER zadefinoval a vymedzil pouÅ¾Ã­vanÃ© termÃ­ny a ukazovatele (napr. Äo je ÄlÃ¡nok, vyhÄ¾adÃ¡vanie, Äo je plnÃ½ text atÄ.), priÄom tieto definÃ­cie v odbore dosiahli veÄ¾mi Å¡irokÃ© vyuÅ¾itie, nielen za ÃºÄelom Å¡tatistickÃ©ho hodnotenia. Stanovil tieÅ¾ formÃ¡t, v akom sa ÄÃ­sla budÃº generovaÅ¥."
361,29,0.453,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","â dâalsÌie metaoperaÌtory â kvantifikaÌtor uvedenyÌ za tokenom (znakom), prÄ±Ìpadne skupinou znakov, kvantifikuje pocÌetnostâ jeho vyÌskytu. MetaoperaÌtory zjednodusÌujuÌ zaÌpis cÌastyÌch obmedzenÄ±Ì: â¦ ? â znamenaÌ vyÌskyt 0 alebo 1-kraÌt. NaprÄ±Ìklad colou?r oznacÌÄ±Ì oba varianty âcolorâ alebo âcolourâ. â¦ * â znamenaÌ vyÌskyt 0 azÌ N-kraÌt. NaprÄ±Ìklad abâc oznacÌÄ±Ì âacâ, âabcâ, âabbcâ, âabb...bcâ. â¦ + â znamenaÌ vyÌskyt 1 azÌ N-kraÌt. NaprÄ±Ìklad ab + c oznacÌÄ±Ì âabcâ, âabbcâ, âabbbcâ, âabbb...bcâ. â¦ . â znamenaÌ vyÌskyt lâubovolâneÌho znaku. NaprÄ±Ìklad a.c oznacÌÄ±Ì âabcâ, âarcâ a pod. V prÄ±Ìpade pouzÌitia v spojenÄ±Ì s â[ ]â sa sÌpeciaÌlny vyÌznam straÌca, napr. [a.c] oznacÌÄ±Ì iba âaâ, â.â alebo âcâ. â¦ [ ] â hranateÌ zaÌtvorky vymenuÌvajuÌ jednotliveÌ znaky, ktoreÌ moÌzÌu bytâ oznacÌeneÌ. InyÌmi slovami, suÌ oznacÌeneÌ len znaky ktoreÌ sa nachaÌdzajuÌ v hranatyÌch zaÌtvorkaÌch. NaprÄ±Ìklad [abc] oznacÌÄ±Ì âaâ,âbâ alebo âcâ, [a â z] oznacÌÄ±Ì akeÌkolâvek pÄ±Ìsmeno v rozsahu âaâ azÌ âzâ vraÌtane, [abcx â z] oznacÌÄ±Ì âaâ, âbâ, âcâ, âxâ, âyâ, âzâ. (V prÄ±Ìpade, zÌe symbol â-â pouzÌijete na zacÌiatku, prÄ±Ìpadne na konci retâazca v hranatyÌch zaÌtvorkaÌch, chaÌpe sa ako obycÌajnyÌ symbol a nie ako rozsah.) â¦ [Ë] â oznacÌÄ±Ì jeden symbol, ktoryÌ sa nenachaÌdza v hranatyÌch zaÌtvorkaÌch. NaprÄ±Ìklad [Ëabc] oznacÌÄ±Ì kazÌdyÌ symbol inyÌ ako âaâ, âbâ, âcâ. â¦ {m,n} â oznacÌÄ±Ì predchaÌdzajuÌci symbol s vyÌskytom minimaÌlne m a maximaÌlne n-kraÌt. NaprÄ±Ìklad a{3, 5} oznacÌÄ±Ì âaaaâ, âaaaaâ, âaaaaaâ. â¦ $ â oznacÌÄ±Ì koniec vstupu. V prÄ±Ìpade, zÌe je dovoleneÌ aby vstup obsahoval viac riadkov, oznacÌÄ±Ì kazÌdyÌ koniec riadku. â skupiny â skupiny znakov umozÌnÌujuÌ skraÌtitâ zaÌpis pre cÌasteÌ sekvencie â¦ [:alnum:] â oznacÌÄ±Ì alfanumerickeÌ znaky, ekvivalent pre â[A-Za-z0-9]â â¦ [:alpha:] â oznacÌÄ±Ì alfabetickeÌ znaky, ekvivalent pre â[A-Za-z]â â¦ [:blank:] â oznacÌÄ±Ì medzeru a tabulaÌtor, ekvivalent pre â[ \t]â â¦ [:digit:] â oznacÌÄ±Ì cÌÄ±Ìslice, ekvivalent pre â[0-9]â â¦ [:graph:] â oznacÌÄ±Ì viditelâneÌ znaky, ekvivalent pre â[\x21-\x7E]â â¦ [:lower:] â oznacÌÄ±Ì maleÌ alfabetickeÌ znaky, ekvivalent pre â[a-z]â â¦ [:upper:] â oznacÌÄ±Ì velâkeÌ alfabetickeÌ znaky, ekvivalent pre â[A-Z]â"
369,214,0.453,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"PoznÃ¡mka: UvedenÃ½ prÃ­klad napovedÃ¡, Å¾e neexistujÃº zvÃ½hodnenÃ© devÃ­zovÃ© beÅ¾nÃ© ÃºÄty pre Å¡tudentov a pre dÃ´chodcov. ZÃ¡kladnÃ½ model beÅ¾nÃ©ho ÃºÄtu poskytuje obr. 4.1. UvedenÃ½ model je rozÅ¡Ã­renÃ­m vzoru ÃÄet partnera (obr. 3.32). KaÅ¾dÃ½ beÅ¾nÃ½ ÃºÄet: ï· Je urÄitÃ©ho typu. ï· Je jednoznaÄne urÄenÃ½ v banke svojÃ­m ÄÃ­slom ÃºÄtu a vo svete medzinÃ¡rodnÃ½m ÄÃ­slom ÃºÄtom (atribÃºt ÄÃ­slo ÃºÄtu IBAN â International Bank Account Number). ÄÃ­slo ÃºÄtu je v Slovenskej republike 10-miestne11 a musÃ­ zodpovedaÅ¥ tzv. pravidlu modulo 11 (jednotlivÃ© cifry sa prenÃ¡sobia stanovenÃ½mi koeficientami a spoÄÃ­tajÃº; sÃºÄet musÃ­ byÅ¥ deliteÄ¾nÃ½ ÄÃ­slom 11). ÄÃ­slo beÅ¾nÃ©ho ÃºÄtu je jedineÄnÃ© iba v rÃ¡mci banky; mÃ´Å¾e existovaÅ¥ rovnakÃ© ÄÃ­slo ÃºÄtu v inej banke. MedzinÃ¡rodnÃ© ÄÃ­slo ÃºÄtu vznikne tak, Å¾e sa pred ÄÃ­slo ÃºÄtu predradÃ­ kÃ³d krajiny, kÃ³d banky a doplnÃ­ sa nulami a kontrolnÃ½mi ÄÃ­slicami. MedzinÃ¡rodnÃ© ÄÃ­slo ÃºÄtu mÃ´Å¾e maÅ¥ maximÃ¡lne 34 znakov, Slovensko z nich pouÅ¾Ã­va iba 20 znakov12. ï· MÃ¡ svojho majiteÄ¾a ÃºÄtu, ktorÃ½ je vedenÃ½ ako klient banky. Klient je vÅ¡eobecnÃ¡ trieda, ktorej Å¡pecializÃ¡ciou sÃº triedy Klient â fyzickÃ¡ osoba, Klient â podnikateÄ¾ a Klient â prÃ¡vnickÃ¡ osoba (pozri vzor Partner firmy na obr. 2.26). V diagrame sme uviedli zÃ¡kladnÃ© atribÃºty tÃ½chto tried. Vynechali sme adresnÃ© Ãºdaje (adresa trvalÃ©ho bydliska / adresa sÃ­dla, koreÅ¡pondenÄnÃ¡ adresa / adresa prevÃ¡dzky, telefonickÃ½ kontakt, e-mail, fax) . Z priestorovÃ½ch dÃ´vodov v ÄalÅ¡Ã­ch diagramoch budeme kresliÅ¥ uÅ¾ iba vÅ¡eobecnÃº triedu Klient. ï· Je vedenÃ½ v jednej mene. Touto menou je buÄ domÃ¡ca mena alebo niektorÃ¡ zo zahraniÄnÃ½ch mien, v ktorej banka povoÄ¾uje vedenie beÅ¾nÃ½ch ÃºÄtov. ï· MÃ¡ stanovenÃ½ minimÃ¡lny zostatok, pod ktorÃ½ nesmie klesnÃºÅ¥ aktuÃ¡lny zostatok ÃºÄtu. Pre novÃ½ch klientov tento minimÃ¡lny zostatok bÃ½va kladnÃ½ (tvorÃ­ urÄitÃ© zabezpeÄenie ÃºÄtu), pre dlhodobÃ½ch klientov mÃ´Å¾e byÅ¥ nulovÃ½. Pri kontokorentnÃ½ch ÃºÄtoch je zÃ¡pornÃ½. ï· MÃ¡ (aktuÃ¡lny) zostatok ÃºÄtu. (PodrobnejÅ¡ie rozoberieme neskÃ´r.) Pri beÅ¾nom ÃºÄte sa Äalej Å¡pecifikuje: ï· Typ Ãºroku â beÅ¾nÃ© ÃºÄty sa zvyÄajne ÃºroÄia inak pre fyzickÃ© osoby a inak pre prÃ¡vnickÃ© osoby; na typ sa potom viaÅ¾u sadzby s Äasovou platnosÅ¥ou. ï· Frekvencia ÃºroÄenia â uvÃ¡dza, kedy sa Ãºroky pripisujÃº na ÃºÄet: mesaÄne (pri fyzickÃ½ch osobÃ¡ch), kvartÃ¡lne (Äasto pri prÃ¡vnickÃ½ch osobÃ¡ch). Pri ktorejkoÄ¾vek frekvencii ÃºroÄenia sa vÅ¡ak Ãºroky poÄÃ­tajÃº z dennÃ½ch zostatkov (t. j. zo zostatkov na konci bankovÃ©ho dÅa)."
135,282,0.453,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.7.6 MetodolÃ³gia paralelnÃ©ho programovania ParalelnÃ© programovanie je innos vemi nÃ¡ronÃ¡ na autorovu tvorivos a predstavivos. Postupom asu bola vytvorenÃ¡ metodolÃ³gia, ktorÃ¡ uahuje vykonanie niektorÃ½ch innostÃ­. IdeÃ¡lnym zavedenÃ­m paralelizmu by bolo jeho pouÅ¾itie bez ohadu na hardvÃ©rovÃº architektÃºru a programovacÃ­ jazyk. V praxi vÅ¡ak treba bra vÅ¡etky tieto faktory do Ãºvahy a preto je dÃ´leÅ¾itÃ½ aj vÃ½ber programovacieho jazyka a k nemu najvhodnejÅ¡ej architektÃºry."
393,68,0.453,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"StrÃ¡nky C Â StrÃ¡nka C1: (dÃ¡ta, 2), (predpoklad, 2), (klasifikÃ¡cia, 3) Â StrÃ¡nka C2: (asociÃ¡cia, 3), (dolovanie, 2), (pravidlo, 1) Â StrÃ¡nka C3: (zhlukovanie, 3), (segment, 2), (dÃ¡ta, 2) VÃ½sledkom vyhÄ¾adÃ¡vania v strÃ¡nkach C vzhÄ¾adom na strÃ¡nku U1 sÃº strÃ¡nky s nasledujÃºcim poradÃ­m hodnotenia: Â StrÃ¡nka C1 Â StrÃ¡nka C3"
240,229,0.453,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"je moÅ¾nÃ½ pre nenulovÃ© b). Ak je b nulovÃ©, tak dostÃ¡vame rovnicu c = 0, ktorÃ¡ mÃ¡ pre koeficient c s hodnotou 0 nekoneÄne veÄ¾a rieÅ¡enÃ­ (x) a pre koeficient c â  0 nemÃ¡ rieÅ¡enie. Do vÃ½slednej funkcie preto doplnÃ­me nasledujÃºce prÃ­kazy:"
196,108,0.453,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"menÃ¡ uvedenÃ© v zÃ¡tvorkÃ¡ch, font={...} a pod. PrÃ­znak * v definÃ­cii prostredia \begin{enumerate*} umoÅ¾nÃ­ Å¡etritâ miesto a uviestâ zoznam v riadku. \begin{enumerate}[label={\Alph*)}] \item prvÃ¡ poloÅ¾ka na prvej Ãºrovni radenÃ¡ podlâa abecedy velâkÃ½mi pÃ­smenami \item druhÃ¡ poloÅ¾ka na prvej Ãºrovni radenÃ¡ podlâa abecedy velâkÃ½mi pÃ­smenami \begin{itemize} \item prvÃ¡ poloÅ¾ka na vnorenej druhej Ãºrovni \item druhÃ¡ poloÅ¾ka na vnorenej druhej Ãºrovni \end{itemize} \item tretia poloÅ¾ka na prvej Ãºrovni radenÃ¡ podlâa abecedy velâkÃ½mi pÃ­smenami v pokracÌovanÃ­ \end{enumerate}"
135,750,0.453,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"11.5.2 MatematickÃ½ model Modelovanie je jedna z metÃ³d poznÃ¡vania. RÃ´znymi prostriedkami â slovnÃ½m opisom, graficky, pomocou matematickej symboliky, fyzikÃ¡lnymi a technicky realizovanÃ½mi modelmi lovek opisoval javy, ktorÃ© vo svojom okolÃ­ pozoroval. DÃ´leÅ¾itÃ½m aspektom pri vÃ½voji modelu je, aby sa s modelom dalo experimentova. Proces experimentovania s modelom nazÃ½vame simulÃ¡cia. SimulanÃ© experimenty nÃ¡m umoÅ¾ujÃº hadanie alternatÃ­v a vhodnÃ© nastavenie parametrov modelu. Pokia nepoznÃ¡me realizovatenÃ½ algoritmus nÃ¡jdenia optima, simulÃ¡cia neumoÅ¾uje priame urenie optimÃ¡lneho rieÅ¡enia â optimÃ¡lnych parametrov. Tie musÃ­me hada metÃ³dami optimalizÃ¡cie, ako sÃº lineÃ¡rne alebo dynamickÃ© programovanie. Pri definovanÃ­ akÃ©hokovek systÃ©mu rozliÅ¡ujeme v om dva druhy mnoÅ¾Ã­n: 1. mnoÅ¾inu objektov prvkov, astÃ­, 2. mnoÅ¾inu relÃ¡ciÃ­, zobrazenÃ­, funkciÃ­. SystÃ©m S je dvojica S = ( A, R ) , kde A je mnoÅ¾ina prvkov systÃ©mu a R je mnoÅ¾ina relÃ¡ciÃ­ medzi nimi. asto sa systÃ©m znÃ¡zoruje v tvare orientovanÃ©ho grafu, v ktorom vrcholy grafu znÃ¡zorujÃº prvky systÃ©mu a hrany grafu znÃ¡zorujÃº interakcie v systÃ©me. DynamickÃ½ systÃ©m (Neuschl, 1998) je definovanÃ½ pomocou symbolov: S = (T , U , Y , V , Z , X , f , g )"
369,194,0.453,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.45. Vzor Sadzba poplatku za uzatvorenie zÃ¡vÃ¤zku Ak sa za uzatvorenie zÃ¡vÃ¤zku mÃ´Å¾e ÃºÄtovaÅ¥ viacero poplatkov, model na metaÃºrovni je zloÅ¾itejÅ¡Ã­ (obr. 3.46). TakÃ½to zloÅ¾itejÅ¡Ã­ model je vÃ½hodnejÅ¡Ã­ aj z ÄalÅ¡ieho dÃ´vodu: umoÅ¾Åuje sÃºstrediÅ¥ rÃ´zne typy poplatkov na jedno miesto a tak jednoduchÅ¡iu sprÃ¡vu systÃ©mu poplatkov. Zavazku"
338,0,0.452,VyhÄ¾adÃ¡vanie informÃ¡ciÃ­,"VYHÄ½ADÃVANIE INFORMÃCIÃ Vydala SlovenskÃ¡ technickÃ¡ univerzita v Bratislave v NakladateÄ¾stve STU, Bratislava, Vazovova 5, v roku 2012. EdÃ­cia vysokoÅ¡kolskÃ½ch uÄebnÃ­c Rozsah 141 strÃ¡n, 17 obrÃ¡zkov, 22 tabuliek, 7,566 AH, 7,769 VH, 1. vydanie, ediÄnÃ© ÄÃ­slo 5679, tlaÄ NakladateÄ¾stvo STU v Bratislave."
76,313,0.452,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,Pre vÃ½berovÃ© medzikvartilovÃ© rozpÃ¤tie mÃ¡me = 3.100 â 1.575 = 1.525. 6.5.5 PrÃ­klad. Merala sa dÄºÅ¾ka bezporuchovej prÃ¡ce elektronickÃ©ho zariadenia (v hodinÃ¡ch). TabuÄ¾ka dÃ¡va vÃ½sledky 150 meranÃ­ v tvare tried a ich absolÃºtnych poÄetnostÃ­. triedy
196,136,0.452,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"tÃ¡lne\par}, alebo takto: \noindent\hfil text\hfil. Dve slovÃ¡ centrovanÃ© v riadku napr. pre dva susediace obrÃ¡zky pouÅ¾itÃ­m prÃ­kazu \hfil, ktorÃ½ sa postarÃ¡ o rovnomernÃ© rozdelenie priestoru pomimo: \hfil {obr. 1}\hfil {obr. 2}\hfil"
239,152,0.452,Ãvod do matematickej logiky,"Podlâa Vety 4.3 (2) stacÌÄ±Ì ukaÌzatâ, zÌe suÌ vsÌetky vetvy seÌmantickeÌho stromu pre q A uzavreteÌ. SeÌmantickyÌ strom pre q A je na ObraÌzku 28. V lâavej vetve maÌme P (tâ² ) a q P (t), pricÌom t a tâ² suÌ lâubovolâneÌ prvky z univerza, cÌo je zjavne v spore. Preto je lâavaÌ vetva uzavretaÌ. V pravej vetve maÌme q Q(c) a Q(t), pricÌom t je lâubovolânyÌ prvok z univerza, teda aj c, cÌo je opaÌtâ v spore. Preto je uzavretaÌ aj pravaÌ vetva. KedâzÌe suÌ vsÌetky vetvy seÌmantickeÌho stromu pre q A uzavreteÌ, formula A je logicky pravdivaÌ."
59,152,0.452,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde 0ï£xiï£1 je koncentrÃ¡cia molekuly Xi. ZrieÄovacÃ­ tok ï¦ je chÃ¡panÃ½ ako âvoÄ¾nÃ½ parameterâ, ktorÃ½ sa nastavÃ­ tak, aby suma ÄasovÃ½ch derivÃ¡ciÃ­ koncentrÃ¡ciÃ­ bola nulovÃ¡, ï¥ xi ï½ 0 xi ï½ xi ï§ ki ï­ ï¥ k j x j ï· ï¨ i ï½ 1, 2,...,n ï© j ï½1 kde podmienka ï¥ xi =1 bola pouÅ¾itÃ¡ bez straty vÅ¡eobecnosti naÅ¡ich Ãºvah."
111,111,0.451,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"NÃ¡stroje na analÃ½zu sprÃ¡vania sa pouÅ¾Ã­vateÄ¾ov na webe sÃº rÃ´zne. Asi jednÃ½m z najznÃ¡mejÅ¡Ã­ch je Google Analytics [7] (Äalej GA). GA je komplexnÃ½ nÃ¡stroj na webovÃº analÃ½zu, ktorÃ½ poskytuje Å¡irokÃº Å¡kÃ¡lu metrÃ­k o nÃ¡vÅ¡tevnosti a sprÃ¡vanÃ­ pouÅ¾Ã­vateÄ¾ov na vaÅ¡ej webovej strÃ¡nke (web v produkÄnom prostredÃ­, Å¾ivÃ½ web). InÃ½ typ nÃ¡strojov na analÃ½zu sprÃ¡vania sa pouÅ¾Ã­vateÄ¾ov na Å¾ivom webe je âNahrÃ¡vanie sedenÃ­â (angl. session recording, Äalej iba SR). SR je nÃ¡stroj, ktorÃ½ zaznamenÃ¡va vÅ¡etky interakcie pouÅ¾Ã­vateÄ¾a s webovou strÃ¡nkou poÄas jeho nÃ¡vÅ¡tevy (sedenia). VytvÃ¡ra akÃ©si ""video"", vÄaka Äomu mÃ´Å¾ete vidieÅ¥, ako pouÅ¾Ã­vatelia skutoÄne pouÅ¾Ã­vajÃº vaÅ¡u strÃ¡nku â kde klikajÃº, ako scrollujÃº, akÃ© chyby robia a pod. GA pouÅ¾ijete, ak chcete zÃ­skaÅ¥ komplexnÃ½ prehÄ¾ad o nÃ¡vÅ¡tevnosti vaÅ¡ej strÃ¡nky a sledovaÅ¥ vÃ½konnosÅ¥ jednotlivÃ½ch kampanÃ­ a kanÃ¡lov. SR pouÅ¾ijete ak chcete zÃ­skaÅ¥ hlbokÃ½ pohÄ¾ad na to, ako jednotlivÃ­ pouÅ¾Ã­vatelia interagujÃº s vaÅ¡ou webovou strÃ¡nkou a identifikovaÅ¥ konkrÃ©tne UX problÃ©my. Äalej predstavÃ­m SR. SR sa pouÅ¾Ã­va na rieÅ¡eniach, ktorÃº sÃº dostupnÃ© na Å¾ivom Webe. Poskytne vÃ¡m viac informÃ¡ciÃ­ o sprÃ¡vanÃ­ vaÅ¡ich nÃ¡vÅ¡tevnÃ­kov/pouÅ¾Ã­vateÄ¾ov. Pomocou neho dokÃ¡Å¾ete odpovedaÅ¥ na tieto zÃ¡kladnÃ© otÃ¡zky: â¢ O Äo presne sa konkrÃ©tny pouÅ¾Ã­vateÄ¾ snaÅ¾Ã­? â¢ Funguje pre pouÅ¾Ã­vateÄ¾ov vÅ¡etko na webovej strÃ¡nke tak, ako mÃ¡? â¢ SÃº tam nejakÃ© veci, ktorÃ© spÃ´sobujÃº problÃ©my? Je nieÄo, Äo pouÅ¾Ã­vateÄ¾ov frustruje?"
205,194,0.451,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","11.1 PrÃ­klady vizualizÃ¡ciÃ­ sociÃ¡lnych sietÃ­ Projekt moviegalaxies [1] vznikol spoluprÃ¡cou vÃ½skumnÃ­kov z MIT a KolÃ­nskej univerzity. SkÃºma sociÃ¡lne siete vo filmoch a ponÃºka vizuÃ¡lizÃ¡cie sietÃ­ zo Å¡irokÃ©ho spektra filmov. Vo vizualizÃ¡cii sa znÃ¡zorÅujÃº postavy filmu a vzÅ¥ahy medzi nimi (pozri obrÃ¡zok 44). VeÄ¾kosÅ¥ uzla vyjadruje dÃ´leÅ¾itosÅ¥ postavy v prÃ­behu. HrÃºbky hrÃ¡n medzi uzlami vyjadrujÃº silu vzÅ¥ahu medzi postavami. Farebne sÃº oddelenÃ© zhluky postÃ¡v, ktorÃ© tvoria urÄitÃº dejovÃº lÃ­niu v prÃ­behu. Predmetom vÃ½skumu je vnÃ­manie filmu divÃ¡kmi v zÃ¡vislosti od sociÃ¡lnej siete vo filme a hÄ¾adanie âreceptuâ na ÃºspeÅ¡nÃ½ film analyzovanÃ­m sociÃ¡lnych sietÃ­."
59,203,0.451,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3.9 ZÃ¡ver Metafora univerzÃ¡lneho darwinizmu rozÅ¡iruje princÃ­py darwinizmu ako univerzÃ¡lneho prÃ­stupu k Å¡tÃºdiu evolÃºcie nielen v biolÃ³gii, ale aj v inÃ½ch vednÃ½ch oblastiach (chÃ©mia, sociÃ¡lne vedy, informatika, umelÃ¡ inteligencia, kognitÃ­vna veda,...). V informatike univerzÃ¡lny darwinizmus poskytuje jedineÄnÃº moÅ¾nosÅ¥ simulÃ¡ciÃ­ darwinovskej evolÃºcie prostriedkami âin silicoâ (t. j. poÄÃ­taÄom), mÃ´Å¾eme konÅ¡tatovaÅ¥ tieto vÅ¡eobecnÃ© zÃ¡very: ï· EvoluÄnÃ© algoritmy tvoria robustnÃ½ optimalizaÄnÃ½ prostriedok pre rÃ´zne kombinatoriÃ¡lne Ãºlohy (napr. z teÃ³rie grafov, operaÄnÃ©ho vÃ½skumu, inÅ¾inierskej praxe nÃ¡vrhu zloÅ¾itÃ½ch zaradenÃ­, a pod.). ï· EvoluÄnÃ© multiagentovÃ© systÃ©my umoÅ¾ÅujÃº poÄÃ­taÄovÃ© simulÃ¡cie sociÃ¡lnych systÃ©mov, emergenciu kooperÃ¡cie a komunikÃ¡cie vypracovaÅ¥ evoluÄnÃ© zÃ¡klady memetiky ako Å¡peciÃ¡lneho prÃ­padu multiagentovÃ½ch systÃ©mov, Å¡tudovaÅ¥ etnickÃ© konflikty v multiagentovÃ½ch systÃ©moch, a pod. ï· UniverzÃ¡lny darwinizmus umoÅ¾Åuje informatike aktÃ­vne interagovaÅ¥ so sociÃ¡lnymi a behaviorÃ¡lnymi vedami. Z ilustraÄnÃ½ch vÃ½poÄtov molekulovej Darwinovej evolÃºcie vyplÃ½vajÃº tieto dÃ´leÅ¾itÃ© vÅ¡eobecnÃ© zÃ¡very pre univerzÃ¡lny darwinizmus: 1. Eigenova teÃ³ria replikÃ¡torov tvorÃ­ dobrÃ½ fenomenologickÃ½ zÃ¡klad molekulovej darwinovej evolÃºcie. Priebehy koncentraÄnÃ½ch profilov zÃ­skanÃ½ch rieÅ¡enÃ­m diferenciÃ¡lnych rovnÃ­c popisujÃºcich dynamiku chemostatu replikÃ¡torov, ktorÃ© boli zÃ­skanÃ© vhodnÃ½m vÃ½berom rÃ½chlostnÃ½ch konÅ¡tÃ¡nt, poskytujÃº priebehy koncentrÃ¡ciÃ­, ktorÃ© sÃº veÄ¾mi podobnÃ© experimentÃ¡lne pozorovanÃ½m [47] (pozri Obr. 3.14). 2. DarwinovskÃ¡ evolÃºcia prebieha ako MonodovskÃ¡ [42] vzÃ¡jomnÃ¡ hra medzi nÃ¡hodou a nutnosÅ¥ou, medzi deterministickÃ½m a stochastickÃ½m charakterom, ktorÃ© sÃº jej integrÃ¡lna sÃºÄasÅ¥. EvolÃºcia obsahuje Äasti, ktorÃ© sÃº plne deterministickÃ© â plne predpovedateÄ¾nÃ© (napr. zobrazenie genotypu na fenotyp), a taktieÅ¾ aj stochastickÃ© Äasti, ktorÃ© nemÃ´Å¾u byÅ¥ dobre predpovedateÄ¾nÃ©, mÃ´Å¾e hovoriÅ¥ len o ich Å¡tatistickÃ½ch charakteristikÃ¡ch (napr. mutÃ¡cie). V tejto sÃºvislosti sa obÄas pouÅ¾Ã­va terminolÃ³gia zavedenÃ¡ americkÃ½m informatikom a zakladateÄ¾om umelÃ©ho Å¾ivota Christopherom Langtonom âna hrane chaosuâ (angl. on the edge of chaos). PouÅ¾Ã­va sa termÃ­n âevolÃºcia prebieha na hrane chaosuâ, ktorÃ½ sa interpretuje takto: HlavnÃ¡ hnacia sila inovÃ¡ciÃ­ v evolÃºcii sÃº mutÃ¡cie, preto by sme sa mohli domnievaÅ¥, Å¾e ÄÃ­m ÄastejÅ¡Ã­ je vÃ½skyt mutÃ¡ciÃ­ pri reprodukÄnom procese, tÃ½m vÃ¤ÄÅ¡ia je pravdepodobnosÅ¥ vÃ½skytu inovÃ¡cie. AvÅ¡ak, ak miera mutÃ¡ciÃ­ prekroÄÃ­ urÄitÃº kritickÃº hodnotu, efektÃ­vnosÅ¥ evolÃºcie sa zniÄÃ­ a stÃ¡va sa z nej nieÄo Äo mÃ´Å¾eme nazvaÅ¥ âslepÃ© hÄ¾adanieâ, bez vplyvu stratÃ©gie prirodzenÃ©ho vÃ½beru, ktorÃ½ je schopnÃ½ efektÃ­vne selektovaÅ¥ pozitÃ­vne mutÃ¡cie. V opaÄnom prÃ­pade, ak miera vÃ½skytu mutÃ¡ciÃ­ je veÄ¾mi malÃ¡, evolÃºcia sa v podstate zastavÃ­ a zamrzne v aktuÃ¡lnom stave. Preto mÃ´Å¾eme povedaÅ¥, Å¾e frekvencia vÃ½skytu mutÃ¡ciÃ­ musÃ­ byÅ¥ dostatoÄne veÄ¾kÃ¡, ale zase nie veÄ¾mi, aby sa evolÃºcia nerozpadla, hovorÃ­me, Å¾e musÃ­ byÅ¥ na hrane chaosu. 3. Koncepcia Sewalla Wrighta [51] povrchu funkcie fitnes mÃ´Å¾e byÅ¥ povaÅ¾ovanÃ¡ ako jeden z najvÃ¤ÄÅ¡Ã­ch Ãºspechov Darwinovej evoluÄnej teÃ³rie a taktieÅ¾ aj ako jeden zo zdrojov jej univerzÃ¡lneho charakteru. TÃ¡to koncepcia mÃ¡ veÄ¾kÃ½ heuristickÃ½ vÃ½znam v tom, Å¾e Darwinova evolÃºcia mÃ´Å¾e byÅ¥ interpretovanÃ¡ ako Å¡peciÃ¡lny druh evoluÄnÃ©ho algoritmu [15,25,37], ktorÃ½ je schopnÃ½ rieÅ¡iÅ¥ extrÃ©mne komplikovanÃ© kombinatoriÃ¡lne optimalizaÄnÃ© problÃ©my. V prvej sekcii bol formulovanÃ½ Wrightov nÃ¡zor na evolÃºciu ako na optimalizaÄnÃ½ proces na povrchu funkcie fitnes (pozri Obr. 3.2). V tejto sÃºvislosti Wright poznamenal, Å¾e jeden z hlavnÃ½ch cieÄ¾ov teÃ³rie evolÃºcie je popÃ­saÅ¥ mechanizmy, ktorÃ© umoÅ¾ÅujÃº evolÃºcii nÃ¡jsÅ¥ âspojitÃ© cestyâ z jednÃ©ho vrcholu do druhÃ©ho vrcholu na povrchu fitnes funkcie nato, aby evolÃºcia bola"
393,479,0.451,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PrÃ­klad 9-1. SÃºbor .cd s informÃ¡ciami o konkrÃ©tnom diagrame tried. SÃºbor s koncovkou cd je Å¡tandardnÃ½ XML sÃºbor priÄom obsahuje informÃ¡cie o pouÅ¾itom fonte v popiskoch tried, metÃ³d a atribÃºtov (znaÄka Font), informÃ¡cie o jednotlivÃ½ch triedach (znaÄka Class) ako meno (atribÃºt Name), pozÃ­cia umiestnenia v modeli (znaÄka Position) a jednoznaÄnÃº identifikÃ¡ciu (TypeIdentifier)."
66,117,0.451,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Okrem samotnej typu modifikÃ¡cie dÃ¡t je dÃ´leÅ¾itÃ© tieÅ¾ definovaÅ¥, Äi sa mÃ¡ trigger zaÄaÅ¥ posudzovaÅ¥ pred tÃ½m ako sa samotnÃ¡ modifikÃ¡cia uskutoÄnÃ­ alebo aÅ¾ po. Ak je trigger nastavenÃ½, aby sa uskutoÄnil pred samotnou modifikÃ¡ciou, je moÅ¾nÃ© opraviÅ¥ prÃ­padnÃ© poruÅ¡enia referenÄnej integrity prÃ­padne inÃ½ch obmedzenÃ­. V prÃ­pade, Å¾e je trigger nastavenÃ½ pre vykonanie, aÅ¾ po modifikÃ¡ciÃ­ dÃ¡t a dÃ´jde k poruÅ¡eniu obmedzenÃ­, tak pre trigger sa nezaÄne ani overovaÅ¥ podmienka, pretoÅ¾e databÃ¡zovÃ½ systÃ©m zamietne danÃº modifikÃ¡ciu v dÃ´sledku integritnÃ½ch obmedzenÃ­. V rÃ¡mci samotnej udalosti je tieÅ¾ moÅ¾ne definovaÅ¥, Äi sa mÃ¡ trigger uskutoÄÅovaÅ¥ pre kaÅ¾dÃ½ modifikovanÃ½ zÃ¡znam osobitne alebo sa vykonanie trigger uskutoÄnÃ­ nad celÃ½m prÃ­kazom (z angl. statement), ktorÃ½ uskutoÄÅuje modifikÃ¡ciu."
205,218,0.45,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","12.2.4 Dolovanie v Ãºdajoch V predchÃ¡dzajÃºcich prÃ­padoch aplikÃ¡cie explicitne zasahovali do sprÃ¡vania sa pouÅ¾Ã­vateÄ¾ov, aby vyuÅ¾ili vÃ½hody modelov kolektÃ­vnej inteligencie a mÃºdrosti davu. Rovnako je vÅ¡ak moÅ¾nÃ© vyuÅ¾Ã­vaÅ¥ tieto znalosti implicitne bez aktÃ­vneho zasahovania do beÅ¾nÃ©ho sprÃ¡vania pouÅ¾Ã­vateÄ¾ov. PoslednÃ¡ skupina aplikÃ¡ciÃ­ preto vyuÅ¾Ã­va proces dolovania v Ãºdajoch (angl. data mining), ktorÃ½ sa definuje ako aplikÃ¡cia Å¡pecifickÃ½ch algoritmov pre objavovanie vzorov v Ãºdajov [3]. VÄaka narastajÃºcemu mnoÅ¾stvu Ãºdajov na webe sa stalo dolovanie v Ãºdajoch beÅ¾nou sÃºÄasÅ¥ou mnohÃ½ch webovÃ½ch aplikÃ¡ciÃ­. Pomocou dolovania Ãºdajov dokÃ¡Å¾eme identifikovaÅ¥ vzory v sprÃ¡vanÃ­ sa pouÅ¾Ã­vateÄ¾ov, pomocou ktorÃ½ch mÃ´Å¾eme v ÄalÅ¡om kroku podporiÅ¥ pouÅ¾Ã­vateÄ¾ov a to napr. personalizovaÅ¥ systÃ©my, poskytovaÅ¥ odporÃºÄanie atÄ."
272,354,0.45,Reconsidering Constitutional Formation Ii Decisive Constitutional Normativity : From Old Liberties To New Precedence (Volume 12.0),"Drugi tom ustaleÅ projektu badawczego ReConFort poÅwiÄcony zostaÅ zagadnieniu nadrzÄdnoÅci konstytucji. Tymczasem kwestia rozumienia zasady prymatu konstytucji budzi w przypadku polskiej Ustawy RzÄdowej z 1791 r. rozmaite wÄtpliwoÅci. ChoÄ zasada ta zostaje wyraÅ¼ona expressis verbis w towarzyszÄcej konstytucji Deklaracji StanÃ³w Zgromadzonych, to jednak dotychczasowe badania pozwalajÄ na konstatacjÄ, iÅ¼ jej treÅci i znaczenie dla porzÄdku prawnego postrzegano w rÃ³Å¼ny sposÃ³b. Wnioski, do jakich dochodzi badacz, sÄ na swÃ³j sposÃ³b paradoksalne. Faktem jest zawarcie w konstytucji zaÅoÅ¼enia o szczegÃ³lnej roli ustawy rzÄdowej. Faktem jest wprowadzenie do Deklaracji StanÃ³w Zgromadzonych klauzuli nulliï¬kacyjnej. ByÅ to zupeÅnie niezwykÅy wynalazek, powstaÅy na rodzimym gruncie, i zdajÄcy siÄ wyprzedzaÄ caÅÄ kolejnÄ epokÄ. Zarazem jednak wobec doÅwiadczonej praktyki - tzn. dziaÅaÅ Sejmu Wielkiego w kolejnych tygodniach obrad po uchwaleniu Ustawy RzÄdowej - nie moÅ¼na bez zastrzeÅ¼eÅ przyjÄÄ tezy o powszechnym uznaniu nadrzÄdnego charakteru wobec pozostaÅych ÅºrÃ³deÅ prawa. Ustawa rzÄdowa nie stanowiÅa konstytucyjnego przeÅomu, jak akty rewolucji w Ameryce PÃ³Ånocnej i Francji, nie zburzyÅa istniejÄcego systemu spoÅecznego, zreformowaÅa jedynie polityczny, nie zrywajÄc ciÄgÅoÅci ewolucyjnej z artykuÅami henrykowskimi i prawami kardynalnymi. OdwoÅujÄc siÄ do sÅÃ³w BogusÅawa LeÅnodorskiego: âNorma podstawowaâ dotychczasowego starego ustroju nie ulegÅa teÅ¼ w gruncie rzeczy jakiejÅ zasadniczej przemianie w reformowanym ustroju Rzeczypospolitej szlacheckiejâ.235 ZgodziÄ siÄ naleÅ¼y co do celu wprowadzenia klauzuli nadrzÄdnoÅci: byÅo nim przede wszystkim dÄÅ¼enie do zagwarantowania upragnionej stabilnoÅci ustroju przy ÅwiadomoÅci, Å¼e sam akt konstytucyjny zwrÃ³ciÅ siÄ przeciwko stanowi prawnemu utrwalonemu choÄby w prawach kardynalnych 1768/75. NarracjÄ âlegalistycznÄâ skierowanÄ przeciwko konstytucji przeÅledziÄ moÅ¼na w aktach wychodzÄcych z kancelarii imperatorowej rosyjskiej. Podstawowy zarzut stawiany konstytucji odnosi siÄ do zÅamania praw uchodzÄcych do tej pory za staÅe i niezmienne. PrzyjÄÅo to niezamierzenie komiczny dla dzisiejszego badacza wyraz, gdy autorytarna imperatorowa gani reformatorÃ³w za naruszenie wolnoÅci i wiekowych prerogatyw, choÄby poprzez fakt, Å¼e âTron Polski z Elekcyinego w dziedziczny przemienion, y to Prawo, ktÃ³re mÄdroÅÄ ich przodkÃ³w dyktowaÅa, y ktÃ³re zabrania za Å¼ycia krÃ³la, zamyÅlaÄ o obraniu iego NastÄpcy, byÅo rÃ³wnie zuchwale zgwaÅcone iak wszystkie inne, ktÃ³re zapewniaÅy trwaÅoÅÄ nieustaiÄcÄ Rzeczypospoliteyâ.236 Drugi z zarzutÃ³w, podejmowany przez rodzimych krytykÃ³w a nastÄpnie dyplomacjÄ rosyjskÄ, uderzaÅ w legalnoÅÄ procesu uchwalenia konstytucji, tj. samÄ legitymacjÄ sejmu (ktÃ³rego kadencjÄ przedÅuÅ¼ano) a nastÄpnie procedury. Imperatorowa podwaÅ¼aÅa takÅ¼e proces swoistego zatwierdzenia"
265,472,0.45,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Register nÃ¡vrhovÃ½ vzor, 99 nedodrÅ¾anie rozsahu, 58 nefunkcionÃ¡lna poÅ¾iadavka, 31, 41, 81, 82, 120 nefunkcionÃ¡lne testovanie, 117 neuchopiteÄ¾nosÅ¥, 18, 22, 23 nevykonateÄ¾nÃ½ prototyp, 178, 179 objektovÃ¡ dekompozÃ­cia, 97 objektovo-orientovanÃ© programovanie, 175 objektovo-orientovanÃ½ prÃ­stup, 173 odovzdanie kÃ³du (commit), 114, 115 OpenUP, 181 oprava chÃ½b, 133 optimalizÃ¡cia softvÃ©ru, 133 papierovÃ½ prototyp, 179 paradigma programovania, 174, 175 Paretovo pravidlo, 34 perfektÃ­vna ÃºdrÅ¾ba, 135, 136 persÃ³na, 80 plÃ¡novanie, 53, 58 plÃ¡novanie ÃºdrÅ¾by, 140 podpornÃ¡ disciplÃ­na UP, 184 podriadenosÅ¥, 18â20, 136 pokrytie dokumentÃ¡ciou, 36, 46 postupy, 2 potreba, 31â33 pouÅ¾iteÄ¾nosÅ¥, 36, 37, 40â42, 44, 45 pouÅ¾Ã­vateÄ¾, 5, 6, 14, 80 poÅ¾iadavka na softvÃ©r, 31â33, 81, 83, 87 poÅ¾iadavka na zmenu, 136 pozorovanie, 76, 79 prehliadka dokumentÃ¡cie, 130 prehliadka kÃ³du, 119, 130 prekroÄenie Äasu, 58 prekroÄenie nÃ¡kladov, 58 premenlivosÅ¥, 18, 20, 21, 136 prenosnosÅ¥, 36, 37, 40, 46 presnosÅ¥, 44 prevÃ¡dzka a ÃºdrÅ¾ba softvÃ©ru, 2, 61 prevÃ¡dzka softvÃ©ru, 50, 61, 133, 134 preventÃ­vna ÃºdrÅ¾ba, 135 pridÃ¡vanie funkcionality, 133 prieskum problÃ©movej oblasti, 74, 76, 77 problÃ©m (pri tvorbe) softvÃ©ru, 17, 27 problÃ©m mierky, 23â25 procedurÃ¡lne programovanie, 175 produktovÃ© riziko, 57 program, 2, 8, 9 programovacÃ­ jazyk, 109, 111 programovanie, 4, 109, 174 programovÃ½ systÃ©m, 8, 9 projekt, 3, 52 projektovÃ© riziko, 57, 58 projektovÃ½ manaÅ¾Ã©r, 57 prototyp, 178 prototypovanie, 150, 158, 178â180 prototypovanie na zahodenie, 179, 180 prototypovÃ½ model, 51"
184,458,0.45,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"V prÃ­klade 6-2 sme vyhodnocovali iba jednu poÅ¾iadavku systÃ©mu. Samozrejme pri prevÃ¡dzanÃ½ch testoch, Äi uÅ¾ v laboratÃ³rnych podmienkach alebo na reÃ¡lnych dÃ¡tach vyhodnocujeme viac poÅ¾iadaviek ako len jednu. V takomto prÃ­pade potom musÃ­me jednotlivÃ© vÃ½sledky spriemerovaÅ¥. NajÄastejÅ¡ie pouÅ¾Ã­vanÃ½ spÃ´sob spriemerovania je spriemerovaÅ¥ presnosÅ¥ na rÃ´znych Ãºrovniach pokrytia. DefinÃ­cia 6-9: P ( r ) ="
393,240,0.45,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,Web je veÄ¾kÃ¡ sociÃ¡lna sieÅ¥. SkÃºmanie jej Å¡truktÃºry vyÃºstilo do vytvorenia efektÃ­vnych algoritmov pre vyhÄ¾adÃ¡vanie a dolovanie informÃ¡ciÃ­. Web mÃ¡ sÃºÄasne blokovÃº a sÃºÄasne fraktÃ¡lovÃº Å¡truktÃºru. Nakoniec sme spomenuli niekoÄ¾ko zÃ¡vaÅ¾nÃ½ch otÃ¡zok z oblasti firemnÃ©ho manaÅ¾mentu znalostÃ­.
240,143,0.45,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 2-16 (rieÅ¡enie) Pre danÃº veÄ¾kosÅ¥ n je zÃ¡kladnÃ½ vzor obrazec veÄ¾kosti n riadkov a 2*n-1 stÄºpcov. Obrazec teda budeme vypisovaÅ¥ dvojitÃ½m vnorenÃ½m cyklom: vonkajÅ¡Ã­ cyklus i pre riadky, a vnÃºtornÃ½ cyklus j pre stÄºpce. MusÃ­me eÅ¡te navrhnÃºÅ¥ podmienku, ktorÃ¡"
130,570,0.449,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,ObrÃ¡zok 9-6. Metamodel prispÃ´sobovania MnÃ­chovskÃ©ho referenÄnÃ©ho modelu. V predchÃ¡dzajÃºcich kapitolÃ¡ch sme charakterizovali najznÃ¡mejÅ¡ie referenÄnÃ© modely adaptÃ­vnych hypermediÃ¡lnych systÃ©mov. V nasledujÃºcich kapitolÃ¡ch uvedieme struÄnÃ© porovnanie spÃ´sobov vytvÃ¡rania spomÃ­nanÃ½ch modelov v existujÃºcich hypermediÃ¡lnych systÃ©moch.
361,198,0.449,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Pre definovanuÌ gramatiku simpleURL v BNF vytvorte tabulâkou riadenyÌ syntaktickyÌ analyzaÌtor (SA) zhora nadol. Postupne realizujte nasledujuÌce kroky: 1. Vytvorte niekolâko prÄ±Ìkladov viet daneÌho jazyka (korektneÌ aj nekorektneÌ). 2. PrepÄ±ÌsÌte gramatiku z BNF (Backus-Naur Form) do gramatickyÌch pravidiel s alternatÄ±Ìvami. VyznacÌte miesta, kde gramatika nesplÌnÌa podmienky pre deterministickuÌ analyÌzu. 3. Transformujte gramatiku tak, aby bola LL(1): a. odstraÌnÌte lâavuÌ rekurziu (ak treba) b. urobte lâavuÌ faktorizaÌciu (ak treba) 4. VysÌetrite, cÌi je takto upravenaÌ gramatika je typu LL(1). KonkreÌtna naÌjdite: a. mnozÌinu F IRST1 pre kazÌdyÌ neterminaÌlny symbol v transformovanej gramatike b. mnozÌinu F OLLOW1 pre kazÌdyÌ neterminaÌlny symbol v transformovanej gramatike V prÄ±Ìpade, zÌe gramatika staÌle nie je typu LL(1), upravte pravidlaÌ tak, aby ju bolo mozÌneÌ transformovatâ na LL(1). 5. Pre transformovanuÌ gramatiku typu LL(1) vytvorte tabulâku prechodov."
240,222,0.449,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V tomto programe je vÅ¡ak chyba. PokÃºste sa ju nÃ¡jsÅ¥! AkÃ½m postupom sa dÃ¡ nÃ¡jsÅ¥ prÃ­padnÃ¡ chyba? MusÃ­me preskÃºmaÅ¥, Äi vytvorenÃ© funkcie pre kaÅ¾dÃ½ moÅ¾nÃ½ vstup vrÃ¡tia sprÃ¡vny vÃ½sledok. SkÃºsime napr. pre vstup"
240,513,0.449,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"sme uÅ¾ urÄili ako top a pri ÄalÅ¡Ã­ch volaniach funkcie ich uÅ¾ nebudeme uvaÅ¾ovaÅ¥, aby nÃ¡m ÄalÅ¡ie volanie funkcie vrÃ¡tilo index hrÃ¡Äa s najvyÅ¡Å¡Ã­m bodovÃ½m spomedzi zostÃ¡vajÃºcich hrÃ¡Äov. Nato vyuÅ¾ijeme pole prÃ­znakov used[], v ktorom si budeme pamÃ¤taÅ¥, Äi sme uÅ¾ hrÃ¡Äa z funkcie niekedy vrÃ¡tili. Funkcia vyuÅ¾ijÃºc premennÃº used[] prejde globÃ¡lne pole hrÃ¡Äov (h[]) a nÃ¡jde takÃ©ho, ktorÃ½ zÃ­skal Äo najviac"
196,38,0.449,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Je to cÌinnostâ, na ktorej sa zÃºcÌastnÌujÃº dvaja alebo viacerÃ­ jednotlivci, ktorÃ­ spolupracujÃº na tvorbe spolocÌnÃ©ho pÃ­somnÃ©ho vÃ½stupu â dokumentu. Je cÌasto oznacÌovanÃ© aj ako kolaboratÃ­vne pÃ­sanie cÌi skupinovÃ© pÃ­sanie."
59,325,0.449,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"(1) push ï¨ t , x ï© ï½ p ï x ï« p ï t , novÃ¡ poloÅ¾ka x je zavedenÃ¡ na vrchol zÃ¡sobnÃ­ka. (2) top ï¨ t ï© ï½ clean _ up ï¨ pïª ï t ï© , rekognoskuje vrchnÃº poloÅ¾ku v zÃ¡sobnÃ­ku. (3) pop ï¨ t ï© ï½ pï­1 ï t ï­ top ï¨ t ï© , zo zÃ¡sobnÃ­ka je odstrÃ¡nenÃ¡ vrchnÃ¡ poloÅ¾ka. NajproblematickejÅ¡ia je tretia operÃ¡cia, pomocou ktorÃ©ho je zo zÃ¡sobnÃ­ka odstrÃ¡nenÃ¡ vrchnÃ¡ poloÅ¾ka. KorektnÃ¡ implementÃ¡cia poÅ¾aduje pouÅ¾itie presnÃ©ho inverznÃ©ho vektora p-1,"
276,130,0.449,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"4. Overte funkÄnosÅ¥ liniek pomocou ping medzi priamo pripojenÃ½mi zariadeniami a skontrolujte obsah smerovacÃ­ch tabuliek (mali by obsahovaÅ¥ vÅ¡etky priamo pripojenÃ© siete). 5. Nakonfigurujte OSPF tak, Å¾e loopback siete sÃº v oblastiach 1-3 podÄ¾a ÄÃ­sla smerovaÄa, ostatnÃ© siete sÃº v oblasti 0. PouÅ¾ite ÄÃ­slo procesu 1. Rozhrania smerom k poÄÃ­taÄom nastavte ako pasÃ­vne. 6. Overte vytvorenie susedstiev a skontrolujte obsah smerovacÃ­ch tabuliek, prÃ­p. OSPF databÃ¡z. 7. ZabezpeÄte sprÃ¡vne Å¡Ã­renie masiek pre loopback siete (pomocou modifikÃ¡cie OSPF typu siete). 8. Overte OSPF stavy smerovaÄov na linkÃ¡ch pripojenÃ½ch do prepÃ­naÄa (DR, BDR, DROTHER). Modifikujte router-id alebo prioritu smerovaÄov tak, aby sa R2 stal DR a R3 BDR (bude potrebnÃ© reÅ¡tartovaÅ¥ OSPF proces). 9. Upravte parametre liniek (bandwidth/cost) tak, aby sa primÃ¡rne pouÅ¾Ã­vali sÃ©riovÃ© linky. 10. Na linkÃ¡ch k prepÃ­naÄu modifikujte ÄasovaÄ hello na 15 sekÃºnd a ÄasovaÄ dead na 60 sekÃºnd. 11. Nakonfigurujte sumarizÃ¡ciu loopback sietÃ­ medzi OSPF oblasÅ¥ami. PouÅ¾ite najÅ¡pecifickejÅ¡ie moÅ¾nÃ© sumÃ¡rne adresy."
135,710,0.449,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"na rieÅ¡enÃ½ problÃ©m, vidia iba svojim lokÃ¡lnym pohadom. SystÃ©m by mal by schopnÃ½ vysporiada sa s obmedzeniami, ktorÃ© si jednotlivÃ­ agenti kvÃ´li svojmu lokÃ¡lnemu pohadu neuvedomujÃº. Od agentov sa vyÅ¾aduje, aby spolu rozumne kooperovali. Jednou z ciest spoluprÃ¡ce medzi agentmi bez explicitnej komunikÃ¡cie je vyuÅ¾itie inteligencie roja (Bonabeau, 1999; Vries, 1998)."
94,340,0.448,Sprievodca svetom vedeckÃ©ho publikovania,"Google Scholar â vyhÄ¾adÃ¡vacÃ­ nÃ¡stroj zo sÃ©rie produktov spoloÄnosti Google. Funguje od roku 2004. PouÅ¾Ã­vatelia tradiÄne vytvoria svoj osobnÃ½ profil, kde uverejnia svoje dokumenty a propagujÃº tak svoju vedeckÃº prÃ¡cu a vÃ½skum. ZatiaÄ¾ Äo pouÅ¾Ã­vatelia pÃ´sobiaci v oblasti prÃ­rodnÃ½ch a technickÃ½ch vied uprednostÅujÃº ResearchGate, Google Scholar uprednostÅujÃº odbornÃ­ci z oblasti humanitnÃ½ch vied a kvÃ´li metrikÃ¡m aj vedci z krajÃ­n, kde si nemÃ´Å¾u dovoliÅ¥ platiÅ¥ databÃ¡zy Web of Science a Scopus. KÃ½m Web of Science a Scopus sa sÃºstredia predovÅ¡etkÃ½m na ÄlÃ¡nky v medzinÃ¡rodnÃ½ch Äasopisoch, Google Scholar registruje vÃ¤ÄÅ¡Ã­ rozsah typov vedeckÃ½ch publikÃ¡ciÃ­ a viac publikÃ¡ciÃ­ v nÃ¡rodnÃ½ch jazykoch â niÅ¾Å¡ia selektivita vÅ¡ak niekedy znamenÃ¡ aj pokrÃ½vanie predÃ¡torskÃ½ch Äasopisov alebo fiktÃ­vnych dokumentov (LÃ³pez-CÃ³zar et al. 2014). Google Scholar ponÃºka moÅ¾nosÅ¥ sledovania citovanosti uverejnenÃ½ch dokumentov prostrednÃ­ctvom dvoch citaÄnÃ½ch indexov: h-index a i10-index. ProstrednÃ­ctvom 5-roÄnÃ©ho h-indexu Google Scholar pravidelne zostavuje zoznam najcitovanejÅ¡Ã­ch Äasopisov z Ã´smich tematickÃ½ch kategÃ³riÃ­. S Google Scholar je moÅ¾nÃ© prepojiÅ¥ ÄlÃ¡nky umiestnenÃ© v sieti ResearchGate alebo Academia.edu. Google Scholar je masovo vyuÅ¾Ã­vanÃ½, no ÄelÃ­ kritike kvÃ´li nepresnosti a manipulovateÄ¾nosti svojich metrÃ­k (Harzing 2013; Konkiel 2014). MÃ´Å¾e byÅ¥ dobrÃ½m nÃ¡strojom, ale (ako naznaÄuje prÃ­beh fiktÃ­vnych profilov mimoriadne plodnÃ½ch a citovanÃ½ch vedcov doktora A. Authora a profesorky Et Al (Dingemanse 2016)) odporÃºÄame braÅ¥ ho s rezervou a manuÃ¡lne pretriediÅ¥ automaticky priraÄovanÃ© dÃ¡ta. K zaujÃ­mavÃ½m produktom patrÃ­ aj tzv. âsmartâ vyhÄ¾adÃ¡vacia sluÅ¾ba najmÃ¤ na Ãºrovni ÄasopiseckÃ½ch ÄlÃ¡nkov, prehÄ¾adovÃ½ch Å¡tÃºdiÃ­, analÃ½z a sprÃ¡v Semantic Scholar158 â projekt neziskovej organizÃ¡cie The Allen Institute for Artificial Intelligence z roku 2015. Ako sa uvÃ¡dza na strÃ¡nkach spoloÄnosti, v Äase informaÄnÃ©ho preÅ¥aÅ¾enia je cieÄ¾om projektu rÃ½chlo a efektÃ­vne sprostredkovaÅ¥ vedcom a vÃ½skumnÃ­kom najdÃ´leÅ¾itejÅ¡ie informÃ¡cie s relevantnou vÃ½povednou hodnotou. V porovnanÃ­ s Google Scholar je navrhnutÃ½ na rÃ½chle zachytenie najdÃ´leÅ¾itejÅ¡Ã­ch dokumentov a identifikÃ¡ciu vzÅ¥ahov medzi nimi, priÄom spÃ¡ja ÃºroveÅ sÃ©mantickej analÃ½zy s klasickÃ½mi metÃ³dami citaÄnej analÃ½zy. Produkt zviditeÄ¾Åuje tzv. najvplyvnejÅ¡ie ÄlÃ¡nky predovÅ¡etkÃ½m z oblasti poÄÃ­taÄovÃ½ch vied, vied o zemi a biomedicÃ­ny. NaprÃ­klad indikÃ¡tor Acceleration zobrazuje ÄlÃ¡nky s tzv. rÃ½chlou citaÄnou akcelerÃ¡ciou poÄas dvoch rokov, indikÃ¡tor Velocity zasa sleduje priemernÃ½ poÄet citÃ¡ciÃ­ za tri roky. IndikÃ¡tor Highly Influential Citations je vyjadrenÃ­m analÃ½zy vzÃ¡jomnÃ½ch citaÄnÃ½ch vzÅ¥ahov, priÄom kaÅ¾dÃ¡ citÃ¡cia sa posudzuje v kontexte viacerÃ½ch faktorov s cieÄ¾om nÃ¡jsÅ¥ ÄlÃ¡nky, ktorÃ© sledujÃº a posÃºvajÃº vÃ½skumnÃ© aktivity v danom odbore. PouÅ¾Ã­vatelia by tak mali zÃ­skaÅ¥ prÃ­stup k tzv. âtrendovÃ½mâ vÃ½skumnÃ½m ÄlÃ¡nkom a kÄ¾ÃºÄovÃ½m osobnostiam v oblasti vedy. Na vÃ½poÄty citÃ¡ciÃ­ pre kaÅ¾dÃº publikÃ¡ciu produkt pouÅ¾Ã­va porovnania s dÃ¡tami z niekoÄ¾kÃ½ch miliÃ³nov publikÃ¡ciÃ­ ktorÃ© tvoria jeho obsah a z databÃ¡z PubMed a IEEE (naprÃ­klad na indexovanie plnotextovÃ½ch PDF sÃºborov bol pouÅ¾itÃ½ CiteSeerX, produkt The Colleges of Information Science and Technology, Pennsylvania State University, ale zahrnutÃ© sÃº aj odkazy z Twitteru tÃ½kajÃºce sa citÃ¡ciÃ­). Semantic Scholar pomÃ¡ha prostrednÃ­ctvom"
239,128,0.447,Ãvod do matematickej logiky,"a podobne. DefinÄ±Ìcia. Ak je A formula, x1 , x2 , . . . , xn suÌ premenneÌ a t1 , t2 , . . . , tn suÌ termy v jazyku prveÌho raÌdu L, tak Ax1 ,x2 ,...,xn [t1 , t2 , . . . , tn ] vznikne z A nahradenÄ±Ìm kazÌdeÌho volâneÌho vyÌskytu premennej xi termom ti pre vsÌetky i = 1, 2, . . . , n. Nech je A formula v jazyku elementaÌrnej aritmetiky A : (ây)(x = y + y) a nech je t term y+x. Formulu A mozÌno interpretovatâ ako: x je paÌrneâ. AvsÌak Ax [t] je formula (ây)(y + x = y + y), pricÌom taÌto nie je sÌpeciaÌlnym prÄ±Ìpadom tvrdenia y + x je paÌrneâ, ale tvrdÄ±Ì, zÌe existuje y pre ktoreÌ x = yâ. PodobnyÌ probleÌm by sme mali, keby sme sa snazÌili substituovatâ y za x do formuly (ây)(x 6= y). TakyÌmto probleÌmom sa budeme vyhyÌbatâ. SpravÄ±Ìme to tak, zÌe do podformuÌl, v ktoryÌch je y viazaneÌ, zakaÌzÌeme dosadzovatâ za premenneÌ termy, v ktoryÌch sa vyskytuje y."
122,130,0.447,Modelovanie softvÃ©ru,"â p : Polozka , o : Objednavka A1 : odoberPolozku (pridajPolozku (o, p), p) = o A2 : prazdna (nova ) A3 : Â¬ prazdna (pridajPolozku (o, p)) A4 : expedovana (expeduj (o)) Predpoklady odoberPolozku (o : Objednavka , p : Polozka ) requires Â¬ prazdna (o) â§ Â¬ expedovana (o) expeduj (o : Objednavka ) requires Â¬ prazdna (o) â§ Â¬ expedovana (o) zrus (o : Objednavka ) requires Â¬ expedovana (o) pridajPolozku (o : Objednavka , p : Polozka ) requires Â¬ expedovana (o) PouÅ¾iÅ¥ algebraickÃº Å¡pecifikÃ¡ciu na vÅ¡etky triedy v softvÃ©rovom systÃ©me by pravdepodobne nebolo veÄ¾mi ÃºÄelnÃ©. Pri dÃ´leÅ¾itÃ½ch triedach tento prÃ­stup vÅ¡ak pomÃ¡ha vymedziÅ¥ vÃ½znam operÃ¡ciÃ­ a identifikovaÅ¥ neÃºplnosÅ¥ mnoÅ¾iny poskytnutÃ½ch operÃ¡ciÃ­."
239,33,0.447,Ãvod do matematickej logiky,"PredchaÌdzajuÌce tri doÌkazy mali spolocÌnuÌ strateÌgiu, ktoraÌ spocÌÄ±Ìvala vo vhodnej aplikaÌcii axioÌmy A3. PriblizÌne povedaneÌ, zvolili sme takyÌ koniec A3, ktoryÌ sa zhodoval s koncom dokazovanej formuly X. (Na konci A3 maÌme formulu A. V Leme 2.5 sme preto volili za A formulu B, v Lemme 2.6 A a v Lemme 2.7 formulu q q A.) Potom prveÌ podformuly X sluÌzÌili ako predpoklady, z ktoryÌch sme sa snazÌili odvoditâ prveÌ podformuly A3. V zaÌvere sme pouzÌili vetu o dedukcii. Veta 2.8 (vety o obraÌtenej implikaÌcii). Platia nasledujuÌce tvrdenia: a) â¢ (AâB) â (q Bâ q A) b) â¢ (Aâ q B) â (Bâ q A) c) â¢ (q AâB) â (q BâA) d) â¢ (q Aâ q B) â (BâA) DoÌkazy si urobte ako jednoducheÌ cvicÌenie. Pri doÌkaze c) a d) stacÌÄ±Ì vyuzÌitâ A1, A3 a Vetu o dedukcii, pri doÌkaze a) a b) esÌte Lemu 2.6. Symbolom VOOI v dâalsÌom oznacÌujeme lâubovolânuÌ z viet o obraÌtenej implikaÌcii."
205,112,0.446,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy AktuÃ¡lnou tÃ©mou, ktorÃ¡ sÃºvisÃ­ so zobrazovanÃ­m vÃ½sledkov a ich usporadÃºvanÃ­m, je personalizÃ¡cia, resp. zohÄ¾adnenie kontextu pouÅ¾Ã­vateÄ¾a pri vyhÄ¾adÃ¡vanÃ­. V prÃ­pade personalizÃ¡cie sa snaÅ¾Ã­me identifikovaÅ¥ (modelovaÅ¥) zÃ¡ujmy pouÅ¾Ã­vateÄ¾a a nim prispÃ´sobovaÅ¥ zobrazovanÃ© vÃ½sledky [9]. Ak by pouÅ¾Ã­vateÄ¾ napr. zadal dopyt jaguÃ¡r a vyhÄ¾adÃ¡vaÄ by o Åom vedel, Å¾e sa zaujÃ­ma o informaÄnÃ© technolÃ³gie a Å¡peciÃ¡lne o produkty od firmy Apple, uprednostnil by vÃ½sledky, ktorÃ© sÃºvisia s verziou operaÄnÃ©ho systÃ©mu OS X JaguÃ¡r. InÃ½ prÃ­stup predstavuje prispÃ´sobovanie sa aktuÃ¡lnemu kontextu pouÅ¾Ã­vateÄ¾a [8] â existuje viacero typov kontextov, ako napr. ÄasovÃ½ (nieÄo inÃ© pouÅ¾Ã­vateÄ¾ vyhÄ¾adÃ¡va poÄas tÃ½Å¾dÅa a inÃ© poÄas vÃ­kendu, nieÄo inÃ© v zime, keÄ si plÃ¡nuje lyÅ¾ovaÄku a inÃ©, keÄ je leto a pod.). Ak by pouÅ¾Ã­vateÄ¾ v prÃ­pade zadanÃ©ho dopytu jaguÃ¡r hÄ¾adal predtÃ½m nieÄo o autÃ¡ch, bolo by pravdepodobnÃ©, Å¾e aj teraz myslÃ­ na znaÄku auta, a nie na operaÄnÃ½ systÃ©m, alebo zviera, a preto by sa uprednostnili tieto vÃ½sledky. NiektorÃ© vyhÄ¾adÃ¡vaÄe sa nesnaÅ¾ia odhadnÃºÅ¥ Ãºmysel pouÅ¾Ã­vateÄ¾a, ale snaÅ¾ia sa identifikovaÅ¥ vÅ¡etky moÅ¾nÃ© vÃ½znamy danÃ©ho dopytu a spojiÅ¥ sÃºvisiace vÃ½sledky do zmysluplnÃ½ch zhlukov (na zÃ¡klade ich sÃ©mantickej podobnosti) [4, 19]. Pri dopyte jaguÃ¡r by tak vyhÄ¾adÃ¡vaÄ v ideÃ¡lnom prÃ­pade vrÃ¡til zhluky dokumentov o zvierati, operaÄnom systÃ©me, znaÄke Ã¡ut a pod. SÃºvisiacou je tieÅ¾ snaha o diverzifikÃ¡ciu vÃ½sledkov, t. j. aby boli vÃ½sledky, ktorÃ© vrÃ¡ti vyhÄ¾adÃ¡vaÄ, Äo najviac rÃ´znorodÃ© a ideÃ¡lne pokryli Äo najviac sÃºvisiacich tÃ©m [15]. V prÃ­pade uÅ¾ znÃ¡meho dopytu by sme tak dostali Äo najviac nepodobnÃ© vÃ½sledky pokrÃ½vajÃºce rÃ´zne tÃ©my (vÃ½znamy) zadanÃ©ho dopytu, resp. rÃ´zne vÃ½sledky v rÃ¡mci jednej tÃ©my (napr. zÃ¡znam na WikipÃ©dii o tom, Äo je to OS X JaguÃ¡r, strÃ¡nku vÃ½robcu Apple, pouÅ¾Ã­vateÄ¾skÃº recenziu a pod.)."
343,77,0.445,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"ÄalÅ¡ou zaujÃ­mavou aplikÃ¡ciou je SubSquid, ktorÃ½ poskytuje indexÃ¡ciu nad akÃ½mikoÄ¾vek dÃ¡tami z blockchain sietÃ­. TÃ½m pÃ¡dom uÄ¾ahÄuje vyhÄ¾adÃ¡vanie informÃ¡ciÃ­ a histÃ³rie na pÃ¡r milisekÃºnd. DecentralizovanÃ© aplikÃ¡cie sÃº zaloÅ¾enÃ© na blockchainovej technolÃ³gii alebo distribuovanÃ½ch systÃ©moch, Äasto na blockchaine. 90% tÃ½chto aplikÃ¡ciÃ­ je open-source, Äo znamenÃ¡, Å¾e kaÅ¾dÃ½ si mÃ´Å¾e pozrieÅ¥ zdrojovÃ½ kÃ³d. PravidlÃ¡ v tÃ½chto aplikÃ¡ciÃ¡ch sÃº zapÃ­sanÃ© v smart kontraktoch. DecentralizovanÃ© aplikÃ¡cie vyuÅ¾Ã­vajÃº blockchain na zabezpeÄenie nemennosti transakciÃ­. PrÃ­kladmi takÃ½chto aplikÃ¡ciÃ­ sÃº burzy, platformy na poÅ¾iÄiavanie tokenov, trhoviskÃ¡ alebo teoreticky sociÃ¡lne mÃ©diÃ¡. Rozdiel medzi decentralizovanÃ½mi a tradiÄnÃ½mi aplikÃ¡ciami spoÄÃ­va v tom, Å¾e pri tradiÄnÃ½ch aplikÃ¡ciÃ¡ch beÅ¾Ã­ server, ktorÃ½ vykonÃ¡va biznis logiku a aktualizuje databÃ¡zu. MusÃ­te sa spoliehaÅ¥ na tretiu stranu, ktorÃ¡ zabezpeÄuje dodrÅ¾iavanie pravidiel. Pri decentralizovanÃ½ch aplikÃ¡ciÃ¡ch sa dÃ¡ta z blockchainu zÃ­skavajÃº pomocou RPC volanÃ­, ktorÃ© sÃº zabalenÃ© do nejakej kniÅ¾nice, napr. EtherJS. RPC uzly nie sÃº verejnÃ© a sÃº limitovanÃ©, takÅ¾e musÃ­te pouÅ¾Ã­vaÅ¥ RPC poskytovateÄ¾a, ako je naprÃ­klad Infura alebo Alchemy. VÃ½hodou decentralizovanÃ½ch aplikÃ¡ciÃ­ je, Å¾e sÃº jednoduchÃ© na pouÅ¾itie a transparentnÃ©. NevÃ½hodou je, Å¾e nie sÃº Å¡kÃ¡lovateÄ¾nÃ© a sÃº pomalÃ©. Pre rieÅ¡enie tÃ½chto problÃ©mov sa pouÅ¾Ã­vajÃº indexery, ktorÃ© spracovÃ¡vajÃº bloky a organizujÃº transakcie do normÃ¡lnej Å¡truktÃºry. Tieto dÃ¡ta"
130,67,0.445,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­klad Premostenie sa pouÅ¾Ã­va Äasto v implementÃ¡ciÃ¡ch GUI API, naprÃ­klad v Jave kniÅ¾nice AWT a Swing vyuÅ¾Ã­vajÃº premostenie na zabezpeÄenie platformovej nezÃ¡vislosti. PrÃ­stup a manipulÃ¡cia s dÃ¡tami mÃ´Å¾u byÅ¥ vyrieÅ¡enÃ© premostenÃ­m, pristupovanie k rozhraniu abstraktnej hierarchie je nezÃ¡visle od dÃ¡tovÃ©ho mÃ©dia, nad ktorÃ½m pracujeme."
393,122,0.445,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"AdaptÃ­vne webovÃ© strÃ¡nky AdaptÃ­vne webovÃ© strÃ¡nky sÃºvisia s personalizÃ¡ciou webu a odporÃºÄanÃ­m zdrojov na webe. ModifikÃ¡cia adaptÃ­vnych webovÃ½ch strÃ¡nok a ich generovanie sa venuje automatickej modifikÃ¡cii obsahu a organizÃ¡cie webovÃ½ch strÃ¡nok pouÅ¾itÃ­m vÃ½sledkov dolovania vyuÅ¾Ã­vania webu. InteligentnÃ© webovÃ© agenty InteligentnÃ© webovÃ© agenty zaloÅ¾enÃ½ na dolovanÃ­ vo webovÃ½ch zÃ¡znamoch poskytujÃº mnoÅ¾stvo sluÅ¾ieb pre dizajnÃ©rov a pouÅ¾Ã­vateÄ¾ov webovej strÃ¡nky, akÃ½mi sÃº optimalizÃ¡cia jej Å¡truktÃºry, zvÃ½Å¡enie bezpeÄnosti, presonalizÃ¡cia prezentÃ¡cie, odporÃºÄanÃ­ produktov a sluÅ¾ieb a podobne. PoskytujÃº informÃ¡cie pre dizajnÃ©rov webovÃ½ch strÃ¡nok, ÄÃ­m je moÅ¾nÃ© dosiahnuÅ¥ lepÅ¡iu organizÃ¡ciu webovÃ½ch strÃ¡nok a tÃ½m zvÃ½Å¡iÅ¥ spokojnosÅ¥ pouÅ¾Ã­vateÄ¾a. 2.4.5"
94,216,0.445,Sprievodca svetom vedeckÃ©ho publikovania,"Mapovanie vedy/Mapping Science: predstavuje moÅ¾nosÅ¥ tvorby interaktÃ­vnej mapy pomocou tzv. âInteractive Browserâ . VytvorÃ­ vizualizovanÃº sieÅ¥ vednÃ½ch odborov, ktorÃ¡ je tvorenÃ¡ na zÃ¡klade citaÄnej analÃ½zy viac ako 2 000 Äasopisov, kde je moÅ¾nÃ© sledovaÅ¥ vzÃ¡jomnÃ© vzÅ¥ahy medzi vednÃ½mi odbormi. Tento nÃ¡stroj umoÅ¾Åuje zvoliÅ¥ aj mieru detailnÃ©ho usporiadania odborov a vzÃ¡jomnÃ½ch sÃºvislostÃ­."
94,48,0.445,Sprievodca svetom vedeckÃ©ho publikovania,"akademickÃ¡ jar (Academic Spring) a hnutie otvorenÃ©ho prÃ­stupu (Open Access). ProtestnÃ¡ iniciatÃ­va Public Library of Science16 (Harold Varmus, Patrick Brown a Michael Eisen, 2000) vyzÃ½vala otvorenÃ½m listom na autorskÃ½ bojkot Äasopisov, ktorÃ© odmietnu svoje ÄlÃ¡nky po istom Äase (napr. pol roku) od uverejnenia bezplatne sprÃ­stupniÅ¥ na internete. VÃ½zvu podpÃ­salo takmer 34 000 vedcov zo 180 krajÃ­n. KeÄÅ¾e iniciÃ¡torom vÃ½zvy pripadala reakcia vydavateÄ¾ov nedostatoÄnÃ¡, zaloÅ¾ili vlastnÃ© vydavateÄ¾stvo PLOS a skupinu vedeckÃ½ch Äasopisov s otvorenÃ½m prÃ­stupom: PLOS Biology (2003), PLOS Medicine (2004), PLOS Computational Biology (2005) a multidisciplinÃ¡rny Äasopis PLOS-ONE (2006) s novou filozofiou uverejÅovaÅ¥ vÃ½skum bez ohÄ¾adu na atraktivitu Äi novosÅ¥ tÃ©my, s dÃ´razom na korektnosÅ¥ metodiky a otÃ¡zku: âMal by byÅ¥ tento ÄlÃ¡nok sÃºÄasÅ¥ou vedeckÃ©ho zÃ¡znamu?â. VÄaka nÃ­zkej selektivite uverejÅuje veÄ¾kÃ© mnoÅ¾stvo ÄlÃ¡nkov, Äo z PLOS-ONE robÃ­ prvÃ½ z megaÄasopisov. Hlas PLOS so snahou obrodiÅ¥ nezdravÃ© praktiky vedeckÃ©ho publikovania vÅ¡ak nezostal osamotenÃ½. V roku 2000 zaloÅ¾il londÃ½nsky podnikateÄ¾ a inovÃ¡tor poÄ¾skÃ©ho pÃ´vodu Vitek Tracz platformu Faculty of 1000 (F1000) s cieÄ¾om hodnotiÅ¥ odbornÃº literatÃºru na Ãºrovni ÄlÃ¡nkov, aby kvalita nebola posudzovanÃ¡ len podÄ¾a impakt faktora Äasopisu. Älenovia platformy (uznÃ¡vanÃ­ odbornÃ­ci vo svojej oblasti) pÃ­Å¡u krÃ¡tke odporÃºÄania na ÄlÃ¡nky, ktorÃ© povaÅ¾ujÃº za zaujÃ­mavÃ© alebo prospeÅ¡nÃ© v praxi. TÃ½mto sa dodnes zaoberÃ¡ sluÅ¾ba F1000 Prime (zaloÅ¾enÃ¡ v roku 2002 ako F1000 Biology, priÄom v roku 2006 vznikla jej sestra F1000 Medicine). V roku 2012 spustil Tracz platformu F1000 Research uverejÅujÃºcu ÄlÃ¡nky s otvorenÃ½m prÃ­stupom (vrÃ¡tane podkladovÃ½ch Ãºdajov) a post-publikaÄnÃ½m, otvorenÃ½m recenznÃ½m konanÃ­m. Hoci niektorÃ­ spochybÅovali spoÄ¾ahlivosÅ¥ takÃ©hoto recenznÃ©ho konania (Vines 2013), vedeckÃ½ svet F1000 Research bez vÃ¤ÄÅ¡Ã­ch Å¥aÅ¾kostÃ­ akceptoval. S novÃ½mi formami recenznÃ©ho konania a novÃ½mi obchodnÃ½mi modelmi experimentujÃº aj megaÄasopisy PeerJ, ktorÃ½ ponÃºka celoÅ¾ivotnÃ© Älenstvo pre autora, Älenstvo pre inÅ¡titÃºciu, alebo jednorazovÃ½ poplatok za spracovanie ÄlÃ¡nku, Äi eLife, ktorÃ½ okrem inÃ½ch inovÃ¡ciÃ­ napr. podporuje recenzentov, aby poÄas recenznÃ©ho procesu diskutovali a poskytli autorom jednotnÃ© stanovisko, ktorÃ© bude zverejnenÃ© spolu s ÄlÃ¡nkom a odpoveÄou autorov. ZÃ¡roveÅ sa usilujÃº propagovaÅ¥ ideÃ¡ly otvorenÃ©ho prÃ­stupu â naprÃ­klad e-Life uverejÅuje zjednoduÅ¡enÃ© zhrnutia najzaujÃ­mavejÅ¡Ã­ch ÄlÃ¡nkov, zrozumiteÄ¾nÃ© aj pre laikov (e-Life digest) (King et al. 2017). Podobne aj Äasopis Frontiers for Young Minds uverejÅuje verzie aktuÃ¡lnych vedeckÃ½ch ÄlÃ¡nkov podanÃ© jazykom prÃ­stupnÃ½m pre deti. Od roku 2012 hnutie otvorenÃ©ho prÃ­stupu zÃ­skava Äoraz viac pozornosti â napokon, aj zÃ¡stupcovia veÄ¾kÃ½ch vydavateÄ¾stiev zdÃ´razÅujÃº vÃ½znam dostupnosti aktuÃ¡lnych vedeckÃ½ch poznatkov pre spoloÄnosÅ¥. No otvorenÃ¡ zostÃ¡va aj otÃ¡zka identifikÃ¡cie sprÃ¡vneho modelu financovania vedeckej komunikÃ¡cie. Ak majÃº ÄlÃ¡nky k zÃ¡ujemcom prÃºdiÅ¥ bezplatne, ÃºÄet za publikovanie treba vystaviÅ¥ niekomu inÃ©mu. U vydavateÄ¾ov si rÃ½chlo zÃ­skala obÄ¾ubu zlatÃ¡ cesta k otvorenÃ©mu prÃ­stupu, pri ktorej platbu od ÄitateÄ¾a nahrÃ¡dza autorskÃ½ poplatok za spracovanie ÄlÃ¡nku (APC â Article Processing Charge). ReputÃ¡ciu tohto spÃ´sobu 16 https://www.plos.org/history"
184,62,0.444,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"DostupnosÅ¥ (availability) bezprostredne sÃºvisÃ­ so spoÄ¾ahlivosÅ¥ou aplikÃ¡cie (reliability) a je pomerne Ä¾ahko Å¡pecifikovateÄ¾nÃ¡ a merateÄ¾nÃ¡. Ak aplikÃ¡cia nie je dostupnÃ¡ v Äase, keÄ je to potrebnÃ©, tak pravdepodobne nespÄºÅa svoje funkcionÃ¡lne poÅ¾iadavky. Mnoho aplikÃ¡ciÃ­ musÃ­ byÅ¥ dostupnÃ½ch minimÃ¡lne poÄas ÃºradnÃ½ch hodÃ­n. VÃ¤ÄÅ¡ina internetovÃ½ch aplikÃ¡ciÃ­ vyÅ¾aduje stopercentnÃº dostupnosÅ¥, keÄÅ¾e Internet za beÅ¾nÃ½ch okolnostÃ­ nepoznÃ¡ ÃºradnÃ© hodiny. DostupnosÅ¥ moÅ¾no meraÅ¥ ako podiel Äasu, ktorÃ½ je danÃ¡ aplikÃ¡cia dostupnÃ¡ k Äasu, ktorÃ½ by mala byÅ¥ dostupnÃ¡. Poruchy aplikÃ¡cie spÃ´sobujÃº jej nedostupnosÅ¥ a ovplyvÅujÃº jej spoÄ¾ahlivosÅ¥, ktorÃº meriame v strednej dobe medzi poruchami. Doba nedostupnosti aplikÃ¡cie je danÃ¡ Äasom, ktorÃ½ je potrebnÃ½ na identifikÃ¡ciu poruchy a obnovenie systÃ©mu. Z tohto dÃ´vodu sa aplikÃ¡cie, ktorÃ© vyÅ¾adujÃº vysokÃº dostupnosÅ¥ snaÅ¾ia minimalizovaÅ¥, resp. eliminovaÅ¥ moÅ¾nÃ© miesta porÃºch a vyuÅ¾Ã­vajÃº mechanizmy na automatickÃº detekciu porÃºch a obnovu systÃ©mu, resp. komponentov, ktorÃ© zlyhali."
240,130,0.444,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"PripomeÅme si, Å¾e funkcia scanf() vracia poÄet ÃºspeÅ¡ne naÄÃ­tanÃ½ch prvkov, teda v prÃ­pade, Å¾e sa zo vstupu podarilo naÄÃ­taÅ¥ ÄalÅ¡ie ÄÃ­slo tak funkcia vrÃ¡ti 1. PremennÃ¡ j bude slÃºÅ¾iÅ¥ ako poÄÃ­tadlo pÃ¡rnych ÄÃ­sel, teda najskÃ´r premennÃº j inicializujeme v riadku 5 na hodnotu 0 (nenaÄÃ­tali sme pÃ¡rne ÄÃ­sla), v riadku 10"
276,50,0.444,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Na Cisco prepÃ­naÄoch, s ktorÃ½mi budeme pracovaÅ¥, sa predvolene pouÅ¾Ã­va verzia PVST+ (Per-VLAN Spanning Tree, t. j. pre kaÅ¾dÃº VLAN beÅ¾Ã­ osobitnÃ¡ inÅ¡tancia STP â aj vÃ½pis je realizovanÃ½ pre kaÅ¾dÃº VLAN osobitne). ZmeniÅ¥ pouÅ¾Ã­vanÃº verziu protokolu moÅ¾no zmenou STP reÅ¾imu (rapid verzia zabezpeÄuje rÃ½chlejÅ¡iu konvergenciu, ale zvyÅ¡uje vÃ½konovÃ© nÃ¡roky) pomocou globÃ¡lneho konfiguraÄnÃ©ho prÃ­kazu."
276,124,0.444,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"odliÅ¡nÃ½m spÃ´sobom ako pri RIP a EIGRP. SumÃ¡rnu IP sieÅ¥ je potrebnÃ© Å¡pecifikovaÅ¥ pre konkrÃ©tnu oblasÅ¥, a potom sa budÃº vÅ¡etky podsiete danej siete patriace do tejto oblasti ohlasovaÅ¥ do inÃ½ch oblastÃ­ ako danÃ¡ sumÃ¡rna sieÅ¥ (teda Å¡pecifickejÅ¡ie sa uÅ¾ neoznamujÃº)."
94,211,0.444,Sprievodca svetom vedeckÃ©ho publikovania,"PredmetovÃ© kategÃ³rie (Subject cathegories) KaÅ¾dÃ¡ publikÃ¡cia indexovanÃ¡ v databÃ¡ze Scopus je zaradenÃ¡ do predmetovÃ½ch kategÃ³riÃ­. Scopus umoÅ¾Åuje vyhÄ¾adÃ¡vaÅ¥ ÄasopiseckÃ© tituly podÄ¾a kategorickÃ©ho Älenenia, priÄom tieto Äasopisy majÃº vyrÃ¡tanÃ© citaÄnÃ© metriky CiteScore, SNIP a SJR. Takto je moÅ¾nÃ© zistiÅ¥ najcitovanejÅ¡ie Äasopisy v danej kategÃ³rii a vzÃ¡jomne tieto kategÃ³rie (a ÄasopiseckÃ© tituly) porovnÃ¡vaÅ¥. OpÃ¤Å¥ platÃ­, Å¾e vzhÄ¾adom na multidisciplinaritu dneÅ¡nÃ©ho vÃ½skumu mÃ´Å¾e byÅ¥ titul zaradenÃ½ do viacerÃ½ch kategÃ³riÃ­."
361,37,0.444,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","PrÄ±Ìklad 2.15: Nech jazyk L je definovanyÌ takto L = vcv | v â {a, b} . Navrhnite gramatiku G, ktoraÌ generuje jazyk L. RiesÌenie: G = (N, T, P, S) , N = {S, A, B, C} , T = {a, b, c} P :S â aAS | bBS | C Aa â aA Ba â bB Ab â bA BC â Cb AC â Ca"
59,91,0.444,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"2.4 PohÄ¾ad umelej inteligencie a kognitÃ­vnej vedy na vzÅ¥ah myseÄ¾ â mozog V prvej kapitole bol poskytnutÃ½ vÅ¡eobecnÃ½ pohÄ¾ad umelej inteligencie na komplex mozogmyseÄ¾ ako na zariadenie, ktorÃ© transformuje vstupnÃ© Ãºdaje x (produkovanÃ© zrakom, sluchom, Äuchom a pod.) na motorickÃ© impulzy y (priÄom tÃ¡to transformÃ¡cia je zÃ¡vislÃ¡ od vnÃºtornÃ©ho stavu s (pozri Obr. 2.21, diagram A). Mozog mÃ´Å¾eme interpretovaÅ¥ ako mohutnÃ½ paralelnÃ½ poÄÃ­taÄ realizovanÃ½ neurÃ³novou sieÅ¥ou, ktorÃ½ transformuje vstupnÃº informÃ¡ciu x na vÃ½stupnÃº informÃ¡ciu y, priÄom tÃ¡to transformÃ¡cia je ovplyvÅovanÃ¡ vnÃºtornÃ½m stavom s. (pozri Obr. 2.21, diagram B). TÃ¡to neurovednÃ¡ interpretÃ¡cia mozgu na mikroskopickej (neurÃ¡lnej) Ãºrovni neumoÅ¾Åuje priame Å¡tÃºdium vyÅ¡Å¡Ã­ch kognitÃ­vnych aktivÃ­t (rieÅ¡enie problÃ©mov, porozumenie Ä¾udskej reÄi a pod.). Nechceme tÃ½mto povedaÅ¥, Å¾e je to principiÃ¡lne nemoÅ¾nÃ©, je to moÅ¾nÃ©, ale veÄ¾mi Å¥aÅ¾kopÃ¡dne a komplikovanÃ©. Je to podobnÃ© tomu, ako keby sme chceli Å¡tudovaÅ¥ makroskopickÃº vlastnosÅ¥ vody âpovrchovÃ© napÃ¤tieâ metÃ³dami kvantovej mechaniky. Samozrejme, Å¾e tÃºto veliÄinu mÃ´Å¾eme Å¡tudovaÅ¥ aj takto na âmikroskopickejâ Ãºrovni, ale je to tak numericky ako aj teoreticky nÃ¡roÄnÃ©. Podstatne jednoduchÅ¡Ã­ je fenomenologickÃ½ prÃ­stup zaloÅ¾enÃ½ na makroskopickej termodynamike, kde dostaneme pre tÃºto veliÄinu pomerne jednoduchÃº formulu obsahujÃºcu jednoduchÃ© experimentÃ¡lne Ãºdaje. PodobnÃ¡ situÃ¡cia existuje aj v teÃ³rii mozgu-mysle. NeurÃ¡lny (konekcionistickÃ½ alebo subsymbolickÃ½) prÃ­stup je vhodnÃ½ na Å¡tÃºdium elementÃ¡rnych kognitÃ­vnych aktivÃ­t (napr. prvotnÃ© spracovanie vizuÃ¡lnej informÃ¡cie zo sietnice oka). VyÅ¡Å¡ie kognitÃ­vne aktivity mozgu sÃº Å¡tudovanÃ© symbolickÃ½m alebo kognitivistickÃ½m prÃ­stupom zaloÅ¾enÃ©ho na predstave, Å¾e Ä¾udskÃ½ mozog je poÄÃ­taÄ, ktorÃ½ pracuje podÄ¾a tÃ½chto princÃ­pov (tvoria zÃ¡klad tzv. symbolickej paradigmy), ktorÃ½ 1. transformuje symboly pomocou syntaktickÃ½ch pravidiel na inÃ© symboly, priÄom 2. myÅ¡lienky sÃº symbolickÃ© reprezentÃ¡cie implementovanÃ© pomocou jazyka myslenia, a 3. mentÃ¡lne procesy sÃº kauzÃ¡lne sekvencie symbolov generovanÃ© syntaktickÃ½mi pravidlami."
129,57,0.444,Sprievodca licenciami Creative Commons,"â¢	Licencie Creative Commons nemajÃº vplyv na formÃ¡t publikÃ¡cie, stÃ¡le je moÅ¾nÃ© vytvoriÅ¥ aj tlaÄenÃ© kÃ³pie. â¢	V zÃ¡vislosti od dohody medzi vami a vydavateÄ¾om - licencie neovplyvÅujÃº honorÃ¡re, ak boli zmluvne dohodnutÃ©. â¢ PouÅ¾itie licenciÃ­ neovplyvÅuje recenznÃ© konanie. â¢	Do diela publikovanÃ©ho pod licenciou Creative Commons moÅ¾no zahrnÃºÅ¥ aj obsah tretÃ­ch strÃ¡n, a to so sÃºhlasom vlastnÃ­ka obsahu. â¢ Licencie Creative Commons je moÅ¾nÃ© pouÅ¾iÅ¥ ako medzinÃ¡rodnÃ© licencie. â¢ PoruÅ¡enie licencie Creative Commons je moÅ¾nÃ© stÃ­haÅ¥ sÃºdnou cestou. â¢ MorÃ¡lne prÃ¡va autora zostÃ¡vajÃº nedotknutÃ©. â¢	Autor sa mÃ´Å¾e vzdaÅ¥ prÃ¡va na uvedenie zdroja, ak je dielo zmenenÃ© alebo pouÅ¾itÃ© spÃ´sobom, ktorÃ½ sa mu nepÃ¡Äi. Ako obsah pod licenciami Creative Commons ovplyvnÃ­ moju vÃ½uÄbu? Jedna z najvÃ¤ÄÅ¡Ã­ch prekÃ¡Å¾ok pre tÃ½ch, ktorÃ­ chcÃº vyuÅ¾Ã­vaÅ¥ âotvorenÃ© vzdelÃ¡vacie zdrojeâ (digitÃ¡lne materiÃ¡ly, ktorÃ© moÅ¾no pouÅ¾iÅ¥, opÃ¤tovne pouÅ¾iÅ¥ a prispÃ´sobiÅ¥ na ÃºÄely vÃ½uÄby, vzdelÃ¡vania a vÃ½skumu, a ktorÃ© sÃº voÄ¾ne dostupnÃ© online), je obsah licencovanÃ½ tretÃ­mi stranami a na strane vydavateÄ¾ov chÃ½bajÃºca cenovÃ¡ Å¡truktÃºra pouÅ¾itia takÃ©hoto obsahu na ÃºÄely otvorenÃ©ho prÃ­stupu. SprÃ­stupnenÃ­m svojho diela na zÃ¡klade licenciÃ­ Creative Commons zabezpeÄÃ­te, Å¾e vy a ÄalÅ¡Ã­ uÄitelia mÃ´Å¾u uÄiÅ¥ a vyuÅ¾Ã­vaÅ¥ pri tom vÃ½sledky vÃ¡Å¡ho vÃ½skumu. Ako uvÃ¡dzame vyÅ¡Å¡ie, do tejto praxe zasahujÃº istÃ© formy prevodu licenciÃ­ na publikovanie, bez ohÄ¾adu na ustanovenia o poctivom pouÅ¾Ã­vanÃ­ (fair dealing). Udelenie licencie na pouÅ¾Ã­vanie akademickÃ©ho obsahu s pouÅ¾itÃ­m licenciÃ­ Creative Commons znamenÃ¡, Å¾e autor si uvedomuje, Å¾e web uÄ¾ahÄuje zdieÄ¾anie a opÃ¤tovnÃ© pouÅ¾itie. S knihami sprÃ­stupnenÃ½mi online a pod licenciami Creative Commons sa spÃ¡jajÃº vÃ½razne niÅ¾Å¡ie obmedzenia z hÄ¾adiska ich distribÃºcie a prÃ­stupu k nim, ÄÃ­m sa potenciÃ¡lne zvyÅ¡uje pravdepodobnosÅ¥ ich vplyvu mimo priestoru vysokoÅ¡kolskÃ©ho vzdelÃ¡vania."
130,102,0.443,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"AplikÃ¡cia â vytvÃ¡ra objekt KonkrÃ©tnyPrÃ­kaz a nastavuje jeho prÃ­jemcu. VyvolÃ¡vateÄ¾ (vypÃ­naÄ) dÃ¡va pokyn prÃ­kazu, aby Å¾iadosÅ¥ vykonal. PrÃ­jemca (osvetlenie, ventilÃ¡tor) â vie, ako vykonaÅ¥ operÃ¡cie asociovanÃ© s vÃ½konom Å¾iadosti. Ako PrÃ­jemca mÃ´Å¾e slÃºÅ¾iÅ¥ Ä¾ubovoÄ¾nÃ¡ trieda."
369,124,0.443,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"V zmluve, pokiaÄ¾ na Åu bude eÅ¡te vystavenÃ¡ zÃºÄtovacia faktÃºra, sa nemusÃ­ uvÃ¡dzaÅ¥ suma s DPH. StaÄÃ­ uviesÅ¥, Å¾e na uvedenÃº sumu sa uplatnÃ­ DPH platnÃ¡ v Äase vystavenia zÃºÄtovacej faktÃºry. Suma vrÃ¡tane DPH sa potom uvedie iba na zÃºÄtovacej faktÃºre."
240,163,0.443,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 3-3 NapÃ­Å¡te funkciu dalsie_prvocislo(), ktorÃ¡ pre celÃ© ÄÃ­slo x (typ int) nÃ¡jde najbliÅ¾Å¡ie prvoÄÃ­slo vÃ¤ÄÅ¡ie ako x. Napr. pre x = 20 funkcia vrÃ¡ti 23. Ãloha 3-4 DoplÅte chÃ½bajÃºce Äasti funkcie kvadraticka_rovnica(), ktorÃ¡ pre koeficienty a, b, c (typ double) nÃ¡jde korene kvadratickej rovnice ax2 + bx + c = 0. Predpokladajte, Å¾e a â  0. Funkcia nevrÃ¡ti oba korene rovnakÃ©."
236,43,0.443,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"HlavnÃ½m cieÄ¾om napÃ­sania textu (ak vylÃºÄime urÄitÃº sÃºÄasnÃº literatÃºru typu DACC1 ) je vyjadrenie myÅ¡lienok, sprostredkovanie informÃ¡cie alebo vedomostÃ­ ÄitateÄ¾ovi. ÄitateÄ¾ text lepÅ¡ie pochopÃ­, ak budÃº myÅ¡lienky dobre Å¡truktÃºrovanÃ© a uvidÃ­ a precÃ­ti tÃºto Å¡truktÃºru omnoho lepÅ¡ie, ak bude typografickÃ¡ forma odrÃ¡Å¾aÅ¥ logickÃº a sÃ©mantickÃº Å¡truktÃºru obsahu. LATEX sa od inÃ½ch typografickÃ½ch systÃ©mov lÃ­Å¡i prÃ¡ve tÃ½m, Å¾e mu musÃ­te oznÃ¡miÅ¥ logickÃº a sÃ©mantickÃº Å¡truktÃºru textu. Potom odvodÃ­ typografickÃº formu na zÃ¡klade âpravidielÃ¿ zadanÃ½ch v sÃºbore definujÃºcom triedu a v rozliÄnÃ½ch Å¡tÃ½lovÃ½ch sÃºboroch. NajdÃ´leÅ¾itejÅ¡ia jednotka textu v LATEXu (a v typografii) je odsek (paragraph). NazÃ½vame ho âtextovou jednotkouÃ¿, pretoÅ¾e odsek je typografickÃ¡ forma, ktorÃ¡ by mala odrÃ¡Å¾aÅ¥ jednu sÃºvislÃº myÅ¡lienku alebo jeden pojem. V nasledujÃºcich oddieloch sa nauÄÃ­te, ako si mÃ´Å¾ete vynÃºtiÅ¥ zalomenie riadku naprÃ­klad pomocou \\ a ukonÄenie odseku, naprÃ­klad vynechanÃ­m prÃ¡zdneho riadku v zdrojovom kÃ³de. Preto, ak sa zaÄÃ­na novÃ¡ myÅ¡lienka, mal by sa zaÄaÅ¥ aj novÃ½ odsek a ak nie, mali by byÅ¥ pouÅ¾itÃ© len zalomenia riadkov. Ak ste na pochybÃ¡ch ohÄ¾adom ukonÄenÃ­ odsekov, predstavte si svoj text, ako sprostredkovateÄ¾a pojmov a myÅ¡lienok. Ak mÃ¡te ukonÄenÃ½ odsek, ale starÃ¡ myÅ¡lienka pokraÄuje, mal by byÅ¥ novÃ½ odsek zruÅ¡enÃ½. Ak sa v tom istom odseku vyskytne nejakÃ½ Ãºplne novÃ½ tok myÅ¡lienok, tak by mal byÅ¥ odsek rozdelenÃ½."
393,23,0.443,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Web so sÃ©mantikou sa nemusÃ­ obmedzovaÅ¥ iba na jednoduchÃ© objavovanie a dotazovanie informÃ¡ciÃ­, mÃ¡ aj veÄ¾kÃ½ potenciÃ¡l v automatizÃ¡cii sluÅ¾ieb. DAML-S bol navrhnutÃ½ pre Å¡irokÃ© spektrum interakciÃ­ a jeho hlavnÃ© zameranie je na webovÃ© strÃ¡nky, ktorÃ© idÃº Äalej v moÅ¾nostiach webu, ako iba poskytovanie statickÃ½ch informÃ¡ciÃ­. DAML-S v sÃºÄasnosti opisuje sluÅ¾by v troch konceptuÃ¡lnych oblastiach: profil, procesnÃ½ model a zÃ¡klady. Rozoberieme ich dÃ´kladnejÅ¡ie: Â Profil â opisuje, Äo sluÅ¾ba robÃ­. Charakterizuje sluÅ¾bu pre ÃºÄely vyhÄ¾adÃ¡vania a vyberania, t.j. poskytuje informÃ¡cie, aby agent mohol posÃºdiÅ¥, Äi mu sluÅ¾ba vyhovuje. KeÄÅ¾e na zÃ¡pis profilu sa pouÅ¾Ã­va deskripÄnÃ¡ logika z DAML+OIL, profily sÃº rozdelenÃ© do klasifikaÄnÃ½ch schÃ©m. Pre vÅ¡etky triedy sluÅ¾ieb mÃ´Å¾e profil opisovaÅ¥ vstupy, vÃ½stupy, Å¡tartovacie podmienky a dÃ´sledky. KonkrÃ©tne triedy profilov mÃ´Å¾u obsahovaÅ¥ ÄalÅ¡ie charakteristiky. Â ProcesnÃ½ model â opisuje, ako sluÅ¾ba funguje. V Åom sÃº zahrnutÃ© informÃ¡cie o vstupoch sluÅ¾by (spolu s prÃ­znakmi o tom, Äi sÃº povinnÃ© alebo nepovinnÃ©), vÃ½stupoch sluÅ¾by (moÅ¾nou sÃºÄasÅ¥ou je aj opis podmienok, za ktorÃ½ch sa mÃ´Å¾u rÃ´zne vÃ½stupy vyskytnÃºÅ¥), Å¡tartovacie podmienky (ktorÃ© musia byÅ¥ splnenÃ©, aby sa sluÅ¾ba dala pouÅ¾iÅ¥) a dÃ´sledky (ktorÃ© vzniknÃº v dÃ´sledku pouÅ¾itia sluÅ¾by). Pre zloÅ¾itÃ© sluÅ¾by procesnÃ½ model opisuje, ako sa dajÃº rozloÅ¾iÅ¥ na jednoduchÅ¡ie procesy a akÃ½ je medzi nimi tok riadenia."
369,189,0.443,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 3.41. Vzor Cena produktu s akciovou cenou ObchodnÃ¡ firma, aby podporila predaj produktov, mÃ´Å¾e viacero produktov âzabaliÅ¥â do cenovÃ©ho balÃ­ka, priÄom cena za takÃ½to balÃ­k je niÅ¾Å¡ia, ako sÃºÄet cien individuÃ¡lnych produktov (obr. 3.42)."
361,26,0.442,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","RiesÌenie: a, b, c, aa, ab, bc, bbb a pod. PrÄ±Ìklad 2.2: Nech je jazyk L nad abecedou Î£ = {a, b} definovanyÌ takto L = {an bn | n â N}. Uvedâte prÄ±Ìklady slov tohto jazyka. RiesÌenie: , ab, aabb, aaabbb, aaaabbbb, aaaaabbbbb a pod. PrÄ±Ìklad 2.3: Nech je jazyk L nad abecedou Î£ = {a, b} definovanyÌ takto L = {an bm | n â N, m â N}. Uvedâte prÄ±Ìklady slov tohto jazyka. RiesÌenie: , a, b, aa, bb, aaa, bbb, ab, aab, abb a pod. PrÄ±Ìklad 2.4: Nech je jazyk L nad abecedou Î£ = {a, b, c, d} definovanyÌ takto L = {v | v â {a, b, c, d} , #a (v) = #b (v), #c (v) = 2 â #d (v)}. NapÄ±ÌsÌte prÄ±Ìklady na slovaÌ z tohto jazyka. RiesÌenie: , ab, ccd, abccd, ba, cdc, dcc, accdb, dcbca, abbaccdcdc a pod. PoznaÌmka: je nutneÌ si uvedomitâ, zÌe uvedenaÌ definÄ±Ìcia jazyka nehovorÄ±Ì nicÌ o poradÄ±Ì znakov, iba obmedzuje ich pocÌetnosti. PrÄ±Ìklad 2.5: Nech je jazyk L nad abecedou Î£ = {a, b, c} definovanyÌ takto L = vcv R | v â {a, b} . NapÄ±ÌsÌte prÄ±Ìklady na slovaÌ z tohto jazyka."
94,227,0.442,Sprievodca svetom vedeckÃ©ho publikovania,"ObsahovÃ¡ strÃ¡nka â vedeckÃ½ prÃ­nos publikÃ¡cie k odboru, prehÄ¾adnÃ© abstrakty, ÄitateÄ¾nosÅ¥ prÃ­spevkov. Neexistuje poÅ¾iadavka na konkrÃ©tny poÄet autorov/strÃ¡n, skÃ´r ide o rovnovÃ¡hu â aby napr. jeden z prÃ­spevkov nemal 50 strÃ¡n a druhÃ½ osem. SamotnÃ½ text nemusÃ­ byÅ¥ v anglickom jazyku, no abstrakty ÄlÃ¡nkov a titul musia byÅ¥ uvedenÃ© v angliÄtine."
240,259,0.442,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 3-15 (rieÅ¡enie) NajskÃ´r doplnÃ­me vÃ½poÄet hodnoty funkciÃ­ f1() v riadku 13 a f2() v riadku 18 podÄ¾a zadania. PouÅ¾ijeme matematickÃ© funkcie z kniÅ¾nice math.h: exp(x) pre "" , fabs(x) pre | | a sin(x) pre sin ."
196,25,0.442,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"3.4.12 Uvedâte, ako vytvoritâ medzeru vertikÃ¡lnu, horizontÃ¡lnu. . . . . . . . . . . . . . . . 55 3.4.13 Ako vycentrovatâ slovo vertikÃ¡lne, horizontÃ¡lne. . . . . . . . . . . . . . . . . . . . . 56 3.5.1 Uvedâte, ako vloÅ¾itâ obrÃ¡zok."
43,34,0.441,Objektovo orientovanÃ© programovanie v C++,"Trieda VÃ½robca stoliÄiek: potomok triedy Firma sÃºkromnÃ© typ dreva cena dreva verejnÃ© KonÅ¡truktor(n,s,h m,h v,t d,c d) VypÃ­Å¡ typ Trieda VydavateÄ¾stvo: potomok triedy Firma sÃºkromnÃ© typ disku cena disku potlaÄ verejnÃ© KonÅ¡truktor(n,s,h m,h v,t d,c d,p) InformÃ¡cie o produktoch"
59,547,0.441,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ï¨ ï¢X ïU0 ï© P ï¨ X ï© . Predpoklad uzavretÃ©ho sveta mÃ¡ dve formy: pozitÃ­vnu a negatÃ­vnu. 1. PozitÃ­vna forma uzavretÃ©ho sveta (pozri diagram A, Obr. 11.3) (11.9a) ï¨ï¢X ïU0 ï© P ï¨ X ï© ï ï¨ï¢X ïU ï­ U0 ï© P ï¨ X ï© t. j. ak pre kaÅ¾dÃ½ objekt z mnoÅ¾iny U0 platÃ­ vÃ½rok P(X) , potom tento vÃ½rok aj pre kaÅ¾dÃ½ objekt z U, ktorÃ½ je mimo mnoÅ¾iny U0. To znamenÃ¡, Å¾e v zjednoduÅ¡enom tvare pozitÃ­vna forma predpokladu uzavretÃ©ho sveta mÃ¡ tvar (11.9b) ï¨ï¢X ïU0 ï© P ï¨ X ï© ï ï¨ï¢X ïU ï© P ï¨ X ï© Äo nie je niÄ inÃ©, ako jednoduchÃ© zovÅ¡eobecnenie pÃ´vodnÃ©ho vzÅ¥ahu ï¨ ï¢X ïU 0 ï© P ï¨ X ï© . AlternatÃ­vna formulÃ¡cia pozitÃ­vnej formy predpokladu uzavretÃ©ho sveta je, ak nejakÃ¡ vlastnosÅ¥ P platÃ­ pre kaÅ¾dÃ½ objekt z danÃ©ho zoznamu, potom tÃ¡to vlastnosÅ¥ platÃ­ aj pre objekty, ktorÃ© sa nenachÃ¡dzajÃº v tomto zozname. Poznamenajme, Å¾e takto formulovanÃº pozitÃ­vnu formu predpokladu uzavretÃ©ho sveta mÃ´Å¾eme jednoducho falzifikovaÅ¥ tak, Å¾e nÃ¡jdeme aspoÅ jeden objekt X ïU ï­ U 0 , pre ktorÃ½ tÃ¡to vlastnosÅ¥ neplatÃ­"
130,425,0.441,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DiskrÃ©tnosÅ¥ akciÃ­. ÃÄinky akciÃ­ sÃº aplikovanÃ© v diskrÃ©tnych ÄasovÃ½ch okamihoch a nie je moÅ¾nÃ© jednoduchÃ½m spÃ´sobom modelovaÅ¥ ÃºÄinok, ktorÃ½ plynule menÃ­ stav prostredia. NaprÃ­klad nie je moÅ¾nÃ© modelovaÅ¥ rovnomernÃ½ pohyb telesa priestorom, pri ktorom teleso plynule menÃ­ svoju pozÃ­ciu."
59,378,0.441,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"7.3 Å pecifikÃ¡cia jazyka vÃ½rokovej logiky (syntax) Jazyk L vÃ½rokovej logiky je tvorenÃ½ formulami vÃ½rokovej logiky, ktorÃ© sÃº definovanÃ© pomocou mnoÅ¾iny atomickÃ½ch vÃ½rokovÃ½ch premennÃ½ch ï» p,q,..., pï¢,qï¢,...ï½ a mnoÅ¾iny logickÃ½ch spojok ï»ï ,ï ,ï, ïº,ïï½ . Formuly vÃ½rokovej logiky, ktorÃ© tvoria jazyk L, sÃº rekurentne definovanÃ© ako minimÃ¡lna mnoÅ¾ina, ktorÃ¡ vyhovuje tÃ½mto vlastnostiam (1) ï» p,q,..., pï¢,qï¢,...ï½ ï L , (2) ak ï¨ ïªï L ï© , potom ï¨ ïïªï© ï L , (3) ak ï¨ ïª,ï¹ ï L ï© , potom ï¨ ïª ï ï¹ ï© ,ï¨ ïªï ï¹ ï© ,ï¨ ïª ï ï¹ ï© ,ï¨ ïª ïº ï¹ ï© ï L ."
276,70,0.441,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"konfigurujeme v globÃ¡lnom konfiguraÄnom reÅ¾ime nasledujÃºcim prÃ­kazom. Router(config)# banner motd # <sprÃ¡va> # TakÃ¡to sprÃ¡va mÃ´Å¾e byÅ¥ aj viacriadkovÃ¡ a ako deliaci znak (urÄuje zaÄiatok a koniec sprÃ¡vy) mÃ´Å¾eme pouÅ¾iÅ¥ aj inÃ½ znak ako # (takÃ½, ktorÃ½ sa nevyskytuje v danej sprÃ¡ve)."
236,117,0.441,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"VÅ¡imnime si, Å¾e dâ v diferenciÃ¡le sa zvykne pÃ­saÅ¥ antikvou â typom roman. AMS-LATEX poskytuje ÄalÅ¡ie cesty na jemnÃº Ãºpravu medzier medzi znakmi integrovania, konkrÃ©tne prÃ­kazy \iint, \iiint, \iiiint a \idotsint. Pri natiahnutom balÃ­ku amsmath mÃ´Å¾e byÅ¥ vyÅ¡Å¡ie uvedenÃ½ prÃ­klad vysÃ¡dzanÃ½ nasledujÃºcim spÃ´sobom:"
59,1,0.441,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"VÅ¡etky prÃ¡va vyhradenÃ©. NijakÃ¡ ÄasÅ¥ textu nesmie byÅ¥ pouÅ¾itÃ¡ na ÄalÅ¡ie Å¡Ã­renie akoukoÄ¾vek formou bez predchÃ¡dzajÃºceho sÃºhlasu autorov alebo nakladateÄ¾stva. Â© prof. Ing. VladimÃ­r KvasniÄka, DrSc., Ing. Ladislav Clementis Recenzenti: prof. Ing. Igor FarkaÅ¡, PhD. doc. Ing. Ivan Sekaj, PhD. SchvÃ¡lilo vedenie Fakulty informatiky a informaÄnÃ½ch technolÃ³giÃ­ STU."
130,23,0.44,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"SÃºÄasti Klient â triedy v role klienta pouÅ¾Ã­vajÃº rÃ´zne produkty (Produkt A, B...) a vyuÅ¾Ã­vajÃº ich sluÅ¾by. Klient poznÃ¡ iba abstraktnÃ© produkty a nemÃ¡ Å¾iadnu znalosÅ¥ o ich konkrÃ©tnych implementÃ¡ciÃ¡ch. AbstraktnÃ¡TovÃ¡reÅ â definuje abstraktnÃ© metÃ³dy pre tvorbu sady sÃºvisiacich produktov (Produkt A, B...). KonkrÃ©tnaTovÃ¡reÅ1, 2 â reprezentujÃº konkrÃ©tne implementÃ¡cie abstraktnej tovÃ¡rne, ktorÃ© vracajÃº jednu sadu sÃºvisiacich produkty (napr. Produkt A1, B1...). ProduktA, B â abstraktnÃ© triedy alebo rozhrania, ktorÃ© definujÃº zÃ¡kladnÃ© vlastnosti vytvÃ¡ranÃ½ch produktov v podobe svojich metÃ³d. ProduktA1, A2 â konkrÃ©tne realizÃ¡cie abstraktnÃ©ho produktu A, ktorÃ© patria do rÃ´znych sÃ¡d produktov, ktorÃ© sÃº definovanÃ© KonkrÃ©tnymi tovÃ¡rÅami (sady 1, 2...)."
76,133,0.44,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.3 DistribuÄnÃ¡ funkcia Zopakujme, Å¾e nÃ¡hodnÃ¡ veliÄina je po pravdepodobnostnej strÃ¡nke znÃ¡ma, keÄ poznÃ¡me jej rozdelenie. To znamenÃ¡, Å¾e dokÃ¡Å¾eme stanoviÅ¥ hodnoty P( ï£ < ), pre akÃ©koÄ¾vek , ïR. InÃ½mi slovami, vieme urÄiÅ¥ pravdepodobnosÅ¥ toho, Å¾e v pokuse sa realizuje hodnotou, ktorÃ¡ leÅ¾Ã­ v intervale â¨ Ak je diskrÃ©tna veliÄina a dobnostnÃ¡ funkcia vzÅ¥ahom"
343,56,0.44,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"a objavÃ­ sa v druhej. Tento spÃ´sob interoperability je najÅ¥aÅ¾Å¡Ã­ a najmenej prebÃ¡danÃ½, aktuÃ¡lne neexistuje rieÅ¡enie, ktorÃ© by to plnohodnotne dokÃ¡zalo. PoslednÃ© si spomenieme meta protokoly alebo interoperabilitu zaloÅ¾enÃº na natÃ­vnych protokoloch, ako sÃº Polkadot a Cosmos. Polkadot je blockchain novej generÃ¡cie, ktorÃ½ sa snaÅ¾Ã­ o interoperabilitu medzi blockchainami, ktorÃ© sa dajÃº jednoducho odvodiÅ¥ od hlavnÃ©ho Polkadotu chainu. Cosmos je nezÃ¡vislÃ½ blockchain, ktorÃ½ sa tieÅ¾ snaÅ¾Ã­ o interoperabilitu a komunikÃ¡ciu medzi blockchainmi, ale vyuÅ¾Ã­va na to prÃ­stup tzv. prepÃ¡jacÃ­ch blockchainov, ktorÃ© su vÅ¾dy Å¡peciÃ¡lne upravenÃ©, aby komunikovali aj s Cosmosom, aj s cieÄ¾ovÃ½m blockchainom."
276,21,0.439,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Na umoÅ¾nenie vzdialenÃ©ho prÃ­stupu na prepÃ­naÄ pomocou protokolu telnet, je potrebnÃ© prepÃ­naÄu nastaviÅ¥ IP adresu. KeÄÅ¾e porty prepÃ­naÄa pracujÃº na druhej vrstve, IP adresa sa nastavuje na virtuÃ¡lne rozhranie nazÃ½vanÃ© SVI (Switch Virtual Interface). PrepÃ­naÄ mÃ¡ minimÃ¡lne jedno SVI (VLAN 1), ktorÃ© nie je moÅ¾nÃ© vymazaÅ¥."
239,191,0.439,Ãvod do matematickej logiky,"Typy mozÌnyÌch svetov Kedâ na relaÌciu R nekladieme zÌiadne obmedzenia, moÌzÌu platitâ tvrdenia, ktoreÌ vyzerajuÌ zvlaÌsÌtne. VsÌimnime si, zÌe v PrÄ±Ìklade 10.1 platÄ±Ì Î½ w3 (â¦ p) = 0 a zaÌrovenÌ Î½ w3 ( p) = 1. InyÌmi slovami, vo svete w3 nie je p mozÌneÌ, ale je v nÌom nutneÌ. Preto uvazÌujeme nasledujuÌce vlastnosti. DefinÄ±Ìcia. Nech je R binaÌrna relaÌcia na mnozÌine W . (1) R je vsÌade definovanaÌ ak pre kazÌdeÌ u â W existuje v â W takeÌ, zÌe (u, v) â R. (2) R je reflexÄ±Ìvna ak pre kazÌdeÌ u â W platÄ±Ì (u, u) â R. (3) R je tranzitÄ±Ìvna ak z platnosti (u, v), (v, w) â R vyplyÌva (u, w) â R. (4) R je symetrickaÌ ak z platnosti (u, v) â R plynie (v, u) â R. ObycÌajne sa uvazÌujuÌ logiky K, D, T , S4 a S5, ktoreÌ suÌ deï¬novaneÌ pomocou roÌzne silnyÌch relaÌciÄ±Ì R. K: na relaÌciu R nekladieme zÌiadne podmienky. D: R je vsÌade deï¬novanaÌ. T : R je reï¬exÄ±Ìvna S4: R je reï¬exÄ±Ìvna a tranzitÄ±Ìvna. S5: R je reï¬exÄ±Ìvna, tranzitÄ±Ìvna a symetrickaÌ. VsÌimnime si, zÌe taÌto paÌtica logÄ±Ìk je hierarchicky usporiadanaÌ. To znamenaÌ, zÌe kazÌdaÌ nizÌsÌie uvedenaÌ logika je deï¬novanaÌ relaÌciou, ktoraÌ splÌnÌa vsÌetky vlastnosti relaÌciÄ±Ì logÄ±Ìk uvedenyÌch vysÌsÌie."
196,21,0.439,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"strÃ¡n. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 3.3.11 Uvedâte, ako vloÅ¾itâ inÃ½ sÃºbor do hlavnÃ©ho dokumentu. . . . . . . . . . . . . . . . . 48 3.3.12 Uvedâte, ako rieÅ¡itâ architektÃºru vÃ¤cÌÅ¡ieho projektu ako napr. BP, DP, DizP."
393,121,0.439,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Web predprÃ­prava Web predprÃ­prava zahÅÅa predprÃ­pravu zo servera pre klienta ako aj predprÃ­pravu z disku servera do pamÃ¤te servera. Pri napomÃ¡hanÃ­ v rozhodovaniach o predvÃ½bere sa mÃ´Å¾u pouÅ¾iÅ¥ zhluky strÃ¡nok a dolovanie sekvenÄnÃ½ch vzorov prostrednÃ­ctvom dolovania webu. LepÅ¡Ã­ dizajn a organizÃ¡cia webovÃ½ch strÃ¡nok Kvalita webovej strÃ¡nky ako aj jej organizÃ¡cie a prezentÃ¡cie sa mÃ´Å¾u vyhodnotiÅ¥ prÃ¡ve vÄaka analÃ½ze prÃ­stupu pouÅ¾Ã­vateÄ¾ov k webovej strÃ¡nke. VeÄ¾kÃ½ rozsah nÃ¡vÅ¡tevnosti odrÃ¡Å¾a vysokÃ½ zÃ¡ujem pouÅ¾Ã­vateÄ¾ov o webovÃº strÃ¡nku. Kvalitu webovej strÃ¡nky mÃ´Å¾e ovplyvniÅ¥ mnoÅ¾stvo faktorov akÃ½mi sÃº obsah, prezentÃ¡cia, jednoduchÃ© pouÅ¾itie, Äas odozvy a podobne. VÃ½sledky dolovania v zÃ¡znamoch webu sa mÃ´Å¾u pouÅ¾iÅ¥ pre zlepÅ¡enie dizajnu webovej strÃ¡nky ako aj zvÃ½Å¡enie spokojnosti pouÅ¾Ã­vateÄ¾ov. PersonalizÃ¡cia webovÃ½ch strÃ¡nok MnoÅ¾stvo personalizovanÃ½ch a odporÃºÄacÃ­ch webovÃ½ch systÃ©mov zÃ¡visÃ­ od profilov pouÅ¾Ã­vateÄ¾ov. PoznÃ¡me dva rÃ´zne spÃ´soby pre vytvorenie profilov pouÅ¾Ã­vateÄ¾ov: priama metÃ³da prostrednÃ­ctvom explicitnej kooperÃ¡cie pouÅ¾Ã­vateÄ¾a a webovÃ©ho agenta a nepriama metÃ³da pomocou dolovania v dÃ¡tach. Priama metÃ³da mÃ¡ limitovanÃº aplikovateÄ¾nosÅ¥ a mÃ´Å¾e byÅ¥ invazÃ­vna a neprÃ­jemnÃ¡ pre pouÅ¾Ã­vateÄ¾a. Nepriame metÃ³dy mÃ´Å¾u byÅ¥ neinvazÃ­vne a sÃºÄasne anonymnÃ© pre pouÅ¾Ã­vateÄ¾a. TÃ¡to metÃ³da tieÅ¾ zabraÅuje slabÃ©mu vÃ½konu systÃ©mu spÃ´sobenÃ©ho vzdialenÃ½mi agentami."
130,522,0.438,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"AdaptabilnÃ½ systÃ©m dovoÄ¾uje pouÅ¾Ã­vateÄ¾ovi konfigurovaÅ¥ systÃ©m zmenou parametrov, na zÃ¡klade ktorÃ½ch systÃ©m zmenÃ­ svoje sprÃ¡vanie. O tom, kedy sa zmenÃ­ model pouÅ¾Ã­vateÄ¾a vÅ¡ak rozhoduje samotnÃ½ pouÅ¾Ã­vateÄ¾. Je to teda systÃ©m, ktorÃ½ je prispÃ´sobiteÄ¾nÃ½."
265,339,0.438,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"VÃ½hody sÃº jednoduchosÅ¥ a Ä¾ahkÃ¡ pochopiteÄ¾nosÅ¥. JednotlivÃ© etapy sa neprekrÃ½vajÃº a neprebiehajÃº sÃºbeÅ¾ne. MajÃº presne definovanÃ© vÃ½stupy a podmienky ukonÄenia, Äim je proces vÃ½voja softvÃ©ru viditeÄ¾nÃ½ a Ä¾ahko manaÅ¾ovateÄ¾nÃ½. Tento model je vhodnÃ½ pre projekty s veÄ¾mi dobre definovanÃ½mi a nemennÃ½mi poÅ¾iadavkami na softvÃ©rovÃ½ produkt."
135,239,0.438,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"NevÃ½hodou je, Å¾e nie vÅ¾dy sa dÃ¡ funkcionalita takto abstrahova do vrstiev, prÃ­p. uri sprÃ¡vnu granularitu funkcionality vo vrstvÃ¡ch. Pridanie alÅ¡ej funkcionality do vrstvy je relatÃ­vne jednoduchÃ©, naopak odobratie funkcionality mÃ´Å¾e spÃ´sobi problÃ©m vyÅ¡Å¡Ã­m vrstvÃ¡m, ktorÃ© tÃºto funkcionalitu pouÅ¾Ã­vajÃº."
184,221,0.438,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 3-10. TransformÃ¡cie modelov v MDA. MDA je zastreÅ¡enÃ© radom OMG Å¡tandardov, vrÃ¡tane UML, MOF (Meta-Object Facility), XMI (XML Metadata Interchange) a CWM (Common Warehouse Metamodel) a taktieÅ¾ obsahuje smernice a Å¡tandardy aj pre transformÃ¡cie modelov a generickÃ© sluÅ¾by. Å tandardy MDA tak spoloÄne definujÃº spÃ´sob, ktorÃ½m je aj za pomoci nÃ¡strojov kompatibilnÃ½ch s MDA moÅ¾nÃ© vyvÃ­jaÅ¥ systÃ©my. Modely v MDA je nutnÃ© Å¡pecifikovaÅ¥ v modelovacom jazyku. MÃ´Å¾e Ã­sÅ¥ o vÅ¡eobecnÃ© modelovacie jazyky pouÅ¾iteÄ¾nÃ© vo viacerÃ½ch domÃ©nach (napr. UML), ale aj o domÃ©novo Å¡pecifickÃ© modelovacie jazyky. MOF tu zohrÃ¡va Ãºlohu metamodelovacieho jazyka, ktorÃ½ umoÅ¾Åuje Å¡pecifikovaÅ¥ inÃ© modelovacie jazyky a zÃ¡roveÅ definuje spÃ´sob ukladania modelov vytvorenÃ½ch v tÃ½chto jazykoch do XML dokumentov. AkÃ½koÄ¾vek existujÃºci modelovacÃ­ jazyk je teda po vytvorenÃ­ jeho MOF reprezentÃ¡cie uÅ¾ moÅ¾nÃ© povaÅ¾ovaÅ¥ za kompatibilnÃ½ s MDA. PrÃ­kladmi takto definovanÃ½ch modelovacÃ­ch jazykov sÃº, aj keÄ pomerne vÅ¡eobecnÃ©, UML a CWM, ktorÃ© sÃº zÃ¡roveÅ sÃºÄasÅ¥ou balÃ­ka MDA Å¡tandardov. ZatiaÄ¾ Äo UML sa sÃºstreÄuje skÃ´r na objektovÃ© modelovanie, CWM sa naopak zameriava na dÃ¡tovÃ© modelovanie. Spojenie XMI a MOF navyÅ¡e umoÅ¾Åuje automatickÃº serializÃ¡ciu modelov do Å¡tandardizovanÃ½ch XML dokumentov, ÄÃ­m sa zvyÅ¡ujÃº moÅ¾nosti ÄalÅ¡ieho spracovania modelov v rÃ´znych nÃ¡strojoch. PrÃ­kladom takÃ©hoto ÃºspeÅ¡nÃ©ho vyuÅ¾itia XMI je Å¡tandardizovanÃ¡ XML schÃ©ma pre UML modely slÃºÅ¾iaca ako vÃ½mennÃ½ formÃ¡t medzi modelovacÃ­mi nÃ¡strojmi. MDA sa snaÅ¾Ã­ pokryÅ¥ vÅ¡etky fÃ¡zy procesu vÃ½voja softvÃ©ru, od domÃ©novÃ½ch modelov, cez analytickÃ© a nÃ¡vrhovÃ© modely aÅ¾ po modely samotnÃ©ho kÃ³du, priÄom dÃ´raz sa kladie na Å¡tandardizÃ¡ciu vÃ½mennÃ½ch formÃ¡tov samotnÃ½ch modelov."
265,2,0.438,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,Etapy Å¾ivotnÃ©ho cyklu softvÃ©ru 2.1 AnalÃ½za . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 2.2 NÃ¡vrh . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 2.3 ImplementÃ¡cia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109 2.4 Testovanie . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117 2.5 PrevÃ¡dzka a ÃºdrÅ¾ba . . . . . . . . . . . . . . . . . . . . . . . . . . 133
265,396,0.438,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Ide o Å¡tÃ½l programovania v Å¡irÅ¡om zmysle, ktorÃ½ zahÅÅa vymedzenÃº teÃ³riu, koncepty, princÃ­py, metÃ³dy Äi vzory programovania. Paradigma programovania predstavuje ucelenÃ½ prÃ­stup, pohÄ¾ad na problÃ©m, napr. funkcionÃ¡lna Äi objektovo-orientovanÃ¡ paradigma (a k nim zodpovedajÃºce funkcionÃ¡lne, resp. objektovo-orientovanÃ© programovanie). V poslednom Äase sa paradigma pouÅ¾Ã­va na oznaÄenie urÄitej vlastnosti/Ärty programovacieho jazyka, pretoÅ¾e modernÃ© programovacie jazyky sÃº zvÃ¤ÄÅ¡a multiparadigmovÃ© a tie starÅ¡ie sÃº o novÃ© paradigmy Äasto obohacovanÃ©."
94,82,0.437,Sprievodca svetom vedeckÃ©ho publikovania,"prekÄºznuÅ¥ chyby. NavyÅ¡e citÃ¡cie uvedenÃ© v prÃ­lohe sa vedcom nezapoÄÃ­tavajÃº do citaÄnÃ©ho skÃ³re. Z toho vyplÃ½va odporÃºÄanie pre autorov vyuÅ¾Ã­vaÅ¥ inÅ¡tanciu prÃ­lohy s mierou, postaraÅ¥ sa o jej prehÄ¾adnÃº Å¡truktÃºru a vkladaÅ¥ do nej len to, Äo tam naozaj patrÃ­."
59,317,0.437,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Z tabuÄ¾ky vyplÃ½va, Å¾e asociatÃ­vna pamÃ¤Å¥ pomocou procesu Äistenia je jednoznaÄne identifikovateÄ¾nÃ¡, pre konceptuÃ¡lne vektory hodnoty maximÃ¡lneho prekryvu dobre Å¡pecifikujÃº existenciu (alebo neexistenciu) prÃ­sluÅ¡nÃ½ch asociatÃ­vnych vÃ½stupov."
135,401,0.437,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â metÃ³dy, ktorÃ© by transformovali modely na vyÅ¡Å¡ej Ãºrovni abstrakcie do modelov na klasickej OO Ãºrovni. Pri uvaÅ¾ovanÃ­ o takomto spÃ´sobe rieÅ¡enia je moÅ¾nÃ© vyuÅ¾i vÃ½sledky sÃºvisiace s iniciatÃ­vou Modelom riadenÃ¡ architektÃºra (Model Driven Architecture â MDA) [25]. MDA prÃ­stup umoÅ¾uje modelova na vyÅ¡Å¡ej Ãºrovni abstrakcie nezÃ¡visle od platformy, na ktorej by mal by vÃ½slednÃ½ systÃ©m nasadenÃ½. NÃ¡sledne by malo by moÅ¾nÃ© po dodanÃ­ Å¡pecifikÃ¡ciÃ­ jednotlivÃ½ch platforiem transformova takto vytvorenÃ© modely do modelov, ktorÃ© sÃº posta-"
393,243,0.437,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"NavyÅ¡e, ak si predstavÃ­me odkaz medzi dvomi webovÃ½mi strÃ¡nkami ako nejakÃ½ vzÅ¥ah medzi dvomi indivÃ­duami, tak do popredia vystÃºpi akÃ©si sociÃ¡lne povedomie. V tomto zmysle hocijakÃ¡ sociÃ¡lna sieÅ¥, nielen web, poskytuje informÃ¡ciu o usporiadanÃ­ indivÃ­duÃ­ obsiahnutÃ½ch v jej Å¡truktÃºre."
94,28,0.437,Sprievodca svetom vedeckÃ©ho publikovania,"literatÃºry a humanitnÃ½ch vied. Äasopis vychÃ¡dza (s niekoÄ¾koroÄnou prestÃ¡vkou, ktorÃº zavinila francÃºzska revolÃºcia a napoleonskÃ© vojny) dodnes v tlaÄenej podobe pod modernÃ½m nÃ¡zvom Journal des savants. Jeho najstarÅ¡ie ÄÃ­sla sÃº naskenovanÃ© a od roku 2014 dostupnÃ© na strÃ¡nkach digitÃ¡lnej kolekcie FrancÃºzskej nÃ¡rodnej kniÅ¾nice (Gallica1)."
361,184,0.436,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","7. koniec content musÄ±Ì bytâ indikovanyÌ, pretozÌe v prÄ±Ìpade, zÌe by sa vyskytovali dva content za sebou, spoja sa naÌm dve slovaÌ. Vdâaka tomu vznikaÌ pri kazÌdom slove nejednoznacÌnostâ, cÌi je dâalsÌÄ±Ì znak suÌcÌastâou aktuaÌlneho content alebo uzÌ nasledujuÌceho. 1. PrÄ±Ìklady viet z jazyka littleHTML â korektneÌ prÄ±Ìklady <html> <head> <title>,gKLJFSDK vd <></title> </head> <body> jfgdo <p>kdfgh dlsd ld kfbxlykfj hbxd b b </body> </html>"
66,27,0.436,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"UNIQUE â atribÃºt v rÃ¡mci tabuÄ¾ky mÃ´Å¾e nadobÃºdaÅ¥ len jedineÄnÃ© hodnoty. Hodnota atribÃºtu v jednom zÃ¡zname musÃ­ byÅ¥ rozdielna voÄi vÅ¡etkÃ½m ostatnÃ½m zÃ¡znamom v danej tabuÄ¾ke. PlatÃ­ to pre kaÅ¾dÃ½ zÃ¡znam v tabuÄ¾ke napr. prihlasovacie meno musÃ­ byÅ¥ jedineÄnÃ© pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a. Definuje sa pomocou klauzuly UNIQUE, ktorÃ¡ je uvedenÃ¡ pri atribÃºte v rÃ¡mci definovania tabuÄ¾ky."
59,624,0.436,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"13 SymbolickÃ¡ teÃ³ria Hofstadterovho systÃ©mu Copycat pre tvorbu analÃ³gie 13.1 ÃvodnÃ© poznÃ¡mky AnalÃ³gia [8] je v kognitÃ­vnej vede a v umelej inteligencii Å¡pecifikovanÃ¡ dvoma rÃ´znymi spÃ´sobmi: 1. RelÃ¡ciou medzi dvoma objektmi a1 a a2, priÄom tieto objekty sÃº podobnÃ© inÃ½mi objektom b1 a b2, a1ï¾b1 a a2ï¾b2, potom s urÄitou pravdepodobnosÅ¥ou existuje analogickÃ¡ relÃ¡cia aj medzi objektmi b1 a b2 S ï¨ a1 ,a2 ï©"
59,249,0.436,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Na Obr. 4.13 sÃº znÃ¡zornenÃ© vÃ½sledky naÅ¡ich simulaÄnÃ½ch vÃ½poÄtov v dvoch verziÃ¡ch so zahrnutÃ­m uÄenia, ale jedna verzia neobsahuje memetickÃº informÃ¡ciu, zatiaÄ¾ Äo druhÃ¡ verzia ju obsahuje. VidÃ­me, Å¾e zahrnutie mÃ©mov do GA s uÄenÃ­m podstatne zvyÅ¡uje jeho"
240,262,0.436,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"v riadku 18 argument int *cislo. NajskÃ´r doplnÃ­me implementÃ¡ciu funkcie vsetko(). Funkcia musÃ­ pri opakovanÃ½ch volaniach naplniÅ¥ do argumentu postupne zvyÅ¡ujÃºce sa ÄÃ­slo, preto obsah premennej i musÃ­ zostaÅ¥ zachovanÃ½ medzi volaniami (pouÅ¾ijeme static) a hodnotu premennej i musÃ­me pri kaÅ¾dom volanÃ­ zvÃ½Å¡iÅ¥ o 1 (v riadku 11 doplnÃ­me i++). DokonÄime implementÃ¡ciu funkcie print(), tak aby volanie print(vsetko)"
115,167,0.436,Algebra a diskrÃ©tna  matematika,"UvÃ¡dzame strom prehÄ¾adÃ¡vania, kedy v prÃ­pade eÅ¡te nepouÅ¾itÃ½ch farieb pokladÃ¡me vÅ¡etky farby za ekvivalentnÃ© a preto neuvÃ¡dzame permutÃ¡cie nÃ¡jdenÃ©ho rieÅ¡enia s vÃ½menou farieb medzi mnoÅ¾inami vrcholov rovnakej farby. V takom prÃ­pade existuje iba jedno rieÅ¡enie. Farby sÃº oznaÄenÃ© prirodzenÃ½mi ÄÃ­slami"
135,290,0.435,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.8.3 PrÃ­klad opisnÃ©ho jazyka architektÃºry V tejto kapitole uvedieme jednoduchÃ½ prÃ­klad jazyka pre opis architektÃºry klient-server. Najprv opÃ­Å¡eme rozhrania servera, potom rozhrania klienta a nakoniec prepojenia medzi nimi. Server V opisnom jazyku je najprv uvedenÃ½ opis rozhranÃ­, potom opis obmedzenÃ­ a nakoniec opis sprÃ¡vania. Opis servera obsahuje Å¾iadosti o inicializÃ¡ciu, ktorÃº je moÅ¾nÃ© prija prostrednÃ­ctvom operÃ¡cie Initialize(). Prijatie Å¾iadosti o vÃ½poet je zrealizovatenÃ© prostrednÃ­ctvom operÃ¡cie Compute(). SÃºiastka server vrÃ¡ti vÃ½sledok prostrednÃ­ctvom operÃ¡cie Result(). Server mÃ¡ definovanÃ© jedno obmedzenie a na konci v rÃ¡mci prÃ­kladu 3-4 je opis sprÃ¡vania. Pri inicializÃ¡cii sa vytvorÃ­ prÃ­sluÅ¡nÃ½ objekt. Pri Å¾iadosti o vÃ½poet server vrÃ¡ti vÃ½sledok. type Server is interface action in Initialize(); in Compute(Value: Float); out Result(Value: Float); constraint match Start -> InitializeâCall -> (ComputeâCall *); behavior NewValue : var Float; begin (?x in Float) Compute(?x) => Result($NewValue);; end Server; PrÃ­klad 3-4. PrÃ­klad ADL kÃ³du pre server."
76,24,0.435,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.1.4 NÃ¡hodnÃ½ pokus spoÄÃ­va v hode tromi oznaÄenÃ½mi mincami. OznaÄme minci padol znak, = 1, 2, 3. Pomocou , , vyjadrite nÃ¡hodnÃ© udalosti B â znak padne len na prvej a tretej minci, â padnÃº najviac dva znaky,"
184,25,0.435,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"PrÃ¡ca softvÃ©rovÃ©ho architekta nespoÄÃ­va len vo vytvorenÃ­ architektÃºry. PodÄ¾a SEI 1 musÃ­ softvÃ©rovÃ½ architekt Äalej: Â zdokumentovaÅ¥ a komunikovaÅ¥ vytvorenÃº architektÃºru; Â uistiÅ¥ sa, Å¾e ju kaÅ¾dÃ½ pouÅ¾Ã­va a to sprÃ¡vnym spÃ´sobom; Â uistiÅ¥ sa, Å¾e vytvÃ¡ranÃ½ softvÃ©r je v sÃºlade s architektÃºrou; Â uistiÅ¥ sa, Å¾e manaÅ¾ment architektÃºre rozumie na poÅ¾adovanej Ãºrovni detailnosti; Â rieÅ¡iÅ¥ technickÃ© problÃ©my; Â rieÅ¡iÅ¥ nezhody a robiÅ¥ kompromisy; Â uistiÅ¥ sa, Å¾e sa pouÅ¾Ã­vajÃº sprÃ¡vne modelovacie techniky, aby sa vedelo v dostatoÄnom predstihu, Äi sa dosiahnu poÅ¾iadavky na kvalitu ako je vÃ½konnosÅ¥; Â spolupodieÄ¾aÅ¥ sa na problÃ©moch ako je vÃ½ber konkrÃ©tnych nÃ¡strojov a prostredÃ­; Â uistiÅ¥ sa, Å¾e architektÃºra je sprÃ¡vna z hÄ¾adiska nasadenia, ÃºdrÅ¾by a ÄalÅ¡ieho vÃ½voja systÃ©mu; Â udrÅ¾iavaÅ¥ morÃ¡lku vo vÃ½vojom tÃ­me; Â chÃ¡paÅ¥ a plÃ¡novaÅ¥ vÃ½vojovÃ© smery aplikÃ¡cie, plÃ¡novaÅ¥ nasadenie novÃ½ch technolÃ³giÃ­; Â vykonÃ¡vaÅ¥ manaÅ¾ment rizÃ­k sÃºvisiacich s architektÃºrou. UvedenÃ½ zoznam nie je kompletnÃ½ a zrejme ani nikdy nemÃ´Å¾e byÅ¥, keÄÅ¾e kaÅ¾dÃ½ mÃ¡ svoje vlastnÃ© oÄakÃ¡vania a definÃ­cie prÃ¡ce softvÃ©rovÃ©ho architekta. Zo zoznamu sa vÅ¡ak dajÃº abstrahovaÅ¥ zÃ¡kladnÃ© zruÄnosti softvÃ©rovÃ©ho architekta v tÃ½chto Å¡tyroch oblastiach: Â VzÅ¥ahy â architekt hrÃ¡ vÃ½znamnÃº rolu vo viacerÃ½ch vzÅ¥ahoch v rÃ¡mci spoloÄnosti ako aj navonok smerom k zÃ¡kaznÃ­kovi. Äasto sa zÃºÄastÅuje stretnutÃ­ so zÃ¡kaz1"
122,110,0.435,Modelovanie softvÃ©ru,"OperÃ¡ciu moÅ¾no vyjadriÅ¥ aj diagramom aktivÃ­t, ako ukazuje obrÃ¡zok 7.3. V takom prÃ­pade, celÃ¡ operÃ¡cia predstavuje jednu aktivitu. Akcie, z ktorÃ½ch pozostÃ¡va, sÃº naviazanÃ© na operÃ¡cie, ktorÃ½ch volania reprezentujÃº."
115,0,0.434,Algebra a diskrÃ©tna  matematika,"PublikÃ¡ciu podporilo zdruÅ¾enie Gratex IT InÅ¡titÃºt Vydala SlovenskÃ¡ technickÃ¡ univerzita v Bratislave vo VydavateÄ¾stve STU, Bratislava, Vazovova 5. SchvÃ¡lilo vedenie Fakulty informatiky a informaÄnÃ½ch technolÃ³giÃ­ STU v Bratislave dÅa 25.4.2006, uznesenie ÄÃ­slo 12.1.2006/kd, pre Å¡tudijnÃ½ program Informatika a Å¡tudijnÃ½ program PoÄÃ­taÄovÃ© systÃ©my a siete"
94,141,0.434,Sprievodca svetom vedeckÃ©ho publikovania,"organizÃ¡cie formulovali dodatky k zmluvÃ¡m vydavateÄ¾ov (napr. SPARC Addendum62, Science Commons Addendum alebo MIT Ammendment, niekoÄ¾ko alternatÃ­v v rÃ¡mci Scholarâs Copyright project). Tie umoÅ¾ÅujÃº autorom zachovaÅ¥ si ÄasÅ¥ svojich prÃ¡v, ktorÃ¡ je najpodstatnejÅ¡ia pre akademickÃ½ svet â naprÃ­klad pouÅ¾Ã­vaÅ¥ dielo pri ÄalÅ¡ej prÃ¡ci, alebo publikovaÅ¥ finÃ¡lnu verziu v repozitÃ¡ri (Hirtle 2006). StrÃ¡nka s nÃ¡zvom âScholarâs Copyright Addendum Engineâ umoÅ¾Åuje vedcovi vytvoriÅ¥ PDF dokument zmluvy s dodatkom pre konkrÃ©tneho vydavateÄ¾a a Äasopis (Science Commons63). NiektorÃ­ vydavatelia sÃº pri prevode autorskÃ½ch prÃ¡v prÃ­stupnÃ­ vyjednÃ¡vaniu, inÃ­ na webovÃ½ch strÃ¡nkach svojich Äasopisov rovno konÅ¡tatujÃº, Å¾e neakceptujÃº Å¾iadne dodatky k zmluvÃ¡m. PodÄ¾a kritikov prevodu autorskÃ½ch prÃ¡v Å¾iadajÃº vydavatelia od autorov viac, neÅ¾ je potrebnÃ© na ochranu obchodnÃ½ch zÃ¡ujmov Äasopisu. Jedinou cestou, ako do prÃ¡vneho vzÅ¥ahu autora a vydavateÄ¾a vrÃ¡tiÅ¥ rovnovÃ¡hu, je dosiahnuÅ¥, aby sa vÃ½znamnÃ¡ vÃ¤ÄÅ¡ina autorov odmietla Å¡tandardne vzdaÅ¥ svojich prÃ¡v a sÃºhlasila iba s prevodom limitovanÃ½ch prÃ¡v na vydavateÄ¾a. Pri publikovanÃ­ v Äasopisoch s otvorenÃ½m prÃ­stupom ostÃ¡vajÃº autorskÃ© prÃ¡va autorovi a ÄlÃ¡nok vychÃ¡dza pod licenciou Creative Commons. V zaÄiatkoch hnutia Open Access sa Äasto stÃ¡valo, Å¾e Äasopisy deklarovali otvorenÃ½ prÃ­stup a uverejÅovali na svojich strÃ¡nkach plnÃ© texty ÄlÃ¡nkov, no bez licenciÃ­, ÄÃ­m autorov a pouÅ¾Ã­vateÄ¾ov nechÃ¡vali v prÃ¡vnej neistote. V sÃºÄasnosti je pouÅ¾Ã­vanie verejnÃ½ch licenciÃ­ podmienkou napr. aj pre zaradenie open access Äasopisu do zoznamu DOAJ (Directory of Open Access Journals)64 a kaÅ¾dÃ½ seriÃ³zny Äasopis by tÃºto otÃ¡zku mal maÅ¥ vyrieÅ¡enÃº."
66,6,0.434,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Zoznam tabuliek TabuÄ¾ka 1. UkÃ¡Å¾ka relÃ¡cie/tabuÄ¾ky v relaÄnom dÃ¡tovom modely ...........................................10 TabuÄ¾ka 2 SprÃ¡vanie hodnoty NULL pre operÃ¡cie negÃ¡cie, logickÃ©ho sÃºÄinu a sÃºÄtu .............14 TabuÄ¾ka 3. UkÃ¡Å¾ka dÃ¡t tabuÄ¾ky players ....................................................................................32 TabuÄ¾ka 4. UkÃ¡Å¾ka dÃ¡t tabuÄ¾ky teams ......................................................................................32 TabuÄ¾ka 5. UkÃ¡Å¾ka dÃ¡t tabuÄ¾ky player_seasons .......................................................................32 TabuÄ¾ka 6. VÃ½sledok dopytu pre INNER JOIN pre nÃ¡jdenie vÅ¡etkÃ½ch hrÃ¡Äov, ktorÃ½ odohrali nejakÃº sezÃ³nu ..........................................................................................................................34 TabuÄ¾ka 7. VÃ½sledok dopytu pre INNER JOIN nad tromi tabuÄ¾kami (players, player_seasons, teams) ......................................................................................................................................35 TabuÄ¾ka 8. VÃ½sledok dopytu pre LEFT JOIN pre nÃ¡jdenie vÅ¡etkÃ½ch hrÃ¡Äov spolu s ich sezÃ³nami ..................................................................................................................................................37 TabuÄ¾ka 9. PrehÄ¾adovÃ¡ tabuÄ¾ka popisu vlastnostÃ­ pre procedÃºry a funkcie ............................47 TabuÄ¾ka 10. OrientaÄnÃ© Äasy prÃ­stupu pre Ãºrovne pamÃ¤ti ......................................................56 TabuÄ¾ka 11 Zoznam prÃ­kazov pre ukÃ¡Å¾ku izolÃ¡cie Read commited .........................................81 TabuÄ¾ka 12. Zoznam prÃ­kazov pre ukÃ¡Å¾ku izolÃ¡cie Repeatable read .......................................83 TabuÄ¾ka 13. Zoznam prÃ­kazov pre ukÃ¡Å¾ku izolÃ¡cie Repeatable Read s poruÅ¡enÃ­m sÃ©riovateÄ¾nosti .........................................................................................................................85"
59,494,0.434,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde pre jednoduchosÅ¥ pripÃºÅ¡Å¥ame, Å¾e teÃ³ria ï j alebo ï new, j sÃº prÃ¡zdne, v prÃ­pade, Å¾e obe teÃ³rie sÃº prÃ¡zdne, potom podÄ¾a uÅ¾ pouÅ¾itej konvencie symbol Â´ïªÂ´ v (9.21) vynechÃ¡va tento index j. StojÃ­me pred Ãºlohou ako zmodifikovaÅ¥ zjednotenie ï j ï ï new, j dvoch pÃ´vodne"
59,461,0.434,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"DÃ´kaz tÃ½chto vlastnostÃ­ je analogickÃ½ dÃ´kazu rÃ´znych dÃ´sledkov vety o dedukcii vo vÃ½rokovej logike [6]. Pre danÃº teÃ³riu ï zostrojÃ­me databÃ¡zu poznatkov (angl. belief set) pomocou operÃ¡tora konsekvencie K ï½ Cn ï¨ ï ï© (9.4) Z definÃ­cie (9.2a) operÃ¡tora konsekvencie vyplÃ½va, Å¾e relÃ¡cia vyplÃ½vania ï ïª je ekvivalentnÃ¡ podmienke ïªï K , (9.5) ï¨ ï ïªï© ïº ï¨ ïªï K ï©"
265,116,0.433,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"â¢ BezpeÄnosÅ¥ voÄi okoliu (angl. safety) â miera, do akej miery softvÃ©r ohrozuje svojich pouÅ¾Ã­vateÄ¾ov. Äasto sa pletie s bezpeÄnosÅ¥ou. â¢ BezpeÄnosÅ¥ (angl. security) â miera, do akej je softvÃ©r schopnÃ½ odolÃ¡vaÅ¥ Ãºtokom zvonku. Äasto sa pletie s bezpeÄnosÅ¥ou voÄi okoliu. â¢ PrenosnosÅ¥ (angl. portability) â miera, do akej moÅ¾no softvÃ©r pouÅ¾Ã­vaÅ¥ na rÃ´znych platformÃ¡ch a zariadeniach, resp. miera jednoduchosti takÃ½chto inÅ¡talÃ¡ciÃ­. â¢ Interoperabilita (angl. interoperability) â miera, do akej softvÃ©r podporuje spoluprÃ¡cu s inÃ½mi softvÃ©rmi. â¢ ZnovupouÅ¾iteÄ¾nosÅ¥ (angl. reusability) â miera, do akej moÅ¾no softvÃ©r (alebo jeho Äasti) pouÅ¾iÅ¥ ako sÃºÄasÅ¥ inÃ©ho softvÃ©ru. â¢ UdrÅ¾ovateÄ¾nosÅ¥ (angl. maintainability) â do akej miery je jednoduchÃ© poÄas prevÃ¡dzky softvÃ©ru pre softvÃ©rovÃ½ch ÃºdrÅ¾bÃ¡rov softvÃ©r udrÅ¾iavaÅ¥ v chode, opravovaÅ¥ chyby. â¢ ModifikovateÄ¾nosÅ¥ (angl. modifiability) â do akej miery jednoducho pridÃ¡vaÅ¥ novÃº resp. meniÅ¥ existujÃºcu funkcionalitu softvÃ©ru. â¢ TestovateÄ¾nosÅ¥ (angl. testability) â do akej miery moÅ¾no (efektÃ­vne) verifikovaÅ¥ Äi softvÃ©r zodpovedÃ¡ Å¡pecifikÃ¡cii. SÃºvisiaca vlastnosÅ¥ softvÃ©ru je tieÅ¾ pokrytie testami, ktorÃ© oznaÄuje, akÃ¡ ÄasÅ¥ Å¡truktÃºry, resp. funkciÃ­ softvÃ©ru mÃ¡ vytvorenÃ© adekvÃ¡tne automatickÃ© testy. â¢ DokumentovateÄ¾nosÅ¥ (angl. documentability) â do akej miery moÅ¾no k softvÃ©ru vytvoriÅ¥ dokumentÃ¡ciu (mÃ¡ zmysel rozliÅ¡ovaÅ¥ najmÃ¤ pri tzv. âzanechanomâ, angl. legacy softvÃ©ri). SÃºvisiaca (a ÄastejÅ¡ie pouÅ¾Ã­vanÃ¡) vlastnosÅ¥ softvÃ©ru je zdokumentovanosÅ¥, teda miera, do akej sÃº jednotlivÃ© sÃºÄiastky zdokumentovanÃ©."
276,146,0.433,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"ZÃ¡kladnÃ© Ãºlohy 1. Prepojte zariadenia podÄ¾a topolÃ³gie na Obr. 10.1. Overte, Äi na nich nie je uloÅ¾enÃ¡ konfigurÃ¡cia, prÃ­padne ju vymaÅ¾te a smerovaÄe reÅ¡tartujte. 2. Nakonfigurujte zariadeniam zodpovedajÃºce pomenovanie, heslÃ¡ do konzoly"
361,113,0.433,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","F OLLOW1 (X) je mnozÌina terminaÌlnych symbolov, ktoreÌ bezprostredne nasledujuÌ za terminaÌlnym symbolom X v nejakej vetnej forme. Ak S ââ Î±XaÎ², potom kazÌdeÌ a â F OLLOW (X) VyÌpocÌet F OLLOW1 (X), kde X â N : â $ je v F OLLOW1 (S) (S je pocÌiatocÌnyÌ symbol, $ je symbol konca vstupneÌho retâazca) â ak B â Î±XÎ² a potom pridaj vsÌetky prvky F IRST1 (Î²) okrem  do F OLLOW1 (X) â ak B â Î±XÎ² a  â F IRST1 (Î²) alebo ak B â Î±X pridaj F OLLOW1 (B) do F OLLOW1 (X) PrÄ±Ìklad 4.17:"
115,197,0.433,Algebra a diskrÃ©tna  matematika,"paralelnÃ© zapojenie â sÃºÄet premennÃ½ch, 156 paralelnÃ© spracovanie, 230, 301 Pascal, Blaise, 81 Pascalov trojuholnÃ­k, 81, 82-83, 85 Pascalova identita, 82 Peano, Giuseppe, 20 permutÃ¡cia, 88, 152, 216, 260, 317 â ako bijekcia, 88, 215 â ako postupnosÅ¥ Å¥ahov piÅ¡kvoriek, 294 â derangementÃ¡lna, 117-118 â, generovanie, 88, 89 â, grupa, 133-135 â s opakovanÃ­m, 92, 93 â, strom konÅ¡trukcie, 90 â, sÃºÄin, 134-135 Petersen, Julius, 264 Petersenov graf, 264, 266 Pisano, Leonardo, nazÃ½vanÃ½ Fibonacci, 102 piÅ¡kvorky, 288-295 planÃ¡rna (rovinnÃ¡) reprezentÃ¡cia grafu, 260261 planÃ¡rny graf, 260-264, 267, 274 plÃ¡novanie udalostÃ­, graf, 230 plne n-Ã¡rny strom, 280-281 poÄet rieÅ¡enÃ­ sÃºstavy lineÃ¡rnych rovnÃ­c, 206208 â, 1 rieÅ¡enie, 206-208 â, nekoneÄne veÄ¾a rieÅ¡enÃ­, 206-208 â, nemÃ¡ rieÅ¡enie, 206-208 poÄÃ­taÄovÃ©, transportnÃ© siete, 228, 237, 257, 305, 308 podgraf, 234, 237, 263, 266, 279, 308, 310 podgrupa, 131-132, 135, 136, 142 podgrupa, triviÃ¡lna, 131 podmnoÅ¾ina, 13, 32-33, 37, 40, 53-54, 67, 91, 131, 132, 142, 233 podmonoid, 142 podstrom, 279 pohyb v stavovom priestore hry, 292 pojem, elementÃ¡rny, 2, 29, 30 âpokrytieâ klauzÃºl, 167-171 pokrytie prvku, 64, 167"
94,407,0.433,Sprievodca svetom vedeckÃ©ho publikovania,"transparentnosÅ¥: vznikla tzv. âOpen Discovery Initiative167â, ktorÃ¡ propaguje otvorenÃº vÃ½menu metadÃ¡t a dÃ¡tovÃ½ch formÃ¡tov. Vytvorenie otvorenÃ©ho centrÃ¡lneho indexu je veÄ¾mi nÃ¡roÄnÃ¡ otÃ¡zka, keÄÅ¾e vyÅ¾aduje sÃºhru vÅ¡etkÃ½ch troch ÃºÄastnÃ­kov âdiscovery procesuâ â kniÅ¾nice, poskytovateÄ¾ov obsahu a poskytovateÄ¾ov technickÃ©ho rieÅ¡enia,"
135,351,0.433,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"e. Zmena korelovanÃ½ch atribÃºtov/operÃ¡ciÃ­ (Correlated Attributes/Operations) â pridanie (odobratie) triedy, ktorÃ© si vyÅ¾iada pridanie (odobratie) atribÃºtov/operÃ¡ciÃ­ aj v pÃ´vodnÃ½ch triedach vzoru. NaprÃ­klad pridanie novÃ©ho typu produktov v Ab-"
195,228,0.433,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"ObrÃ¡zok 13.4 MetÃ³da podpornÃ½ch vektorov (angl. Support Vector Machines, SVM). OptimÃ¡lna nadrovina je zobrazenÃ¡ dlhÃ½mi pomlÄkami, priÄom maximÃ¡lny odstup je zobrazenÃ½ bodkovanou (a obojsmernou Å¡Ã­pkou)."
343,52,0.433,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"infuru alebo nieÄo inÃ©, pripojÃ­te sa priamo na RPC uzol a posielate mu podpÃ­sanÃ© jsony, ktorÃ© sÃº transakcie na konci dÅa. AplikÃ¡cie vedia samy iniciovaÅ¥ transakcie a invokovaÅ¥ chaincode. Å tandardne nemÃ¡te tokeny, ale vÅ¡etko je organizovanÃ© presne cez tieto chaincode a tam sa teoreticky vedia zadefinovaÅ¥ aj tokeny. Fabric nemÃ¡ ani natÃ­vne platidlo (coin), takÅ¾e je v Åom vÅ¡etko bez transakÄnÃ½ch poplatkov. Chaincode je kontajner s kÃ³dom, ktorÃ½ sa dÃ¡ zabaliÅ¥ a posunÃºÅ¥ na peera, ktorÃ½ ho mÃ´Å¾e nainÅ¡talovaÅ¥. Chaincode je program, ktorÃ½ zapisuje key-value storage, sleduje autorizÃ¡cie, Äo mÃ´Å¾ete pouÅ¾iÅ¥, kto mÃ´Å¾e vyuÅ¾iÅ¥ tÃºto logiku. ExistujÃº dve paradigmy, ktorÃ© sa pouÅ¾Ã­vajÃº vo fabricu, a to je natÃ­vny fabric, ktorÃ½ je napÃ­sanÃ½ v GOlang, a Hyperledger Composer na testovacie ÃºÄely a proof of concept. Obe tieto paradigmy spÃ¡ja niekoÄ¾ko prvkov. Ordering service je jeden alebo viac uzlov, ktorÃ© usporadÃºvajÃº transakcie. NeukladajÃº Å¾iaden chaincode ani neudrÅ¾ujÃº ÃºÄtovnÃº knihu. Ich politika je o tom, aby sledovali, Äi transakciu naozaj vykonal niekto, kto bol certifikovanÃ½ a Äi mal prÃ­stup k pouÅ¾Ã­vaniu peerov a transakciÃ­. AplikÃ¡cia, keÄ vykonÃ¡ transakciu, vÅ¡etko ide na ordering uzol. Ordering uzol ich usporiada podÄ¾a toho, ktorÃ½ chaincode volajÃº, aby to bolo efektÃ­vne na bloky a na ÄÃ­tanie/zÃ¡pis operÃ¡cie v databÃ¡ze. Transakcie sa potom posielajÃº peerom, vykonÃ¡ sa zmena stavu a ukladÃ¡ sa to do bloku. Blok sa emituje a akonÃ¡hle je blok zapÃ­sanÃ½, broadcastuje sa to vÅ¡etkÃ½m ostatnÃ½m peerom, aby si aktualizovali svoj stav databÃ¡zy. PredtÃ½m, ako sÃº transakcie commitnutÃ©, peeri ich validujÃº a keÄ je dosiahnutÃ½ konsenzus a transakcie sÃº akceptovanÃ©, vÅ¡etci aktualizujÃº stav databÃ¡zy. V hyperledgeri existujÃº tzv. peer uzly, ktorÃ© sa dajÃº porovnaÅ¥ s ethereovÃ½m uzlom alebo s bitcoin uzlom. DrÅ¾ia stav ÃºÄtovnej knihy, vykonÃ¡vajÃº transakcie a majÃº viac rolÃ­ v sieti. PrvÃ¡ je committing peer, ktorÃ­ drÅ¾ia stav blockchainu a komitujÃº transakcie. DruhÃ¡ je endorsing peer, ktorÃ­ tieÅ¾ komitujÃº, ale tieÅ¾ berÃº transakÄnÃ© nÃ¡vrhy, Äo znamenÃ¡, Å¾e validujÃº transakcie a vynucujÃº ich vÃ½sledok. Composer je vlastne API, ktorÃ© beÅ¾Ã­ na fabricu ako aplikÃ¡cia a je to jednoduchÃ½ model, ako integrovaÅ¥ a vytvoriÅ¥ blockchainovÃ© rieÅ¡enia. VÃ½zvou medzi akÃ½mikoÄ¾vek blockchain sieÅ¥ami je, ako zabezpeÄiÅ¥ ako dosiahnuÅ¥ cross-chain komunikÃ¡ciu, teda interoperabilitu. Blockchain interoperabilitu vieme rozdeliÅ¥ na 2 typy, homogÃ©nnu a heterogÃ©nnu. HomogÃ©nna je medzi sieÅ¥ami, ktorÃ© zdieÄ¾ajÃº rovnakÃ½ konsenzus a inÃ© parametre, ÄiÅ¾e ÄastokrÃ¡t ich volÃ¡me odvodenÃ©, ako naprÃ­klad Bitcoin, Bitcoin Cash. Medzi homogÃ©nnymi sieÅ¥ami interoperabilita nie je nejakÃ½ vÃ¡Å¾ny problÃ©m, pretoÅ¾e transakcie sÃº si"
115,61,0.433,Algebra a diskrÃ©tna  matematika,"ImplikÃ¡cia p â q mÃ´Å¾e byÅ¥ dokÃ¡zanÃ¡ tak, Å¾e ukÃ¡Å¾eme, Å¾e z predpokladu pravdivosti vÃ½roku p vyplÃ½va taktieÅ¾ aj pravdivosÅ¥ vÃ½roku q. TÃºto jednoduchÃº formulÃ¡ciu priameho dÃ´kazu mÃ´Å¾eme upresniÅ¥ tak, Å¾e pri dÃ´kaze vychÃ¡dzame z axiÃ³m {Ï1 ,...,Ïn } a z uÅ¾ dokÃ¡zanÃ½ch viet {Ï1 ,...,Ï m } , potom dÃ´kaz p â q mÃ´Å¾eme charakterizovaÅ¥ vzÅ¥ahom logickÃ©ho dÃ´kazu {Ï1 ,...,Ïn } âª {Ï1 ,...,Ï m } âª { p} A q"
76,421,0.433,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Kapitola 4 4.1.2 VeliÄiny v ÃºlohÃ¡ch 2.1.1 aÅ¾ 2.1.16 majÃº koneÄne veÄ¾a hodnÃ´t a ich rozdelenia sÃº uvedenÃ© vo vÃ½sledkoch Äl.2.1. VÃ½poÄet E(X), var(X) nepredstavuje problÃ©m. VeliÄiny z Ãºloh 2.1.17 aÅ¾ 2.1.20 majÃº rozdelenie, ktorÃ© je modifikÃ¡ciou rozdelenia G(p) a je treba vedieÅ¥ nieÄo z teÃ³rie mocninovÃ½ch radov. Pre zaujÃ­mavosÅ¥, E(X) = 2, z Ãºlohy 2.1.17, kÃ½m E(X) = 1.6667 pre X z Ãºlohy 2.1.18. 4.1.6"
76,429,0.433,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"kritickou oblasÅ¥ou veÄ¾kosti (pribliÅ¾ne) 0.05. Chceme ilustrovaÅ¥, Å¾e ak variancia sÃºborov je rovnakÃ¡ (v naÅ¡om prÃ­pade rovnÃ¡ 0.25), poÄet stupÅov voÄ¾nosti df podÄ¾a Satterthwaitovho vzÅ¥ahu sa rovnÃ¡ (pribliÅ¾ne) m + n â 2 ( = 23). Z dÃ¡t (xi), (yi) mÃ¡me:"
240,137,0.433,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"hodnoty o 1 spÃ´sobÃ­ preteÄenie, vÃ½sledok ktorÃ©ho je hodnota 0, ktorÃ¡ vÅ¡ak poruÅ¡Ã­ podmienku cyklu a teda cyklus skonÄÃ­. PraktickÃ½ tip: BeÅ¾ne sa ako cykly opakujÃºce sa donekoneÄna pouÅ¾Ã­vajÃº prÃ­kazy for(;;) a while(1), ktorÃ½ch podmienky budÃº vÅ¾dy vyhodnotenÃ© ako platnÃ©."
40,26,0.433,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Fakulta Chemickej a PotravinÃ¡rskej TechnolÃ³gie, SlovenskÃ¡ TechnickÃ¡ Univerzita, Oddelenie Matematiky, RadlinskÃ©ho 9, Bratislava 812 37, E-mail: stefan.babinec@stuba.sk UmelÃ¡ inteligencia a kognitÃ­vna veda II."
265,218,0.432,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Aby sme mohli objektÃ­vne vyhodnotiÅ¥, Äi softvÃ©r danÃ© poÅ¾iadavky spÄºÅa. Bez merateÄ¾nosti sa nedÃ¡ uzavrieÅ¥ kontrakt so zÃ¡kaznÃ­kom, o ktorÃ½ sa dÃ¡ reÃ¡lne oprieÅ¥. Nie je ani moÅ¾nÃ© rozumne monitorovaÅ¥ priebeh projektu a urÄovaÅ¥ tempo, akÃ½m napreduje."
76,2,0.432,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,2.1 DiskrÃ©tne nÃ¡hodnÃ© veliÄiny a ich rozdelenie . . . . . . . . . . . . . . . . . . . . . 45 2.2 SpojitÃ© nÃ¡hodnÃ© veliÄiny a ich rozdelenie . . . . . . . . . . . . . . . . . . . . . . . . 50 2.3 DistribuÄnÃ¡ funkcia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 2.4 NiektorÃ© dÃ´leÅ¾itÃ© rozdelenia . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 2.5 Rozdelenie transformovanej nÃ¡hodnej veliÄiny . . . . . . . . . . . . . . . . . . . 68
195,1,0.432,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Kniha vznikla a bola vydanÃ¡ s podporou projektov Vedeckej grantovej agentÃºry Ministerstva Å¡kolstva, vedy, vÃ½skumu a Å¡portu Slovenskej republiky a Slovenskej akadÃ©mie vied (VEGA): VG 1/1221/12 PokroÄilÃ© metÃ³dy v evolÃºcii softvÃ©ru: varianty, kompozÃ­cia a integrÃ¡cia VG 1/0752/14. InteligentnÃ¡ analÃ½za veÄ¾kÃ½ch ÃºdajovÃ½ch korpusov sÃ©manticky-orientovanÃ½mi a bioinÅ¡pirovanÃ½mi metÃ³dami v paralelnom prostredÃ­. PublikÃ¡ciu podporili:"
265,180,0.432,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"V ktorej fÃ¡ze vÃ½voja softvÃ©ru sa stanovuje, Äo zÃ¡kaznÃ­k oÄakÃ¡va od softvÃ©ru? DefinitÃ­vne rozhodnutia padnÃº v etape Å¡pecifikÃ¡cie (vytvorenÃ­m dokumentu Å¡pecifikÃ¡cie poÅ¾iadaviek), v rÃ¡mci etapy analÃ½zy sa pre tieto rozhodnutia pripravÃ­ pÃ´da."
361,23,0.432,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","DefinÄ±Ìcia 2.6: Analogicky k mocnine slova moÌzÌeme definovatâ i-tu mocninu jazyka L ako L0 = , Li+1 = L Â· Li . IntuitÄ±Ìvne teda {} = {} pre lâubovolâneÌ j = N0 . DefinÄ±Ìcia 2.7: Kleeneho uzaÌver obsahuje mnozÌinu slov, ktoreÌ dostaneme zretâazenÄ±Ìm niekolâkyÌch slov z jazyka L, formaÌlne Lâ = i=0 Li (analogicky sme definovali mnozÌinu vsÌetkyÌch slov nad abecedou â Î£â )."
59,563,0.431,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"poznatkov, ktorÃ© boli odvodenÃ© z defaultovej teÃ³rie ï D ï½ ï¨ D,ï ï© . UrÄitou âvÃ½hodouâ extenzie je, Å¾e miesto pojmu âkonzistentnosÅ¥â, ktorÃ½ pouÅ¾Ã­vame v rÃ¡mci teÃ³riÃ­, mÃ´Å¾eme pouÅ¾Ã­vaÅ¥ mnoÅ¾inovo-teoretickÃ½ pojem, kde hovorÃ­me, Å¾e danÃ¡ formula je (nie je) elementom extenzie: (1) ï¨ E ïª ï© ïº ï¨ ïªï E ï© (2) ï¨ E"
205,114,0.431,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","VyhÄ¾adÃ¡vanie na webe Ak chceme overiÅ¥ nielen prÃ­tomnosÅ¥ relevantnÃ©ho vÃ½sledku v zozname, ale aj sprÃ¡vnosÅ¥ jeho pozÃ­cie v zozname, mÃ´Å¾eme pouÅ¾iÅ¥ mieru s nÃ¡zvom (normalizovanÃ½) diskontovanÃ½ kumulatÃ­vny zisk (angl. normalized discounted cumulative gain â NDCG)."
240,12,0.431,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"UpravenÃ½ prvÃ½ program â naÄÃ­tanie vstupu PrvÃ½ program, ktorÃ½ sme uviedli v tejto kapitole, pri kaÅ¾dom spustenÃ­ (vykonanÃ­) vÅ¾dy len vypÃ­Å¡e sprÃ¡vu Ahoj! a skonÄÃ­. Programy sÃº uÅ¾itoÄnejÅ¡ie, keÄ dokÃ¡Å¾u vykonÃ¡vaÅ¥ vÅ¡eobecnejÅ¡ie Ãºlohy. RozÅ¡Ã­rime program o naÄÃ­tanie vstupu, Äo mu umoÅ¾nÃ­ reagovaÅ¥ na vstupy od pouÅ¾Ã­vateÄ¾a. UvaÅ¾ujme nasledujÃºci upravenÃ½ program:"
276,113,0.431,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"4. Overte funkÄnosÅ¥ liniek pomocou ping medzi priamo pripojenÃ½mi zariadeniami a skontrolujte obsah smerovacÃ­ch tabuliek (mali by obsahovaÅ¥ vÅ¡etky priamo pripojenÃ© siete). 5. Nakonfigurujte smerovanie pomocou EIGRP tak, Å¾e do smerovacieho procesu (autonÃ³mny systÃ©m Ä. 1) zahrniete vÅ¡etky priamo pripojenÃ© siete smerovaÄov."
59,117,0.431,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3.3 Hollandov genetickÃ½ algoritmus GenetickÃ© algoritmy boli vynÃ¡jdenÃ© informatikom Johnom Hollandom [25] poÄiatkom 70. rokov minulÃ©ho storoÄia. Po urÄitej nÃ¡behovej 10-roÄnej periÃ³de rozpakov a mlÄania v komunite informatikov, stali sa jednou z najbÃºrlivejÅ¡ie rozvÃ­jajÃºcich sa oblastÃ­ informatiky a umelej inteligencie [15,37]. MoÅ¾no konÅ¡tatovaÅ¥, Å¾e spolu s neurÃ³novÃ½mi sieÅ¥ami tvoria jadro novovznikajÃºcej oblasti nazÃ½vanej poÄÃ­taÄovÃ¡ inteligencia, ktorÃ¡ je schopnÃ¡ rieÅ¡iÅ¥ praktickÃ© inÅ¾inierske problÃ©my z informaÄnÃ½ch technolÃ³giÃ­, ktorÃ© vyÅ¾adujÃº vysokÃ½ stupeÅ âinteligencie1â. V tejto podkapitole ukÃ¡Å¾eme zÃ¡kladnÃ© princÃ­py genetickÃ½ch algoritmov. GenetickÃ½ algoritmus nemanipuluje priamo so Å¾ivÃ½mi organizmami, ale s ich genetickou reprezentÃ¡ciou. PÃ´vodnÃ½ Hollandov nÃ¡zov pre tÃºto reprezentÃ¡ciu bol âchromozÃ³mâ, Å¾iaÄ¾ tÃ¡to pÃ´vodnÃ¡ terminolÃ³gia vyvolÃ¡vala medzi biolÃ³gmi rÃ´zne asociÃ¡cie s Äisto biologickÃ½m vÃ½znamom tohto termÃ­nu, ktorÃ© nesÃºviseli s problematikou genetickÃ©ho algoritmu, preto budeme tieto informaÄnÃ© entity nazÃ½vaÅ¥ âreplikÃ¡toryâ. Postulujme, Å¾e replikÃ¡tory majÃº schopnosÅ¥ sa rozmnoÅ¾ovaÅ¥ â replikovaÅ¥, a to buÄ unÃ¡rne (asexuÃ¡lne) alebo binÃ¡rne (sexuÃ¡lne). Pri unÃ¡rnej replikÃ¡cii sa zÃºÄastÅuje procesu jeden replikÃ¡tor â rodiÄ, zatiaÄ¾ Äo pri binÃ¡rnej replikÃ¡cii sa zÃºÄastÅujÃº procesu dva replikÃ¡tory â rodiÄia. RodiÄia (rodiÄ) sÃº kvÃ¡zinÃ¡hodne vybranÃ­ z populÃ¡cie v zÃ¡vislosti na ich fitnes (replikÃ¡tory s vÃ¤ÄÅ¡Ã­m fitnes s vÃ¤ÄÅ¡ou pravdepodobnosÅ¥ou vstupujÃº do replikÃ¡cie) a produkujÃº novÃ© replikÃ¡tory â potomkov. Budeme rozliÅ¡ovaÅ¥ tieto tri zloÅ¾ky replikaÄnÃ©ho procesu: 1. selekcia rodiÄov, 2. replikÃ¡cia rodiÄov, priÄom vznikajÃº potomkovia, a 3. nÃ¡vrat potomkov do populÃ¡cie."
361,130,0.43,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","MnozÌina atribuÌtov T A je definovanaÌ ako T A = XâN âªT A(X), kde A(X) = D(X) âª S(X). Pre kazÌdyÌ symbol X â N âª T existuje mnozÌina D(X) â mnozÌina typov dedicÌnyÌch atribuÌtov a mnozÌina S(X) â mnozÌina typov syntetizovanyÌch atribuÌtov. JednotliveÌ atribuÌty budeme zapisovatâ takto. Majme pravidlo p : X0 â X1 X2 X3 ... Xn . Potom hodnotu typu atribuÌtu t, symbolu Xk kde k â 0..n, budeme oznacÌovatâ ako Xk .t Vyhodnotenie atribuÌtov seÌmantickeÌho pravidla p : X0 â X1 X2 X3 ... Xn bude prebiehatâ tak ako je znaÌzorneneÌ na ObraÌzku 5-2. PrÄ±Ìklad 5.2: {i, n, +, â, â}"
369,380,0.43,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ï· DiagnÃ³zu spÃ´sobuje urÄitÃ½ etiologickÃ½ agens (pÃ´vodca nÃ¡kazy). Aj keÄ model umoÅ¾Åuje kardinalitu mnoho-mnoho, zvyÄajne bÃ½va diagnÃ³za vyvolanÃ¡ iba jednÃ½m etiologickÃ½m agens. ï· EtiologickÃ½ agens mÃ´Å¾e byÅ¥ Å¡pecifikovanÃ½ do niekoÄ¾kÃ½ch ÃºrovnÃ­ presnosti â v modeli je hierarchickÃ¡ Å¡truktÃºra etiologickÃ©ho agensu znÃ¡zornenÃ¡ rekurzÃ­vnou relÃ¡ciou. NaprÃ­klad vÃ­rus chrÃ­pky mÃ¡ svoj typ (A, B, ...), subtyp (H1, H5, H5N1, ...) a variant (napr. California 7/2004 â like). ï· Pre diagnÃ³zu mÃ´Å¾u byÅ¥ uvedenÃ© znÃ¡me pramene nÃ¡kazy, faktory prenosu, mechanizmy prenosu, rizikovÃ© faktory a klinickÃ© formy. ï· Pre diagnÃ³zu mÃ´Å¾u byÅ¥ stanovenÃ© typy epidemiologickÃ½ch opatrenÃ­. ï· Na lieÄenie diagnÃ³z, resp. ich prevenciu sÃº urÄenÃ© urÄitÃ© lieky."
190,245,0.43,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"VidÃ­me teda, Å¾e ak chceme zvÃ½Å¡iÅ¥ pravdepodobnosÅ¥ Ãºspechu nÃ¡Å¡ho projektu, plÃ¡novanie musÃ­ tvoriÅ¥ jeho neoddeliteÄ¾nÃº sÃºÄasÅ¥. AvÅ¡ak to neznamenÃ¡, Å¾e plÃ¡novanie priamo Ãºspech zaruÄÃ­. Bez neho je len vÃ½voj komplikovanejÅ¡Ã­ a neistejÅ¡Ã­."
59,614,0.429,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"yt ï«1 ï½ g ï¨ at ,st ï© (12.11b) PrvÃ¡ formula urÄuje nasledujÃºci vnÃºtornÃ½ stav st+1 pomocou prechodovej funkcie f s argumentami akcia at a stav st. Podobne, druhÃ¡ formula (12.10b) urÄuje nasledujÃºci vÃ½sledok yt+1 pomocou prechodovej funkcie g s argumentami akcia at a stav st. DiagramatickÃ¡ reprezentÃ¡cia tÃ½chto dvoch rovnÃ­c je znÃ¡zornenÃ¡ na Obr. 12.12, diagram C. PodobnÃ½m spÃ´sobom mÃ´Å¾eme diagramaticky reprezentovaÅ¥ aj inverznÃ½ systÃ©m, ktorÃ©ho vÅ¡eobecnÃ¡ blokovÃ¡ Å¡truktÃºra je znÃ¡zornenÃ¡ na Obr. 12.14, diagramy A a B. Pomocou dvoch prechodovÃ½ch funkciÃ­ f a g vyjadrÃ­me vÃ½stupy z bloku inverznÃ©ho systÃ©mu at ï½ f ï¨ yt ï«1 ,st ï©"
276,66,0.429,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"5 Smerovanie medzi virtuÃ¡lnymi sieÅ¥ami KeÄÅ¾e virtuÃ¡lne siete VLAN predstavujÃº rozdelenie fyzickej lokÃ¡lnej siete do viacerÃ½ch logickÃ½ch lokÃ¡lnych sietÃ­, adresÃ¡cia na tretej vrstve OSI modelu predstavuje rozdielne podsiete. Na preposielanie komunikÃ¡cie medzi rÃ´znymi IP podsieÅ¥ami je potrebnÃ½ smerovaÄ (resp. smerovacia funkcionalita na viacvrstvovom prepÃ­naÄi â to je ale mimo zÃ¡ber tejto kapitoly). V tejto kapitole si precviÄÃ­me zÃ¡kladnÃº konfigurÃ¡ciu smerovaÄa a ako ho pouÅ¾iÅ¥ na smerovanie medzi viacerÃ½mi VLAN sieÅ¥ami, resp. ako staticky nakonfigurovaÅ¥ cestu do vzdialenej IP podsiete. ZÃ¡kladnÃ¡ konfigurÃ¡cia smerovaÄa prebieha veÄ¾mi podobnÃ½m spÃ´sobom ako v prÃ­pade prepÃ­naÄa, preto poukÃ¡Å¾eme najmÃ¤ na rozdiely, resp. doplnÃ­me prÃ­kazy, ktorÃ© sme zatiaÄ¾ nepouÅ¾Ã­vali. SmerovaÄe, ktorÃ© budeme pouÅ¾Ã­vaÅ¥ (sÃ©ria 2800) sÃº modulÃ¡rne zariadenia (t. j. vieme im dopÄºÅaÅ¥/meniÅ¥ fyzickÃ© rozhrania podÄ¾a potreby a podÄ¾a poÄtu voÄ¾nÃ½ch miest pre zÃ¡suvnÃ© moduly). Ich pamÃ¤Å¥ Flash je externÃ¡ (t. j. je dostupnÃ¡ zvonku, bez potreby otvÃ¡rania obalu zariadenia), a najmÃ¤ preto sa Å¡tartovacia konfigurÃ¡cia nenachÃ¡dza na nej ale v internej pamÃ¤ti nazÃ½vanej NVRAM (Non-Volatile RAM â realizovanÃ¡ ako internÃ¡ Flash pamÃ¤Å¥, resp. v prÃ­pade starÅ¡Ã­ch typov sÃ©rie 2600 ju predstavuje EEPROM â Electrically Erasable Programmable Read-Only Memory). Preto pokiaÄ¾ chceme vymazaÅ¥ Å¡tartovaciu konfigurÃ¡ciu pouÅ¾ijeme jeden z nasledujÃºcich prÃ­kazov."
239,209,0.429,Ãvod do matematickej logiky,"cÌizÌe (q A â q B) â (B â A) je tautoloÌgia. Jedna z najdoÌlezÌitejsÌÄ±Ìch vlastnostÄ±Ì trojhodnotovej logiky je, zÌe v nej neplatÄ±Ì zaÌkon vyluÌcÌenia tretieho. Teda Aâ¨q A nie je tautoloÌgia. PraÌve tento zaÌkon dvojhodnotovej logiky maÌ z roÌznych doÌvodov dostâ odporcov. n-hodnotovaÌ logika n-hodnotovaÌ logika, n > 3, je dâalsÌÄ±Ìm zjemnenÄ±Ìm trojhodnotovej logiky. V n-hodnotovej logike maÌme n pravdivostnyÌch hodnoÌt vyÌrokov:"
59,420,0.429,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Veta 8.1. VÃ½raz ï¨ ï ,ï¡ ï© je argument vtedy a len vtedy, ak rozÅ¡Ã­renÃ¡ podpora ï ï ï»ïï¡ï½ je minimÃ¡lne nekonzistentnÃ¡. DÃ´kaz rozdelÃ­me na dva kroky: (1ï) Nech ï¨ ï ,ï¡ ï© je argument, potom ï je konzistentnÃ¡ mnoÅ¾ina ( ï¨ ï ï ï© ïº ï¨ ï"
195,201,0.428,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"11.4 ExistujÃºce rieÅ¡enia Spomedzi mnohÃ½ch rieÅ¡enÃ­ pre odporÃºÄanie systematickÃ½ch zmien uvedieme prÃ­klad pouÅ¾itia systÃ©mu Sydit [6], ktorÃ½ identifikuje abstraktnÃ½ vzor transformÃ¡cie z prÃ­kladu zadanÃ©ho programÃ¡torom s uvaÅ¾ovanÃ­m jeho kontextu. V Ãºvode kapitoly sme uviedli prÃ­klad zmeny metÃ³dy getLaunchConfigurations (ukÃ¡Å¾ky 11.2 a 11.3). Sydit reprezentuje zdrojovÃ½ kÃ³d metÃ³dy pomocou abstraktnÃ©ho syntaktickÃ©ho stromu, zvlÃ¡Å¡Å¥ pre pÃ´vodnÃº verziu a zvlÃ¡Å¡Å¥ pre upravenÃº. KoreÅom abstraktnÃ©ho syntaktickÃ©ho stromu metÃ³dy je predpis metÃ³dy, postupnÃ© riadky metÃ³dy sa nachÃ¡dzajÃº v potomkoch koreÅa. PodobnÃ½m spÃ´sobom sa potom rozvetvujÃº cykly a podmienky. Sydit porovnÃ¡ stromy a identifikuje medzi nimi rozdiel Îð´ = [ð1 , ð2 , â¦ , ðð ] ako postupnosÅ¥ Ãºprav e syntaktickÃ©ho stromu â operÃ¡cie vloÅ¾enie vrcholu, zmazanie, upravenie alebo presunutie. IdentifikovanÃº transformÃ¡ciu Îð´ nÃ¡sledne Sydit zovÅ¡eobecnÃ­ nahradenÃ­m nÃ¡zvov premennÃ½ch, typov a metÃ³dy vÅ¡eobecnÃ½mi identifikÃ¡tormi, napr. $M1$, $M2$, $V1$, $T1$, $T2$. Tak dokÃ¡Å¾eme transformÃ¡ciu pouÅ¾iÅ¥ aj v inÃ½ch sÃºÄiastkach zdrojovÃ©ho kÃ³du. Na obrÃ¡zku 15 uvÃ¡dzame prÃ­klad identifikovanej transformÃ¡cie vo vÅ¡eobecnom tvare s operÃ¡ciami presunutia, upravenia a vloÅ¾enia. PouÅ¾itie transformÃ¡cie nÃ¡sledne tkvie z automatickej identifikÃ¡cie miest v zdrojovom kÃ³de, ktorÃ© zodpovedajÃº abstraktnÃ©mu syntaktickÃ©mu stromu Ãºpravy a jej aplikÃ¡cie. VÅ¡eobecnÃ© symboly sa zamenia podÄ¾a identifikovanÃ©ho miesta, napr. $T2$ $v2$ = null na ILaunchConfiguration cfg = null."
240,0,0.428,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÅ¡etky prÃ¡va vyhradenÃ©. NijakÃ¡ ÄasÅ¥ textu nesmie byÅ¥ pouÅ¾itÃ¡ na ÄalÅ¡ie Å¡Ã­renie akoukoÄ¾vek formou bez predchÃ¡dzajÃºceho sÃºhlasu autorov alebo vydavateÄ¾stva. Â© RNDr. Anna Bou Ezzeddine, PhD. â Mgr. Jozef TvaroÅ¾ek, PhD. Recenzenti: doc. RNDr. Petr Å aloun, PhD. doc. Ing. SlavomÃ­r Å imoÅÃ¡k, PhD. SchvÃ¡lilo Vedenie Fakulty informatiky a informaÄnÃ½ch technolÃ³giÃ­ STU v Bratislave. ISBN 978â80â227â4865â0"
190,491,0.428,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"reaktÃ­vne stratÃ©gie Â· 53 redukcia neurÄitosti vÃ½sledku projektu Â· 154 refaktoring kÃ³du Â· 44, 239, 271 revÃ­zie a Ãºpravy Â· 109 rezerva v plÃ¡ne Â· 88 rÃ©Å¾ia Â· 47 riadenie konfliktov Â· 52 riadenie kvality Â· 160 riadenie rizÃ­k Â· 202, 229, 230 rieÅ¡enie problÃ©mov Â· 75 riziko Â· 99, 172, 197, 224 informaÄnÃ©ho zahltenia Â· 78 outsourcingu Â· 29, 36 projektu Â· 106 softvÃ©rovÃ½ch plÃ¡nov Â· 106 rizikovÃ© faktory Â· 103 role v tÃ­me Â· 140 rozklad Ãºloh Â· 64 funkcionÃ¡lny Â· 64 fyzickÃ½ Â· 64 rozpis ÄinnostÃ­ Â· 99 rozsah projektu Â· 96, 99, 154 rozvoj pracovnÃ­kov Â· 63, 66 rozvrh projektu Â· 160"
276,43,0.427,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"SSH protokol Å¡ifruje komunikÃ¡ciu, takÅ¾e je potrebnÃ© vygenerovaÅ¥ Å¡ifrovacÃ­ kÄ¾ÃºÄ. Ako nÃ¡zov kÄ¾ÃºÄa sa pouÅ¾ije pomenovanie zariadenia v kombinÃ¡cii s nastavenou domÃ©nou (oba tieto Ãºdaje musia byÅ¥ nakonfigurovanÃ©)."
59,600,0.427,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 12.9. (A) NeurÃ³novÃ¡ sieÅ¥ zostrojenÃ¡ zo 6 vrstiev neurÃ³nov, priÄom prvÃ© tri vrstvy (I1, H1 a O1) reprezentujÃº inverznÃ½ model, ÄalÅ¡ie tri vrstvy (I2, H2 a O2) reprezentujÃº doprednÃ½ model (porovnaj s Obr. 12.7, diagram B). Spoje medzi neurÃ³nmi zo susednÃ½ch vrstiev I1-H1, H1-O1, resp. I2-H2, H2-O2 sÃº realizovanÃ© vÅ¡etkÃ½mi moÅ¾nÃ½mi spÃ´sobmi. (B) ImplementÃ¡cia pomocou neurÃ³novej siete obsahujÃºcej tri skrytÃ© vrstvy neurÃ³nov, na rozdiel od diagramu A sÃº vrstvy O1 a I2 stotoÅ¾nenÃ©. V prvej etape uÄenia sa tohto komplexu sa adaptuje len pravÃ¡ ÄasÅ¥ (zloÅ¾enÃ¡ z vrstiev I2, H2 a 02), priÄom ako vstup do tejto podsiete je dvojica (a,s), poÅ¾adovanÃ½ vÃ½stup je y ïª . V druhej etape budeme predpokladaÅ¥, Å¾e vÃ¡hovÃ© koeficienty z doprednÃ©ho modelu sÃº zafixovanÃ©, adaptujÃº sa len vÃ¡hovÃ© koeficienty z inverznÃ©ho modelu."
369,365,0.427,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,CVIÄENIA 6.1. DoplÅte do modelov na obr. 6.1 a 6.2 evidenciu predpÃ­sanÃ½ch a absolvovanÃ½ch Å¡kolenÃ­ pracovnÃ­kov. 6.2. DoplÅte do modelov na obr. 6.12 a 6.13 evidenciu procesov a ich krokov. 6.3. (Projekt) Navrhnite model vyÅ¡etrovania trestnÃ©ho Äinu.
76,295,0.427,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Zobrazenie rozloÅ¾enia absolÃºtnych poÄetnostÃ­ dÃ¡va histogram na obr. 6-2. Zrejme 5 tried je mÃ¡lo, obrÃ¡zok mÃ¡ malÃº vÃ½povednÃº hodnotu, triedy sÃº prÃ­liÅ¡ Å¡irokÃ©, a tak ich absolÃºtne poÄetnosti prÃ­liÅ¡ zjednoduÅ¡ujÃº rozloÅ¾enie tÃ½ch 150 hodnÃ´t."
240,114,0.427,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 2-2 (rieÅ¡enie) ASCII hodnoty znakov ÄÃ­slic tvoria interval: '0' (48), '1' (49), ..., '9' (57), preto v podmienke mÃ´Å¾eme pouÅ¾iÅ¥ operÃ¡cie >= a <=. Podobne pri znakoch: 'a' (97), ..., 'z' (122) a 'A' (65), ..., 'Z' (90). DoplnenÃ½ program je nasledovnÃ½:"
393,210,0.426,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PredprÃ­prava na strane servera V porovnanÃ­ s predchÃ¡dzajÃºcimi dvomi alternatÃ­vami, pri tejto alternatÃ­ve dosahujeme vyÅ¡Å¡iu presnosÅ¥, keÄÅ¾e zÃ¡znamy webovÃ©ho servera obsahujÃº vÃ½znamne viac informÃ¡ciÃ­ v porovnanÃ­ s proxy serverom a klientom. Vo vÅ¡eobecnosti server predpovedÃ¡ pravdepodobnosÅ¥, Å¾e prÃ­sluÅ¡nÃ¡ webovÃ¡ strÃ¡nka sa neskÃ´r sprÃ­stupnÃ­ a tieto informÃ¡cie doruÄuje potom klientovi. Klient po zÃ­skanÃ­ informÃ¡cie uÄinÃ­ rozhodnutie Äi strÃ¡nku predpripravÃ­ alebo nie."
276,56,0.426,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Backup â blokuje dÃ¡tovÃº komunikÃ¡ciu (t. j. stav blocking), je to port, ktorÃ½m nevedie cesta k root bridge prepÃ­naÄu ale slÃºÅ¾i ako zÃ¡loÅ¾nÃ½ port do urÄitÃ©ho prepÃ­nanÃ©ho segmentu siete (t. j. nebol zvolenÃ½ ako designated)."
393,130,0.426,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Na strÃ¡nku s vysokÃ½m autoritatÃ­vnym skÃ³re odkazuje veÄ¾a strÃ¡nok s vysokÃ½m prepojovacÃ­m skÃ³re a strÃ¡nka s vysokÃ½m prepojovacÃ­m skÃ³re odkazuje na veÄ¾a strÃ¡nok s vysokÃ½m autoritatÃ­vnym skÃ³re. Algoritmus HITS pouÅ¾Ã­va naprÃ­klad vyhÄ¾adÃ¡vacia sluÅ¾ba Clever. Podobne ako v prÃ­pade algoritmu PageRank sÃº nevÃ½hodou HITS vysokÃ© vÃ½poÄtovÃ© nÃ¡roky, lebo prepojovacie a autoritatÃ­vne skÃ³re sa musia poÄÃ­taÅ¥ v cykle."
184,159,0.426,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,Â JednoduchÃ¡ laditeÄ¾nosÅ¥ API rozhrania. Â TransparentnosÅ¥ vzhÄ¾adom na umiestnenie â nÃ¡stroje tretÃ­ch strÃ¡n by nemali zÃ¡visieÅ¥ od konkrÃ©tnej distribuovanej konfigurÃ¡cie systÃ©mu spoliehajÃºcej sa na konkrÃ©tne umiestnenie vybranÃ½ch komponentov. Â OdolnosÅ¥ voÄi zmenÃ¡m platformy â aplikÃ¡cie by mali bez zmien fungovaÅ¥ aj pri zmene API rozhrania alebo pri zmene databÃ¡zy.
195,143,0.426,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"VzorovÃ½ vÃ½poÄet U(f) pre druhÃ½ riadok spodnej Äasti tabuÄ¾ky (vektor vÃ¡h: w = (0,6; 0,3; 0,1)) pre odporÃºÄaÄ kNN. U ( f ) ï½ wb Eb ( f ) ï« wu Eu ( f ) ï« wt Et ( f ) ï½ 0,6 * 0,53 ï« 0,3 * 0,56 ï« 0,1* 0,8 ï½ 0,566 ï» 0,57"
239,65,0.425,Ãvod do matematickej logiky,"KedâzÌe klauzuly obsahujuÌce komplementaÌrne literaÌly nie suÌ nikdy splneneÌ, A je ekvivalentnaÌ s DNF-formulou (q a â§ b â§ q c) â¨ (a â§ q b â§ q c) â¨ (q a â§ b â§ c). Poznamenajme, zÌe pri prepise na KNF-formulu by sme distributÄ±Ìvny zaÌkon aplikovali iba na pravuÌ podformulu A1 . Ako vidno v PrÄ±Ìklade 4.1, najpraÌcnejsÌia je aplikaÌcia distributÄ±Ìvnych zaÌkonov v kroku (d). Pomocou seÌmantickyÌch stromov sa tomuto moÌzÌeme cÌiastocÌne vyhnuÌtâ."
276,139,0.425,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Podobne ako pre IPv4, aj pre IPv6 komunikÃ¡ciu mÃ´Å¾eme nakonfigurovaÅ¥ statickÃ© cesty. Tieto mÃ´Å¾eme nastaviÅ¥ tak, Å¾e pre urÄitÃ½ cieÄ¾ovÃ½ prefix (IPv6 adresa + dÄºÅ¾ka prefixu) Å¡pecifikujeme vÃ½stupnÃ© rozhranie alebo IPv6 adresu next hop smerovaÄa"
40,105,0.424,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"ZÅ¯staÅme jeÅ¡tÄ chvÃ­li u naÅ¡eho virtuÃ¡lnÃ­ho prodavaÄe. PÅedstavme si, Å¾e prodavaÄi prÃ¡vÄ dorazila zÃ¡silka zboÅ¾Ã­ do skladu a on by ji rÃ¡d pÅenesl do svÃ©ho obchodu. Aby to prodavaÄ zvlÃ¡dl, pÅidÃ¡me mu nÃ¡sledujÃ­cÃ­ pravidla: if mam_vec and jsem_v_obchode then poloz_vec if mam_vec then jdi_do_obchodu if jsem_ve_skladu and vidim_vec then vezmi_vec else jdi_do_skladu"
265,157,0.424,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"â¢ nedostatoÄnÃ© zapojenie koncovÃ©ho pouÅ¾Ã­vateÄ¾a (insufficient end-user involvement) â¢ slabÃ¡ komunikÃ¡cia medzi zÃ¡kaznÃ­kmi, vÃ½vojÃ¡rmi, pouÅ¾Ã­vateÄ¾mi a projektovÃ½mi manaÅ¾Ã©rmi (poor communication among customers, developers, users and project managers) â¢ nerealistickÃ© nejasne vyjadrenÃ© ciele projektu (unrealistic or unarticulated project goals) â¢ nepresnÃ© odhady potrebnÃ½ch zdrojov (inaccurate estimates of needed resources) â¢ zle definovanÃ© alebo nekompletnÃ© systÃ©movÃ© poÅ¾iadavky a Å¡pecifikÃ¡cia (badly defined or incomplete system requirements and specifications) â¢ slabÃ© reportovanie stavu projektu (poor reporting of the projectâs status) â¢ slabo manaÅ¾ovanÃ© rizikÃ¡ (poorly managed risks) â¢ pouÅ¾itie nevyzretej technolÃ³gie (use of immature technology) â¢ neschopnosÅ¥ zvlÃ¡dnuÅ¥ zloÅ¾itosÅ¥ projektu (inability to handle the projectâs complexity) â¢ nedÃ´slednÃ© praktiky vÃ½voja softvÃ©ru (sloppy development practices) â¢ politiky zainteresovanÃ½ch strÃ¡n v projekte (napr. absencia vÃ½konnej podpory, alebo politiky medzi zÃ¡kaznÃ­kom a koncovÃ½mi pouÅ¾Ã­vateÄ¾mi) (stakeholder politics) â¢ komerÄnÃ© tlaky (commercial pressures) UvedenÃ© prÃ­Äiny zlyhania softvÃ©ru sÃºvisia predovÅ¡etkÃ½m s manaÅ¾mentom softvÃ©rovÃ©ho projektu."
343,65,0.424,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"V sÃºÄasnosti je rozÅ¡Ã­renÃ½ nÃ¡zor, Å¾e Bitcoin by mohol byÅ¥ nieÄo ako digitÃ¡lna komodita, pretoÅ¾e sa pouÅ¾Ã­va viac-menej ako uchovÃ¡vateÄ¾ hodnoty. Na druhej strane, bankÃ¡ri a regulÃ¡tori sa mÃ´Å¾u priklÃ¡ÅaÅ¥ k nÃ¡zoru, Å¾e Bitcoin je primÃ¡rne nÃ¡stroj pre nelegÃ¡lne aktivity. AvÅ¡ak, dÃ¡ta ukazujÃº, Å¾e len malÃ© percento transakciÃ­ v kryptomene sÃºvisÃ­ s nelegÃ¡lnymi aktivitami. Äo sa tÃ½ka"
184,169,0.424,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Å trukturÃ¡lne pohÄ¾ady na systÃ©m ICDE ObrÃ¡zok 2-29 znÃ¡zorÅuje diagram komponentov API rozhrania systÃ©mu ICDE, ktorÃ½ obsahuje rozhrania a zÃ¡vislosti jednotlivÃ½ch komponentov: Â ICDE NÃ¡stroj tretej strany vyuÅ¾Ã­va rozhranie komponentu ICDE API Klient na volania API pre dopytovanie nad dÃ¡tovÃ½m ÃºloÅ¾iskom, pre zÃ¡pis do ÃºloÅ¾iska a pre prihlÃ¡senie sa na odber udalostÃ­ zverejnenÃ½ch pomocou JMS. SÃºÄasne musÃ­ poskytovaÅ¥ rozhranie pre notifikaÄnÃ© volanie, ktorÃ© vyuÅ¾Ã­va ICDE API Klient pre notifikÃ¡ciu o zverejnenÃ½ch udalostiach. Â ICDE API Klient implementuje klientsku ÄasÅ¥ API rozhrania, pomocou ktorej prekladÃ¡ poÅ¾iadavky nÃ¡strojov tretÃ­ch strÃ¡n na EJB volania serverovej Äasti API. SÃºÄasne transformuje vÃ½sledky EJB volanÃ­ serverovej Äasti a vracia ich nÃ¡strojom tretÃ­ch strÃ¡n. Pomocou zapuzdrenia vÅ¡etkÃ½ch J2EE volanÃ­ tento komponent izoluje nÃ¡stroje tretÃ­ch strÃ¡n od zloÅ¾itosti pouÅ¾Ã­vania aplikaÄnÃ©ho serveru (lokalizÃ¡cia, oÅ¡etrenie vÃ½nimiek a veÄ¾kÃ½ch mnoÅ¾Ã­n vÃ½sledkov). ICDE API Klient sÃºÄasne sprostredkuje prihlÃ¡senie sa nÃ¡strojov tretÃ­ch strÃ¡n na odber udalostÃ­ a notifikÃ¡ciu cez JMS. Â Komponent SluÅ¾by ICDE API sa skladÃ¡ z bezstavovÃ½ch EJB session bean pre prÃ­stup k dÃ¡tovÃ©mu ÃºloÅ¾isku pomocou JDBC. Komponent ZÃ¡pis umoÅ¾Åuje klientom definovaÅ¥ tÃ©mu (topic), do ktorej bude vybranÃ¡ udalosÅ¥ zverejnenÃ¡ pomocou JMS. Â ICDE DÃ¡tovÃ© ÃºloÅ¾isko predstavuje ICDE v2.0 databÃ¡zu. Â JMS predstavuje Å¡tandardnÃº J2EE sluÅ¾bu pre posielanie sprÃ¡v (Java Messaging Service), pomocou ktorej sÃº zverejÅovanÃ© udalosti v danej mnoÅ¾ine tÃ©m. ObrÃ¡zok 2-30 znÃ¡zorÅuje diagram komponentov pre zber dÃ¡t: Â ICDE Klient pre zber dÃ¡t je sÃºÄasÅ¥ou aplikÃ¡cie na strane klienta, priÄom zapuzdruje vÅ¡etku interakciu s J2EE aplikaÄnÃ½m serverom. Komponent zabezpeÄuje zaznamenanie udalostÃ­ na strane klienta pomocou volania SluÅ¾ieb pre zber dÃ¡t cez prÃ­sluÅ¡nÃ© API rozhranie. Â Komponent SluÅ¾by zberu dÃ¡t sa skladÃ¡ z bezstavovÃ½ch EJB session bean, ktorÃ© ukladajÃº informÃ¡cie o udalostiach do dÃ¡tovÃ©ho ÃºloÅ¾iska ICDE. Pre vybranÃ© typy udalostÃ­ komponent zabezpeÄuje ich zverejnenie pomocou sluÅ¾by JMS. Â Zverejnenie udalosti zabezpeÄuje zverejnenie vybranÃ½ch udalostÃ­ (nie vÅ¡etky udalosti sÃº zverejnenÃ©, napr. pohyb myÅ¡ou) do vopred definovanej mnoÅ¾iny tÃ©m, priÄom notifikÃ¡cia na udalosÅ¥ je zaslanÃ¡ kaÅ¾dÃ©mu ICDE API Klient komponentu, ktorÃ½ je prihlÃ¡senÃ½ na jej odber."
94,33,0.424,Sprievodca svetom vedeckÃ©ho publikovania,"1.4.5 Nature, Science a Cell S rozmachom akademickej sfÃ©ry v 19. storoÄÃ­ vznikalo vo svete mnoÅ¾stvo Äasopisov â z najznÃ¡mejÅ¡Ã­ch spomeÅme Nature a Science. Äasopis Nature zaloÅ¾il a jeho prvÃ½m editorom sa stal v roku 1869 astronÃ³m Norman Lockyer, pod zÃ¡Å¡titou Alexandra Macmillana, vydavateÄ¾a a obchodnÃ­ka s knihami v Cambridgi. Lockyer mal pocit, Å¾e veda je fragmentovanÃ¡ a uzatvorenÃ¡ v uÄenÃ½ch spoloÄnostiach, Å¾e jej chÃ½ba spoloÄnÃ© fÃ³rum, ktorÃ© by bolo prÃ­stupnÃ© aj verejnosti. V tom Äase vznikalo mnoho vedeckÃ½ch a popularizaÄnÃ½ch Äasopisov, no len mÃ¡lo z nich preÅ¾ilo prvÃ© roky. Silnou strÃ¡nkou Nature boli Å¾urnalistickÃ© schopnosti jeho tvorcov, zÃ¡ujem o medzinÃ¡rodnÃ© kontakty a odvaha pÃºÅ¡Å¥aÅ¥ sa do vedeckÃ½ch polemÃ­k. Do Äasopisu prispievala skupina vedcov znÃ¡ma liberÃ¡lnymi, progresÃ­vnymi nÃ¡zormi a podporou evoluÄnej teÃ³rie Charlesa Darwina (na ktorÃº sa vo viktoriÃ¡nskom Anglicku znÃ¡Å¡ala kritika zo strany konzervatÃ­vnych bÃ¡dateÄ¾ov). ZakladateÄ¾om tejto skupiny bol anatÃ³m Thomas Henry Huxley, medzi jej najvÃ½znamnejÅ¡Ã­ch Älenov patrili botanik Joseph Dalton Hooker, filozof a antropolÃ³g Herbert Spencer, Äi fyzik John Tyndall. KÄ¾ÃºÄovou podmienkou Ãºspechu Nature bola finanÄnÃ¡ podpora zo strany vydavateÄ¾a, ktorÃ½ dovolil Äasopisu rozvÃ­jaÅ¥ sa napriek tomu, Å¾e prvÃ½ch tridsaÅ¥ rokov fungoval v strate. V 20. storoÄÃ­ vÅ¡ak Nature expandoval do celÃ©ho sveta, popri pÃ´vodnom titule zaÄal vydÃ¡vaÅ¥ aj ÄalÅ¡ie Äasopisy pod hlaviÄkou Nature (naprÃ­klad Nature Physical Sciences, Nature New Biology a Nature Reviews) a v roku 1996 vytvoril webovÃº strÃ¡nku, kde sÃº niektorÃ© ÄlÃ¡nky voÄ¾ne dostupnÃ©. VÃ¤ÄÅ¡ina obsahu je vÅ¡ak stÃ¡le viazanÃ¡ na predplatnÃ©. V roku 2014 zaÄal Nature experimentovaÅ¥ s neÃºplnou verziou otvorenÃ©ho prÃ­stupu â dovoÄ¾uje predplatiteÄ¾om a vybranÃ½m mÃ©diÃ¡m zdieÄ¾aÅ¥ ÄlÃ¡nky s verejnosÅ¥ou, no iba v reÅ¾ime na ÄÃ­tanie, bez moÅ¾nosti stiahnuÅ¥ si text do poÄÃ­taÄa, kopÃ­rovaÅ¥ ho alebo tlaÄiÅ¥. V sÃºÄasnosti Nature odhaduje svoj poÄet ÄitateÄ¾ov na tri miliÃ³ny. Äasopis Science zaloÅ¾il v roku 1880 newyorskÃ½ novinÃ¡r John Michels s finanÄnou podporou Thomasa Edisona. NeskÃ´r na jeho chod prispel aj Alexander Graham Bell, no Äasopis nezÃ­skal dosÅ¥ predplatiteÄ¾ov a v roku 1882 prestal vychÃ¡dzaÅ¥. O rok neskÃ´r ho oÅ¾ivil entomolÃ³g Samuel H. Scudder. InformaÄne pokrÃ½val stretnutia americkÃ½ch vedeckÃ½ch spoloÄnostÃ­, ÄÃ­m zÃ­skal pozornosÅ¥, nie vÅ¡ak financie. V roku 1894 ho za 500 dolÃ¡rov kÃºpil psycholÃ³g James McKeen Cattell. Po vzÃ¡jomnej dohode sa v roku 1900 stal Science oficiÃ¡lnym Äasopisom Americkej asociÃ¡cie pre rozvoj vedy (American Association for the Advancement of Science). V Science publikoval genetik a laureÃ¡t Nobelovej ceny Thomas Hunt Morgan svoje prÃ¡ce o drozofile, Albert Einstein o gravitaÄnej Å¡oÅ¡ovke, aj Edwin Hubble o Å¡pirÃ¡lovÃ½ch hmlovinÃ¡ch (galaxiÃ¡ch). Dnes Science vychÃ¡dza tÃ½Å¾denne a ÄÃ­ta ho pribliÅ¾ne 570 000 Ä¾udÃ­. V priebehu dekÃ¡d umoÅ¾nil vznik celej skupiny vedeckÃ½ch Äasopisov, napr. Science Robotics, Science Immunlogy, Science Signalling. O publikovanie v Science majÃº vedci takÃ½ zÃ¡ujem, Å¾e mÃ´Å¾e uverejniÅ¥ len sedem percent zo zaslanÃ½ch rukopisov. VÃ¤ÄÅ¡ina ÄlÃ¡nkov je prÃ­stupnÃ¡ na zÃ¡klade predplatnÃ©ho, ÄlÃ¡nky publikovanÃ© po roku 1997 sÃº dostupnÃ© na webovej strÃ¡nke Science registrovanÃ½m ÄitateÄ¾om bezplatne jeden rok po uverejnenÃ­ a vybranÃ© ÄlÃ¡nky sÃº zdieÄ¾anÃ© zdarma bez ÄasovÃ©ho embarga. Äasopis Cell, najmladÅ¡Ã­ z trojice âlesklÃ½ch vedeckÃ½ch periodÃ­kâ, zaloÅ¾il v roku 1974 mladÃ½ biolÃ³g Benjamin Lewin pod krÃ­dlami MIT Press (vydavateÄ¾stva MassachusettskÃ©ho technologickÃ©ho inÅ¡titÃºtu). UverejÅoval vÃ½skum z oblasti bunkovej biolÃ³gie, biochÃ©mie,"
265,458,0.423,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Diagram rozmiestnenia je graf (prÃ­klad na Obr. 4.15). Vrcholmi grafu sÃº uzly (angl. node, ktorÃ© sa zakresÄ¾ujÃº ako trojrozmernÃ© kvÃ¡dre). PrepojenÃ© mÃ´Å¾u byÅ¥ rozliÄnÃ½mi vzÅ¥ahmi UML, ÄastÃ¡ je vÅ¡ak asociÃ¡cia (plnÃ¡ neorientovanÃ¡ Äiara), prÃ­padne jej stereotypnÃ© varianty."
138,16,0.423,LATEXovnÃ­k - Å truktÃºra zdrojovÃ©ho sÃºboru,"( ) [ ] { } / |=| â¥=â¥ \ $() [] \{\} / |=\vert \|=\Vert \backslash$ $\lfloor\rfloor \lceil\rceil \langle\rangle$ â â â â â¨ â© â â â $\uparrow \downarrow \updownarrow$ $\Uparrow \Downarrow \Updownarrow$ â â â Na zvÃ¤ÄÅ¡enie pouÅ¾Ã­vame \big, \Big, \bigg, \Bigg (napr. $\Bigg\{$), resp. pÃ¡rovÃ© prÃ­kazy \left..\right s poÅ¾adovanÃ½mi oddeÄ¾ovaÄmi (ak je niektorÃ½ nahradenÃ½ bodkou ., potom sa danÃ¡ strana nevysÃ¡dÅ¾e, napr. $\left[\dfrac12\right.$). â OperÃ¡tory a relÃ¡cie (mÃ´Å¾no negovaÅ¥ pomocou \not, napr. \not= je \ne) â Boxy (pre farebnÃ© boxy nutnÃ½ balÃ­Äek xcolor) $\cdot$ $\times$ Box Å¡irokÃ½ s a vertikÃ¡lne zarovnanÃ½ pos (voliteÄ¾nÃ© â t, c, b), v ktorom mÃ´Å¾e byÅ¥ $\mp$ $\pm$ $\div$ $\bullet$ viacero riadkov aj na niekoÄ¾ko strÃ¡n, definujeme prÃ­kazmi (ekvivalentnÃ½mi): $\star$ $\ast$ $\circ$ $\diamond$ \begin{minipage}[pos]{s} text \end{minipage}, resp. \parbox[pos]{s}{text}. $\cap$ $\lor$ $\dotplus$ JednoriadkovÃ© boxy (riadky sa nelÃ¡mu), text mÃ´Å¾e byÅ¥ zarovnanÃ½ pos vÄ¾avo, vpravo $\cup$ $\sqcup$ â $\sqcap$ $\land$ $\setminus$ alebo centrovanÃ½ (l, c, r) definujeme prÃ­kazmi: $\boxdot$ â¡ $\boxplus$ â $\otimes$ â $\boxtimes$ NeorÃ¡movanÃ½ box. \mbox{text}/\makebox{text} $\oplus$ â $\ominus$ â $\odot$ $\boxminus$ NeorÃ¡movanÃ½ box Å¡Ã­rky s (voliteÄ¾nÃ©). \makebox[s][pos]{text} $\oslash$ â $\bigcirc$ â $\uplus$ â $\triangle$ \fmbox{text}/\framebox{text} OrÃ¡movanÃ½ box. $\ltimes$ â $\rtimes$ â $\nabla$ â $\circledcirc$ â \framebox[s][pos]{text} OrÃ¡movanÃ½ box Å¡Ã­rky s (voliteÄ¾nÃ©). $\wr$ $\ddagger$ â¡ $\dagger$ â  $\circleddash$ â \raisebox{l }{text} Posunie text o hodnotu l vo vertikÃ¡lnom smere. $\Cap$ $\amalg$ â¨¿ $\circledast$ â \scalebox{n}{text} ZvÃ¤ÄÅ¡Ã­/zmenÅ¡Ã­ text l -nÃ¡sobne (kladnÃ© reÃ¡lne ÄÃ­slo). $\Cup$ $\bigcup$ $\bigvee$ $\bigoplus$ N $\sum$ \rotatebox{u}{text} OtoÄÃ­ text o uhol u v stupÅoch (+ alebo â). $\prod$ $\bigcap$ $\bigwedge$ U $\bigotimes$ J \colorbox{fP }{text} FarebnÃ½ box s pozadÃ­m farby fP. $\coprod$ R $\bigsqcup$ H $\biguplus$ RR $\bigodot$ \colorbox{fP }{\color{f }text} NavyÅ¡e zmenÃ­ farbu textu na f. $\oint$ $\iint$ $\iiint$ \fcolorbox{fR}{fP }{text} OrÃ¡movanÃ½ farebnÃ½ box s pozadÃ­m fP, rÃ¡mom fR. $\int$ $\ll$ $\leqq$ $\leq, \le$ â¤ â MatematickÃ½ mÃ³d (v mat mÃ³de sa nesmie vynechaÅ¥ riadok) â $\gg$ $\geqq$ $\geq, \ge$ â¥ MatematickÃ© vÃ½razy a vÃ¤ÄÅ¡ina symbolov sa pÃ­Å¡u v matematickom mÃ³de, t. j. medzi $=$ $\sim$ $\equiv$ â¡ $\neq, \ne$ Ì¸= $..$ (v texte) alebo v matematickÃ½ch prostrediach (novÃ½ odstavec). Niekedy sa $\in$ $\notin$ â $\ni, \owns$ â poÅ¾aduje niektorÃ½ z balÃ­Äkov amsmath, amssymb, amsfonts, amscd, resp. latexsym. $\mid$ $\perp$ $\subset$ â $\subseteq$ â VeÄ¾kosÅ¥ pÃ­sma menÃ­me \scriptscriptstyle \scriptstyle \textstyle $\vdash$ $\dashv$ $\supset$ $\supseteq$ â \displaystyle, pre zlomok $\frac1x$ vyzerajÃº vÃ½stupy postupne x1 x1 x1 . $\prec$ $\succ$ $\preceq$ $\succeq$ $\mathnormal{text}$ Italika. $\mathsf{text}$ Sans serif. $\cong$ $\simeq$ â $\propto$ â $\parallel$ â¥ $\mathrm{text}$ Antikva. $\mathit{text}$ Italika. $\doteq$ = $\asymp$ â $\approx$ â $\backsim$ $\mathbf{text}$ TuÄnÃ¡ antikva. $\mathtt{text}$ Strojopis. $\frown$ â¢ $\smile$ â£ $\models$ |= $\thicksim$ â¼ $\mathcal{TEXT}$ T EX T â kaligrafickÃ© pÃ­smo â iba veÄ¾kÃ© anglickÃ© pÃ­smenÃ¡. $\leftarrow, \gets$ â $\longleftarrow$ ââ $\uparrow$ $\hat{a}$ aÌ $\acute{a}$ aÌ $\ddot{a}$ aÌ $\vec{a}$ $\rightarrow, \to$ â $\longrightarrow$ ââ $\downarrow$ â d $\leftrightarrow$ $\check{a}$ aÌ $\grave{a}$ aÌ $\breve{a}$ aÌ $\widehat{AB}$ â $\longleftrightarrow$ ââ $\Uparrow$ g $\Leftarrow$ $\tilde{a}$ aÌ $\dot{a}$ aÌ $\bar{a}$ aÌ $\widetilde{AB}$ AB â $\Longleftarrow$ â= $\Downarrow$ â $\Rightarrow$ â $\Longrightarrow$ =â $\mapsto$ $\alpha A$ Î±A $\iota I$ $\rho P$ $\Leftrightarrow$ $\longmapsto$ $\nearrow$ $\beta B$ Î²B $\kappa K$ ÎºK $\sigma\Sigma$ $\updownarrow$ $\hookrightarrow$ $\searrow$ $\gamma\Gamma$ $\lambda\Lambda$ Î»Î $\tau T$ $\Updownarrow$ $\rightharpoonup$ $\swarrow$ $\delta\Delta$ $\mu M$ ÂµM $\upsilon\Upsilon$ ÏÎ¥ $\hookleftarrow$ â$\rightharpoondown$ $\nwarrow$ $\varepsilon E$ $\nu N$ $\varphi\Phi$ $\leftharpoonup$ $\Longleftrightarrow$ $\iff$ $\zeta Z$ $\xi\Xi$ $\chi X$ $\leftharpoondown$ $\rightleftharpoons$ (vÃ¤ÄÅ¡ie medzery) $\eta H$ $o O$ $\psi\Psi$ $\dots$ $\ell$ â $\forall$ â $\diamondsuit$ â¢ $\vartheta\Theta$ ÏÎ $\pi\Pi$ $\omega\Omega$ $\cdots$ Â·. Â· Â· $\Re$ $\exists$ â $\heartsuit$ â MatematickÃ© vzorce a funkcie $\ddots$ . . . $\Im$ $\angle$ â  $\clubsuit$ PreddefinovanÃ© funkcie sÃº \sin \cos \tan \cot \arcsin \arccos \arctan \sinh $\vdots$ .. $\wp$ $\surd$ $\spadesuit$ \cosh \tanh \coth \exp \log \ln \lg \min \max \inf \sup \liminf \limsup $\hbar$ $\prime$ â² $\partial$ \det \deg \arg \ker \gcd \hom \dim \lim \Pr. $\imath$ Ä± $\bot$ â¥ $\flat$ $\emptyset$ NovÃ© funkcie sa definujÃº \newcommand\tg{\mathop{\rm tg}\nolimits} $\jmath$ È· $\top$ â¤ $\sharp$ â¯ $\infty$ a pouÅ¾Ã­vajÃº ako preddefinovanÃ©, napr. $\tg{x}$ dÃ¡va tg x. $\aleph$ âµ $\neg$ Â¬ $\lnot$ $\natural$"
276,87,0.423,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Router(config-router)# network <IP adresa siete> IP adresa v tomto prÃ­kaze predstavuje adresu siete, ktorej maska sa urÄÃ­ podÄ¾a adresnej triedy. TakÃ½to prÃ­kaz teda zahrnie do smerovacieho RIP procesu vÅ¡etky rozhrania, na ktorÃ½ch sÃº nastavenÃ© IP adresy z takejto siete. Niekedy vÅ¡ak nechceme (napr. kvÃ´li zvÃ½Å¡eniu bezpeÄnosti smerovania alebo kvÃ´li znÃ­Å¾eniu zahltenia siete zbytoÄnÃ½mi informÃ¡ciami), aby sa niektorÃ½mi rozhraniami posielali smerovacie informÃ¡cie von (napr. ku koncovÃ½m staniciam). V takom prÃ­pade moÅ¾no takÃ©to rozhranie nastaviÅ¥ ako pasÃ­vne. SieÅ¥ takÃ©hoto rozhrania sa stÃ¡le bude ohlasovaÅ¥ v aktualizÃ¡ciÃ¡ch (inÃ½mi rozhraniami zahrnutÃ½mi do smerovacieho procesu), ale tÃ½mto rozhranÃ­m sa RIP sprÃ¡vy nebudÃº posielaÅ¥. Toto moÅ¾no zabezpeÄiÅ¥ nasledujÃºcim prÃ­kazom. Router(config-router)# passive-interface <oznaÄenie rozhrania>"
94,279,0.423,Sprievodca svetom vedeckÃ©ho publikovania,"odbornÃ½mi kniÅ¾niÄno-informaÄnÃ½mi pracovnÃ­kmi, ktorÃ­ sÃº poverenÃ­ spracovanÃ­m dÃ¡t a ÄalÅ¡Ã­mi sÃºvisiacimi ÄinnosÅ¥ami, a zodpovednÃ­ za priebeÅ¾nÃº sprÃ¡vu, formy a ÃºroveÅ sprÃ­stupÅovania obsahu a za rozsah poskytovanÃ½ch sluÅ¾ieb,"
130,546,0.423,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"MetÃ³da podmienenÃ©ho obsahu je realizovateÄ¾nÃ¡ pomocou Ä¾ubovoÄ¾nej z technÃ­k: vkladanie/odstraÅovanie fragmentov, rozÅ¥ahovacÃ­ text, resp. alternatÃ­vy strÃ¡nok. MetÃ³da alternatÃ­vneho obsahu je realizovateÄ¾nÃ¡ jednou z technÃ­k: alternatÃ­vy strÃ¡nok,"
76,419,0.423,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"PloÅ¡nÃ½ obsah plochy vyznaÄenej vÄ¾avo sa rovnÃ¡ (â 1.5). PloÅ¡nÃ½ obsah plochy vyznaÄenej vpravo sa rovnÃ¡: CelkovÃ½ ploÅ¡nÃ½ obsah pod Gaussovou krivkou, mÃ­nus (1.5). VÄaka symetrii sÃº ploÅ¡nÃ© obsahy rovnakÃ©. Preto (â 1.5) = 1 â (1.5). 2.4.5"
135,3,0.422,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Diel 1: SoftvÃ©rovÃ© paradigmy o sÃº to softvÃ©rovÃ© paradigmy? Jedna cesta, ktorÃ¡ by mohla vies k odpovedi, ide cez podrobnejÅ¡ie preskÃºmanie pojmu paradigma. Pojem paradigma nadobudol modernÃ½ (sÃºasnÃ½) obsah najmÃ¤ vaka prÃ¡ci T. Kuhna, v ktorej sa zaoberal paradigmou ako vÃ½sledkom vedeckej revolÃºcie, meniacej nÃ¡had vedeckej komunity prÃ­sluÅ¡nej oblasti na problÃ©my a metÃ³dy rieÅ¡enia prelomovÃ½m spÃ´sobom. UvÃ¡dzame tento vÃ½znam slova paradigma, pretoÅ¾e sa jednoducho v Å¾iadnom vedeckom pojednanÃ­, postavenom na pojme paradigmy, nedÃ¡ dos dobre obÃ­s. To vÅ¡ak neznamenÃ¡, Å¾e to je jedinÃ½ relevantnÃ½ pohad. JednotlivÃ© oblasti poznania asto pouÅ¾Ã­vajÃº pojem paradigma v zmysle, ktorÃ½ je do znanej miery odliÅ¡nÃ½, i ke moÅ¾no nie priamo protireivÃ½. VÃ¤Å¡inou sa pojem paradigma v Å¡peciÃ¡lnych oblastiach poznania pouÅ¾Ã­va v omnoho Å¡peciÃ¡lnejÅ¡om zmysle, neÅ¾ ako sa chÃ¡pe KuhnovskÃ¡ paradigma. Tu uÅ¾ paradigma nie je nutne vÃ½sledkom vedeckej revolÃºcie i prevratu. Paradigma tieÅ¾ nie je (jedinÃ½m) prevlÃ¡dajÃºcim nÃ¡hadom na metÃ³dy rieÅ¡enia problÃ©mov prÃ­sluÅ¡nej oblasti. Pokojne mÃ´Å¾eme hovori o paradigmÃ¡ch v mnoÅ¾nom Ã­sle, nakoko sa v komunite uznÃ¡va viacero dos Å¡pecifickÃ½ch schÃ©m rieÅ¡enia problÃ©mov."
369,335,0.422,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"CVIÄENIA 5.1. PreskÃºmajte, Äi model na obr. 5.1 pokrÃ½va poistenie zamestnancov firmy voÄi pracovnÃ½m Ãºrazom. PoistenÃ­ sÃº iba pracovnÃ­ci vybranÃ½ch pracovnÃ½ch kategÃ³riÃ­. Zamestnanec je poistenÃ½ na Ãºhradu uÅ¡lÃ©ho zÃ¡robku poÄas lieÄby po pracovnom Ãºraze, trvalÃº pracovnÃº neschopnosÅ¥ a Ãºmrtie."
115,188,0.422,Algebra a diskrÃ©tna  matematika,"âkanonickÃ¡â reprezentÃ¡cia Boolovej funkcie, 150, 152 kapacita rezu, 305-307 kapacita spojenia (priepustnosÅ¥), 305 kapacitnÃ¡ sieÅ¥, 305 kardinalita (mohutnosÅ¥), 36, 37, 42, 45, 48, 113, 129, 134 Karnaughove mapy, 164 karteziÃ¡nsky sÃºÄin, 42-46, 53-54, 58, 127 klauzula, 150 â minimÃ¡lna, 168-170 â sÃºÄinovÃ¡, 150, 152, 165-166 â sÃºÄtovÃ¡, 150, 152 â, âpokrytieâ, 167-171 kocka, (n-kocka), 246, 251, 261 kÃ³d Grayov, 246 kÃ³d prefixovÃ½, 285-287, 288 kÃ³dovanie Huffmanove, 286-287 kÃ³dovanie nestratovÃ©, 285 koleso, 251 kombinÃ¡cie, 91, 93, 246 âkombinatorickÃ½ dÃ´kazâ, 91, 92-93 komplement (doplnok) mnoÅ¾iny, 32, 33 â, involutÃ­vnosÅ¥, 147 komplement grafu, 252 komplementy konÅ¡tÃ¡nt, 147 kompletnÃ½ bipartitnÃ½ graf, 233-234, 260-261 kompletnÃ½ graf, 233, 261, 266 komponent grafu, 3, 237-238, 262, 281 kompozÃ­cia relÃ¡ciÃ­, 56-58, 188 kompozicionalita, princÃ­p, 35 komunikaÄnÃ¡ sieÅ¥, 255, 278 komutatÃ­vna â binÃ¡rna operÃ¡cia, 124 â operÃ¡cia, 129, 146, 152, 183 â pologrupa, 127 â grupa, 129, 136-137 komutatÃ­vnosÅ¥, 33, 137, 144"
59,165,0.422,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.16. Priebeh frekvenciÃ­ vÃ½skytu dominantnÃ½ch binÃ¡rnych reÅ¥azcov (16) dÄºÅ¾ky 4. Chemostat bol inicializovanÃ½ 1000 reÅ¥azcami (0010), po 2.5 ï´ 106 ÄasovÃ½ch krokoch dominantnÃ© koneÄnÃ© rieÅ¡enie je reÅ¥azec xfin = (1100), kde real(xopt) = 12/15 a f(12/15) = 0,9755. Toto koneÄnÃ© rieÅ¡enie je blÃ­zke optimÃ¡lnemu rieÅ¡eniu xopt = (1011), kde (xopt) = 11/15 a f(11/15) = 0,9973, ale s âveÄ¾kouâ Hammingovou vzdialenosÅ¥ou d = 3 (v genetickom algoritme tento efekt sa nazÃ½va âHammingov Ãºtesâ). TÃ¡to relatÃ­vne veÄ¾kÃ¡ Hammingova vzdialenosÅ¥ je hlavnÃ½ dÃ´vod preÄo replikÃ¡torovÃ½ algoritmus nie je schopnÃ½ poskytnÃºÅ¥ globÃ¡lne rieÅ¡enie (1011)."
393,80,0.421,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"DefinÃ­cia: WebovÃ© strÃ¡nky a a b sÃº nepriamo asociovanÃ© cez mnoÅ¾inu M (mediÃ¡tor), ak sÃº splnenÃ© nasledujÃºce podmienky: Podpora ( {a,b} ) < ts, Podpora ( {a} âª M ) â¥ tf, ZÃ¡vislosÅ¥ (a,M) â¥ td, ZÃ¡vislosÅ¥ (b,M) â¥ td (Brijs et al., 1999, Brin et al., 1997a, Tan & Kumar, 2000b, Tan et al., 2002). ZÃ¡vislosÅ¥ (x,M) mÃ´Å¾e byÅ¥ prijateÄ¾nÃ¡ objektÃ­vna jednotka, ts, tf, td sÃº urÄenÃ© hranice zÃ¡vislosti a podpory."
361,59,0.421,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Je zrejmeÌ, zÌe analogicky ku gramatikaÌm (ktoreÌ retâazce generovali z pocÌiatocÌneÌho symbolu), budeme hovoritâ zÌe konecÌnyÌ automat M akceptuje retâazec w ak bude existovatâ postupnostâ relaÌciÄ±Ì zo zacÌiatocÌnej do koncovej konfiguraÌcie: Î´(q0 , w) `â"
43,57,0.421,Objektovo orientovanÃ© programovanie v C++,"â¢ V C aj v C++ mÃ´Å¾u existovaÅ¥ smernÃ­ky s bliÅ¾Å¡ie neurÄenÃ½m typom, t. j. void*. Rozdiel je v tom, Å¾e kÃ½m v C mÃ´Å¾eme urobiÅ¥ priradenie medzi smernÃ­kom s konkrÃ©tnym typom a takÃ½mto netypovÃ½m smernÃ­kom, v C++ to moÅ¾nÃ© nie je. NetypovÃ½ smernÃ­k void* vracia naprÃ­klad funkcia malloc, ktorÃ¡ sa pouÅ¾Ã­va na dynamickÃº alokÃ¡ciu pamÃ¤te. V C je potom moÅ¾nÃ½ takÃ½to zÃ¡pis int *smernik = malloc(sizeof(int));"
361,155,0.421,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Gramatiku PG4 budeme dâalej upravovatâ tak, aby sme mohli prekladatâ aj aritmetickyÌ vyÌraz obsahujuÌci roÌzne typy operandov. Potrebujeme zaviestâ funkciu fplus a fnasobenie , ktoreÌ, ak majuÌ parametre rovnakeÌ typy, vraÌtia tento typ. Ak tieto funkcie dostanuÌ ako parametre roÌzne typy, ich uÌlohou je vraÌtitâ takyÌ typ, ktoryÌ umozÌnÄ±Ì vykonanie aritmetickej operaÌcie. NaprÄ±Ìklad pre int a float moÌzÌu vraÌtitâ typ float. P G5 = ({E, T, F }, {+, â, (, ), id}, {+, â, T A, DR}, R, E) AtribuÌty a ich priradenie k symbolom prekladovej gramatiky PG5: â adr â udaÌva adresu, kde je ulozÌenyÌ danyÌ operand. Priradenie k symbolom PG5: â¦ id â vstupnyÌ symbol â jeho adresa je v tabulâke symbolov (inak v atribuÌtovanom vstupnom retâazci)"
94,235,0.421,Sprievodca svetom vedeckÃ©ho publikovania,"KvÃ´li konzistentnosti opÃ¤Å¥ prebieha hodnotenie titulu dlhÅ¡Ã­ Äas, Å¡tandardnÃ¡ doba trvania je zhruba 2 roky. Viac informÃ¡ciÃ­ na strÃ¡nkach spoloÄnosti Clarivate Analytics101, kde mÃ´Å¾u zÃ¡ujemcovia nÃ¡jsÅ¥ aj Å¾iadosÅ¥ o zaradenie Äasopisu do Web of Science102. V roku 2015 Thomson Reuters (dnes Clarivate Analytics) zriadil novÃ½ citaÄnÃ½ index, Emerging Sources Citation Index (ESCI), do ktorÃ©ho sa zaraÄujÃº recenzovanÃ© Äasopisy regionÃ¡lneho vÃ½znamu a Äasopisy z novo vznikajÃºcich vednÃ½ch odvetvÃ­. PovaÅ¾uje sa za akÃ½si zoznam ÄakateÄ¾ov na seriÃ³znu kontrolu pri vstupe do WoS-Core Collection. Pre Äasopis je Ä¾ahÅ¡ie dostaÅ¥ sa do ESCI, Äo vÅ¡ak mÃ¡ za nÃ¡sledok, Å¾e okrem poctivÃ½ch Äasopisov na vzostupe sa tam nÃ¡jdu aj tituly niÅ¾Å¡ej kvality. PublikÃ¡cie zaraÄovanÃ© do bibliometrickÃ½ch databÃ¡z podliehajÃº prÃ­snej kontrole za ÃºÄelom udrÅ¾ania vysokej kvality vedeckÃ©ho obsahu. KaÅ¾dÃ½ titul podlieha vÃ½berovÃ©mu procesu, kedy sa podrobuje hodnoteniu podÄ¾a celÃ©ho radu kritÃ©riÃ­. Å½iadny faktor sa nehodnotÃ­ samostatne, redakcia pozerÃ¡ na publikÃ¡ciu z viacerÃ½ch uhlov. V prÃ­pade, Å¾e publikÃ¡cia nesplnÃ­ vstupnÃ© kritÃ©riÃ¡, redakcia databÃ¡zy upovedomÃ­ vydavateÄ¾a o negatÃ­vnom vÃ½sledku a poskytne mu"
265,17,0.42,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"3.0.20 Vysvetlite rozdiel medzi inkrementÃ¡lnym modelom, iteratÃ­vnym modelom a modelom agilnÃ©ho vÃ½voja softvÃ©ru z pohÄ¾adu stavu fungujÃºceho softvÃ©ru. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 3.0.21 AkÃ½m modelom Å¾ivotnÃ©ho cyklu vÃ½voja softvÃ©ru sa v sÃºÄasnosti v praxi vyvÃ­ja najviac? OdpoveÄ struÄne zdÃ´vodnite. . . . . . . . . . 155"
236,152,0.42,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"V tomto nÃ¡vode budÃº vysvetlenÃ© len zÃ¡kladnÃ© prÃ­kazy na tvorbu registrov. HlbÅ¡ie znalosti zÃ­skate z kniÅ¾ky The LATEX Companion [3]. Aby sa samotnÃ½ register mohol vytvÃ¡raÅ¥, v hlaviÄke musÃ­ byÅ¥ natiahnutÃ½ balÃ­k makeidx: \usepackage{makeidx}"
276,85,0.42,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"adresnej triedy (napr. 172.16.0.0/22, 172.16.10.0/24, 172.16.100/28 sÃº podsiete tej istej IP siete podÄ¾a adresnej triedy â t. j. 172.16.0.0/16) budÃº ohlasovaÅ¥ len pod jednÃ½m zÃ¡znamom. To mÃ´Å¾e spÃ´sobiÅ¥ problÃ©m pokiaÄ¾ takÃ½mto spÃ´sobom budÃº ohlasovaÅ¥ tÃº istÃº IP sieÅ¥ viacerÃ© smerovaÄe. TakÅ¾e v prÃ­pade, Å¾e pouÅ¾Ã­vame takÃ©to podsiete"
240,88,0.42,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"InicializÃ¡ciu premennÃ½ch na hodnotu 0 sme mohli docieliÅ¥ aj jednoduchÅ¡ie (bez explicitnÃ©ho priradenia hodnoty 0.0 do kaÅ¾dej premennej) a to tak, Å¾e by sme definÃ­ciu premennÃ½ch presunuli pred funkciu main(), napr. na riadok 2, ÄÃ­m by sa stali globÃ¡lne, ktorÃ© sÃº pri spustenÃ­ programu automaticky vynulovanÃ©."
184,48,0.419,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Å kÃ¡lovateÄ¾nosÅ¥ (scalability) opisuje ako dobre rieÅ¡enie konkrÃ©tneho problÃ©mu funguje v prÃ­pade, Å¾e sa veÄ¾kosÅ¥, resp. zloÅ¾itosÅ¥ problÃ©mu zvÃ¤ÄÅ¡uje. V kontexte architektÃºry Å¡kÃ¡lovateÄ¾nosÅ¥ opisuje ako dobre sa danÃ½ nÃ¡vrh architektÃºry vyrovnÃ¡ s narastajÃºcimi poÅ¾iadavkami na niektorÃº ÄasÅ¥ systÃ©mu. KonkrÃ©tna poÅ¾iadavka na Å¡kÃ¡lovateÄ¾nosÅ¥ systÃ©mu vyÅ¾aduje definovanie toho, Äo bude narastaÅ¥: Â zÃ¡Å¥aÅ¾ poÅ¾iadavkami (request load), Â poÄet sÃºÄasnÃ½ch spojenÃ­ (simultaneous connections), Â veÄ¾kosÅ¥ dÃ¡t (data size), Â rozsah nasadenia (deployment)."
239,179,0.419,Ãvod do matematickej logiky,"pricÌom miesto â by sme chceli pÄ±Ìsatâ P (z) â¢ P (z), cÌo je axioÌma (I). ProbleÌm je v tom, zÌe z P (z) â¢ P (z) pomocou (âR) nemoÌzÌeme odvoditâ P (z) â¢ (ây)P (y), pretozÌe z je volânaÌ aj vo formule nalâavo od â¢. Tento postup bol teda neuÌspesÌnyÌ. DoÌvodom bolo, zÌe uzÌ druhaÌ formula â¢ P (z) â (ây)P (y) nie je vzÌdy pravdivaÌ. Potrebujeme preto vymyslietâ soï¬stikovanejsÌÄ±Ì postup. V nasledujuÌcom doÌkaze sme odvodenie sekventu â¢ (âx) P (x) â (ây)P (y) rozdelili na dve cÌasti. Najprv sme tento sekvent odvodili za predpokladu, zÌe neplatÄ±Ì (ây)P (y), a potom za predpokladu,zÌe (ây)P (y) platÄ±Ì. Teda sme odvodili sekventy â¢ (ây)P (y), (âx) P (x) â (ây)P (y) a (ây)P (y) â¢ (âx) P (x) â (ây)P (y) kazÌdyÌ zvlaÌsÌtâ a vyÌslednuÌ formulu sme dostali pouzÌitÄ±Ìm pravidla (Cut). P (z) â¢ P (z)"
184,381,0.419,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"PrÃ­padovÃ¡ Å¡tÃºdia V tejto Äasti bude popÃ­sanÃ¡ architektÃºra dvoch vyhÄ¾adÃ¡vacÃ­ch agentov rozÅ¡Ã­renÃ½ch o dodatoÄnÃº analÃ½zu stiahnutÃ½ch strÃ¡nok. PrvÃ½ agent Competitive Intelligence Spider (Chen, 2002) (skrÃ¡tene CI Spider) je vyhÄ¾adÃ¡vacÃ­ agent, ktorÃ½ zbiera strÃ¡nky v reÃ¡lnom Äase z pouÅ¾Ã­vateÄ¾om Å¡pecifikovanÃ½ch web serverov a vykonÃ¡va nad nimi indexovanie a kategorizÃ¡ciu tak, aby poskytol celkovÃ½ prehÄ¾ad danÃ©ho web servera. DruhÃ½ nÃ¡stroj je Meta Spider (Chen, 2001). Ten funguje podobne ako CI Spider, ale namiesto prehÄ¾adÃ¡vania konkrÃ©tnej strÃ¡nky do Å¡Ã­rky sa pripÃ¡ja na vyhÄ¾adÃ¡vacÃ­ stroj na internete a integruje takto zÃ­skanÃ© vÃ½sledky. Na obrÃ¡zku 5-7 je zobrazenÃ¡ spoloÄnÃ¡ architektÃºra pre CI Spider a Meta Spider. Å tyri hlavnÃ© Äasti sÃº pouÅ¾Ã­vateÄ¾skÃ© rozhranie, internetovÃ½ pavÃºk, Arizona noun phaser, samorganizujÃºca mapa (SOM). Tieto Äasti spolupracujÃº pri hÄ¾adanÃ­ na webe a na analÃ½ze. Arizona noun phaser (Tolle, 2000) je indexovacÃ­ nÃ¡stroj pre indexovanie kÄ¾ÃºÄovÃ½ch frÃ¡z, ktorÃ© sa nachÃ¡dzajÃº v kaÅ¾dom dokumente zozbieranom z webu pomocou internetovÃ½ch pavÃºkov. NÃ¡stroj vyberÃ¡ z dokumentov na zÃ¡klade jazykovÃ©ho znaÄkovania a jazykovÃ½ch pravidiel frÃ¡zy obsahujÃºce podstatnÃ© menÃ¡. SOM pouÅ¾Ã­va umelÃº neurÃ³novÃº sieÅ¥ pre automatickÃ© zhlukovanie webovÃ½ch strÃ¡nok do rÃ´znych oblastÃ­ dvojrozmernej mapy. KaÅ¾dÃ½ dokument je reprezentovanÃ½ pomocou vstupnÃ©ho vektora kÄ¾ÃºÄovÃ½ch slov a nÃ¡sledne je vytvorenÃ¡ vÃ½stupnÃ¡ dvojrozmernÃ¡ mrieÅ¾ka. Po natrÃ©novanÃ­ siete sÃº do nej posielanÃ© dokumenty a tieto sÃº rozdelenÃ© do zhlukov. Ku kaÅ¾dej oblasti je pridelenÃ© pomenovanie, Äo je vÃ½raz, ktorÃ½ najpresnejÅ¡ie reprezentuje zhluk dokumentov v danej oblasti. DÃ´leÅ¾itejÅ¡ie koncepty pokrÃ½vajÃº vÃ¤ÄÅ¡iu oblasÅ¥ a podobnÃ© koncepty sÃº zoskupenÃ© blÃ­zko seba. VÃ½slednÃ¡ mapa je zobrazenÃ¡ v pouÅ¾Ã­vateÄ¾skom rozhranÃ­, priÄom si pouÅ¾Ã­vateÄ¾ mÃ´Å¾e pozrieÅ¥ dokumenty v jednotlivÃ½ch oblastiach. Pre porovnanie vlastnostÃ­ agentov CI Spider a Meta Spider boli vykonanÃ© dva experimenty, ktorÃ½ch sa zÃºÄastnilo 30 osÃ´b. V prvom experimente bol porovnÃ¡vanÃ½ CI Spider so sluÅ¾bou Lycos a manuÃ¡lnym vyhÄ¾adÃ¡vanÃ­m na serveri. VÃ½sledky"
76,321,0.419,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Odhad 2 Ì sa realizuje hodnotou 2ï1.18 = 2.36. Tomuto odhadu nedÃ´verujeme, pretoÅ¾e najvÃ¤ÄÅ¡Ã­ Ãºdaj sa rovnÃ¡ 2.4 a je zrejmÃ©, Å¾e ï± nemÃ´Å¾e byÅ¥ menÅ¡ie ako niektorÃ© . DruhÃ½ odhad (zatiaÄ¾ neupravovanÃ½), dÃ¡va hodnotu 2.4. Tento konkrÃ©tny odhad mÃ´Å¾eme povaÅ¾ovaÅ¥ (zatiaÄ¾ laicky a len v tejto situÃ¡cii) za lepÅ¡Ã­. Samozrejme, cÃ­time, Å¾e je nutnÃ© formulovaÅ¥ vlastnosti, ktorÃ© mÃ¡ maÅ¥ dobrÃ½ odhad (keÄ naÅ nazerÃ¡me ako na odhadovaciu Å¡tatistiku). 7.1.3 PrÃ­klad. Predpokladajme, Å¾e konkrÃ©tnou technolÃ³giou vyrÃ¡banÃ© elektronickÃ© komponenty majÃº Å¾ivotnosÅ¥, ktorÃº modelujeme exponenciÃ¡lnym rozdelenÃ­m Exp(ï¬), v ktorom parameter ï¬ nie je znÃ¡my. Z celkovej produkcie nÃ¡hodne vyberieme 20 vÃ½robkov a na zÃ¡klade merania ich Å¾ivotnostÃ­, t. j. na zÃ¡klade nameranÃ½ch hodnÃ´t = 855, = 1048, â¦, = 1792, chceme odhadnÃºÅ¥ a) strednÃº hodnotu Å¾ivotnosti, b) pravdepodobnosÅ¥ toho, Å¾e Å¾ivotnosÅ¥ (nÃ¡hodne vybratÃ©ho) vÃ½robku prekroÄÃ­ 1200 hodÃ­n. RieÅ¡enie. Nech veliÄina predstavuje Å¾ivotnosÅ¥ vyrÃ¡banÃ½ch vÃ½robkov. PodÄ¾a predpokladu ~ Exp(ï¬) a v bode (a) chceme odhadnÃºÅ¥ E( ). Z ÄlÃ¡nku 6.3 vieme, Å¾e odhadom strednej hodnoty E( ) je vÃ½berovÃ½ priemer Ì . Ak napr. z danÃ½ch 20 dÃ¡t sa vÃ½berovÃ½ priemer realizuje hodnotou 1243, tak za odhad E( ) vezmeme 1243. SituÃ¡cia je trochu inÃ¡ ako v prÃ­klade 7.1.2, kde iÅ¡lo priamo o odhad parametra. Teraz ide o odhad E( ) a z kapitoly 4 vieme, Å¾e E( ) = . To znamenÃ¡, Å¾e odhadovaÅ¥ E( ) znaï¬"
196,102,0.419,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,\frontmatter zabezpecÌÃ­ cÌÃ­slovanie strÃ¡n malÃ½mi rÃ­mskymi cÌÃ­slicami a neocÌÃ­slovanÃ© kapitoly. PrÃ­kaz \mainmatter vynuluje pocÌÃ­tadlo strÃ¡n a zacÌne cÌÃ­slovatâ od jednotky. PrÃ­kaz \backmatter prestane cÌÃ­slovatâ kapitoly.
367,54,0.419,CESTA K OTVORENEJ VEDE,"Zdroj: Produire des donnÃ©es FAIR. V DzalÃ© Yeumo, E., LâHostis, D., Cocaud, S. Gestion et partage des donnÃ©es scientifiques. INRA [Internet]. 09.08.2018 [verzia z 15. mÃ¡ja2020]. DostupnÃ© na https://www6.inrae.fr/datapartage/Produire-des-donnees-FAIR"
122,26,0.418,Modelovanie softvÃ©ru,"2.5 PrÃ­pad pouÅ¾itia nie je opis pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania Predstavme si situÃ¡ciu, Å¾e obchodnÃ­k eviduje zÃ¡kazky v Exceli s pripravenou podporu na Ãºrovni sumÃ¡rnych vÃ½poÄtov a pod. Aj keÄ takÃ¡to âimplementÃ¡ciaâ nie je Ãºplne"
135,335,0.418,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"4.3.2 .NET DruhÃ½m vÃ½znamnÃ½m vÃ½vojovÃ½m rÃ¡mcom je platforma .NET z dielne firmy Microsoft. Ide o distribuovanÃ½ architektonickÃ½ koncept hostenia aplikÃ¡ciÃ­ v sieovom (internetovom) prostredÃ­. Platforma .NET predstavuje vÃ½vojovÃ© a podpornÃ© softvÃ©rovÃ© prostredie zaloÅ¾enÃ© na operanom systÃ©me Windows a programovacÃ­ch jazykoch fy. Microsoft. Fundamentmi rÃ¡mca sÃº kniÅ¾nica BCL (Base Class Library) a spolonÃ© jazykovÃ© prostredie pre vykonÃ¡vanie programu (angl. Common Language Runtime; CLR). BCL je zÃ¡kladnÃ¡ kniÅ¾nica rÃ¡mca a poskytuje rozsiahle mnoÅ¾stvo funkciÃ­ zah ajÃºc pouÅ¾Ã­vateskÃ© rozhranie, jednoduchÃº grafiku, prÃ­stup k dÃ¡tam, databÃ¡zovÃ© spojenie, kryptografiu, numerickÃ© algoritmy, sieovÃº komunikÃ¡ciu a pod. CLR definuje prostredie pre vykonÃ¡vanie programovÃ©ho kÃ³du. Ide o implementÃ¡ciu Å¡tandardu CLI (Common Language Infrastructure), na ktorej sa vykonÃ¡va forma bajtovÃ©ho kÃ³du CIL (Common Intermediate Language). VÃ½vojÃ¡ri tak majÃº moÅ¾nos napÃ­sa programovÃ½ kÃ³d v ubovonom z podporovanÃ½ch jazykov. Poas kompilÃ¡cie kompilÃ¡tor skompiluje takÃ½to kÃ³d do bajtovÃ©ho kÃ³du CIL. Poas vykonÃ¡vania programu, tzv. âprÃ¡ve-naaskompilÃ¡torâ (angl. just-in-time compiler) CLR premenÃ­ kÃ³d CIL do pÃ´vodnÃ©ho kÃ³du operanÃ©ho systÃ©mu (pozri obrÃ¡zok 4-6)."
239,16,0.418,Ãvod do matematickej logiky,"TotizÌ: â ak xi = 1, tak (1) tvrdÄ±Ì: Î½(pi ) = 1 praÌve vtedy, kedâ Î½(pi ) = 1; â ak xi = 0, tak (1) tvrdÄ±Ì: Î½(q pi ) = 1 praÌve vtedy, kedâ Î½(pi ) = 0. Je zrejmeÌ, zÌe tieto tvrdenia (pre xi = 1, aj xi = 0) suÌ pravdiveÌ, preto (1) platÄ±Ì. V dâalsÌom dokaÌzÌeme, zÌe"
122,155,0.418,Modelovanie softvÃ©ru,"prechod (medzi stavmi), 66 znaÄenie, 68 invariant, 74 predmet (subject), 23 pri dedenÃ­, 76 predpoklady a dÃ´sledky pri operÃ¡ciÃ¡ch, 74 kolaborÃ¡cia pri prekonÃ¡vanÃ­ operÃ¡ciÃ­, 76 ako realizÃ¡cia prÃ­padu pouÅ¾itia, 31 pri prÃ­padoch pouÅ¾itia, 5 medzi komponentmi, 62 v algebraickej Å¡pecifikÃ¡cii, 81 kombinovanÃ½ fragment (combined fragment), preÅ¡pecifikÃ¡cia, 79 28, 70 prÃ­pad pouÅ¾itia, 4 komponent, 57 a koncovÃ½ pouÅ¾Ã­vateÄ¾, 6 port), 59 a pouÅ¾Ã­vateÄ¾skÃ© rozhranie, 6 ÄasÅ¥ (part), 59 alternatÃ­vny tok, 13 kompozitnÃ¡ agregÃ¡cia, 39 bez rozlÃ­Å¡enia tokov, 4 kompozitnÃ¡ Å¡truktÃºra, 57 CRUD, 19 kompozÃ­cia histÃ³ria, 32 pozri kompozitnÃ¡ agregÃ¡cia notÃ¡cia, 17, 32 nÃ¡zov, 5 Liskovej princÃ­p substitÃºcie, 76 podtok, 9 predpoklady a dÃ´sledky, 5 ModelâViewâController rozÅ¡Ã­renie (extend), 15 pozri MVC technika, 3 modelovanie vlastnosti (feature modeling), zahrnutie (include), 10 transformÃ¡cia na zarnutie, 17 a UML, 88 zovÅ¡eobecnenie ÃºÄastnÃ­kov, 21 konfigurovanie, 87 zÃ¡kladnÃ½ MVC, 40 ÃºÄastnÃ­k, 5 a Unified Process, 43 nÃ¡vrhovÃ© vzory, 41 nÃ¡jdenÃ¡ sprÃ¡va (angl. found message), 71 nÃ¡sobnosÅ¥ (multiplicity), 36 pri agregÃ¡cii, 36 pri atribÃºte, 39 Object Constraint Language pozri OCL Observer uplatnenie, 43 v MVC, 41 OCL, 75 kontext vÃ½razu, 77 parametrizovanÃ¡ trieda pozri Å¡ablÃ³na triedy , 57 parametrizovanÃ½ balÃ­k, 90 parametrizÃ¡cia, 89 podmienka (condtition), 68"
190,74,0.418,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Äasto sa pouÅ¾Ã­vajÃº aj nÃ¡zvy funkÄnÃ½ a dysfunkÄnÃ½ konflikt. FunkÄnÃ½ konflikt, ktorÃ½ prinÃ¡Å¡a pozitÃ­vne vÃ½sledky mÃ´Å¾e Ä¾ahko eskalovaÅ¥ do dysfunkÄnÃ©ho konfliktu, ktorÃ½ rozruÅ¡Ã­ vzÅ¥ahy, naruÅ¡Ã­ pracovnÃ½ proces. Tieto poznatky nÃ¡m dÃ¡vajÃº silnÃº motivÃ¡ciu, preÄo by mal byÅ¥ konflikt vÅ¾dy riadenÃ½."
393,469,0.418,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Oddelenie vÅ¡eobecnÃ½ch ÄastÃ­ vzoru pri transparentnej skladbe Rozdiel medzi bezpeÄnou a transparentnou skladbou je v umiestnenÃ­ definÃ­ciÃ­ metÃ³d spojenÃ½ch s kontajner manaÅ¾mentom. V prÃ­pade transparentnej skladby sÃº metÃ³dy definovanÃ© uÅ¾ v triede Component. MetÃ³dy sÃºvisiace s kontajner manaÅ¾mentom musia byÅ¥ implementovanÃ© v kaÅ¾dom liste a tieÅ¾ v triede Composite. V tomto prÃ­pade uÅ¾ trieda Component obsahuje vÅ¡eobecnÃ© Äasti vzoru, ktorÃ© sÃº v podobe definÃ­cie metÃ³d pre manaÅ¾ment obsahu kontajneru. Od triedy Component dedia Äalej triedy Composite a jednotlivÃ© Leaf. NajmÃ¤ z hÄ¾adiska jednotlivÃ½ch Leaf je vhodnÃ© definovaÅ¥ prvotnÃ© implementÃ¡cie metÃ³d sÃºvisiacich s manaÅ¾mentom obsahu kontajnera uÅ¾ v triede Component. V triedach Leaf potom nemusÃ­ byÅ¥ oÅ¡etrovanÃ½ problÃ©m s metÃ³dami kontajner manaÅ¾mentu. PrvotnÃ¡ implementÃ¡cia metÃ³d mÃ´Å¾e byÅ¥ realizovanÃ¡ na rÃ´znej Ãºrovni od generovania vÃ½nimky, cez nÃ¡vrat nulovej hodnoty NULL aÅ¾ po prÃ¡zdne telo metÃ³dy."
130,535,0.418,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PoÄas toho, ako pouÅ¾Ã­vateÄ¾ pracuje so systÃ©mom sa tento nachÃ¡dza vo viacerÃ½ch stavoch v zÃ¡vislosti od toho, o akÃ½ druh interakcie ide. Tieto stavy opÃ­sali Jungmann a Paradies (1997), neskÃ´r boli mierne modifikovanÃ© (Koch, 2000). UvedenÃ© sÃº na obrÃ¡zku 9-1."
276,4,0.418,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"PouÅ¾Ã­vateÄ¾skÃ½ reÅ¾im â poskytuje obmedzenÃ© mnoÅ¾stvo prÃ­kazov, ktorÃ© umoÅ¾ÅujÃº zistiÅ¥ stav zariadenia, ale nezmenia jeho konfigurÃ¡ciu. Identifikuje ho zaÄiatok riadku (tzv. prompt) Hostname> (kde Hostname je pomenovanie zariadenia, pokiaÄ¾ nie je nakonfigurovanÃ©, tak sa pouÅ¾ije predvolenÃ© oznaÄenie Switch, prÃ­padne Router)."
130,157,0.417,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrenositeÄ¾Objekt s moÅ¾nosÅ¥ou modifikÃ¡cie dÃ¡t â pri tomto prÃ­stupe musÃ­ byÅ¥ implementovanÃ¡ porovnÃ¡vacia metÃ³da pre identifikÃ¡ciu zmenenÃ½ch atribÃºtov, taktieÅ¾ musÃ­ byÅ¥ implementovanÃ½ mechanizmus pre rieÅ¡enie konfliktov pri n klientoch."
59,406,0.417,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ï¨ p ï q ï© ï ï¨ q ï r ï© ï ï ï¨ p ï r ï© , ak sa nÃ¡m podarÃ­ ukÃ¡zaÅ¥, Å¾e prÃ­sluÅ¡nÃ© sÃ©mantickÃ© tablo mÃ¡ vÅ¡etky vetvy uzavretÃ©, potom platÃ­ relÃ¡cia ï» p ï q,q ï rï½ ï¨ p ï r ï© , pozri Obr. 7.3. PrÃ­klad 7.6. Pomocou sÃ©mantickÃ©ho tabla budeme hÄ¾adaÅ¥ zÃ¡ver z teÃ³rie ï ï½ ï» p ï q, p ï rï½ , t. j. budeme rieÅ¡iÅ¥ relÃ¡ciu ï ï½ ï» p ï q, p ï rï½ . VÃ½sledky sÃº znÃ¡zornenÃ© na Obr. 7.4, potom teÃ³ria ï ï½ ï» p ï q, p ï rï½ mÃ¡ Å¡tyri rÃ´zne interpretÃ¡cie â modely, pre ktorÃ© sÃº predpoklady teÃ³rie pravdivÃ© ï´1 ï½ ï¨ p 0 ,q ?, r ?ï©"
196,133,0.417,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,RieÅ¡enÃ­m je pouÅ¾itie balÃ­ka dirtytalk [10] v preambule dokumentu a nÃ¡sledne prÃ­kazom \say{<text v ÃºvodzovkÃ¡ch>}. Je moÅ¾nÃ© aj vnÃ¡ranie. AvÅ¡ak ide o anglickÃ© âÃºvodzovkyâ a jednoduchÃ© âÃºvodzovkyâ. slovenskÃ© âÃºvodzovkyâ rozpoznÃ¡ prÃ­kaz \textquote{} alebo prostredie \begin{displayquote} ... \end{displayquote} balÃ­ka csquotes [9]. AlternatÃ­vou je prÃ­kaz \uv{<text v ÃºvodzovkÃ¡ch>}.
41,128,0.417,InformaÄnÃ© vzdelÃ¡vanie,"Obr 17. TRELLO [11] XMIND- je zaujÃ­mavÃ½ pre tÃ½ch, ktorÃ½ radi rozmÃ½Å¡Ä¾ajÃº, spÃ¡jajÃº si veci a vytvÃ¡rajÃº si akÃ©si mapy v mysli. IntuitÃ­vnosÅ¥ je jeho ÄalÅ¡ia prednosÅ¥. Vkladanie hypertextov, obrÃ¡zkov, citÃ¡ciÃ­. Kto mÃ¡ rÃ¡d prÃ¡cu s myÅ¡lienkovÃ½mi mapami a prepletanÃ­m teÃ³riÃ­, moÅ¾no by mal skÃºsiÅ¥ tÃºto aplikÃ¡ciu. [10]"
115,207,0.416,Algebra a diskrÃ©tna  matematika,"Register vrchol â izolovanÃ½, 231 â vnÃºtornÃ½, 279 â, stupeÅ, 230-231 â, ÃºroveÅ, 186, 280, 281, 290, 294, 317, 320 â, vstupnÃ½ stupeÅ, 231, 302 â, vÃ½stupnÃ½ stupeÅ, 231, 302 vrcholovÃ¡ nezÃ¡vislosÅ¥, ÄÃ­slo, 269-270 vrcholy susednÃ©, 230, 235 vstupnÃ½ stupeÅ vrcholu, 231, 302 vymenovanie prÃ­padov, dÃ´kaz, 17-19, 57 vymenovanie prvkov, 30 vÃ½poÄet determinantov, 217, 220-221, 222 vÃ½stupnÃ½ stupeÅ vrcholu, 231, 302 vyvÃ¡Å¾enÃ½ koreÅovÃ½ strom, 281, 283 vzdialenosÅ¥ Hammingova, 165, 166 vzÅ¥ah rekurentnej formuly a rekurzie, 100"
94,338,0.416,Sprievodca svetom vedeckÃ©ho publikovania,"nastavenie odberateÄ¾ov, t. j. vytvorenie mnoÅ¾iny odbornÃ­kov, ktorÃ­ majÃº prÃ­stup k novÃ½m publikÃ¡ciÃ¡m â moÅ¾no tak vytvoriÅ¥ globÃ¡lnu skupinu vzÃ¡jomne prepojenÃ½ch osÃ´b, ktorÃ© spÃ¡ja spoloÄnÃ½ odbornÃ½ zÃ¡ujem,"
135,753,0.416,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"tervaly ( a1 , b1 >, ( a 2 , b2 >,..., (a n , bn > sÃº disjunktnÃ©. OrdinÃ¡rny proces OrdinÃ¡rnos znamenÃ¡, Å¾e vo vemi krÃ¡tkom asovom intervale prÃ­de viac ako jeden zÃ¡kaznÃ­k so zanedbatenou pravdepodobnosou, rÃ¡dovo menÅ¡ou ako je d Å¾ka tohto intervalu. Je teda nepravdepodobnÃ©, Å¾e sÃºasne prÃ­du viacerÃ­ zÃ¡kaznÃ­ci. MÃ´Å¾eme dokÃ¡za, Å¾e homogÃ©nny ordinÃ¡rny proces s nezÃ¡vislÃ½mi prÃ­rastkami je nevyhnutne PoissonovÃ½m procesom."
369,330,0.416,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"KÄ¾ÃºÄovÃ½m rozdielom v porovnanÃ­ s poisÅ¥ovnÃ­ctvom je, Å¾e neexistuje priamy vzÅ¥ah medzi inkasom a exkasom finanÄnÃ½ch prostriedkov (daÅovÃ­ poplatnÃ­ci neplatia osobitnÃº ÄasÅ¥ dane na vÃ½platu Å¡tÃ¡tnych prÃ­spevkov)."
276,137,0.416,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"10 Smerovanie IPv6 KeÄÅ¾e poÄet IPv4 adries uÅ¾ nepostaÄuje pre sÃºÄasnÃ© a budÃºce mnoÅ¾stvo adresovateÄ¾nÃ½ch zariadenÃ­, je prechod na protokol IPv6 nevyhnuteÄ¾nÃ½. KonfigurÃ¡cia smerovaÄov pre podporu IPv6 protokolu je trochu odliÅ¡nÃ¡ od IPv4. V tejto kapitole si uvedieme Å¡pecifikÃ¡ takejto konfigurÃ¡cie a precviÄÃ­me si nastavenie IPv6 adresy a statickÃ© aj dynamickÃ© smerovanie IPv6 komunikÃ¡cie. Cisco IOS mÃ¡ v predvolenej konfigurÃ¡cii vypnutÃ© IPv6 smerovanie. TakÅ¾e na umoÅ¾nenie IPv6 komunikÃ¡cie je potrebnÃ© v prvom rade aktivovaÅ¥ smerovanie IPv6 unicast-ovej komunikÃ¡cie (t. j. komunikÃ¡cie urÄenej konkrÃ©tnemu uzlu). Toto aktivovanie je moÅ¾nÃ© pomocou nasledujÃºceho prÃ­kazu v globÃ¡lnom konfiguraÄnom reÅ¾ime."
240,85,0.416,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"PrÃ­kazy zrejme pracujÃº sprÃ¡vne ak je na vstupe presne 5 ÄÃ­sel. Äo sa stane v prÃ­pade, ak je na vstupe ÄÃ­sel menej? Napr. v prÃ­pade, Å¾e na vstupe sÃº prÃ¡ve 4 ÄÃ­sla, tak funkcia scanf() nenaplnÃ­ hodnotu do premennej e, ktorÃ¡ je urÄenÃ¡ pre piate ÄÃ­slo. Hodnota"
130,501,0.416,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"<body> <p>Ahoj, volam sa <span class=âfoaf-nameâ>Jozef Mrkvicka</span> a pracujem vo firme <a href=âhttp://www.firma.skâ rel=âfoaf-workâ >Firma, s.r.o.</a> Mozete ma kontaktovat mailom na <a ref=âmailto:jozef.mrkvicka@firma.skâ >jozef.mrkvicka@firma.sk</a> alebo ziskat viac informacii na mojej <a href=âhttp://www.firma.sk/~mrkvicka/â rel=âfoaf-homeâ>domovskej stranke</a>. </body> </html>"
76,105,0.416,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"b) P(B) = 100 ( ) , pretoÅ¾e tÃ½m chybnÃ½m mÃ´Å¾e byÅ¥ hociktorÃ½ spomedzi 100 vybratÃ½ch (to je 100 prÃ­padov, ktorÃ© sa navzÃ¡jom vyluÄujÃº). Alebo, skrÃ¡tka, podÄ¾a (2) odseku 1.7.6 ( = 1). c) Tentoraz vo vzÅ¥ahu (2), odseku 1.7.6 mÃ¡me d) Teraz spoÄÃ­tame moÅ¾nosti pre"
369,303,0.416,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Poistenie budov. Poistenie domÃ¡cnosti â predmetom poistenia je sÃºbor zariadenÃ­ domÃ¡cnosti (nÃ¡bytok, elektrickÃ© spotrebiÄe a inÃ©. Doplnkovo je moÅ¾nÃ© poistiÅ¥ naprÃ­klad automatickÃº prÃ¡Äku alebo umeleckÃ© diela). Poistenie motorovÃ½ch vozidiel (tzv. kasko4) . Poistenie strojov. Poistenie skla. Poistenie zÃ¡sob. Poistenie prepravy â t. j. poistenie Å¡kÃ´d spÃ´sobenÃ½ch na prepravovanom tovare. Poistenie poÄ¾nohospodÃ¡rskych rizÃ­k â zahÅÅa Å¾ivelnÃ© pohromy poÄ¾nohospodÃ¡rskych plodÃ­n, poistenie hospodÃ¡rskych zvierat voÄi chorobe, Ãºhynu a inÃ©. Poistenie Ãºverov â t. j. poistenie schopnosti dlÅ¾nÃ­ka splÃ¡caÅ¥ Ãºver v prÃ­padoch dohodnutÃ½ch v poistnÃ½ch podmienkach. (Ak je poistnÃ½m rizikom Ãºmrtie dlÅ¾nÃ­ka, ide o Å¡peciÃ¡lny prÃ­pad poistenia na Ãºmrtie. V Åom je poistnÃ¡ suma najvyÅ¡Å¡ia na zaÄiatku poistnÃ©ho obdobia a postupne ako dlÅ¾nÃ­k splÃ¡ca Ãºver, tÃ¡to poistnÃ¡ suma klesÃ¡. NavyÅ¡e je poistnÃ¡ suma vinkulovanÃ¡ v prospech ÃºverovÃ©ho veriteÄ¾a.) a ÄalÅ¡ie."
239,68,0.415,Ãvod do matematickej logiky,"PrÄ±Ìklad. Zostrojte DNF-formulu elvivalentnuÌ s A: (a â q b) â§ (c â q(a â¨ q c)). VsÌimnime si, zÌe A je formula z PrÄ±Ìkladu 4.1. Postup pomocou zjednodusÌeneÌho seÌmantickeÌho stromu je znaÌzornenyÌ na ObraÌzku 5. Na tomto obraÌzku cÌÄ±Ìslujeme iba tie formuly, ktoreÌ nerozvÄ±Ìjame okamzÌite. TiezÌ sme upustili od praÌcneho opakovania doposialâ nerozvinutyÌch formuÌl. Zistili sme, zÌe A je ekvivalentnaÌ s (a â§ q b â§ q c) â¨ (q a â§ b â§ q c) â¨ (q a â§ b â§ c). Teraz je uzÌ zrejmeÌ, zÌe postup pomocou seÌmantickyÌch stromov je ryÌchlejsÌÄ±Ì ako prepis pomocou pravidiel (a) â (d)."
138,13,0.415,LATEXovnÃ­k - Å truktÃºra zdrojovÃ©ho sÃºboru,"â TabuÄ¾ky (vhodnÃ© doplniÅ¥ balÃ­Äkom array) PrÃ­kaz \renewcommand{\arraystretch}{n} pred vlastnou tabuÄ¾kou nastavÃ­ jej riadkovanie na n-nÃ¡sobok pÃ´vodnÃ©ho riadkovania (n mÃ´Å¾e byÅ¥ kladnÃ© reÃ¡lne ÄÃ­slo). \begin{tabular}[p]{s} TabuÄ¾ka (s definuje zarovnanie kaÅ¾dÃ©ho stÄºpca). \begin{tabular*}[p]{d }{s} TabuÄ¾ka so Å¡Ã­rkou d (napr. [.5\linewidth]). \begin{array}[p]{s} TabuÄ¾ka v matematickom mÃ³de (napr. matica). \\[l ] ZmenÃ­ zvislÃº medzeru za riadkom, napr. \\[0.5em]. \multicolumn{n}{s}{text} SpojÃ­ text do n stÄºpcov so zarovnanÃ­m s. \hline HorizontÃ¡lna Äiara medzi riadkami cez celÃº tabuÄ¾ku. \cline{x-y} HorizontÃ¡lna Äiara od stÄºpca x (zÄ¾ava) po stÄºpec y. [p] urÄuje pripojenie tabuÄ¾ky k textu: t (hornÃ½), b (dolnÃ½ kraj), c (stred). {s} urÄuje formÃ¡tovanie stÄºpcov: l, r, c (vÄ¾avo, vpravo, centrovanÃ½), p{l} (blok so Å¡irkou l), | (Äiara medzi stÄºpcami) a @{tvar} formÃ¡tuje medzery medzi stÄºpcami. \cline v SK/CZ vyÅ¾aduje \shorthandoff{-} ako prvÃ½ prÃ­kaz \begin{document}."
369,7,0.414,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,Å PECIALIZOVANÃ TECHNICKÃ VZORY ............................................................ 225 6.1 PRACOVNÃCI A TECHNOLÃGIE ............................................................................... 225 6.2 TECHNOLOGICKÃ ZÃKAZKY .................................................................................. 229 6.3 TECHNOLOGICKÃ ANALÃZY .................................................................................. 235 6.4 TECHNICKÃ SIETE ................................................................................................. 239
94,109,0.414,Sprievodca svetom vedeckÃ©ho publikovania,"MegaÄasopisy s otvorenÃ½m prÃ­stupom sa sÃºstredia iba na poslednÃ© dve z menovanÃ½ch kritÃ©riÃ­ (soundness-only peer review). Priebeh a finÃ¡lny verdikt recenznÃ©ho konania rozhodne, Äi bude dotyÄnÃ½ rukopis prijatÃ½ bezo zmeny, prijatÃ½ s Ãºpravami, alebo odmietnutÃ½."
265,469,0.414,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"manaÅ¾ment komunikÃ¡cie, 24, 25 manaÅ¾ment kvality, 53 manaÅ¾ment plÃ¡novania, 24, 25 manaÅ¾ment projektu, 52, 53, 56 manaÅ¾ment rizÃ­k, 53, 150, 182 manaÅ¾ment zmien, 136 manuÃ¡lne testovanie, 117, 130 meranie vlastnostÃ­ softvÃ©ru, 130 merateÄ¾nosÅ¥, 83, 84, 86 metÃ³da tvorby softvÃ©ru, 51, 158, 159, 173 metodolÃ³gia manaÅ¾mentu projektu, 57 metodolÃ³gia podÄ¾a IPMA, 57 metodolÃ³gia podÄ¾a PMI, 57 metodolÃ³gia PRINCE2, 57 metodolÃ³gia vÃ½voja softvÃ©ru, 50, 51, 159 migrÃ¡cia, 139 model, 157 model agilnÃ©ho vÃ½voja, 51, 152, 153, 155 model architektÃºry, 166, 169 model biznis procesov, 166, 169 model domÃ©ny, 166, 169 model funkcionÃ¡lnych poÅ¾iadaviek, 166, 169 model interakciÃ­ a komunikÃ¡cie, 166, 169 model procesov a algoritmov, 166, 169 model rozmiestnenia, 166, 169 model softvÃ©ru, 67, 93, 157, 159, 161â164, 166, 169, model sprÃ¡vania, 164 model Å¡truktÃºry pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania, 166, model tried, 93, 106, 166, 169 model Ãºdajov, 93 model vÃ½voja softvÃ©ru, 10, 51, 143â145, 155, 157, modelovacÃ­ jazyk, 75, 165, 187 modelovanie poÅ¾iadaviek, 83, 89 modelovanie softvÃ©ru, 93, 161, 162, 168, 173, 187, model-view-controller (MVC), 100â102 modifikovateÄ¾nosÅ¥, 36, 37, 40, 45, 83 monitorovanie projektu, 53 monitorovanie systÃ©mu, 133 multiparadigmovÃ© programovanie, 175 mutaÄnÃ© testovanie, 121, 129"
66,170,0.414,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"6.4 Atomicity a Durability Vlastnosti atomicity a durability vieme dosiahnuÅ¥ pomocou dvoch prÃ­stupov a to logovania alebo shadow-paging. V rÃ¡mci ÄalÅ¡ej Äasti sa zameriame na logovanie, ktorÃ© je vyuÅ¾Ã­vanÃ© v dneÅ¡nÃ½ch relaÄnÃ½ch databÃ¡zovÃ½ch systÃ©moch. VyuÅ¾Ã­va ho aj implementÃ¡cia PostgreSQL. NavyÅ¡e samotnÃ© logovanie je dÃ´leÅ¾itÃ© z pohÄ¾adu obnovy dÃ¡t, pretoÅ¾e poskytuje dodatoÄnÃ© informÃ¡cie databÃ¡zovÃ©mu systÃ©mu, na zÃ¡klade ktorÃ½ch je moÅ¾nÃ© uskutoÄniÅ¥ samotnÃº obnovu 6.4.1 Logovanie Logovanie v rÃ¡mci databÃ¡zovÃ©ho systÃ©mu ukladÃ¡ dodatoÄnÃ© informÃ¡cie, za ÃºÄelom moÅ¾nosti obnovenia dÃ¡t, tak aby bolo garantovanÃ©, Å¾e v prÃ­pade zlyhania sÃº zmeny uskutoÄnenÃ© COMMIT transakciou uloÅ¾enÃ© v databÃ¡ze a vplyv nedokonÄenÃ½ch transakciÃ­ je odstrÃ¡nenÃ½ z databÃ¡zy. DatabÃ¡zovÃ½ systÃ©m pouÅ¾Ã­va logovacÃ­ sÃºbor, ktorÃ½ predstavuje sekvenÄnÃ½ sÃºbor, kde sÃº zaznamenanÃ© zmeny uskutoÄnenÃ© jednotlivÃ½mi transakciami. SamotnÃ½ sÃºbor musÃ­ byÅ¥ uloÅ¾enÃ½ v nevolatÃ­vnej pamÃ¤ti (fyzickÃ© uloÅ¾isko), aby v prÃ­pade zlyhania zostali uskutoÄnenÃ© zmeny zaznamenanÃ©. V rÃ¡mci sÃºboru je potrebnÃ© uchovÃ¡vaÅ¥ vÅ¡etky potrebnÃ© informÃ¡cie, ktorÃ© budÃº potrebnÃ© pre obnovenie dÃ¡t."
115,146,0.414,Algebra a diskrÃ©tna  matematika,"2.25. Nech A a B sÃº mnoÅ¾iny, dokÃ¡Å¾te vlastnosÅ¥ ( A â B ) â ( B â A ) . 2.26. Nech Ai = {1, 2,...,i} , pre i=1, 2, ..., n. NÃ¡jdite (a) A1 â© A2 â© ... â© An , (b) A1 âª A2 âª ... âª An . 2.27. Nech Ai je mnoÅ¾ina binÃ¡rnych reÅ¥azcov, ktorÃ½ch dÄºÅ¾ka nie je vÃ¤ÄÅ¡ia ako i, pre i=1, 2, ..., n. NÃ¡jdite (a) A1 â© A2 â© ... â© An , (b) A1 âª A2 âª ... âª An . 2.28. DokÃ¡Å¾te pomocou matematickej indukcie vzÅ¥ahy"
265,419,0.414,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Unified process definuje nasledovnÃ© podpornÃ© skupiny ÄinnostÃ­: 1. KonfigurÃ¡cie a manaÅ¾ment zmien (aktivity zodpovedajÃºce najmÃ¤ ÃºdrÅ¾be softvÃ©ru) 2. ManaÅ¾ment projektu (Ä¾uskÃ½ch zdrojov, plÃ¡novania, rizÃ­k, kvality, ...) 3. ManaÅ¾ment prostredia (podpornÃ© aktivity vÃ½voja ako zabezpeÄovanie nÃ¡strojov, nastavenie vÃ½vojovÃ½ch prostredÃ­, Å¡tandardov a pod.)"
361,36,0.414,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","PrÄ±Ìklad 2.14: Nech jazyk L je definovanyÌ takto L = vv R | v â {a, b} . Navrhnite lâubovolânuÌ gramatiku G, ktoraÌ generuje jazyk L. UkaÌzÌte, zÌe slovo bbaabb je z jazyka L. RiesÌenie: G = (N, T, P, S) , N = {S, A} , T = {a, b} P :S â aAa | bAb A â aAa | bAb |  S âbAb bAb âbAb bbAbb âaAa bbaAabb â bbaabb"
76,425,0.414,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Hladina testu ï¡ sa rovnÃ¡ 0.31744 ï» 0.32. V tomto prÃ­pade, vzhÄ¾adom na symetriu hypotÃ©z, platÃ­: ï¢ = ï¡. Sila testu sa rovnÃ¡ 1 â 0.32 = 0.68. 8.5.3 Hladina testu sa rovnÃ¡ 0.0511 ï» 0.05, ï¢ = 0.4529 ï» 0.45, t.j. sila testu sa rovnÃ¡ 0.55. 8.5.4 Testovacou Å¡tatistikou mÃ´Å¾e byÅ¥ vÃ½berovÃ½ priemer Ì KritickÃ¡ hodnota vÃ½berovÃ©ho priemeru Ì sa rovnÃ¡ 11.32, pretoÅ¾e K = { xïR25 : Ì"
343,78,0.413,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"sa potom ukladajÃº do databÃ¡zy, ako je naprÃ­klad PostgreSQL, a mÃ´Å¾u sa na nich vykonaÅ¥ rÃ´zne dopyty. V praxi sa pouÅ¾Ã­vajÃº dva typy indexerov - vÅ¡eobecnÃ© a vlastnÃ©. VÅ¡eobecnÃ© indexery, ako je naprÃ­klad Moralis alebo Alchemy, indexujÃº vÅ¡eobecnÃ© dÃ¡ta, ako sÃº ERC20 tokeny. VlastnÃ© indexery, ako je naprÃ­klad The Graph, SubSquid alebo SubQuery, umoÅ¾ÅujÃº indexovaÅ¥ vÅ¡etky dÃ¡ta na blockchaine a vytvÃ¡raÅ¥ vlastnÃº schÃ©mu. VÃ½hodou pouÅ¾itia indexerov je, Å¾e zlepÅ¡ujÃº pouÅ¾Ã­vateÄ¾skÃ½ zÃ¡Å¾itok tÃ½m, Å¾e zrÃ½chÄ¾ujÃº naÄÃ­tanie dÃ¡t a umoÅ¾ÅujÃº analytickÃ© dotazy. NevÃ½hodou je, Å¾e ich nastavenie mÃ´Å¾e byÅ¥ zloÅ¾itÃ© a mÃ´Å¾u byÅ¥ pomalÃ© pri spracovanÃ­ veÄ¾kÃ©ho mnoÅ¾stva dÃ¡t. DecentralizovanÃ© aplikÃ¡cie sÃº veÄ¾mi praktickÃ© a majÃº veÄ¾kÃ½ potenciÃ¡l a prÃ¡ve vÄaka indexeru sa z nich mÃ´Å¾u staÅ¥ jednoduchÃ© a rÃ½chle aplikÃ¡cie na kaÅ¾dodennÃ© pouÅ¾itie. AvÅ¡ak, ako vÅ¡etko, aj ony majÃº svoje vÃ½hody a nevÃ½hody. DÃ´leÅ¾itÃ© je vedieÅ¥, kedy a ako ich pouÅ¾iÅ¥. Aj zle nastavenÃ½ indexer mÃ´Å¾e spraviÅ¥ obrovskÃ© problÃ©my. V praxi, ak dÃ¡me SubSquidu indexovaÅ¥ vÅ¡etko, Äo dokÃ¡Å¾e, dosiahneme veÄ¾kosÅ¥ Postgres databÃ¡zy v nÃ¡sobkoch vÃ¤ÄÅ¡iu, ako je samotnÃ½ blockchain. KeÄÅ¾e SubSquid spracovÃ¡va dÃ¡ta rÃ½chlosÅ¥ou 50 000-krÃ¡t za sekundu, nemÃ´Å¾eme sledovaÅ¥ vÅ¡etko, takÅ¾e nÃ¡m mÃ´Å¾u pomÃ´cÅ¥ logy. Bez logov by to bolo rÃ½chlejÅ¡ie, ale s nimi aspoÅ vieme, Äo sa deje. Je to uÅ¾itoÄnÃ©, keÄ sa nieÄo pokazÃ­ alebo keÄ vidÃ­me nejakÃ© nesÃºvisiace dÃ¡ta. Potom si vieme vytvoriÅ¥ event, ktorÃ½ nÃ¡m zaznamenÃ¡ nejakÃº ÄasovÃº peÄiatku, vytvoriÅ¥ si novÃº kolekciu, pridaÅ¥ do nej vybranÃ© dÃ¡ta a opÃ½taÅ¥ sa, Äi mÃ¡ nejakÃ© metadÃ¡ta. Ak Ã¡no, mÃ´Å¾eme ich uloÅ¾iÅ¥ na IPFS ako decentralizovanÃ© ÃºloÅ¾isko. Takto efektÃ­vne sa dajÃº spracovaÅ¥ dÃ¡ta, Äi uÅ¾ je to EVM, Substrate alebo nieÄo inÃ©. Ako zaÄaÅ¥ so SubSquidom? MajÃº veÄ¾mi dobre spracovanÃº dokumentÃ¡ciu 2, ktorÃ¡ prevedie od zaÄiatku aÅ¾ po pokroÄilÃ© indexovacie sluÅ¾by. Ak ste uÅ¾ pouÅ¾Ã­vali naprÃ­klad Create React App, mÃ´Å¾ete pouÅ¾iÅ¥ SubSquid init, nainÅ¡talovaÅ¥ si to cez npm sqd, daÅ¥ init, daÅ¥ nÃ¡zov svojho Squidu, daÅ¥ mÃ­nus mÃ­nus template, vygenerovaÅ¥ si Squid, daÅ¥ mu adresu alebo Å¡pecifickÃ½ kontrakt ABI, ktorÃ© eventy, ktorÃ© funkcie a daÅ¥ to na ethereum mainnet, spustiÅ¥ databÃ¡zu, migrovaÅ¥ to a beÅ¾aÅ¥. Je to najefektÃ­vnejÅ¡Ã­ nÃ¡stroj, keÄ potrebujete Å¡kÃ¡lovaÅ¥ svoju aplikÃ¡ciu, Äi uÅ¾ je to od liquidity miningu"
393,527,0.413,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Koncern nÃ¡vrhovÃ½ vzor Observer NÃ¡vrhovÃ½ vzor Observer, uvedenÃ½ na obrÃ¡zku 9-17, pozostÃ¡va z klasifikÃ¡torov Observer, Observable a ImplObservable, ktorÃ© sÃº nezÃ¡vislÃ© od konkrÃ©tnej aplikÃ¡cie. Observer a Observable koreÅ¡pondujÃº s dvomi rolami vo vzore Observer. ImplObservable je priama implementÃ¡cia rozhrania Observable. Zo Å¡truktÃºry vzoru Observer vyplÃ½va, Å¾e kaÅ¾dÃ¡ trieda implementujÃºca rozhranie Observer musÃ­ Å¡pecifikovaÅ¥ telo metÃ³dy updateObserver. Obe rozhrania Observer aj Observable sÃº Ãºzko zviazanÃ©, pretoÅ¾e kaÅ¾dÃ© z nich vyÅ¾aduje odkaz na toho druhÃ©ho pri volanÃ­ niektorÃ½ch z metÃ³d. V prÃ­klade 9-7 je uvedenÃ¡ ukÃ¡Å¾ka implementÃ¡cie nÃ¡vrhovÃ©ho vzoru Observer. PotrebnÃ© triedy a rozhrania sÃº umiestnenÃ© v balÃ­Äku designpattern.observer, ktorÃ½ predstavuje jeden z koncernov."
196,167,0.413,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"MÃ´Å¾me pouÅ¾itâ dva spÃ´soby: â¢ PrvÃ½ v prostredÃ­ array s povinnostâou definovatâ pÃ¡rovÃ© prÃ­kazy \left a \right pre zÃ¡tvorkovanie a explicitnou Å¡pecifikÃ¡ciou stlÌpcov (pocÌet a formÃ¡tovanie) â¢ DruhÃ½ v prostredÃ­ matrix prÃ­padne jeho verziami (pmatrix, bmatrix, Bmatrix, vmatrix, Vmatrix), ktorÃ© sa postarajÃº o zÃ¡tvorkovanie kaÅ¾dÃ¡ Å¡pecifickÃ½m typom. OdporÃºcÌam v kombinÃ¡cii s balÃ­kom mathtools [24]. PotrebnÃ© je pouÅ¾itâ prÃ­kazy pre trojice bodiek a to vodorovne \cdots, zvislo \vdots a po diagonÃ¡le \ddots. V prostredÃ­ array:"
43,473,0.413,Objektovo orientovanÃ© programovanie v C++,"Teraz si uvedieme metÃ³dy triedy vector rozÄlenenÃ© do skupÃ­n podÄ¾a zamerania. OstatnÃ© Å¡truktÃºry STL majÃº viac-menej prÃ­buznÃº funkÄnosÅ¥. Samozrejme, vektor je najuniverzÃ¡lnejÅ¡ou Å¡truktÃºrou, takÅ¾e pri ostatnÃ½ch Å¡truktÃºrach treba rÃ¡taÅ¥ s obmedzeniami danÃ½mi ich charakteristickÃ½mi vlastnosÅ¥ami. â¢ MetÃ³dy vracajÃºce konkrÃ©tne iterÃ¡tory â iterator begin() â vrÃ¡ti iterÃ¡tor na prvÃ½ prvok vektora. â iterator end() â vrÃ¡ti iterÃ¡tor na miesto tesne za poslednÃ½m prvkom vektora. â reverse iterator rbegin() â vrÃ¡ti reverznÃ½ iterÃ¡tor na âreverzne prvÃ½â prvok vektora, t. j. v skutoÄnosti na poslednÃ½ prvok vektora. â reverse iterator rend() â vrÃ¡ti reverznÃ½ iterÃ¡tor na miesto tesne pred prvÃ½m prvkom vektora."
239,156,0.413,Ãvod do matematickej logiky,"Podlâa Vety 4.5 (2) stacÌÄ±Ì ukaÌzatâ, zÌe suÌ vsÌetky vetvy duaÌlneho seÌmantickeÌho stromu pre A uzavreteÌ. DuaÌlny seÌmantickyÌ strom pre A je na ObraÌzku 31. V lâavej vetve maÌme P (c) a q P (t), pricÌom t je lâubovolânyÌ prvok z univerza, teda aj c, cÌo spor. Preto je lâavaÌ vetva uzavretaÌ. V pravej vetve maÌme P (c) a q P (t), takzÌe je uzavretaÌ aj taÌto vetva. KedâzÌe suÌ vsÌetky vetvy duaÌlneho seÌmantickeÌho stromu pre A uzavreteÌ, formula A je logicky pravdivaÌ. NasledujuÌci prÄ±Ìklad ukazuje, zÌe kedâ konsÌtruujeme seÌmantickeÌ stromy pre formuly predikaÌtovej logiky, musÄ±Ìme bytâ ovelâa opatrnejsÌÄ±Ì, ako pri formulaÌch vyÌrokovej logiky."
184,295,0.413,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"VÃ¤ÄÅ¡inu sÃºborovÃ½ch systÃ©mov s ktorÃ½mi sa beÅ¾ne stretÃ¡vame moÅ¾no zaradiÅ¥ medzi diskovÃ© sÃºborovÃ© systÃ©my. SÃº to âjednoduchÃ©â sÃºborovÃ© systÃ©my navrhnutÃ© na ukladanie sÃºborov na dÃ¡tovÃ© ÃºloÅ¾isko, ktorÃ© je reprezentovanÃ© fyzickÃ½m mÃ©diom"
196,44,0.412,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"cii TeX a sÃºvisiaceho softvÃ©ru. Jednoducho je to on-line prostredie na tvorbu LATEX dokumentov. V cÌase pÃ­sania tejto knihy bola sluÅ¾ba postavenÃ¡ na multiplatformovej slobodnej distribÃºcii typografickÃ©ho systÃ©mu TeX Live 2020 a disponovala prekladacÌmi pdfLaTeX, LATEX XeLaTeX a LuaLaTeX."
239,117,0.412,Ãvod do matematickej logiky,"CvicÌenie 6.10. V deï¬nÄ±Ìcii Booleovej algebry maÌme velâa vztâahov, ktoreÌ majuÌ operaÌcie Â·, + a splÌnÌatâ. UkaÌzÌte, zÌe idempotentnostâ, modulaÌrnostâ, involuÌciu a de Morganove pravidlaÌ mozÌno odvoditâ z ostatnyÌch vztâahov."
59,385,0.412,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"TautolÃ³gie majÃº vo vÃ½rokovej logike mimoriadne postavenie zÃ¡konov logiky, tieto formuly sÃº vÅ¾dy pravdivÃ© pre Ä¾ubovoÄ¾nÃ© pravdivostnÃ© hodnoty premennÃ½ch. NiektorÃ© tautolÃ³gie sa Äasto pouÅ¾Ã­vajÃº nielen v samotnej vÃ½rokovej logike, ale aj v beÅ¾nom usudzovanÃ­ a sÃº obvykle oznaÄovanÃ© aj vlastnÃ½m menom. VÃ¤ÄÅ¡inou ide o tautolÃ³gie tvaru ekvivalencie, ktorÃ© umoÅ¾ÅujÃº nahradzovaÅ¥ jedny formuly inÃ½mi bez straty vlastnosti ich tautologiÄnosti. Ä½ubovoÄ¾nÃ¡ neprÃ¡zdna mnoÅ¾ina formÃºl, ï ï½ ï»ïª1 ,ïª2 ,...,ïªn ï½ , sa nazÃ½va teÃ³ria"
115,158,0.411,Algebra a diskrÃ©tna  matematika,"13.2. Pre nasledujÃºce kapacitnÃ© siete na obr. 13.19 a 13.20 s ohodnotenÃ­m hrÃ¡n ich kapacitami (namiesto dvojice opaÄne orientovanÃ½ch hrÃ¡n je vÅ¾dy vykreslenÃ¡ iba neorientovanÃ¡ hrana) nÃ¡jdite maximÃ¡lny tok z u do v a dokÃ¡Å¾te, Å¾e je tok maximÃ¡lny nÃ¡jdenÃ­m minimÃ¡lneho rezu, ktorÃ©ho kapacita sa rovnÃ¡ hodnote vami nÃ¡jdenÃ©ho toku."
66,45,0.411,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"3.5.3 AktualizÃ¡cia zÃ¡znamu Ãprava hodnÃ´t v rÃ¡mci existujÃºceho zÃ¡znamu je moÅ¾nÃ¡ v rÃ¡mci SQL pomocou klauzuly UPDATE, ktorÃ¡ definuje tabuÄ¾ku. Nasleduje klauzula SET, kde sa nastavujÃº novÃ© parametre existujÃºcich atribÃºtov v rÃ¡mci tabuÄ¾ky. Je moÅ¾nÃ© nastaviÅ¥ viacero atribÃºtov naraz. Pre Å¡pecifikovanie zÃ¡znamov, pre ktorÃ© mÃ¡ dÃ´jsÅ¥ k Ãºprave hodnÃ´t je potrebnÃ© pouÅ¾iÅ¥ klauzulu"
130,567,0.411,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"MnÃ­chovskÃ½ referenÄnÃ½ model pre AHS MnÃ­chovskÃ½ referenÄnÃ½ model pre adaptÃ­vne hypermediÃ¡lne systÃ©my (Munich Reference Model for Adaptive Hypermedia Systems; Koch, 2002) vychÃ¡dza z DexterovskÃ©ho modelu, ktorÃ½ rovnako ako AHAM rozÅ¡iruje o prvky prispÃ´sobovania. Jeho Å¡pecifikÃ¡cia je zaloÅ¾enÃ¡ na objektovo-orientovanom prÃ­stupe s vyuÅ¾itÃ­m jazyka UML (Unified Modelling Language; OMG, 2003) â vizuÃ¡lnej reprezentÃ¡cie diagramami ako aj formÃ¡lnej Å¡pecifikÃ¡cie v jazyku OCL (Object Constraint Language). Rovnako ako AHAM model rozÅ¡iruje strednÃº vrstvu DexterovskÃ©ho referenÄnÃ©ho modelu o model pouÅ¾Ã­vateÄ¾a a model prispÃ´sobovania. Å truktÃºra hyperpriestoru je opÃ­sanÃ¡ modelom aplikaÄnej domÃ©ny. ObrÃ¡zok 9-4 (Koch, 2002) znÃ¡zorÅuje navrhnutÃ½ metamodel aplikaÄnej domÃ©ny vo forme diagramu tried. DomÃ©na (Domain) je definovanÃ¡ pomocou sady komponentov (Component), ktorÃ© majÃº jedineÄnÃ½ identifikÃ¡tor (UID). Komponent mÃ´Å¾e byÅ¥ buÄ koncept (Concept) alebo konceptuÃ¡lna vÃ¤zba (Concept Relationship). Koncept mÃ´Å¾e byÅ¥ zloÅ¾enÃ½ (Composite) alebo elementÃ¡rny (Atom). KonceptuÃ¡lne vÃ¤zby slÃºÅ¾ia na vyjadrenie vzÅ¥ahov medzi konceptmi. Modelujeme nimi napr. odkazy (Link) ale aj inÃ© typy vzÅ¥ahov ako napr. prerekvizita (Prerequisite). KonceptuÃ¡lne vÃ¤zby definujÃº Å¡pecifikÃ¡tory (Specifier) nepriamo pomocou kotiev. VÃ¤zby mÃ´Å¾me modelovaÅ¥ medzi dvomi a viacerÃ½mi konceptmi, priÄom je moÅ¾nÃ© urÄiÅ¥ aj ich smer (atribÃºt direction triedy Specifier). Kotva (Anchor) mÃ¡ definovanÃ½ identifikÃ¡tor (AnchorID) a hodnotu (AnchorValue). Hodnota kotvy, podobne ako informaÄnÃ½ obsah zdruÅ¾enÃ½ s konceptom je definovanÃ½ vrstvou Within-Component Layer. ElementÃ¡rnemu konceptu prislÃºcha informaÄnÃ½ fragment, zloÅ¾enÃ©mu konceptu strÃ¡nka, ktorÃº tvorÃ­ viacero informaÄnÃ½ch fragmentov. K jednotlivÃ½m komponentom moÅ¾no definovaÅ¥ premenlivÃ½ poÄet atribÃºtov (Attribute). AtribÃºty majÃº uplatnenie pri adaptÃ­vnej prezentÃ¡cii, ale aj pri vyhÄ¾adÃ¡vanÃ­ informÃ¡ciÃ­, klasifikÃ¡cii komponentov a pod. KaÅ¾dÃ½ komponent povinne obsahuje aj Å¡pecifikÃ¡ciu prezentÃ¡cie komponentu (PresentSpec). Ako moÅ¾no vidieÅ¥, model podporuje oddelenÃº reprezentÃ¡ciu konceptov, vzÅ¥ahov medzi konceptmi a informaÄnÃ½mi fragmentmi (obsahom elementÃ¡rnych konceptov). UvedenÃ½ model neumoÅ¾Åuje explicitnÃº reprezentÃ¡ciu variantov (na Ãºrovni konceptov alebo na Ãºrovni informaÄnÃ½ch fragmentov). Varianty moÅ¾no reprezentovaÅ¥ pomocou Å¡peciÃ¡lneho typu konceptuÃ¡lnej vÃ¤zby na Ãºrovni elementÃ¡rnych konceptov, ale aj zloÅ¾enÃ½ch konceptov."
129,25,0.411,Sprievodca licenciami Creative Commons,otvorenÃ©ho prÃ­stupu. Vydavatelia vedeckej literatÃºry s otvorenÃ½m prÃ­stupom v oblasti prÃ­rodnÃ½ch vied ako naprÃ­klad PLOS pouÅ¾Ã­vajÃº licencie CC BY na Å¡Ã­renie recenzovanÃ½ch ÄlÃ¡nkov uÅ¾ niekoÄ¾ko rokov a BudapeÅ¡tianska iniciatÃ­va otvorenÃ©ho prÃ­stupu8 â kÄ¾ÃºÄovÃ½ faktor vÃ½voja otvorenÃ©ho prÃ­stupu v EurÃ³pe â odporuÄila CC BY ako preferovanÃº licenciu na publikovanie s otvorenÃ½m prÃ­stupom.
41,53,0.411,InformaÄnÃ© vzdelÃ¡vanie,"dosiahnutie urÄitÃ©ho cieÄ¾a. SÃº sÃ­ce pokusy ohÃ½baÅ¥ metÃ³dy projektovÃ©ho riadenia, ale pri samotnej realizÃ¡cii je dÃ´leÅ¾itÃ© riadiÅ¥ sa aj zdravÃ½m Ãºsudkom. PoznÃ¡me sedem zÃ¡kladnÃ½ch spÃ´sobov projektovÃ©ho manaÅ¾mentu, vÅ¡etky sa uplatÅujÃº aj pri riadenÃ­ IT projektov v praxi: - Waterfall - Agile - Kanban - Scrum - Lean PM - PRINCE 2 - Six Sigma PM MetÃ³dy manaÅ¾mentu Agile, Scrum, Kanban a Lean PM patria aj do spoloÄnej skupiny, ktorÃº mÃ´Å¾eme spoloÄne nazvaÅ¥ â agilnÃ© metÃ³dy projektovÃ©ho manaÅ¾mentu (Agile) [17]. ZvyÅ¡nÃ© metÃ³dy nemajÃº svoje charakteristickÃ© pomenovanie, ale ako si ukÃ¡Å¾eme, majÃº rovnakÃ© opodstatnenie ako agilnÃ©, hoci ku koncu druhej desiatky rokov 21. storoÄia sa zaÄali najmÃ¤ vplyvom vÃ½vojÃ¡rov aplikÃ¡ciÃ­ pre inteligentnÃ© (smart) zariadenia spochybÅovaÅ¥. POZNÃMKA: Niekde som poÄul, Å¾e chybovÃ½ Boeing 737 Max bol navrhnutÃ½ Agile spÃ´sobom projektovÃ©ho manaÅ¾mentu, kde bolo niekoÄ¾ko stovÃ¡k malÃ½ch agilnÃ½ch vÃ½vojovÃ½ch tÃ­mov, ktorÃ© sÃ­ce vyrieÅ¡ili svoju ÄasÅ¥ vÃ½voja, ale nikto sa nestaral, Äi to spolu fungujeâ¦ A tak je lepÅ¡ie si do tohto typu lietadla nesadaÅ¥, a ak v Åom sedÃ­te, tak radÅ¡ej vystÃºpte, lebo padÃ¡â¦ PredtÃ½m, ako sa pustÃ­me do jednotlivÃ½ch metÃ³d projektovÃ©ho manaÅ¾mentu, zadefinujme si niektorÃ© pojmy, ktorÃ© budeme pouÅ¾Ã­vaÅ¥ aj v ÄalÅ¡Ã­ch kapitolÃ¡ch: Sponzor/vlastnÃ­k (stakeholder/owner)â v projekte je to osoba, od ktorej vyÅ¡iel prvotnÃ½ impulz na vytvorenie projektu. Je to osoba, ktorÃ¡ urÄitÃ½ problÃ©m (pain), potrebuje vyrieÅ¡iÅ¥, lebo jeho vyrieÅ¡enÃ­m predpokladÃ¡ zlepÅ¡enie stavu, v ktorom sa nachÃ¡dza. MÃ´Å¾e oÄakÃ¡vaÅ¥ rÃ´zne zlepÅ¡enie stavu â zvÃ½Å¡enie prÃ­jmov, zlepÅ¡enie efektivity prÃ¡ce, zavedenie novÃ©ho vÃ½robku a podobne. ZÃ¡kaznÃ­k (Customer) â je spolu so sponzorom hnacÃ­m motorom zmien, ktorÃ© sÃº v projekte poÅ¾adovanÃ©. Sponzor Äasto reaguje na poÅ¾iadavky zÃ¡kaznÃ­ka. VerejnÃ¡ objednÃ¡vka zÃ¡kaznÃ­ka sa stÃ¡va aj dÃ´vodom problÃ©mov a potrieb sponzora, aby boli realizovanÃ©. Warerfall â je spÃ´sob lineÃ¡rnej metÃ³dy projektovÃ©ho manaÅ¾mentu. Bol to ale prvÃ½ modernÃ½ systÃ©m projektovÃ©ho manaÅ¾mentu, ktorÃ©ho pravidlÃ¡ a spÃ´soby boli vytvorenÃ©. LineÃ¡rne spracovanie metÃ³dy projektovÃ©ho manaÅ¾mentu spÃ´sobom waterfall v tomto prÃ­pade znamenÃ¡ sekvenÄnÃ½ prÃ­stup, kedy sa najprv zadefinujÃº potreby projektu a postupne sa napÄºÅajÃº, aÅ¾ ku prechodu na podporu vzniknutÃ©ho rieÅ¡enia. Je to teda kaskÃ¡da ÄinnostÃ­, ktorÃ© pripomÃ­najÃº vodopÃ¡d (viÄ. Obr. 2)."
76,312,0.411,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Osnovu na osi x vytvÃ¡rajÃº danÃ© dÃ¡ta: 1.1, 1.3, 1.5, 1.6, .... . Osnovu na osi tvoria body â¦ , ktorÃ© (v desatinnom rozvoji a po zaokrÃºhlenÃ­) sa rovnajÃº postupne 0.0385, 0.1154, 0.1923, 0.2692, ... . PretoÅ¾e 0.25 (ide o dolnÃ½ kvartil!) leÅ¾Ã­ medzi 0.1923 a 0.2692, tak 0.25-kvantil Ì leÅ¾Ã­ medzi , t. j. medzi 1.5 a 1.6. PresnÃº hodnotu nÃ¡jdeme lineÃ¡rnym interpolovanÃ­m, resp. jednoducho uplatnenÃ­m Ãºmernosti:"
135,219,0.41,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"V sekvennom diagrame na obrÃ¡zku 3-7 sÃº oba filtre aktÃ­vne, priom zdroj Ãºdajov a dÃ¡tovÃ½ spotrebi sÃº pasÃ­vne. Medzi dvoma aktÃ­vnymi filtrami je umiestnenÃ½ dÃ¡tovod s vyrovnÃ¡vacou pamÃ¤ou. V diagrame je znÃ¡zornenÃ¡ situÃ¡cia, kedy oba filtre zaÃ­najÃº svoju prÃ¡cu volanÃ­m procedÃºry read na vstupe, ktorÃ½m je pre filter 1 zdroj Ãºdajov a pre filter 2 dÃ¡tovod."
76,393,0.41,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"(v takej situÃ¡cii sÃº Äasto a zÃ¡vislÃ© prÃ¡ve preto, Å¾e sa tÃ½kajÃº toho istÃ©ho objektu). Pre konkrÃ©tnu predstavu, vezmime situÃ¡ciu, keÄ veliÄina predstavuje hodnotu cholesterolu muÅ¾a pred diÃ©tou a hodnotu cholesterolu toho istÃ©ho muÅ¾a po diÃ©te, napr. po 3 mesiace trvajÃºcej riadenej Ãºprave jedÃ¡lniÄka. Do experimentu je zapojenÃ½ch 20 muÅ¾ov (nefajÄiaâª a majÃº rov) vo veku medzi 40 a 50 rokov, ktorÃ½ch BMI sa nachÃ¡dza v intervale â© pribliÅ¾ne rovnakÃº pohybovÃº aktivitu."
369,203,0.41,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"CVIÄENIA 3.1. RozÅ¡Ã­rte model malej obchodnej firmy na obr. 3.2 tak, aby umoÅ¾Åoval evidenciu inÅ¡tanciÃ­ produktov s ich vÃ½robnÃ½mi ÄÃ­slami. 3.2. ÃÄtovnÃ­ctvo rozliÅ¡uje tzv. syntetickÃ© a analytickÃ© ÃºÄty. SyntetickÃ½ ÃºÄet zodpovedÃ¡ ÃºÄtu z ÃºÄtovej osnovy. AnalytickÃ½ ÃºÄet vznikne dekompozÃ­ciou syntetickÃ©ho ÃºÄtu, resp. inÃ©ho analytickÃ©ho ÃºÄtu. PrÃ­kladom syntetickÃ©ho ÃºÄtu je ÃºÄet Ä. 221 BankovÃ© ÃºÄty. PrÃ­kladmi analytickÃ½ch ÃºÄtov sÃº 221.1 a 221.2, kde prvÃ½ z analytickÃ½ch ÃºÄtov zodpovedÃ¡ bankovÃ©mu ÃºÄtu firmy vedenom v jednej banke a druhÃ½ bankovÃ©mu ÃºÄtu v inej banke. MÃ¡ Älenenie na syntetickÃ© a analytickÃ© ÃºÄty vÃ½znam zo softvÃ©rovÃ©ho hÄ¾adiska? Ak Ã¡no, doplÅte ho do modelu ÃºÄtovnÃ­ctva. 3.3. DoplÅte do vzoru PodvojnÃ© ÃºÄtovnÃ­ctvo koncoroÄnÃº ÃºÄtovÃº uzÃ¡vierku. Pri koncoroÄnej uzÃ¡vierke sa koneÄnÃ© stavy ÃºÄtov nÃ¡kladov a vÃ½nosov prevedÃº podvojnÃ½m zaÃºÄtovanÃ­m na jeden cieÄ¾ovÃ½ ÃºÄet: 710 ÃÄet ziskov a strÃ¡t. NÃ¡klady a vÃ½nosy sa pritom zaznamenÃ¡vajÃº na opaÄnÃ© strany tohto ÃºÄtu: nÃ¡klady na stranu MÃ¡ daÅ¥, vÃ½nosy na stranu Dal. Stav ÃºÄtu 710 tak vyjadruje celkovÃ½ hospodÃ¡rsky vÃ½sledok: zisk, resp. stratu firmy. Analogicky sa prevedÃº na inÃ½ cieÄ¾ovÃ½ ÃºÄet, 702 KoneÄnÃ½ ÃºÄet sÃºvahovÃ½, ÃºÄty foriem a zdrojov majetku. Formy majetku sa prevedÃº na stranu MÃ¡ daÅ¥, zdroje majetku na stranu Dal. Napokon sa na 702 KoneÄnÃ½ ÃºÄet sÃºvahovÃ½ prevedie hospodÃ¡rsky vÃ½sledok (po zdanenÃ­) z ÃºÄtu 710 ÃÄet ziskov a strÃ¡t. Zisk sa prevÃ¡dza na stranu Dal, strata na stranu MÃ¡ daÅ¥. 3.4. DoplÅte do modelu ÃºÄtovnÃ­ctva problematiku platieb v zahraniÄnej mene. (PoznÃ¡mka: ÃºÄtovnÃ­ctvo sa primÃ¡rne musÃ­ viesÅ¥ v domÃ¡cej mene.) 3.5. Aplikujte podvojnÃ© ÃºÄtovnÃ­ctvo na objekty teritoriÃ¡lnej firmy: Objekty sa presÃºvajÃº medzi ÃºzemnÃ½mi poboÄkami tejto firmy. Prijmeme pritom zjednoduÅ¡enÃ½ predpoklad, Å¾e objekty nevznikajÃº a nezanikajÃº. 3.6. V tabuÄ¾ke 3.3 a 3.4 sme naÄrtli spÃ´sob ÃºÄtovania vystavenia a platby vystavenej faktÃºry. RozÅ¡Ã­rte model malej obchodnej firmy na obr. 3.2 o deklaratÃ­vne prepojenie s ÃºÄtovnÃ­ckym systÃ©mom. 3.7. RozÅ¡Ã­rte model malej obchodnej firmy na obr. 3.2 o ponukovÃ½ katalÃ³g s cenami produktov. 3.8. DoplÅte vzor na obr. 3.50, aby zahÅÅal aj zÄ¾avnenÃ© operÃ¡cie. 3.9. DoplÅte vzor na obr. 3.50, aby umoÅ¾Åoval vytvÃ¡raÅ¥ produkty aj zo zloÅ¾enÃ½ch produktov."
94,88,0.409,Sprievodca svetom vedeckÃ©ho publikovania,"s istou nedÃ´verou pre jej nestÃ¡losÅ¥ â nepovaÅ¾ovali elektronickÃº publikÃ¡ciu za rovnocennÃº tlaÄenej (Harnard 1995). V sÃºÄasnosti prebieha explozÃ­vny rozvoj elektronickÃ½ch Äasopisov a otvorenÃ©ho prÃ­stupu (Open Access, viac v kapitole 6), avÅ¡ak sprevÃ¡dzanÃ½ aj negatÃ­vnymi javmi v podobe pirÃ¡tstva (viac v kapitole 5) a predÃ¡torskÃ©ho publikovania (predatory, scam, questionable journals)."
276,117,0.409,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"8 DynamickÃ© smerovanie pomocou OSPF Na rozdiel od predchÃ¡dzajÃºcich dvoch protokolov (RIP a EIGRP) je OSPF (Open Shortest Path First) zÃ¡stupcom tzv. âlink-stateâ dynamickÃ½ch smerovacÃ­ch protokolov. VyznaÄuje sa tÃ½m, Å¾e kaÅ¾dÃ½ smerovaÄ si udrÅ¾uje stav celej topolÃ³gie a mÃ´Å¾e si samostatne vypoÄÃ­taÅ¥ najvÃ½hodnejÅ¡iu cestu do cieÄ¾ovej siete. V tejto kapitole si precviÄÃ­me zÃ¡kladnÃº konfigurÃ¡ciu protokolu OSPF na zabezpeÄenie dynamickej vÃ½meny smerovacÃ­ch informÃ¡ciÃ­ medzi smerovaÄmi s viacerÃ½mi OSPF oblasÅ¥ami, ovplyvnÃ­me voÄ¾bu Å¡pecializovanÃ©ho DR (Designated Router) smerovaÄa v prepÃ­nanÃ½ch nastavÃ­me"
393,192,0.409,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Algoritmus. 1. Vytvor mnoÅ¾inu Ux prvÃ½ch x pouÅ¾Ã­vateÄ¾ov s najvyÅ¡Å¡Ã­m poÄtom hlasovanÃ­ 2. Pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a B â Ux vytvor mnoÅ¾inu CÎ(A,B) (|CÎ(A,B)| â¤ Î) objektov, pre ktorÃ© hlasovali A aj B. 3. VypoÄÃ­taj D(A, B) pomocou mnoÅ¾iny CÎ(A,B) 4. VloÅ¾ pouÅ¾Ã­vateÄ¾a B do zoznamu pouÅ¾Ã­vateÄ¾ov usporiadanÃ©ho podÄ¾a rastÃºcej vzdialenosti od pouÅ¾Ã­vateÄ¾a A. 5. Vytvor mnoÅ¾inu pouÅ¾Ã­vateÄ¾ov K vybratÃ­m prvÃ½ch z pouÅ¾Ã­vateÄ¾ov z usporiadanÃ©ho zoznamu pouÅ¾Ã­vateÄ¾ov. 6. Pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a z K vyber t najlepÅ¡ie ohodnotenÃ½ch dokumentov, pre ktorÃ© pouÅ¾Ã­vateÄ¾ hlasoval, ale A nehlasoval. 7. VrÃ¡Å¥ zjednotenÃº mnoÅ¾inu t najlepÅ¡ie ohodnotenÃ½ch dokumentov vybranÃ½ch na zÃ¡klade priemernÃ©ho hlasovania vÅ¡etkÃ½ch pouÅ¾Ã­vateÄ¾ov z K."
43,497,0.409,Objektovo orientovanÃ© programovanie v C++,"V poslednom prÃ­klade tejto kapitoly si ukÃ¡Å¾eme, ako mÃ´Å¾eme pouÅ¾iÅ¥ niektorÃ© algoritmy PrÃ­klad. Majme vektor obsahujÃºci nejakÃ½ poÄet nÃ¡hodne vygenerovanÃ½ch bodov v rovine. Zistime, koÄ¾ko z tÃ½chto bodov sa nachÃ¡dza v jednotkovej kruÅ¾nici so stredom v bode (0,0), ktorÃ½ bod je od bodu (0,0) najvzdialenejÅ¡Ã­ a nakoniec usporiadajme body podÄ¾a ich vzdialenosti od poÄiatku sÃºradnicovej sÃºstavy. Rozbor rieÅ¡enia. V programe deï¬nujeme triedu bod reprezentujÃºcu bod v rovine a vektor B typu bod. Äalej pouÅ¾ijeme niekoÄ¾ko funkciÃ­ z kniÅ¾nice algorithm. Body leÅ¾iace v jednotkovej kruÅ¾nici spoÄÃ­tame pomocou funkcie count if, ktorÃ¡ poÄÃ­ta prvky Å¡truktÃºry spÄºÅajÃºce urÄitÃº podmienku. TÃ¡to podmienka je danÃ¡ unÃ¡rnou funkciou vracajÃºcou pravdivostnÃº hodnotu â v naÅ¡om prÃ­pade to bude funkcia Test vracajÃºca hodnotu true v prÃ­pade, ak bod, ktorÃ½ je jej argumentom, leÅ¾Ã­ vnÃºtri jednotkovej kruÅ¾nice so stredom v bode (0,0), a hodnotu false v opaÄnom prÃ­pade. Bod"
43,275,0.409,Objektovo orientovanÃ© programovanie v C++,"CviÄenia 1. Vytvorte triedu rastlina, ktorÃ¡ bude maÅ¥ tri Ãºdaje â nÃ¡zov, minimÃ¡lnu teplotu, ktorÃº rastlina potrebuje a maximÃ¡lnu teplotu, ktorÃº znesie. Tieto tri Ãºdaje sa nastavia v konÅ¡truktore, zvyÅ¡nÃº ÄasÅ¥ objektovej Å¡truktÃºry doplÅte sami. V programe vytvorte dynamickou alokÃ¡ciou dva objekty triedy rastlina. Potom rozhodnite, Äi by ste tieto dve rastliny mohli pestovaÅ¥ na jednom mieste (podÄ¾a minimÃ¡lnej a maximÃ¡lnej teploty, ktorÃº znesÃº). 2. Vytvorte triedu autobus, ktorÃ¡ bude maÅ¥ tieto Ãºdaje: â¢ identiï¬kaÄnÃ© ÄÃ­slo autobusu â¢ ÄÃ­slo linky â¢ poÄet miest â¢ pojazdnosÅ¥ â¢ Ãºdaj, Äi je autobus voÄ¾nÃ½ ÄalÅ¡iu Å¡truktÃºru triedy (jej metÃ³dy) navrhnite sami. Program naÄÃ­ta zoznam autobusov do dynamicky alokovanÃ©ho poÄ¾a, buÄ z klÃ¡vesnice alebo zo sÃºboru. Na niektorej linke vypadol autobus a treba poslaÅ¥ zÃ¡loÅ¾nÃ½. Program naÄÃ­ta ÄÃ­slo linky a poÄet miest, ktorÃ© by autobus mal maÅ¥. Potom nÃ¡jde v zozname, Äi je voÄ¾nÃ½ nejakÃ½ pojazdnÃ½ autobus, ktorÃ½ mÃ¡ danÃº kapacitu. Prednostne vyhÄ¾adÃ¡, Äi je voÄ¾nÃ½ autobus, ktorÃ½ jazdÃ­ na danej linke, ak nie, aÅ¾ potom hÄ¾adÃ¡ aj medzi ostatnÃ½mi. VypÃ­Å¡e prvÃ½ voÄ¾nÃ½ autobus, ktorÃ½ spÄºÅa danÃ© podmienky. 3. Predstavte si, Å¾e pracujete v nÃ­zkonÃ¡kladovÃ½ch aerolÃ­niÃ¡ch a vaÅ¡ou Ãºlohou je stanoviÅ¥ ceny leteniek pre rÃ´zne lety. VaÅ¡a cenovÃ¡ politika je takÃ¡, Å¾e niekoÄ¾ko miest v lietadle sa predÃ¡ za nÃ­zke akciovÃ© ceny a zvyÅ¡ok miest za plnÃ© ceny tak, aby mnoÅ¾stvo utÅÅ¾enÃ½ch peÅazÃ­ prevÃ½Å¡ilo nÃ¡klady na let. KaÅ¾dÃ½ let je danÃ½ niekoÄ¾kÃ½mi Ãºdajmi: â¢ miesto odletu â¢ miesto prÃ­letu â¢ poÄet miest v lietadle â¢ poÄet miest za akciovÃº cenu â¢ akciovÃ¡ cena â¢ poÄet miest za plnÃº cenu â¢ plnÃ¡ cena"
184,119,0.409,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ArchitektÃºra sprostredkovateÄ¾ HlavnÃ© komponenty vzoru SprostredkovateÄ¾ sÃº znÃ¡zornenÃ© na obrÃ¡zku 2-18. Jeho kÄ¾ÃºÄovÃ½mi vlastnosÅ¥ami sÃº: Â Hub-and-spoke architektÃºra: SprostredkovateÄ¾ predstavuje hub, na ktorÃ½ sa pripÃ¡jajÃº odosielatelia a prijÃ­matelia. Spojenia na sprostredkovateÄ¾a sa realizujÃº cez porty asociovanÃ© s urÄitÃ½m formÃ¡tom sprÃ¡vy."
76,240,0.409,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"PretoÅ¾e variancia je strednÃ¡ hodnota kvadratickej odchÃ½lky, var( ) = E[( ) ], je jasnÃ©, Å¾e vlastnosti operÃ¡tora E sa prejavia na vlastnostiach variancie. PrÃ¡ve sme pouÅ¾ili oznaÄenie E[( ) ] namiesto presnÃ©ho E[( ( )) ] â toto zjednoduÅ¡enie, keÄ namiesto E( ) pÃ­Å¡eme E , budeme pouÅ¾Ã­vaÅ¥, v snahe zÄ¾ahÄiÅ¥ ÄitateÄ¾nosÅ¥ niektorÃ½ch vÃ½razov. 4.2.5 Veta (Vlastnosti variancie) Nech , sÃº nÃ¡hodnÃ© veliÄiny na tom istom pravdepodobnostnom priestore a existujÃº var( ), var( ). Potom platÃ­: 1. var( ) ï³ 0, pre kaÅ¾dÃº nÃ¡hodnÃº veliÄinu . 2. var("
240,72,0.408,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 1-16 DoplÅte chÃ½bajÃºce Äasti nasledujÃºceho programu, ktorÃ½ pomocou smernÃ­kov vymenÃ­ hodnoty dvoch premennÃ½ch a vypÃ­Å¡e najskÃ´r ich pÃ´vodnÃ© a potom aj ich vymenenÃ© hodnoty na vÃ½stup podÄ¾a uvedenej ukÃ¡Å¾ky vstupu a vÃ½stupu."
76,116,0.408,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"pravdepodobnostnou funkciou, je diskrÃ©tna nÃ¡hodnÃ¡ veliÄina definovanÃ¡. TakÃ½to prÃ­stup ilustruje nasledujÃºci prÃ­klad. 2.1.5 PrÃ­klad. Nech ïN je prirodzenÃ© ÄÃ­slo a funkcia UrÄme konÅ¡tantu tak, aby kej nÃ¡hodnej veliÄiny."
59,415,0.407,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"8 TeÃ³ria argumentÃ¡cie 8.1 Argumenty ArgumentÃ¡cia patrÃ­ medzi dÃ´leÅ¾itÃ© aspekty Ä¾udskej inteligencie. IntegrÃ¡lna sÃºÄasÅ¥ rÃ´znych profesionÃ¡lnych aktivÃ­t je porovnÃ¡vanie a analyzovanie argumentÃ¡cie, hÄ¾adanie jej kÄ¾ÃºÄovÃ½ch zloÅ¾iek, ktorÃ© sÃº dÃ´leÅ¾itÃ© pre jej dÃ´kaz alebo vyvrÃ¡tenie. V sÃºÄasnej anglosaskej kultÃºre existuje uÅ¾ dlhodobÃ¡ tradÃ­cia pestovaÅ¥ argumentÃ¡ciu v rÃ¡mci rÃ©toriky a teoretickÃ½ch zÃ¡kladov prÃ¡vnych vied, kde sÃº Å¡tudovanÃ© formÃ¡lne zÃ¡klady argumentÃ¡cie, t. j. ako je reprezentovanÃ½ argument, Äo je protiargument k danÃ©mu argumentu, ako sa vytvÃ¡ra protiargument, akÃ¡ je zÃ¡vislosÅ¥ medzi argumentom a protiargumentom, a pod. TeÃ³ria argumentÃ¡cie sa do nedÃ¡vna rozvÃ­jala nezÃ¡visle [1- 6] od logiky, jej pojmovÃ©ho a argumentaÄnÃ©ho aparÃ¡tu; bola vytvÃ¡ranÃ¡ na filozofujÃºcej fenomenologickej Ãºrovni, priÄom poznatky logiky boli zvÃ¤ÄÅ¡a ignorovanÃ©. V priebehu ostatnÃ½ch 20 aÅ¾ 30 rokov bol tento tradicionalistickÃ½ fenomenologickÃ½ prÃ­stup nahradenÃ½ aplikÃ¡ciami metÃ³d matematickej logiky, ktorÃ© tvoria efektÃ­vny rÃ¡mec pre vznik logickej teÃ³rie argumentÃ¡cie. MÃ´Å¾eme konÅ¡tatovaÅ¥, Å¾e modernÃ¡ teÃ³ria argumentÃ¡cie [1] je aplikÃ¡cia matematickej logiky k Å¡pecifikÃ¡cii a analÃ½ze jednotlivÃ½ch pojmov, technÃ­k a metÃ³d argumentÃ¡cie. Tento prÃ­stup umoÅ¾Åuje v rÃ¡mci matematickej logiky Å¡tudovaÅ¥ teÃ³riu argumentÃ¡cie ako aplikovanÃº logickÃº disciplÃ­nu. Pod argumentom budeme rozumieÅ¥ logickÃº Å¡truktÃºru, ktorÃ¡ obsahuje: ï· poznatkovÃº databÃ¡zu (podporu) reprezentovanÃº mnoÅ¾inou formÃºl ï ï½ ï»ïª1 ,ïª2 ,...,ïªn ï½ ï ï , kde univerzÃ¡lna mnoÅ¾ina ï ï½ ï»ïª,ïªï¢,...ï½ obsahuje formuly, ktorÃ© nie sÃº kontradikcie, priÄom sa nepoÅ¾aduje, aby tÃ¡to mnoÅ¾ina bola konzistentnÃ¡ ï· metÃ³du inferencie, pomocou ktorej zostrojÃ­me pomocou formÃºl z podpory ï ï· zÃ¡ver ï¡. Inferenciu mÃ´Å¾eme formÃ¡lne vyjadriÅ¥ pomocou schÃ©my ïª1 ,ïª2 ,...,ïªn (8.1) V hornej Äasti tejto schÃ©my sÃº predpoklady aï¡ v dolnej Äasti je zÃ¡ver. Typ inferencie mÃ´Å¾e byÅ¥ veÄ¾mi rÃ´znorodÃ½, napr. deduktÃ­vna inferencia, analogickÃ¡ inferencie, abdukcia, indukcia a pod. V tejto kapitole sa budeme zaoberaÅ¥ len klasickou deduktÃ­vnou inferenciou, ktorÃ¡ je zaloÅ¾enÃ¡ na zÃ¡sadÃ¡ch klasickej vÃ½rokovej logiky. To znamenÃ¡, Å¾e naÅ¡a vÃ½chodiskovÃ¡ pozÃ­cia pri konÅ¡trukcii teÃ³rie usudzovania je, Å¾e deduktÃ­vna schÃ©ma usudzovania (8.1), ktorÃº mÃ´Å¾eme stotoÅ¾niÅ¥ s nejakou schÃ©mou usudzovania prirodzenej dedukcie z kapitoly 4.1. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e zÃ¡ver ï¡ je logickÃ½ dÃ´sledok predpokladov z mnoÅ¾iny ï, ï ï¡ . DefinÃ­cia 8.1. Argument je usporiadanÃ¡ dvojica A ï½ ï¨ ï ,ï¡ ï© , kde ï ï ï je podmnoÅ¾ina formÃºl z ï, ktorÃ¡ vyhovuje podmienkam: (1) ï ï (podmienka konzistentnosti), (2) ï ï¡ (z podmnoÅ¾iny ï logicky vyplÃ½va formula ï¡), (3) ï je minimÃ¡lna mnoÅ¾ina vyhovujÃºca podmienke (2) (staÄÃ­, ak odstrÃ¡nime jeden prvok podmnoÅ¾iny ï a prestane platiÅ¥ podmienka ï ï¡ ). Formula ï¡ sa nazÃ½va dÃ´sledok argumentu a podmnoÅ¾ina ï sa nazÃ½va podpora (support) argumentu."
240,354,0.407,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"ViacrozmernÃ© polia ako argumenty funkciÃ­ PremennÃº dvojrozmernÃ©ho (alebo viacrozmernÃ©ho) poÄ¾a mÃ´Å¾eme tieÅ¾ pouÅ¾iÅ¥ ako argument vo funkcii. PripomeÅme, Å¾e pre jednorozmernÃ© polia uvÃ¡dzame typ argumentu ako smernÃ­k (int *pole) alebo ho zapisujeme ako pole (int pole[]), v prÃ­pade viacrozmernÃ½ch polÃ­ musÃ­me uviesÅ¥ vÅ¡etky rozmery okrem prvÃ©ho, ktorÃ½ je nepovinnÃ½ (ale mÃ´Å¾eme ho uviesÅ¥ ako pomÃ´cku pre programÃ¡tora), teda pre pole p rozmerov 3 x 4 to je argument int pole[3][4] alebo int pole[][4]. NasledujÃºci program definuje a inicializuje pole p veÄ¾kosti 3 x 4 a pouÅ¾itÃ­m funkcie vypis() ho vypÃ­Å¡e, vÅ¡imnite si inicializÃ¡ciu poÄ¾a (nemusÃ­, ale mÃ´Å¾e, obsahovaÅ¥ prvÃ½ rozmer), ako aj typ argumentu vo funkcii vypis():"
184,323,0.407,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"SÃºborovÃ½ systÃ©m AFS Andrew File System (AFS) je bezpeÄnÃ½ globÃ¡lny distribuovanÃ½ systÃ©m, ktorÃ½ poskytuje vlastnosti nezÃ¡vislosti lokÃ¡cie, Å¡kÃ¡lovateÄ¾nosti a poskytuje moÅ¾nosÅ¥ transparentnej migrÃ¡cie dÃ¡t (Wachsmann, 2005). AFS pracuje vo veÄ¾kom poÄte operaÄnÃ½ch systÃ©mov a je pouÅ¾Ã­vanÃ½ mnoÅ¾stvom veÄ¾kÃ½ch webovÃ½ch serverov, na ktorÃ½ch âslÃºÅ¾iâ mnoho rokov. AFS poskytuje mnoÅ¾stvo zaujÃ­mavÃ½ch vlastnostÃ­ nedostupnÃ½ch v inÃ½ch distribuovanÃ½ch systÃ©moch, a to napriek tomu, Å¾e je takmer 20 rokov starÃ½. PÃ´vodne komerÄnÃ½ AFS, bol uvoÄ¾nenÃ½ firmou IBM pre Open Source komunitu v roku 2000, odkedy sa vÄaka tomuto kroku teÅ¡Ã­ pomerne veÄ¾kej popularite. Medzi vlastnosti tohto sÃºborovÃ©ho systÃ©mu patria: Â MultiplatformovosÅ¥ â pracuje na platformÃ¡ch od UNIX, Linux, Compaq, Sun, IBM, Microsoft Windows aÅ¾ pod Mac OS X. Â VÅ¡etky klientske poÄÃ­taÄe pouÅ¾Ã­vajÃº lokÃ¡lne medzipamÃ¤te. ManaÅ¾Ã©r lokÃ¡lnej medzipamÃ¤te sleduje pouÅ¾Ã­vateÄ¾ov na poÄÃ­taÄi a obsluhuje ich poÅ¾iadavky na dÃ¡ta. ZdieÄ¾anie dÃ¡t prostrednÃ­ctvom medzipamÃ¤tÃ­ sa vykonÃ¡va v malÃ½ch kÃºskoch sÃºborov, ktorÃ© sÃº kopÃ­rovanÃ© z AFS na lokÃ¡lny disk. LokÃ¡lnu medzipamÃ¤Å¥ poÄÃ­taÄa zdieÄ¾ajÃº vÅ¡etci pouÅ¾Ã­vatelia toho istÃ©ho poÄÃ­taÄa. Â AFS vyuÅ¾Ã­va globÃ¡lne unikÃ¡tny mennÃ½ priestor, ktorÃ½ je znÃ¡zornenÃ½ na obrÃ¡zku 4-9. KeÄÅ¾e sÃº tieto menÃ¡ unikÃ¡tne a taktieÅ¾ neobsahujÃº menÃ¡ serverov, AFS"
276,58,0.406,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Switch(config)# spanning-tree vlan <zoznam> priority <ÄÃ­slo> Switch(config)# spanning-tree vlan <zoznam> root {primary | secondary} PrvÃ½ prÃ­kaz nastavÃ­ zadanÃº hodnotu ako prioritu prepÃ­naÄa, priÄom povolenÃ© sÃº hodnoty v nÃ¡sobkoch 4096. DruhÃ½ prÃ­kaz s kÄ¾ÃºÄovÃ½m slovom primary nastavÃ­ najniÅ¾Å¡iu prioritu v sieti, podÄ¾a prijatÃ½ch BPDU rÃ¡mcov (pokiaÄ¾ majÃº ostatnÃ© prepÃ­naÄe predvolenÃº hodnotu, tak nastavÃ­ hodnotu o dva stupne niÅ¾Å¡iu, teda 24576). KÄ¾ÃºÄovÃ© slovo secondary zabezpeÄÃ­ nastavenie priority na hodnotu o jeden stupeÅ niÅ¾Å¡iu od predvolenej, teda 28672. DruhÃ½ prÃ­kaz je v podstate makro, ktorÃ© sa spÃºÅ¡Å¥a jednorazovo, a teda nedokÃ¡Å¾e vÅ¾dy garantovaÅ¥, Å¾e sa danÃ© zariadenie stane root bridge prepÃ­naÄom. Preto sa odporÃºÄa pouÅ¾Ã­vanie prvÃ©ho prÃ­kazu. Nastavenie lokÃ¡lnej ceny linky a priority portu sa realizuje v konfiguraÄnom reÅ¾ime pre konkrÃ©tny port. PredvolenÃ¡ cena linky je odvodenÃ¡ od rÃ½chlosti prenosovÃ©ho mÃ©dia v nastaveniach portu (napr. pre 100 Mb/s je cena linky 19)."
276,67,0.406,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Router# erase startup-config Router# erase nvram: PreferovanÃ½ je prvÃ½ prÃ­kaz, lebo pri pouÅ¾Ã­vanÃ­ druhÃ©ho sa nÃ¡m jednoducho mÃ´Å¾e staÅ¥, Å¾e namiesto nvram: zadÃ¡me flash: a vymaÅ¾eme sÃºbor operaÄnÃ©ho systÃ©mu. KonfigurÃ¡cia hesiel, konzolovÃ©ho aj vzdialenÃ©ho prÃ­stupu na smerovaÄ je rovnakÃ¡ ako v prÃ­pade prepÃ­naÄa. Rozdiel je v tom, Å¾e IP adresu na smerovaÄi nastavujeme priamo na fyzickÃ© rozhranie a toto rozhranie treba zapnÃºÅ¥ (predvolene sÃº rozhrania smerovaÄa vypnutÃ©), napr.:"
135,156,0.405,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Spolonos IBM vytvorila technolÃ³giu System Object Model (SOM) (Dansforth, 1994), ktorÃ¡ adresuje vekÃº as nedostatkov, ktorÃ© priÅ¡li s objektovo orientovanÃ½mi jazykmi. SOM obsahuje flexibilnÃ½ objektovÃ½ model, ktorÃ©ho dve hlavnÃ© vÃ½hody sÃº binÃ¡rna kompatibilita novÅ¡Ã­ch verziÃ­ kniÅ¾nice so starÅ¡Ã­mi a moÅ¾nos znovupouÅ¾itia kniÅ¾nice objektov v inÃ½ch (aj procedurÃ¡lnych) programovacÃ­ch jazykoch bez ohadu na jazyk, v ktorom bola kniÅ¾nica vytvorenÃ¡. SOM umoÅ¾uje vÃ½vojÃ¡rom implementova objekty v ich preferovanom programovacom jazyku, priom vÃ½stupy budÃº pouÅ¾itenÃ© aj v ostatnÃ½ch jazykoch. ObjektovÃ½ model SOM je oddelenÃ½ od objektovÃ½ch modelov konkrÃ©tnych programovacÃ­ch jazykov a umoÅ¾uje tak prida objektovÃ© mechanizmy aj do procedurÃ¡lnych jazykov; existujÃº implementÃ¡cie pre C a Cobol."
367,3,0.405,CESTA K OTVORENEJ VEDE,"3. PrÃ­prava na ÄinnosÅ¥ po zÃ¡vereÄnej prÃ¡ci, zapojenie sa do hnutia otvorenej vedy n VerejnÃ© politiky . ........................................................... p.30 n NovÃ© spÃ´soby hodnotenia vÃ½skumu . ............................ p. 32"
184,455,0.404,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"presnosÅ¥ a pokrytie po jednotlivÃ½ch dokumentoch prieniku pre prvÃ½ prienik by sme dostali P = 100% (jeden vÃ½ber a relevantnÃ½ dokument) a R = 10% (mÃ¡me 1 relevantnÃ½ z 10-tich relevantnÃ½ch), pre druhÃ½ vÃ½ber P = 100% a R = 20% , pre tretÃ­ P = 50% (mÃ¡me tri dokumenty sprÃ¡vne zo Å¡iestich vybranÃ½ch) a R = 30% , atÄ. VÃ½sledky sa nachÃ¡dzajÃº v nasledujÃºcej tabuÄ¾ke 6-1 a na obrÃ¡zku 6-5, ktorÃ½ hovorÃ­ o vzÅ¥ahu medzi pokrytÃ­m a presnosÅ¥ou."
130,424,0.404,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"StatickosÅ¥ prostredia. Stav prostredia je povaÅ¾ovanÃ½ za nemennÃ½ a mÃ´Å¾u ho ovplyvÅovaÅ¥ iba akcie agentov. Ak chceme modelovaÅ¥ zmeny prostredia, ktorÃ© sa dejÃº bez zÃ¡sahu agentov, je potrebnÃ© pridaÅ¥ âagent prostredieâ, ktorÃ½ by danÃ© zmeny vykonÃ¡val."
135,281,0.404,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"106 Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informanÃ½ch systÃ©mov ProgramovacÃ­m jazykom tohto stroja je Fortran D s podporou viacerÃ½ch nÃ¡strojov na vÃ½voj a ladenie paralelnÃ½ch programov, napr. D Editor poskytuje spÃ¤tnÃº vÃ¤zbu o paralelizme a komunikÃ¡cii; dPablo Performance Browser zobrazuje a spracovÃ¡va nazbieranÃ© informÃ¡cie o vÃ½kone."
59,41,0.404,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Tento vzÅ¥ah pre aktivitu logickÃ©ho neurÃ³nu mÃ´Å¾eme alternatÃ­vne interpretovaÅ¥ tak, Å¾e excitaÄnÃ© aktivity vstupujÃº do neurÃ³nu cez spoje, ktorÃ© sÃº ohodnotenÃ© jednotkovÃ½m vÃ¡hovÃ½m koeficientom (w = 1), zatiaÄ¾ Äo inhibiÄnÃ© aktivity vstupujÃº do neurÃ³nu cez spoje so zÃ¡pornÃ½m jednotkovÃ½m vÃ¡hovÃ½m koeficientom (w = -1). Potom vÃ½stupnÃº aktivitu logickÃ©ho neurÃ³nu mÃ´Å¾eme vyjadriÅ¥ takto ï¦ m (2.4) y ï½ s ï¨ w1 x1 ï« ... ï« wm xm ï« ïï©ï½ s ï§ ï¥ wi xi ï« ï ï· ï¨ i ï½1 JednoduchÃ¡ implementÃ¡cia elementÃ¡rnych BooleovÃ½ch funkciÃ­ disjunkcie, konjunkcie, implikÃ¡cie a negÃ¡cie je znÃ¡zornenÃ¡ na Obr. 2.2. Ako ilustratÃ­vny prÃ­klad Å¡tudujme funkciu disjunkcie pre n = 2, pouÅ¾itÃ­m formÃºl z definÃ­cie logickÃ©ho neurÃ³nu dostaneme (2.5) yOR ï¨ x1 ,x2 ï© ï½ s ï¨ x1 ï« x2 ï­ 1ï© FunkÄnÃ© hodnoty tejto Booleovej funkcie sÃº ukÃ¡zanÃ© v Tab. 2.1. TabuÄ¾ka 2.1. BinÃ¡rna Booleova funkcia disjunkcie yOR(x1,x2) x1ï x2 s(-1) Z tabuÄ¾ky vyplÃ½va, Å¾e Booleova funkcia yOR simuluje Booleovu funkciu disjunkcie."
239,104,0.404,Ãvod do matematickej logiky,"VsÌimnime si, zÌe prvotneÌ formuly sa v Hasseho diagrame nachaÌdzajuÌ kdesi v strede, teda to nie suÌ atoÌmy Booleovej algebry. To preto, lebo na j-tej uÌrovni diagramu (pocÌÄ±ÌtaneÌ odspodu, pricÌom 0 je na nultej uÌrovni) maÌme vyÌrazy, ktoreÌ zodpovedajuÌ mnozÌinaÌm obsahujuÌcim praÌve j najmensÌÄ±Ìch podmnozÌÄ±Ìn, na ktoreÌ naÌm rozbili univerzum P1 , P2 , . . . , Pn . VraÌtâme sa esÌte k ObraÌzku 14. KtoreÌ vyÌrazy v nÌom zodpovedajuÌ tautoloÌgiaÌm, ktoreÌ kontradikciaÌm a ktoreÌ splnitelânyÌm formulaÌm? V nasledujuÌcich dvoch podkapitolaÌch budeme, tak ako v predchaÌdzajuÌcom prÄ±Ìklade, pouzÌÄ±Ìvatâ namiesto logickyÌch spojok â§, â¨ a q operaÌcie Booleovej algebry."
135,186,0.403,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,3.1 Prehad architektÃºr softvÃ©ru Na rÃ´zne triedy problÃ©mov boli vytvorenÃ© rÃ´zne zodpovedajÃºce architektÃºry ako vÃ½sledky vÃ½voja snÃ¡h o navrhnutie rieÅ¡enÃ­ na Å¡pecifikovanÃ© problÃ©my. NasledujÃºce podkapitoly budÃº pojednÃ¡va o opise architektÃºr a architektonickÃ½ch Å¡tÃ½loch.
135,151,0.403,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.4.1 Enterprise JavaBeans Enterprise JavaBean (EJB) je sÃºiastkovÃ½ model zaloÅ¾enÃ½ na jazyku Java zameranÃ½ na komplexnÃ© podnikovÃ© systÃ©my. Bol vyvinutÃ½ s cieom rÃ½chleho a jednoduchÃ©ho vÃ½voja distribuovanÃ½ch, transaknÃ½ch, bezpenÃ½ch a prenosnÃ½ch aplikÃ¡ciÃ­ zaloÅ¾enÃ½ch na platforme Java. Model EJB bol vytvorenÃ½ pre tzv. âklient-serverâ prostredie. Å pecifikuje architektÃºru na strane servera, ktorÃ¡ zapuzdruje domÃ©novÃº logiku aplikÃ¡cie. SÃºiastky EJB, oznaovanÃ© rovnomenne poda modelu, pÃ´sobia v tzv. kontajneroch EJB, ktorÃ© sÃº sÃºasou aplikanÃ½ch serverov modelu EJB (obrÃ¡zok 2-11). Kontajnery EJB sa starajÃº o Å¾ivotnÃ½ cyklus bÃ´bov a sÃº prostrednÃ­kom medzi domÃ©novou logikou aplikÃ¡cie a prostredÃ­m aplikanÃ©ho servera. SluÅ¾by kontajnera EJB zah ajÃº:"
393,115,0.403,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"IdentifikÃ¡cia pouÅ¾Ã­vateÄ¾a â identifikÃ¡cia pouÅ¾Ã­vateÄ¾a nie je jednoduchÃ¡ Ãºloha, keÄÅ¾e pouÅ¾Ã­vateÄ¾ mÃ´Å¾e na prÃ­stup pouÅ¾iÅ¥ rÃ´zne poÄÃ­taÄe, resp. rÃ´zne prehliadaÄe v rÃ¡mci jednÃ©ho poÄÃ­taÄa. Proxy server spÃ´sobuje problÃ©m, Å¾e vÅ¡etci pouÅ¾Ã­vatelia vyuÅ¾Ã­vajÃºce sluÅ¾by danÃ©ho proxy servera sa na strane koncovÃ©ho servera javia ako jeden pouÅ¾Ã­vateÄ¾. NajjednoduchÅ¡Ã­m rieÅ¡enÃ­m tohto problÃ©mu je spoÄ¾ahnÃºÅ¥ sa na implicitnÃº a explicitnÃº kooperÃ¡ciu pouÅ¾Ã­vateÄ¾a. TaktieÅ¾ je moÅ¾nÃ© pouÅ¾iÅ¥ rÃ´zne modifikovanÃ© prehliadaÄe, resp. Java applety, ktorÃ© mÃ´Å¾u pomÃ´cÅ¥ pri identifikÃ¡cii pouÅ¾Ã­vateÄ¾a. Ak chceme identifikovaÅ¥ pouÅ¾Ã­vateÄ¾a na zÃ¡klade zÃ¡znamov webu, treba pouÅ¾iÅ¥ heuristickÃ© pravidlÃ¡. Je naprÃ­klad rozumnÃ© usudzovaÅ¥, Å¾e rÃ´zny typ agenta pre konkrÃ©tnu IP adresu reprezentuje rÃ´zneho pouÅ¾Ã­vateÄ¾a. ÄalÅ¡ou moÅ¾nosÅ¥ou pre urÄenie konkrÃ©tneho pouÅ¾Ã­vateÄ¾a je pouÅ¾iÅ¥ kombinÃ¡ciu zÃ¡znamov access, referrer a topolÃ³gie strÃ¡nky. V zÃ¡vislosti na rÃ´znych situÃ¡ciÃ¡ch a aplikÃ¡ciÃ¡ch je nutnÃ© pouÅ¾iÅ¥ rÃ´zne heuristickÃ© metÃ³dy. IdentifikÃ¡cia sedenia â za sedenie mÃ´Å¾eme povaÅ¾ovaÅ¥ mnoÅ¾inu kliknutÃ­ pouÅ¾Ã­vateÄ¾a krÃ­Å¾om cez viacerÃ© strÃ¡nky. Sedenie mÃ´Å¾eme definovaÅ¥ naprÃ­klad kombinÃ¡ciou IP adresy, id pouÅ¾Ã­vateÄ¾a, URL adresou ako aj Äasom prÃ­stupu. JednoduchÅ¡ou metÃ³dou je definovanie ÄasovÃ©ho okna, v rÃ¡mci ktorÃ©ho je akcia pouÅ¾Ã­vateÄ¾a povaÅ¾ovanÃ¡ za jedno sedenie. V prÃ­pade, Å¾e pouÅ¾Ã­vateÄ¾ poÄas prezerania prekroÄÃ­ ÄasovÃ½ limit sedenia (vÃ¤ÄÅ¡inou 30 min.), povaÅ¾uje sa za ÄalÅ¡ieho pouÅ¾Ã­vateÄ¾a. IdentifikÃ¡cia transakcie â cieÄ¾om identifikÃ¡cie transakcie je vytvorenie zmysluplnÃ½ch zhlukov referenciÃ­ pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a. IdentifikÃ¡cia transakcie je dÃ´leÅ¾itÃ¡ pre asociaÄnÃ© dolovanie. HeuristickÃ© metÃ³dy, ktorÃ© sa pouÅ¾Ã­vajÃº na identifikÃ¡ciu transakcie sÃº naprÃ­klad: Â identifikÃ¡cia transakcie referenÄnou dÄºÅ¾kou, Â identifikÃ¡cia transakcie maximÃ¡lnou spÃ¤tnou referenciou, Â identifikÃ¡cia transakcie ÄasovÃ½m oknom."
94,184,0.403,Sprievodca svetom vedeckÃ©ho publikovania,"7.1.2 BibliometrickÃ© databÃ¡zy a ich poskytovatelia Medzi kÄ¾ÃºÄovÃ© online nÃ¡stroje citaÄnej analÃ½zy v sÃºÄasnosti patria bibliometrickÃ© databÃ¡zy od spoloÄnosti Clarivate Analytics a od spoloÄnosti Elsevier. 7.1.2.1 Clarivate Analytics Clarivate Analytics je globÃ¡lna informaÄnÃ¡ spoloÄnosÅ¥, ktorÃ¡ na bÃ¡ze predplatnÃ©ho poskytuje prÃ­stup do svojich online zdrojov so zameranÃ­m na vedeckÃ½ a akademickÃ½ vÃ½skum. Poskytuje informÃ¡cie z oblasti biomedicÃ­ny a farmÃ¡cie, ochrany obchodnÃ½ch znaÄiek, patentovej analÃ½zy a riadenia duÅ¡evnÃ©ho vlastnÃ­ctva. Do portfÃ³lia bibliometrickÃ½ch produktov (produktov na hodnotenie VaV) spoloÄnosti Clarivate Analytics patria databÃ¡zy Web"
184,249,0.402,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"UDDI (Universal Description, Discovery and Integration) adresÃ¡r slÃºÅ¾i na vyhÄ¾adÃ¡vanie medzi webovÃ½mi sluÅ¾bami v prÃ­pade Å¾e hÄ¾adÃ¡me konkrÃ©tnu sluÅ¾bu, ktorÃ¡ spÄºÅa naÅ¡e poÅ¾iadavky. Tento systÃ©m sa vÅ¡ak ukÃ¡zal ako nesprÃ¡vna cesta, lebo vÃ½vojÃ¡ri Äasto pre potreby svojich aplikÃ¡ciÃ­ vyvÃ­jajÃº vlastnÃ© webovÃ© sluÅ¾by, prÃ­padne priamo komunikujÃº s dodÃ¡vateÄ¾om, ktorÃ½ tieto sluÅ¾by vyvÃ­ja na mieru. V dneÅ¡nej dobe sa uÅ¾ UDDI nepouÅ¾Ã­va."
135,226,0.402,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"b. nutnosou transformÃ¡cie Ãºdajov, ak sa pouÅ¾Ã­va vÅ¡eobecnÃ½ formÃ¡t na prenos Ãºdajov medzi filtrami, 3. problematickÃ¡ sprÃ¡va chÃ½b, 4. fakt, Å¾e tÃ¡to architektÃºra je pouÅ¾itenÃ¡ len pre istÃ© aplikanÃ© oblasti; prÃ­kladom oblasti, kde je pouÅ¾itenÃ¡ len aÅ¾ko, sÃº systÃ©my vyÅ¾adujÃºce intenzÃ­vnu interakciu s pouÅ¾Ã­vateom."
195,57,0.402,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Krok 8: InterpretÃ¡cia vÃ½sledkov ObrÃ¡zok 2.5 znÃ¡zorÅuje graf vÃ½sledkov presnosti, pokrytia a F1-Å¡tatistiky modelov, ktorÃ© sa vypoÄÃ­tali v kroku 7. Z vÃ½sledkov vyplÃ½va, Å¾e tree bag model dosiahol najlepÅ¡ie hodnoty. PresnosÅ¥"
272,358,0.402,Reconsidering Constitutional Formation Ii Decisive Constitutional Normativity : From Old Liberties To New Precedence (Volume 12.0),"Dihm J (1959) Sprawa Konstytucji Ekonomicznej z 1791 r. (na tle wewnÄtrznej i zagranicznej sytuacji Polski). Komitet Historii Nauki PAN, Monograï¬e z dziejÃ³w nauki i techniki, t. 10, WrocÅaw Figeac M (2014) Alphonse Touissant Joseph Andre Fortia de Piles i Louis Boisgelin de Kerdu: Polska w okresie dekadencji swojego bytu paÅstwowego widziana oczami dwÃ³ch szlachetnie urodzonych emigrantÃ³w. In: MikoÅajewska A, Zientara W (eds) Rzeczpospolita w oczach podrÃ³Å¼nikÃ³w z Francji I Niemiec. Muzeum PaÅacu KrÃ³la Jana III w Wilanowie, Warszawa, pp 45â70 Grodziski S (1983) Sejm dawnej Rzeczypospolitej jako najwyÅ¼szy organ ustawodawczy. Konstytucje sejmowe â pojÄcie i prÃ³ba systematyÌkiy. Czas Prawno-Historyczne XXXV(2): 171â175 (163â175) GrzeÅkowiak-Krwawicz A (2000a) O formÄ rzÄdu czy o rzÄd dusz? Publicystyka polityczna Sejmu Czteroletniego. Instytut BadaÅ Literackich Polskiej Akademii Nauk, ÅÃ³dÅº GrzeÅkowiak-Krwawicz A (2000b) O recepcji idei umowy spoÅecznej w Polsce w czasach stanisÅawowskich. Czas Prawno-Hist LII(1â2):109â125 Hoensch KJ (1997) Citizen, nation, constitution: the realization and failure of the constitution of 3 May 1791 in light of mutual Polish-French influence. In: Fiszman S (ed) Constitution and reform in eighteenth-century Poland. The constitution of 3 May 1791. Indiana University Polish Studies Center: Indiana University Press, Indianapolis, pp 423â451 Izdebski H (1998) Tryb uchwalenia konstytucji 3 Maja. In: Wyrzykowski M (ed) Tryby uchwalania polskich konstytucji. Instytut Spraw Publicznych, Warszawa, pp 9â17 Jakuboszczak A, Sajkowski W (2014) In: MikoÅajewska A, Zientara W (eds) Rzeczpospolita w oczach podrÃ³Å¼nikÃ³w z Francji I Niemiec. Muzeum PaÅacu KrÃ³la Jana III w Wilanowie Rzeczypospolita szlachecka w oczach francuskich preceptorÃ³w w drugiej poÅowie XVIII wieku, Warszawa, pp 71â86 Janeczek Z (2007) Idea wolnoÅci w mowach i pismach Ignacego Potockiego. In: Anusik Z (ed) Spory o paÅstwo w dobie nowoÅ¼ytnej: miÄdzy racjÄ stanu a partykularyzmem. Wydawnictwo Uniwersytetu ÅÃ³dzkiego, ÅÃ³dÅº, pp 201â214 KÄdziela Å (2011) Od konstytucji do insurekcji. Studia nad dziejami Rzeczypospolitej w latach 1791â1794. Wydawnictwo Neriton, Warszawa Kallas M (2001) WstÄpy do polskich konstytucji (1791â1921). In: Gajda E, Sokala A (eds) Honeste vivereâ¦ Ksiega pamiÄtkowa ku czci Profesora WÅadysÅawa Bojarskiego. Wydaw. Uniwersytetu MikoÅaja Kopernika, ToruÅ, pp 515â535 KocÃ³j H (1988) Misja Feliksa Oraczewskiego w ParyÅ¼u podczas Sejmu Wielkiego w Åwietle jego korespondencji ze StanisÅawem Augustem Poniatowskim i Joachimem Chreptiowiczem. In: LityÅski A (ed) W dwusetnÄ rocznicÄ wolnego Sejmu: ludzie - paÅstwo - prawo czasÃ³w Sejmu Czteroletniego. Prace Naukowe Uniwersytetu ÅlÄskiego w Katowicach, Katowice, pp 15â40 KocÃ³j H (1996) Prusy, Austria i Rosja wobec Konstytucji 3 Maja. Zagadnienia wybrane, Katowice KocÃ³j H (ed) (2000) Konstytucja 3 Maja w relacjach posÅa saskiego Franciszka Essena. Wydawnictwo Uniwersytetu JagielloÅskiego, KrakÃ³w KocÃ³j H (2006) Misja posÅa pruskiego Lucchesiniego w Warszawie grudzieÅ 1791 â sierpieÅ 1791. In: Prz Nauk Historycznych 2006, R. V., nr. 1(9), pp 292â322 Kucharski T (2012) Konstytucje âegzorbitancyjneâ w Rzeczypospolitej. Czas Prawno-Historyczne LXIV(2):127â159 Kucharski T (2014) Czy szlachecka Rzeczpospolita miaÅa konstytucjÄ? Przyczynek do rozwaÅ¼aÅ nad wykorzystywaniem ustaleÅ nauki prawa konstytucyjnego do badaÅ historii ustroju. Stud Iurid Thoruniensia XIV:121â146 Kucharski T, Naworski Z (2013) Kilka uwag o najnowszej ocenie artykuÅÃ³w henrykowskich. W zwiÄzku z pracÄ Dariusza MakiÅÅy: ArtykuÅy henrykowskie. Geneza-ObowiÄzywanieStosowanie. Studium historyczno-prawne, wyd. Vizja Press & IT, Warszawa 2012, ss. 562, Czas Prawno-Historyczne 65(2):409â435"
76,404,0.402,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Predpokladajme, Å¾e veliÄinu â dÄºÅ¾ka bezporuchovej prÃ¡ce vÃ½robku, mÃ´Å¾eme povaÅ¾ovaÅ¥ za veliÄinu s normÃ¡lnym rozdelenÃ­m. Na posÃºdenie vierohodnosti vÃ½robcu mÃ´Å¾eme sformulovaÅ¥ testy o strednej hodnote ï­ buÄ v tvare : â¥ 1500 proti : < 1500, resp. v podobe"
130,2,0.401,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Â© MÃ¡ria BielikovÃ¡, Pavol NÃ¡vrat a kol., 2006 Text Design & Composition: MÃ¡ria BielikovÃ¡ Copy Editor: Anton Andrejko Cover Designer: Peter KaminskÃ½ Vydala SlovenskÃ¡ technickÃ¡ univerzita v Bratislave vo VydavateÄ¾stve STU, Bratislava, Vazovova 5."
76,427,0.401,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"PretoÅ¾e Ì = 1469.3, xïK, H0 nezamietame. PrijÃ­mame hypotÃ©zu, Å¾e Å¾ivotnosÅ¥ je aspoÅ 1500 hodÃ­n. NevÃ½hodou takejto formulÃ¡cie testu je, Å¾e nevieme, s akou pravdepodobnosÅ¥ou prijÃ­mame neplatnÃº H0. H0: ï­ ï£ 1500 proti H1: ï­ > 1500"
59,458,0.4,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"nevyplÃ½va z teÃ³rie ï. Nech ï a ï sÃº dve teÃ³rie, potom model ich zjednotenia ï ï ï je prienik ich modelov ïïï ï½ ï ï ï (9.1a) Nech ï a ï sÃº dve teÃ³rie, ktorÃ© vyhovujÃº podmienke ï ï ï , potom vlastnosÅ¥ monotÃ³nnosti implikuje pre ich modely mÃ¡ tvar (9.1b) ï¨ï ï ïï© ï ï¨ ï ï ï ï©"
129,23,0.4,Sprievodca licenciami Creative Commons,"Viac informÃ¡ciÃ­ o CC0 nÃ¡jdete na http://creativecommons.org/about/cc0 ADAMOVÃ, Zuzana, PreÄo a ako licencovaÅ¥ otvorenÃ© dÃ¡ta [online], [cit. 2021-04-09], Alvaria. DostupnÃ© z: https://www.alvaria.sk/licencovanie-otvorenych-dat/ ]"
59,358,0.399,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"schopnÃ½ simulovaÅ¥ reflexÃ­vne uvaÅ¾ovanie zaloÅ¾enom na predikÃ¡tovej logike. PodobnÃ© vÃ½sledky budÃº dosiahnutÃ© aj pomocou formalizmu holografickej distribuovanej reprezentÃ¡cie. daÅ¥(x,z,y)ïvlastniÅ¥(y,z) daÅ¥(Jano,Mariena,kniha) kÃºpiÅ¥(x,y)ïvlastniÅ¥(x,y) kÃºpiÅ¥(Jano,nieÄo)"
59,475,0.399,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"SÃ©mantickÃ½ prÃ­stup k rieÅ¡eniu tohto problÃ©mu je zaloÅ¾enÃ½ na pravdivostnej tabuÄ¾ke 9.2, z ktorej okamÅ¾ite dostÃ¡vame, Å¾e teÃ³ria ï je nekonzistentnÃ¡, t. j. ï ï½ ï . Pre vÅ¡etky moÅ¾nÃ© pravdivostnÃ© hodnoty, nikdy nenastÃ¡va situÃ¡cia, aby kaÅ¾dÃ¡ formula z teÃ³rie bola sÃºÄasne pravdivÃ¡. VytvorenÃ© âpodteÃ³rieâ ïi majÃº tieto modely: ï1ï¢ ï½ ï»ï¨ 0, ï£ ï©ï½ , ïï¢2 ï½ ï»ï¨ 0, ï£ ï© ,ï¨ ï£ ,1ï©ï½ , ïï¢3 ï½ ï»ï¨ï±ï¬ 0 ï©ï½ , ïï¢4 ï½ ï»ï¨ ï£ï¬ï±ï©ï½ PristÃºpime k ârieÅ¡eniuâ rovnice inklÃºzie ïï¢i ï ï£i , dostaneme ï1ï¢ ïp , ïï¢2 p ï q , ïï¢3 ïq , ïï¢4 Pomocou prirodzenej dedukcie znÃ¡zornÃ­me prvÃ½ vÃ½sledok:"
94,353,0.399,Sprievodca svetom vedeckÃ©ho publikovania,"Mapping Science (Eigenfactor) PortÃ¡l Eigenfactor.org umoÅ¾Åuje okrem hodnotenia vedeckÃ½ch Äasopisov aj vizualizovanÃ© porovnÃ¡vanie vednÃ½ch disciplÃ­n (viac o Åom v kapitole 7.1.3.3). AuthorMapper (Springer) AuthorMapper je interaktÃ­vny nÃ¡stroj z produkcie vydavateÄ¾stva Springer na vizualizÃ¡ciu vedeckÃ©ho vÃ½skumu, zaloÅ¾enÃ½ na geografickom mapovanÃ­ autorov a vedeckej literatÃºry. Na portÃ¡li moÅ¾no nÃ¡jsÅ¥ informÃ¡cie uÅ¾itoÄnÃ© pre vedcov, autorov, vydavateÄ¾ov aj kniÅ¾niÄnoinformaÄnÃ½ch pracovnÃ­kov, delenÃ© podÄ¾a vednÃ½ch odborov, krajÃ­n a inÅ¡titÃºciÃ­. K dispozÃ­cii je aj niekoÄ¾ko analytickÃ½ch nÃ¡strojov, naprÃ­klad tag clouds (tagovÃ½ mrak, oblak znaÄiek alebo kÄ¾ÃºÄovÃ½ch slov, ktorÃ© sÃº odlÃ­Å¡enÃ© veÄ¾kosÅ¥ou, prÃ­padne farbou podÄ¾a vÃ½znamu alebo frekvencie vÃ½skytu). Prostredie umoÅ¾Åuje vyhÄ¾adÃ¡vaÅ¥ naprÃ­klad aj podÄ¾a ORCID. K vyhÄ¾adanÃ½m ÄlÃ¡nkom sa zobrazuje prelinkovanie na prÃ­sluÅ¡nÃ½ poÄet citÃ¡ciÃ­ s moÅ¾nosÅ¥ou sledovania histÃ³rie citÃ¡ciÃ­ a citaÄnÃ½ch vzÅ¥ahov. Tento dynamickÃ½ portÃ¡l umoÅ¾Åuje:"
184,436,0.399,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ÄalÅ¡Ã­m problÃ©mom s ktorÃ½m sa musÃ­me vysporiadaÅ¥ pri vÃ½poÄte page rank je pravdepodobnosÅ¥ Å¾e pouÅ¾Ã­vateÄ¾ prestane sledovaÅ¥ sieÅ¥ prepojenÃ­ a odskoÄÃ­ na Ãºplne inÃº webovÃº strÃ¡nku. NaÅ¡a matica S sa nieÄÃ­m takÃ½mto nezaoberÃ¡ a preto, ju musÃ­me upraviÅ¥ nasledovnÃ½m spÃ´sobom. DefinÃ­cia 6-5: Pre Google maticu G = dS + (1 â d ) 1v , kde 0 â¤ d < 1 je vyÅ¡Å¡ie spomÃ­nanÃ½ damping faktor, 1 = (1,1,...,1) je stÄºpcovÃ½ vektor a v = ( v1 , v2 ,..., vn ) je tzv. perzonalizaÄnÃ½ riadkovÃ½ vektor pre ktorÃ½ platÃ­"
40,46,0.398,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Vytvorenie RC ANN s echo stavmi Najprv skonÅ¡truujeme neurÃ³novÃº sieÅ¥ s echo stavmi a nÃ¡sledne zvolÃ­me takÃº veÄ¾kosÅ¥ dynamickÃ©ho rezervoÃ¡ra, aby odrÃ¡Å¾ala potreby Äi uÅ¾ komplexnosti Ãºlohy alebo poÅ¾adovanej presnosti."
41,38,0.398,InformaÄnÃ© vzdelÃ¡vanie,"meradle. Okrem ÄasopiseckÃ½ch ÄlÃ¡nkov a knÃ­h databÃ¡za umoÅ¾Åuje vyhÄ¾adÃ¡vanie v konferenÄnÃ½ch prÃ­spevkoch, trhovÃ½ch sprÃ¡vach, encyklopÃ©diÃ¡ch, slovnÃ­koch a patentoch. DatabÃ¡za Scopus je priamo prepojenÃ¡ s databÃ¡zou ScienceDirect. â ScienceDirect â www.sciencedirect.com , je plnotextovÃ¡ multidisciplinÃ¡rna vedeckÃ¡ databÃ¡za od spoloÄnosti Elsevier. Obsahuje ÄlÃ¡nky z recenzovanÃ½ch Äasopisov, konferenÄnÃ© zbornÃ­ky a elektronickÃ© knihy z medicÃ­ny, techniky, prÃ­rodnÃ½ch vied, ekonomiky i spoloÄenskÃ½ch vied. â Web of Science od spoloÄnosti ClarivateAnalytic â www.webofknowledge.com , bibliografickÃ¡ a citaÄnÃ¡ databÃ¡za, ktorÃ¡ slÃºÅ¾i ako primÃ¡rny zdroj na vyhÄ¾adÃ¡vanie renomovanÃ½ch vedeckÃ½ch informÃ¡ciÃ­ a hodnotenie vedeckej publikaÄnej Äinnosti. Obsahuje 8 hlavnÃ½ch citaÄnÃ½ch indexov. Indexy Web of Science Core Collection obsahujÃº ÄasopiseckÃ© tituly, knihy a konferenÄnÃ© zbornÃ­ky. DatabÃ¡za pokrÃ½va 251 predmetovÃ½ch kategÃ³riÃ­, od prÃ­rodnÃ½ch, technickÃ½ch, lekÃ¡rskych vied aÅ¾ po umenie a humanitnÃ© vedy. â SpringerLink - www.link.springer.com , poprednÃ½ vydavateÄ¾ vedeckej, technickej a medicÃ­nskej literatÃºry, ktorÃ½ dodÃ¡va akademickej obci, vedeckÃ½m inÅ¡titÃºciÃ¡m a jednotlivÃ½m oddeleniam vÃ½s kumu a vÃ½voja kvalitnÃ½ vedeckÃ½ obsah. ProstrednÃ­ctvom databÃ¡zy SpringerLink sprÃ­stupÅuje svoje elektronickÃ© Äasopisy, kniÅ¾nÃ© sÃ©rie, knihy, referenÄnÃ© prÃ¡ce a online archÃ­vy. â ACM Digital Library â http://portal.acm.org , je on-line zbierkou plnotextovÃ½ch ÄlÃ¡nkov a bibliografickÃ½ch zÃ¡znamov v oblasti poÄÃ­taÄov a informaÄnÃ½ch technolÃ³giÃ­. Obsahuje kompletnÃº kolekciu vydavateÄ¾a Association for Computing Machinery (ACM, AsociÃ¡cia pre vÃ½poÄtovÃº techniku) a sprÃ­stupÅuje minimÃ¡lne 400 tisÃ­c plnotextovÃ½ch ÄlÃ¡nkov, 50 Äasopisov s vysokÃ½m impakt faktorom, 270 konferenÄnÃ½ch zbornÃ­kov a 9 vysoko citovanÃ½ch magazÃ­nov v oblasti poÄÃ­taÄovej vedy. DatabÃ¡za zÃ¡roveÅ poskytuje prÃ­stup k minimÃ¡lne 1,6 mil. bibliografickÃ½ch zÃ¡znamov o publikÃ¡ciÃ¡ch inÃ½ch vydavateÄ¾stiev z oblasti vÃ½poÄtovej a komunikaÄnej techniky. â IEEEXplore - https://ieeexplore.ieee.org , ozsiahla plnotextovÃ¡ kolekcia ÄlÃ¡nkov z Äasopisov a konferenÄnÃ½ch zbornÃ­kov z oblasti informaÄnÃ½ch a komunikaÄnÃ½ch technolÃ³giÃ­, elektrotechniky a elektroniky. SprÃ­stupÅuje ÄlÃ¡nky minimÃ¡lne z 190 najcitovanejÅ¡Ã­ch titulov vedeckÃ½ch a odbornÃ½ch Äasopisov spoloÄnosti IEEE (Institute of Electrical and Electronics Engineers) a jej partnerov, Äalej obsahuje minimÃ¡lne 1.800 konferenÄnÃ½ch zbornÃ­kov a 4.000 technickÃ½ch noriem. VedeckÃ© databÃ¡zy mÃ´Å¾u byÅ¥ zameranÃ© na Å¡pecifickÃ© odvetvie vedy, alebo mÃ´Å¾u byÅ¥ multidisciplinÃ¡rne."
76,225,0.398,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ak veliÄina strednÃº hodnotu mÃ¡ (ak ju nemÃ¡, hovorÃ­me, Å¾e var( ) neexistuje). SmerodajnÃº odchÃ½lku ï³( ) definujeme vzÅ¥ahom ï³( ) = â 4.1.13 PoznÃ¡mka. Variancia je strednÃ¡ hodnota transformovanej veliÄiny, priÄom rozdelenie tej transformÃ¡cie nepoznÃ¡me. Je dobrÃ© si uvedomiÅ¥, Å¾e â ( )"
122,71,0.398,Modelovanie softvÃ©ru,"Obr. 4.3: RozÅ¡Ã­renie Å¡truktÃºry o domÃ©novÃ© znalosti. Na ujasnenie rolÃ­, ktorÃ© prvky Å¡truktÃºry zohrÃ¡vajÃº jeden voÄi druhÃ©mu pouÅ¾Ã­vame asociaÄnÃ© roly, s ktorÃ½mi sme sa uÅ¾ stretli pri kolaborÃ¡ciÃ¡ch (pozri ÄasÅ¥ 3.15). NaprÃ­-"
184,167,0.397,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"NÃ¡vrh architektÃºry systÃ©mu ICDE vychÃ¡dza z troch architektonickÃ½ch vzorov: Â TrojvrstvovÃ¡ klient-server architektÃºra â nÃ¡stroje tretÃ­ch strÃ¡n predstavujÃº klientov, API rozhranie tvorÃ­ strednÃº vrstvu, ktorÃ¡ zabezpeÄuje perzistenciu pomocou dÃ¡tovÃ©ho ÃºloÅ¾iska ICDE v2.0. Â Producent-konzument (publish-subscribe) â strednÃ¡ vrstva podporuje prihlÃ¡senie sa konzumentov na odber udalostÃ­ a zverejÅovanie udalostÃ­ od producentov. Â Vrstvy â klient a strednÃ¡ vrstva z trojvrstvovej klient-server architektÃºry sÃº interne ÄlenenÃ© na viacerÃ© vrstvy. ObrÃ¡zok 2-28 znÃ¡zorÅuje prehÄ¾ad vÃ½slednej architektÃºry systÃ©mu ICDE v2.0. Klienty systÃ©mu ICDE vyuÅ¾Ã­vajÃº komponent ICDE API Klient na volanie sluÅ¾ieb ICDE API, ktorÃ½ prekladÃ¡ volania na JDBC volania do dÃ¡tovÃ©ho ÃºloÅ¾iska. SluÅ¾by ICDE API sÃº"
184,275,0.397,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"TypolÃ³gia agentov Agenty je moÅ¾nÃ© deliÅ¥ podÄ¾a rÃ´znych kritÃ©riÃ­; medzi najÄastejÅ¡ie uvÃ¡dzanÃ© typy agentov patria kolaboratÃ­vne, mobilnÃ©, reaktÃ­vne, informaÄnÃ©, inteligentnÃ© a hybridnÃ© agenty. Jednou typolÃ³giou agentov je ich rozdelenie podÄ¾a spoluprÃ¡ce, uÄenlivosti a autonÃ³mnosti (ObrÃ¡zok 3-20). InteligentnÃ© agenty"
135,144,0.396,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2. AnalogickÃ½ mechanizmus (Dynamic Skeleton Interface) existuje aj na strane servera a umoÅ¾uje prija ubovonÃ© volanie a aÅ¾ v ase vykonÃ¡vania zisti, ktorÃ¡ metÃ³da a s akÃ½mi parametrami bola volanÃ¡. 3. DÃ´leÅ¾itou sÃºiastkou na strane servera je tzv. objektovÃ½ adaptÃ©r (angl. Object Adapter), ktorÃ½ umoÅ¾uje zachova vonÃº vÃ¤zbu medzi objektmi viditenÃ½mi pre klientov a implementanÃ½m kÃ³dom, ktorÃ½ mÃ´Å¾e, ale nemusÃ­ by objektovo orientovanÃ½. Napriek tomu, Å¾e volanie vzdialenÃ½ch funkciÃ­, resp. metÃ³d, je dÃ´leÅ¾itou otÃ¡zkou v distribuovanÃ½ch aplikÃ¡ciÃ¡ch, nie je jedinou: takÃ©to aplikÃ¡cie musia rieÅ¡i mnoÅ¾stvo alÅ¡Ã­ch problÃ©mov tÃ½kajÃºcich sa naprÃ­klad vyhadÃ¡vania objektov alebo bezpenosti. S cieom uahi vÃ½voj aplikÃ¡ciÃ­ sÃº sÃºasou architektÃºry CORBA viacerÃ© podpornÃ© sluÅ¾by. Ako prÃ­klad uveme sluÅ¾by v oblasti vyhadÃ¡vania objektov poda mena (Naming Service), resp. poda vlastnostÃ­ (Trading Object Service), sluÅ¾by v oblasti zaistenia bezpenosti (Security Service), sprÃ¡vy transakciÃ­ (Transaction Service), asynchrÃ³nnej komunikÃ¡cie (Event Service, Notification Service), perzistencie objektov (Persistent State Service) a alÅ¡Ã­ch. Od verzie 3.0 uvonenej v roku 2002 je sÃºasou architektÃºry CORBA aj model sÃºiastok (tzv. CORBA Component Model, skrÃ¡tene CCM), ktorÃ½ je platformovo nezÃ¡vislÃ½m rozÅ¡Ã­renÃ­m modelu sÃºiastok Enterprise JavaBeans. CCM umoÅ¾uje pre sÃºiastky definova poskytovanÃ© aj poÅ¾adovanÃ© rozhrania, a to synchrÃ³nne (volanie metÃ³d) aj asynchrÃ³nne (posielanie sprÃ¡v). Podobne ako sÃºiastky v inÃ½ch modeloch, aj sÃºiastky CCM majÃº definovanÃ© pouÅ¾Ã­vateom nastavitenÃ© parametre; a podobne ako sÃºiastky Enterprise JavaBeans, sÃº aj sÃºiastky CCM rÃ´znych typov (service, session, entity, process) a sÃº prevÃ¡dzkovanÃ© v Å¡pecializovanÃ½ch kontajneroch."
393,123,0.396,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,WebovÃ© zÃ¡znamy sÃº dÃ´leÅ¾itÃ½m zdrojom dÃ¡t pre dolovanie uÅ¾itoÄnÃ½ch znalostÃ­ na zvÃ½Å¡enie ÃºÄinnosti a efektivity webovÃ½ch informaÄnÃ½ch systÃ©mov. Dolovanie vyuÅ¾itia webu/webovÃ½ch zÃ¡znamov bude hraÅ¥ rozhodujÃºcu rolu vo webovej inteligencii.
361,129,0.396,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","â G je bezkontextovaÌ gramatika G = (N, T, P, S) â T A je konecÌnaÌ mnozÌina atribuÌtov â F je konecÌnaÌ mnozÌina seÌmantickyÌch pravidiel KedâzÌe jednotliveÌ seÌmantickeÌ pravidlaÌ moÌzÌu bytâ naviazaneÌ na konkreÌtne miesto v danom pravidle, potrebujeme spoÌsob, ako tieto miesta jednoznacÌne identifikovatâ. Symboly v pravidlaÌch preto budeme indexovatâ:"
135,210,0.396,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"SystolickÃ© polia sÃº obzvlÃ¡Å¡ pouÅ¾itenÃ© pri vÃ½potoch, ktorÃ© majÃº lineÃ¡rnu alebo pravidelnÃº Å¡truktÃºru: rÃ½chla Fourierova transformÃ¡cia, spracovanie obrazu, radar, nÃ¡sobenie matÃ­c, vyhadÃ¡vanie a alÅ¡ie."
59,464,0.396,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"PrÃ­klad 9.2. Nech mnoÅ¾ina formÃºl ï ï½ ï» p,qï½ obsahuje dva poznatky vÃ½roky p a q. Potom mnoÅ¾ina Cn(ï) mÃ¡ tvar Cn ï¨ ï ï© ï½ ï» p,q, p ï ïª,ï¹ ï q,ïª ï p,ï¹ ï q, p ï q,...ï½ kde ïª a ï¹ sÃº Ä¾ubovoÄ¾nÃ© formuly. Poznamenajme, Å¾e tÃ¡to mnoÅ¾ina formÃºl je nekoneÄnÃ¡ a spoÄÃ­tateÄ¾nÃ¡; ÄalÅ¡ie a ÄalÅ¡ie formuly, ktorÃ© sÃº dÃ´sledkom pouÅ¾itej teÃ³rie ï ï½ ï» p,qï½ mÃ´Å¾eme vytvÃ¡raÅ¥ napr. pouÅ¾itÃ­m idempotentnosti operÃ¡torov konjunkcie a disjunkcie. Budeme Å¡tudovaÅ¥ tri typy zmeny teÃ³rie ï (pozri Obr. 9.1) [1-4,8]: 1. 1. Expanzia, novÃ© poznatky, reprezentovanÃ© formulami z konzistentnej mnoÅ¾iny ï sÃº dodanÃ© do konzistentnej teÃ³rie ï, za vzniku novej konzistentnej teÃ³rie ïï¢ ï½ ï ï ï , Äo indukuje rozÅ¡Ã­renie jej logickÃ½ch dÃ´sledkov o novÃ© poznatky, ktorÃ© sÃº logickÃ½m dÃ´sledkom rozÅ¡Ã­renej teÃ³rie ïÂ´. DatabÃ¡za poznatkov priradenÃ¡ rozÅ¡Ã­renej teÃ³rii ïÂ´ je oznaÄenÃ¡ (9.6) Kïï¨ ï© ï½def Cn ï¨ ï ï ï ï© 2. Kontrakcia, minimÃ¡lna podmnoÅ¾ina ï ï ï je odstrÃ¡nenÃ¡ z nekonzistentnej teÃ³rie ï za vzniku maximÃ¡lnej konzistentnej podmnoÅ¾iny â teÃ³rie ïï¢ ï½ ï ï­ ï . DatabÃ¡za poznatkov priradenÃ¡ zÃºÅ¾enej teÃ³rii ïÂ´ je oznaÄenÃ¡ Kïï¨ ï­ï© ï½def Cn ï¨ ï ï­ ï ï© (9.7) 2. RevÃ­zia je kombinÃ¡ciou predchÃ¡dzajÃºcich dvoch operÃ¡ciÃ­ expanzie a kontrakcie, pÃ´vodne konzistentnÃ¡ teÃ³ria ï je expanziou rozÅ¡Ã­renÃ¡ o novÃ© poznatky z ï, ÄÃ­m sa stane nekonzistentnou, z takto rozÅ¡Ã­renej teÃ³rie je pomocou kontrakcie odstrÃ¡nenÃ¡ podmnoÅ¾ina ï ï ï , vÃ½sledkom tohto procesu je konzistentnÃ¡ teÃ³ria ïï¢ ï½ ï¨ ï ï ï ï© ï­ ï . PÃ´vodnÃ¡ databÃ¡za K ï½ Cn ï¨ ï ï© priradenÃ¡ modifikovanej rozÅ¡Ã­reno-zÃºÅ¾enej teÃ³rii ïÂ´ je oznaÄenÃ¡ ï« ,ï­ Kïï¨ ,ï ï© ï½def Cn ï¨ ï¨ ï ï ï ï© ï­ ï ï© (9.8)"
43,359,0.396,Objektovo orientovanÃ© programovanie v C++,"TabuÄ¾ka 8.1: Umiestnenie prvkov rodiÄovskej triedy do odvodenej triedy podÄ¾a typu dediÄnosti Teraz si ukÃ¡Å¾me, akÃ½m prÃ­kazom vytvorÃ­me odvodenÃº triedu. Majme rodiÄovskÃº triedu s nÃ¡zvom rodicovska trieda. class rodicovska trieda"
205,104,0.395,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy hÄ¾adÃ¡vania (danÃ½ najÄastejÅ¡ie nejakou Ãºlohou), hovorÃ­me vÃ¤ÄÅ¡inou o hÄ¾adanÃ­ informÃ¡ciÃ­ (angl. information seeking â IS). HÄ¾adanie zahÅÅa rÃ´zne Äinnosti, ako uÄenie, porozumenie domÃ©ny a pod., ktorÃ© pri klasickom chÃ¡panÃ­ vyhÄ¾adÃ¡vania informÃ¡ciÃ­ zanedbÃ¡vame. VyhÄ¾adÃ¡vanie informÃ¡ciÃ­ tak Äasto chÃ¡peme ako podmnoÅ¾inu hÄ¾adania informÃ¡ciÃ­ [7, 24], ako mÃ´Å¾eme vidieÅ¥ na obrÃ¡zkoch 22 a 23."
196,125,0.395,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"\tiny â najmenÅ¡ia velâkostâ \scriptsize â velâkostâ indexov: hornÃ½, dolnÃ½ \footnotesize â velâkostâ poznÃ¡mky pod cÌiarou \small â malÃ¡ velâkostâ \normalsize â normÃ¡lna velâkostâ \large â velâkÃ¡ velâkostâ \Large â eÅ¡te vÃ¤cÌÅ¡ia velâkostâ \LARGE â velâmi velâkÃ¡ velâkostâ \huge â takmer najvÃ¤cÌÅ¡ia velâkostâ \Huge â najvÃ¤cÌÅ¡ia velâkostâ ...len pre v {\Large zloÅ¾enÃ½ch zÃ¡tvorkÃ¡ch} uvedenÃ½ text. {\Large\tableofcontents} Large nastavenie fontu pre celÃ½ obsah (pre oblastâ). Explicitne zadefinovanÃ¡ velâkostâ:"
59,471,0.395,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde bol pouÅ¾itÃ½ âwilde cardâ symbol ï£, ktorÃ½ sa mÃ´Å¾e nahradiÅ¥ tak symbolom 0 ako aj symbolom 1. Ä½ahko sa presvedÄÃ­me, Å¾e ak model ï mÃ¡ tvar ï ï½ ï»ï¨1ï£ï£ ï©ï½ potom platÃ­ podmienka (10) ï»ï¨ 000ï© ,ï¨ 001ï© ,ï¨ 011ï© ,ï¨111ï©ï½ ï ï»ï¨1ï£ï£ ï©ï½ ï ï»ï¨ ï£11ï©ï½"
239,10,0.395,Ãvod do matematickej logiky,"Ako vidno z tabulâky, Î½(q(A â¨ B)) = Î½(q A â§ q B) pre kazÌdeÌ ohodnotenie Î½ prvotnyÌch formuÌl A a B, cÌizÌe q(A â¨ B) a q A â§ q B suÌ ozaj ekvivalentneÌ formuly. Podobne sa daÌ ukaÌzatâ, zÌe suÌ ekvivalentneÌ formuly q(A â§ B) a q A â¨ q B. Ekvivalencie q(A â¨ B) â (q A â§ q B) a q(A â§ B) â (q A â¨ q B) nazyÌvame de Morganove pravidlaÌ."
272,286,0.394,Reconsidering Constitutional Formation Ii Decisive Constitutional Normativity : From Old Liberties To New Precedence (Volume 12.0),"GrzeÅkowiak-Krwawicz (2000b, p. 125). GrzeÅkowiak-Krwawicz (2000a, Introduction, pp. 15â68). Szczygielski (1994a, 2009). In text paraphrased translations; in length as followed: âWyznaczenie OsÃ³b do uÅoÅ¼enia ProiektÃ³w do Formy RzÄdu. Gdy pomyÅlnoÅÄ Narodu, a w niey ugruntowana SÅawa Nas KrÃ³la, i beÅpieczeÅstwo Obywatela od trwaÅoÅci RzÄdu zawisÅy. PomnoÅ¼one zaÅ Woysko, powiÄkszone dochody publiczne bez utworzenia nieodmiennych Ustaw, urzÄdzenia i rozdziaÅu WÅadz Magistratur, i ich miÄdzy sobÄ zwiÄzkÃ³w, szkodliwym stawaÅyby siÄ ciÄÅ¼arem, a sama wewnÄtrzna spokoynoÅÄ, ktÃ³rÄ zapewniaÄ za cel troskliwoÅci Naszey mamy, wzruszonÄ bydÅºby mogÅa; Przeto My KrÃ³l zawsze z ukochanym Narodem zÅÄczeni, chcÄc dwudziestopiÄcioletnie trudy dla Kraiu czynione przyÅoÅ¼eniem siÄ do iego szczÄÅcia mieÄ nadgrodzonemi wraz z Rzeczypospolitey Skonfederowanemi Stanami do takowego DzieÅa naydokÅadnieyszego rozwaÅ¼enia Osoby nastÄpuiÄce wyznaczamy (â¦), KtÃ³rzy Prawa Kardynalne, Magistratur Zwierzchnich obowiÄzki, WÅadzÄ, i miÄdzy niemi stosownoÅÄ, zgoÅa caÅÄ RzÄdu Politycznego PaÅstw Rzpltey FormÄ opiszÄ, Proiekta, ieÅ¼eli kto zechce podawaÄ do tey materyi"
76,416,0.394,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.1.5 Napr. B = { (Z, Ä, Z) } je elementÃ¡rna udalosÅ¥, tvorÃ­ ju jeden vÃ½sledok, P(B) = 1/8, C = { (Z, Z, Ä), (Z, Ä, Z), (Ä, Z, Z) }, udalosÅ¥ C tvoria tri vÃ½sledky pokusu, P(C) = 3/8 1.1.6 Odpovede nÃ¡jdete vo formulÃ¡cii Ãºlohy 1.1.7 1.1.7 a)"
115,75,0.394,Algebra a diskrÃ©tna  matematika,"kde p1, p2, p3, ... sÃº prvÃ© prvoÄÃ­sla (2, 3, 5,..., ktorÃ© sÃº menÅ¡ie ako n) a Î±1, Î±2, Î±3, ... sÃº nezÃ¡pornÃ© celÃ© ÄÃ­sla. TÃ¡to formula je pravdivÃ¡ pre P(2), kde Î±1 = 1, k = 1, potom P(2): 2 = 21. Predpokladajme, Å¾e P( j) je pravdivÃ© pre kaÅ¾dÃ© prirodzenÃ© j â¤ n. UkÃ¡Å¾eme, Å¾e z tohto predpokladu vyplÃ½va platnosÅ¥ P(n + 1). Bude rozliÅ¡ovaÅ¥ dva prÃ­pady: 1. prÃ­pad â n + 1 je prvoÄÃ­slo pk, potom P ( n + 1) : n + 1 = p10 p20 ...p1k . 2. prÃ­pad â n + 1 nie je prvoÄÃ­slo, potom mÃ´Å¾e byÅ¥ pÃ­sanÃ© ako sÃºÄin dvoch prirodzenÃ½ch ÄÃ­sel a â b , ktorÃ© vyhovujÃº podmienke 2 â¤ a â¤ b < n + 1. KaÅ¾dÃ© z tÃ½chto dvoch ÄÃ­sel mÃ´Å¾e byÅ¥ vyjadrenÃ© ako sÃºÄin prvoÄÃ­siel (indukÄnÃ½ predpoklad) a = p1Î±1 p2Î±2 ...pkÎ±k , pk â¤ n + 1 b = p1Î²1 p2Î²2 ...pkÎ²k , pk â¤ n + 1"
59,356,0.394,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"KonkretizÃ¡cia implikÃ¡cie P ï¨ x ï© ï Q ï¨ x ï© na P ï¨ a ï© ï Q ï¨ b ï© , je formÃ¡lne vyjadriteÄ¾nÃ¡ pomocou implikÃ¡cie (6.pozri (6.64)) (6.69) ï¨ P ï¨ x ï© ï Q ï¨ x ï©ï© ï ï¨ P ï¨ a ï© ï Q ï¨ a ï©ï© kde prÃ¡va strana mÃ¡ nasledujÃºcu distribuovanÃº reprezentÃ¡ciu (6.70) t Pï¨ a ï©ïQï¨ a ï© ï½ op ï impl ï« var1 ï ï¨ P ï« a ï© ï« var2 ï ï¨ Q ï« b ï© Podobne ako v Ãºvodnom ilustraÄnom prÃ­klade (6.pozri (6.65)), tento prechod vyjadrenÃ½ implikÃ¡ciou (6.69), mÃ´Å¾e byÅ¥ v distribuovanej reprezentÃ¡cii vyjadrenÃ½ pomocou transformÃ¡cie t Pï¨ a ï©ïQï¨ a ï© ï½ t Pï¨ a ï©ïQï¨ a ï© ï T ï» ï¨ P ï« a ï© ï ï¨ Q ï« b ï© ï« ï¨ Q ï« b ï© ï ï¨ P ï« a ï©"
393,1,0.393,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Â© MÃ¡ria BielikovÃ¡, Pavol NÃ¡vrat a kol., 2006 Text Design & Composition: MÃ¡ria BielikovÃ¡ Copy Editor: Anton Andrejko, Martin Kiselkov Cover Designer: Peter KaminskÃ½ Vydala SlovenskÃ¡ technickÃ¡ univerzita v Bratislave vo VydavateÄ¾stve STU, Bratislava, Vazovova 5."
115,36,0.393,Algebra a diskrÃ©tna  matematika,"Nech mnoÅ¾ina predpokladov obsahuje tieto zloÅ¾enÃ© vÃ½roky: Ï1 = Â´ak mi poÅ¡leÅ¡ email, potom program dokonÄÃ­mÂ´ Ï2 = Â´ak mi nepoÅ¡leÅ¡ email, potom pÃ´jdem spaÅ¥ skÃ´rÂ´ Ï3 = Â´ak pÃ´jdem spaÅ¥ skÃ´r, potom sa rÃ¡no zobudÃ­m odpoÄinutÃ½Â´ poÅ¾adovanÃ½ zÃ¡ver mÃ¡ tvar Ï = Â´ak nedokonÄÃ­m program, potom sa rÃ¡no zobudÃ­m odpoÄinutÃ½Â´ Pomocou vÃ½rokovÃ½ch premennÃ½ch p = Â´poÅ¡leÅ¡ mi email Â´ q = Â´program dokonÄÃ­mÂ´ r = Â´pÃ´jdem spaÅ¥ skÃ´rÂ´ s = Â´rÃ¡no sa zobudÃ­m odpoÄinutÃ½Â´ vykonÃ¡me formalizÃ¡ciu schÃ©my logickÃ©ho vyplÃ½vania do tvaru { p â q,Â¬p â r,r â s} A Â¬ q â s Pomocou postupnosti elementÃ¡rnych krokov, kde budeme pouÅ¾Ã­vaÅ¥ schÃ©my usudzovania z tab. 1.1, ukÃ¡Å¾eme, Å¾e tÃ¡to schÃ©ma je platnÃ¡"
184,17,0.392,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ArchitektÃºra softvÃ©ru sa ako jedna z disciplÃ­n softvÃ©rovÃ©ho inÅ¾inierstva dostÃ¡va Äoraz viac do popredia, na trhu prÃ¡ce je dopyt po Å¡pecializovanÃ½ch profesionÃ¡loch â softvÃ©rovÃ½ch architektoch. ZÃ¡roveÅ je vÅ¡ak pojem âarchitektÃºra softvÃ©ruâ jednÃ½m z najviac âprepouÅ¾Ã­vanÃ½châ a najmenej pochopenÃ½ch pojmov v oblasti vÃ½voja softvÃ©ru."
239,213,0.392,Ãvod do matematickej logiky,"jedna uzÌ maÌ hodnotu 1, konkreÌtne ak â aâ , tak Î½(An ) = 1. KedâzÌe Î½ bolo zvoleneÌ lâubovolâne, tak pre lâubovolâneÌ ohodnotenie Î½ prvotnyÌch formuÌl maÌme Î½(An ) = 1, cÌizÌe An je tautoloÌgia. Teraz uvazÌujme j-hodnotovuÌ logiku, kde j â¥ n. Ak si zvolÄ±Ìme ohodnotenie Î½ tak, zÌe Î½(a1 ) = 0, Î½(a2 ) ="
361,149,0.392,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY",V programovacÄ±Ìch jazykoch pouzÌÄ±Ìvame roÌzne typy premennyÌch. Pri preklade to musÄ±Ìme zohlâadnitâ pri generovanÄ±Ì aritmetickyÌch vyÌrazov (naprÄ±Ìklad naÌsobenie moÌzÌe bytâ celo-cÌÄ±ÌselneÌ alebo s pohybli-
196,17,0.392,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"3.1.7 Uvedâte, cÌo moÅ¾no rozumietâ pod slovnÃ½m spojenÃ­m trieda dokumentu v domÃ©ne LATEX. 21 3.1.8 Inicializujte dokument triedy cÌlÃ¡nok, obojstranne s velâkostâou pÃ­sma 11 bodov na papier formÃ¡tu A4 s orientÃ¡ciou na Å¡Ã­ku a samostatnou titulnou stranou. . . . . . . . . . 24 3.1.9 Inicializujte dokument triedy prezentÃ¡cia pre koncept (draft) mÃ³d. . . . . . . . . . . 24"
240,357,0.392,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V prÃ­pade, Å¾e v Äase pÃ­sania zdrojovÃ©ho kÃ³du nevieme presnÃº veÄ¾kosÅ¥ poÄ¾a je potrebnÃ© pole dynamicky alokovaÅ¥ za behu programu. V nasledujÃºcom programe dynamicky alokujeme pole q veÄ¾kosti 4 x 3, prvky naplnÃ­me hodnotami a vypÃ­Å¡eme pouÅ¾itÃ­m upravenej funkcie vypis():"
41,6,0.392,InformaÄnÃ© vzdelÃ¡vanie,"â¢ vÃ½skumnÃ© sprÃ¡vy â¢ legislatÃ­vne dokumenty Nesmieme zabÃºdaÅ¥ ani na obrazovÃ© dokumenty a celkovo multimediÃ¡lne primÃ¡rne informaÄnÃ© zdroje, ako sÃº â¢ FotografickÃ© dokumenty â¢ Grafika â¢ IlustrÃ¡cie â¢ Diagramy â¢ Mapy â¢ Atlasy â¢ VÃ½kresy"
76,220,0.391,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ako vidÃ­me, strednÃ¡ hodnota Poissonovho rozdelenia sa rovnÃ¡ parametru rozdelenia. To je prÃ­klad situÃ¡cie, v ktorej parameter rozdelenia mÃ¡ jednoduchÃº, presvedÄivÃº interpretÃ¡ciu. Vo vÅ¡eobecnosti je E( ) nejakou funkciou parametra. Budeme pÃ­saÅ¥ E( ) = ï´(ï±), kde ï± je parameter rozdelenia. Pre Poissonove rozdelenie sme zistili, Å¾e ï´ je identita, t. j. ï´(x) = x."
76,329,0.391,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"KtorÃ¡ z nich je nevychÃ½lenÃ½m odhadom ploÅ¡nÃ©ho obsahu P? RieÅ¡enie. PripomeÅme, Å¾e veliÄiny modelujÃº (predstavujÃº) merania dÄºÅ¾ky , t. j. pre = 1, 2, ..., 10, mÃ¡me: = + , kde nÃ¡hodnÃ¡ veliÄina modeluje chybu -tÃ©ho merania. Merania sme realizovali tak, Å¾e , , ... , mÃ´Å¾eme povaÅ¾ovaÅ¥ za 10-ticu nezÃ¡vislÃ½ch veliÄÃ­n, priÄom predpokladÃ¡me, Å¾e E( ) = 0 a var( ) = ï³2. Zrejme pre = 1, 2, ... , 10 platÃ­ E( ) = E( +"
43,252,0.391,Objektovo orientovanÃ© programovanie v C++,"Takto mÃ´Å¾eme vlastne ÄÃ­taÅ¥ zo sÃºboru a vzÃ¡pÃ¤tÃ­ testovaÅ¥, Äi sme priÅ¡li na jeho koniec, vÅ¡etko v jednom riadku. Cyklus while z nÃ¡Å¡ho prÃ­kladu sa teda takto skrÃ¡ti while(!subor.getline(s,100).eof()) pocet++;"
361,39,0.39,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","KontextoveÌ gramatiky nedovolâujuÌ, aby bol neterminaÌlny symbol nahradenyÌ praÌzdnym retâazcom (vyÌnimku tvorÄ±Ì len pravidlo S â  (S je zacÌiatocÌnyÌ symbol). Z toho vyplyÌva aj prveÌ obmedzenie v definÄ±Ìcii â nemoÌzÌe doÌjstâ k skraÌteniu generovanyÌch retâazcov. PrÄ±Ìklad 2.17:"
122,128,0.39,Modelovanie softvÃ©ru,nova : Objednavka pridajPolozku : Objednavka Ã Polozka â Objednavka odoberPolozku : Objednavka Ã Polozka â Objednavka expeduj : Objednavka â Objednavka zrus : Objednavka â Empty prazdna : Objednavka â Boolean AxiÃ³my
239,31,0.39,Ãvod do matematickej logiky,"PrÄ±Ìpady (a), (b) a (c) sme uzÌ rozobrali v prvom kroku indukcie. AvsÌak ak j > 1, moÌzÌe nastatâ esÌte jeden prÄ±Ìpad, ktoryÌ je potrebneÌ rozobratâ. MoÌzÌe sa statâ, zÌe Dj je modus ponens formuÌl Dk a Dl , kde k, l < j. Potom vsÌak Dl maÌ tvar Dk âDj . VyuzÌijuÌc indukcÌnyÌ predpoklad (IP) dostaÌvame: 1â² : T â¢ A â Dk 2 : T â¢ A â (Dk âDj ) 3 : â¢ (Aâ(Dk âDj )) â ((AâDk )â(AâDj )) A2 4â² : T â¢ (AâDk ) â (AâDj ) MP(2â² , 3â² ) 5â² : T â¢ A â Dj MP(1â² , 4â² )  VsÌimnime si, zÌe Lemy 2.2, 2.3 a Veta 2.4 naÌm daÌvaju noveÌ odvodzovacie pravidlaÌ. V dâalsÌom teda moÌzÌeme okrem modus ponens vyuzÌÄ±Ìvatâ aj sylogizmus, vetu o zaÌmene predpokladov a vetu o dedukcii. Modus ponens oznacÌujeme skraÌtene MP s cÌÄ±Ìslami prÄ±ÌslusÌnyÌch formuÌl v doÌkaze. Podobne budeme pouzÌÄ±Ìvatâ skratky Syl(4,3) (sylogizmus sÌtvrtej a tretej formuly); VZP(3) (veta o zaÌmene predpokladov na tretiu formulu) a VD(7) (veta o dedukcii na siedmu formulu). AvsÌak v dâalsÌom budeme vyuzÌÄ±Ìvatâ nielen tieto tri pomenovaneÌ tvrdenia, ale lâubovolânuÌ uzÌ dokaÌzanuÌ formulu. PoznaÌmka. Ak by sme chceli bytâ presnÄ±Ì v zmysle nasÌej deï¬nÄ±Ìcie doÌkazu, tak vsÌade, kde sa odvolaÌvame na pomocneÌ tvrdenia, mali by sme vsunuÌtâ celeÌ doÌkazy tyÌchto tvrdenÄ±Ì. Toto kvoÌli lepsÌej prehlâadnosti (ako aj preto, aby sme nedokazovali velâakraÌt rovnakeÌ tvrdenia) nerobÄ±Ìme."
361,66,0.39,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","KazÌdyÌ konecÌnyÌ automat maÌ svoj ekvivalent v regulaÌrnej gramatike a naopak. InyÌmi slovami, pre kazÌdyÌ konecÌnyÌ automat M vieme zostrojitâ gramatiku G, ktoraÌ generuje rovnakyÌ jazyk: G = (N, T, P, S) , M = (Q, T, Î´, q0 , F ) L (G) = L (M ) TransformaÌcia pravej regulaÌrnej gramatiky na konecÌnyÌ automat prebieha na zaÌklade tyÌchto pravidiel: â S je zacÌiatocÌnyÌ stav a teda S = q0 â pre kazÌdeÌ pravidlo v tvare A â xB vytvor prechodovuÌ funkciu v tvare Î´ (A, x) = B â pre kazÌdeÌ pravidlo v tvare A â x vytvor prechodovuÌ funkciu v tvare Î´ (A, x) = qf , kde qf â F"
369,155,0.39,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"SpÃ´soby platieb BezhotovostnÃ¡ platba, t. j. platba prevodom z jednÃ©ho bankovÃ©ho ÃºÄtu na inÃ½ bankovÃ½ ÃºÄet, nie je jedinÃ½ spÃ´sob, ako mÃ´Å¾e partner uhradiÅ¥ zÃ¡vÃ¤zok. ÄalÅ¡ie spÃ´soby sÃº naprÃ­klad: ï· hotovostnÃ¡ platba v pokladni, ï· platba poÅ¡tovou poukÃ¡Å¾kou,"
276,149,0.39,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"tabuÄ¾kÃ¡ch a pomocou ping medzi poÄÃ­taÄmi. TieÅ¾ overte pomocou ping, Äi PC2 mÃ´Å¾e komunikovaÅ¥ do âInternetuâ. 11. NÃ¡sledne nakonfigurujte OSPFv3 smerovanie cez Ethernet-ovÃº linku len pre siete s poÄÃ­taÄmi (ÄÃ­slo oblasti nech zodpovedÃ¡ ÄÃ­slu poÄÃ­taÄa, Ethernet-ovÃ¡ linka medzi smerovaÄmi nech je v oblasti 0). ManuÃ¡lne nakonfigurujte ID smerovaÄa (router ID): 1.1.1.1 pre R1 a 2.2.2.2 pre R2. Takisto zabezpeÄte, aby R1 ohlasoval predvolenÃº cestu cez tento protokol. 12. Overte ÃºspeÅ¡nÃ© vytvorenie OSPFv3 susedstva medzi smerovaÄmi, overte zmenu v smerovacej tabuÄ¾ke a Äi ping medzi poÄÃ­taÄmi stÃ¡le funguje. DoplnkovÃ© Ãºlohy 13. Ak smerovaÄe podporujÃº smerovanie cez EIGRP pre IPv6, tak toto smerovanie aktivujte pre autonÃ³mny systÃ©m ÄÃ­slo 10. Nakonfigurujte router ID podobne ako v Ãºlohe 11. 14. VÅ¡etky rozhrania"
367,67,0.39,CESTA K OTVORENEJ VEDE,"TaxonÃ³mia autorskÃ©ho prispenia CRediT - pomÃ¡ha poÄÃ­taÄovo spracovateÄ¾â nÃ½m spÃ´sobom vyjasniÅ¥, kto z autorov ako prispel k vÃ½skumu. DostupnÃ© na: https://casrai.org/credit/ Quality open access market â hodnotenie otvorenÃ½ch Äasopisov z pohÄ¾adu viacerÃ½ch zÃºÄastnenÃ½ch strÃ¡n (autori, recenzenti, editori). DostupnÃ© na: https://www.qoam.eu/ O otvorenom recenznom konanÃ­: FOSTER Open Peer Review (uÄebnÃ½ text v angliÄtine s videom a prehÄ¾adnÃ½mi schÃ©mami). DostupnÃ© na: https://www.fosteropenscience.eu/learning/open-peer-review/#/id/ 5a17e150c2af651d1e3b1bce ZÃ¡sady transparentnosti a dobrej praxe v akademickom publikovanÃ­ Vypracovali organizÃ¡cie COPE, OASPA, DOAJ, WAME. 4. verzia. DostupnÃ© na: https://otvorenaveda.cvtisr.sk/informacne-materialy/ REPRODUKOVATEÄ½NOSÅ¤ DESQUILBET, LoÃ¯c, GRANGER, Sabrina, HEJBLUM, Boris, a kol. Vers Une Recherche Reproductible. Bordeaux : Urfist de Bordeaux, 2019. DostupnÃ© na: https://hal.archives-ouvertes.fr/hal-02144142 The practice of reproducible research (Kitzes et al., 2018). UÄebnica o praktikÃ¡ch ReprodukovateÄ¾nÃ©ho vÃ½skumu (AJ). DostupnÃ© na: https://www.practicereproducibleresearch.org/ Equator - Å¡tandardy informovania o vÃ½skume (tabuÄ¾ky s popisom, Äo a ako nesmie chÃ½baÅ¥ v ÄlÃ¡nku urÄitÃ©ho typu) pre rÃ´zne druhy Å¡tÃºdiÃ­: CONSORT â klinickÃ© testy, ARRIVE â laboratÃ³rne testy na zvieratÃ¡ch, SRQR â kvalitatÃ­vny vÃ½skum, PRISMA â systematickÃ© prehÄ¾adovÃ© ÄlÃ¡nky a mnohÃ© ÄalÅ¡ie. DostupnÃ© na: http://www.equator-network.org/ VEDECKÃ INTEGRITA ENAI (European Network for Academic Integrity): https://www.academicintegrity.eu/wp/ DeklarÃ¡cia o posilnenÃ­ vedeckej integrity. DostupnÃ© na: https://eraportal. sk/wp-content/uploads/2021/08/DEKLARACIA_3_8_2021_everzia2.pdf"
129,27,0.389,Sprievodca licenciami Creative Commons,"Ako mÃ¡m publikovaÅ¥ pod licenciami Creative Commons? Ak chcete pre svoju knihu pouÅ¾iÅ¥ licenciu Creative Commons, prediskutujte to so svojÃ­m vydavateÄ¾om a dohodnite si vhodnÃº zmluvu. To, akÃ© autorskÃ© prÃ¡va a pravidlÃ¡ auto-archivÃ¡cie majÃº rÃ´zni vydavatelia, zistÃ­te naprÃ­klad na strÃ¡nke SHERPA/RoMEO9. Aj keÄ mnohÃ­ vydavatelia zatiaÄ¾ licencie Creative Commons neponÃºkajÃº vyslovene ako moÅ¾nosÅ¥ pre publikovanie monografiÃ­, nebojte sa prediskutovaÅ¥ licenÄnÃ© podmienky zverejnenia vÃ¡Å¡ho diela priamo s vydavateÄ¾om."
184,212,0.389,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Aspektovo-orientovanÃ½ nÃ¡vrh softvÃ©ru â Theme/UML PrÃ­stup Theme/UML predstavuje rozÅ¡Ã­renie jazyka UML a umoÅ¾Åuje modelovanie rÃ´znych pohÄ¾adov na systÃ©m. PretÃ­nanie tÃ©m je vyjadrenÃ© v UML pouÅ¾itÃ­m Å¡ablÃ³n balÃ­kov. Model pre jednu tÃ©mu je na obrÃ¡zku 3-8. Pre skorÅ¡ie fÃ¡zy vÃ½voja softvÃ©ru je urÄenÃ¡ technika modelovania bodov spÃ¡jania â JPDD (Join Point Designation Diagrams) (Stein, 2004). TaktieÅ¾ existuje rozÅ¡Ã­renie modelovania prÃ­padov pouÅ¾itia pre aspektovÃº paradigmu (Jacobson, 2004)."
135,159,0.389,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ExistujÃº tri typy objektov v SOM: inÅ¡tancie tried (objekty, ktorÃ© nie sÃº triedami), triedy (inÅ¡tancie metatried; objekty, ktorÃ© nie sÃº metatriedami) a metatriedy (obrÃ¡zok 2-12). KaÅ¾dÃ½ SOM objekt je odvodenÃ½ od zÃ¡kladnÃ©ho objektu SOMObject, ktorÃ½ definuje sprÃ¡vanie spolonÃ© pre vÅ¡etky SOM objekty; okrem inÃ©ho definuje metÃ³du somDispatch, ktorÃ¡ poskytuje vÅ¡eobecnÃ½ spÃºÅ¡acÃ­ mechanizmus pre volanie metÃ³d na objektoch (angl. method dispatch mechanism). Trieda je odliÅ¡nÃ¡ od obyajnÃ©ho objektu (inÅ¡tancie triedy) tÃ½m, Å¾e obsahuje tabuku metÃ³d definujÃºcu metÃ³dy, ktorÃ© mÃ´Å¾eme na inÅ¡tanciÃ¡ch tejto triedy vola. Poas inicializÃ¡cie triedy SOM prostredie spustÃ­ inicializanÃº metÃ³du, ktorÃ¡ informuje triedu o jej rodiovskÃ½ch triedach a umoÅ¾nÃ­ jej tÃ½m inicializova si vlastnÃº tabuku metÃ³d. NÃ¡sledne pokrauje inicializÃ¡cia metÃ³dami, ktorÃ© preaÅ¾ia zdedenÃ© metÃ³dy alebo pridajÃº do triedy novÃ© metÃ³dy. V hierarchii je objekt SOMObject trieda, ktorÃ¡ je inÅ¡tanciou metatriedy SOMClass (tieÅ¾ objektu). VÅ¡etky metatriedy v SOM sÃº eventuÃ¡lne zdedenÃ© z metatriedy SOMClass, ktorÃ¡ do zdedenÃ½ch objektov pridÃ¡va metÃ³du somNew, ktorÃ¡ slÃºÅ¾i na vytvÃ¡ranie inÅ¡tanciÃ­ triedy a tieÅ¾ pridÃ¡va metÃ³dy pre vytvÃ¡ranie a modifikÃ¡ciu tabuky metÃ³d. Hierarchia objektov v SOM je flexibilnÃ¡ a umoÅ¾uje tzv. metaprogramovanie, teda programÃ¡torovi poas vykonÃ¡vania zisova informÃ¡cie o objektoch a triedach a meni ich za chodu. Objekty sa poas vykonÃ¡vania programu vytvÃ¡rajÃº (vzorom TovÃ¡re) zavolanÃ­m tovÃ¡renskej metÃ³dy na objekte triedy prÃ­sluÅ¡nÃ©ho objektu, ktorÃ½ chceme vytvori. Po vytvorenÃ­ objekt existuje dovtedy, kÃ½m nie je explicitne uvonenÃ½ alebo pokÃ½m existuje proces, ktorÃ½ ho vytvoril. Ak chceme, aby SOM objekt Å¾il dlhÅ¡ie ako proces, ktorÃ½ ho vytvoril, je nutnÃ© realizova vlastnÃ½ perzistennÃ½ mechanizmus."
184,171,0.388,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ProcesnÃ© pohÄ¾ady na systÃ©m ICDE SprÃ¡vanie sa systÃ©mu opÃ­Å¡eme pomocou sekvenÄnÃ½ch diagramov. ObrÃ¡zok 2-32 znÃ¡zorÅuje pouÅ¾itie dopytovacieho API. NÃ¡stroje musia API najprv explicitne inicializovaÅ¥, Äo zabezpeÄÃ­ inicializÃ¡ciu EJB session bean v komponente ICDE API Klient pomocou J2EE adresÃ¡rovej sluÅ¾by (JNDI)."
196,200,0.388,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Vydala SlovenskÃ¡ technickÃ¡ univerzita v Bratislave vo Vydavatelâstve SPEKTRUM STU, Bratislava, Vazovova 5, v roku 2021. EdÃ­cia ucÌebnÃ½ch textov v informatike a informacÌnÃ½ch technolÃ³giÃ¡ch. Rozsah 132 strÃ¡n, 31 obrÃ¡zkov, 4,10 AH, 4,14 VH, 1. vydanie, Vydavatelâstvo STU v Bratislave. PocÌet otÃ¡zok 101. PocÌet Ãºloh 101."
115,21,0.388,Algebra a diskrÃ©tna  matematika,"IlustratÃ­vny prÃ­klad axiomatickÃ©ho systÃ©mu UvaÅ¾ujme jednoduchÃ½ axiomatickÃ½ systÃ©m, ktorÃ½ obsahuje tri elementÃ¡rne pojmy â Â´vrcholÂ´, Â´hranaÂ´, Â´leÅ¾aÅ¥ naÂ´ a tri axiÃ³my A1. KaÅ¾dÃ½ vrchol leÅ¾Ã­ aspoÅ na jednej hrane. A2. Pre kaÅ¾dÃº hranu existujÃº prÃ¡ve dva vrcholy, ktorÃ© na nej leÅ¾ia."
59,605,0.388,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde random ï0,1ï je nÃ¡hodnÃ½ generÃ¡tor ÄÃ­sel z intervalu ï 0,1ï s rovnomernou distribÃºciou, podobne random ï¨ n ï© je nÃ¡hodnÃ½ generÃ¡tor celÃ½ch ÄÃ­sel z mnoÅ¾iny ï»0,1, 2,...,n ï­ 1ï½ s rovnomernou distribÃºciou. PoÅ¾adovanÃ© hodnoty y sa spoÄÃ­tajÃº pomocou vyÅ¡Å¡ie Å¡pecifikovanej funkcie fs(a). AdaptaÄnÃ½ proces neurÃ³novej siete je po urÄitom poÄte krokov ukonÄenÃ½, potom je komplex v rÃ¡mci druhej etapy pouÅ¾itÃ½ na konÅ¡trukciu inverznÃ©ho modelu pomocou Ä¾avej Äasti komplexu (I1, H1 a O1), priÄom vÃ¡hovÃ© koeficienty doprednÃ©ho modelu (pravej Äasti) sÃº nemennÃ©. V tejto druhej etape adaptaÄnÃ½ proces vyÅ¾aduje znalosÅ¥ âchybovÃ©ho signÃ¡luâ d, ktorÃ½ je vytvorenÃ½ Å¡tandardnou metÃ³dou spÃ¤tnÃ©ho Å¡Ã­renia signÃ¡lu cez pravÃº doprednÃº ÄasÅ¥. TrÃ©ningovÃ¡ mnoÅ¾ina v druhej etape je taktieÅ¾ realizovanÃ¡ stochasticky: s ï½ random ï¨ 3ï© (12.9a) ï¨ s ï½ 0ï© ï¯ 2 random ï 0,1ï (12.9b) yïª ï½ ï­random ï 0,1ï ï¨ s ï½ 1ï© ï¯1 1 ï¯ ï« random ï 0,1ï ï¨ s ï½ 2ï© ï¯ï® 2 2 (v tejto druhej etape uÅ¾ nepotrebujeme poznaÅ¥ poÅ¾adovanÃ© hodnoty akciÃ­ a).VÃ½sledkom adaptaÄnÃ©ho procesu v druhej etape bude neurÃ³novÃ¡ sieÅ¥ priradenÃ¡ inverznÃ©mu modelu (vzhÄ¾adom na danÃ½ doprednÃ½ model z prvej etapy), ktorÃ¡ realizuje pomerne presne inverznÃº funkciu f s ï¨ y ï© , ktorÃº teraz nepotrebujeme poznaÅ¥ explicitne, bude sa pouÅ¾Ã­vaÅ¥ len na vyhodnotenie presnosti vyprodukovanej inverznej neurÃ³novej siete."
196,148,0.388,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,UvedenÃ½ prÃ­kaz s nÃ¡zvom Polozka inkrementuje pocÌÃ­tadlo s nÃ¡zvom polozky. Funkcie cÌi procedÃºry majÃº obycÌajne definovanÃ© parametre. Aj prÃ­kaz mÃ´Å¾e prijatâ parametre (max. 9 parametrov). PocÌet parametrov sa uvÃ¡dza v hranatÃ½ch zÃ¡tvorkÃ¡ch. PrÃ­kaz s parametrami inak konzumuje parametre. Pracovatâ s nimi sa dÃ¡ odkazom na ne pomocou znaku # a poradovÃ©ho cÌÃ­sla parametra. \newcommand{\Rovnica}[4][2]{#2x^#1 + #3x + #4 = 0} \[ \Rovnica{a}{b}{c} \]
240,482,0.387,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,programovania. VÃ½slednÃ© zdrojovÃ© kÃ³dy rieÅ¡enÃ­ sa skladajÃº z viacerÃ½ch funkciÃ­ a vhodne vyuÅ¾Ã­vajÃº viacerÃ© prvky programovacieho jazyka. NaÅ¡im cieÄ¾om je zrozumiteÄ¾ne a prÃ­stupne pre zaÄÃ­najÃºceho programÃ¡tora opÃ­saÅ¥ ako postupovaÅ¥ pri rieÅ¡enÃ­ zloÅ¾itejÅ¡Ã­ch Ãºloh.
115,67,0.387,Algebra a diskrÃ©tna  matematika,"PodobnÃ½m spÃ´sobom preskÃºmame aj ostatnÃ© Å¡tyri moÅ¾nosti vzÃ¡jomnÃ©ho usporiadania ÄÃ­sel a, b a c. TÃ½mto spÃ´sobom sme dokÃ¡zali 6 nezÃ¡vislÃ½ch implikÃ¡ciÃ­ ( a < b < c ) â max {a,min {b,c}} = b â§ min {max {a,b} ,max {a,c}} = b"
66,11,0.387,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"UkÃ¡Å¾ka komunikÃ¡cie medzi klientom a serverom v rÃ¡mci aplikÃ¡cie vyuÅ¾Ã­vajÃºcej 3-ÃºrovÅovÃº architektÃºru a je znÃ¡zornenÃ¡ na Obr. 2. KomunikÃ¡cia prebieha nasledovne: 1. PouÅ¾Ã­vateÄ¾ odoÅ¡le pomocou klientskej aplikÃ¡cie (napr. web strÃ¡nka) poÅ¾iadavku (z angl. request) na server. 2. PoÅ¾iadavka je prijatÃ¡ na serveri v rÃ¡mci API rozhrania. API rozhranie mÃ¡ definovanÃ©, akÃ© poÅ¾iadavky prijÃ­ma a akÃ© parametre musÃ­ obsahovaÅ¥ danÃ¡ poÅ¾iadavka. PrÃ­kladom API rozhrania je REST API (REpresentational State Transfer Application Programming Interface) alebo SOAP (Simple Object Access Protocol ). 3. PrijatÃ© dÃ¡ta sÃº nÃ¡sledne spracovanÃ© serverom, ktorÃ½ vykonÃ¡va biznis logiku. V rÃ¡mci definovanej biznis logiky sa server rozhodne, Äo potrebuje zÃ­skaÅ¥ alebo modifikovaÅ¥ na strane databÃ¡zy. 4. Server po vykonanÃ­ biznis logiky odpovedÃ¡ klientskej aplikÃ¡ciÃ­ pomocou API, na ktorom bola prijatÃ¡ poÅ¾iadavka. OdpoveÄ (z angl. response) mÃ¡ tieÅ¾ definovanÃ© parametre, ktorÃ© mÃ¡ obsahovaÅ¥ 5. OdpoveÄ je prijatÃ¡ na klientskej strane a informÃ¡cie sÃº poskytnutÃ© pouÅ¾Ã­vateÄ¾ovi."
59,40,0.386,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ElementÃ¡rnou jednotkou McCullochovej a Pittsovej neurÃ³novej siete je logickÃ½ neurÃ³n [1,5] s binÃ¡rnymi stavmi 1 a 0. VstupnÃ½ systÃ©m logickÃ©ho neurÃ³nu obsahuje excitaÄnÃ© vstupy (opÃ­sanÃ© binÃ¡rnymi premennÃ½mi x1, x2, ..., xn) a inhibiÄnÃ© vstupy (opÃ­sanÃ© binÃ¡rnymi premennÃ½mi xn+1, xn+2, ..., xm). Aktivita logickÃ©ho neurÃ³nu y je jednotkovÃ¡, ak vnÃºtornÃ½ potenciÃ¡l neurÃ³nu definovanÃ½ ako rozdiel medzi sumou excitaÄnÃ½ch vstupnÃ½ch aktivÃ­t a inhibiÄnÃ½ch vstupnÃ½ch aktivÃ­t je vÃ¤ÄÅ¡Ã­ alebo rovnÃ½ prahu ï, v opaÄnom prÃ­pade je nulovÃ¡ ï¯1 ï¨ x1 ï« ... ï« xn ï­ x1ï« n ï­ ... ï­ xm ï³ ï­ïï© (2.1) ï®0 ï¨ x1 ï« ... ï« xn ï­ x1ï« n ï­ ... ï­ xm ï¼ ï­ïï© Pomocou jednoduchej krokovej funkcie (2.1) mÃ´Å¾eme aktivitu neurÃ³nu y vyjadriÅ¥ takto: y ï½ s ï¨ x1 ï« ... ï« xn ï­ x1ï«n ï­ ... ï­ xm ï« ïï© (2.2) kde s(Î¾) je tzv. prahovÃ¡ funkcia definovanÃ¡ takto ï¯1 ï¨ ak ï¸ ï³ 0 ï© (2.3) s ï¨ï¸ ï© ï½ ï­ ï®0 ï¨ ak ï¸ ï¼ 0 ï©"
59,56,0.386,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 2.9. Diagramy A a B znÃ¡zorÅujÃº jednotlivÃ© klauzuly z formuly (2.11). Diagram C reprezentuje 3-vrstvovÃº neurÃ³novÃº sieÅ¥, ktorÃ¡ ako skrytÃ© neurÃ³ny obsahuje neurÃ³ny z diagramu A a B, vÃ½stupnÃ½ neurÃ³n reprezentuje disjunkciu vÃ½stupnÃ½ch aktivÃ­t zo skrytÃ½ch neurÃ³nov."
59,125,0.386,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"GenetickÃ½ algoritmus mÃ¡ silne stochastickÃ½ charakter. V dÃ´sledku existencie nÃ¡hodnÃ½ch mutÃ¡ciÃ­, kvÃ¡zinÃ¡hodnÃ©ho vÃ½beru do procesu reprodukcie (a taktieÅ¾ aj moÅ¾nosti nÃ¡hodnÃ©ho vyhynutia replikÃ¡torov populÃ¡cie s vysokÃ½m fitnes pred ich vstupom do reprodukÄnÃ©ho procesu), evoluÄnÃ© algoritmy nemajÃº deterministickÃ½ charakter, t. j. nemÃ´Å¾eme presne predvÃ­daÅ¥ evolÃºciu populÃ¡cie, pozri Obr. 3.6."
41,130,0.386,InformaÄnÃ© vzdelÃ¡vanie,"Zoznam zdrojov 1. Centrum spoloÄnÃ½ch ÄinnostÃ­ Slovenskej akadÃ©mie vied, EncyklopedickÃ½ Ãºstav, http://www.encyclopaedia.sk/co_je_encyklopedia.html, Naposledy navÅ¡tÃ­venÃ© 1.2.2022, dostupnÃ© on-line 2. The Plagiarism Spectrum, White Paper, www.turninin.com, 2012, dostupnÃ© ako .PDF dokument, 30.12.2021 3. Tauberer Joshua, Open Government Data: The Book, ASIN : B007U69DKU, 2014 Second Edition, 250 strÃ¡n 4. STU Bratislava, www.stuba.sk, naposledy navÅ¡tÃ­venÃ© 1.2.2022, dostupnÃ© online 5. ORCID.org, www.orcid.org, naposledy navÅ¡tÃ­venÃ© 1.2.2022, dostupnÃ© on-line 6. DOI.org, www.doi.org, naposledy navÅ¡tÃ­venÃ© 1.2.2022, dostupnÃ© on-line 7. Davenport, T.H., Prusak, L.: Information Ecology: Mastering the Information and Knowledge Environment, 255 p. Oxford Univ. Press, New York (1997) 8. SOA, https://www.tutorialspoint.com/soa/index.htm, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 9. Waterfall, https://www.datascience-pm.com/waterfall/, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 10. https://www.annaclemens.com/blog/16-free-tools-scientists-write-bettermore-productively, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 11. www.trello.com, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 12. https://www.xmind.net/, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 13. https://www.wikihow.com/Write-a-Manual-from-Scratch, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 14. https://www.zotero.org/, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 15. FOA, https://www.fairopenaccess.org/the-fair-open-access-principles/, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 16. KANBAN, https://sites.google.com/site/wicmitchell/home/scrum-to-leankanban---some-problems-and-pitfalls, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 17. http://www.umsl.edu/~hugheyd/is6840/waterfall.html, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 18. How to Write a Manual from Scratch, https://www.wikihow.com/Write-aManual-from-Scratch, dostupnÃ© on-line, naposledy navÅ¡tÃ­venÃ© 1.2.2022 19. VARIS, T., 2005. New Literacies and e-Learning Competences [online]. An initiative of the European Commission, 30 Apr. 2005, DostupnÃ© na internete: <http://www.elearningeuropa.info/index.php?page=index&menuzone=0>. 20. BAKIÄOVÃ, Hana & RUÎ²-MOHL, Stephan (2005): Å½urnalistika: komplexnÃ­ prÅ¯vodce praktickou Å¾urnalistikou. Praha: Grada; prekl. Hana BakiÄovÃ¡, Praha: Grada."
369,98,0.386,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 2.10. Vzor ZodpovednosÅ¥ Model na obr. 2.10 nepredstavuje iba mechanickÃ© spojenie modelov z obr. 2.5 a obr. 2.7. Tento model umoÅ¾Åuje vyjadriÅ¥ aj prepojenie Å¡peciÃ¡lnych prÃ­padov uvedenÃ½ch modelov, naprÃ­klad: ï· Osoba mÃ¡ zodpovednosÅ¥ za organizaÄnÃº jednotku (je vedÃºcim prÃ­sluÅ¡nej organizaÄnej jednotky)."
343,1,0.385,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,Obsah Zoznam obrÃ¡zkov .......................................................................................................................1 Zoznam tabuliek .........................................................................................................................2 Predhovor...................................................................................................................................3 1 Ãvod do blockchain technolÃ³gie ........................................................................................4 2 Bitcoin protokol ..................................................................................................................8 3 Ethereum a smart kontrakty ............................................................................................12
111,15,0.385,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Metriky pouÅ¾Ã­vatelâskÃ©ho zÃ¡Å¾itku PrÃ­klady metrÃ­k pouÅ¾Ã­vateÄ¾skÃ©ho zÃ¡Å¾itku sÃº: ÃºspeÅ¡nosÅ¥ Ãºlohy (angl. task success rate), miera chybovosti pouÅ¾Ã­vateÄ¾ov (angl. user error rate), priemernÃ½ Äas rieÅ¡enia Ãºloh (angl. average task time), spokojnosÅ¥ pouÅ¾Ã­vateÄ¾a (angl. user satisfaction). Metriky musia byÅ¥ vÅ¡eobecne zaloÅ¾enÃ© na spoÄ¾ahlivom systÃ©me merania. VÃ½sledky metrÃ­k musia byÅ¥ konzistentnÃ©, a teda za rovnakÃ½ch podmienok by mal byÅ¥ vÃ½sledok zakaÅ¾dÃ½m rovnakÃ½. UX metriky musia byÅ¥ pozorovateÄ¾nÃ© (angl. observable) a kvantifikovateÄ¾nÃ© (angl. quantifiable). PozorovateÄ¾nÃ© znamenÃ¡, Å¾e je moÅ¾nÃ© meraÅ¥ sprÃ¡vanie/interakciu pouÅ¾Ã­vateÄ¾a s produktom alebo sluÅ¾bou (na zÃ¡klade vÃ½stupov/dÃ¡t, ktorÃ© produkuje). KvantifikovateÄ¾nÃ© znamenÃ¡, Å¾e musia byÅ¥ vyjadriteÄ¾nÃ© ako mnoÅ¾stvo, ÄÃ­selnÃ¡ hodnota, resp. nejakÃ½m spÃ´sobom spoÄÃ­tateÄ¾nÃ©. VÅ¡eobecne sa UX metriky delia na dva typy: behaviorÃ¡lne (angl. behavioral) a postojovÃ© (angl. attitudinal). BehaviorÃ¡lne metriky sÃº pozorovateÄ¾nÃ© priamo, postojovÃ© metriky sÃº pozorovateÄ¾nÃ© nepriamo. BehaviorÃ¡lne UX metriky sa zameriavajÃº na aktivity a interakcie pouÅ¾Ã­vateÄ¾ov s produktom/sluÅ¾bou (napr. Äas plnenia Ãºlohy). PostojovÃ© UX metriky merajÃº vnÃ­manie, pocity a nÃ¡zory pouÅ¾Ã­vateÄ¾ov, vyjadrenÃ© ÄÃ­selnou formou (napr. nÃ¡zor na dizajn prostrednÃ­ctvom Likertovej stupnice/Å¡kÃ¡ly [2], Net promoter score [3]). Pre zÃ­skanie komplexnÃ©ho obrazu o pouÅ¾Ã­vateÄ¾skom zÃ¡Å¾itku je dÃ´leÅ¾itÃ© osvojiÅ¥ si pouÅ¾Ã­vanie oboch typov metrÃ­k."
115,106,0.385,Algebra a diskrÃ©tna  matematika,"VyznaÄenie jednotlivÃ½ch oblastÃ­ v mnoÅ¾ine univerza U. OblasÅ¥ 1 obsahuje prvky, ktorÃ© nie sÃº obsiahnutÃ© v mnoÅ¾inÃ¡ch A, B a C. OblasÅ¥ 2 obsahuje prvky, ktorÃ© sÃº obsiahnutÃ© v mnoÅ¾ine A, ale nie sÃº obsiahnutÃ© v mnoÅ¾inÃ¡ch B a C. PodobnÃ½m spÃ´sobom mÃ´Å¾u byÅ¥ charakterizovanÃ© ostatnÃ© oblasti 3, 4, â¦, 8."
393,207,0.384,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PodÄ¾a zdroja histÃ³rie prÃ­stupu pouÅ¾itÃ©ho na predikciu mÃ´Å¾eme rozdeliÅ¥ metÃ³dy predprÃ­pravy do Å¡tyroch kategÃ³riÃ­: Â predprÃ­prava na strane klienta, Â predprÃ­prava na strane proxy servera, Â predprÃ­prava na strane servera, Â kooperatÃ­vna predprÃ­prava."
138,18,0.384,LATEXovnÃ­k - Å truktÃºra zdrojovÃ©ho sÃºboru,"â RÃ´zne uÅ¾itoÄnÃ© tipy a odkazy QR kÃ³d vysÃ¡dzame prÃ­kazom \qrcode, napr. sÃºborom (poslednÃ½ qr kÃ³d): \documentclass[10pt]{standalone} \usepackage[forget]{qrcode} \begin{document} \qrcode[version=0,level=L,height=4cm]{ https://frcatel.fri.uniz.sk/users/beerb} \end{document} https://tug.org/FontCatalogue/ KatalÃ³g fontov a pÃ­sem TEX-u. [1. qr kÃ³d] https://latexcolor.com/ KatalÃ³g farieb TEX-u. [2. qr kÃ³d] https://www.tablesgenerator.com/ Online tvorca tabuliek. [3. qr kÃ³d] https://detexify.kirelabs.org/classify.html IdentifikÃ¡tor ruÄne pÃ­sanÃ½ch symbolov TEX-u. [4. qr kÃ³d]"
66,19,0.384,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Okrem popÃ­sanÃ©ho rozdelenia je moÅ¾nÃ© sa stretnÃºÅ¥ aj s rozdelenÃ­m, ktorÃ© rozÅ¡iruje tieto dve skupiny o Data Control Language (DCL), Data Query Language (DQL) a Transaction Control Language (TCL). V prÃ­pade rozdelenia na dve skupiny (DDL a DML) sÃº prÃ­kazy DQL, DCL a TCL zahrnutÃ© v rÃ¡mci DML. SamotnÃ½ DQL obsahuje prÃ­kaz SELECT, ktorÃ½ slÃºÅ¾i pre zÃ­skavanie dÃ¡t z relÃ¡ciÃ­/tabuÄ¾ky. DCL obsahuje prÃ­kazy pre sprÃ¡vu privilÃ©giÃ­ nad databÃ¡zou. V rÃ¡mci TCL sÃº zahrnutÃ© prÃ­kazy pre transakcie ako je napr. COMMIT. Rozdelenie do piatich skupÃ­n je znÃ¡zornenÃ© na Obr. 4."
66,158,0.384,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Timestamp-Based protokoly â sÃº zaloÅ¾enÃ© na ÄasovÃ½ch peÄiatkach. Na zÃ¡klade ÄasovÃ½ch peÄiatok sa systÃ©m rozhoduje pri operÃ¡ciÃ¡ch ÄÃ­tania a zÃ¡pisu, Äi transakcia bude pokraÄovaÅ¥ vo vykonÃ¡vanÃ­ alebo nie."
239,198,0.383,Ãvod do matematickej logiky,"VsÌimnime si, zÌe keby platilo Î(w) = â, tak by sme v predchaÌdzajuÌcom prÄ±Ìklade k sporu nedospeli. ZnamenaÌ to, zÌe formula  B â â¦ B, ktoraÌ je axioÌma AM2, je tautoloÌgia iba kedâ je relaÌcia R vsÌade deï¬novanaÌ, teda iba v D-logike. PrÄ±Ìklad. Pomocou seÌmantickeÌho stromu dokaÌzÌte, zÌe je formula A tautoloÌgia"
76,214,0.382,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"VÅ¡imnime si, Å¾e strednÃ¡ hodnota v tomto prÃ­pade nie je hodnotou, E( )ï ( ). Vezmime na vedomie, Å¾e strednÃ¡ hodnota mÃ´Å¾e, ale nemusÃ­ byÅ¥ bodom mnoÅ¾iny ( ). 4.1.3 V prÃ­pade, keÄ mÃ¡ koneÄne veÄ¾a hodnÃ´t, na vÃ½poÄet E( ) mÃ´Å¾eme nazeraÅ¥, ako na vÃ½poÄet vÃ¡Å¾enÃ©ho priemeru hodnÃ´t E( ) = â"
59,491,0.381,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"tÃºto formulu budeme nazÃ½vaÅ¥ kanonickÃ½ tvar metateÃ³rie ï (samozrejmÃ©, tento kanonickÃ½ tvar je definovanÃ½ vzhÄ¾adom ku klasifikaÄnej formuly ï£). Opakovane upozorÅujeme (pozri symbol ïª na pravej strane (9.18)), ktorÃ½ znamenÃ¡, Å¾e nekonzistentnÃ© Äleny, sÃº vynechanÃ©."
135,292,0.381,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Prepojenie VyÅ¡Å¡ie sme opÃ­sali sÃºiastky Server a Klient. Nakoniec je potrebnÃ© oba sÃºiastky prepoji. Prepojenie definuje tÃºto postupnos udalostÃ­: 1. klient poÅ¡le poÅ¾iadavku, 2. server vykonÃ¡ operÃ¡ciu, 3. server vrÃ¡ti vÃ½sledok, 4. klient prijme vÃ½sledok. JednotlivÃ© kroky sÃº formÃ¡lne zapÃ­sanÃ© v opisnom jazyku architektÃºry v rÃ¡mci prÃ­kladu 3-6, ktorÃ½ je uvedenÃ½ niÅ¾Å¡ie. architecture ClientServer() return root is C : Client; S : Server; Connect (?x in Float) C.Calculate(?x) => S.Compute(?x); (?y in Float) S.Result(?y) => C.Result(?y); end ClientServer; PrÃ­klad 3-6. PrÃ­klad ADL kÃ³du pre prepojenie."
361,119,0.38,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","P : E â E%T T âT +F T âF F â [E] F âa F âb vytvorte prediktÄ±Ìvny parser. Postupujte v nasledujuÌcich krokoch: 1. urobte minimaÌlne transformaÌcie tak, aby transformovanaÌ gramatika bola LL(1) 2. naÌjdite FIRST a FOLLOW pre kazÌdyÌ neterminaÌlny symbol v transformovanej gramatike 3. presvedcÌte sa, zÌe gramatika je LL(1) 4. vytvorte tabulâku prechodov pre transformovanuÌ gramatiku"
265,462,0.38,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"kardinalita vzÅ¥ahu v dÃ¡tovom modeli (vyjadruje poÄetnosÅ¥ vzÅ¥ahov medzi dÃ¡tovÃ½mi inÅ¡tanciami, napr. jedno auto mÃ¡ prÃ¡ve Å¡tyri kolesÃ¡, jedna kniha mÃ´Å¾e byÅ¥ poÅ¾iÄanÃ¡ nula alebo jednÃ½m ÄitateÄ¾om, jeden Å¡achista mÃ´Å¾e odohraÅ¥ nekoneÄne veÄ¾a zÃ¡pasov)"
94,367,0.38,Sprievodca svetom vedeckÃ©ho publikovania,"Open Access EIZ: bezplatne prÃ­stupnÃ© pre kaÅ¾dÃ©ho pouÅ¾Ã­vateÄ¾a internetu (netreba pristupovaÅ¥ prostrednÃ­ctvom kniÅ¾nice), oslobodenÃ© od vÃ¤ÄÅ¡iny autorskÃ½ch a licenÄnÃ½ch obmedzenÃ­. Ide o najnovÅ¡Ã­ trend v prÃ­stupe k vedeckÃ½m informÃ¡ciÃ¡m pre kohokoÄ¾vek a kdekoÄ¾vek na svete, naprÃ­klad: - open access Äasopisy a monografie â vedeckÃ© Äasopisy a monografie s otvorenÃ½m prÃ­stupom, - open access predmetovÃ© digitÃ¡lne archÃ­vy a inÅ¡titucionÃ¡lne repozitÃ¡re."
196,69,0.379,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Druhou alternatÃ­vou je pouÅ¾itie balÃ­ka blindtext [6] konÅ¡trukciou \usepackage{blindtext} v preambule dokumentu. PrÃ­kaz \blindtext vygeneruje odsek fiktÃ­vneho textu, konÅ¡trukcia \Blindtext vygeneruje viacero odsekov fiktÃ­vneho textu a nÃ¡sledne \Blinddocument vygeneruje celÃ½ dokument fiktÃ­vneho textu. PrÃ­kaz \chapter{} cÌlenÃ­ dokument triedy kniha (book) na kapitoly (chapters). Parametrom prÃ­kazu je nÃ¡zov kapitoly."
272,305,0.379,Reconsidering Constitutional Formation Ii Decisive Constitutional Normativity : From Old Liberties To New Precedence (Volume 12.0),"Excerpt of the letter to Gazeta Narodowa (Wypis listu pisanego do kantoru Gazet Narodowey z BracÅawia dnia 7. Lutego), Suplement do Gazety Narodowey Y Obcey Nro XIV z Warszawy Dnia 18. Lutego Roku 1792, p. 84. Letters of the King to Deboliâend of February, March 1792, AGAD, ZbiÃ³r PopielÃ³w, sygn. 413; Szczygielski (1994b). Cf. also Gazeta Narodowa Y Obca Nro XV z Warszawy we srzode dnia 22. Lutego 1792, p. 85, Nro XVIII z Warszawy w sobotÄ dnia 3. Marca Roku 1792, pp. 103â104, reports from Merecz county (doniesienia z powiatu mereckiego), Suplement do Nro XXIV z Warszawy dnia 24. Marca 1792. GÅos JaÅnie WielmoÅ¼nego Franciszka MielÅ¼yÅskiego Starosty WaÅeckiego PosÅa PoznaÅskiego (Voice of the PoznaÅ Deputy Franciszek MielÅ¼yÅski) Na Sessyi Dnia 19. Marca Roku 1792 Miany, AGAD, ASCz, sygn. 24, k. 223â224v, there also similar speeches, a similar description is provided by StanisÅaw August to Deboli in his letter of 21 May 1791, AGAD, ZbiÃ³r PopielÃ³w, no. 413, p. 96. The ceremonies in Warsaw and the countryside were related by the Gazeta Narodowa Y Obca, No. XXXVI, z Warszawy w SobotÄ Dnia 5. Maia Roku 1792, pp. 213â214, Nro XL z Warszawy w SobotÄ dnia 19. Maia Roku 1792, p. 237, Suplement do Nro XV, p. 240, Suplement do Nro XLI, p. 246, Nro XLII z Warszawy z 26 maja 1792, p. 250, Suplement do Nro XLII p. 252, Nro XLIII z 30 maja, p. 256. SmoleÅski also described these events in: SmoleÅski (1897, pp. 5â18)."
66,63,0.379,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,prepojenie tabuliek v rÃ¡mci SQL sa pouÅ¾Ã­va klauzula JOIN ... ON .... PouÅ¾itie operÃ¡cie JOIN vyzerÃ¡ nasledovne: SELECT stÄºpce_tabuÄ¾ky FROM tabuÄ¾ka_1 JOIN tabuÄ¾ka_2 ON podmienka_spojenia UkÃ¡Å¾ka 23. VÅ¡eobecnÃ¡ definÃ­cia pre spojenie tabuliek pomocou klauzuly JOIN ... ON ...
59,72,0.379,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Pre podobnÃº sekvenciu vstupnÃ½ch aktivÃ­t, akÃ¡ bola pouÅ¾itÃ¡ v predchÃ¡dzajÃºcom prÃ­klade, x1=(1101101010), dostaneme pouÅ¾itÃ­m vzÅ¥ahov (2.22) aktivity neurÃ³nov siete, ktorÃ© sÃº uvedenÃ© v nasledujÃºcej tabuÄ¾ke"
76,69,0.379,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.5.2 DefinÃ­cia. Nech (ï, S, P) je pravdepodobnostnÃ½ priestor a nech B je udalosÅ¥ s kladnou pravdepodobnosÅ¥ou. PravdepodobnosÅ¥ podmienenÃº udalosÅ¥ou B, nazÃ½vame pravdepodobnosÅ¥ definovanÃº pre vÅ¡etky AïS vzÅ¥ahom (A) = Äasto sa definitorickÃ½ vzÅ¥ah pre P(AïB) = P(B)"
361,178,0.379,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","â terminaÌlne symboly â¦ suÌ ohranicÌeneÌ uÌvodzovkami, napr. âaâ â+â âbeginâ â¦ alternatÄ±Ìva uÌvodzoviek suÌ apostrofy, napr. âaâ â+â âbeginâ â neterminaÌlne symboly â¦ suÌ ohranicÌeneÌ v lomenyÌch zaÌtvorkaÌch, napr. h port i â¦ nie je nezvycÌajneÌ, zÌe sa zaÌtvorky vynechaÌvajuÌ, napr. port â pravidlaÌ â¦ majuÌ tvar hneterminaÌli:= postupnostâ terminaÌlov a neterminaÌlov., napr. hprogi:=âbeginâhstmt listiâendâ. â¦ koncÌia bodkou prÄ±Ìpadne bodkocÌiarkou . ; (bodka na konci pravidla sa niekedy vynechaÌva) â¦ lâavaÌ a pravaÌ strana pravidla moÌzÌe bytâ namiesto := oznacÌenaÌ aj =, â, prÄ±Ìpadne ::= â¦ v prÄ±Ìpade, zÌe sa pre oznacÌenie neterminaÌlu nepouzÌÄ±ÌvajuÌ zaÌtvorky vyzerajuÌ pravidlaÌ takto prog::=âbeginâ stmt list âendâ â dâalsÌie symboly â¦ | alternatÄ±Ìva (or), napr. hnumberi:=hintegeri | hreali â¦ () zoskupenie, napr. hexpri:=hvari | (hrealiâ+âhvari) â¦ [] nula alebo jeden vyÌskyt, napr. hifi:=âifâhtestiâthenâhstmti[âelseâhstmti] â¦ {} opakovanie nula azÌ velâakraÌt, napr. hidentlisti:=hidenti{â,âhidenti}"
240,188,0.378,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,premennou nemÃ´Å¾u byÅ¥ optimalizovanÃ© a vÅ¾dy je potrebnÃ© pracovaÅ¥ s aktuÃ¡lnou hodnotou v pamÃ¤ti. NasledujÃº prÃ­klady definÃ­ciÃ­ premennÃ½ch s typovÃ½m kvalifikÃ¡torom volatile pre prÃ­stup k hardvÃ©rovÃ½m registrom:
240,320,0.378,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"znakov, tak funkcia pripojÃ­ len prvÃ½ch n znakov src a nakoniec eÅ¡te do dst zapÃ­Å¡e ukonÄovacÃ­ znak \0, teda celkovo zapÃ­Å¡e aÅ¾ n+1 znakov! NajÄastejÅ¡ie chyby pri pouÅ¾itÃ­ strncat() sÃº preto spÃ´sobenÃ© nesprÃ¡vnou hodnotou parametra n, dÃ´leÅ¾itÃ© je nepoÄÃ­taÅ¥ ukonÄovacÃ­ znak, resp. pole dst musÃ­ maÅ¥ celkovÃº veÄ¾kosÅ¥ strlen(dst)+n+1, argument n pre strncat() sa zvyÄajne urÄuje vÃ½poÄtom podÄ¾a dÄºÅ¾ky reÅ¥azca v dst, a pri nepozornom vÃ½poÄte Ä¾ahko vznikne chyba. NapÃ­Å¡te funkciu my_strncat(char *dst, const char *src, int n), ktorÃ¡ do dst pripojÃ­ najviac toÄ¾ko znakov z reÅ¥azca src, aby"
59,393,0.378,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"NaÅ¡e Ãºvahy sformalizujeme pomocou nasledujÃºceho poriadku definÃ­ciÃ­: Formula ïª sa nazÃ½va bezprostrednÃ½m logickÃ½m dÃ´sledkom mnoÅ¾iny formÃºl ï ï½ ï»ïª1 ,ïª2 ,...,ïªn ï½ vtedy a len vtedy, ak vznikne aplikÃ¡ciou jednÃ©ho z pravidiel logickÃ©ho dÃ´kazu na formuly z ï."
196,191,0.378,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"Animovanie, postupnÃ© zobrazovanie poloÅ¾iek listu je moÅ¾nÃ© napr. pouÅ¾itÃ­m prÃ­kazu \pause. LATEX vysÃ¡dza takto zapÃ­sanÃ½ slajd do sÃ©rie slajdov s pribÃºdajÃºcimi poloÅ¾kami v liste. AvÅ¡ak celkovÃ½ pocÌet slajdov sa tÃ½mto nemenÃ­."
94,1,0.378,Sprievodca svetom vedeckÃ©ho publikovania,"Tento uÄebnÃ½ text (s vÃ½nimkou oznaÄenÃ½ch ilustrÃ¡ciÃ­, ktorÃ© sÃº pouÅ¾itÃ© so sÃºhlasom majiteÄ¾a autorskÃ½ch prÃ¡v) je Å¡Ã­renÃ½ pod licenciou Creative Commons 4.0 â Atribution CC BY, ktorÃ¡ umoÅ¾Åuje voÄ¾nÃ© pouÅ¾Ã­vanie diela za predpokladu uvedenia mien autorov."
276,22,0.378,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Switch(config-if)# ip address <IP adresa> <maska podsiete> Switch(config-if)# no shutdown VirtuÃ¡lne rozhranie bude aktÃ­vne aÅ¾ keÄ bude do zodpovedajÃºcej VLAN (s rovnakÃ½m ÄÃ­slom â identifikÃ¡torom) priradenÃ½ aspoÅ jeden aktÃ­vny port (do VLAN 1 sÃº v predvolenej konfigurÃ¡cii priradenÃ© vÅ¡etky porty prepÃ­naÄa). PokiaÄ¾ chceme s nakonfigurovanou IP adresou komunikovaÅ¥ z nejakej inej podsiete, je potrebnÃ© nastaviÅ¥"
361,9,0.377,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","ZaÌkladneÌ suÌcÌasti prekladacÌa suÌ zobrazeneÌ na ObraÌzku. 1. PrekladacÌ dostaÌva na vstupe zdrojovyÌ text programu, v ktorom lexikaÌlny analyzaÌtor rozpoznaÌva lexikaÌlne jednotky a transformuje ich do symbolickej formy. Tie suÌ potom spracovaneÌ syntaktickyÌm analyzaÌtorom, ktoryÌ skontroluje gramatickuÌ spraÌvnostâ programu z pohlâadu gramatiky daneÌho programovacieho jazyka. Jeho vyÌstup je strom odvodenia (derivacÌnyÌ strom), alebo postupnostâ pravidiel gramatiky. DÌalsÌÄ±Ì krok je seÌmantickaÌ analyÌza, ktoraÌ kontroluje seÌmantickuÌ spraÌvnostâ programu, naprÄ±Ìklad kontroluje pouzÌiteÌ typy premennyÌch v aritmetickyÌch vyÌrazoch. Potom sa realizuje preklad do vnuÌtornej formy, ktoraÌ moÌzÌe bytâ dâalej optimalizovanaÌ. Nakoniec sa vytvorÄ±Ì program vykonatelânyÌ priamo na cielâovej architektuÌre. JednotliveÌ cÌasti prekladacÌa v nasledujuÌcich kapitolaÌch opÄ±ÌsÌeme podrobnejsÌie."
196,63,0.377,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,dokument v zÃ¡kladnej Å¡truktÃºre typu sprÃ¡va (report). Postup je nasledovnÃ½: Menu: -> New Project -> Blank Project -> <uvedâte nÃ¡zov projektu > -> Create. Overleaf nÃ¡sledne vytvorÃ­ projekt s uvedenÃ½m nÃ¡zvom a sÃºbor main.tex s deviatimi riadkami zdrojovÃ©ho textu. Tento text pre-
59,201,0.377,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"diagonÃ¡lna platba F ï¨ s1 , s1 ï© bola podstatne vÃ¤ÄÅ¡ia ako platba F ï¨ s0 , s0 ï© , potom aj napriek pomerne veÄ¾kej zotrvaÄnosti pretrvÃ¡vania pÃ´vodnej stratÃ©gie s0 presadÃ­ sa evoluÄne (po peripetiÃ¡ch jej fluktuaÄnÃ©ho vracania sa do dominantnÃ©ho postavenia) odvodenÃ¡ stratÃ©gia s1 ."
94,396,0.377,Sprievodca svetom vedeckÃ©ho publikovania,"DisciplÃ­na â odbor, do ktorÃ©ho hÄ¾adanÃ¡ problematika patrÃ­. Pri sÃºÄasnom trende multidisciplinÃ¡rneho vÃ½skumu vÅ¡ak Äoraz viac informÃ¡ciÃ­ nie je moÅ¾nÃ© zaradiÅ¥ do jednej âzÃ¡suvkyâ. NaprÃ­klad vyhÄ¾adÃ¡vanie informÃ¡ciÃ­ na tÃ©mu âkvalita Å¾ivota onkologickÃ½ch pacientovâ mÃ´Å¾eme okrem medicÃ­ny dnes zahrnÃºÅ¥ aj do oblasti sociolÃ³gie."
240,14,0.377,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"ktorÃº sme nato pripravili (vyhradili) v riadku 6. Napr. uvaÅ¾ujme, Å¾e pouÅ¾Ã­vateÄ¾ zadal slovo Jana, tak po vykonanÃ­ riadku 8 bude oblasÅ¥ pamÃ¤ti str obsahovaÅ¥ znaky J, a, n, a, ktorÃ© zodpovedajÃº zadanÃ©mu slovu,"
59,662,0.377,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"MentÃ¡lny model je psychologickÃ¡ reprezentÃ¡cia reÃ¡lnej alebo imaginÃ¡rnej situÃ¡cie, tento model bol postulovanÃ½ Å¡kÃ³tskym psycholÃ³gom Kennethom Craikom v r. 1943 [1]. Predpokladal, Å¾e v naÅ¡ej mysli vznikajÃº modely skutoÄnosti (reÃ¡lnej alebo imaginÃ¡rnej), ktorÃ© napomÃ¡hajÃº k pochopeniu udalostÃ­ a javov vznikajÃºcich v sÃºvislosti s danou skutoÄnosÅ¥ou. PodÄ¾a Johnsona â Lairda [5,6] tieto modely vznikajÃº v pracovnej pamÃ¤ti naÅ¡ej mysle ako vÃ½sledok percepcie a/alebo imaginÃ¡cie, snahy vysvetliÅ¥ a pochopiÅ¥ danÃº situÃ¡ciu. ZÃ¡kladnÃ¡ Ärta tÃ½chto modelov je, Å¾e sÃº Å¡trukturÃ¡lne podobnÃ© objektom, ktorÃ© reprezentujÃº (asi tak, ako drevenÃ© modely molekÃºl v chÃ©mii ku skutoÄnÃ½m molekulÃ¡m)."
59,3,0.376,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"5.5 KlasickÃ½ prÃ­stup k adaptÃ¡cii neurÃ³novÃ½ch sietÃ­ reprezentujÃºcich kognitÃ­vny orgÃ¡n agenta...................................................................................................... 101 5.6 AdaptÃ¡cia kognitÃ­vneho orgÃ¡nu agenta pomocou uÄenia s odmenou a trestom............................................................................................................. 103 5.7 PouÅ¾itie uÄenia s odmenou a trestom pre hru piÅ¡kvorky................................... 106 5.8 ZÃ¡ver.................................................................................................................. 107 ProblÃ©my.................................................................................................................. 107 LiteratÃºra.................................................................................................................. 107 6 HolografickÃ¡ reprezentÃ¡cia v kognitÃ­vnej vede.................................................... 109 6.1 ÃvodnÃ© poznÃ¡mky............................................................................................. 109 6.2 MatematickÃ¡ formulÃ¡cia holografickej reprezentÃ¡cie....................................... 110 6.3 AsociatÃ­vna pamÃ¤Å¥............................................................................................. 115 6.4 PostupnosÅ¥ symbolov......................................................................................... 118 6.5 AgregovanÃ¡ pamÃ¤Å¥............................................................................................. 120 6.6 KÃ³dovanie relÃ¡ciÃ­............................................................................................... 123 6.7 UvaÅ¾ovanie pomocou modus ponens a modus tollens...................................... 126 6.8 PredikÃ¡tovÃ¡ logika..............................................................................................128 6.9 ZÃ¡ver...................................................................................................................132 ProblÃ©my.................................................................................................................. 132 LiteratÃºra.................................................................................................................. 133 7 MentÃ¡lne modely logiky v kognitÃ­vnej vede......................................................... 135 7.1 ÃvodnÃ© poznÃ¡mky............................................................................................. 135 7.2 Syntax, sÃ©mantika a pragmatika vÃ½rokovej logiky............................................ 136 7.3 Å pecifikÃ¡cia jazyka vÃ½rokovej logiky (syntax).................................................. 137 7.4 Å pecifikÃ¡cia vÃ½znamu vÃ½rokovej logiky (sÃ©mantiky)....................................... 137 7.5 TeÃ³ria dÃ´kazu â prirodzenÃ¡ dedukcia (syntaktickÃ½ prÃ­stup).............................. 141 7.6 Model vÃ½rokovej logiky â sÃ©mantickÃ© tablÃ¡ (sÃ©mantickÃ½ prÃ­stup)................... 143 7.7 ZÃ¡ver.................................................................................................................. 148 ProblÃ©my.................................................................................................................. 149 LiteratÃºra.................................................................................................................. 150 8 TeÃ³ria argumentÃ¡cie............................................................................................... 151 8.1 Argumenty......................................................................................................... 151 8.2 Stromy argumentÃ¡cie......................................................................................... 157 8.3 ZÃ¡ver.................................................................................................................. 162 ProblÃ©my.................................................................................................................. 162 LiteratÃºra.................................................................................................................. 163 9 RevÃ­zia poznatkov................................................................................................... 165 9.1 ÃvodnÃ© poznÃ¡mky..............................................................................................165 9.2 Expanzia teÃ³rie................................................................................................... 169 9.3 Kontrakcia teÃ³rie................................................................................................ 171 9.4 RevÃ­zia teÃ³rie......................................................................................................173 9.5 EpistemickÃ¡ vÃ½znamnosÅ¥ poznatkov..................................................................174 9.6 SpÃ¡janie poznatkov............................................................................................ 175 9.7 ZÃ¡ver.................................................................................................................. 177 ProblÃ©my...................................................................................................................178 LiteratÃºra.................................................................................................................. 179"
239,190,0.376,Ãvod do matematickej logiky,"Deï¬nÄ±Ìciu si objasnÄ±Ìme na nasledujuÌcom prÄ±Ìklade. PrÄ±Ìklad 10.1. UvazÌujme model s dvoma prvotnyÌmi formulami p a q, ktoreÌho graf a dvojice (Î½(p), Î½(q)) suÌ zobrazeneÌ na ObraÌzku 33. V Tabulâke 2 maÌme rozsÌÄ±ÌreneÌ ohodnotenie pre vybraneÌ formuly jazyka modaÌlnej logiky."
361,108,0.376,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","V prÄ±Ìpade, zÌe existuje viacero pravidiel, ktoreÌ obsahujuÌ rovnakyÌ prefix (lâavyÌ faktor), nevedeli by sme sa jednoznacÌne rozhodnuÌtâ, ktoreÌ pravidlo aplikovatâ, a teda gramatika by nebola LL(1). DefinÄ±Ìcia 4.5: typu:"
369,50,0.376,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 1.10. NormalizÃ¡cia do prvej normÃ¡lnej formy PrÃ­klad modelu, ktorÃ½ nie je v prvej normÃ¡lnej forme z druhÃ©ho dÃ´vodu podÄ¾a naÅ¡ej definÃ­cie, ukazuje obr. 1.11. V danom modeli mÃ¡ relÃ¡cia manÅ¾elstvo nÃ¡sobnosÅ¥ mnohoâmnoho,"
265,448,0.375,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"s jednou inÅ¡tanciou scenÃ¡ra. NaprÃ­klad na Obr. 4.12 mÃ´Å¾eme vidieÅ¥ prÃ­klad objektu definujÃºceho cestu medzi mestami (inÅ¡tancia triedy RouteSpecification), priÄom tento objekt agreguje viacerÃ© inÅ¡tancie triedy reprezentujÃºcej mesto (City)."
240,451,0.374,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,cifru priebeÅ¾nÃ©ho sÃºÄinu ako (i+j)-tu cifru (x[i+j] = prenos%10). V riadku 9 pripoÄÃ­tame k prenosu z minulÃ©ho rÃ¡du hodnotu sÃºÄinu na aktuÃ¡lne spracovanom rÃ¡de a aktuÃ¡lnu cifru z vÃ½sledku x (prenos += a[i] * b[i] + x[i+j]). VÃ½slednÃ¡ doplnenÃ¡ funkcia je takÃ¡to:
369,60,0.374,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,GeneralizÃ¡cia triedy GeneralizÃ¡cia triedy predstavuje najjednoduchÅ¡iu formu generalizÃ¡cie. Pri nej sa v diagrame tried uvÃ¡dza iba vÅ¡eobecnejÅ¡ia trieda. V prÃ­pade tvorby konkrÃ©tneho systÃ©mu sa mÃ´Å¾e namiesto tejto vÅ¡eobecnejÅ¡ej triedy dosadiÅ¥ Å¡pecializovanejÅ¡ia dÃ¡tovÃ¡ entita.
236,76,0.374,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Prostedia flushleft a flushright vytvÃ¡rajÃº odseky, ktorÃ© sÃº zarovnanÃ© buÄ doÄ¾ava alebo doprava. Prostredie center vytvÃ¡ra centrovanÃ½ text. Ak nezadÃ¡te \\, aby ste upresnili lÃ¡manie riadkov, LATEX ho urÄÃ­ sÃ¡m."
205,263,0.374,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy komunity skÃºsenostÃ­................................ 100 kontext pouÅ¾Ã­vateÄ¾ov ................................ 43 kontext prostredia.................................... 113 kontext Ãºlohy .......................................... 113 KosÃ­nusovÃ¡ podobnosÅ¥ ........................... 110 ManhattanskÃ¡ vzdialenosÅ¥ ...................... 111 medzipoloha .............................................. 78 metÃ³da K-priemerov ............................... 117 Microdata .................................................. 49 mikroblog .................................................... 4 model nÃ¡hodnÃ©ho surfistu ......................... 58 motÃ½likovÃ© rozdelenie webu ..................... 11 mÃºdrosÅ¥ davu .......................................... 101 NaivnÃ½ bayesovskÃ½ klasifikÃ¡tor .............. 122 navigaÄnÃ½ dopyt ........................................ 46 nejednoznaÄnosÅ¥ dopytov ......................... 46 normalizÃ¡cia adries ................................... 69 normalizovanÃ½ diskontovanÃ½ kumulatÃ­vny zisk ........................................................ 49 obohatenÃ© sÃºhrny ...................................... 49 OCLC Web Characterization Research .... 27 odporÃºÄacie systÃ©my ............................... 109 odporÃºÄanie zaloÅ¾enÃ© na kontexte .......... 113 odporÃºÄanie zaloÅ¾enÃ© na obsahu ............. 109 odporÃºÄanie zohÄ¾adÅujÃºce kontext ......... 113 Onion......................................................... 13 ontolÃ³gia ..................................................... 3 osobnÃ½ kontext ........................................ 113 osobnÃ½ poÄÃ­taÄ ............................................ 1 P@N .......................................................... 48 P2P ............................................................ 13 PageRank ...................................... 47, 58, 69 Pearsonov korelaÄnÃ½ koeficient .............. 111 personalizÃ¡cia ............................................ 43 poÄÃ­taÄ ......................................................... 1 poÄÃ­taÄovÃ¡ sieÅ¥ ............................................ 2 preliezacia politika .................................... 55 preliezaÄ webu .............................. 35, 54, 63 prepojenÃ© Ãºdaje ......................................... 49 presnosÅ¥..................................................... 48 prchavosÅ¥ webu ......................................... 36 prieskumnÃ© vyhÄ¾adÃ¡vanie ......................... 50 problÃ©m 404 .............................................. 32 problÃ©m bubliny ...................................... 113 problÃ©m studenÃ©ho Å¡tartu ........................ 111 problÃ©m sÃºkromia ................................... 114"
59,223,0.373,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde ï¸ je tzv. koeficient strmosti, ktorÃ½ Å¡pecifikuje âostrosÅ¥â fitnes funkcie. Proces uÄenia je Å¡pecifikovanÃ½ dvoma parametrami: (1) kardinalitou q okolia U(x) a (2) parameter strmosti ï¸. Pre asymptotickÃ© hodnoty F(x) platÃ­ ï¬1 ï¨ if x ï½ xopt ï© a lim F ï¨ x ï© ï½ f max (4.10) lim F ï¨ x ï© ï½ ï­ ObyÄajnÃ© fitnes f(x) mÃ¡ tento jednoduchÃ½ priebeh ï¬1 ï¨ pre x ï½ xopt ï© (4.11) f ï¨ xï© ï½ ï­ ï®0 ï¨ pre x ï¹ xopt ï© Potom platÃ­ pre kaÅ¾dÃ½ chromozÃ³m x podmienka (pozri obr. 4.4) f ï¨ xï© ï³ F ï¨ xï© (4.12) PodÄ¾a Hintona a Nowlana [8] Å¡tudovanÃ½ problÃ©m mÃ´Å¾e byÅ¥ charakterizovanÃ½ ako hÄ¾adanie ihly v kope sena (ang. needle in a haystack) dÃ´sledku skutoÄnosti, Å¾e existuje len jedno korektnÃ© rieÅ¡enie v priestore 2n rieÅ¡enÃ­. Fitnes je obvykle vÃ½znamnou heuristikou, ktorÃ¡ nÃ¡m uÄ¾ahÄuje toto hÄ¾adanie optimÃ¡lneho rieÅ¡enia. ObyÄajnÃ© fitnes f(x) nie je nÃ¡m vÅ¡ak nÃ¡pomocnÃ© v tomto prehÄ¾adÃ¡vanÃ­, z jeho definÃ­cie (4.11) vyplÃ½va, Å¾e je jednotkovÃ© v prÃ­pade, Å¾e x = xopt, v opaÄnom prÃ­pade je nulovÃ© (pozri Obr. 4.4). To znamenÃ¡, Å¾e k tomu, aby sme"
59,556,0.373,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde D ï½ ï»ï¤1 ,ï¤2 ,...,ï¤k ï½ je mnoÅ¾ina defaultovÃ½ch pravidiel (11.14) a ï ï½ ï»ïª1 ,ïª2 ,...,ïªn ï½ je teÃ³ria â mnoÅ¾ina formÃºl vÃ½rokovej logiky alebo predikÃ¡tovej logiky bez voÄ¾nÃ½ch premennÃ½ch. PristÃºpime k opisu aplikÃ¡cie defaultovej teÃ³rie ï D, tÃ¡to aplikÃ¡cia defaultovej teÃ³rie je Å¡pecifikovanÃ¡ pseudokÃ³dom, ktorÃ½ vytvÃ¡ra z pÃ´vodnej teÃ³rie ï jeho rozÅ¡Ã­renÃº verziu, ktorej konkrÃ©tny tvar zÃ¡visÃ­ od poradia aplikÃ¡cie defaultovÃ½ch pravidiel z mnoÅ¾iny D. Algoritmus 11.1. for ï¤ ï D do if ( ï pre ï¨ ï¤ ï© ) ï ( ï"
195,56,0.373,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"VypoÄÃ­tanÃ© vÃ½sledky presnosti, pokrytia a F1-Å¡tatistiky jednotlivÃ½ch predikÄnÃ½ch modelov moÅ¾no zobraziÅ¥ pomocou prÃ­kazu print(results): > print(results) Model Precision 0,65625 multinom 0,7096774 nb 0,6571429 rf 0,7575758 rpart 0,5526316 6 svmRadial 0,7307692 treebag 0,8181818"
122,132,0.373,Modelovanie softvÃ©ru,"9.1 Modelovanie vlastnostÃ­ ObjednÃ¡vanie, katalÃ³g, vyhÄ¾adÃ¡vanie vÃ½robkov, registrÃ¡cia a pod. sÃº vlastnosti (angl. features) e-obchodu. Vlastnosti mÃ´Å¾e byÅ¥ veÄ¾a, a aj sÃºvislostÃ­ medzi nimi. Na ich zachytenie sa pouÅ¾Ã­va technika modelovania vlastnostÃ­ (angl. feature modeling). SÃºÄasÅ¥ou tejto techniky sÃº diagramy vlastnostÃ­ (angl. feature diagrams). ObrÃ¡zok 9.1 zobrazuje diagram vlastnostÃ­ e-obchodu. Diagram obsahuje vlastnosti, ktorÃ© sme identifikovali v predchÃ¡dzajÃºcej Äasti a eÅ¡te niektorÃ© ÄalÅ¡ie."
361,41,0.373,"ÃVOD DO SOFTVÃROVÃCH JAZYKOV, PRÃKLADY A ÃLOHY","Analogicky k roÌznym triedam gramatÄ±Ìk budeme hovoritâ o triedach jazykov (mnozÌinaÌch), ktoreÌ tieto gramatiky generujuÌ. DefinÄ±Ìcia 2.21: Jazyk sa nazyÌva kontextovyÌ, bezkontextovyÌ cÌi regulaÌrny, ak exituje kontextovaÌ, bezkontextaÌ prÄ±Ìpadne regulaÌra gramatika, ktorou ho vieme generovatâ. Ak je jazyk generovanyÌ fraÌzovou gramatikou, budeme ho nazyÌvatâ rekurzÄ±Ìvne vycÌÄ±ÌslitelânyÌ jazyk. FormaÌlne:"
43,193,0.372,Objektovo orientovanÃ© programovanie v C++,"PrÃ­klad. Upravme predchÃ¡dzajÃºci prÃ­klad tak, aby funkciu metÃ³d Nastav udaje oboch tried prevzali konÅ¡truktory. #include <iostream> #include <string> using namespace std; class firma private: string nazov, sidlo; int hodinova mzda, hodinovy vykon; public: firma(string n,string s,int h m,int h v); void Vypis nazov a sidlo(); float Vypocitaj cenu(int mnozstvo); class zakaznik private: string meno, priezvisko, bydlisko; int stav uctu, mnozstvo vyrobkov; public: zakaznik(string m,string p,string b,int s u,int m v); void Vypis meno a bydlisko(); void Zisti cenu(firma F); firma::firma(string n,string s,int h m,int h v) nazov=n; sidlo=s; hodinova mzda=h m; hodinovy vykon=h v; void firma::Vypis nazov a sidlo() cout<<""Firma""<<endl; cout<<nazov<<"", ""<<sidlo<<endl;"
369,20,0.372,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,Autor v skutoÄnosti uvÃ¡dza dva pojmy: architektonickÃ½ pohÄ¾ad (view) a architektonickÃ© hÄ¾adisko (viewpoint). UvedenÃ¡ definÃ­cia sa tÃ½ka architektonickÃ©ho pohÄ¾adu. ArchitektonickÃ© hÄ¾adisko je definovanÃ© ako mnoÅ¾ina konvenciÃ­ na tvorbu jednÃ©ho typu pohÄ¾adu. V tÃ½chto skriptÃ¡ch sme z dÃ´vodu prehÄ¾adnosti tieto definÃ­cie trochu zjednoduÅ¡ili.
94,264,0.372,Sprievodca svetom vedeckÃ©ho publikovania,"zaÄÃ­najÃº vyÅ¾adovaÅ¥ a zrejme aj to, Å¾e vÃ½sledky s dÃ¡tami sÃº pre ostatnÃ½ch vedcov dÃ´veryhodnejÅ¡ie a potenciÃ¡lne vyuÅ¾iteÄ¾nejÅ¡ie. HistorickÃ½m prÃ­kladom prÃ­nosu otvorenÃ½ch dÃ¡t k rozvoju Ä¾udskÃ©ho poznania je projekt mapovania Ä¾udskÃ©ho genÃ³mu (Human Genome Project117, 1990 â 2003). UÅ¾ v roku 1996 na bermudskej konferencii vedci urÄili pravidlÃ¡, podÄ¾a ktorÃ½ch laboratÃ³riÃ¡ v rÃ¡mci projektu zverejÅovali vÅ¡etky Ãºseky DNA do 24 hodÃ­n po ich sekvenovanÃ­. Korene bermudskÃ½ch pravidiel siahajÃº do Å¡esÅ¥desiatych a sedemdesiatych rokov 20. storoÄia, do vÃ½skumnej komunity venujÃºcej sa modelovÃ©mu organizmu hlÃ­stovcovi Caenorhabditis elegans. Pre Ä¾udskÃ½ genÃ³m ich presadili vÃ½znamnÃ­ nematolÃ³govia John Sulston a Robert Waterston. OtvorenÃ¡ prax v tom Äase eÅ¡te nebola zvykom a prieÄila sa naprÃ­klad nemeckÃ½m a japonskÃ½m predpisom (Cook-Deegan a McGuire 2017), ale pre organizÃ¡ciu prÃ¡ce na projekte takÃ©ho rozsahu bolo nemysliteÄ¾nÃ© zadrÅ¾iavaÅ¥ informÃ¡cie, Äi uÅ¾ kvÃ´li publikovaniu v Äasopisoch, alebo z inÃ½ch dÃ´vodov. Promptne zdieÄ¾anÃ© a voÄ¾ne prÃ­stupnÃ© dÃ¡ta skutoÄne urÃ½chlili vÃ½skum â naprÃ­klad generovali v porovnanÃ­ so sekvenÄnÃ½mi dÃ¡tami sÃºkromnej firmy Celera (prÃ­stupnÃ½mi na zÃ¡klade licencie) o 20 â 30 % viac aplikÃ¡ciÃ­ (Williams 2013). Kedysi prevlÃ¡dal nÃ¡zor, Å¾e prÃ¡va duÅ¡evnÃ©ho vlastnÃ­ctva, t. j. moÅ¾nosÅ¥ patentovania, rozvoju Ä¾udskÃ©ho poznania iba prospievajÃº, pretoÅ¾e vidina monetizÃ¡cie vedeckÃ½ch objavov by mala nalÃ¡kaÅ¥ do oblasti vÃ½skumu investÃ­cie sÃºkromnÃ½ch podnikateÄ¾ov. Ako vÅ¡ak vidieÅ¥, za podmienky, Å¾e kÄ¾ÃºÄovÃ½m faktorom nie je finanÄnÃ½ prÃ­spevok sÃºkromnej firmy, ale intelektuÃ¡lny prÃ­nos mnoÅ¾stva akademickÃ½ch pracovnÃ­kov, ktorÃ­ na problÃ©me pracujÃº, mÃ´Å¾u patenty vÃ½skum brzdiÅ¥. Predstava, Å¾e vedec, ktorÃ½ chce skÃºmaÅ¥ konkrÃ©tny gÃ©n, musÃ­ prejsÅ¥ byrokratickou patentovou procedÃºrou, dokonca aj keÄ neplÃ¡nuje svoj vÃ½skum komerÄne vyuÅ¾iÅ¥, iba preto, aby si gÃ©n medzi Äasom nepatentoval niekto inÃ½ a nezabrÃ¡nil mu pokraÄovaÅ¥ v prÃ¡ci, mnohÃ½ch desila. PrÃ¡vne komplikÃ¡cie Äi neistota odrÃ¡dzali vedcov od vÃ½skumu tÃ½ch gÃ©nov, ktorÃ© mala vo svojom portfÃ³liu Celera (dokonca aj keÄ akademickÃ½, neziskovÃ½ vÃ½skum na nich nebol zakÃ¡zanÃ½). U gÃ©nov vo verejnej domÃ©ne sa takÃ©to prekÃ¡Å¾ky nevyskytovali. K ich vÃ½skumu sa teda pripojilo viac Ä¾udÃ­ s rÃ´znymi nÃ¡padmi a prÃ­stupmi, Äo malo za nÃ¡sledok objavenie vÃ¤ÄÅ¡ieho mnoÅ¾stva rieÅ¡enÃ­. Napokon sÃºd v USA rozhodol, Å¾e gÃ©ny ako dielo prÃ­rody nemÃ´Å¾u byÅ¥ predmetom patentu (patentovaÅ¥ sa vÅ¡ak naÄalej mÃ´Å¾u pozmenenÃ© gÃ©ny alebo komplementÃ¡rne sekvencie). Politika zdieÄ¾ania dÃ¡t v projekte Ä¾udskÃ©ho genÃ³mu sa stala prÃ­kladom pre ÄalÅ¡ie podobnÃ© projekty, ktorÃ© zverejnili Å¡irokÃº paletu biomedicÃ­nskych Komunita skÃºmajÃºca Ceanorhabditis elegans tieÅ¾ nezahÃ¡Ä¾a a vyuÅ¾Ã­va dÃ¡ta z predchÃ¡dzajÃºceho extenzÃ­vneho vÃ½skumu na otvorenÃ½ projekt OpenWorm118 s cieÄ¾om vybudovaÅ¥ prvÃ½ virtuÃ¡lny organizmus. V oblasti projektov tÃ½kajÃºcich sa zdravia a funkciÃ­ Ä¾udskÃ©ho tela je vÅ¡ak dnes oproti obdobiu sekvenovania DNA situÃ¡cia zloÅ¾itejÅ¡ia. ZverejÅuje sa mnoho druhov Ãºdajov, no nestaÄÃ­, Å¾e sÃº prÃ­stupnÃ© â musia byÅ¥ sprÃ¡vne zorganizovanÃ© a zodpovedajÃºco 117 https://www.genome.gov/10001772/all-about-the--human-genome-project-hgp/ 118 http://openworm.org/"
184,28,0.372,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,PouÅ¾itie architektonickÃ½ch vzorov zvyÅ¡uje ÄitateÄ¾nosÅ¥ nÃ¡vrhu architektÃºry a zjednoduÅ¡uje jeho komunikÃ¡ciu smerom k vÃ½vojovÃ½m tÃ­mom a inÃ½m zÃºÄastnenÃ½m stranÃ¡m. S ÄitateÄ¾nosÅ¥ou nÃ¡vrhu Ãºzko sÃºvisÃ­ aj spÃ´sob vyjadrenia architektÃºry softvÃ©ru.
43,164,0.371,Objektovo orientovanÃ© programovanie v C++,"V prvom kroku vytvorÃ­me blok veÄ¾kosti m Ã n, v druhom jednorozmernÃ© pole smernÃ­kov a v treÅ¥om tieto smernÃ­ky sprÃ¡vne nasmerujeme â i-ty smernÃ­k bude obsahovaÅ¥ adresu prvku poÄ¾a blok s indexom in. Ak chceme takto alokovanÃº Å¡truktÃºru dealokovaÅ¥, staÄÃ­ dealokovaÅ¥ polia pole a blok. delete[] pole; delete[] blok;"
190,315,0.371,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"percento veÄ¾mi spokojnÃ½ch zÃ¡kaznÃ­kov, percento spokojnÃ½ch zÃ¡kaznÃ­kov (veÄ¾mi spokojnÃ½ch a spokojnÃ½ch), percento nespokojnÃ½ch zÃ¡kaznÃ­kov (veÄ¾mi nespokojnÃ½ch a nespokojnÃ½ch), percento neuspokojenÃ½ch zÃ¡kaznÃ­kov (neutrÃ¡lny, nespokojnÃ½ a veÄ¾mi nespokojnÃ½)."
184,462,0.37,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Apache Lucene Apache Lucene 28 je vÃ½konnÃ½ vyhÄ¾adÃ¡vacÃ­ nÃ¡stroj ktorÃ½ podporuje fulltextovÃ© vyhÄ¾adÃ¡vanie. Software je vytvorenÃ½ ako kniÅ¾nica v jazyku Java a je ho moÅ¾nÃ© pouÅ¾iÅ¥ v rÃ´znych aplikÃ¡ciÃ¡ch kde je potrebnÃ© fulltextovÃ© vyhÄ¾adÃ¡vanie, indexovanie alebo podpora textovÃ½ch operÃ¡ciÃ­ na dokumentoch. Lucene je vyvÃ­janÃ½ ako open source. mnoGosearch mnoGoSearch29 je fulltextovÃ½ vyhÄ¾adÃ¡vacÃ­ stroj vhodnÃ½ najmÃ¤ na aplikÃ¡cie ktorÃ© ako zdroj dokumentov vyuÅ¾Ã­vajÃº intranet alebo internet. Je zloÅ¾enÃ½ z dvoch ÄastÃ­, indexovacÃ­ mechanizmus ktorÃ½ vie spracovaÅ¥ rÃ´zne typy dokumentov (HTML, PDF, DOC, XLS, MP3) za podpory ÄalÅ¡Ã­ch voÄ¾ne dostupnÃ½ch programov, priÄom tieÅ¾ podporuje rÃ´zne protokoly ako HTTP, FTP , NEWS protokol alebo aj lokÃ¡lne sÃºbory. Druhou ÄasÅ¥ou systÃ©mu je podpora vyhÄ¾adÃ¡vacieho rozhrania, ktorÃ© je dostupnÃ© vo verzii PHP alebo ako CGI skript. SystÃ©m je moÅ¾nÃ© rozÅ¡irovaÅ¥ prispÃ´sobovaÅ¥ a konfigurovaÅ¥ podÄ¾a potreby aj vzhÄ¾adom nato Å¾e je vyvÃ­janÃ½ ako open source."
190,107,0.37,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,SystÃ©my sledovania chÃ½b (angl. bug-tracking) sa pouÅ¾Ã­vajÃº najmÃ¤ v implementaÄnej a testovacej fÃ¡ze vÃ½voja. UmoÅ¾ÅujÃº Ä¾ahkÃº distribÃºciu a sledovanie Ãºloh v kontexte zdrojovÃ½ch sÃºborov a jednotlivÃ½ch zmien v kÃ³de. V spojenÃ­ so systÃ©mami na verziovanie umoÅ¾ÅujÃº Äasto sledovanie a monitorovanie prÃ¡ce Älenov tÃ­mu. PrÃ¡ve moÅ¾nosti prepojenia a uÄ¾ahÄenia prÃ¡ce projektovÃ½ch manaÅ¾Ã©rov pri sledova-
59,557,0.369,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Poznamenajme, Å¾e tento algoritmus nie je âdeterministickÃ½â, vÃ½slednÃ¡ rozÅ¡Ã­renÃ¡ teÃ³ria ï zÃ¡visÃ­ na poradÃ­ vÃ½beru defaultovÃ½ch pravidiel ï¤ z mnoÅ¾iny D, rÃ´zne poradia tohto vÃ½beru generujÃº rÃ´zne rozÅ¡Ã­renia. PrÃ­klad 11.4. Budeme Å¡tudovaÅ¥ slÃ¡vny prÃ­klad defaultovej logiky o americkom prezidentovi Nixonovi. Nech defaultovÃ¡ teÃ³ria ï D ï½ ï¨ D,ï ï© je Å¡pecifikovanÃ¡ takto: Nixon _ kvaker : D pacifista Nixon _ konzervativista : D antipacifista , ï¤1 ï½ pacifista antipacifista T ï½ ï»Nixon _ kvaker,Nixon _ konzervativecï½ TÃ¡to defaultovÃ¡ teÃ³ria mÃ¡ len dve rozÅ¡Ã­renia ï¤1 aplikovanÃ© na ï ï¤2 aplikovanÃ© na ï ï ï ï» pacifistaï½ ï ï ï»antipacifistaï½ D ï½ ï»ï¤1, ï¤1ï½ , ï¤1 ï½"
393,538,0.369,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"VÃ½chodiskom predchÃ¡dzajÃºcich analÃ½z boli vÃ½sledky vÃ½skumu v oblasti nÃ¡vrhovÃ½ch vzorov, konkrÃ©tne v oblasti znovupouÅ¾itia nÃ¡vrhovÃ½ch vzorov, resp. ich ÄastÃ­. VÃ½sledky analÃ½z a experimentov boli publikovanÃ© na Å¡tudentskÃ½ch vedeckÃ½ch konferenciÃ¡ch IIT.SRC 2005 (ÄlÃ¡nok Modeling systems using design patterns) a IIT.SRC 2006 (ÄlÃ¡nok Comparison of CASE tools based on design patterns source code support) v Bratislave, na konferenciÃ¡ch s medzinÃ¡rodnou ÃºÄasÅ¥ou OBJEKTY 2005 (ÄlÃ¡nok IzolÃ¡cia vÅ¡eobecnÃ½ch ÄastÃ­ vzoru Composite) v Ostrave a TVORBA SOFTWARE 2006 (ÄlÃ¡nok MoÅ¾nosti znovupouÅ¾itia ÄastÃ­ nÃ¡vrhovÃ½ch vzorov) tieÅ¾ v Ostrave a na medzinÃ¡rodnej konferenciÃ­ JCKBSE 2006 (ÄlÃ¡nok Reuse of patterns source code) v Talline. Postupne sme analyzovali rÃ´zne moÅ¾nosti znovupouÅ¾itia vzorov so zameranÃ­m na nÃ¡vrhovÃ© vzory. Postupne prechÃ¡dzame rÃ´zne prÃ­stupy od CASE nÃ¡strojov cez Å¡tandardnÃ© i atypickÃ© objektovo-orientovanÃ© jazyky aÅ¾ k rozÅ¡Ã­reniam objektovoorientovanÃ½ch jazykov a s nimi spojenÃ© vÃ½hody a nevÃ½hody. SamotnÃ© znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov pomocou CASE nÃ¡strojov by sa dalo povaÅ¾ovaÅ¥ za ÃºplnÃ½ zÃ¡klad. CASE nÃ¡stroje disponujÃº relatÃ­vnou pouÅ¾Ã­vateÄ¾skou prijateÄ¾nosÅ¥ou, i keÄ proces vkladania novÃ©ho nÃ¡vrhovÃ©ho vzoru do vlastnej kniÅ¾nice nie je jednoduchÃ½ a pÃ´sobÃ­ skÃ´r chaotickÃ½m dojmom. UrÃ½chlenie vÃ½voja s vyuÅ¾itÃ­m CASE nÃ¡strojov v podobe jednoduchÃ©ho a rÃ½chleho vytvÃ¡rania nÃ¡vrhu s podporou nÃ¡vrhovÃ½ch vzorov prinÃ¡Å¡a so sebou ÄalÅ¡ie skracovanie doby vÃ½voja a s tÃ½m sÃºvisiace zniÅ¾ovanie nÃ¡kladov na vÃ½voj. Sklamanie v podobe nedostatoÄnej podpory viditeÄ¾nosti vzoru a podpory mikroarchitektÃºr mÃ´Å¾e byÅ¥ uÅ¾ onedlho minulosÅ¥ou, vzhÄ¾adom na zainteresovanosÅ¥ veÄ¾kÃ½ch firiem je vÃ½voj v tejto oblasti pomerne rÃ½chly a zrejme nedostatky v podpore vzorov budÃº postupne odstraÅovanÃ©. ZnovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov s pouÅ¾itÃ­m neÅ¡tandardnÃ½ch jazykov v podobe ohÃ½bania vzoru z kniÅ¾nice je sÃ­ce pomerne prehÄ¾adnÃ© a jednoduchÃ©, no na druhej strane len mÃ¡lo projektov mÃ´Å¾e byÅ¥ realizovanÃ½ch v rÃ´znych experimentÃ¡lnych viac alebo menej znÃ¡mych jazykoch. AtypickÃ© jazyky, medzi ktorÃ© v sÃºÄasnosti patrÃ­ i analyzovanÃ½ jazyk Beta, prinÃ¡Å¡ajÃº rÃ´zne neÅ¡tandardnÃ© prostriedky jednak pre uloÅ¾enie vzoru, resp. jeho ÄastÃ­ do kniÅ¾nice a tieÅ¾ pre ohÃ½banie, modifikovanie a prispÃ´sobovanie zovÅ¡eobecnenÃ©ho vzoru pre konkrÃ©tnu domÃ©nu pouÅ¾itia. I keÄ autori jazyka JAVA sa pri jeho vÃ½voji v mnohÃ½ch veciach inÅ¡pirovali prÃ¡ve jazykom Beta, prostriedky, ktorÃ© ponÃºka jazyk JAVA, ani zÄaleka nezodpovedajÃº Å¡irokej podpore znovupouÅ¾itia vo vÅ¡eobecnosti v jazyku Beta. Ide zrejme o prÃ­liÅ¡ Å¡pecifickÃ© prostriedky, ktorÃ½ch implementÃ¡cia v novÃ½ch jazykoch je prÃ­liÅ¡ nÃ¡roÄnÃ¡, a zÃ¡vereÄnÃ½ efekt by nebol postaÄujÃºci."
41,127,0.369,InformaÄnÃ© vzdelÃ¡vanie,"TODOIST â je skÃ´r projektovÃ½ manaÅ¾Ã©r, kde si mÃ´Å¾em vytvoriÅ¥ a organizovaÅ¥ Ãºlohy a projekty. A pritom si sledovaÅ¥ svoju produktivitu. [10] TRELLO â podobnÃ½ ako TODOIST. Je urÄenÃ½ pre projekty riadenÃ© metÃ³dami Agile. Pre tÃ½ch, Äo majÃº radi farebnÃ© prostredie a elektronickÃº verziu letÃ¡Äikov s odkazmi."
130,554,0.369,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrispÃ´sobovanie prezentÃ¡cie Pri metÃ³dach prispÃ´sobovania prezentÃ¡cie ide na rozdiel od modifikovania obsahu (ako je to v prÃ­pade metÃ³d prispÃ´sobovania obsahu) o prispÃ´sobovanie formy, ktorÃ¡ je zvolenÃ¡ pre prezentÃ¡ciu zvolenÃ©ho obsahu. Äasto sa vÅ¡ak uskutoÄÅujÃº prÃ¡ve spolu s metÃ³dami prispÃ´sobovania obsahu. Medzi metÃ³dy prispÃ´sobovania prezentÃ¡cie patrÃ­:"
239,92,0.369,Ãvod do matematickej logiky,"MnozÌiny a vyÌroky Na zaÌver tejto kapitoly si ukaÌzÌeme suÌvis vyÌrokovej logiky s teoÌriou mnozÌÄ±Ìn. Majme zvoleneÌ nejakeÌ univerzum, cÌizÌe nejakuÌ mnozÌinu objektov U. VsÌetky nasÌe mnozÌiny buduÌ cÌastâou U."
240,460,0.368,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-30 (rieÅ¡enie) UrÄÃ­me najskÃ´r hlaviÄku funkcie: vstupnÃ© argumenty sÃº vkladanÃ© ÄÃ­slo (cislo), pole a[], do ktorÃ©ho vkladÃ¡me, poÄet prvkov n poÄ¾a a[] ako aj dÄºÅ¾ka poÄ¾a a[] argument kapacita. AkÃ© budÃº vÃ½stupnÃ© argumenty? VÃ½stupnÃ© argumenty by mali zahÅÅaÅ¥ tie"
130,348,0.368,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,Na zÃ¡klade schopnosti pamÃ¤taÅ¥ si minulosÅ¥ a uchovÃ¡vaÅ¥ informÃ¡cie vo svojom vnÃºtri rozdeÄ¾ujeme agenty na 2 zÃ¡kladnÃ© skupiny: histeretickÃ© agenty ktorÃ© tÃºto schopnosÅ¥ majÃº a tropistickÃ© agenty bez schopnosti pamÃ¤taÅ¥ si.
239,167,0.368,Ãvod do matematickej logiky,"Pravidiel je velâa, preto si ich objasnÄ±Ìme. SÌtrukturaÌlne pravidlaÌ obsahujuÌ pravidlaÌ oslabenia (WL) a (WR). Je zrejmeÌ, zÌe ak platÄ±Ì Î â¢ â, tak ako predpoklady, tak aj doÌsledky mozÌno zoslabitâ pridanÄ±Ìm dâalsÌej formuly. ZvysÌneÌ dve dvojice pravidiel, pravidlaÌ kontrakcie (CL) a (CR) a permutacÌneÌ pravidlaÌ (PL) a (PR) vlastne tvrdia, zÌe na poradÄ±Ì a naÌsobnosti formuÌl v predpokladoch, respektÄ±Ìve doÌsledkoch, nezaÌlezÌÄ±Ì. TakzÌe sekventy by sa dali deï¬novatâ pomocou mnozÌÄ±Ìn namiesto postupnostÄ±Ì, avsÌak pre algoritmizaÌciu je pojem postupnosti vyÌhodnejsÌÄ±Ì. AxioÌma identity (I) je triviaÌlna, vsÌimnime si vsÌak pravidlo (Cut). Najprv, sekvent Î£, A â¢ Î  je ekvivalentnyÌ so sekventom Î£ â¢ q A, Î . Keby platilo Î â¢ â alebo Î£ â¢ Î , tak potom aj Î, Î£ â¢ â, Î  (pouzÌijeme pravidlaÌ oslabenia). Predpokladajme preto, zÌe Î 0 â a Î£ 0 Î . Potom vsÌak nutne Î â¢ A a Î£ â¢ q A, cÌo znamenaÌ, zÌe Î, Î£ je spornaÌ, a preto Î, Î£ â¢ â, Î  (bez ohlâadu na to, cÌi suÌ â a Î  praÌzdne, alebo nepraÌzdne). VsÌimnime si, zÌe v najjednoduchsÌej forme: z B â¢ A a A â¢ C odvodâ B â¢ C, sa pravidlo (Cut) podobaÌ na pravidlo sylogizmu. Prejdime teraz k logickyÌm pravidlaÌm. PravidlaÌ (q L) a (q R) sme vysvetlili uzÌ v predchaÌdzajuÌcej podkapitole. Pravidlo (âR) je cÌastâou vety o dedukcii a ostatneÌ logickeÌ pravidlaÌ suÌ dvoch typov. Tie, ktoreÌ majuÌ konjunkciu v predpokladoch (â§L1 ) a (â§L2 ) a tie, ktoreÌ majuÌ disjunkciu v doÌsledkoch (â¨R1 ) a (â¨R2 ) suÌ vlastne zoslabenia. ZvysÌneÌ pravidlaÌ (â¨L) a (â§R) majuÌ disjunkciu v predpokladoch alebo"
196,46,0.368,VybranÃ© metÃ³dy inÅ¾inierskej prÃ¡ce,"preto, aby som mohol zacÌatâ pracovatâ v on-line prostredÃ­ Overleaf. Ak ste registrovanÃ­, stacÌÃ­ sa prihlÃ¡sitâ na https://www.over leaf.com/login svojim emailom alebo IEEE, Google, Twitter, ORCID a heslom. Inak je potrebnÃ© sa registrovatâ na https: //www.overleaf.com/register pre lâubovolânÃ½ z programov (Professional, Collaborator, Personal) a vytvoritâ si tak vlastnÃ½ ÃºcÌet. Overleaf podporuje registrÃ¡ciu prostrednÃ­ctvom emailovej adresy, Google ÃºcÌtu alebo prostrednÃ­ctvom vlastnÃ©ho ORCID."
59,83,0.367,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"(1) PrechodovÃ¡ funkcia stavt ï«1 ï½ f ï¨ stavt ,vstupnÃ½ symbolt ï© : stav, vstupnÃ½ znak prechodovÃ¡ funkcia f (s1,0) ï® (0,0) (b) ï® (1) (s1,1) ï® (0,1) (a) ï® (0) (s2,0) ï® (1,0) (a) ï® (0) (s2,1) ï® (1.1) (a) ï® (0) (2) VÃ½stupnÃ¡ funkcia vÃ½stupnÃ½ symbolt ï«1 ï½ g ï¨ stavt ,vstupnÃ½ symbolt ï© : stav, vstupnÃ½ znak (s1,0) ï® (0,0) (s1,1) ï® (0,1) (s2,0) ï® (1,0) (s2,1) ï® (1.1)"
240,54,0.367,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Argumenty predstavujÃº zoznam adries premennÃ½ch oddelenÃ½ch Äiarkami. NÃ¡vratovÃ¡ hodnota funkcie scanf() je typu int (celÃ© ÄÃ­slo) a je veÄ¾mi dÃ´leÅ¾itÃ¡, pretoÅ¾e predstavuje poÄet ÃºspeÅ¡ne naÄÃ­tanÃ½ch prvkov. NasledujÃºcim prÃ­kazom naÄÃ­tame tri celÃ© ÄÃ­sla zo vstupu do premennÃ½ch x, y, z a poÄet naÄÃ­tanÃ½ch ÄÃ­sel si uloÅ¾Ã­me do premennej pocet: int pocet = scanf(""%d %d %d"", &x, &y, &z);"
393,173,0.366,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PrÃ­klad 3-2. HierarchickÃ½ zhlukovacÃ­ algoritmus zdola nahor (Zhong et al., 2003). Vstup: X ={x1,â¦,xn} je koneÄnÃ¡ n-prvkovÃ¡ mnoÅ¾ina objektov. Miera podobnosti medzi objektami: funkcia sim 2x x 2x â R VÃ½stup: hierarchickÃ½ systÃ©m zhlukov"
393,67,0.366,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"StrÃ¡nky U Â StrÃ¡nka U1: (dÃ¡ta, 1), (predpoklad, 1) Â StrÃ¡nka U2: (informÃ¡cia, 2), (extrahovanie, 2), (dÃ¡ta, 2) Â StrÃ¡nka U3: (klasifikÃ¡cia, 2), (pravdepodobnosÅ¥, 2) Â StrÃ¡nka U4: (zhlukovanie, 2), (segment, 1)"
115,143,0.365,Algebra a diskrÃ©tna  matematika,podmnoÅ¾ina vlastnÃ¡ podmnoÅ¾ina A â B zjednotenie mnoÅ¾Ã­n prienik mnoÅ¾Ã­n doplnok (komplement) mnoÅ¾iny rozdiel mnoÅ¾Ã­n (relatÃ­vny doplnok) Vennove diagramy algebra teÃ³rie mnoÅ¾Ã­n princÃ­p kompozicionality oblasti v mnoÅ¾ine univerza tabuÄ¾kovÃ¡ metÃ³da pre verifikÃ¡ciu rodina mnoÅ¾Ã­n axiomatizÃ¡cia geometrickÃ¡ interpretÃ¡cia mnoÅ¾iny potenÄnÃ¡ mnoÅ¾ina RenÃ© Descartes
122,5,0.365,Modelovanie softvÃ©ru,"DetailnÃ½ model operÃ¡cie a ako sa mu vyhnÃºÅ¥ pomocou OCL 7.1 DetailnÃ½ model operÃ¡cie . . . . . . . . . . . . . . . . . . . . 7.2 OperÃ¡cia ako sluÅ¾ba . . . . . . . . . . . . . . . . . . . . . . . 7.3 Predpoklady, dÃ´sledky a invarianty pri prekonÃ¡vanÃ­ . . . 7.4 Kontext . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ."
59,329,0.365,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 6.12. AgregÃ¡cia 8 conceptuÃ¡lnych vektorov na 4 agregÃ¡ty. V 1. etape proces âupratovaniaâ identifikuje agregÃ¡ty, ktorÃ© sÃº potom v 2. etape Äalej identifikovanÃ© na elementÃ¡rne konceptuÃ¡lne vektory."
393,85,0.365,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"V experimente sa zistilo pribliÅ¾ne 7500 nesekvenÄnÃ½ch nepriamych asociÃ¡ciÃ­ <a,b,M> generovanÃ½ch v rÃ´znych krokoch algoritmu, viac ako 5500 nesekvenÄnÃ½ch nepriamych spojenÃ­ (a,b). Vykonali sa viacerÃ© experimenty s rÃ´znym nastavenÃ­m parametrov."
393,508,0.364,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PrÃ­klad 9-5. Volanie vÅ¡eobecnej Operation s nÃ¡zvom domÃ©novo zÃ¡vislej funkcie. MetÃ³da Operation oznaÄenÃ¡ ako 7 v triedach Line, Text a Picture rozhoduje o vykonanÃ­ konkrÃ©tnych domÃ©novo zÃ¡vislÃ½ch metÃ³d na zÃ¡klade parametra podÄ¾a prÃ­kladu 9-6. if op = draw then Draw() else if op = delete then Delete()"
236,113,0.364,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"PokiaÄ¾ zadÃ¡te pred otvÃ¡racÃ­ oddeÄ¾ovaÄ prÃ­kaz \left a pred uzatvÃ¡racÃ­ oddeÄ¾ovaÄ prÃ­kaz \right, TEX automaticky vypoÄÃ­ta sprÃ¡vnu veÄ¾kosÅ¥ oddeÄ¾ovaÄa. ZapamÃ¤tajte si, Å¾e kaÅ¾dÃ© \left musÃ­te uzatvoriÅ¥ prÃ­sluÅ¡nÃ½m \right. Ak nechcete napravo niÄ, pouÅ¾ite neviditeÄ¾nÃ© â\right.Ã¿! \begin{displaymath} 1 + \left( \frac{1}{ 1-x^{2} } \right) ^3 \end{displaymath}"
190,18,0.364,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"VÃ½znam emocionÃ¡lnosÅ¥, umeleckosÅ¥, predstavivosÅ¥, zvedavosÅ¥, skÃºsenosti, dobrodruÅ¾nosÅ¥ sebadisciplÃ­na, zmysel pre povinnosÅ¥, plÃ¡novanie, cieÄ¾avedomosÅ¥ energia, pozitÃ­vne emÃ³cie, spoloÄenskosÅ¥, komunikatÃ­vnosÅ¥, nadÅ¡enie prispÃ´sobivosÅ¥, spoluprÃ¡ca, kooperÃ¡cia, podozrievavosÅ¥, nepriateÄ¾stvo odolnosÅ¥, emocionÃ¡lna stabilita, citlivosÅ¥, precitlivelosÅ¥, sentimentalita, depresia"
94,487,0.363,Sprievodca svetom vedeckÃ©ho publikovania,"DatabÃ¡za Journal Citation Reports186 PrÃ­klad 1 VyhÄ¾adajte Äasopis Chemical Papers a zistite hodnotu jeho impakt faktora za rok 2016 a rok 2014. Vysvetlite, Äo to znamenÃ¡. Zistite, odkedy je Äasopis indexovanÃ½ v databÃ¡ze Journal Citation Reports."
276,158,0.363,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"smerovaÄi nie je uloÅ¾enÃ¡ konfigurÃ¡cia, prÃ­padne ju vymaÅ¾te a smerovaÄ reÅ¡tartujte. 2. Nakonfigurujte smerovaÄu pomenovanie R1, heslÃ¡ âciscoâ do konzoly a privilegovanÃ©ho reÅ¾imu a nakonfigurujte telnet prÃ­stup. Deaktivujte preklad domÃ©n a synchronizujte logovanie. 3. Nastavte zariadeniam IP adresy podÄ¾a zobrazenej tabuÄ¾ky (TabuÄ¾ka 11.1). 4. Vytvorte ACL, ktorÃ½ zabezpeÄÃ­, aby sa PC1 mohol pripojiÅ¥ na HTTP server beÅ¾iaci na PC2, ale PC2 sa nemohol pripojiÅ¥ na HTTP server beÅ¾iaci na PC1. OstatnÃ¡ komunikÃ¡cia mÃ¡ byÅ¥ povolenÃ¡. 5. Aplikujte vytvorenÃ½ ACL na vhodnÃ© rozhranie a zvoÄ¾te smer, pri ktorom mÃ¡ byÅ¥ komunikÃ¡cia filtrovanÃ¡. 6. Overte sprÃ¡vnosÅ¥ konfigurÃ¡cie zobrazenÃ­m ACL. 7. Overte funkÄnosÅ¥ filtrovania vygenerovanÃ­m prÃ­sluÅ¡nej komunikÃ¡cie medzi poÄÃ­taÄmi. DoplnkovÃ© Ãºlohy 8. PovoÄ¾te vzdialenÃ½ prÃ­stup na smerovaÄ R1 len z IP adresy poÄÃ­taÄa PC1. 9. Aplikujte vytvorenÃ½ ACL na vzdialenÃ½ prÃ­stup. 10. Overte prostrednÃ­ctvom telnet prÃ­stupu na R1 z PC1 aj z PC2."
122,53,0.363,Modelovanie softvÃ©ru,"3.11 Vyjadrenie prÃ­padu pouÅ¾itia diagramom aktivÃ­t GrafickÃ¡ reprezentÃ¡cia postupnosti ÄinnostÃ­ alebo krokov, kde Äinnosti sÃº reprezentovanÃ© uzlami, je veÄ¾mi intuitÃ­vna. UML na to poskytuje diagram aktivÃ­t. PrÃ­klad vyuÅ¾itia diagramu aktivÃ­t na zachytenie prÃ­padu pouÅ¾itia je na obrÃ¡zku 3.9."
239,18,0.363,Ãvod do matematickej logiky,"KonjunktÄ±Ìvny normaÌlny tvar DefinÄ±Ìcia. VyÌrokovaÌ formula je v konjunktÄ±Ìvnom normaÌlnom tvare, ak je konjunkciou niekolâkyÌch formuÌl, o ktoryÌch platÄ±Ì: (a) KazÌdaÌ je disjunkciou konecÌne velâa prvotnyÌch formuÌl, prÄ±Ìpadne ich negaÌciÄ±Ì. (b) V zÌiadnej sa nevyskytuje suÌcÌasne prvotnaÌ formula aj jej negaÌcia. (c) Ak sa naviac v kazÌdej formule vyskytujuÌ vsÌetky prvotneÌ formuly, potom je formula v uÌplnom konjunktÄ±Ìvnom normaÌlnom tvare. KedâzÌe suÌ q(A â¨ B) a q A â§ q B ekvivalentneÌ formuly, a podobne suÌ ekvivalentneÌ aj q(A â§ B) a q A â¨ q B, tak platÄ±Ì"
66,171,0.362,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"V sÃºÄasnosti databÃ¡zovÃ© systÃ©my vyuÅ¾Ã­vajÃº buffer pool politiku Steal + No-Force, kde je potrebnÃ© logovanie. Pre logovanie sa vyuÅ¾Ã­va filozofia Write-Ahead, ktorÃ¡ znamenÃ¡, Å¾e predtÃ½m ako databÃ¡zovÃ½ systÃ©m zapÃ­Å¡e zmeny v databÃ¡ze na disk, tak musia byÅ¥ tieto zmeny zapÃ­sanÃ© do logovacieho sÃºboru na fyzickom ÃºloÅ¾isku. Write-Ahead logovanie pouÅ¾Ã­va skratku WAL (Write-Ahead logging). UkÃ¡Å¾ka logovania pre transakciu je znÃ¡zornenÃ¡ na Obr. 24. Proces logovania je nasledovnÃ½:"
240,180,0.362,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"V riadku 8 program vypÃ­Å¡e hodnotu lokÃ¡lnej premennej i (definovanÃº v riadku 7) a globÃ¡lnej premennej n. V prvom vnorenom bloku (riadky 9-13) definÃ­cia novej premennej i (riadok 10) prekryje identifikÃ¡tor lokÃ¡lnej premennej i, ktorÃ¡ je definovanÃ¡ v riadku 7. ZvÃ½Å¡enie hodnoty i v riadku 11 a vÃ½pis preto prebehne s touto novou premennou i. Podobne v druhom vnorenom bloku (riadku 15-19): definÃ­cia"
239,86,0.362,Ãvod do matematickej logiky,"(2) ZvolÄ±Ìme si prvotnuÌ formulu b. Potom T0 (b) = {c â¨ d}, T1 (b) = {b â¨ q c, b â¨ c â¨ q d} a T2 (b) = {q b â¨ d}. To znacÌÄ±Ì, zÌe T1,2 (b) = {q c â¨ d, c â¨ q d â¨ d}, a preto TÌ (b) = {c â¨ d, q c â¨ d}. (3) ZvolÄ±Ìme si prvotnuÌ formulu c. Potom T0 (c) = â, T1 (c) = {c â¨ d} a T2 (c) = {q c â¨ d}. To znacÌÄ±Ì, zÌe T1,2 (c) = {d} a TÌ (c) = {d}. (4) ZvolÄ±Ìme si prvotnuÌ formulu d. Potom T0 (d) = â, T1 (d) = {d} a T2 (d) = â. Podlâa poznaÌmky za Vetou 5.2 dostaÌvame TÌ (d) = T0 (d) = â. ZÄ±Ìskali sme praÌzdnu mnozÌinu klauzuÌl, avsÌak nie praÌzdnu klauzulu. ZnamenaÌ to, zÌe A je splnitelânaÌ formula. Teraz spaÌtne naÌjdeme jej model Î½. (4) KedâzÌe T2 (d) = â, volÄ±Ìme Î½(d) = 1. (3) Tu T1 (c) aj T2 (c) majuÌ po jednej klauzuli, pricÌom tieto suÌ tvaru c â¨ d a q c â¨ d. KedâzÌe Î½(d) = 1, maÌme Î½(c â¨ d) = Î½(q c â¨ d) = 1 bez ohlâadu na to, ako zvolÄ±Ìme Î½(c). ZnamenaÌ to, zÌe Î½(c) moÌzÌeme zvolitâ lâubovolâne. Zvolâme si naprÄ±Ìklad Î½(c) = 0. (2) Tu T1 (b) maÌ klauzuly bâ¨q c a bâ¨(câ¨q d), zatialâ cÌo T2 (b) maÌ jedinuÌ klauzulu q b â¨ d. MaÌme Î½(q c) = 1 a Î½(c â¨ q d) = 0. ZvolÄ±Ìme preto Î½(b) = 1. (1) Tu T1 (a) maÌ klauzuly a â¨ q b a a â¨ c, zatialâ cÌo T2 (a) maÌ klauzuly q a â¨ d a q a â¨ (b â¨ q d). MaÌme Î½(q b) = 0 a Î½(c) = 0. ZvolÄ±Ìme preto Î½(a) = 1. ZÄ±Ìskali sme model (1, 1, 0, 1) (ohodnotenia suÌ v poradÄ±Ì (Î½(a), Î½(b), Î½(c), Î½(d)))."
59,79,0.361,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"TabuÄ¾ka 2.5. PostupnosÅ¥ vstupnÃ½ch znakov, stavov a vÃ½stupnÃ½ch znakov pre koneÄnostavovÃ½ stroj z Obr. 2.16. vstupnÃ½ symbol 1 0 0 1 1 1 0 1 0 .. s1 s1 s2 s1 s1 s1 s1 s2 s2 .. vÃ½stupnÃ½ symbol ï a b a a a a b a a Veta 2.5 [1,5]. KaÅ¾dÃ¡ neurÃ³novÃ¡ sieÅ¥ mÃ´Å¾e byÅ¥ reprezentovanÃ¡ ekvivalentnÃ½m koneÄnostavovÃ½m strojom s vÃ½stupom. DÃ´kaz tejto vety je konÅ¡truktÃ­vny a jednoduchÃ½, ukÃ¡Å¾eme ako pre neurÃ³novÃº sieÅ¥ moÅ¾no zostrojiÅ¥ jednotlivÃ© zloÅ¾ky z definÃ­cie 2.2, M ï½ ï¨ S ,I ,O, f ,g,sini ï© . 1. MnoÅ¾ina stavov S je vytvorenÃ¡ vÅ¡etkÃ½mi moÅ¾nÃ½mi binÃ¡rnymi vektormi"
59,313,0.361,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Atrain ï½ ï»ci xi ; i ï½ 1, 2,...,mï½ , ktorÃ¡ obsahuje m<n asociatÃ­vnych dvojÃ­c konceptuÃ¡lnych vektorov ci xi , kde ci je vstup do asociatÃ­vnej pamÃ¤ti (angl. cue) a xi je vÃ½stup z pamÃ¤ti. ZostrojÃ­me pamÃ¤Å¥ovÃ½ vektor t, ktorÃ½ reprezentuje asociatÃ­vnu pamÃ¤Å¥ nad trÃ©ningovou mnoÅ¾inou Atrain"
43,483,0.361,Objektovo orientovanÃ© programovanie v C++,"DÃ¡tovÃ¡ Å¡truktÃºra vektor disponuje iterÃ¡torom s nÃ¡hodnÃ½m prÃ­stupom, pre ktorÃ½ sÃº deï¬novanÃ© najrÃ´znejÅ¡ie operÃ¡tory (kapitola 10.3). Medzi nimi je aj operÃ¡tor ++. VyhÄ¾adÃ¡vanie a prÃ­padnÃ½ vÃ½pis prekladu bude teda prebiehaÅ¥ takto for (it1=slova1.begin(),it2=slova2.begin();it1<slova1.end();it1++,it2++) if (*it1==slovo) cout<<*it2<<endl; return true;"
43,360,0.361,Objektovo orientovanÃ© programovanie v C++,"UkÃ¡Å¾me si teraz eÅ¡te nÃ¡zornejÅ¡ie, akÃ½ efekt majÃº jednotlivÃ© typy dediÄnosti. Majme triedu dopravny prostriedok so sÃºkromnÃ½m Ãºdajom nazov, chrÃ¡nenÃ½m Ãºdajom pocet kolies a verejnou metÃ³dou Vypis udaje. class dopravny prostriedok private: string nazov; protected: int pocet kolies public: void Vypis udaje();"
184,74,0.361,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"TechnolÃ³gie distribuovanÃ½ch objektov sÃº dlhodobÃ½m Älenom rieÅ¡enÃ­ pre spojovacÃ­ softvÃ©r. Asi najznÃ¡mejÅ¡Ã­m z nich je CORBA (Common Object Request Broker Architecture) ako predstaviteÄ¾ distribuovanÃ©ho objektovo orientovanÃ©ho spojovacieho softvÃ©ru, ktorÃ½ sa pouÅ¾Ã­val na zaÄiatku devÃ¤Å¥desiatych rokov."
369,105,0.36,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Medzi pracovnÃ­kmi sÃº definovanÃ© hierarchickÃ© vzÅ¥ahy. Tieto sa reprezentujÃº rekurzÃ­vnou relÃ¡ciou. Ako sme ukÃ¡zali v predchÃ¡dzajÃºcej kapitole, hierarchickÃ© vzÅ¥ahy sÃº definovanÃ© na operatÃ­vnej Ãºrovni ako aj metaÃºrovni. Obr. 2.17 ukazuje model jednoduchej (stromovej) hierarchickej Å¡truktÃºry na operatÃ­vnej Ãºrovni. Obr. 2.18 poskytuje model pre stromovÃº hierarchickÃº Å¡truktÃºru na metaÃºrovni."
367,4,0.36,CESTA K OTVORENEJ VEDE,"Äo mÃ´Å¾ete urobiÅ¥ teraz .................................................... p.35 DoplÅujÃºce informÃ¡cie .................................................... p.36 SlovnÃ­k pojmov ................................................................ p. 41 Zdroje . ............................................................................ p.43 Legenda PodÄiarknutÃ½ text je vysvetlenÃ½ v slovnÃ­ku pojmov. q oznaÄuje nÃ¡stroje, ktorÃ© sÃº uvedenÃ© ako prÃ­klady k oznaÄuje externÃ½ hypertextovÃ½ odkaz ElektronickÃ¡ verzia francÃºzskeho originÃ¡lu je dostupnÃ¡ online: www.ouvrirlascience.fr"
393,203,0.36,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PredprÃ­prava TCP spojenia Pred tÃ½m, ako webovÃ½ klient odoÅ¡le HTTP poÅ¾iadavku na server, sa vytvorÃ­ TCP spojenie. Vytvorenie TCP spojenia zahÅÅa round trip time (RTT) cez sieÅ¥, Äo je Äas predstavujÃºci interval odoslania malÃ©ho paketu zo strany klienta na stranu servera a potom spÃ¤Å¥ na stranu klienta zo servera. KaÅ¾dÃ½ smerovaÄ pozdÄºÅ¾ cesty zisÅ¥uje IP adresu pre nasledujÃºci skok a prekladÃ¡ tÃºto adresu na nÃ­zko-ÃºrovÅovÃº MAC adresu. TÃ¡to operÃ¡cia mÃ´Å¾e vyÅ¾adovaÅ¥ komunikÃ¡ciu s ostatnÃ½mi smerovaÄmi. VÃ½sledok operÃ¡cie mÃ´Å¾e smerovaÄ predpripraviÅ¥ na urÄitÃº ÄasovÃº periÃ³du z dÃ´vodu urÃ½chlenia smerovania ÄalÅ¡Ã­ch IP datagramov na rovnakÃº cieÄ¾ovÃº adresu."
393,159,0.359,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Sesame: ÃºloÅ¾isko pre ontolÃ³gie a pre dÃ¡ta â strednÃ¡ vrstva Je to systÃ©m pre trvalÃ© uchovanie RDF dÃ¡t a schÃ©m a pre poskytovanie informÃ¡ciÃ­ za chodu. SystÃ©m Sesame je implementovanÃ½ v jazyku Java, aby bol prenositeÄ¾nÃ½ na viacerÃ© poÄÃ­taÄovÃ© platformy. PrenositeÄ¾nosÅ¥ systÃ©mu pre ukladanie je umoÅ¾nenÃ¡ pomocou Å¡tandardizovanÃ©ho API â pouÅ¾iÅ¥ moÅ¾no akÃ½koÄ¾vek systÃ©m, ktorÃ½ ukladÃ¡ RDF trojice, napr. DBMS. PodporovanÃ½ je jazyk RQL pre RDF dÃ¡ta, RDF schÃ©my, RDF grafy. Sesame6 je vytvorenÃ© pod licenciou GNU LGPL."
59,648,0.359,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ï¨ p1 , p2 , p3 , p4 ï© , v prvom prÃ­pade sme pouÅ¾ili ï¨1234 ï© a v druhom prÃ­pade sme pouÅ¾ili âtranspozÃ­ciuâ ï¨ 2134 ï© . PrÃ­klad 3 (diagramy B1 a B2 na Obr. 13.5), kde ï¡ ï½ ï¨ abc ï© a ï¢ ï½ ï¨ abbe ï© . MnoÅ¾ina elementÃ¡rnych zobrazenÃ­ potom obsahuje len tieto Å¡tyri elementy F1 ï¨ ï¡ ,ï¢ ï© ï½ ï»x ï® x | a, x ï® x | b, x ï® pred ï¨ x ï© e | bcï½"
43,414,0.359,Objektovo orientovanÃ© programovanie v C++,"SkombinovanÃ­m tÃ½chto tried vytvorÃ­me triedu kytica. TÃ¡to trieda bude slÃºÅ¾iÅ¥ na objednÃ¡vky kytÃ­c, ktorÃ© mÃ´Å¾u byÅ¥ doruÄenÃ© ako dar. Preberie vÅ¡etky Ãºdaje od uvedenÃ½ch troch tried a navyÅ¡e bude maÅ¥ Ãºdaj adresa dorucenia a metÃ³du Objednavka, ktorÃ¡ vypÃ­Å¡e vÅ¡etky Ãºdaje o objednanej kytici. class kytica: public tovar, public rastlina, public dar private: string adresa dorucenia; public: kytica(string d,float c,string n,string o k,string p k,string a d); void Objednavka(); kytica::kytica(string d,float c,string n,string o k,string p k,string a d) :tovar(d,c), rastlina(n), dar(o k,p k) adresa dorucenia=a d;"
66,153,0.358,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"Read committed â umoÅ¾Åuje ÄÃ­tanie iba tÃ½ch dÃ¡t, pre ktorÃ© bol uskutoÄnenÃ½ commit. V prÃ­pade, Å¾e commit prebehol, mÃ´Å¾e transakcia pri opÃ¤tovnom ÄÃ­tanÃ­ objektu zÃ­skaÅ¥ rozdielnu hodnotu, ktorÃ¡ bola zapÃ­sanÃ¡ inou committed transakciou."
122,12,0.358,Modelovanie softvÃ©ru,ZÃ¡kladnÃ¡ identifikÃ¡cia stavov a prechodov. . . . . . . . . . . . . . . . Spresnenie prechodov v stavovom diagrame. . . . . . . . . . . . . . . . SpÃºÅ¡Å¥aÄe ako signÃ¡ly. . . . . . . . . . . . . . . . . . . . . . . . . . . . StavovÃ½ diagram s kompozitnÃ½m stavom. . . . . . . . . . . . . . . . . StavovÃ½ diagram s paralelnÃ½m stavom. . . . . . . . . . . . . . . . . . .
66,127,0.356,ZÃ¡klady databÃ¡zovÃ½ch systÃ©mov,"4.1 NaÄÃ­tavanie a ukladanie dÃ¡t v DBMS Aby databÃ¡zovÃ½ systÃ©m mohol pristupovaÅ¥ k samotnÃ½m dÃ¡tam, tak tieto dÃ¡ta musia byÅ¥ naÄÃ­tanÃ© z disku (nevolatÃ­lna pamÃ¤Å¥ â HDD, SSD) do hlavnej pamÃ¤te, kde k nÃ­m DBMS vie pristupovaÅ¥ a uskutoÄÅovaÅ¥ operÃ¡cie. Tento proces je znÃ¡zornenÃ½ na Obr. 9, kde sÃº nasledujÃºce kroky:"
135,360,0.356,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Autori definovali vlastnÃº metamodelovÃº architektÃºru, ktorÃ¡ sa odliÅ¡uje od Å¡tandardnej Å¡tvorvrstvovej OMG architektÃºry (M0 â inÅ¡tancie, M1 â model tried, M2 â metamodel, M3 â metametamodel MOF). SchÃ©ma tejto architektÃºry sa nachÃ¡dza na obrÃ¡zku 5-12. DolnÃ© dve vrstvy zodpovedajÃº Å¡tandardnÃ½m OMG modelom M0 a M1. NajvyÅ¡Å¡ia vrstva predstavujÃºca jazyk OWL zodpovedÃ¡ modelu M3. Vrstva ODOL (Object Design Ontology Layer) je metamodelovÃ¡ vrstva zodpovedajÃºca vrstve M2 (obrÃ¡zok 5-11). Obsahuje definÃ­cie zÃ¡kladnÃ½ch pojmov potrebnÃ½ch na opis vzorov, napr. triedy *Template, Participant, Pattern a inÃ©. Vrstva PDL (Pattern Description Layer) obsahuje tvrdenia o vzoroch vytvorenÃ© pomocou konceptov z vrstvy ODOL, naprÃ­klad definÃ­cie rolÃ­ a vzahov medzi nimi. PrÃ­klad opisu nÃ¡vrhovÃ©ho vzoru Abstract factory sa nachÃ¡dza na obrÃ¡zku 5-13. Zdroje modelu (zobrazenÃ© ako elipsy) predstavujÃº role vzoru, ktorÃ© sÃº v rÃ¡mci OWL opisu definovanÃ© ako inÅ¡tancie tried definovanÃ½ch vo vrstve ODOL."
276,107,0.356,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"moÅ¾no nastaviÅ¥ na konkrÃ©tnom rozhranÃ­ (na rÃ´znych rozhraniach mÃ´Å¾u byÅ¥ inÃ© intervaly nastavenÃ©) pomocou prÃ­kazov: Router(config-if)# ip hello-interval eigrp <ÄÃ­slo AS> <sekundy> Router(config-if)# ip hold-time eigrp <ÄÃ­slo AS> <sekundy> SmerovaÄe nemusia maÅ¥ nastavenÃ© rovnakÃ© hodnoty intervalov na linke aby bolo susedstvo ÃºspeÅ¡ne vytvorenÃ©. Je ale potrebnÃ© daÅ¥ pozor, aby bola hodnota hold intervalu vyÅ¡Å¡ia ako hodnota hello intervalu. Pomocou modifikÃ¡cie tÃ½chto intervalov vieme ovplyvniÅ¥ rÃ½chlosÅ¥ konvergencie EIGRP. ZnÃ­Å¾enie intervalov zvyÅ¡uje rÃ½chlosÅ¥ konvergencie, avÅ¡ak zvyÅ¡uje EIGRP rÃ©Å¾iu (EIGRP sprÃ¡vy sa posielajÃº ÄastejÅ¡ie). Predvolene je mnoÅ¾stvo EIGRP rÃ©Å¾ie obmedzenÃ© na 50 % prenosovej kapacity danej linky. TÃºto hodnotu vieme modifikovaÅ¥ na konkrÃ©tnom rozhranÃ­ pomocou nasledujÃºceho prÃ­kazu. Router(config-if)# ip bandwidth-percent eigrp <ÄÃ­slo AS> <percentÃ¡> KaÅ¾dÃ½ smerovaÄ je pre susednÃ© EIGRP smerovaÄe identifikovateÄ¾nÃ½ pomocou identifikÃ¡tora ârouter IDâ, ktorÃ½ predstavuje IP adresu. Tento identifikÃ¡tor moÅ¾no nastaviÅ¥. Ak nie je manuÃ¡lne nakonfigurovanÃ½ administrÃ¡torom, tak smerovaÄ zvolÃ­ najvyÅ¡Å¡iu IP adresu nastavenÃº na niektorom aktÃ­vnom loopback rozhranÃ­. Ak takÃº adresu smerovaÄ nenaÅ¡iel, tak sa zvolÃ­ najvyÅ¡Å¡ia IP adresa inÃ©ho aktÃ­vneho sieÅ¥ovÃ©ho rozhrania. ManuÃ¡lna konfigurÃ¡cia je moÅ¾nÃ¡ prÃ­kazom eigrp router-id <IP adresa> v konfiguraÄnom reÅ¾ime pre danÃ½ smerovacÃ­ proces. Na rozdiel od RIP sa ohlasovanie predvolenej cesty cez EIGRP zabezpeÄuje redistribÃºciou statickÃ½ch ciest pomocou prÃ­kazu redistribute static v konfiguraÄnom reÅ¾ime EIGRP smerovacieho procesu pre prÃ­sluÅ¡nÃ½ autonÃ³mny systÃ©m. Tak ako vÃ¤ÄÅ¡ina smerovacÃ­ch protokolov, aj EIGRP podporuje rozloÅ¾enie zÃ¡Å¥aÅ¾e cestami s rovnakou metrikou. V predvolenej konfigurÃ¡cii podporuje smerovaÄ do Å¡tyroch ciest s rovnakou metrikou. TÃºto hodnotu moÅ¾no zvÃ½Å¡iÅ¥ aÅ¾ do 32 ciest prÃ­kazom maximum-paths. EIGRP taktieÅ¾ umoÅ¾Åuje tzv. âunequal cost load balancingâ, teda rozloÅ¾enie zÃ¡Å¥aÅ¾e cestami s rÃ´znou metrikou. Pomocou EIGRP si teda smerovaÄ mÃ´Å¾e pridaÅ¥ do smerovacej tabuÄ¾ky aj cesty s horÅ¡ou metrikou. Je to definovanÃ© parametrom variance (predvolenÃ½ na hodnotu 1), ktorÃ½ urÄuje"
130,563,0.356,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"AHAM model AHAM model (Adaptive Hypermedia Architecture Model; De Bra, 1999) je rozÅ¡Ã­renÃ­m DexterovskÃ©ho referenÄnÃ©ho modelu o prvky prispÃ´sobovania. PÃ´vodne bol navrhnutÃ½ pre vÃ½uÄbovÃ© adaptÃ­vne hypermÃ©diÃ¡, neskÃ´r bol zovÅ¡eobecnenÃ½ na univerzÃ¡lny referenÄnÃ½ model pre adaptÃ­vne hypermÃ©dia. AHAM opisuje AH systÃ©m najmÃ¤ z pohÄ¾adu dÃ¡t. PÃ´vodnÃº strednÃº vrstvu DexterovskÃ©ho referenÄnÃ©ho modelu predstavuje:"
51,124,0.356,How Generations Remember,"Fig. 2.1 Graffito next to the Catholic cathedral stating: âAnte Gotovina herojâ (âAnte Gotovina is a heroâ). This graffito appeared at several places in West Mostar in December 2005 when Gotovina, a Croat general, was arrested by the International Criminal Tribunal for the Former Yugoslavia (ICTY). Photo by the author"
