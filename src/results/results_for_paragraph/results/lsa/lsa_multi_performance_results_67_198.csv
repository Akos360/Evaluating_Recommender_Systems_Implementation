book_index,paragraph_index,similarity_score,recommended_book,recommended_text
59,224,0.939,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"naÅ¡li sprÃ¡vne rieÅ¡enie (t. j. ihlu v kope sena), musÃ­me prekontrolovaÅ¥ vÅ¡etky prÃ­pustnÃ© rieÅ¡enia, Äo je vlastne ten najhorÅ¡Ã­ moÅ¾nÃ½ algoritmus rieÅ¡enia danÃ©ho problÃ©mu. AvÅ¡ak, ak pouÅ¾Ã­vame efektÃ­vne fitnes, ktorÃ© je nenulovÃ© aj v blÃ­zkom okolÃ­ hÄ¾adanÃ©ho rieÅ¡enia, mÃ¡me podstatne vÃ¤ÄÅ¡iu Å¡ancu nÃ¡jsÅ¥ sprÃ¡vne rieÅ¡enie. MÃ´Å¾eme povedaÅ¥, Å¾e efektÃ­vne fitnes nÃ¡s proces prehÄ¾adÃ¡vania naviguje smerom, kde sÃº vÃ¤ÄÅ¡ie hodnoty efektÃ­vneho fitnes. fitnes"
369,82,0.884,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"HistÃ³ria a vÃ½znam vzorov Vzor opisuje rieÅ¡enie vÅ¡eobecnÃ©ho problÃ©mu, ktorÃ½ sa vyskytuje v urÄitÃ½ch situÃ¡ciÃ¡ch, tzv. kontextoch. Buschmann a kol. ho v [Buschmann 1996] definujÃº takto: Vzor Å¡pecifikuje opakujÃºci sa nÃ¡vrhovÃ½ problÃ©m, ktorÃ½ vziÅ¡iel zo Å¡pecifickÃ½ch nÃ¡vrhovÃ½ch kontextov a poskytuje pre ne overenÃº generickÃº schÃ©mu rieÅ¡enia PodÄ¾a objaviteÄ¾a vzorov, Christophera Alexandra [Alexander 1979]: KaÅ¾dÃ½ vzor je pravidlo pozostÃ¡vajÃºce z troch ÄastÃ­, ktorÃ© vyjadruje relÃ¡ciu medzi urÄitÃ½m kontextom, problÃ©mom a rieÅ¡enÃ­m. UvedenÃ© tri Äasti moÅ¾no nÃ¡jsÅ¥ aj v Buschmannovej definÃ­cii vzoru:"
135,31,0.857,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â sÃºvisiace vzory â vzory, ktorÃ© moÅ¾no pouÅ¾i sÃºasne, priom sa uvedie danÃ½ kontext a obmedzenia. Opis nÃ¡vrhovÃ½ch vzorov mÃ¡ by nezÃ¡vislÃ½ od programovacieho jazyka alebo implementanÃ½ch detailov, pretoÅ¾e nÃ¡vrhovÃ½ vzor je vlastne Å¡ablÃ³nou, poda ktorej moÅ¾no rieÅ¡enie aplikova v rÃ´znych situÃ¡ciÃ¡ch. Ako nÃ¡js nÃ¡vrhovÃ½ vzor ZÃ¡kladnou podmienkou pre âobjavenieâ nÃ¡vrhovÃ©ho vzoru je, aby programÃ¡tor rieÅ¡il danÃ½ problÃ©m sÃ¡m a pritom si robil poznÃ¡mky o tom, ako jednotlivÃ© problÃ©my rieÅ¡il. S pribÃºdajÃºcimi skÃºsenosami zistÃ­me, Å¾e ide stÃ¡le o tie istÃ© typy problÃ©mov. VÅ¾dy, ke sa danÃ½ alebo podobnÃ½ problÃ©m vyskytne, poznaÃ­me si v om je odliÅ¡nÃ½, v om je rovnakÃ½ a ako sme ho v danom prÃ­pade vyrieÅ¡ili. EventuÃ¡lne vytvorÃ­me Å¡tandardnÃ½ spÃ´sob na rieÅ¡enie takÃ©hoto problÃ©mu, ktorÃ½ budeme trvalo pouÅ¾Ã­va. Tak vznikÃ¡ nÃ¡vrhovÃ½ vzor."
59,689,0.854,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3. VeÄ¾mi zloÅ¾itÃ© rieÅ¡enie (diabolskÃ©), kde sa aspoÅ raz musÃ­ pouÅ¾iÅ¥ nÃ¡hodnÃ½ vÃ½ber alternatÃ­vnej moÅ¾nosti s moÅ¾nÃ½m nÃ¡vratom do bodu vetvenia, ak sme dostali nekorektnÃº pozÃ­ciu v ÄalÅ¡om predlÅ¾ovanÃ­ rieÅ¡enia (pozri Obr. 14.8). NeexistujÃº pevnÃ© hranice medzi oblasÅ¥ami zloÅ¾itosti hier sudoku, vyÅ¡Å¡ie navrhnutÃ¡ klasifikÃ¡cia vÅ¡ak odrÃ¡Å¾a zÃ¡kladnÃ© princÃ­py zloÅ¾itosti ich rieÅ¡enia. Pre nÃ¡s je vÅ¡ak dÃ´leÅ¾itÃ©, Å¾e navrhnutÃ½ mentÃ¡lny model hry sudoku je dostatoÄne jednoduchÃ½, aby slÃºÅ¾il ako nÃ¡vod k systematickÃ©mu rieÅ¡eniu Ãºloh hier sudoku a taktieÅ¾, ktorÃ½ taktieÅ¾ odrÃ¡Å¾a pomerne verne âexperimentÃ¡lne pozorovanieâ o zloÅ¾itosti ich rieÅ¡enia."
59,691,0.848,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"pomocou pravidiel. TÃ¡to skutoÄnosÅ¥ otvÃ¡ra novÃ© moÅ¾nosti vÃ½skumu v kognitÃ­vnej vede v oblasti rieÅ¡enia problÃ©mov, vytvÃ¡raÅ¥ mentÃ¡lne modely pouÅ¾Ã­vania zÃ¡kladnÃ©ho mentÃ¡lneho modelu, t. j. hÄ¾adaÅ¥ pravidlÃ¡ â regularity pre pouÅ¾Ã­vania pravidiel 0 â 3. PoznÃ¡mka 1: V kapitole 3 boli Å¡pecifikovanÃ© zÃ¡kladnÃ© princÃ­py evoluÄnÃ½ch algoritmov, ktorÃ© moÅ¾no charakterizovaÅ¥ ako stochastickÃ© optimalizaÄnÃ© algoritmy akcelerovanÃ© heuristikou darwinovskÃ©ho prirodzenÃ©ho vÃ½beru. Tieto algoritmy sÃº aplikovateÄ¾nÃ© aj na rieÅ¡enie sudoku. V dÃ´sledku ich stochastiÄnosti, zapÄºÅanie prÃ¡zdnych buniek v matici sa deje kvÃ¡zi-nÃ¡hodne. Ich efektivita rieÅ¡enia uÅ¾ najjednoduchÅ¡Ã­ch sudoku nie je veÄ¾kÃ¡. TÃ½m, ako bolo ukÃ¡zanÃ© v predchÃ¡dzajÃºcej Äasti tejto publikÃ¡cie, Å¾e obsadzovanie prÃ¡zdnych buniek je deterministickÃ½ problÃ©m riadenÃ½ jednoduchÃ½mi logickÃ½mi Ãºvahami, pouÅ¾itie evoluÄnÃ½ch algoritmov (aj keÄ v princÃ­pu moÅ¾nÃ©) nie je vhodnÃ½m prÃ­stupom k rieÅ¡eniu sudoku. ÄalÅ¡Ã­ problÃ©m s pouÅ¾itÃ­m evoluÄnÃ½ch algoritmov pre rieÅ¡enie sudoku spoÄÃ­va v tom, Å¾e poÅ¾adovanÃ© rieÅ¡enie je reprezentovanÃ© globÃ¡lnym minimom, inÃ© â suboptimÃ¡lne rieÅ¡enia sÃº nezaujÃ­mavÃ©, priÄom evoluÄnÃ© algoritmy svoju efektÃ­vnosÅ¥ manifestujÃº schopnosÅ¥ou rÃ½chlej konÅ¡trukcie prÃ¡ve suboptimÃ¡lneho rieÅ¡enia. PoznÃ¡mka 2: Chceme upozorniÅ¥ seniorov informatickej komunity na skutoÄnosÅ¥, Å¾e rieÅ¡enie sudoku je v podstate deterministickÃ½ problÃ©m riadenÃ½ jednoduchÃ½mi logickÃ½mi Ãºvahami. MetÃ³da rieÅ¡enia sudoku prezentovanÃ¡ v tejto prÃ¡ci mÃ¡ jednoduchÃ½ algoritmickÃ½ charakter a preto je zaujÃ­mavÃ¡ aj pre seniorov ako vhodnÃ© âprecviÄovanieâ kognitÃ­vneho aparÃ¡tu â mozgu (pre ktorÃ½ platÃ­ to, Äo platÃ­ pre kaÅ¾dÃ½ orgÃ¡n, jeho âneprecviÄovanieâ vedie k jeho atrofii)."
130,387,0.818,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Adhokracia Adhokracia znamenÃ¡ rozdeÄ¾ovanie Ãºloh metÃ³dou ad-hoc. Å truktÃºra a rozdelenie Ãºloh sÃº vytvÃ¡ranÃ© znovu pre kaÅ¾dÃ½ problÃ©m, ktorÃ½ treba rieÅ¡iÅ¥. TypickÃ© pouÅ¾itie adhokracie je pri nedostatoÄne Å¡truktÃºrovanÃ½ch problÃ©moch alebo problÃ©moch, pri ktorÃ½ch nevieme dopredu urÄiÅ¥ spÃ´sob ich rieÅ¡enia. Äasto sa pri prideÄ¾ovanÃ­ Ãºloh vyuÅ¾Ã­va mechanizmus trhu (naprÃ­klad âcontract netâ (Smith, 1980)). Pri rieÅ¡enÃ­ konkrÃ©tneho problÃ©mu sa vytvorÃ­ ad-hoc Å¡truktÃºra rozdelenia Ãºloh. Po viacnÃ¡sobnom rieÅ¡enÃ­ podobnÃ©ho problÃ©mu podobnÃ½m spÃ´sobom je moÅ¾nÃ© Å¡truktÃºru spoluprÃ¡ce vytvorenÃº spÃ´sobom ad-hoc ustÃ¡liÅ¥, teda preniesÅ¥ do Å¡tandardov alebo rozdelenia zodpovednostÃ­."
184,27,0.811,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"NÃ¡vrh architektÃºry sa nedÃ¡ efektÃ­vne validovaÅ¥ a testovaÅ¥ predtÃ½m, ako sa vyvinÃº aspoÅ zÃ¡kladnÃ© Äasti systÃ©mu. Prototypovanie tento problÃ©m rieÅ¡i iba ÄiastoÄne a nemusÃ­ dÃ¡vaÅ¥ ÃºplnÃº istotu o vhodnosti nÃ¡vrhu. Z tohto dÃ´vodu sa architekti spoliehajÃº na odskÃºÅ¡anÃ© prÃ­stupy k rieÅ¡eniu skupÃ­n problÃ©mov â architektonickÃ© vzory. ArchitektonickÃ½ vzor vÅ¡ak predstavuje abstraktnÃ© rieÅ¡enie, ktorÃ© vznikne generalizovanÃ­m niekoÄ¾kÃ½ch konkrÃ©tnych prÃ­stupov k rieÅ¡eniu problÃ©mu. Toto abstraktnÃ© rieÅ¡enie nie je spustiteÄ¾nÃ© na poÄÃ­taÄi a je Ãºlohou softvÃ©rovÃ½ch inÅ¾inierov vytvoriÅ¥ zo vzoru jeho konkrÃ©tnu pouÅ¾iteÄ¾nÃº implementÃ¡ciu. NajÄastejÅ¡ie pouÅ¾Ã­vanÃ© vzory sÃº podporovanÃ© verejne dostupnÃ½mi aplikÃ¡ciami, ktorÃ© poskytujÃº poÅ¾adovanÃº funkcionalitu a sÃº pritom znovupouÅ¾iteÄ¾nÃ© a aplikaÄne nezÃ¡vislÃ©. VÃ½vojovÃ½ tÃ­m teda nemusÃ­ nanovo vyvÃ­jaÅ¥ vÅ¡etky komponenty systÃ©mu, ale mÃ´Å¾e niektorÃ© Äasti pokryÅ¥ existujÃºcimi komerÄnÃ½mi alebo voÄ¾ne dostupnÃ½mi rieÅ¡eniami. Ãlohou softvÃ©rovÃ©ho architekta je vybraÅ¥ najvhodnejÅ¡Ã­ produkt na trhu, priÄom musÃ­ uvaÅ¾ovaÅ¥ rÃ´zne aspekty ako je cena, kvalita a funkcionalita. Takmer Å¾iadna aplikÃ¡cia neposkytuje presne to, Äo si Å¾iada nÃ¡Å¡ nÃ¡vrh. NÃ¡kupom aplikÃ¡cie buÄ zaplatÃ­me aj za funkcionalitu, ktorÃº nepoÅ¾adujeme (ktorÃº nikdy nepouÅ¾ijeme aj keÄ sme si za Åu zaplatili) alebo nÃ¡m naopak funkcionalita bude chÃ½baÅ¥ (priÄom rieÅ¡enÃ­m je doplnenie chÃ½bajÃºcich ÄastÃ­ alebo zmena nÃ¡vrhu). SoftvÃ©rovÃ½ architekt musÃ­ zvÃ¡Å¾iÅ¥ vÅ¡etky vÃ½hody a nevÃ½hody jednotlivÃ½ch produktov a vykonaÅ¥ sprÃ¡vnu voÄ¾bu."
393,539,0.799,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Na druhej strane Å¡tandardnÃ© objektovo-orientovanÃ© jazyky ponÃºkajÃº iba zÃ¡kladnÃ© prostriedky pre znovupouÅ¾itie. V mnohÃ½ch prÃ­padoch objektovo-orientovanÃ© jazyky, ktorÃ© patria do tejto skupiny, disponujÃº jazykovo Å¡pecifickÃ½m prostriedkami ako naprÃ­klad generickÃ© triedy alebo viacnÃ¡sobnÃ© dedenie, ktorÃ© sÃº sÃ­ce pomerne jednoducho v danom jazyku pouÅ¾iteÄ¾nÃ©, no pri nutnosti portovania takÃ©hoto rieÅ¡enia na inÃ½ implementaÄnÃ½ jazyk sa vynÃ¡rajÃº problÃ©my spojenÃ© s realizÃ¡ciou tÃ½chto Å¡pecifÃ­k pomocou prostriedkov jazyka, ktorÃ© sÃº k dispozÃ­cii. NavyÅ¡e pri niektorÃ½ch nÃ¡vrhovÃ½ch vzoroch nemusia postaÄovaÅ¥ ani tieto jazykovo Å¡pecifickÃ© prostriedky pre vytvorenie prehÄ¾adnÃ©ho rieÅ¡enia. CelÃ© snaÅ¾enie a zÃ¡very z jednotlivÃ½ch ÄastÃ­ zaoberajÃºcimi sa znovupouÅ¾Ã­tÃ­m ÄastÃ­ nÃ¡vrhovÃ½ch vzorov akoby smerovali k univerzÃ¡lnym rozÅ¡Ã­reniam jazyka, ktorÃ© budÃº realizovateÄ¾nÃ© vo vÃ¤ÄÅ¡ej skupine jazykov a aplikaÄnÃ©mu programÃ¡torovi poskytnÃº rozÅ¡Ã­renÃ© moÅ¾nosti znovupouÅ¾itia tried, metÃ³d a v koneÄnom dÃ´sledku i samotnÃ½ch nÃ¡vrhovÃ½ch vzorov. RieÅ¡enie sa ponÃºka formou znovupouÅ¾itia koncernov s vyuÅ¾itÃ­m adaptÃ¡ciÃ­. AnalÃ½za rieÅ¡enia s prekompilÃ¡torom pre jazyk JAVA ukÃ¡zala, Å¾e ide o pomerne jazykovo nezÃ¡vislÃ© rieÅ¡enie rozÅ¡irujÃºce moÅ¾nosti znovupouÅ¾itia zdrojovÃ©ho kÃ³du ako takÃ©ho. UmoÅ¾nenÃ­m vytvÃ¡rania hierarchiÃ­ adaptÃ©rov a oddelenÃ­m spoloÄnÃ©ho zdrojovÃ©ho kÃ³du od Å¡pecifickÃ©ho sa v koneÄnom dÃ´sledku zvÃ½Å¡i prehÄ¾adnosÅ¥ rieÅ¡enia a jeho udrÅ¾iavateÄ¾nosÅ¥. Na druhej strane sme nemali moÅ¾nosÅ¥ vyskÃºÅ¡aÅ¥ rieÅ¡enie na vlastnom prÃ­klade, a teda nevieme, ako sa prekompilÃ¡tor chovÃ¡ aj v prÃ­pade jednoduchÃ½ch syntaktickÃ½ch chÃ½b v adaptÃ©roch. Prostriedky, s ktorÃ½mi priÅ¡li autori tohto rieÅ¡enia, sa zdajÃº postaÄujÃºce na vytvorenie kniÅ¾nice znovupouÅ¾iteÄ¾nÃ½ch nÃ¡vrhovÃ½ch vzorov, priÄom oddelenie vÅ¡eobecnÃ½ch ÄastÃ­ od domÃ©novo zÃ¡vislÃ½ch ako i pouÅ¾itie nÃ¡vrhovÃ©ho vzoru z kniÅ¾nice by malo zostaÅ¥ prehÄ¾adnÃ©, zrozumiteÄ¾nÃ© a Ä¾ahko udrÅ¾iavateÄ¾nÃ©. Od CASE nÃ¡strojov cez atypickÃ© a Å¡tandardnÃ© objektovo-orientovanÃ© jazyky aÅ¾ k rozÅ¡Ã­reniam objektovo-orientovanÃ½ch jazykov je len vybranÃ¡ skupina moÅ¾nostÃ­ ako znovupouÅ¾iÅ¥ zdrojovÃ½ kÃ³d, resp. ako znovupouÅ¾iÅ¥ zdrojovÃ½ kÃ³d nÃ¡vrhovÃ©ho vzoru. StÃ¡le zostÃ¡va viacero otvorenÃ½ch otÃ¡zok a alternatÃ­vnych moÅ¾nostÃ­, ktorÃ© mÃ´Å¾u vÃ½znamnÃ½m spÃ´sobom uÄ¾ahÄiÅ¥ pouÅ¾itie a znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov."
59,293,0.784,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ProblÃ©my ProblÃ©m 5.1. Ako je definovanÃ© podÄ¾a americkÃ©ho psycholÃ³ga Thorndike uÄenie s odmenou a trestom? ProblÃ©m 5.2. Ako sa pouÅ¾Ã­vajÃº neurÃ³novÃ© siete ako prostriedok pre rozhodovanie v hre? ProblÃ©m 5.3. AkÃ½ je klasickÃ½ prÃ­stup k uÄeniu neurÃ³novej siete, aby vedela vyhodnocovaÅ¥ prechod z jednÃ©ho stavu do druhÃ©ho stavu pri konÅ¡trukcii stromu rieÅ¡enia? ProblÃ©m 5.4. Å pecifikujte adaptÃ¡ciu neurÃ³novej siete pomocou metÃ³dy odmeny a trestu vo verzii âtemporal difference TD(ï¬)â. ProblÃ©m 5.5. (NÃ¡met pre esej) Pre danÃ© jednoduchÃ© bludisko obsahujÃºce 10 aÅ¾ 20 uzlov, ktorÃ© sÃº oznaÄenÃ© symbolmi zostrojte pomocou uÄenia s odmenou a trestom takÃº doprednÃº neurÃ³novÃº sieÅ¥, ktorÃ¡ je schopnÃ¡ efektÃ­vne riadiÅ¥ agenta pri pohybe bludiskom. ProblÃ©m 5.6. (NÃ¡met pre zloÅ¾itejÅ¡iu esej) Proces emergencie stratÃ©giu hry piÅ¡kvorky Å¡tudujte pre populÃ¡ciu agentov s kognitÃ­vnym orgÃ¡nom (implementovanÃ½m pomocou doprednej neurÃ³novej siete) tak, Å¾e v populÃ¡cii agentov prebieha neustÃ¡ly turnaj pre nÃ¡hodne vybranÃº dvojicu agentov A1 a A2, po skonÄenÃ­ danej hry agenti A1 a A2 si adaptujÃº pomocou TD(ï¬) metÃ³dy svoje neurÃ³novÃ© siete, priÄom vÃ­Å¥az nahradÃ­ v populÃ¡cii porazenÃ©ho agenta; ak agenti remizovali, potom oba agenti v populÃ¡cii zostÃ¡vajÃº. NÃ¡rast efektÃ­vnosti hry agentov sledujte tak, Å¾e v kaÅ¾dom n-tom kroku (nech n = 100) poslednÃ½ vÃ­Å¥az hrÃ¡ 10 hier proti agentovi riadenom formÃ¡lnymi pravidlami."
135,29,0.774,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â nÃ¡zov â vystihuje zÃ¡kladnÃº charakteristiku vzoru, â problÃ©m â opisuje typickÃ½ problÃ©m, na ktorÃ½ sa vzor aplikuje, â rieÅ¡enie â Å¡pecifikuje ako rieÅ¡i problÃ©m vrÃ¡tane opisu elementov, vzahov medzi sebou navzÃ¡jom a zodpovednosti voi ostatnÃ½m elementom,"
236,123,0.769,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"PrÃ­kaz \nonumber spÃ´sobÃ­, Å¾e LATEX danÃº rovnicu neoÄÃ­sluje. MÃ´Å¾e byÅ¥ nÃ¡roÄnÃ© vytvoriÅ¥ pomocou tÃ½chto metÃ³d vertikÃ¡lne zarovnanÃ© rovnice, ktorÃ© vyzerajÃº dobre. BalÃ­k amsmath poskytuje viac moÅ¾nostÃ­ na rieÅ¡enie tohoto problÃ©mu (pozri prostredia split a align)."
59,685,0.762,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"14.4 StratÃ©gia rieÅ¡enia StratÃ©gia rieÅ¡enia hry sudoku obsahuje postupnosÅ¥ tÃ½chto krokov: 1. krok. PoÄiatoÄnÃº pozÃ­ciu doplnÃ­me v kaÅ¾dej prÃ¡zdnej bunke o alternatÃ­vne moÅ¾nosti. 2. krok. Ak v alternatÃ­vnych moÅ¾nostiach pre danÃ½ riadok, alebo stÄºpec, alebo podoblasÅ¥ sa vyskytuje nejakÃ© ÄÃ­slo prÃ¡ve raz, potom tÃ½mto ÄÃ­slom obsadÃ­me danÃº bunku. 3. krok. Opakovane aplikujeme na pozÃ­ciu pravidlÃ¡ 1-3 tak, aby sa pozÃ­cia neustÃ¡le zjednoduÅ¡ovala buÄ zruÅ¡enÃ­m (pravidlÃ¡ 2 a 3) vybranÃ½ch alternatÃ­vnych moÅ¾nostÃ­ alebo obsadenÃ­m vybranej bunky fixnÃ½m ÄÃ­slom (pravidlo 1). 4. krok. V prÃ­pade, Å¾e pozÃ­cia obsahuje eÅ¡te alternatÃ­vne moÅ¾nosti a nie je moÅ¾nÃ© vykonaÅ¥ 3. krok (bod vetvenia, pozri Obr. 14.8), nÃ¡hodne vyberieme z aktuÃ¡lnej pozÃ­cie jednu alternatÃ­vnu moÅ¾nosÅ¥ a s Åou obsadÃ­me danÃº bunku. Ak sa nÃ¡m v ÄalÅ¡om rieÅ¡enÃ­ od bodu vetvenia objavÃ­ nekorektnÃ¡ pozÃ­cia (v niektorom riadku/stÄºpci/podoblasti sa vyskytujÃº dve rovnakÃ© ÄÃ­sla), potom sa vrÃ¡time do bodu rieÅ¡enia, opakovane nÃ¡hodne vyberieme inÃº alternatÃ­vnu moÅ¾nosÅ¥ a opakovane pokraÄujeme v rieÅ¡enÃ­. 5. krok. Ak sme dospeli v rieÅ¡enÃ­ do korektnej koneÄnej pozÃ­cie, kde vÅ¡etky pÃ´vodne prÃ¡zdne bunky sÃº obsadenÃ© ÄÃ­slami, hru ukonÄÃ­me a zÃ­skanÃ¡ pozÃ­cia je rieÅ¡enÃ­m hry sudoku. Pomocou tejto stratÃ©gie mÃ´Å¾eme zaviesÅ¥ klasifikÃ¡ciu rieÅ¡enÃ­ hry sudoku:"
135,95,0.756,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.5.5 Zhodnotenie vzorov HCI Vzory pri nÃ¡vrhu rozhranÃ­ lovek-poÃ­ta zachytÃ¡vajÃº overenÃ© prÃ­stupy k rieÅ¡eniu opakujÃºcich sa problÃ©mov. Neuviedli sme vÅ¡etky doteraz existujÃºce vzory, nakoko to nie je"
184,238,0.755,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 3-12. VzdialenÃ½ prÃ­stup analytickÃ½ch nÃ¡strojov k ICDE. WebovÃ© sluÅ¾by sÃº poslednÃ½m vÃ½krikom mÃ³dy vo veÄ¾kÃ½ch a stredne veÄ¾kÃ½ch systÃ©moch kde sa predpokladÃ¡ interoperabilita medzi viacerÃ½mi architektÃºrami. TradiÄnÃ© rieÅ¡enia, ako naprÃ­klad J2EE aplikaÄnÃ© servery a posielanie sprÃ¡v je vynikajÃºce rieÅ¡enie pre vnÃºtropodnikovÃ© aplikÃ¡cie. Äasto vÅ¡ak padÃ¡ ak sa ho snaÅ¾Ã­me prepojiÅ¥ s inÃ½m rieÅ¡enÃ­m, ktorÃ© je prepojenÃ© s naÅ¡ou aplikÃ¡ciou cez Internet. Vo svojej podstate webovÃ© sluÅ¾by nie sÃº niÄÃ­m novÃ½m. Volanie vzdialenÃ©ho kÃ³du Java podporuje pomocou svojich komponentov. WebovÃ© sluÅ¾by vÅ¡ak prinÃ¡Å¡ajÃº moÅ¾nosÅ¥ komunikÃ¡cie rÃ´znych platforiem medzi sebou bez potreby poznania druhej strany. KaÅ¾dÃ¡ z platforiem, Äi uÅ¾ ide o Javu, .NET alebo inÃº implementaÄnÃº platformu, dokÃ¡Å¾e poskytnÃºÅ¥ vzdialenÃ© sluÅ¾by inÃ½m aplikÃ¡ciÃ¡m, avÅ¡ak len ak pracujÃº na rovnakej platforme. TaktieÅ¾ majÃº tieto rieÅ¡enia problÃ©m s komunikÃ¡ciou cez Internet. ÄalÅ¡Ã­m problÃ©mom je to, Å¾e aplikÃ¡cie ktorÃ© neboli nikdy navrhovanÃ© tak aby prekroÄili hranice spoloÄnosti sÃº zrazu nÃºtenÃ© komunikovaÅ¥ so systÃ©mami mimo organizÃ¡cie."
59,688,0.75,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1. JednoduchÃ© rieÅ¡enie, kde pouÅ¾Ã­vame len pravidlÃ¡ 0 alebo 1. t. j. kaÅ¾dom kroku hry sa nÃ¡m podarÃ­ urobiÅ¥ takÃ© zjednoduÅ¡enie hry, Å¾e sa zaplnÃ­ prÃ¡zdna pozÃ­cia ÄÃ­slom. 2. Stredne zloÅ¾itÃ© rieÅ¡enie, kde sa okrem pravidiel 1 a 0 pouÅ¾Ã­vajÃº taktieÅ¾ pravidlÃ¡ 2 a 3. Pre tento stupeÅ zloÅ¾itosti hry taktieÅ¾ dochÃ¡dza monotÃ³nnemu zjednoduÅ¡ovaniu hry, ovÅ¡em uÅ¾ urÄitÃ¡ ÄasÅ¥ krokov rieÅ¡enie (okolo 10 ï­ 15%) spoÄÃ­va v tom, Å¾e pre vybranÃ© bunky aj keÄ nedochÃ¡dza k ich zaplneniu fixovanÃ½m ÄÃ­slom, ale dochÃ¡dza k celkovÃ©mu znÃ­Å¾ovaniu poÄtu alternatÃ­vnych pozÃ­ciÃ­ v aktuÃ¡lnom rieÅ¡enÃ­."
94,407,0.747,Sprievodca svetom vedeckÃ©ho publikovania,"transparentnosÅ¥: vznikla tzv. âOpen Discovery Initiative167â, ktorÃ¡ propaguje otvorenÃº vÃ½menu metadÃ¡t a dÃ¡tovÃ½ch formÃ¡tov. Vytvorenie otvorenÃ©ho centrÃ¡lneho indexu je veÄ¾mi nÃ¡roÄnÃ¡ otÃ¡zka, keÄÅ¾e vyÅ¾aduje sÃºhru vÅ¡etkÃ½ch troch ÃºÄastnÃ­kov âdiscovery procesuâ â kniÅ¾nice, poskytovateÄ¾ov obsahu a poskytovateÄ¾ov technickÃ©ho rieÅ¡enia,"
115,167,0.741,Algebra a diskrÃ©tna  matematika,"UvÃ¡dzame strom prehÄ¾adÃ¡vania, kedy v prÃ­pade eÅ¡te nepouÅ¾itÃ½ch farieb pokladÃ¡me vÅ¡etky farby za ekvivalentnÃ© a preto neuvÃ¡dzame permutÃ¡cie nÃ¡jdenÃ©ho rieÅ¡enia s vÃ½menou farieb medzi mnoÅ¾inami vrcholov rovnakej farby. V takom prÃ­pade existuje iba jedno rieÅ¡enie. Farby sÃº oznaÄenÃ© prirodzenÃ½mi ÄÃ­slami"
59,717,0.739,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"5. MÃ´Å¾eme diskutovaÅ¥, Äi tÃ¡to schopnosÅ¥ a tendencia je pre âÄ¾udskÃ©ho agentaâ pozitÃ­vna alebo negatÃ­vna Ärta. SÃºÄasnÃ¡ kognitÃ­vna a evoluÄnÃ¡ psycholÃ³gia poskytuje jednoznaÄnÃº odpoveÄ, Å¾e tÃ¡to schopnosÅ¥ je âpoÅ¾ehnanieâ pre Ä¾udskÃ½ druh, umoÅ¾Åuje rÃ½chlu orientÃ¡ciu v zloÅ¾itom materiÃ¡lnom, aj sociÃ¡lnom svete. Bez tejto vlastnosti by jeho Å¡anca preÅ¾itia (fitnes) bola podstatne niÅ¾Å¡ia. 6. Pri zmenenej situÃ¡cii (zmena prÃ­rodnÃ©ho prostredia, sociÃ¡lnej Å¡truktÃºry a pod.) mÃ´Å¾e sa staÅ¥, Å¾e niektorÃ© pouÅ¾Ã­vanÃ© heuristiky sa stanÃº âkontraproduktÃ­vneâ, brzdou ÄalÅ¡ieho rozvoja multiagentovÃ©ho systÃ©mu. Potom sa buÄ danÃ¡ heuristika nahradÃ­ inou, v danej situÃ¡cii vhodnejÅ¡ou, alebo bude pre multiagentovÃ½ systÃ©m predstavovaÅ¥ podstatnÃº bariÃ©ru jeho zachovania a rozvoja. 7. Pre umelÃº inteligenciu (a aj kognitÃ­vnu vedu) je veÄ¾kou vÃ½zvou navrhovaÅ¥ mechanizmy vzniku tÃ½chto heuristÃ­k pouÅ¾itÃ­m prostriedkov poÄÃ­taÄovej inteligencie a sledovaÅ¥ ich kultÃºrny prenos a fixÃ¡ciu pomocou memetickÃ½ch prÃ­stupov v systÃ©me. RieÅ¡enie tohto problÃ©mu spoÄÃ­va hÄ¾adanÃ­ vhodnej stratÃ©gie pre rÃ½chle a efektÃ­vne rieÅ¡enie danÃ©ho problÃ©mu. Pri pouÅ¾itÃ­ evoluÄnÃ½ch algoritmov je potrebnÃ© preto navrhnÃºÅ¥ vhodnÃ© kÃ³dovanie stratÃ©gie, ktorÃ© je dostatoÄne flexibilnÃ© k tomu, aby emergovanÃ© rieÅ¡enia boli dostatoÄne zaujÃ­mavÃ©. 8. MÃ´Å¾eme si poloÅ¾iÅ¥ zÃ¡vereÄnÃº otÃ¡zku, ako je moÅ¾nÃ©, Å¾e u Ä¾udÃ­ s tak nedokonalÃ½m a ohraniÄenÃ½m kognitÃ­vnym orgÃ¡nom, ktorÃ½ pri rieÅ¡enÃ­ problÃ©mov pouÅ¾Ã­va skoro vÃ½luÄne jednoduchÃ© heuristickÃ© postupy, vznikla sofistikovanÃ¡ veda? Ide o veÄ¾mi zloÅ¾itÃ½ problÃ©m, ktorÃ©ho vysvetlenie nie je jednoduchÃ©. Vznik vedy (kognitÃ­vneho artefaktu) v populÃ¡cii agentov, Äo moÅ¾no chÃ¡paÅ¥ ako emergenciu novej kvality, je asi umoÅ¾nenÃ½ tÃ½m, Å¾e v systÃ©me existujÃº spoÄ¾ahlivÃ© memetickÃ© vertikÃ¡lne prenosy poznatkov (mÃ©mov), ktorÃ© zabezpeÄujÃº ich akumulÃ¡ciu v priebehu mnohÃ½ch Å¾ivotnÃ½ch cyklov agentov. Samozrejme, veda nie je lineÃ¡rne ukladanie poznatkov, ktorÃ© spolu nesÃºvisia, je reprezentovanÃ¡ sÃºborom navzÃ¡jom previazanÃ½ch konzistentnÃ½ch poznatkov. Preto musia existovaÅ¥ aj ÄalÅ¡ie âvyÅ¡Å¡ieâ kognitÃ­vne aktivity agentov nad touto sumou poznatkov, ktorÃ© spoÄÃ­vajÃº napr. v odstraÅovanÃ­ nekonzistentnÃ½ch alebo redundantnÃ½ch poznatkov, Äi v induktÃ­vnom zovÅ¡eobecÅovanÃ­ a pod. V dÃ´sledku ohraniÄenej racionality kognitÃ­vneho orgÃ¡nu agentov je tento dvojitÃ½ proces pomalÃ½ a mÃ¡ inkrementÃ¡lny charakter. ProblÃ©m ohraniÄenej racionality reprezentuje pre umelÃº inteligenciu a kognitÃ­vnu vedu zaujÃ­mavÃº a aktuÃ¡lnu novÃº problematiku, ktorÃ¡ doposiaÄ¾ v tÃ½chto oblastiach nebola Å¡tudovanÃ¡. Å tÃºdium vzniku heuristÃ­k pre rieÅ¡enie zloÅ¾itÃ½ch Ãºloh, problÃ©m ich klasifikÃ¡cie podÄ¾a ÃºspeÅ¡nosti, spÃ¡janie rÃ´znych heuristÃ­k do jednej novej heuristiky a pod. reprezentujÃº veÄ¾mi zaujÃ­mavÃ© problÃ©my leÅ¾iace na rozhranÃ­ informatiky a sociÃ¡lnych vied. MetÃ³dy poÄÃ­taÄovej inteligencie (neurÃ³novÃ© siete a evoluÄnÃ© algoritmy) a multiagentovÃ½ch systÃ©mov majÃº pri tÃ½chto Å¡tÃºdiÃ¡ch dÃ´leÅ¾itÃ© postavenie jednotiacej metodiky pre vÃ½skum a opis problematiky ohraniÄenej racionality."
135,30,0.733,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â aplikovatenos â predstavuje obmedzenia, kedy vzor zodpovedÃ¡ reÃ¡lnej situÃ¡cii, â prÃ­klady â prÃ­klady aktuÃ¡lneho pouÅ¾itia vzoru pri rieÅ¡enÃ­ reÃ¡lnych problÃ©mov, â ukÃ¡Å¾kovÃ½ kÃ³d â implementÃ¡cia vzoru v danom kontexte, â racionÃ¡lny vÃ½znam â formou strunÃ©ho vysvetlenia, preo bolo rieÅ¡enie aplikovanÃ© a pre danÃ½ problÃ©m uÅ¾itonÃ©,"
190,37,0.731,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ak by sme chceli maÅ¥ vo firme pre kaÅ¾dÃº oblasÅ¥ Å¡piÄkovÃ©ho odbornÃ­ka, museli by sme maÅ¥ zÃ¡roveÅ dostatoÄnÃ© mnoÅ¾stvo projektov, aby boli vÅ¡etci primerane vyÅ¥aÅ¾enÃ­. ZÃ¡roveÅ treba, aby sa vÅ¡etci tÃ­to Ä¾udia venovali problÃ©mom na najvyÅ¡Å¡ej Ãºrovni zloÅ¾itosti alebo problÃ©mom, ktorÃ½ch zlÃ© rieÅ¡enie mÃ´Å¾e maÅ¥ veÄ¾mi vÃ¡Å¾ne dopady na projekt. Ak by sa nÃ¡m podarilo zabezpeÄiÅ¥ takÃ½to stav, mÃ´Å¾eme pokojne uvaÅ¾ovaÅ¥ nad zamestnanÃ­m potrebnÃ©ho poÄtu Outsorcovanie Å¡piÄkovÃ½ch odbornÃ­kov na plnÃ½ pracovnÃ½ ÃºvÃ¤zok. MyslÃ­m si vÅ¡ak, Å¾e najmÃ¤ Å¡piÄkovÃ©ho v oblasti IT je takÃ½to stav dosiahnuteÄ¾nÃ½ len veÄ¾mi Å¥aÅ¾ko a zamestnÃ¡vaÅ¥ vÃ¤ÄodbornÃ­ka je Å¡iu skupinu Å¡piÄkovÃ½ch odbornÃ­kov si mÃ´Å¾u dovoliÅ¥ len veÄ¾kÃ© firmy. Äasto lepÅ¡Ã­m spÃ´sobom, ako pristupovaÅ¥ k angaÅ¾ovaniu Å¡piÄkovÃ©ho Äasto lepÅ¡ie ako odbornÃ­ka, je zvÃ¡Å¾enie jeho outsourcovania. Samozrejme outsourcovanie jeho priame takÃ©hoto Äloveka bude z krÃ¡tkodobÃ©ho pohÄ¾adu eÅ¡te drahÅ¡ie ako keby bol angaÅ¾ovanie. v naÅ¡ej firme normÃ¡lne zamestnanÃ½, ale takÃ½mto spÃ´sobom Å¡etrÃ­m peniaze v Äase, keÄ takto kvalifikovanÃº pracovnÃº silu nepotrebujem a bez problÃ©mov si vystaÄÃ­m s terajÅ¡Ã­mi zamestnancami. Peniaze investovanÃ© do outsourcingu by sa mali vrÃ¡tiÅ¥ pridanou hodnotou, ktorÃº prenajatÃ½ Älovek vyprodukuje a ak je to skutoÄne Å¡piÄkovÃ½ odbornÃ­k a je nasadenÃ½ na sprÃ¡vny problÃ©m, mÃ´Å¾em hovoriÅ¥ o viac ako ÃºspeÅ¡nom obchode. Vo firme, kde pracujem, pouÅ¾Ã­vame tento spÃ´sob outsourcingu relatÃ­vne Äasto. Pri novÃ½ch, vÃ¤ÄÅ¡Ã­ch projektoch sa nÃ¡m osvedÄilo outsourcovaÅ¥ analÃ½zu problÃ©movej oblasti na Å¡piÄkovÃ©ho odbornÃ­ka a myslÃ­m si, Å¾e prÃ¡ve kvalita jeho analÃ½z, na ktorÃ½ch nÃ¡sledne stojÃ­ celÃ½ ÄalÅ¡Ã­ projekt, je dostatoÄnou pridanou hodnotou za cenu, ktorÃº takÃ©to outsourcovanie stojÃ­. Len na margo spomeniem, Å¾e tÃ¡to forma outsourcingu so sebou uÅ¾ prinÃ¡Å¡a oveÄ¾a vÃ¤ÄÅ¡ie rizikÃ¡ ako v prvom prÃ­pade. Outsourcujeme totiÅ¾ oblasti, ktorÃ© mÃ´Å¾u tvoriÅ¥ nÃ¡Å¡ hlavnÃ½ biznis, kde hrozÃ­"
76,139,0.722,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.3.2 Uistite sa, Å¾e ku vÅ¡etkÃ½m rozdeleniam z ÄlÃ¡nku 2.2 viete nÃ¡jsÅ¥ prÃ­sluÅ¡nÃ© distribuÄnÃ© funkcie. V kaÅ¾dej situÃ¡cii overte, Å¾e zÃ­skanÃ¡ funkcia mÃ¡ vlastnosti uvedenÃ© vo vete 2.3.3. 2.3.3 Uistite sa, Å¾e ku vÅ¡etkÃ½m rozdeleniam z ÄlÃ¡nku 2.2 viete nÃ¡jsÅ¥ kvantily, t. j. viete urÄiÅ¥ tak, aby platilo: ( ) = . V ktorÃ½ch ÃºlohÃ¡ch, teda pre ktorÃ© rozdelenia, je problÃ©m rieÅ¡iÅ¥ rovnicu ( ) = ? V ÃºlohÃ¡ch 2.2.6 a 2.2.7 ide o kubickÃ© rovnice (algebraickÃ© rovnice tretieho stupÅa), ktorÃ© vieme rieÅ¡iÅ¥ len numerickÃ½mi metÃ³dami. 2.3.4 Funkcia"
59,410,0.713,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Na zÃ¡ver mÃ´Å¾eme konÅ¡tatovaÅ¥, Å¾e sÃ©mantickÃ© tablÃ¡ poskytujÃº jednoduchÃ½ a efektÃ­vny prostriedok pre kontrolu vzÅ¥ahu âtautologickÃ©ho vyplÃ½vaniaâ, ï ï¹ , priÄom nemusÃ­me poznaÅ¥ relatÃ­vne zloÅ¾itÃº syntaktickÃº teÃ³riu dÃ´kazu âlogickÃ©ho vyplÃ½vaniaâ. TaktieÅ¾, sÃ©mantickÃ© tablo je vhodnÃ¡ technika na rieÅ¡enie relÃ¡cie tautologickÃ©ho vyplÃ½vania ï»ïª1 ,...,ïªnï½ pomocou âpartikulÃ¡rnychâ rieÅ¡enÃ­ pre jednotlivÃ© otvorenÃ© vetvy dostaneme rieÅ¡enie, ktorÃ© je sÃ©manticky dÃ´sledok teÃ³rie ï ï½ ï»ïª1 ,...,ïªn ï½ ."
265,132,0.708,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Å¡tÃºdiÃ¡ nedokÃ¡Å¾u prenosnosÅ¥ dosiahnuÅ¥ vyuÅ¾itÃ­m nejakej existujÃºcej integrujÃºcej technolÃ³gie (v hernom priemysle napr. Unity), vÃ¤ÄÅ¡inou sa prenosnosÅ¥ou nezaoberajÃº vÃ´bec (napr. rieÅ¡ia ju na poslednom mieste). VÃ½znam bezpeÄnosti pri vÃ½voji a prevÃ¡dzke hier vo vÅ¡eobecnosti nemoÅ¾no urÄiÅ¥ â zÃ¡visÃ­ od Å¡pecifÃ­k hry, ale aj modelu predaja. NaprÃ­klad v prÃ­pade hry pre jednÃ©ho hrÃ¡Äa, ktorÃ¡ sa jednorazovo predÃ¡va prostrednÃ­ctvom obchodov s aplikÃ¡ciami, akÃ© poznÃ¡me z mobilnÃ½ch platforiem (napr. Google Play, iOS AppStore), nie sÃº bezpeÄnostnÃ© rizikÃ¡, ktorÃ© by Å¡pecificky mal rieÅ¡iÅ¥ vÃ½vojÃ¡r hry veÄ¾kÃ©. Gro bezpeÄnÃ©ho predaja a ochrany pred nelegÃ¡lnym kopÃ­rovanÃ­m hry uÅ¾ totiÅ¾ zabezpeÄuje platforma ako takÃ¡. Ani zmena platobnÃ©ho modelu na priebeÅ¾nÃ½, by zrejme neznamenala zvÃ½Å¡enie Ãºsilia na bezpeÄnosÅ¥, pokiaÄ¾ by boli platby stÃ¡le realizovanÃ© prostrednÃ­ctvom mobilnej platformy. ZvÃ½Å¡enie bezpeÄnostnÃ½ch rizÃ­k by ale zrejme priÅ¡lo, ak by sa platby rozhodlo implementovaÅ¥ Å¡tÃºdio samo (napr. preto, Å¾e by mu model ponÃºkanÃ½ mobilnou platformou nevyhovoval). ZvÃ½Å¡enie hrozieb by sme tieÅ¾ zrejme mohli oÄakÃ¡vaÅ¥ pri hrÃ¡ch pre viac hrÃ¡Äov, Å¡peciÃ¡lne tzv. mnoho-hrÃ¡ÄovÃ½ch online hier (MMOG â massive multiplayer online games)."
393,483,0.707,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Podpora mikroarchitektÃºr MikroarchitektÃºry (Alur et al., 2001) sÃº definovanÃ© v kontexte enterprise softvÃ©rovÃ½ch architektÃºr ako mnoÅ¾iny spolupracujÃºcich vzorov pre rieÅ¡enie rozsiahlejÅ¡Ã­ch problÃ©mov, pre realizÃ¡ciu celÃ½ch systÃ©mov alebo podsystÃ©mov. MikroarchitektÃºra je urÄenÃ¡ na rieÅ¡enie hrubozrnnÃ½ch problÃ©mov, ktorÃ© nemÃ´Å¾u byÅ¥ vyrieÅ¡enÃ© jedinÃ½m vzorom. (Alur et al., 2001) Za prÃ­klad mikroarchitekÃºry mÃ´Å¾eme povaÅ¾ovaÅ¥ spoluprÃ¡cu vzorov Composite a Iterator podÄ¾a obrÃ¡zka 9-5, kedy Iterator zabezpeÄuje prechÃ¡dzanie po Å¡truktÃºrach uloÅ¾enÃ½ch v inÅ¡tancii triedy Composite vrapujÃºcej konkrÃ©tny kontajner. Vzor Composite rieÅ¡i problÃ©m zovÅ¡eobecnenia zloÅ¾enÃ­n a jednotlivÃ½ch prvkov a na sprÃ­stupÅovanie jednotlivÃ½ch prvkov vo vrapovanom kontajneri vyuÅ¾Ã­va moÅ¾nosti vzoru Iterator. NÃ¡vrhÃ¡r pouÅ¾Ã­vajÃºci vzor Composite navyÅ¡e nemusÃ­ vedieÅ¥ o pouÅ¾Ã­vanÃ­ mikroarchitektÃºry so vzorom Iterator. CASE nÃ¡stroje by mali Äo moÅ¾no v najvÃ¤ÄÅ¡ej miere umoÅ¾niÅ¥ prÃ¡cu s mikroarchitektÃºrami bez explicitnej znalosti nÃ¡vrhÃ¡ra."
184,68,0.705,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"naplnenie poÅ¾iadaviek na atribÃºty kvality â vyber atribÃºt a pridaj mechanizmus na jeho splnenie. PraktickÃ© rieÅ¡enia vÅ¡ak nie sÃº priamoÄiare, pretoÅ¾e atribÃºty kvality nie sÃº od seba nezÃ¡vislÃ© â mÃ´Å¾u sa navzÃ¡jom ovplyvÅovaÅ¥ rozliÄnÃ½mi skrytÃ½mi spÃ´sobmi. NÃ¡vrh, ktorÃ½ spÄºÅa poÅ¾iadavky na jeden atribÃºt kvality mÃ´Å¾e maÅ¥ negatÃ­vny dopad na inÃ½ atribÃºt kvality. Napr. vysoko zabezpeÄenÃ½ systÃ©m mÃ´Å¾e byÅ¥ veÄ¾mi Å¥aÅ¾kÃ© aÅ¾ nemoÅ¾nÃ© integrovaÅ¥ do otvorenÃ©ho prostredia. Vysoko dostupnÃ¡ aplikÃ¡cia mÃ´Å¾e vymeniÅ¥ niÅ¾Å¡iu vÃ½konnosÅ¥ za vyÅ¡Å¡iu dostupnosÅ¥. Pochopenie vplyvov a kompromisov medzi jednotlivÃ½mi poÅ¾iadavkami na atribÃºty kvality a nÃ¡vrh rieÅ¡enia, ktorÃ© predstavuje zmysluplnÃ½ kompromis je jednou z najÅ¥aÅ¾Å¡Ã­ch Ãºloh softvÃ©rovÃ©ho architekta. Nie je jednoducho moÅ¾nÃ© nÃ¡jsÅ¥ rieÅ¡enie, ktorÃ© v plnej miere spÄºÅa Ãºplne vÅ¡etky protichodnÃ© poÅ¾iadavky a je prÃ¡ve Ãºlohou architekta identifikovaÅ¥ problÃ©movÃ© miesta a scenÃ¡re, definovaÅ¥ priority a dokumentovaÅ¥ jednotlivÃ© rozhodnutia pri nÃ¡vrhu. Pochopenie a identifikÃ¡cia poÅ¾iadaviek na kvalitu predstavuje vÅ¡ak len nutnÃ½ predpoklad na nÃ¡vrh vhodnÃ©ho rieÅ¡enia. PozÃ­cia architekta je veÄ¾mi komplikovanÃ¡ aj preto, Å¾e architekt predstavuje styÄnÃ½ bod viacerÃ½ch zÃºÄastnenÃ½ch strÃ¡n a musÃ­ nielen podrobne rozumieÅ¥ atribÃºtom kvality a pouÅ¾itÃ½m technolÃ³giÃ¡m ale aj komunikovaÅ¥ s ostatnÃ½mi ÃºÄastnÃ­kmi. Architekt musÃ­ u zÃ¡kaznÃ­ka podrobne identifikovaÅ¥ poÅ¾iadavky na kvalitu, pretoÅ¾e tieto Äasto nie sÃº dostatoÄne zachytenÃ© v Å¡pecifikÃ¡cii poÅ¾iadaviek na systÃ©m. SÃºÄasne je Ãºlohou architekta diskutovaÅ¥ tolerancie v nÃ¡vrhu, identifikovaÅ¥ podmienky, za ktorÃ½ch moÅ¾no znÃ­Å¾iÅ¥ poÅ¾iadavky na kvalitu a jasne predostrieÅ¥ kompromisy jednotlivÃ½m zÃºÄastnenÃ½m stranÃ¡m tak, aby pochopili âdo Äoho idÃºâ."
135,51,0.704,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"za nÃ¡sledok vyÅ¡Å¡ie pamÃ¤ovÃ© nÃ¡roky v prÃ­pade pouÅ¾Ã­vania vzoru abstraktnej tovÃ¡rne. RieÅ¡enie tohto problÃ©mu dÃ¡va nÃ¡vrhovÃ½ vzor Prototyp. Vzor Prototyp ako alternatÃ­va k Abstraktnej tovÃ¡rni AbstraktnÃ¡ tovÃ¡re je vemi podobnÃ¡ vzoru Prototyp. Prototyp je vzor, kde sa novÃ© objekty vytvÃ¡rajÃº kopÃ­rovanÃ­m prototypovÃ©ho objektu. MÃ´Å¾eme poveda, Å¾e prototyp sa dÃ¡ pouÅ¾i vÅ¡ade, kde moÅ¾no pouÅ¾i abstraktnÃº tovÃ¡re. Vzor Prototyp poskytuje vÃ¤Å¡iu flexibilitu za cenu niÅ¾Å¡ieho vÃ½konu. Prototyp mÃ¡ vÅ¡ak niÅ¾Å¡ie pamÃ¤ovÃ© nÃ¡roky, vytvÃ¡ra totiÅ¾ menej abstraktnÃ½ch tried ako abstraktnÃ¡ tovÃ¡re."
190,137,0.703,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pri rieÅ¡enÃ­ softvÃ©rovÃ½ch projektov sa na celÃ½ rieÅ¡iteÄ¾skÃ½ tÃ­m kladie nespoÄetnÃ© mnoÅ¾stvo poÅ¾iadaviek. Ich splnenie by malo vyÃºstiÅ¥ k ÃºspeÅ¡nÃ©mu vyrieÅ¡eniu projektu, t.j. k odovzdaniu softvÃ©rovÃ©ho produktu v poÅ¾adovanej kvalite, naÄas a so stanovenÃ½mi zdrojmi. Tu vznikÃ¡ problÃ©m ako vÅ¡etky tieto poÅ¾iadavky zosÃºladiÅ¥ do procesov tak, aby bolo moÅ¾nÃ© vÅ¡etky v Äo najkratÅ¡om Äase vyrieÅ¡iÅ¥. V prÃ­pade, Å¾e sa jednÃ¡ o rozsiahle projekty a na realizÃ¡cii sa podieÄ¾a viac Ä¾udÃ­, je priam nutnosÅ¥ou ich prÃ¡cu spÃ´so- Existuje veÄ¾a metÃ³d a podporbom plÃ¡novaÅ¥ a koordinovaÅ¥. DostÃ¡vame sa k pojmu plÃ¡novania, ktorÃ© si naÅ¡lo svoje pevnÃ© miesto nÃ½ch nÃ¡strojov pri rieÅ¡enÃ­ softvÃ©rovÃ½ch projektov. V sÃºÄasnosti uÅ¾ existuje veÄ¾kÃ© mnoÅ¾- uÄ¾ahÄujÃºcich stvo metÃ³d a podpornÃ½ch prostriedkov uÄ¾ahÄujÃºcich proces plÃ¡novania. plÃ¡novanie. No aj tak je niekedy problÃ©m zostaviÅ¥ hodnotnÃ½ plÃ¡n, ktorÃ½ by bol reÃ¡lne vyuÅ¾iteÄ¾nÃ½ pri rieÅ¡enÃ­ projektu a netvoril by iba formu dokumentÃ¡cie, ktorÃ¡ by skonÄila pod kopou papierov nejakÃ©ho manaÅ¾Ã©ra. Tu sa mÃ´Å¾eme pozastaviÅ¥ nad otÃ¡zkou, Äi je plÃ¡novanie pri rieÅ¡enÃ­ projektu dÃ´leÅ¾itÃ©. OdpovedaÅ¥ si musÃ­ kaÅ¾dÃ½ sÃ¡m, pretoÅ¾e existujÃº aj prÃ­stupy, ktorÃ© minimalizujÃº proces plÃ¡novania a snaÅ¾ia sa tak zefektÃ­vniÅ¥ celÃ½ proces vÃ½voja. Faktom vÅ¡ak zostÃ¡va, Å¾e plÃ¡nom riadenÃ½ vÃ½voj je v sÃºÄasnosti rozÅ¡Ã­renÃ½m spÃ´sobom rieÅ¡enia softvÃ©rovÃ½ch projektov a existuje veÄ¾kÃ© mnoÅ¾stvo prÃ­kladov jeho ÃºspeÅ¡nÃ©ho pouÅ¾itia. Ak sa rozhodneme, Å¾e chceme vyuÅ¾iÅ¥ plÃ¡nom riadenÃ½ prÃ­stup, treba, aby sme zvlÃ¡dli niektorÃ© techniky spojenÃ© s vytvÃ¡ranÃ­m plÃ¡nu. V neposlednom rade si musÃ­me uvedomiÅ¥, v Äom nÃ¡m mÃ´Å¾e dobre zostavenÃ½ plÃ¡n pomÃ´cÅ¥ a Äoho by sme sa mali pri zostavovanÃ­ plÃ¡nu vyvarovaÅ¥. OdpoveÄ sa pokÃºsim poskytnÃºÅ¥ v nasledujÃºcich Äastiach."
59,475,0.701,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"SÃ©mantickÃ½ prÃ­stup k rieÅ¡eniu tohto problÃ©mu je zaloÅ¾enÃ½ na pravdivostnej tabuÄ¾ke 9.2, z ktorej okamÅ¾ite dostÃ¡vame, Å¾e teÃ³ria ï je nekonzistentnÃ¡, t. j. ï ï½ ï . Pre vÅ¡etky moÅ¾nÃ© pravdivostnÃ© hodnoty, nikdy nenastÃ¡va situÃ¡cia, aby kaÅ¾dÃ¡ formula z teÃ³rie bola sÃºÄasne pravdivÃ¡. VytvorenÃ© âpodteÃ³rieâ ïi majÃº tieto modely: ï1ï¢ ï½ ï»ï¨ 0, ï£ ï©ï½ , ïï¢2 ï½ ï»ï¨ 0, ï£ ï© ,ï¨ ï£ ,1ï©ï½ , ïï¢3 ï½ ï»ï¨ï±ï¬ 0 ï©ï½ , ïï¢4 ï½ ï»ï¨ ï£ï¬ï±ï©ï½ PristÃºpime k ârieÅ¡eniuâ rovnice inklÃºzie ïï¢i ï ï£i , dostaneme ï1ï¢ ïp , ïï¢2 p ï q , ïï¢3 ïq , ïï¢4 Pomocou prirodzenej dedukcie znÃ¡zornÃ­me prvÃ½ vÃ½sledok:"
59,223,0.698,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"kde ï¸ je tzv. koeficient strmosti, ktorÃ½ Å¡pecifikuje âostrosÅ¥â fitnes funkcie. Proces uÄenia je Å¡pecifikovanÃ½ dvoma parametrami: (1) kardinalitou q okolia U(x) a (2) parameter strmosti ï¸. Pre asymptotickÃ© hodnoty F(x) platÃ­ ï¬1 ï¨ if x ï½ xopt ï© a lim F ï¨ x ï© ï½ f max (4.10) lim F ï¨ x ï© ï½ ï­ ObyÄajnÃ© fitnes f(x) mÃ¡ tento jednoduchÃ½ priebeh ï¬1 ï¨ pre x ï½ xopt ï© (4.11) f ï¨ xï© ï½ ï­ ï®0 ï¨ pre x ï¹ xopt ï© Potom platÃ­ pre kaÅ¾dÃ½ chromozÃ³m x podmienka (pozri obr. 4.4) f ï¨ xï© ï³ F ï¨ xï© (4.12) PodÄ¾a Hintona a Nowlana [8] Å¡tudovanÃ½ problÃ©m mÃ´Å¾e byÅ¥ charakterizovanÃ½ ako hÄ¾adanie ihly v kope sena (ang. needle in a haystack) dÃ´sledku skutoÄnosti, Å¾e existuje len jedno korektnÃ© rieÅ¡enie v priestore 2n rieÅ¡enÃ­. Fitnes je obvykle vÃ½znamnou heuristikou, ktorÃ¡ nÃ¡m uÄ¾ahÄuje toto hÄ¾adanie optimÃ¡lneho rieÅ¡enia. ObyÄajnÃ© fitnes f(x) nie je nÃ¡m vÅ¡ak nÃ¡pomocnÃ© v tomto prehÄ¾adÃ¡vanÃ­, z jeho definÃ­cie (4.11) vyplÃ½va, Å¾e je jednotkovÃ© v prÃ­pade, Å¾e x = xopt, v opaÄnom prÃ­pade je nulovÃ© (pozri Obr. 4.4). To znamenÃ¡, Å¾e k tomu, aby sme"
240,167,0.696,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"3.2 RekurzÃ­vne funkcie ProgramovacÃ­ jazyk C prostrednÃ­ctvom zÃ¡sobnÃ­ku volanÃ­ umoÅ¾Åuje kaÅ¾dej funkcii v rÃ¡mci svojho tela zavolaÅ¥ akÃºkoÄ¾vek inÃº funkciu. Je teda Ãºplne beÅ¾nÃ©, Å¾e funkcia priamo alebo nepriamo zavolÃ¡ funkciu s tÃ½m istÃ½m nÃ¡zvom, zvyÄajne vÅ¡ak s inÃ½mi parametrami (hodnotami argumentov). TakÃ©to funkcie nazÃ½vame rekurzÃ­vne funkcie a princÃ­p rieÅ¡enia Ãºloh vyuÅ¾Ã­vajÃºci rekurzÃ­vne funkcie nazÃ½vame rekurzia. UvaÅ¾ujme nasledujÃºci prÃ­klad (rekurzÃ­vnej) funkcie nekonecno():"
59,510,0.696,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"v ktorom hÄ¾adÃ¡me globÃ¡lne minimum funkcie f (x) definovanej nad binÃ¡rnymi reÅ¥azcami dÄºÅ¾ky n. PretoÅ¾e poÄet binÃ¡rnych vektorov dÄºÅ¾ky n je 2n, zloÅ¾itosÅ¥ rieÅ¡enia tohto problÃ©mu rastie exponenciÃ¡lne, t. j. Äas potrebnÃ½ na rieÅ¡enie tohto problÃ©mu rastie exponenciÃ¡lne s rastom dimenzie n, tvÃ½poÄtu 2n . To znamenÃ¡, Å¾e pre vÃ¤ÄÅ¡ie n (napr. n = 50 alebo n =100), tento problÃ©m nemÃ¡me Å¡ancu vyrieÅ¡iÅ¥ v rozumnom Äase. PrÃ¡ve v tomto prÃ­pade vystupujÃº nastupujÃº evoluÄnÃ© algoritmy, ktorÃ© na zÃ¡klade darwinovskej metafory evolÃºcie sÃº schopnÃ© nÃ¡jsÅ¥ rieÅ¡enia tohto problÃ©mu, ktorÃ© aj keÄ sa nemusia rovnaÅ¥ globÃ¡lne optimÃ¡lnemu ieÅ¡eniu xopt, ale je mu veÄ¾mi blÃ­zke a v mnohÃ½ch prÃ­padoch pouÅ¾iteÄ¾nÃ© ako globÃ¡lne rieÅ¡enie. Na zÃ¡ver tejto podkapitoly uvedieme jednoduchÃ½ ilustraÄnÃ½ prÃ­klad rozÅ¡Ã­renia genetickÃ©ho algoritmu o âkolektÃ­vnu pamÃ¤Å¥â [24], ktorÃ¡ je realizovanÃ¡ tzv. pravdepodobnostnÃ½m vektorom w ï½ ï¨ w1 ,w2 ,...,wn ï© ï 0,1 , ktorÃ©ho jednotlivÃ© komponenty 0ï£wiï£1 urÄujÃº pravdepodobnosÅ¥ toho, Äi pri mutÃ¡cii replikÃ¡tora x ï½ ï¨ x1 ,x2 ,...,xn ï© ïï»0,1ï½ bude v polohe xi binÃ¡rna hodnota 1 alebo 0. V pÃ´vodnom genetickom algoritme, proces mutÃ¡cie je Ãºplne nÃ¡hodnÃ½, t. j. v replikÃ¡tore v danej polohe pri mutÃ¡cii sa bitovÃ© preklopenie 0ï«1 generuje nÃ¡hodne (pozri Obr. 10.2, diagram B): (1) modifikovanÃ½ genetickÃ½ algoritmus ï¯1 ï¨ random ï£ wi ï© ï¯mutÃ¡cia ï¨ random ï£ Pmut ï© ï½ ï­ (10.2a) xi ï½ ï­ ï®0 ï¨ inÃ¡Ä ï© ï¨ inÃ¡Ä ï© ï® xi (2) pÃ´vodnÃ½ genetickÃ½ algoritmus ï¯1 ï­ xi ï¨ mutÃ¡cia, ak random ï£ Pmut ï© (10.2b) xi ï½ ï­ ï¨ inÃ¡Ä ï© ï® xi Kde random je nÃ¡hodnÃ© ÄÃ­slo s rovnomernou distribÃºciou pravdepodobnosti z intervalu 0,1 . Ãloha, ktorÃ¡ je rieÅ¡enÃ¡ evoluÄnÃ½m prÃ­stupom je hÄ¾adanie globÃ¡lneho minima funkcie f ï¨ x ï© ï½ eï­0.01x sin ï¨8x ï© cos ï¨10 x ï© na intervale ï­10 ï£ x ï£ 10 . TÃ¡to funkcia mÃ¡ na danom intervale 56 minÃ­m, z ktorÃ½ch len jedno je globÃ¡lne, f(xopt)=-0,966565, xopt=0,61288 (pozri diagram A, Obr. 10.4). Nech v danej epoche evolÃºcie populÃ¡cia obsahuje replikÃ¡tor xopt s doÄasne maximÃ¡lnym fitnesom, toto vybranÃ© rieÅ¡enie sa pouÅ¾ije na modifikÃ¡ciu pamÃ¤te algoritmu reprezentovanej pravdepodobnostnÃ½mi vektorom w (pozri diagram B, Obr. 10.2) w : ï½ ï¨1 ï­ ï¬ ï© w ï« ï¬ xopt (10.3)"
40,96,0.691,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"S pohybem agentÅ¯ se pojÃ­ takÃ© dalÅ¡Ã­ problÃ©my neÅ¾ jen reprezentace prostÅedÃ­. NovÃ© problÃ©my pÅinÃ¡Å¡Ã­ napÅÃ­klad velikÃ© virtuÃ¡lnÃ­ svÄty, ve kterÃ½ch jsou klasickÃ© algoritmy na hledÃ¡nÃ­ nejkratÅ¡Ã­ cesty v grafu pomalÃ©. ProblÃ©my zpÅ¯sobujÃ­ vÃ½tahy, dveÅe Äi schody, pÅi kterÃ½ch se musÃ­ klÃ¡st zvÃ½Å¡enÃ¡ opatrnost pÅi spouÅ¡tÄnÃ­ animacÃ­, a v neposlednÃ­ ÅadÄ problÃ©my pÅinÃ¡Å¡Ã­ takÃ© koordinace pohybu velkÃ©ho poÄtu agentÅ¯ Äi pohyb skupinek agentÅ¯ ve formacÃ­ch. Pokud prostÅedÃ­ zaÄne bÃ½t pÅÃ­liÅ¡ velkÃ©, ÅeÅ¡Ã­ se vyhledÃ¡vÃ¡nÃ­ cesty v grafu pomocÃ­ hierarchickÃ©ho plÃ¡novÃ¡nÃ­ cest [4]. VÃ½tahy, dveÅe a schody lze ÅeÅ¡it napÅÃ­klad speciÃ¡lnÃ­mi navigaÄnÃ­mi body, ve kterÃ½ch se animace synchronizujÃ­ a pohyb velkÃ©ho poÄtu agentÅ¯ lze elegantnÄ ÅeÅ¡it jiÅ¾ zmÃ­nÄnÃ½m steeringem."
76,174,0.69,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"a) NÃ¡jdime pravdepodobnostnÃ© funkcie zloÅ¾iek. b) UrÄime P(1 ï£ < 3, 2 ï£ < 4) . c) UrÄime P( < ). RieÅ¡enie. PodÄ¾a bodu (b) vety 3.1.4, sÄÃ­tanÃ­m v riadkoch, resp. v stÄºpcoch, tabuÄ¾ky zÃ­skame rozdelenia zloÅ¾iek. Tak vznikli okraje v tabuÄ¾ke vpravo. Äalej P(1 ï£"
76,194,0.684,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"3.2.10 PrÃ­klad. NÃ¡hodne vyberieme dva vÃ½robky z produkcie vÃ½robkov, ktorÃ½ch Å¾ivotnosÅ¥ modeluje rozdelenie N(210, 64). Potom nÃ¡hodne vyberieme ÄalÅ¡ie dva, tentoraz z produkcie takÃ½ch, ktorÃ½ch Å¾ivotnosÅ¥ modeluje rozdelenie N(218, 81). AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e kaÅ¾dÃ½ vybratÃ½ vÃ½robok bude fungovaÅ¥ aspoÅ 200 hodÃ­n? RieÅ¡enie. Ak Å¾ivotnosÅ¥ prvÃ½ch dvoch vybratÃ½ch modelujÃº veliÄiny"
135,3,0.684,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"Diel 1: SoftvÃ©rovÃ© paradigmy o sÃº to softvÃ©rovÃ© paradigmy? Jedna cesta, ktorÃ¡ by mohla vies k odpovedi, ide cez podrobnejÅ¡ie preskÃºmanie pojmu paradigma. Pojem paradigma nadobudol modernÃ½ (sÃºasnÃ½) obsah najmÃ¤ vaka prÃ¡ci T. Kuhna, v ktorej sa zaoberal paradigmou ako vÃ½sledkom vedeckej revolÃºcie, meniacej nÃ¡had vedeckej komunity prÃ­sluÅ¡nej oblasti na problÃ©my a metÃ³dy rieÅ¡enia prelomovÃ½m spÃ´sobom. UvÃ¡dzame tento vÃ½znam slova paradigma, pretoÅ¾e sa jednoducho v Å¾iadnom vedeckom pojednanÃ­, postavenom na pojme paradigmy, nedÃ¡ dos dobre obÃ­s. To vÅ¡ak neznamenÃ¡, Å¾e to je jedinÃ½ relevantnÃ½ pohad. JednotlivÃ© oblasti poznania asto pouÅ¾Ã­vajÃº pojem paradigma v zmysle, ktorÃ½ je do znanej miery odliÅ¡nÃ½, i ke moÅ¾no nie priamo protireivÃ½. VÃ¤Å¡inou sa pojem paradigma v Å¡peciÃ¡lnych oblastiach poznania pouÅ¾Ã­va v omnoho Å¡peciÃ¡lnejÅ¡om zmysle, neÅ¾ ako sa chÃ¡pe KuhnovskÃ¡ paradigma. Tu uÅ¾ paradigma nie je nutne vÃ½sledkom vedeckej revolÃºcie i prevratu. Paradigma tieÅ¾ nie je (jedinÃ½m) prevlÃ¡dajÃºcim nÃ¡hadom na metÃ³dy rieÅ¡enia problÃ©mov prÃ­sluÅ¡nej oblasti. Pokojne mÃ´Å¾eme hovori o paradigmÃ¡ch v mnoÅ¾nom Ã­sle, nakoko sa v komunite uznÃ¡va viacero dos Å¡pecifickÃ½ch schÃ©m rieÅ¡enia problÃ©mov."
240,232,0.678,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 3-6 (rieÅ¡enie) Volanie a(0) musÃ­ vyhodnotiÅ¥ vÃ½raz v riadku 6: najskÃ´r vyhodnotÃ­ nÃ¡vratovÃº hodnotu z c(0). Hodnotu c(0) urÄÃ­me z riadku 4 ako d(0)+1, keÄÅ¾e d(0) je 3*0 = 0, tak c(0) = 3*0+1 = 1. V riadku 6 nÃ¡sledne dosadÃ­me hodnotu c(0) ako vstupnÃ½ argument do funkcie b(). VyhodnotÃ­me b(1) v riadku 5: najskÃ´r urÄÃ­me d(1) = 3*1 = 3, dosadÃ­me do c(): c(3) = d(3) + 1 = 3*3 + 1 = 10. Preto b(1) = 2*10-3 = 17. Nakoniec dopoÄÃ­tame hodnotu a(0) = 2*b(1)+1 = 2*17+1 = 35. Program vypÃ­Å¡e hodnotu 35. Ãloha 3-7 (rieÅ¡enie) Pri nÃ¡vrhu kaÅ¾dej rekurzÃ­vnej funkcie musÃ­me navrhnÃºÅ¥ nielen vstupnÃ© a vÃ½stupnÃ© argumenty ale aj rekurzÃ­vny krok vÃ½poÄtu, ktorÃ½ urÄÃ­ vÃ½sledok funkcie pre hodnoty vstupnÃ½ch argumentov na zÃ¡klade rekurzÃ­vneho volania ako aj terminÃ¡lnu podmienku, resp. zÃ¡kladnÃ½ prÃ­pad, pri ktorom je vÃ½slednÃ¡ hodnota urÄenÃ¡ bez pouÅ¾itia rekurzÃ­vneho volania. V tomto prÃ­pade si analÃ½zou iteratÃ­vnych programov na urÄenie cifernÃ©ho sÃºÄtu, ktorÃ© sÃº uvedenÃ© v zadanÃ­, mÃ´Å¾eme vÅ¡imnÃºÅ¥ hraniÄnÃ© podmienky: vÃ½poÄet cifernÃ©ho sÃºÄtu x nepokraÄuje ak hodnota x = 0, kedy je vÃ½sledok 0. V ostatnÃ½ch prÃ­padoch (x > 0), v cykle postupne pripoÄÃ­tavame poslednÃº cifru k vÃ½sledku a pokraÄujeme so zmenÅ¡enÃ½m ÄÃ­slom x / 10. ZodpovedajÃºci rekurzÃ­vny program je takÃ½to:"
76,274,0.676,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"mery v celkovej produkcii sa prakticky nezmenili (piaty vÃ½robok vyberÃ¡me za rovnakÃ½ch okolnostÃ­ ako prvÃ½). Preto sa na vÃ½ber bez vrÃ¡tenia mÃ´Å¾eme pozeraÅ¥ ako na vÃ½ber s vrÃ¡tenÃ­m. VÃ½ber chÃ¡peme ako 10-nÃ¡sobnÃ© nezÃ¡vislÃ© opakovanie toho istÃ©ho pokusu â tÃ½m pokusom je nÃ¡hodnÃ½ vÃ½ber vÃ½robku z celkovej produkcie. UrÄime pravdepodobnosÅ¥ toho, Å¾e a) Å¾ivotnosÅ¥ kaÅ¾dÃ©ho vybratÃ©ho bude aspoÅ 300 hod. b) Å¾ivotnosÅ¥ aspoÅ jednÃ©ho vybratÃ©ho prevÃ½Å¡i 1500 hod. RieÅ¡enie. Toto je typickÃ¡ pravdepodobnostnÃ¡ Ãºloha, keÄ predpokladÃ¡me, Å¾e rozdelenie Å¾ivotnosti je exponenciÃ¡lne rozdelenie (so znÃ¡mym parametrom). AnalogickÃº situÃ¡ciu sme rozoberali v kapitole 3 (pozri 3.2.4 a 3.2.5). V Äl. 6.2 vysvetlÃ­me, Å¾e nÃ¡hodnÃ½ vÃ½ber budeme modelovaÅ¥ 10-ticou , , ..., nezÃ¡vislÃ½ch nÃ¡hodnÃ½ch veliÄÃ­n , pre ktorÃ© â podÄ¾a predpokladu â platÃ­: ~ Exp(ï¬), kde ï¬ = 0.001. Teraz chceme urÄiÅ¥ a) P( â b) P( â Zrejme P(â resp. P(â"
240,235,0.675,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"RekurzÃ­vne vnorenie prebieha len v prÃ­pade ak x nie je jednocifernÃ© binÃ¡rne ÄÃ­slo (x > 1). Potom ako vypÃ­Å¡e binÃ¡rnu reprezentÃ¡ciu vyÅ¡Å¡Ã­ch rÃ¡dov (x/2) dopÃ­Å¡e aj poslednÃº cifru (x%2) binÃ¡rneho zÃ¡pisu x. VÅ¡imnime si, Å¾e toto rekurzÃ­vne rieÅ¡enie nemÃ¡ obmedzenie na vstupnÃ© ÄÃ­slo x do 1 000 000. Je to spÃ´sobenÃ© tÃ½m, Å¾e zÃ¡sobnÃ­k volanÃ­ funguje ako akÃ¡si pamÃ¤Å¥ poslednej cifry (x%2) predtÃ½m ako ju vypÃ­Å¡eme (pretoÅ¾e rekurzÃ­vne vnorenie (x/2) prebieha tesne pred vÃ½pisom printf()). Z formÃ¡lneho hÄ¾adiska teda rekurzÃ­vne rieÅ¡enie vyÅ¾aduje viac pomocnej pamÃ¤te, ÄÃ­m vÅ¡ak zÃ­skame vÅ¡eobecnejÅ¡ie rieÅ¡enie, ktorÃ©ho kÃ³d je jednoduchÅ¡Ã­ a prehÄ¾adnejÅ¡Ã­."
190,144,0.665,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"finanÄnÃ½ch nÃ¡kladov na projekt. Je viac neÅ¾ jasnÃ©, Å¾e sa tÃ½m zniÅ¾uje rentabilita celÃ©ho projektu, samozrejme v prÃ­pade ak sa jednÃ¡ o komerÄnÃ½ projekt. OpaÄnÃ½m extrÃ©mom je plÃ¡n, ktorÃ½ rozsahom niekoÄ¾konÃ¡sobne prevyÅ¡uje rozsah projektu. V takomto prÃ­pade je sÃ­ce riziko oneskorenÃ©ho ukonÄenia projektu oveÄ¾a menÅ¡ie, ale priveÄ¾mi rozsiahly plÃ¡n mÃ´Å¾e znaÄne zbyrokratizovaÅ¥ rieÅ¡enie aj toho najjednoduchÅ¡ieho projektu. PriveÄ¾mi rozsiahly plÃ¡n nadmerne zamestnÃ¡va Ä¾udÃ­, ktorÃ­ sa tak nemÃ´Å¾u venovaÅ¥ rieÅ¡eniu projektu, ÄÃ­m dochÃ¡dza k plytvaniu Ä¾udskÃ½mi zdrojmi a umelÃ©mu predlÅ¾ovaniu Äasu na rieÅ¡enie projektu. TÃº sprÃ¡vnu cestu je v tomto prÃ­pade moÅ¾nÃ© nÃ¡jsÅ¥ dÃ´kladnou analÃ½zou rozsahu projektu, ktorÃ¡ je taktieÅ¾ formou plÃ¡novania. SprÃ¡vne naplÃ¡novanie rozsahu projektu je zÃ¡kladnÃ½m kameÅom dobre zostavenÃ©ho plÃ¡nu, takÅ¾e niet divu, Å¾e je zahrnutÃ© medzi zÃ¡kladnÃ© procesy plÃ¡novania [1]. Na tÃºto problematiku priamo nadvÃ¤zuje aj spojitosÅ¥ medzi veÄ¾kosÅ¥ou plÃ¡nu a veÄ¾kosÅ¥ou tÃ­mu, ktorÃ½ mÃ¡ plÃ¡novanÃ½ projekt realizovaÅ¥. Nechcem tÃ½m naznaÄiÅ¥, Å¾e projekty rieÅ¡enÃ© v malÃ½ch tÃ­moch si nezaslÃºÅ¾ia kvalitnÃ© a rozsiahle Na zostavenie plÃ¡ny, ale chcem upozorniÅ¥, Å¾e ak sa pri plÃ¡novanÃ­ pozabudne na veÄ¾kosÅ¥ kvalitnÃ©ho tÃ­mu, mÃ´Å¾e nÃ¡sledne vzniknÃºÅ¥ problÃ©m pri plÃ¡novanÃ­ Ä¾udskÃ½ch zdrojov. plÃ¡nu projektu Ãkony spojenÃ© s udrÅ¾iavanÃ­m plÃ¡nu sa tak mÃ´Å¾u javiÅ¥ ako Äasovo veÄ¾mi nÃ¡- treba ovlÃ¡daÅ¥ roÄnÃ© a v koneÄnom dÃ´sledku zbytoÄnÃ©. NajlepÅ¡Ã­m kÄ¾ÃºÄom k zvlÃ¡dnutiu niekoÄ¾ko oblastÃ­ tÃ½chto problÃ©mov je znalosÅ¥ problematiky a skÃºsenosÅ¥ s vytvÃ¡ranÃ­m plÃ¡nov manaÅ¾mentu pre rÃ´zne projekty, realizovanÃ© v rÃ´znych tÃ­moch. projektu."
43,8,0.657,Objektovo orientovanÃ© programovanie v C++,"Tieto skriptÃ¡ boli napÃ­sanÃ© s prvotnÃ½m zÃ¡merom poskytnÃºÅ¥ Å¡tudijnÃ½ materiÃ¡l Å¡tudentom druhÃ©ho roÄnÃ­ka odboru Matematicko-poÄÃ­taÄovÃ© modelovanie na Stavebnej fakulte Slovenskej technickej univerzity v Bratislave. Obsah skrÃ­pt sa vo veÄ¾kej miere zhoduje s obsahom predmetu Objektovo orientovanÃ© programovanie tohto Å¡tudijnÃ©ho zamerania. UÄebnica vÅ¡ak mÃ´Å¾e rovnako dobre poslÃºÅ¾iÅ¥ aj komukoÄ¾vek inÃ©mu, kto si chce osvojiÅ¥ princÃ­py objektovo orientovanÃ©ho programovania a zoznÃ¡miÅ¥ sa s jazykom C++. CieÄ¾om tejto knihy je ponÃºknuÅ¥ zrozumiteÄ¾nÃ½ a intuitÃ­vny pohÄ¾ad na objektovo orientovanÃ© programovanie a jeho zÃ¡kladnÃ© stavebnÃ© kamene. Popri tom kniha obsahuje kapitoly, ktorÃ© sa netÃ½kajÃº priamo tejto tÃ©my, ale skÃ´r samotnÃ©ho jazyka C++. ÄitateÄ¾ by mal teda po jej preÄÃ­tanÃ­ nadobudnÃºÅ¥ schopnosÅ¥ vidieÅ¥ objektovÃº Å¡truktÃºru v praktickÃ½ch problÃ©moch, navrhnÃºÅ¥ objektovo orientovanÃ½ program a potom ho implementovaÅ¥ v C++. UÄebnica sa snaÅ¾Ã­ osloviÅ¥ skÃ´r novÃ¡Äika v tejto oblasti, ako profesionÃ¡lneho programÃ¡tora. Aby bola kaÅ¾dÃ¡ problematika Äo najlepÅ¡ie objasnenÃ¡, kniha obsahuje veÄ¾kÃ© mnoÅ¾stvo prÃ­kladov z rÃ´znych oblastÃ­. Ide o jednoduchÃ© Ãºlohy, ktorÃ© sÃº rozdelenÃ© do niekoÄ¾kÃ½ch kategÃ³riÃ­ (zÃ¡kladnÃ© princÃ­py, matematickÃ© Ãºlohy, hry a inÃ© aplikÃ¡cie), aby mal ÄitateÄ¾ moÅ¾nosÅ¥ predstaviÅ¥ si, ako sa dajÃº objektovo reprezentovaÅ¥ rÃ´znorodÃ© typy problÃ©mov. Treba vÅ¡ak zdÃ´razniÅ¥, Å¾e ide skÃ´r o ilustrÃ¡cie princÃ­pov, pretoÅ¾e objektovo orientovanÃ© programovanie zaÄne byÅ¥ skutoÄne uÅ¾itoÄnÃ© aÅ¾ pri rozsiahlych programÃ¡torskÃ½ch projektoch. Kniha uÅ¾ predpokladÃ¡, Å¾e ÄitateÄ¾ poznÃ¡ zÃ¡kladnÃ© princÃ­py programovania. Pri ÄÃ­tanÃ­ prvej kapitoly, ktorÃ¡ vysvetÄ¾uje kÄ¾ÃºÄovÃ© myÅ¡lienky objektovo orientovanÃ©ho programovania, nie je potrebnÃ¡ znalosÅ¥ Å¾iadneho Å¡peciÃ¡lneho programovacieho jazyka. Äalej je vÅ¡ak uÅ¾ uÅ¾itoÄnÃ© maÅ¥ zÃ¡kladnÃ© znalosti jazyka C alebo aspoÅ inÃ©ho prÃ­buznÃ©ho programovacieho jazyka. UÄebnica sa sÃ­ce podrobne venuje niektorÃ½m dÃ´leÅ¾itÃ½m programÃ¡torskÃ½m otÃ¡zkam, ako sÃº naprÃ­klad alokÃ¡cia pamÃ¤te alebo usporiadanie dÃ¡t do rÃ´znych dÃ¡tovÃ½ch Å¡truktÃºr, no nijako sa nevracia k princÃ­pom algoritmizÃ¡cie problÃ©mov a k zÃ¡kladnÃ½m prvkom programovacÃ­ch jazykov, ako sÃº cykly, podmienky, deklarÃ¡cie premennÃ½ch, tvorba funkciÃ­ a podobne. KeÄÅ¾e uÄebnica je primÃ¡rne urÄenÃ¡ pre Å¡tudentov odboru Matematicko-poÄÃ­taÄovÃ© modelovanie, niektorÃ© prÃ­klady a cviÄenia prepokladajÃº istÃ© matematickÃ© vedomosti (nejde vÅ¡ak o pokroÄilÃ© problematiky), alebo rieÅ¡ia jednoduchÃ© problÃ©my z oblastÃ­ sÃºvisiacich s aplikovanou matematikou, ako je naprÃ­klad spracovanie obrazu. Okrem toho je vÅ¡ak v knihe mnoÅ¾stvo ÄalÅ¡Ã­ch prÃ­kladov, ktorÃ© sÃº urÄenÃ© aj pre inak zameranÃ©ho ÄitateÄ¾a. VÅ¡etky uvedenÃ© prÃ­klady sÃº funkÄnÃ© programy alebo ich Äasti, teda boli skompilovanÃ© aj otestovanÃ©. PoÄakovanie. Äakujem recenzentom Ing. TomÃ¡Å¡ovi Oberhuberovi, PhD. a RNDr. Martinovi SamuelÄÃ­kovi, PhD., za cennÃ© pripomienky a rady. TieÅ¾ Äakujem Mgr. Jane Karasovej za pripomienky a pohÄ¾ad laika so zÃ¡ujmom o zÃ¡klady OOP."
190,154,0.657,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"V princÃ­pe mÃ´Å¾eme povedaÅ¥, Å¾e ak sme sa rozhodli riadiÅ¥ projekt plÃ¡nom, mali by sme sa toho drÅ¾aÅ¥ poÄas celÃ©ho obdobia rieÅ¡enia projektu, a teda by sme vytvorenÃ½ plÃ¡n mali nÃ¡leÅ¾ite udrÅ¾iavaÅ¥. Istotne si mnohÃ­ povedia, Å¾e udrÅ¾iavanie plÃ¡nu je Äasovo nÃ¡roÄnÃ©, ale ak sa nad problÃ©mom zamyslÃ­me hlbÅ¡ie, zistÃ­me, Å¾e plÃ¡n projektu vonkoncom nie je vec statickÃ¡, a teda sa postupom Äasu mÃ´Å¾e meniÅ¥. Z toho logicky vyplÃ½va, Å¾e sa poÄas celÃ©ho obdobia rieÅ¡enia projektu nemÃ´Å¾eme spoliehaÅ¥ na plÃ¡n, ktorÃ½ sme vytvorili na zaÄiatku projektu a nÃ¡sledne ho neudrÅ¾iavali. TakÃ½to plÃ¡n, aj keÄ bol v momente vzniku priam dokonalÃ½, strÃ¡ca hodnotu a vÃ½znam. Z dokonalÃ©ho plÃ¡nu sa stÃ¡va iba legenda o dokonalom plÃ¡ne."
59,448,0.657,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ProblÃ©my ProblÃ©m 8.1. Ako je Å¡pecifikovanÃ½ argument? ProblÃ©m 8.2. Nech ï ï½ ï»ï¡,ï¡ ï ï¢, ï§ ï ïï¢, ï§ ,ï¤,ï¤ ï ï¢,ïï¡ ,ïï§ï½ , potom nad touto mnoÅ¾inou Å¡pecifikujte vÅ¡etky moÅ¾nÃ© argumenty. ProblÃ©m 8.3. Ako je definovanÃ¡ relÃ¡cia âkonzervatÃ­vnÃ½â argument?"
369,103,0.653,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 2.14. Vzor PracovnÃ¡ kategÃ³ria V realite a nÃ¡sledne aj v softvÃ©rovÃ½ch systÃ©moch bÃ½va Äasto tendencia spÃ¡jaÅ¥ pozÃ­cie a pracovnÃ© kategÃ³rie: manaÅ¾Ã©r sa povaÅ¾uje za jednu z pracovnÃ½ch kategÃ³riÃ­. SpÃ¡janie tÃ½chto pohÄ¾adov zvyÄajne nerobÃ­ problÃ©m v menÅ¡ej firme, mÃ´Å¾e vÅ¡ak spÃ´sobiÅ¥ problÃ©my vo vÃ¤ÄÅ¡ej firme, ktorÃ¡ mÃ¡ zavedenÃ½ rigorÃ³zny systÃ©m pracovnÃ½ch kategÃ³riÃ­. VÅ¡eobecnejÅ¡ie rieÅ¡enie preto spoÄÃ­va v oddelenÃ­ tÃ½chto dvoch vecÃ­. ManaÅ¾Ã©ra mÃ´Å¾eme povaÅ¾ovaÅ¥ za pracovnÃº kategÃ³riu (ak sa pracovnÃ­k profiluje tÃ½mto smerom), avÅ¡ak prÃ­sluÅ¡nÃº pozÃ­ciu vo firme (naprÃ­klad vedÃºceho oddelenia) mÃ´Å¾e zastÃ¡vaÅ¥ pracovnÃ­k s pracovnou kategÃ³riou manaÅ¾Ã©r aj analytik."
59,598,0.651,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"nemÃ´Å¾e byÅ¥ vo vÅ¡eobecnosti urÄenÃ© jednoznaÄne. ÄalÅ¡Ã­ problÃ©m s inverznÃ½m modelom je, Å¾e jeho urÄenie pomocou diagramu A na Obr. 12.7 nie je cieÄ¾ovo orientovanÃ©. To znamenÃ¡, Å¾e nemusÃ­me nÃ¡jsÅ¥ takÃº akciu, ktorÃ¡ produkuje poÅ¾adovanÃ½ vÃ½stup systÃ©mu. UÄenie sa komplexu vytvorenÃ©ho z inverznÃ©ho a z doprednÃ©ho modelu (pozri Obr. 12.7, diagram B) sa mÃ´Å¾e vykonaÅ¥ podobne ako uÄenie sa komplexu obsahujÃºceho agenta a doprednÃ½ model v predchÃ¡dzajÃºcej podkapitole (pozri Obr. 12.4., diagram B). Podobne, ako je umiestnenÃ½ model doprednÃ©ho szstÃ©mu v kognitÃ­vnom orgÃ¡ne agenta, aj inverznÃ½ model je umiestnenÃ½ ako model inverznÃ©ho systÃ©mu v kognitÃ­vnom orgÃ¡ne agenta."
190,274,0.649,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Pri testovanÃ­ softvÃ©ru a celkovom manaÅ¾mente kvality mÃ´Å¾eme naraziÅ¥ dva zÃ¡sadnÃ© a v dneÅ¡nej dobe Äasto spomÃ­nanÃ© problÃ©my tzv. âover-engineeringâ(vynaloÅ¾enie priveÄ¾kÃ©ho, nepotrebnÃ©ho inÅ¾inierskeho Ãºsilia) a âunder-engineeringâ(vynaloÅ¾enie veÄ¾mi malÃ©ho inÅ¾inierskeho Ãºsilia). V prÃ­pade testovania sa nachÃ¡dzame v podobnej situÃ¡cii, mÃ¡me k dispozÃ­cii silnÃ© prostriedky, ale problÃ©m je zvoliÅ¥ sprÃ¡vnu mieru pouÅ¾itia tÃ½chto prostriedkov. PlÃ¡n testovania podÄ¾a IEEE 807 pokrÃ½va aj fÃ¡zy vÃ½voja softvÃ©ru a definuje ich ako tzv. Ãºrovne testovania (angl. test levels). ProblÃ©mom mÃ´Å¾e byÅ¥ vÃ½ber vhodnosti testovacÃ­ch stratÃ©giÃ­ v jednotlivÃ½ch fÃ¡zach. Jedno moÅ¾nÃ© rieÅ¡enie ukazuje tabuÄ¾ka 1."
135,222,0.649,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.3.5 alÅ¡ie prÃ­klady pouÅ¾itia Okrem doteraz spomenutÃ½ch prÃ­kladov, alÅ¡Ã­mi prÃ­kladmi pouÅ¾itia architektonickÃ©ho vzoru DÃ¡tovody a filtre je vykresovanie grafickÃ½ch scÃ©n (Kaisler, 2005), prÃ­padne kniÅ¾nica LASSPTools pre oblas numerickej analÃ½zy a grafiky (Buschmann, 1996). VÃ½znamnou oblasou pouÅ¾itia tohto vzoru je integrÃ¡cia podnikovÃ½ch aplikÃ¡ciÃ­, kde sÃº integranÃ© rieÅ¡enia asto zaloÅ¾enÃ© na tomto architektonickom vzore (Hohpe, 2004). PrÃ­kladom takÃ©hoto integranÃ©ho rieÅ¡enia mÃ´Å¾e by spracovanie prichÃ¡dzajÃºcich objednÃ¡vok, ktorÃ© majÃº by najskÃ´r deÅ¡ifrovanÃ© (predpokladÃ¡ sa, Å¾e prichÃ¡dzajÃº v Å¡ifrovanej podobe), potom mÃ¡ by vykonanÃ¡ ich autorizÃ¡cia (predpokladÃ¡ sa nutnos overenia, i je odosielate oprÃ¡vnenÃ½ posla objednÃ¡vku s danÃ½mi charakteristikami, ako je naprÃ­klad finannÃ¡ hodnota) a napokon odstrÃ¡nenie duplicÃ­t (predpokladÃ¡ sa, Å¾e z technickÃ½ch dÃ´vodov sa mÃ´Å¾e sta, Å¾e jedna objednÃ¡vka je poslanÃ¡ viackrÃ¡t). ArchitektÃºra tohto integranÃ©ho rieÅ¡enia je zobrazenÃ¡ na obrÃ¡zku 3-8."
111,63,0.648,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 4.1: PrÃ­klad stromu (Å¡truktÃºra navigaÄnÃ©ho menu) pre regionÃ¡lnu autobusovÃº spoloÄnosÅ¥ prezentovanÃ½ vo forme tabuÄ¾ky. OznaÄenia kategÃ³riÃ­ sÃº takÃ© oznaÄenia v strome (uzly, angl. nodes), ktorÃ© majÃº pod sebou ÄalÅ¡ie oznaÄenia (ÄalÅ¡ie uzly, potomkov). Ide o uzly, ktorÃ© tvoria kategÃ³riu, resp. podkategÃ³riu. ObsahovÃ© oznaÄenia sÃº takÃ© oznaÄenia v strome, ktorÃ© nemajÃº ÄalÅ¡Ã­ch potomkov (listy stromu) a v podstate reprezentujÃº cieÄ¾ovÃ© informÃ¡cie/obsah, ktorÃ© chcete, aby nÃ¡vÅ¡tevnÃ­ci/pouÅ¾Ã­vatelia vaÅ¡ej webovej strÃ¡nky mohli Ä¾ahko nÃ¡jsÅ¥. V ÃºlohÃ¡ch Å¾iadame respondentov, aby naÅ¡li umiestnenie nejakÃ©ho obsahu, informÃ¡cie, prÃ­p. funkcie v strome. PoÄas testovania hierarchickej Å¡truktÃºry je Ãºlohou respondenta kliknÃºÅ¥ na strom a nÃ¡jsÅ¥ sprÃ¡vne rieÅ¡enia pre zadanÃ© Ãºlohy. SpoÄiatku respondent vidÃ­ len vrchnÃº vrstvu stromu (1. ÃºroveÅ). ÄalÅ¡ia ÃºroveÅ stromu sa odhalÃ­, keÄ respondent klikne na oznaÄenie (pod)kategÃ³rie. Respondent mÃ´Å¾e stromom traverzovaÅ¥, priÄom jednotlivÃ© (pod)kategÃ³rie sa postupne otvÃ¡rajÃº a zatvÃ¡rajÃº. Ak respondent lokalizuje list (cieÄ¾ovÃ½ uzol), o ktorom je presvedÄenÃ½, Å¾e zodpovedÃ¡ rieÅ¡eniu, klikne (najÄastejÅ¡ie) na tlaÄidlo âTu by som hladal danÃº informÃ¡ciuâ. Respondent musÃ­ prejsÅ¥ k sprÃ¡vnej odpovedi kliknutÃ­m cez vÅ¡etky Ãºrovne stromu. Samozrejme, ak si myslÃ­, Å¾e si vybral nesprÃ¡vny smer, vÅ¾dy sa mÃ´Å¾e vrÃ¡tiÅ¥ spÃ¤Å¥. Pre regionÃ¡lnu autobusovÃº spoloÄnosÅ¥ by sme mohli Ãºlohu formulovaÅ¥ takto: âZajtra skoro rÃ¡no by ste si chceli kÃºpiÅ¥ lÃ­stok na autobus. Kde by ste hÄ¾adali Äas, kedy sa otvÃ¡ra predajÅa cestovnÃ½ch lÃ­stkov?â(pozri Obr. 4.2) Stromy sÃº definovanÃ© vÃ½luÄne textovÃ½mi oznaÄeniami usporiadanÃ½mi do stromovej Å¡truktÃºry, takÅ¾e sa Ä¾ahko vytvÃ¡rajÃº a sÃº ideÃ¡lne na testovanie informaÄnej Å¡truktÃºry bez potreby jej implemen-"
59,130,0.646,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.8. ZnÃ¡zornenie evoluÄnej tvorby komplexnÃ©ho orgÃ¡nu (napr. oka stavovcov), proces je inicializovanÃ½ evoluÄnÃ½m vznikom jednoduchÃ©ho âprotoorgÃ¡nuâ Aini , cez prechodnÃ© rieÅ¡enia Ai, aÅ¾ po koneÄnÃ© rieÅ¡enie Afin. ZloÅ¾itosÅ¥ orgÃ¡nu postupne rastie, dva evoluÄne susednÃ© orgÃ¡ny sÃº si podobnÃ©, evoluÄnÃ½ prechod Ai ï® Ai ï«1 je dobre interpretovateÄ¾nÃ½ pomocou mutÃ¡cie genotypu organizmu. KaÅ¾dÃ½ orgÃ¡n mÃ¡ Å¡pecifikovanÃº Ãºlohu, ktorÃ¡ urÄuje aj selekÄnÃ½ tlak na jeho vznik, tieto Ãºlohy sa mÃ´Å¾u v priebehu evolÃºcie podstatne meniÅ¥. Preto mÃ´Å¾eme evoluÄnÃº Ãºlohu vzniku komplexnÃ©ho orgÃ¡nu formulovaÅ¥ ako zloÅ¾itÃº optimalizaÄnÃº Ãºlohu pohyblivÃ©ho cieÄ¾a. PoÄiatoÄnÃ½ a koneÄnÃ½ stav je spojenÃ½ Äiarou, ktorÃ¡ reprezentuje moÅ¾nosÅ¥ priameho âevoluÄnÃ©ho skokuâ z Aini na Afin. TÃ¡to evoluÄnÃ¡ zmena by vyÅ¾adovala zÃ¡sadnÃº prestavbu genotypu, ktorÃ¡ je jednou mutÃ¡ciou nerealizovateÄ¾nÃ¡, preto pravdepodobnosÅ¥ takÃ©ho evoluÄnÃ©ho skoku je skoro nulovÃ¡."
184,91,0.644,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"AplikaÄnÃ½ server z pohÄ¾adu softvÃ©rovÃ©ho architekta AplikaÄnÃ© servery sÃº komplexnÃ¡ technolÃ³gie a je preto zrejmÃ©, Å¾e softvÃ©rovÃ½ architekt musÃ­ veÄ¾mi dobre poznaÅ¥ konkrÃ©tne poÅ¾iadavky na systÃ©m, aby dokÃ¡zal zvoliÅ¥ vhodnÃ½ typ pouÅ¾itÃ©ho aplikaÄnÃ©ho servera. TechnolÃ³gie aplikaÄnÃ½ch serverov vÅ¡ak umoÅ¾ÅujÃº vyÅ¡Å¡iu voÄ¾nosÅ¥ pri vyuÅ¾Ã­vanÃ­ rÃ´znych architektonickÃ½ch vzorov. KomplexnosÅ¥ komunikÃ¡cie s komponentmi v aplikaÄnom serveri zasa mÃ´Å¾e byÅ¥ vzhÄ¾adom na vÃ½konnosÅ¥ znaÄne limitujÃºcim faktorom pouÅ¾itia takÃ©hoto rieÅ¡enia. 2.2.5"
190,161,0.642,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"5. NekritickÃ© pouÅ¾Ã­vanie vÅ¡eobecne uznÃ¡vanÃ½ch technÃ­k â navzdory tomu, Å¾e unifikovanÃ© procesy alebo agilnÃ© metÃ³dy sÃº odporÃºÄanÃ© postupy, nie je vhodnÃ© ich pouÅ¾Ã­vaÅ¥ bezhlavo na rieÅ¡enie vÅ¡etkÃ½ch druhy problÃ©mov. 6. Dovolenie plÃ¡nu vzdialiÅ¥ sa od reality â akokoÄ¾vek dobre vytvorenÃ½ plÃ¡n sa mÃ´Å¾e vplyvom problÃ©mov odtrhnÃºÅ¥ od reality. NechaÅ¥ takÃ½to plÃ¡n neupravenÃ½, ho robÃ­ nefunkÄnÃ½m. 7. PlÃ¡novanie prÃ­liÅ¡ mnohÃ½ch detailov prÃ­liÅ¡ skoro â ÃºroveÅ abstrakcie musÃ­ byÅ¥ v kaÅ¾dej fÃ¡ze zachovanÃ¡ na prÃ­sluÅ¡nej miere. Snaha naplÃ¡novaÅ¥ v poÄiatoÄnej fÃ¡ze projektu systÃ©m do ÃºplnÃ½ch detailov je takmer rovnako zlÃ¡, ako neplÃ¡novaÅ¥ vÃ´bec. 8. Dobehnutie stratenÃ©ho â ÄastÃ¡ chyba pri zaostÃ¡vanÃ­ za ÄasovÃ½m plÃ¡nom je PodÄ¾a mojich predpoklad, Å¾e sa stratenÃ½ Äas zÃ­skame v ÄalÅ¡ej fÃ¡ze. skÃºsenostÃ­ 9. NepouÄenie sa z minulÃ½ch chÃ½b â toto ani nepotrebuje komentÃ¡r."
240,483,0.642,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"A. Maximum Proces tvorby rieÅ¡enia zahÅÅa rÃ´zne nepredvÃ­danÃ© situÃ¡cie a rozhodnutia, ktorÃ© musÃ­ programÃ¡tor spraviÅ¥, aby dospel k nejakÃ©mu uspokojivÃ©mu rieÅ¡eniu. PokÃºsime sa na prÃ­klade pomerne jednoduchej Ãºlohy spolu preskÃºmaÅ¥ a objaviÅ¥ moÅ¾nosti, ktorÃ© sa otvÃ¡rajÃº, pri rieÅ¡enÃ­ aj takejto zdanlivo jednoduchej Ãºlohy. Zadanie: Na vstupe je postupnosÅ¥ reÃ¡lnych ÄÃ­sel, ktorÃ© chceme analyzovaÅ¥."
115,169,0.639,Algebra a diskrÃ©tna  matematika,"rieÅ¡enie. Ako ÄalÅ¡iu zaÄneme pozÃ­ciu (2,1) pre prvÃº dÃ¡mu. Po niekoÄ¾kÃ½ch nÃ¡vratoch v strome rieÅ¡enÃ­ nÃ¡jdeme umiestnenie zvyÅ¡nÃ½ch dÃ¡m na pozÃ­ciÃ¡ch (4,2), (6,3), (1,4), (3,5), a (5,6). 13.14. PouÅ¾ite prehÄ¾adÃ¡vanie do hÄºbky na nÃ¡jdenie podmnoÅ¾iny, pokiaÄ¾ existuje, pre mnoÅ¾inu {27, 24, 19, 14, 11, 8} so sÃºÄtom rovnÃ½m (a) 41 Po prekroÄenÃ­ hÄ¾adanÃ©ho sÃºÄtu sa uÅ¾ nepokraÄuje hlbÅ¡ie do stromu prehÄ¾adÃ¡vania a pridÃ¡vajÃº sa vÅ¾dy iba menÅ¡ie ÄÃ­sla, ako je uÅ¾ najmenÅ¡ie obsiahnutÃ© vo vytvÃ¡ranej podmnoÅ¾ine."
240,371,0.639,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"RekurzÃ­vne rieÅ¡enie: RekurzÃ­vne rieÅ¡enie spracuje v jednom rekurzÃ­vnom volanÃ­ jeden prvok poÄ¾a. ZÃ¡kladnÃ½ prÃ­pad, resp. terminÃ¡lna podmienka, v ktorom rekurzÃ­vna funkcia urÄÃ­ vÃ½sledok bez ÄalÅ¡ieho rekurzÃ­vneho volania (vnorenia), nastÃ¡va keÄ pole a neobsahuje prvky (n == 0), a teda neobsahuje ani zÃ¡pornÃ© ÄÃ­slo a vÃ½sledok je preto"
130,342,0.639,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"7 MULTIAGENTOVÃ SYSTÃMY Trend postupnÃ©ho distribuovania vÃ½poÄtov neobiÅ¡iel ani umelÃº inteligenciu. MyÅ¡lienka jednÃ©ho superinteligentnÃ©ho centrÃ¡lneho systÃ©mu, ktorÃ½ samostatne rieÅ¡i Ãºlohy, zÃ­skala konkurenta uÅ¾ viac neÅ¾ pred tretinou storoÄia. PribliÅ¾ne v tejto dobe sa zaÄali objavovaÅ¥ systÃ©my zaloÅ¾enÃ© na spoluprÃ¡ci viacerÃ½ch expertov na rieÅ¡enÃ­ spoloÄnej Ãºlohy. Dodnes pribudlo mnoho ÄalÅ¡Ã­ch spÃ´sobov ako v umelej inteligencii vyuÅ¾iÅ¥ princÃ­p distribuovanÃ½ch vÃ½poÄtov a vykonÃ¡vania, a to pre dosiahnutie kvantitatÃ­vnych, ale aj kvalitatÃ­vnych zlepÅ¡enÃ­. DistribuovanÃ© vÃ½poÄty a vykonÃ¡vanie v multiagentovÃ½ch systÃ©moch vÅ¡ak so sebou prinÃ¡Å¡ajÃº aj rad problÃ©mov. Je potrebnÃ© urÄiÅ¥, ako problÃ©m rozdeliÅ¥ na jednoduchÅ¡ie Äasti. Je potrebnÃ© zabezpeÄiÅ¥ prenesenie jednotlivÃ½ch podproblÃ©mov na miesto ich rieÅ¡enia a nakoniec zozbieraÅ¥ a spojiÅ¥ ÄiastkovÃ© vÃ½sledky. Je tieÅ¾ potrebnÃ© koordinovaÅ¥ ÄinnosÅ¥ jednotlivÃ½ch agentov tam kde sÃº ich Äinnosti od seba vzÃ¡jomne zÃ¡vislÃ© a synchronizovaÅ¥ prÃ­stup k spoloÄnÃ½m zdrojom. Napriek tomu, Å¾e multiagentovÃ© systÃ©my ako vednÃ¡ disciplÃ­na sÃº starÅ¡ie ako Å¡tvrÅ¥ storoÄia, definÃ­cie jednotlivÃ½ch konceptov v rÃ´znych zdrojoch nie sÃº jednotnÃ© a Äasto ani jednoznaÄnÃ©. Vymedzenie jednotlivÃ½ch konceptov uvedenÃ½ch v tejto kapitole vychÃ¡dza predovÅ¡etkÃ½m z monografiÃ­ (Ferber, 1999; NÃ¡vrat, 2002; MaÅÃ­k, 1993; MaÅÃ­k, 2003a; MaÅÃ­k, 2003b), ale aj z ÄalÅ¡Ã­ch zdrojov a v neposlednej miere z diskusiÃ­ s kolegami ktorÃ½m by som chcel touto cestou poÄakovaÅ¥."
240,2,0.638,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"vysvetlenie a ukÃ¡Å¾ky programov, za ktorÃ½mi nasledujÃº Ãºlohy pre samostatnÃº prÃ¡cu. RieÅ¡enia Ãºloh uvÃ¡dzame na konci kaÅ¾dej kapitoly a verÃ­me, Å¾e prÃ¡ve tieto rieÅ¡enia budÃº pre ÄitateÄ¾a vÃ½znamnÃ½m prostriedkom pre hlbÅ¡ie porozumenie jednotlivÃ½ch aspektov programovania v jazyku C. V poslednej kapitole (Projekty) uvÃ¡dzame niekoÄ¾ko vÃ¤ÄÅ¡Ã­ch projektov spolu s podrobnÃ½m postupom rieÅ¡enia, ktorÃ© sÃº urÄenÃ© predovÅ¡etkÃ½m ako moÅ¾nosÅ¥ integrovaÅ¥ zÃ­skanÃ© znalosti z ostatnÃ½ch kapitol. TeÅ¡Ã­me sa, Å¾e ste sa rozhodli preniknÃºÅ¥ do zÃ¡kutÃ­ programovania v jazyku C prÃ¡ve s nami. Jazyk C je malÃ½ jazyk, obsahuje pomerne mÃ¡lo kÄ¾ÃºÄovÃ½ch slov a len zÃ¡kladnÃ© typy riadiacich Å¡truktÃºr. Napriek tomu si pri jeho pouÅ¾itÃ­ mÃ´Å¾e programÃ¡tor âÄ¾ahko streliÅ¥ do nohyâ, keÄ aj jeden zatÃºlanÃ½ (chybnÃ½) znak v zdrojovom kÃ³de, mÃ´Å¾e pri vykonanÃ­ programu spÃ´sobiÅ¥ neoÄakÃ¡vanÃ© sprÃ¡vanie, ktorÃ© v koneÄnom dÃ´sledku spÃ´sobÃ­ finanÄnÃ© alebo materiÃ¡lne Å¡kody. Je preto veÄ¾mi nÃ¡roÄnÃ© pÃ­saÅ¥ programy, ktorÃ© sÃº spoÄ¾ahlivÃ© a bezpeÄnÃ©, v zmysle, Å¾e vo vÅ¡etkÃ½ch predvÃ­dateÄ¾nÃ½ch aj nepredvÃ­dateÄ¾nÃ½ch situÃ¡ciÃ¡ch nespÃ´sobia aÅ¾ takÃ© vÃ¡Å¾ne Å¡kody. Programovanie v jazyku C je umenie, ktorÃ© vyÅ¾aduje roky prÃ¡ce a skÃºsenostÃ­. V Bratislave, 25. augusta 2018."
369,25,0.635,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Pojmy âabstrakciaâ (zanedbanie nepodstatnÃ½ch ÄÅt z hÄ¾adiska prÃ­sluÅ¡nÃ©ho skÃºmania) a âzjednoduÅ¡enie modeluâ sÃº prakticky synonymÃ¡. ViacerÃ­ autori vÅ¡ak pod pojem âabstrakciaâ zahÅÅajÃº aj generalizÃ¡ciu, t. j. vytvorenie vÅ¡eobecnejÅ¡ieho modelu. (Pozn. autora tejto uÄebnice.)"
43,229,0.634,Objektovo orientovanÃ© programovanie v C++,"Na prvÃ½ pohÄ¾ad vyzerÃ¡ tento program v poriadku a pri kompilÃ¡cii nenastane nijakÃ¡ chyba. Teraz si vÅ¡ak dobre vÅ¡imnime, Äo sa deje v poslednom riadku pri priraÄovanÃ­. V prvom riadku hlavnÃ©ho programu, keÄ vznikli objekty T1 a T2, si kaÅ¾dÃ½ objekt alokoval v pamÃ¤ti svoje vlastnÃ© miesto pre tri objekty triedy bod. Objekt T1 si tam uloÅ¾il sÃºradnice svojich vrcholov, objekt T2 vÅ¡ak nie. Pri priradenÃ­ sa objekt T2 stane presnou kÃ³piou objektu T1. To znamenÃ¡, Å¾e aj smernÃ­k V objektu T2 bude po priradenÃ­ ukazovaÅ¥ presne na to istÃ© miesto ako smernÃ­k V objektu T1. SplnenÃ¡ je aj Ãºloha priradiÅ¥ trojuholnÃ­ku T2 rovnakÃ© vrcholy, ako mÃ¡ T1. Äo sa vÅ¡ak stalo s miestom, na ktorÃ© ukazoval smernÃ­k V objektu T2 pÃ´vodne? TÃ¡to otÃ¡zka nÃ¡s privedie k problÃ©mu â prÃ­sluÅ¡nÃ© miesto nebolo uvoÄ¾nenÃ©, ale uÅ¾ naÅ neukazuje nijakÃ½ smernÃ­k, je s nÃ­m teda nenÃ¡vratne preruÅ¡enÃ© spojenie a vznikol memory leak. Pri zÃ¡niku objektov sa oba deÅ¡truktory budÃº pokÃºÅ¡aÅ¥ dealokovaÅ¥ to istÃ© miesto, a to je problÃ©m, ktorÃ½ mÃ´Å¾e viesÅ¥ aÅ¾ ku krachu programu. RieÅ¡enie tohto problÃ©mu sa objavÃ­ v kapitole 7 venovanej polymorï¬zmu. ZatiaÄ¾ si zapamÃ¤tajme, Å¾e ak trieda medzi Ãºdajmi obsahuje smernÃ­ky, je to z hÄ¾adiska priraÄovania Å¡peciÃ¡lny prÃ­pad, ktorÃ½ si vyÅ¾aduje Å¡peciÃ¡lne zaobchÃ¡dzanie."
190,390,0.633,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KeÄ dÃ¡me Ä¾uÄom do rÃºk dokonalejÅ¡ie nÃ¡stroje, rozdiely medzi nimi sa zaÄnÃº zmenÅ¡ovaÅ¥. Aj keÄ posun kvality vÄaka softvÃ©rovÃ½m nÃ¡strojom nie je vÃ½raznÃ½, je urÄite prÃ­nosom. Zistilo sa, Å¾e v oblasti databÃ¡zovÃ½ch technolÃ³giÃ­ vzrÃ¡stla kvalita (hodnotenÃ¡ na zÃ¡klade oznÃ¡mkovania urÄenÃ½ch vlastnostÃ­) o 30 % v obdobÃ­ 1997-2002 oproti obdobiu 1992-1997, Äo pripisuje kvalitnejÅ¡Ã­m nÃ¡strojom na vÃ½voj [1]. ModernÃ© vÃ½vojÃ¡rske nÃ¡stroje naznaÄili pozitÃ­vny trend v oblasti zlepÅ¡ovania kvality. DneÅ¡nÃ© kompilÃ¡tory dokÃ¡Å¾u automaticky oznaÄiÅ¥ mnoÅ¾stvo potenciÃ¡lnych chÃ½b, ktorÃ© by inak unikli pozornosti. PrÃ­pady ako nepouÅ¾itÃ© premennÃ©, neinicializovanÃ© premennÃ©, nedostupnÃ½ kÃ³d, funkcie s vetvami bez definovanÃ©ho vÃ½stupu a mnohÃ© ÄalÅ¡ie sÃº dnes potlaÄenÃ© na minimum. Osobne by som uvÃ­tal nÃ¡stroje, ktorÃ© by automaticky sledovali, ktorÃ© sÃºÄiastky mÃ´Å¾u byÅ¥ potenciÃ¡lne ovplyvnenÃ© uskutoÄnenÃ½mi zmenami v kÃ³de. Na prvÃ½ch prieÄkach v zozname by boli tie sÃºÄiastky, ktorÃ© sÃº zmenami ovplyvnenÃ© v najvÃ¤ÄÅ¡ej miere. OznaÄenÃ© by boli miesta, kde mÃ´Å¾e teoreticky dÃ´jsÅ¥ k problÃ©mom a tÃ½mto by som ako programÃ¡tor mohol venovaÅ¥ viac pozornosti. PredpokladÃ¡m, Å¾e automatickÃ© inteligentnÃ© odhaÄ¾ovanie chÃ½b a potenciÃ¡lnych problÃ©mov v programe sa bude Äalej vyvÃ­jaÅ¥, a tak umoÅ¾nÃ­ zlepÅ¡iÅ¥ kvalitu vÃ½stupov slabÅ¡Ã­ch programÃ¡torov, Äi odstrÃ¡niÅ¥ prehliadnutÃ© nedostatky v kÃ³de skÃºsenÃ½ch vÃ½vojÃ¡rov."
59,165,0.633,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 3.16. Priebeh frekvenciÃ­ vÃ½skytu dominantnÃ½ch binÃ¡rnych reÅ¥azcov (16) dÄºÅ¾ky 4. Chemostat bol inicializovanÃ½ 1000 reÅ¥azcami (0010), po 2.5 ï´ 106 ÄasovÃ½ch krokoch dominantnÃ© koneÄnÃ© rieÅ¡enie je reÅ¥azec xfin = (1100), kde real(xopt) = 12/15 a f(12/15) = 0,9755. Toto koneÄnÃ© rieÅ¡enie je blÃ­zke optimÃ¡lnemu rieÅ¡eniu xopt = (1011), kde (xopt) = 11/15 a f(11/15) = 0,9973, ale s âveÄ¾kouâ Hammingovou vzdialenosÅ¥ou d = 3 (v genetickom algoritme tento efekt sa nazÃ½va âHammingov Ãºtesâ). TÃ¡to relatÃ­vne veÄ¾kÃ¡ Hammingova vzdialenosÅ¥ je hlavnÃ½ dÃ´vod preÄo replikÃ¡torovÃ½ algoritmus nie je schopnÃ½ poskytnÃºÅ¥ globÃ¡lne rieÅ¡enie (1011)."
76,329,0.631,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"KtorÃ¡ z nich je nevychÃ½lenÃ½m odhadom ploÅ¡nÃ©ho obsahu P? RieÅ¡enie. PripomeÅme, Å¾e veliÄiny modelujÃº (predstavujÃº) merania dÄºÅ¾ky , t. j. pre = 1, 2, ..., 10, mÃ¡me: = + , kde nÃ¡hodnÃ¡ veliÄina modeluje chybu -tÃ©ho merania. Merania sme realizovali tak, Å¾e , , ... , mÃ´Å¾eme povaÅ¾ovaÅ¥ za 10-ticu nezÃ¡vislÃ½ch veliÄÃ­n, priÄom predpokladÃ¡me, Å¾e E( ) = 0 a var( ) = ï³2. Zrejme pre = 1, 2, ... , 10 platÃ­ E( ) = E( +"
190,48,0.629,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Tento problÃ©m je v kontexte outsourcingu eÅ¡te zloÅ¾itejÅ¡Ã­ ako v prÃ­pade vlastnÃ½ch zamestnancov. OdpadÃ¡ totiÅ¾ jeden z najvÃ¤ÄÅ¡Ã­ch motivaÄnÃ½ch faktorov, ktorÃ½ mÃ´Å¾e firma uplatniÅ¥, aby motivovala svojich zamestnancov. Iba veÄ¾mi nepriamo totiÅ¾ moÅ¾no ovplyvniÅ¥ finanÄnÃ© odmeÅovanie outsourcovanÃ½ch Ä¾udÃ­. Rozhodli sme sa teda vniesÅ¥ do projektu nielen outsourcovanÃ½ch pracovnÃ­kov, ale aj ich materskÃº firmu s tÃ½m, Å¾e boli vytvorenÃ© zmluvy, ktoMotivovaÅ¥ rÃ½ch sÃºÄasÅ¥ou boli platby za produkty a nie za Äas strÃ¡venÃ½ na ich vytvÃ¡ranÃ­. outsourcovanÃ½ch DodÃ¡vateÄ¾skÃ¡ firma teda zodpovedala za dodanie produktu v dohodnutom pracovnÃ­kov je termÃ­ne a nie za prenÃ¡jom Ä¾udÃ­ pre projekt. ZÃ¡roveÅ sme chceli zvÃ½Å¡iÅ¥ zodpovednosÅ¥ aj tÃ½m, Å¾e sme sa od zaÄiatku veÄ¾mi nÃ¡roÄnÃ©. snaÅ¾ili vytvoriÅ¥ atmosfÃ©ru jednÃ©ho veÄ¾kÃ©ho tÃ­mu a nie nejakÃ©ho dodÃ¡vateÄ¾/odberateÄ¾ vzÅ¥ahu. ZatiaÄ¾ ale nemÃ´Å¾em zhodnotiÅ¥ vÃ½sledky postupov, ktorÃ© sme zvolili, pretoÅ¾e projekt je eÅ¡te Äaleko od svojho konca. PoÄiatoÄnÃ¡ fÃ¡za nÃ¡behu vÅ¡ak prebehla veÄ¾mi dobre a myslÃ­m, Å¾e mÃ¡ Å¡ancu na ÃºspeÅ¡nÃ½ koniec."
76,256,0.627,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"pretoÅ¾e je sÃºÄtom nÃºl a jednotiek. Nie je problÃ©m urÄiÅ¥ aj rozdelenie veliÄiny avÅ¡ak najprv objasnime, kedy ide o situÃ¡cie, v ktorÃ½ch mÃ¡me do Äinenia s postupnosÅ¥ou ( ), ktorej Äleny sÃº nezÃ¡vislÃ© veliÄiny s tÃ½m istÃ½m, alternatÃ­vnym rozdelenÃ­m. 5.1.2 Predstavme si nÃ¡hodnÃ½ pokus, ktorÃ½ spoÄÃ­va v -nÃ¡sobnom nezÃ¡vislom opakovanÃ­ nejakÃ©ho (jednoduchÃ©ho) pokusu. V tom jednoduchom pokuse pozorujeme nastatie, resp. nenastatie nejakej nÃ¡hodnej udalosti A. Tak ako uÅ¾ viackrÃ¡t predtÃ½m (Äl. 2.4) s -tÃ½m opakovanÃ­m pokusu spojÃ­me predstavu veliÄiny , ktorÃ¡ je indikÃ¡torom udalosti A. To znamenÃ¡, Å¾e nadobÃºda hodnotu 1 prÃ¡ve vtedy, ak udalosÅ¥ A v -tom opakovanÃ­ pokusu nastane a nadobÃºda hodnotu 0 prÃ¡ve vtedy, ak A v -tom opakovanÃ­ pokusu nenastane. Takto mÃ¡me ~ A( ), kde = P(A), pre = 1, 2, ... , , ... . VÄaka tomu, Å¾e ide o nezÃ¡vislÃ© opakovanie pokusu, sÃº veliÄiny nezÃ¡vislÃ©. PretoÅ¾e udalosÅ¥ A, teda"
265,205,0.624,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"ZhodnoÅ¥te techniku pozorovania ako prostriedku pre zÃ­skavanie informÃ¡ciÃ­ o problÃ©movej oblasti. PoznÃ¡mka: pozorovanie je aktivitou analÃ½zy problÃ©movej oblasti a zberu poÅ¾iadaviek. Analytik v Åom pasÃ­vne sleduje deje v problÃ©movej oblasti, naprÃ­klad ÄinnosÅ¥ v nejakej organizÃ¡ciÃ­. NemusÃ­ Ã­sÅ¥ len o Å¾ivÃ© pozorovanie; reprodukcia dejov zo zÃ¡znamu mÃ´Å¾e byÅ¥ pouÅ¾itÃ¡ tieÅ¾. Tak ako vÅ¡etky techniky, mÃ¡ aj pozorovanie svoje vÃ½hody a nevÃ½hody (uvedenÃ© zoznamy urÄite neuvÃ¡dzajÃº vÅ¡etky, len tie najdÃ´leÅ¾itejÅ¡ie). VÃ½hody: â¢ Autenticita a videnie dejov v praxi. Oproti ostatnÃ½m technikÃ¡m (rozhovory, Å¡tÃºdium dokumentov, ... ) mÃ¡ pozorovanie exkluzÃ­vnu vÃ½hodu: dokÃ¡Å¾e ukÃ¡zaÅ¥ problÃ©movÃº oblasÅ¥ takÃº, akÃ¡ naozaj je. OstatnÃ© techniky ju analytikovi sprostredkujÃº len pÃ­somne Äi Ãºstne (a teda potenciÃ¡lne skreslene). â¢ MoÅ¾nosÅ¥ opakovania. V prÃ­pade existencie vhodnÃ½ch zÃ¡znamov pozorovanÃ½ch dejov, moÅ¾no pozorovanie v prÃ­pade potreby opakovaÅ¥ (naprÃ­klad keÄ analyzujeme, ako pouÅ¾Ã­vatelia pracujÃº s uÅ¾ existujÃºcim softvÃ©rom, ku ktorÃ©mu, povedzme, robÃ­me alternatÃ­vu alebo ho plÃ¡nujeme zlepÅ¡iÅ¥)."
190,302,0.624,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"takpovediac z prsta. NavyÅ¡e, ak zvolÃ­ vysokÃº ÃºroveÅ ohrozenia a zabrÃ¡ni tak prÃ­padnÃ©mu teroristickÃ©mu Ãºtoku, nikto sa o tom nedozvie a obÄania budÃº akurÃ¡t nadÃ¡vaÅ¥ na rÃ´zne obmedzenia, ktorÃ© si museli vytrpieÅ¥. Naopak, ak zvolÃ­ nÃ­zku ÃºroveÅ a dÃ´jde k neÄakanÃ©mu Ãºtoku, Ä¾udia okrem toho, Å¾e budÃº nahnevanÃ­, zaÄnÃº pochybovaÅ¥ o vÃ½zname takÃ©hoto Ãºradu. V softvÃ©rovÃ½ch firmÃ¡ch sa Äasto deje nieÄo podobnÃ©. V oÄiach zamestnancov mÃ´Å¾e byÅ¥ manaÅ¾Ã©r zbytoÄnou zloÅ¾kou vÃ½vojovÃ©ho tÃ­mu. PodÄ¾a nich totiÅ¾ ak firma v danom projekte uspeje, je to vÄaka programÃ¡torom, keÄ neuspeje, je to samozrejme chyba manaÅ¾Ã©ra. Ako sa spieva v jednej slovenskej pesniÄke: âÃºspech je vÅ¡etkÃ½ch, neÃºspech iba jednÃ©hoâ. MÃ¡lokto si vÅ¡ak uvedomuje, Å¾e samotnÃ¡ predpoveÄ budÃºcnosti tÃºto budÃºcnosÅ¥ ovplyvÅuje. UÅ¾ spomÃ­nanÃ© zabrÃ¡nenie predpokladanÃ©mu Ãºtoku je toho dobrÃ½m prÃ­kladom. V rovine softvÃ©rovÃ½ch inÅ¾inierov moÅ¾no tento fakt interpretovaÅ¥ takto: Ak rÃ¡tate so zmenami poÅ¾iadaviek alebo technolÃ³giÃ­ a tieto predpoklady zakomponujete do svojich Ãºvah uÅ¾ na zaÄiatku, vyrieÅ¡ite tÃ½m mnoÅ¾stvo problÃ©mov, ktorÃ© by sa neskÃ´r objavili. V ideÃ¡lnom stave vyrieÅ¡ite vÅ¡etky problÃ©my eÅ¡te pred ich vznikom a neskÃ´r sa nemusÃ­te uÅ¾ o niÄ staraÅ¥, keÄÅ¾e Å¾iadne problÃ©my sa (paradoxne) nevyskytli."
41,53,0.622,InformaÄnÃ© vzdelÃ¡vanie,"dosiahnutie urÄitÃ©ho cieÄ¾a. SÃº sÃ­ce pokusy ohÃ½baÅ¥ metÃ³dy projektovÃ©ho riadenia, ale pri samotnej realizÃ¡cii je dÃ´leÅ¾itÃ© riadiÅ¥ sa aj zdravÃ½m Ãºsudkom. PoznÃ¡me sedem zÃ¡kladnÃ½ch spÃ´sobov projektovÃ©ho manaÅ¾mentu, vÅ¡etky sa uplatÅujÃº aj pri riadenÃ­ IT projektov v praxi: - Waterfall - Agile - Kanban - Scrum - Lean PM - PRINCE 2 - Six Sigma PM MetÃ³dy manaÅ¾mentu Agile, Scrum, Kanban a Lean PM patria aj do spoloÄnej skupiny, ktorÃº mÃ´Å¾eme spoloÄne nazvaÅ¥ â agilnÃ© metÃ³dy projektovÃ©ho manaÅ¾mentu (Agile) [17]. ZvyÅ¡nÃ© metÃ³dy nemajÃº svoje charakteristickÃ© pomenovanie, ale ako si ukÃ¡Å¾eme, majÃº rovnakÃ© opodstatnenie ako agilnÃ©, hoci ku koncu druhej desiatky rokov 21. storoÄia sa zaÄali najmÃ¤ vplyvom vÃ½vojÃ¡rov aplikÃ¡ciÃ­ pre inteligentnÃ© (smart) zariadenia spochybÅovaÅ¥. POZNÃMKA: Niekde som poÄul, Å¾e chybovÃ½ Boeing 737 Max bol navrhnutÃ½ Agile spÃ´sobom projektovÃ©ho manaÅ¾mentu, kde bolo niekoÄ¾ko stovÃ¡k malÃ½ch agilnÃ½ch vÃ½vojovÃ½ch tÃ­mov, ktorÃ© sÃ­ce vyrieÅ¡ili svoju ÄasÅ¥ vÃ½voja, ale nikto sa nestaral, Äi to spolu fungujeâ¦ A tak je lepÅ¡ie si do tohto typu lietadla nesadaÅ¥, a ak v Åom sedÃ­te, tak radÅ¡ej vystÃºpte, lebo padÃ¡â¦ PredtÃ½m, ako sa pustÃ­me do jednotlivÃ½ch metÃ³d projektovÃ©ho manaÅ¾mentu, zadefinujme si niektorÃ© pojmy, ktorÃ© budeme pouÅ¾Ã­vaÅ¥ aj v ÄalÅ¡Ã­ch kapitolÃ¡ch: Sponzor/vlastnÃ­k (stakeholder/owner)â v projekte je to osoba, od ktorej vyÅ¡iel prvotnÃ½ impulz na vytvorenie projektu. Je to osoba, ktorÃ¡ urÄitÃ½ problÃ©m (pain), potrebuje vyrieÅ¡iÅ¥, lebo jeho vyrieÅ¡enÃ­m predpokladÃ¡ zlepÅ¡enie stavu, v ktorom sa nachÃ¡dza. MÃ´Å¾e oÄakÃ¡vaÅ¥ rÃ´zne zlepÅ¡enie stavu â zvÃ½Å¡enie prÃ­jmov, zlepÅ¡enie efektivity prÃ¡ce, zavedenie novÃ©ho vÃ½robku a podobne. ZÃ¡kaznÃ­k (Customer) â je spolu so sponzorom hnacÃ­m motorom zmien, ktorÃ© sÃº v projekte poÅ¾adovanÃ©. Sponzor Äasto reaguje na poÅ¾iadavky zÃ¡kaznÃ­ka. VerejnÃ¡ objednÃ¡vka zÃ¡kaznÃ­ka sa stÃ¡va aj dÃ´vodom problÃ©mov a potrieb sponzora, aby boli realizovanÃ©. Warerfall â je spÃ´sob lineÃ¡rnej metÃ³dy projektovÃ©ho manaÅ¾mentu. Bol to ale prvÃ½ modernÃ½ systÃ©m projektovÃ©ho manaÅ¾mentu, ktorÃ©ho pravidlÃ¡ a spÃ´soby boli vytvorenÃ©. LineÃ¡rne spracovanie metÃ³dy projektovÃ©ho manaÅ¾mentu spÃ´sobom waterfall v tomto prÃ­pade znamenÃ¡ sekvenÄnÃ½ prÃ­stup, kedy sa najprv zadefinujÃº potreby projektu a postupne sa napÄºÅajÃº, aÅ¾ ku prechodu na podporu vzniknutÃ©ho rieÅ¡enia. Je to teda kaskÃ¡da ÄinnostÃ­, ktorÃ© pripomÃ­najÃº vodopÃ¡d (viÄ. Obr. 2)."
240,217,0.62,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Na vÃ½poÄet min2 mÃ´Å¾eme pouÅ¾iÅ¥ makro (riadok 1), ktorÃ© sa pred kompilÃ¡ciou rozvinie (riadok 6), alebo aj funkciu, princÃ­p zostane rovnakÃ½: v priemere urobÃ­me viac (2,666...) porovnanÃ­: 3 porovnania ak vÃ½sledok je a alebo b, 2 porovnania ak vÃ½sledok je c. V praxi na modernom procesore s vyuÅ¾itÃ­m modernÃ©ho kompilÃ¡tora bude najefektÃ­vnejÅ¡Ã­ postup s Äo najjednoduchÅ¡Ã­mi podmienkami: postup vyuÅ¾Ã­vajÃºci dve priradenia s dvoma porovnaniami, pretoÅ¾e hlbokÃ© vetvenia pri ostatnÃ½ch postupoch spÃ´sobujÃº vÃ¤ÄÅ¡iu zÃ¡Å¥aÅ¾ pri tzv. predpovedi vetvenÃ­, ktorÃ© si vyÅ¾aduje pri vykonÃ¡vanÃ­ od procesora najvÃ¤ÄÅ¡iu nÃ¡mahu. Ãloha 3-2 (rieÅ¡enie) PrvÃ½ krok pri nÃ¡vrhu funkcie je urÄiÅ¥ hlaviÄku: vstupnÃ© a vÃ½stupnÃ© argumenty. VstupnÃ© argumenty urÄÃ­me zo zadania: reÃ¡lne ÄÃ­slo x (typ double) a celÃ© ÄÃ­slo n (typ int), vÃ½stupom bude hodnota mocniny xn (typ double). HlaviÄka teda bude takÃ¡to"
59,703,0.619,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"VÃ½skumy Gigerenzera a jeho spolupracovnÃ­kov moÅ¾no zosumarizovaÅ¥ [9,10] prostrednÃ­ctvom hypotÃ©zy, Å¾e Ä¾udskÃ½ mozog bol formovanÃ½ v priebehu evolÃºcie tak, Å¾e nie je veÄ¾mi efektÃ­vne vÃ½poÄtovÃ© zariadenie, ale je schopnÃ½ efektÃ­vne rieÅ¡iÅ¥ neustÃ¡le sa vyskytujÃºce adaptÃ­vne a rÃ½chlo sa meniace dynamickÃ© problÃ©my, od rieÅ¡enia ktorÃ½ch Äasto zÃ¡visÃ­ existencia danÃ©ho jedinca, priÄom vyuÅ¾Ã­va na rieÅ¡enie tÃ½chto problÃ©mov jednoduchÃ© a rÃ½chle heuristiky, ktorÃ© sÃº nenÃ¡roÄnÃ© na Äas, poznatky a vÃ½poÄty. MoÅ¾nosti sÃºÄasnej umelej inteligencie a kognitÃ­vnej vedy modelovaÅ¥ ohraniÄenÃº racionalitu IntegrÃ¡lna sÃºÄasÅ¥ modernej umelej inteligencie je poÄÃ­taÄovÃ¡ inteligencia (Äasto nazÃ½vanÃ¡ aj ako softcomputing), ktorÃ¡ obsahuje znÃ¡mu triÃ¡du modernÃ½ch subsymbolickÃ½ch prÃ­stupov: neurÃ³novÃ© siete [14], evoluÄnÃ© algoritmy [15] a fuzzy logiku [28]. Je potrebnÃ© poznamenaÅ¥, Å¾e tieto tri subsymbolickÃ© oblasti umelej inteligencie sÃº zaloÅ¾enÃ© na princÃ­poch, ktorÃ© sÃº veÄ¾mi blÃ­zke k teÃ³rii ohraniÄenej racionality. NeurÃ³novÃ© siete sÃº vhodnÃ½ prostriedok na konÅ¡trukciu kognitÃ­vneho orgÃ¡nu agentov, ktorÃ½ je schopnÃ½ uÄenia v priebehu vykonÃ¡vania svojich aktivÃ­t v danom prostredÃ­ a ktorÃ½ uÅ¾ svojou konÅ¡trukciou mÃ¡ ohraniÄenÃ© kognitÃ­vne moÅ¾nosti a preto je vhodnÃ½ prostriedok pre Å¡tÃºdium ohraniÄenej racionality. Podobne, evoluÄnÃ© algoritmy mÃ´Å¾u slÃºÅ¾iÅ¥ na konÅ¡trukciu stratÃ©giÃ­ v multiagentovÃ½ch systÃ©moch. KlasickÃ½ prÃ­klad tohto prÃ­stupu sÃº Axelrodove Å¡tÃºdie [2,3] kooperÃ¡cie zaloÅ¾enÃ© na vÃ¤zenskej dileme, ktorÃ© vyÃºstili v zistenÃ­ neoÄakÃ¡vanej tit-for-tat stratÃ©gie. Fuzzy logika je schopnÃ¡ spracovaÅ¥ neÃºplnÃº informÃ¡ciu (napr. verbÃ¡lne formulovanÃº). Pomocou jej metÃ³d sme schopnÃ­ zostrojiÅ¥ rÃ´zne typy riadiacich prvkov (kontrolÃ©rov) len pomocou vÃ¡gne formulovanÃ½ch pravidiel (napr. âzabrzdi, ak sa pribliÅ¾ujeÅ¡ k autu, ktorÃ© je pred tebouâ). Tieto âkontrolÃ©ryâ mÃ´Å¾eme chÃ¡paÅ¥ ako jednoduchÃ© heuristiky na riadenie zloÅ¾itÃ½ch dynamickÃ½ch systÃ©mov, ktorÃ½ch teÃ³riu v mnohÃ½ch prÃ­padoch nepoznÃ¡me (napr. riadenie zloÅ¾itÃ©ho zariadenia, kde vzÅ¥ah medzi vstupnÃ½mi a vÃ½stupnÃ½mi parametrami poznÃ¡me len ako âÄiernu skrinkuâ). PoÄÃ­taÄovÃ¡ inteligencia je v sÃºÄasnosti veÄ¾mi populÃ¡rna v kruhoch âautomatizÃ©rovâ, kde poskytuje skoro univerzÃ¡lny prostriedok na riadenie zloÅ¾itÃ½ch systÃ©mov, priÄom redukuje nutnosÅ¥ vyuÅ¾Ã­vaÅ¥ klasickÃ© matematickÃ© prÃ­stupy teÃ³rie riadenia na minimum."
40,54,0.618,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"PouÅ¾ijeme Äo moÅ¾no najvÃ¤ÄÅ¡Ã­ dynamickÃ½ rezervoÃ¡r. Toto je najefektÃ­vnejÅ¡ia a vÅ¡eobecne aplikovateÄ¾nÃ¡ metÃ³da, ale vyÅ¾aduje dostatoÄne veÄ¾kÃº trÃ©novaciu mnoÅ¾inu. PouÅ¾ijeme malÃ© hodnoty vstupnÃ½ch vÃ¡h. TÃ½m zabezpeÄÃ­me, Å¾e neurÃ³novÃ¡ sieÅ¥ bude pracovaÅ¥ takmer v lineÃ¡rnom rozsahu. Tu sa ale mÃ´Å¾eme dostaÅ¥ do konfliktu s nelineÃ¡rnou charakteristikou Ãºlohy. PouÅ¾ijeme lineÃ¡rne aktivaÄnÃ© funkcie neurÃ³nov v dynamickom rezervoÃ¡ri. OpÃ¤Å¥ nÃ¡m hrozÃ­ ten istÃ½ problÃ©m ako v predchÃ¡dzajÃºcom bode. PouÅ¾ijeme Å¡peciÃ¡lne pripravenÃ½ dynamickÃ½ rezervoÃ¡r s takmer jednotkovou vÃ¡hovou maticou (bliÅ¾Å¡ie informÃ¡cie v [3]). PouÅ¾ijeme spektrÃ¡lny polomer matice blÃ­zky hodnote 1. Takto vytvorenÃ¡ Echo State neurÃ³novÃ¡ sieÅ¥ bude fungovaÅ¥ ÃºspeÅ¡ne iba pri ÃºlohÃ¡ch s pomalou dynamikou."
43,420,0.616,Objektovo orientovanÃ© programovanie v C++,"9.1 Å ablÃ³ny a generickÃ© programovanie V celom doterajÅ¡om texte sme postupovali tak, Å¾e pri vytvÃ¡ranÃ­ nejakej triedy alebo funkcie sme presne urÄili vÅ¡etky dÃ¡tovÃ© typy. Ãdaje tried, parametre funkciÃ­, ich nÃ¡vratovÃ© hodnoty a vÃ´bec vÅ¡etky premennÃ© v programe mali jednoznaÄne danÃ½ svoj typ. Ak by sme to neurobili, nÃ¡Å¡ program by ani nepreÅ¡iel kompilÃ¡ciou. MoÅ¾nosti objektovo orientovanÃ©ho programovania v C++ sÃº Å¡irokÃ© a pri ich sprÃ¡vnom pouÅ¾itÃ­ dokÃ¡Å¾eme skutoÄne zefektÃ­vniÅ¥ a prehÄ¾adne usporiadaÅ¥ zÃ¡pis programu. Autor C++ vÅ¡ak v snahe o eÅ¡te vÃ¤ÄÅ¡iu efektÃ­vnosÅ¥ zaÅ¡iel eÅ¡te Äalej a sÃºstredil sa prÃ¡ve na dÃ¡tovÃ© typy. V programoch sa totiÅ¾ Äasto stÃ¡valo, Å¾e vznikali naprÃ­klad funkcie, ktorÃ© mali v podstate identickÃ½ obsah a lÃ­Å¡ili sa len typom niektorÃ½ch premennÃ½ch, parametrov alebo nÃ¡vratovej hodnoty. Polymorï¬zmus umoÅ¾Åuje takÃ©to funkcie pomenovaÅ¥ rovnakÃ½m nÃ¡zvom a tÃ½m odbÃºra mnoÅ¾stvo rÃ´znych mien, ktorÃ© by sa v programe mohli nahromadiÅ¥. Faktom ale zostÃ¡va, Å¾e vÅ¡etky verzie funkcie musÃ­ programÃ¡tor napÃ­saÅ¥ a kÃ³d tak obsahuje opakujÃºce sa Äasti. RieÅ¡enie tohto problÃ©mu ponÃºkajÃº Å¡ablÃ³ny (angl. template). VÄaka Å¡ablÃ³nam mÃ´Å¾eme deï¬novaÅ¥ vÅ¡eobecnÃ© funkcie alebo aj triedy, v ktorÃ½ch sa typ dÃ¡t urÄÃ­ aÅ¾ v okamihu ich pouÅ¾itia. V reÃ¡lnom svete je Å¡ablÃ³nou naprÃ­klad strih Å¡iat â podÄ¾a jednÃ©ho strihu sa dajÃº uÅ¡iÅ¥ Å¡aty rÃ´znych farieb alebo z rÃ´znych materiÃ¡lov. VÅ¡etky budÃº maÅ¥ rovnakÃ½ tvar, ale v konkrÃ©tnom prevedenÃ­ sa budÃº lÃ­Å¡iÅ¥. Strih mÃ´Å¾eme pouÅ¾iÅ¥ kedykoÄ¾vek a Ä¾ubovoÄ¾ne veÄ¾akrÃ¡t. RovnakÃ© je to aj so Å¡ablÃ³nami funkciÃ­ a tried. MÃ´Å¾eme podÄ¾a nich kedykoÄ¾vek vyrobiÅ¥ funkciu alebo triedu, ktorÃ¡ bude maÅ¥ presne danÃ½ tvar, rovnako ako je danÃ½ tvar Å¡iat, a Ãºlohu farby alebo materiÃ¡lu tu budÃº hraÅ¥ dÃ¡tovÃ© typy â v nich bude kaÅ¾dÃ¡ funkcia alebo trieda originÃ¡lna a odliÅ¡nÃ¡ od ostatnÃ½ch funkciÃ­ alebo tried s rovnakÃ½m tvarom. GenerickÃ© programovanie (angl. generic programming) je programovanie vyuÅ¾Ã­vajÃºce Å¡ablÃ³ny. GenerickÃ© znamenÃ¡ vÅ¡eobecnÃ©, Äo nÃ¡m napovedÃ¡, Å¾e v programe sa budÃº vyskytovaÅ¥ zovÅ¡eobecnenÃ© funkcie alebo triedy."
240,460,0.616,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-30 (rieÅ¡enie) UrÄÃ­me najskÃ´r hlaviÄku funkcie: vstupnÃ© argumenty sÃº vkladanÃ© ÄÃ­slo (cislo), pole a[], do ktorÃ©ho vkladÃ¡me, poÄet prvkov n poÄ¾a a[] ako aj dÄºÅ¾ka poÄ¾a a[] argument kapacita. AkÃ© budÃº vÃ½stupnÃ© argumenty? VÃ½stupnÃ© argumenty by mali zahÅÅaÅ¥ tie"
41,22,0.613,InformaÄnÃ© vzdelÃ¡vanie,"Å¡kodiÅ¥!). Podmienky pouÅ¾Ã­vania open-source zvyÄajne definuje âvÅ¡eobecnÃ¡ verejnÃ¡ licenciaâ (General Public Licence), ktorÃ¡ slÃºÅ¾i ako licenÄnÃ¡ zmluva na softvÃ©r (SLA â v tomto prÃ­pade Software Licence Agreement) pre mnoho programov s otvorenÃ½m kÃ³dom. VeÄ¾a Ä¾udÃ­ uprednostÅuje open-source pred uzavretÃ½mi programami. ProgramÃ¡tori spravidla nemÃ´Å¾u ÃºÄtovaÅ¥ peniaze za softvÃ©r s otvorenÃ½m zdrojovÃ½m kÃ³dom, ktorÃ½ vytvÃ¡rajÃº, alebo ku ktorÃ©mu prispievajÃº. Preto mnoho softvÃ©rovÃ½ch programÃ¡torov s open-source spoplatÅuje softvÃ©rovÃ© sluÅ¾iby a podporu skÃ´r ako za samotnÃ½ softvÃ©r. Ich softvÃ©r tak zostÃ¡va bezplatnÃ½ a zarÃ¡bajÃº peniaze tÃ½m, Å¾e pomÃ¡hajÃº inÃ½m s jeho inÅ¡talÃ¡ciou, pouÅ¾Ã­vanÃ­m a rieÅ¡enÃ­m problÃ©mov. VÃ½hody open-source teda mÃ´Å¾eme zhodnotiÅ¥ nasledovne: âª kÃ³d mÃ´Å¾e byÅ¥ znÃ¡my a upravenÃ½ tak, aby rieÅ¡il problÃ©my s nÃ­m spojenÃ©, alebo ho moÅ¾no prispÃ´sobiÅ¥ konkrÃ©tnym potrebÃ¡m, âª kÃ³d zostÃ¡va v stave neustÃ¡leho zlepÅ¡ovania vÄaka zÃ¡sahom vÃ½vojÃ¡rov, revÃ­ziÃ¡m a novÃ½m nÃ¡padom, âª Ãºpravy kÃ³du je moÅ¾nÃ© Ä¾ubovoÄ¾ne redistribuovaÅ¥, âª obmedzuje predÃ¡torskÃ© sprÃ¡vanie pri presadzovanÃ­ softvÃ©ru, monopolu a zdraÅ¾ovaniu, âª pouÅ¾itÃ­m sa mÃ´Å¾u dosiahnuÅ¥ vyÅ¡Å¡ie Å¡tandardy kvality, âª open-source kÃ³d umoÅ¾Åuje kontinuitu projektov, a to aj po zmene programÃ¡torov alebo pÃ´vodnÃ½ch rieÅ¡iteÄ¾ov, âª umoÅ¾Åuje spoloÄnostiam a vÃ½vojÃ¡rom zaviesÅ¥ urÄitÃ© obmedzenia pouÅ¾Ã­vania, a tak chrÃ¡niÅ¥ integritu kÃ³du. POZNÃMKA: PoslednÃ© dva body v zozname mÃ´Å¾u Ä¾ahko spÃ´sobiÅ¥ protichodnÃ© ÃºÄinky. SpoloÄnosÅ¥, alebo zdruÅ¾enie (aj na Slovensku mÃ¡me takÃ©...) na prvÃ½ pohÄ¾ad bojujÃº za pouÅ¾Ã­vanie open-source pri rieÅ¡enÃ­ informatickÃ½ch systÃ©mov. Ak sa uÅ¾ vÅ¡ak âubytujÃºâ v danom systÃ©me a niekto by ich chcel vytlaÄiÅ¥, staÄÃ­ aplikovaÅ¥ licenÄnÃ© obmedzenia, a eÅ¡te lepÅ¡ie vÅ¡etky zmeny vydÃ¡vaÅ¥ na nevyhnutnÃ© servisnÃ© Ãºkony, a to uÅ¾ predsa patrÃ­ pod kategÃ³riu rieÅ¡enia problÃ©mov."
240,485,0.611,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"RieÅ¡enie: Pri nÃ¡vrhu rieÅ¡enia (akejkoÄ¾vek Ãºlohy) je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e naÅ¡ou Ãºlohou je vytvoriÅ¥ program, ktorÃ½ sprÃ¡vne vyrieÅ¡i nielen Ãºlohu pre ukÃ¡Å¾kovÃ© Ãºdaje zo zadania, ale pre akÃ©koÄ¾vek vstupnÃ© Ãºdaje spÄºÅajÃºce Å¡pecifikÃ¡ciu Ãºlohy. SÃºÄasÅ¥ou tejto Å¡pecifikÃ¡cie je najmÃ¤ formÃ¡t vstupu a vÃ½stupu. FormÃ¡t vstupu jednoznaÄne opisuje, ako porozumieÅ¥ Ãºdajom na vstupe, aby sme ich mohli naÄÃ­taÅ¥ a spracovaÅ¥. SkutoÄnÃ¡ Ãºloha je teda vytvoriÅ¥ program, ktorÃ½ oÄakÃ¡va (a spracuje) Ãºdaje dodrÅ¾iavajÃºce tento formÃ¡t. Ak Ãºdaje na vstupe nespÄºÅajÃº Å¡pecifikÃ¡ciu Ãºlohy a formÃ¡t vstupu, ako je uvedenÃ© v zadanÃ­ Ãºlohy, tak nie je chybou programu, ak na takÃ½chto vstupnÃ½ch Ãºdajoch vypÃ­Å¡e nesprÃ¡vny vÃ½sledok. VrÃ¡Å¥me sa spÃ¤Å¥ k naÅ¡ej Ãºlohe. Text tejto Ãºlohy opisuje zadanie pre nÃ¡Å¡ program ako zistenie maxima spomedzi prvkov zadanej postupnosti. FormÃ¡t vstupu nie je bliÅ¾Å¡ie opÃ­sanÃ½, keÄÅ¾e text jednoznaÄne (formÃ¡lne) neuvÃ¡dza, akÃ½m spÃ´sobom sÃº jednotlivÃ© ÄÃ­sla zadanÃ©: mÃ´Å¾u byÅ¥ v desiatkovej sÃºstave alebo v binÃ¡rnej sÃºstave alebo akokoÄ¾vek inak zadanÃ©, napr. aj slovne. PresnÃ¡ Å¡pecifikÃ¡cia Äasto obsahuje podrobnÃ© opisy, ktorÃ© zaÄÃ­najÃºceho programÃ¡tora mÃ´Å¾u odradiÅ¥. V praxi vÅ¡ak Äasto ani nie sÃº potrebnÃ©, pretoÅ¾e skÃºsenÃ­ programÃ¡tori uÅ¾ vedia, Äo mÃ´Å¾u oÄakÃ¡vaÅ¥. Ako alternatÃ­vu presnej Å¡pecifikÃ¡cie formÃ¡tu vstupu a vÃ½stupu vÅ¾dy uvÃ¡dzame v ÃºlohÃ¡ch ukÃ¡Å¾ku vstupu/vÃ½stupu, ktorÃ¡ pre skÃºsenÃ©ho programÃ¡tora Ãºplne a jednoznaÄne vysvetÄ¾uje podstatu vstupnÃ©ho aj vÃ½stupnÃ©ho formÃ¡tu. OtÃ¡zka: Äo keÄ sÃº na vstupe dÃ¡ta, ktorÃ© nie sÃº v poÅ¾adovanom formÃ¡te?"
76,352,0.611,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ako vidÃ­me, znÃ­Å¾ili sme sÃ­ce pravdepodobnosÅ¥ chyby 2. druhu (aj keÄ nie dostatoÄne), ale dÃ´sledkom je zvÃ½Å¡enie pravdepodobnosti chyby 1. druhu. Je zrejmÃ©, Å¾e zlepÅ¡enie testu dosiahneme len tak, keÄ zvÃ½Å¡ime rozsah nÃ¡hodnÃ©ho vÃ½beru (Ãºloha 8.5.1). Ak rozsah nÃ¡hodnÃ©ho vÃ½beru je danÃ½, pevnÃ½, tak pravdepodobnosti chÃ½b 1. druhu a 2. druhu sa chovajÃº ako âspojenÃ© nÃ¡dobyâ. ZmenÅ¡enie jednej z nich mÃ¡ za nÃ¡sledok zvÃ¤ÄÅ¡enie druhej (v rÃ¡mci prÃ­kladu 8.1.2, resp. tejto poznÃ¡mky, zmenÅ¡enie ï¢ z 0.936 na 0.648, malo za nÃ¡sledok nÃ¡rast ï¡ z 0.008 na 0.104). Treba sa rozhodnÃºÅ¥, Äo zvolÃ­me za kritÃ©rium optimality testu. V naÅ¡ej situÃ¡cii je celkom logickÃ©, snaÅ¾iÅ¥ sa minimalizovaÅ¥ sÃºÄet pravdepodobnostÃ­ oboch chÃ½b, t. j. nÃ¡jsÅ¥ kritickÃº oblasÅ¥ tak, aby sÃºÄet ï¡ + ï¢ bol Äo najmenÅ¡Ã­. V takom prÃ­pade test zaloÅ¾enÃ½ na kritickej oblasti L je lepÅ¡Ã­, ako test zaloÅ¾enÃ½ na oblasti K ( pretoÅ¾e 0.104 + 0.648 < 0.008 + 0.936 ). Vezmime na vedomie, Å¾e v reÃ¡lnom testovanÃ­ ide o testy, v ktorÃ½ch aspoÅ jedna hypotÃ©za je zloÅ¾enou a ako ukÃ¡Å¾eme v ÄalÅ¡om, postavenie hypotÃ©z nie je takÃ© symetrickÃ© ako v naÅ¡ej (elementÃ¡rnej) situÃ¡cii. Preto sa prijala inÃ¡ koncepcia optimality rozhodovania. Å tandardnÃ½ test prebieha tak, Å¾e stanovÃ­me hranicu ï¡ pre pravdepodobnosÅ¥ chyby 1. druhu a spomedzi vÅ¡etkÃ½ch oblastÃ­ veÄ¾kosti nanajvÃ½Å¡ ï¡ vyberieme tÃº, pri ktorej mÃ¡ test najmenÅ¡iu pravdepodobnosÅ¥ chyby 2. druhu (mÃ¡ teda najvÃ¤ÄÅ¡iu silu). TakÃ©to uvaÅ¾ovanie vedie k pojmu najsilnejÅ¡ej kritickej oblasti veÄ¾kosti ï¡, ktorÃ½ je vÅ¡ak uÅ¾ mimo rÃ¡mca tohoto textu."
240,482,0.611,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,programovania. VÃ½slednÃ© zdrojovÃ© kÃ³dy rieÅ¡enÃ­ sa skladajÃº z viacerÃ½ch funkciÃ­ a vhodne vyuÅ¾Ã­vajÃº viacerÃ© prvky programovacieho jazyka. NaÅ¡im cieÄ¾om je zrozumiteÄ¾ne a prÃ­stupne pre zaÄÃ­najÃºceho programÃ¡tora opÃ­saÅ¥ ako postupovaÅ¥ pri rieÅ¡enÃ­ zloÅ¾itejÅ¡Ã­ch Ãºloh.
184,321,0.611,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"kde prÃ­kaz vykonaj spÃºÅ¡Å¥a dva programy A a B po sebe, jeden po druhom. PokiaÄ¾ oba programy produkujÃº vÃ½stup, oÄakÃ¡va sa, Å¾e vÃ½stup produkovanÃ½ procesom B bude priamo nasledovaÅ¥ za vÃ½stupom z procesu A a to v sÃºbore vystup. SpÃ´sob akÃ½m sa tento stav dosahuje na jednoprocesorovÃ½ch systÃ©moch, je zaloÅ¾enÃ½ na tom, Å¾e v Äase, keÄ Å¡tartuje proces B zdedÃ­ po procese A ukazovateÄ¾ ktorÃ½ je medzi nimi a shellom zdieÄ¾anÃ½. Pri takomto postupe bude prvÃ¡ slabika vÃ½stupu programu B zapÃ­sanÃ¡ hneÄ po poslednej slabike zapÃ­sanej programom A. V prÃ­pade session sÃ©mantiky a bez zdieÄ¾anÃ½ch ukazovateÄ¾ov sÃºborov je nutnÃ© pouÅ¾iÅ¥ Ãºplne inÃ½ mechanizmus aby sa dosiahlo rovnakÃ© sprÃ¡vanie tohto jednoduchÃ©ho shellovskÃ©ho prÃ­kazu. Ãplne odliÅ¡nÃ½m prÃ­stupom ku sÃ©mantike zdieÄ¾ania sÃºborov v distribuovanÃ½ch systÃ©moch je pouÅ¾Ã­vanie takzvanÃ½ch immutable sÃºborov. Pri tomto prÃ­stupe je umoÅ¾nenÃ© vytvoriÅ¥ novÃ½ sÃºbor a vloÅ¾iÅ¥ ho do adresÃ¡ra pod rovnakÃ½m menom ako meno pÃ´vodnÃ©ho sÃºboru, priÄom sa predchÃ¡dzajÃºca verzia sÃºboru stÃ¡va (pod tÃ½mto menom) nedostupnou. Takto je sÃ­ce nemoÅ¾nÃ© modifikovaÅ¥ sÃºbor X, ostÃ¡va vÅ¡ak moÅ¾nosÅ¥ atomicky nahradiÅ¥ sÃºbor X novÃ½m sÃºborom. InÃ½mi slovami: aj keÄ sÃºbor nemÃ´Å¾e byÅ¥ modifikovanÃ½, adresÃ¡r modifikovanÃ½ byÅ¥ mÃ´Å¾e. RozhodnutÃ­m, Å¾e sÃºbory nemÃ´Å¾u byÅ¥ modifikovanÃ© sa eliminuje problÃ©m ako sa dohodnÃºÅ¥ s dvomi procesmi â jednÃ½m z nich, ktorÃ½ zapisuje do sÃºboru a inÃ½m, ktorÃ½ z neho ÄÃ­ta. ProblÃ©m, ktorÃ½ ostÃ¡va je rozhodnutie Äo sa stane v prÃ­pade, ak sa dva procesy snaÅ¾ia nahradiÅ¥ rovnakÃ½ sÃºbor v rovnakom Äase. Ako aj v prÃ­pade session sÃ©mantiky, aj tu sa zdÃ¡ najlepÅ¡Ã­m rieÅ¡enÃ­m nahradenie starÃ©ho sÃºboru najnovÅ¡Ã­m sÃºborom alebo nahradiÅ¥ sÃºbor âdruhÃ½mâ sÃºborom nedeterministicky. Trocha zloÅ¾itejÅ¡Ã­m problÃ©mom je, Äo robiÅ¥ v prÃ­pade, ak je sÃºbor nahradenÃ½ inÃ½m sÃºborom v Äase, keÄ z neho prÃ¡ve ÄÃ­ta nejakÃ½ proces. JednÃ½m z moÅ¾nÃ½ch rieÅ¡enÃ­ je nejakÃ½m spÃ´sobom zabezpeÄiÅ¥ pre ÄÃ­tajÃºceho pokraÄovanie ÄÃ­tania starej verzie sÃºboru, napriek tomu, Å¾e sa uÅ¾ nenachÃ¡dza v Å¾iadnom adresÃ¡ri. Podobne to rieÅ¡i systÃ©m UNIX v ktorom proces, ktorÃ½ otvoril sÃºbor mÃ´Å¾e bez problÃ©mov pokraÄovaÅ¥ v prÃ¡ci s nÃ­m napriek tomu, Å¾e mohol byÅ¥ medziÄasom vymazanÃ½. InÃ½m rieÅ¡enÃ­m je detekcia stavu zmeny sÃºboru a zabrÃ¡nenie jeho ÄalÅ¡ieho ÄÃ­tania tÃ½m, Å¾e operÃ¡cia Read vrÃ¡ti chybu."
76,117,0.609,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"RieÅ¡enie. PretoÅ¾e mÃ¡ platiÅ¥ ( ) ï³ 0 pre vÅ¡etky ïR, musÃ­ byÅ¥ ï³ 0. Zrejme prÃ­pad = 0 vylÃºÄime, veÄ identicky nulovÃ¡ funkcia nemÃ´Å¾e byÅ¥ pravdepodobnostnou funkciou. Preto nutne > 0. ÄalÅ¡ie ohraniÄenie pre zÃ­skame z podmienky, Å¾e sÃºÄet vÅ¡etkÃ½ch hodnÃ´t ( ) sa musÃ­ rovnaÅ¥ 1. PretoÅ¾e"
130,386,0.608,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"Å truktÃºra zaloÅ¾enÃ¡ na vÃ½sledkoch V organizÃ¡cii sÃº urÄenÃ© iba zÃ¡kladnÃ© ciele, ktorÃ© je potrebnÃ© dosiahnuÅ¥. Je urÄenÃ¡ Å¡truktÃºra vÃ½sledkov akÃ© majÃº jednotlivÃ© agenty dodÃ¡vaÅ¥, avÅ¡ak nie spÃ´sob ich dosiahnutia. KaÅ¾dÃ½ agent mÃ¡ vo svojej kompetencii spÃ´sob (teda aj svoje ÄiastkovÃ© ciele a Ãºlohy), akÃ½m dosiahne poÅ¾adovanÃ½ vÃ½sledok. TakÃ¡to Å¡truktÃºra je typickÃ¡ pre zabezpeÄovanie vÃ½sledkov kvantitatÃ­vnou metÃ³dou, tÃº istÃº Ãºlohu rieÅ¡i veÄ¾kÃ© mnoÅ¾stvo agentov a kvalita vÃ½sledku je spravidla ÃºmernÃ¡ poÄtu agentov, ktorÃ© sa na jej rieÅ¡enÃ­ podieÄ¾a. ÄalÅ¡ie pouÅ¾itie Å¡truktÃºry zaloÅ¾enej na vÃ½sledkoch je rieÅ¡enie veÄ¾kÃ©ho poÄtu Ãºloh s rovnakou Å¡truktÃºrou vÃ½sledku. V takomto prÃ­pade kaÅ¾dÃ½ agent dostÃ¡va inÃ© Ãºlohy a generuje vÃ½sledky s pevne danou Å¡truktÃºrou. PrÃ­kladom mÃ´Å¾e byÅ¥ predaj vÃ½robkov alebo sluÅ¾ieb, kedy mÃ¡ kaÅ¾dÃ½ agent za Ãºlohu predaÅ¥ Äo najviac vÃ½robkov. ÄinnosÅ¥ jednotlivÃ½ch predajcov je potom pomerne nezÃ¡vislÃ¡ a o spÃ´sobe maximalizÃ¡cie svojho predaja rozhoduje kaÅ¾dÃ½ agent individuÃ¡lne."
130,378,0.606,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"VeÄ¾mi dÃ´leÅ¾itÃ½m faktorom pri nÃ¡vrhu multiagentovÃ©ho systÃ©mu je rozhodnutie, akÃ© schopnosti pridelÃ­me jednotlivÃ½m agentom pre rieÅ¡enie ich Ãºloh a koÄ¾kÃ© agenty budÃº schopnÃ© vykonÃ¡vaÅ¥ konkrÃ©tnu Ãºlohu. Je dÃ´leÅ¾itÃ© zabezpeÄiÅ¥ aby agenty v systÃ©me mali spolu dostatoÄnÃ© schopnosti aby dokÃ¡zali plniÅ¥ svoje Ãºlohy, je vÅ¡ak na nÃ¡vrhÃ¡rovi, aby tieto schopnosti rozdelil medzi jednotlivÃ© agenty. SpÃ´sob rozdelenia schopnostÃ­ medzi agenty mÃ´Å¾eme opÃ­saÅ¥ dvoma parametrami: stupÅom Å¡pecializÃ¡cie a stupÅom redundancie."
190,94,0.605,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"OdliÅ¡nÃ½ spÃ´sob rozkladu je zameranÃ½ na rozvoj pracovnÃ­kov. Na zvlÃ¡dnutÃ­ takto rozloÅ¾enÃ©ho projektu mÃ¡ obrovskÃ½ vplyv skÃºsenosÅ¥ pracovnÃ­ka, ktorÃ½ tento strom rozloÅ¾enia vytvoril. VedÃºci musÃ­ dobre poznaÅ¥ svojich pracovnÃ­kov, musÃ­ poznaÅ¥, kto Äo vie a Äo dokÃ¡Å¾e. Ako rÃ½chlo sa dokÃ¡Å¾u konkrÃ©tni pracovnÃ­ci nauÄiÅ¥ nieÄo novÃ©, ako sa dokÃ¡Å¾u vyrovnaÅ¥ s tlakom a stresom, ako dokÃ¡Å¾u spolupracovaÅ¥, prÃ­padne uÄiÅ¥ sa od inÃ½ch. UÅ¾ maÅ¥ tieto vedomosti je veÄ¾kÃ© umenie. Älovek, ktorÃ½ mÃ¡ takÃ½to dobrÃ½ odhad a kontrolu nad pracovnÃ­kmi, je nenahraditeÄ¾nÃ½. MusÃ­ Äalej odhadnÃºÅ¥, koÄ¾ko si s pracovnÃ­kmi mÃ´Å¾e dovoliÅ¥ a koÄ¾ko Ãºstupkov mÃ´Å¾e spraviÅ¥ smerom k projektu. MusÃ­ oÄakÃ¡vaÅ¥ rizikÃ¡ spojenÃ© s neskÃºsenosÅ¥ou pracovnÃ­kov, vznikajÃºce konflikty v tÃ­moch. Po zvÃ¡Å¾enÃ­ vÅ¡etkÃ½ch moÅ¾nostÃ­ vznikÃ¡ rozklad kompletnÃ©ho SkÃºsenÃ½ pracovnÃ­k, projektu po najmenÅ¡ie detaily. PodÄ¾a mÅa je ÃºspeÅ¡ne fungujÃºci rozklad ktorÃ½ dokÃ¡Å¾e dobre hotovÃ½m umeleckÃ½m dielom. Predstava zharmonizovanÃ½ch paralelne rozloÅ¾iÅ¥ aj zloÅ¾itÃ½ vykonÃ¡vanÃ½ch Ãºloh vedÃºcich k cieÄ¾u projektu a zÃ¡roveÅ trÃ©ning pra- projekt, by mal byÅ¥ covnÃ­kov sa zdÃ¡ byÅ¥ priam nemoÅ¾nÃ¡. vyvÃ¡Å¾enÃ½ zlatom. PoÄme sa eÅ¡te ale pozrieÅ¥ hlbÅ¡ie do rozkladu Ãºloh. UÅ¾ aj vo vyÅ¡Å¡Ã­ch Ãºrovniach vznikÃ¡ zÃ¡vaÅ¾nÃ½ problÃ©m, ktorÃ½ by sa dal nazvaÅ¥ blokovanie prÃ¡c. Ak je vÃ½sledok jednej prÃ¡ce potrebnÃ½ na zaÄiatok druhej prÃ¡ce, treba, aby bola prvÃ¡ prÃ¡ca ukonÄenÃ¡ pred zaÄatÃ­m druhej. Tieto dve prÃ¡ce nemusÃ­ maÅ¥ pridelenÃ© jedinÃ½ pracovnÃ­k, a tak sa mÃ´Å¾e staÅ¥, Å¾e pracovnÃ­k, ktorÃ½ mÃ¡ vykonaÅ¥ druhÃº Ãºlohu stojÃ­ nad inÃ½m so zaloÅ¾enÃ½mi rukami. Je to zÃ¡vaÅ¾nÃ½ problÃ©m, obrovskÃ© mrhanie zdrojov a strata Äasu. SkÃºsenÃ½ vedÃºci pracovnÃ­k by podÄ¾a mÃ´jho nÃ¡zoru mal tento problÃ©m rieÅ¡iÅ¥ od zaÄiatku procesu rozkladu. Je to sÃ­ce hlavnÃ½ problÃ©m tÃ½kajÃºci sa procesu plÃ¡novania, ale vytvorenie Äo najmenÅ¡Ã­ch zÃ¡vislostÃ­ medzi Ãºlohami mÃ´Å¾e tento problÃ©m podstatne odÄ¾ahÄiÅ¥."
94,45,0.603,Sprievodca svetom vedeckÃ©ho publikovania,"1.4.11 VedeckÃ¡ komunikÃ¡cia v Äase internetu PrÃ­chod poÄÃ­taÄov a moÅ¾nosÅ¥ internetovÃ©ho pripojenia mnohÃ­ vÃ­tali ako spÃ¡su akademickÃ©ho publikovania. Priestor na policiach aj tÃ½ch najÅ¡tedrejÅ¡ie dotovanÃ½ch kniÅ¾nÃ­c mal svoje hranice a bolo Äoraz Å¥aÅ¾Å¡ie do nich vtesnaÅ¥ vÅ¡etky vÃ½sledky vÃ½skumu, ktorÃ© vedcov zaujÃ­mali. ElektronickÃ© publikovanie sa javilo ako praktickÃ© rieÅ¡enie problÃ©mu. V porovnanÃ­ s papierovou cestou malo aj vÃ½hodu rÃ½chlosti, eliminovali sa problÃ©my s tlaÄou a veÄ¾kÃ¡ ÄasÅ¥ poÅ¡tovÃ½ch nÃ¡kladov. ZaÄali vznikaÅ¥ prvÃ© vedeckÃ© listservy (sluÅ¾ba zasielania tematickÃ½ch emailov urÄenej skupine zÃ¡ujemcov), newslettery (elektronickÃ© informaÄnÃ© bulletiny) a vÃ½luÄne elektronickÃ© Äasopisy, napr. Flora Online (1987 â 1993, zasielala sa poÅ¡tou na disketÃ¡ch, archÃ­v je prÃ­stupnÃ½ na internete13), Äi Postmodern Culture (1990-). NiektorÃ­ akademici tuÅ¡ili potenciÃ¡l elektronickej formy, ale nepovaÅ¾ovali ju za rovnocennÃº tlaÄenÃ©mu ÄlÃ¡nku. Mali obavy z jej nestÃ¡losti, nespoÄ¾ahlivosti, pominuteÄ¾nosti a nedostatku ochrany autorskÃ½ch prÃ¡v. PraktickÃ© vÃ½hody elektronickej vedeckej komunikÃ¡cie vÅ¡ak prevÃ¡Å¾ili. NajrÃ½chlejÅ¡ie sa ujala vo vednÃ½ch disciplÃ­nach, ktorÃ© mali k poÄÃ­taÄom principiÃ¡lne blÃ­zko a zÃ¡roveÅ sa rÃ½chlo rozvÃ­jali, takÅ¾e Å¥aÅ¾kopÃ¡dne recenznÃ© konanie v nich predstavovalo naliehavejÅ¡Ã­ problÃ©m ako v inÃ½ch (napr. humanitnÃ½ch) odboroch s pomalÅ¡Ã­m tempom. V roku 1991 zaloÅ¾il fyzik Paul Ginsparg z Los Alamos National Laboratory repozitÃ¡r arXiv14, ÃºloÅ¾isko elektronickÃ½ch preprintovÃ½ch verziÃ­ vedeckÃ½ch ÄlÃ¡nkov z oblasti fyziky (neskÃ´r aj matematiky, astronÃ³mie, informatiky a kvantitatÃ­vnej biolÃ³gie) vo formÃ¡te TeX. Tento formÃ¡t si vÄaka Ãºspornosti a vynikajÃºcej matematickej sadzbe zÃ­skal obÄ¾ubu medzi vÅ¡etkÃ½mi vedcami, ktorÃ­ potrebovali pri pÃ­sanÃ­ publikÃ¡ciÃ­ pouÅ¾Ã­vaÅ¥ vzorce. ArXiv sa stal Å¡tandardom vo svojej oblasti a poslÃºÅ¾il ako prÃ­klad pre ÄalÅ¡ie vednÃ© disciplÃ­ny. Tam, kde vizionÃ¡ri videli ÃºÅ¾asnÃ© novÃ© moÅ¾nosti, komerÄnÃ­ vydavatelia vytuÅ¡ili ohrozenie zdroja prÃ­jmov. Preto znaÄnÃº ÄasÅ¥ z financiÃ­, ktorÃ© zÃ­skali za predplatnÃ© od univerzÃ­t, investovali do âochrany obsahuâ (teda jeho spoplatnenia a zneprÃ­stupnenia pre tÃ½ch, ktorÃ­ nezaplatili). Kontrast moÅ¾nostÃ­ elektronickÃ©ho sveta oproti bariÃ©ram komerÄnÃ©ho publikovania provokoval vedcov uÅ¾ v prvÃ½ch rokoch rozvoja svetovej siete. V roku 1994 kognitÃ­vny vedec Stevan Harnad predloÅ¾il vedeckej verejnosti na internete âpodvratnÃ½"
195,203,0.601,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"11.5 Zhrnutie VykonÃ¡vanie systematickÃ½ch zmien je ÄastokrÃ¡t mÃ¡lo zaujÃ­mavÃ¡ ÄinnosÅ¥ a nÃ¡chylnÃ¡ na chyby. Ako rieÅ¡enie tejto problematiky sme uviedli zavedenie systÃ©mov pre odporÃºÄanie transformÃ¡ciÃ­ zdrojovÃ©ho kÃ³du. TransformÃ¡cia sa identifikuje z interakciÃ­ programÃ¡tora alebo vykonanÃ½ch zmien medzi verziami zdrojovÃ©ho kÃ³du ako prevod z pÃ´vodnej verzie na novÃº verziu. TÃºto transformÃ¡ciu je moÅ¾nÃ© zovÅ¡eobecniÅ¥, ako sme uviedli na prÃ­klade systÃ©mu Sydit, a nÃ¡sledne aplikovaÅ¥ aj v inÃ½ch podobnÃ½ch miestach zdrojovÃ©ho kÃ³du. OdporÃºÄanÃ­m v tomto prÃ­pade bol vzor transformÃ¡cie a miesta, kde ju moÅ¾no aplikovaÅ¥. Na odporÃºÄacie systÃ©my v tejto oblasti sa preto mÃ´Å¾eme pozeraÅ¥ z viacerÃ½ch pohÄ¾adov po vykonanÃ­ prvej zmeny, ktorÃ¡ by mala byÅ¥ transformÃ¡ciou: - odporÃºÄanie miest v zdrojovom kÃ³de, ktorÃ© by mal programÃ¡tor transformovaÅ¥, - odporÃºÄanie vzoru transformÃ¡cie z vykonanej zmeny, - odporÃºÄanie pouÅ¾itia transformÃ¡cie na zvolenom mieste. ExistujÃºce rieÅ¡enia tejto problematiky vÅ¡ak narÃ¡Å¾ajÃº na viacerÃ© problÃ©my. NajvÃ¡Å¾nejÅ¡Ã­m sÃº granularita a kontext zmeny. UvedenÃ½ prÃ­klad transformÃ¡cie systÃ©mom Sydit je moÅ¾nÃ© vykonaÅ¥ len v rÃ¡mci metÃ³dy v zdrojovom kÃ³de. SystematickÃ© zmeny sa vÅ¡ak ÄastokrÃ¡t vykonÃ¡vajÃº aj na vyÅ¡Å¡ej Ãºrovni, napr. hierarchia tried, alebo naprieÄ viacerÃ½mi metÃ³dami sÃºÄasne. ProblÃ©mom odlÃ­Å¡enia kontextu zmeny je prÃ­klad upravenia cyklu for, kedy by sa nesprÃ¡vne odporÃºÄali vÅ¡etky podobnÃ© cykly v zdrojovom kÃ³de. Z tohto vyplÃ½va aj problÃ©m presnosti odporÃºÄania, keÄ mÃ´Å¾eme programÃ¡tora zahltiÅ¥ odporÃºÄaniami."
265,443,0.598,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Ak v diagrame chceme naznaÄiÅ¥, Å¾e objekt vykonÃ¡va nejakÃº ÄinnosÅ¥ (aktivitu), zakreslÃ­me to zvislÃ½m obdÄºÅ¾nikom prekrÃ½vajÃºcim Äiaru Å¾ivota danÃ©ho objektu. VertikÃ¡lnym rozmerom a umiestnenÃ­m pritom naznaÄÃ­me, odkedy a dokedy v rÃ¡mci scenÃ¡ra aktivita pretrvÃ¡va. SekvenÄnÃ½ diagram poznÃ¡ viacero typov interakciÃ­. Medzi najbeÅ¾nejÅ¡ie patria synchrÃ³nne volanie (plnÃ¡ orientovanÃ¡ Äiara zakonÄenÃ¡ trojuholnÃ­kovou vyplnenou Å¡Ã­pkou), asynchrÃ³nne volanie (plnÃ¡ orientovanÃ¡ Äiara zakonÄenÃ¡ obyÄajnou Å¡Ã­pkou) a nÃ¡vratovÃ½ signÃ¡l (preruÅ¡ovanÃ¡ orientovanÃ¡ Äiara zakonÄenÃ¡ obyÄajnou Å¡Ã­pkou). Niekedy sa vyuÅ¾Ã­vajÃº aj signÃ¡ly create a destroy (kreslenÃ© rovnako ako nÃ¡vratovÃ½ signÃ¡l), ktorÃ½mi moÅ¾no ukÃ¡zaÅ¥ presnÃ½ moment zaÄiatku, resp. konca existencie objektu. S vyÅ¡Å¡ie uvedenou notÃ¡ciou by mal sekvenÄnÃ½ diagram vÅ¾dy jednoznaÄnÃ½ priebeh. Diagram vÅ¡ak umoÅ¾Åuje aj nelineÃ¡rnosÅ¥ prostrednÃ­ctvom tzv. blokov. Blok je obdÄºÅ¾nikovÃ¡ oblasÅ¥ v diagrame, ktorou oznaÄÃ­me nejakÃº jeho ÄasÅ¥. Blok je vÅ¾dy v Ä¾avom hornom rohu oznaÄenÃ½ svojim typom, ktorÃ½ urÄuje, Äo presne blok znamenÃ¡. NaprÃ­klad blok alt umoÅ¾Åuje definovaÅ¥ alternatÃ­vne priebehy scenÃ¡ra po vyhodnotenÃ­ podmienky, blok loop zasa definuje opakujÃºcu sa sekvenciu."
190,419,0.597,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Iba jedna Å¡estina softvÃ©rovÃ½ch projektov sa konÄÃ­ ÃºspeÅ¡ne, teda sa pri splnenej funkcionalite zmestÃ­ do svojho pridelenÃ©ho Äasu a prostriedkov [1]. Äo je vÅ¡ak dÃ´vodom takejto nelichotivej miery neÃºspechu? VÃ½voj softvÃ©ru je pohybom v Å¥aÅ¾ko predvÃ­dateÄ¾nom prostredÃ­. PlÃ¡novanie projektu samo o sebe nezaruÄÃ­ Ãºspech. PlÃ¡n je takpovediac nutnou podmienkou Ãºspechu, pretoÅ¾e poskytuje zÃ¡kladnÃ½ kurz a oporu pre vÃ½vojÃ¡rov. Bez efektÃ­vneho vedenia vÅ¡ak nemÃ¡ Å¡ancu na Ãºspech, pretoÅ¾e ho bude treba zmeniÅ¥ hneÄ v prÃ­pade prvej situÃ¡cie, s ktorou sa nepoÄÃ­talo. Aj pri dobrom plÃ¡ne je manaÅ¾ment poÄas vykonÃ¡vania projektu kritickÃ½. Vznik nepredvÃ­danej situÃ¡cie mÃ´Å¾e maÅ¥ fatÃ¡lne nÃ¡sledky a zÃ¡leÅ¾Ã­ od okamÅ¾itÃ½ch rozhodnutÃ­. PrÃ¡ve tu sÃº ÄastÃ© zlyhania manaÅ¾Ã©rov. VznikajÃº stresovÃ© situÃ¡cie, je Ä¾udskÃ© podliehaÅ¥ panike, ktorÃ¡ plodÃ­ rozhodnutia Äasto eÅ¡te zhorÅ¡ujÃºce stav [3]. DÃ´leÅ¾itÃ½m faktorom je tieÅ¾, ako zavÄasu bol problÃ©m v rÃ¡mci projektu rozpoznanÃ½. VÄasne rozpoznanÃ© problÃ©my mÃ¡vajÃº spravidla menÅ¡Ã­ dopad, pokiaÄ¾ sa rieÅ¡ia eÅ¡te v zÃ¡rodku. ÃspeÅ¡nÃ© sa vyrovnanie sa s neoÄakÃ¡vanÃ½m problÃ©mom si vyÅ¾aduje jeho vÄasnÃº identifikÃ¡ciu a podniknutie sprÃ¡vnych krokov na jeho odstrÃ¡nenie. PrvÃ½ moment zÃ¡leÅ¾Ã­ od kvality monitorovania priebehu projektu, druhÃ½ od metodiky rieÅ¡enia krÃ­z softvÃ©rovej spoloÄnosti (ak existuje). Nedostatky v obidvoch fÃ¡zach majÃº za nÃ¡sledok neÃºspechy. SÃºÄasnÃ© trendy indikujÃº, Å¾e v tejto oblasti sÃº naozaj rezervy. Je nejakÃ¡ moÅ¾nosÅ¥ PlÃ¡n je nutnou podmienkou posunÃºÅ¥ tÃºto problematiku Äalej? Domnievam sa, Å¾e Ã¡no."
43,277,0.595,Objektovo orientovanÃ© programovanie v C++,"V kapitole 1 sme si hovorili, Å¾e polymorï¬zmus alebo mnohotvÃ¡rnosÅ¥ je princÃ­p, ktorÃ½ nÃ¡m umoÅ¾Åuje nazvaÅ¥ jednÃ½m menom viacero rovnako zameranÃ½ch funkciÃ­ â ako vyplÃ½va zo samotnÃ©ho nÃ¡zvu, jedna funkcia mÃ´Å¾e maÅ¥ viacero âtvÃ¡rÃ­â alebo podÃ´b. JednotlivÃ© varianty funkcie vykonÃ¡vajÃº principiÃ¡lne rovnakÃº ÄinnosÅ¥, majÃº vÅ¡ak rÃ´zny kÃ³d. KvÃ´li jednoznaÄnej odlÃ­Å¡iteÄ¾nosti, ktorÃº si podrobnejÅ¡ie rozoberieme neskÃ´r, platÃ­ pravidlo, Å¾e varianty jednej funkcie sa musia lÃ­Å¡iÅ¥ v parametroch â Äi uÅ¾ ide o ich typ alebo poÄet. Inak vÅ¡ak, Äo sa tÃ½ka rozdielov medzi jednotlivÃ½mi variantmi, nie sÃº danÃ© nijakÃ© podmienky. OdliÅ¡nosti mÃ´Å¾u byÅ¥ nepatrnÃ©, naprÃ­klad mÃ´Å¾e Ã­sÅ¥ len o typ jednÃ©ho parametra, inokedy vÅ¡ak mÃ´Å¾e byÅ¥ odliÅ¡nÃ½ aj celÃ½ obsah funkcie. Ãlohou polymorï¬zmu je sprehÄ¾adniÅ¥ kÃ³d, obmedziÅ¥ mnoÅ¾stvo rÃ´znych pomenovanÃ­ v prÃ­pade charakterovo prÃ­buznÃ½ch funkciÃ­ a zabezpeÄiÅ¥ Äo najvÃ¤ÄÅ¡iu ï¬exibilitu a Ä¾ahkÃº rozÅ¡Ã­riteÄ¾nosÅ¥ programu. Polymorï¬zmus je logickÃ¡ zÃ¡leÅ¾itosÅ¥ a jedinÃ©, Äo kompilÃ¡tor dokÃ¡Å¾e skontrolovaÅ¥, je jednoznaÄnÃ¡ odlÃ­Å¡iteÄ¾nosÅ¥ jednotlivÃ½ch variantov. VÅ¡etko ostatnÃ© zÃ¡visÃ­ vÃ½hradne od programÃ¡tora. Ak by sa vÅ¡etky funkcie v programe, resp. vÅ¡etky metÃ³dy v rÃ¡mci jednej triedy (okrem konÅ¡truktora) lÃ­Å¡ili v poÄte alebo type parametrov, kompilÃ¡tor pokojne dovolÃ­ programÃ¡torovi prideliÅ¥ vÅ¡etkÃ½m rovnakÃ© nÃ¡zvy. To by samozrejme nebolo najÅ¡ikovnejÅ¡ie usporiadanie programu. Rovnako by sa mali volaÅ¥ skutoÄne len funkcie s rovnakÃ½m alebo podobnÃ½m ÃºÄelom a mieru podobnosti musÃ­ zvÃ¡Å¾iÅ¥ tvorca programu vo fÃ¡ze jeho analÃ½zy alebo dizajnu. Polymorï¬zmus sa tÃ½ka vÅ¡etkÃ½ch funkciÃ­ v programe, vrÃ¡tane konÅ¡truktorov tried, jedinou vÃ½nimkou sÃº deÅ¡truktory, ktorÃ© nemajÃº nijakÃ© parametre, a preto nie je moÅ¾nosÅ¥ navrhnÃºÅ¥ dva deÅ¡truktory, ktorÃ© by sa lÃ­Å¡ili v poÄte alebo type parametrov. Treba eÅ¡te poznamenaÅ¥, Å¾e polymorï¬zmus nie je vÃ½hradne Ärtou objektovo orientovanÃ©ho programovania a v C++ ho mÃ´Å¾e pokojne vyuÅ¾Ã­vaÅ¥ aj procedurÃ¡lny program. NajvÃ¤ÄÅ¡ie uplatnenie polymorï¬zmu je vÅ¡ak v objektovo orientovanom programovanÃ­, keÄÅ¾e v Åom je otÃ¡zka dobrÃ©ho usporiadania a prehÄ¾adnosti programu kÄ¾ÃºÄovÃ¡. Nakoniec eÅ¡te zopakujme, Å¾e vytvorenie viacerÃ½ch variantov jednej funkcie sa nazÃ½va aj preÅ¥aÅ¾enie funkcie alebo overloading."
59,203,0.591,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3.9 ZÃ¡ver Metafora univerzÃ¡lneho darwinizmu rozÅ¡iruje princÃ­py darwinizmu ako univerzÃ¡lneho prÃ­stupu k Å¡tÃºdiu evolÃºcie nielen v biolÃ³gii, ale aj v inÃ½ch vednÃ½ch oblastiach (chÃ©mia, sociÃ¡lne vedy, informatika, umelÃ¡ inteligencia, kognitÃ­vna veda,...). V informatike univerzÃ¡lny darwinizmus poskytuje jedineÄnÃº moÅ¾nosÅ¥ simulÃ¡ciÃ­ darwinovskej evolÃºcie prostriedkami âin silicoâ (t. j. poÄÃ­taÄom), mÃ´Å¾eme konÅ¡tatovaÅ¥ tieto vÅ¡eobecnÃ© zÃ¡very: ï· EvoluÄnÃ© algoritmy tvoria robustnÃ½ optimalizaÄnÃ½ prostriedok pre rÃ´zne kombinatoriÃ¡lne Ãºlohy (napr. z teÃ³rie grafov, operaÄnÃ©ho vÃ½skumu, inÅ¾inierskej praxe nÃ¡vrhu zloÅ¾itÃ½ch zaradenÃ­, a pod.). ï· EvoluÄnÃ© multiagentovÃ© systÃ©my umoÅ¾ÅujÃº poÄÃ­taÄovÃ© simulÃ¡cie sociÃ¡lnych systÃ©mov, emergenciu kooperÃ¡cie a komunikÃ¡cie vypracovaÅ¥ evoluÄnÃ© zÃ¡klady memetiky ako Å¡peciÃ¡lneho prÃ­padu multiagentovÃ½ch systÃ©mov, Å¡tudovaÅ¥ etnickÃ© konflikty v multiagentovÃ½ch systÃ©moch, a pod. ï· UniverzÃ¡lny darwinizmus umoÅ¾Åuje informatike aktÃ­vne interagovaÅ¥ so sociÃ¡lnymi a behaviorÃ¡lnymi vedami. Z ilustraÄnÃ½ch vÃ½poÄtov molekulovej Darwinovej evolÃºcie vyplÃ½vajÃº tieto dÃ´leÅ¾itÃ© vÅ¡eobecnÃ© zÃ¡very pre univerzÃ¡lny darwinizmus: 1. Eigenova teÃ³ria replikÃ¡torov tvorÃ­ dobrÃ½ fenomenologickÃ½ zÃ¡klad molekulovej darwinovej evolÃºcie. Priebehy koncentraÄnÃ½ch profilov zÃ­skanÃ½ch rieÅ¡enÃ­m diferenciÃ¡lnych rovnÃ­c popisujÃºcich dynamiku chemostatu replikÃ¡torov, ktorÃ© boli zÃ­skanÃ© vhodnÃ½m vÃ½berom rÃ½chlostnÃ½ch konÅ¡tÃ¡nt, poskytujÃº priebehy koncentrÃ¡ciÃ­, ktorÃ© sÃº veÄ¾mi podobnÃ© experimentÃ¡lne pozorovanÃ½m [47] (pozri Obr. 3.14). 2. DarwinovskÃ¡ evolÃºcia prebieha ako MonodovskÃ¡ [42] vzÃ¡jomnÃ¡ hra medzi nÃ¡hodou a nutnosÅ¥ou, medzi deterministickÃ½m a stochastickÃ½m charakterom, ktorÃ© sÃº jej integrÃ¡lna sÃºÄasÅ¥. EvolÃºcia obsahuje Äasti, ktorÃ© sÃº plne deterministickÃ© â plne predpovedateÄ¾nÃ© (napr. zobrazenie genotypu na fenotyp), a taktieÅ¾ aj stochastickÃ© Äasti, ktorÃ© nemÃ´Å¾u byÅ¥ dobre predpovedateÄ¾nÃ©, mÃ´Å¾e hovoriÅ¥ len o ich Å¡tatistickÃ½ch charakteristikÃ¡ch (napr. mutÃ¡cie). V tejto sÃºvislosti sa obÄas pouÅ¾Ã­va terminolÃ³gia zavedenÃ¡ americkÃ½m informatikom a zakladateÄ¾om umelÃ©ho Å¾ivota Christopherom Langtonom âna hrane chaosuâ (angl. on the edge of chaos). PouÅ¾Ã­va sa termÃ­n âevolÃºcia prebieha na hrane chaosuâ, ktorÃ½ sa interpretuje takto: HlavnÃ¡ hnacia sila inovÃ¡ciÃ­ v evolÃºcii sÃº mutÃ¡cie, preto by sme sa mohli domnievaÅ¥, Å¾e ÄÃ­m ÄastejÅ¡Ã­ je vÃ½skyt mutÃ¡ciÃ­ pri reprodukÄnom procese, tÃ½m vÃ¤ÄÅ¡ia je pravdepodobnosÅ¥ vÃ½skytu inovÃ¡cie. AvÅ¡ak, ak miera mutÃ¡ciÃ­ prekroÄÃ­ urÄitÃº kritickÃº hodnotu, efektÃ­vnosÅ¥ evolÃºcie sa zniÄÃ­ a stÃ¡va sa z nej nieÄo Äo mÃ´Å¾eme nazvaÅ¥ âslepÃ© hÄ¾adanieâ, bez vplyvu stratÃ©gie prirodzenÃ©ho vÃ½beru, ktorÃ½ je schopnÃ½ efektÃ­vne selektovaÅ¥ pozitÃ­vne mutÃ¡cie. V opaÄnom prÃ­pade, ak miera vÃ½skytu mutÃ¡ciÃ­ je veÄ¾mi malÃ¡, evolÃºcia sa v podstate zastavÃ­ a zamrzne v aktuÃ¡lnom stave. Preto mÃ´Å¾eme povedaÅ¥, Å¾e frekvencia vÃ½skytu mutÃ¡ciÃ­ musÃ­ byÅ¥ dostatoÄne veÄ¾kÃ¡, ale zase nie veÄ¾mi, aby sa evolÃºcia nerozpadla, hovorÃ­me, Å¾e musÃ­ byÅ¥ na hrane chaosu. 3. Koncepcia Sewalla Wrighta [51] povrchu funkcie fitnes mÃ´Å¾e byÅ¥ povaÅ¾ovanÃ¡ ako jeden z najvÃ¤ÄÅ¡Ã­ch Ãºspechov Darwinovej evoluÄnej teÃ³rie a taktieÅ¾ aj ako jeden zo zdrojov jej univerzÃ¡lneho charakteru. TÃ¡to koncepcia mÃ¡ veÄ¾kÃ½ heuristickÃ½ vÃ½znam v tom, Å¾e Darwinova evolÃºcia mÃ´Å¾e byÅ¥ interpretovanÃ¡ ako Å¡peciÃ¡lny druh evoluÄnÃ©ho algoritmu [15,25,37], ktorÃ½ je schopnÃ½ rieÅ¡iÅ¥ extrÃ©mne komplikovanÃ© kombinatoriÃ¡lne optimalizaÄnÃ© problÃ©my. V prvej sekcii bol formulovanÃ½ Wrightov nÃ¡zor na evolÃºciu ako na optimalizaÄnÃ½ proces na povrchu funkcie fitnes (pozri Obr. 3.2). V tejto sÃºvislosti Wright poznamenal, Å¾e jeden z hlavnÃ½ch cieÄ¾ov teÃ³rie evolÃºcie je popÃ­saÅ¥ mechanizmy, ktorÃ© umoÅ¾ÅujÃº evolÃºcii nÃ¡jsÅ¥ âspojitÃ© cestyâ z jednÃ©ho vrcholu do druhÃ©ho vrcholu na povrchu fitnes funkcie nato, aby evolÃºcia bola"
59,578,0.588,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"12 Riadenie zloÅ¾itÃ½ch systÃ©mov a ich modely 12.1 ÃvodnÃ© poznÃ¡mky ProblÃ©m riadenia zloÅ¾itÃ½ch systÃ©mov (napr. banky, systÃ©mu zÃ¡sobovania veÄ¾komesta, vysokej pece na vÃ½robu Å¾eleza, ...), ktorÃ½ch modely dobre nepoznÃ¡me (ak poznÃ¡me, tak len vo veÄ¾mi nedokonalej forme), sÃº tradiÄnÃ½ problÃ©m umelej inteligencie a kognitÃ­vnej vedy. MetÃ³dy modernej umelej inteligencie sÃº schopnÃ© poskytnÃºÅ¥ novÃ½ pohÄ¾ad na tento Å¡tandardnÃ½ problÃ©m informatiky, poskytujÃº nielen jeho novÃº interpretÃ¡ciu, ale umoÅ¾ÅujÃº aj jeho implementÃ¡ciu pomocou neurÃ³novÃ½ch sietÃ­. Podobne, ako v predchÃ¡dzajÃºcich Äastiach naÅ¡ej prednÃ¡Å¡ky, z dÃ´vodov neutrality naÅ¡ich Ãºvah budeme pouÅ¾Ã­vaÅ¥ termÃ­n âagentâ na oznaÄenie inteligentnÃ©ho jedinca s kognitÃ­vnym orgÃ¡nom (mozgom), ktorÃ©ho cieÄ¾om je riadiÅ¥ zloÅ¾itÃ½ systÃ©m. KognitÃ­vny orgÃ¡n agenta (informatickÃ½ termÃ­n pre Ä¾udskÃ½ mozog) je schopnÃ½ vykonÃ¡vaÅ¥ zloÅ¾itÃ© kognitÃ­vne aktivity, akÃ½mi sÃº uÄenie, plÃ¡novanie, vyhodnocovanie, rieÅ¡enie problÃ©mov, vnÃ­manie okolia, a pod. Tieto schopnosti kognitÃ­vneho orgÃ¡nu sa vyuÅ¾Ã­vajÃº pri tvorbe vnÃºtornÃ½ch modelov riadenÃ©ho systÃ©mu, ktorÃ© tvoria ÃºstrednÃº zloÅ¾ku vyuÅ¾Ã­vanÃº pri riadenÃ­ zloÅ¾itÃ½ch systÃ©mov. V tejto prednÃ¡Å¡ke budeme Å¡tudovaÅ¥ model distanÄnÃ©ho uÄenia (angl. distal learning), ktorÃ½ bol navrhnutÃ½ poÄiatkom 90. rokov americkÃ½mi informatikmi a kognitÃ­vnymi vedcami, Michaleom Jordanom a Davidom Rumelhartom [2], ktorÃ­ sa zaslÃºÅ¾ili o rozvoj modernÃ½ch konekcionistickÃ½ch metÃ³d a ich aplikÃ¡cie v umelej inteligencii a kognitÃ­vnej vede. DistanÄnÃ© uÄenie slÃºÅ¾i ako urÄitÃ¡ alternatÃ­va k uÄeniu s odmenou a trestom (pozri prednÃ¡Å¡ku 5), poskytuje rieÅ¡enia, ktorÃ© sÃº pre psycholÃ³gov uÄenia akceptovateÄ¾nejÅ¡ie ako vÃ½sledky poskytovanÃ© uÄenÃ­m s odmenou a trestom a taktieÅ¾ mÃ´Å¾u slÃºÅ¾iÅ¥ ako priamy nÃ¡vod na implementÃ¡ciu systÃ©mov riadenia zloÅ¾itÃ½ch systÃ©mov. stav systÃ©mu stav systÃ©mu"
130,154,0.586,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"NÃ¡vrhovÃ½ vzor PrenositeÄ¾, v angliÄtine znÃ¡my ako Transfer Object, rieÅ¡i situÃ¡ciu, kedy je potrebnÃ© ÄastÃ© ÄÃ­tanie (rovnakÃ½ch) Ãºdajov bez potreby opakovanÃ©ho volania vzdialenÃ½ch metÃ³d. Vzor umoÅ¾Åuje prenos sÃºvisiacich Ãºdajov vo forme jedinÃ©ho objektu (s odkazmi na hodnoty jednotlivÃ½ch atribÃºtov) ako vÃ½sledku volania jedinej metÃ³dy."
76,37,0.583,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.12 (Rozmiestnenie k rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok do n prieÄinkov bez zÃ¡kazu) Skratkou âbez zÃ¡kazuâ budeme oznaÄovaÅ¥ prÃ­pad, keÄ prieÄinok mÃ´Å¾e obsahovaÅ¥ viac obÃ¡lok, hoci aj vÅ¡etky. KoÄ¾ko je v takomto prÃ­pade rÃ´znych rozmiestnenÃ­? Najprv si ujasnime, kedy ide o dve rÃ´zne rozmiestnenia. Prirodzene vtedy, ak existuje aspoÅ jeden prieÄinok, ktorÃ©ho obsah je inÃ½ v prvom a inÃ½ pri druhom rozmiestnenÃ­. To vÅ¡ak znamenÃ¡, Å¾e existuje obÃ¡lka (obÃ¡lka napr. s ÄÃ­slom ), ktorÃ¡ pri prvom rozmiestnenÃ­ putovala do prieÄinku a v druhom rozmiestnenÃ­ do prieÄinku (samozrejme, â  ). PrvÃ¡ obÃ¡lka mÃ´Å¾e byÅ¥ umiestnenÃ¡ do Ä¾ubovoÄ¾nÃ©ho prieÄinku â to je moÅ¾nostÃ­. DruhÃ¡ obÃ¡lka opÃ¤Å¥ do Ä¾ubovoÄ¾nÃ©ho prieÄinku (ide teraz o prÃ­pad bez zÃ¡kazu), takÅ¾e poÄet umiestnenÃ­ dvoch rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok sa rovnÃ¡ . PokraÄujÃºc v Ãºvahe, dostÃ¡vame nakoniec, Å¾e poÄet rozmiestnenÃ­ bez zÃ¡kazu rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok do prieÄinkov sa rovnÃ¡ . Ako by sme realizovali nÃ¡hodnÃ© rozmiestnenie tohoto typu? To sme opÃ­sali v odstavci 1.2.11 â rozmiestÅovanie mÃ´Å¾e byÅ¥ realizovanÃ© prostrednÃ­ctvom nÃ¡hodnÃ©ho vÃ½beru lÃ­stka zo Å¡katule. Len treba upresniÅ¥, Å¾e teraz by iÅ¡lo o usporiadanÃ½ vÃ½ber s vrÃ¡tenÃ­m. Je dobrÃ© maÅ¥ na mysli jedno â jednoznaÄnÃº koreÅ¡podenciu (t. j. bijekciu) medzi usporiadanÃ½mi vÃ½bermi s vrÃ¡tenÃ­m a rozmiestneniami rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok bez zÃ¡kazu. TÃ¡ koreÅ¡podencia (bijekcia) je definovanÃ¡ postupom, mechanizmom rozmiestÅovania, opÃ­sanom v 1.2.11. 1.2.13 (Rozmiestnenie k rozlÃ­Å¡iteÄ¾nÃ½ch obÃ¡lok do n prieÄinkov so zÃ¡kazom) Teraz prieÄinok nesmie obsahovaÅ¥ viac ako jednu obÃ¡lku (teda jednu, alebo Å¾iadnu). MusÃ­ platiÅ¥ , lebo inak sa rozmiestnenie nedÃ¡ realizovaÅ¥. KoÄ¾ko je teraz moÅ¾nÃ½ch rozmiestnenÃ­? PrvÃ¡ obÃ¡lka mÃ´Å¾e putovaÅ¥ do Ä¾ubovoÄ¾nÃ©ho prieÄinku, druhÃ¡ uÅ¾ len do Ä¾ubovoÄ¾nÃ©ho z â 1 prieÄinkov, tretia uÅ¾ len do Ä¾ubovoÄ¾nÃ©ho z â 2 prieÄinkov atÄ. Zrejme poÄet vÅ¡etkÃ½ch rozmiestnenÃ­ sa rovnÃ¡ V( ). RealizovaÅ¥ nÃ¡hodnÃ© rozmiestnenie tohoto typu mÃ´Å¾eme pomocou mechanizmu z 1.2.11, ale teraz by iÅ¡lo o vÃ½bery bez vrÃ¡tenia (aby iÅ¡lo o rozmiestÅovanie so zÃ¡kazom). 1.2.14 PrÃ­klad. (NarodeninovÃ½ paradox) Predstavme si, Å¾e v triede je 30 Å¾iakov a nie sÃº v nej dvojiÄky. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e sÃº medzi Å¾iakmi takÃ­ dvaja, ktorÃ­ majÃº narodeniny v ten istÃ½ deÅ? RieÅ¡enie. Predstavme si 365 prieÄinkov (Äo prieÄinok, to jeden deÅ v roku). Pani NÃ¡hoda pred rokmi nÃ¡hodne rozmiestnila 30 rozlÃ­Å¡iteÄ¾nÃ½ch loptiÄiek do tÃ½ch 365 prieÄinkov. OtÃ¡zka je, akÃ¡ je pravdepodobnosÅ¥ toho, Å¾e existuje prieÄinok, ktorÃ½ obsahuje viac ako jednu loptiÄku. JednoduchÅ¡ie je vÅ¡ak najprv nÃ¡jsÅ¥ pravdepodobnosÅ¥ toho, Å¾e takÃ½ prieÄinok neexistuje. UvÃ¡Å¾me, Å¾e mnoÅ¾ina vÅ¡etkÃ½ch moÅ¾nÃ½ch rozmiestnenÃ­ loptiÄiek do prieÄinkov mÃ¡ prvkov. To preto, lebo prvÃ¡ loptiÄka mohla skonÄiÅ¥ v Ä¾ubovoÄ¾nom prieÄinku, druhÃ¡ tieÅ¾ v hociktorom z 365 prieÄinkov atÄ. a to je 365ï365ï365ï ... ï365 = . KoÄ¾ko z tÃ½chto rozmiestnenÃ­ je takÃ½ch, Å¾e Å¾iaden prieÄinok neobsahuje dve a viac loptiÄiek? TakÃ½ch je 365ï364ï363ï ... ï(365 â 29) = 365ï364ï363ï ... ï336 = V(365, 30) To preto, Å¾e kÃ½m prvÃ¡ loptiÄka mohla skonÄiÅ¥ v Ä¾ubovoÄ¾nom prieÄinku, druhÃ¡ mala len 364 moÅ¾nostÃ­, tretia len 363 atÄ. Preto pravdepodobnosÅ¥ toho, Å¾e Å¾iaden prieÄinok neobsahuje viac ako jednu loptiÄku sa rovnÃ¡"
40,87,0.581,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"zpÅ¯sob, kterÃ½m ÄlovÄk dokÃ¡Å¾e sdÄlit topenÃ­, jakou teplotu mÃ¡ ve svÃ©m okolÃ­ udrÅ¾ovat. TopenÃ­ se tak stÃ¡vÃ¡ âchytrÃ½mâ, je schopnÃ© autonomnÄ reagovat na zmÄny teploty ve svÃ©m okolÃ­ a podle potÅeby se samo zapnout nebo vypnout. NasadÃ­me-li si âagentÃ­â brÃ½le, mÅ¯Å¾eme takovÃ©to topenÃ­ s termostatem vnÃ­mat jako autonomnÃ­ho agenta, jehoÅ¾ svÄt je tvoÅen jedinou veliÄinou (teplotou okolÃ­). ÄlovÄk takovÃ©muto agentu Åekne, jakou teplotu mÃ¡ udrÅ¾ovat v domÄ, a agent jiÅ¾ sÃ¡m podnikÃ¡ potÅebnÃ© akce k dosaÅ¾enÃ­ tohoto cÃ­le. KdyÅ¾ vÅ¡ak brÃ½le sundÃ¡me, vidÃ­me mÃ­sto agenta kus Å¾eleza, co hÅeje. Lze jej nazvat inteligentnÃ­m? A o to se, zjednoduÅ¡enÄ ÅeÄeno, prÃ¡vÄ vedou spory. Do definice âbÃ½t inteligentnÃ­â nakonec Äasto spadnou Å¾ivÃ© organismy, roboti2 a mnoho programÅ¯ â napÅÃ­klad prohledÃ¡vaÄÅ¯ webu. Pojem lze ovÅ¡em nejen upÅesÅovat, ale takÃ© zjemÅovat a vytvÃ¡Ået vÅ¡elijakÃ© podskupiny, napÅ. softwarovÃ© agenty nebo inteligentnÃ­ softwarovÃ© agenty a pod. KonkrÃ©tnÄ ti pyÅ¡nÃ­cÃ­ se adjektivem âinteligentnÃ­â tvoÅÃ­ samostatnou, pomÄrnÄ rozsÃ¡hlou vÃ½zkumnou oblast (blÃ­Å¾e viz [58]). Pro nÃ¡Å¡ typ agentÅ¯ je klÃ­ÄovÃ© adjektivum âvirtuÃ¡lnÃ­â. OdrÃ¡Å¾Ã­ se v nÄm dvÄ vÄci: fakt, Å¾e majÃ­ virtuÃ¡lnÃ­ tÄlo, a fakt, Å¾e bydlÃ­ ve virtuÃ¡lnÃ­m svÄtÄ. NapÅÃ­klad svÄtem mnoha inteligentnÃ­ch softwarovÃ½ch agentÅ¯ je Internet a Å¾Ã¡dnÃ© tÄlo v naÅ¡em smyslu nemajÃ­. O vztahu virtuÃ¡lnÃ­ch agentÅ¯ k jinÃ½m agentÅ¯m se vÃ­ce pÃ­Å¡e v [10], [7]. V kontextu virtuÃ¡lnÃ­ch agentÅ¯ lze o autonomii ÅÃ­ci nÃ¡sledujÃ­cÃ­. PÅi nÃ¡vrhu a tvorbÄ virtuÃ¡lnÃ­ho agenta, aÅ¥ uÅ¾ mluvÃ­me o jeho vizuÃ¡lnÃ­ podobÄ nebo o jeho chovÃ¡nÃ­, je tÅeba mÃ­t na pamÄti, k jakÃ©mu ÃºÄelu ho konstruujeme. VÄtÅ¡inou nenÃ­ naÅ¡Ã­m cÃ­lem simulace reality ale napodobenÃ­ reality, vytvoÅenÃ­ virtuÃ¡lnÃ­ho svÄta, kterÃ½ zprostÅedkuje divÃ¡kovi iluzi, Å¾e se nachÃ¡zÃ­ ve funkÄnÃ­m a fungujÃ­cÃ­m svÄtÄ. Toho je zpravidla jednoduÅ¡Å¡Ã­ dosÃ¡hnout vhodnÃ½m zjednoduÅ¡enÃ­m problÃ©mu neÅ¾ jeho plnou simulacÃ­. VezmÄme si jako pÅÃ­klad hru, kde hrÃ¡Ä mÅ¯Å¾e chodit nebo jezdit po mÄstÄ, v zÃ¡sadÄ libovolnÃ½m zpÅ¯sobem (jako je napÅ. GTA nebo Mafie). Bylo by moÅ¾nÃ© simulovat automobilovÃ½ provoz v celÃ©m mÄstÄ, s tisÃ­ci nebo deseti tisÃ­ci agenty, kteÅÃ­ by mÄli svoje autonomnÃ­ cÃ­le a jejich interakcÃ­ pÅi dosahovÃ¡nÃ­ tÄchto cÃ­lÅ¯ by emergentnÄ vznikal automobilovÃ½ provoz. Nebo je moÅ¾nÃ© simulovat provoz jenom v okolÃ­ hrÃ¡Äe a celÃ½ ho bude ÅÃ­dit jeden âloutkÃ¡Åâ, pohybujÃ­cÃ­ jednotlivÃ½mi auty jako loutkami (a kterÃ½ bude mÃ­t nÄjakÃ¡ pravidla, jak mÃ¡ hustota provozu a typ aut zÃ¡viset na mÃ­stÄ a dennÃ­ dobÄ). DruhÃ½ zpÅ¯sob je zatÃ­m stÃ¡le mnohem schÅ¯dnÄjÅ¡Ã­ a pouÅ¾Ã­vanÄjÅ¡Ã­. K tomuto problÃ©mu se jeÅ¡tÄ vrÃ¡tÃ­me na konci kapitoly."
111,128,0.578,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"respondenti poÄas nÃ¡kupu vykonali, zistÃ­me, kde sa vyskytli problÃ©my a ako zlepÅ¡iÅ¥ nÃ¡kupnÃ½ koÅ¡Ã­k. NajlepÅ¡ie vÃ½sledky dosiahnete, keÄ sa respondenti s Ãºlohami stotoÅ¾nia a budÃº ich vykonÃ¡vaÅ¥ tak, ako by to robili v reÃ¡lnom Å¾ivote. Preto je dÃ´leÅ¾itÃ© vyberaÅ¥ Ãºlohy, ktorÃ© sÃº pre respondentov relevantnÃ© a zaujÃ­mavÃ©. NaprÃ­klad, ak testujete nÃ¡kup televÃ­zora, mali by ste osloviÅ¥ Ä¾udÃ­, ktorÃ­ majÃº zÃ¡ujem o elektroniku a zvyknÃº si ju kupovaÅ¥ online. Simulujte reÃ¡lnu situÃ¡ciu aby ste pomohli respondentom dosiahnuÅ¥ sprÃ¡vne myslenie pri vykonÃ¡vanÃ­ Ãºloh. Formulujte Ãºlohy tak, aby ste respondenta uviedli do problÃ©mu a podnietili v Åom potrebu hÄ¾adania rieÅ¡enia. Namiesto: âKÃºpte si televÃ­zor podÄ¾a vlastnÃ©ho vÃ½beru.â by ste Ãºlohu mohli formulovaÅ¥: âChystÃ¡te sa kÃºpiÅ¥ novÃ½ televÃ­zor. NÃ¡jdite si televÃ­zor, ktorÃ½ sa vÃ¡m pÃ¡Äi, a kÃºpte si ho.â ZatiaÄ¾ Äo prvÃ½ nÃ¡vrh vedie respondenta k tomu, aby nieÄo mechanicky naÅ¡iel, v druhom nÃ¡vrhu mu pomÃ¡hame pochopiÅ¥ problÃ©m, zamyslieÅ¥ sa nad nÃ­m viac ako len po povrchu a zvÃ¡Å¾iÅ¥, ako by k nemu sÃ¡m pristÃºpil. ÄalÅ¡Ã­m spÃ´sobom, ako pomÃ´cÅ¥ respondentom skutoÄne sa stotoÅ¾niÅ¥ s Ãºlohami, je ponechaÅ¥ im urÄitÃº voÄ¾nosÅ¥ pri definovanÃ­ ich cieÄ¾a a pokÃºsiÅ¥ sa osloviÅ¥ Ä¾udÃ­, ktorÃ­ sa vedia aktuÃ¡lne s cieÄ¾om (situÃ¡ciou) stotoÅ¾niÅ¥. Namiesto toho, aby ste Ãºlohu dali vÅ¡eobecne respondentom z vaÅ¡ej cieÄ¾ovej skupiny: âKÃºpte si najlacnejÅ¡Ã­ televÃ­zor z ponuky.â, pokÃºste sa zÃ­skaÅ¥ respondentov cielenejÅ¡ie. Oslovte takÃ½ch, ktorÃ­ majÃº prÃ¡ve zÃ¡ujem o kÃºpu novÃ©ho televÃ­zora, a poÅ¾iadajte ich: âNÃ¡jdite si televÃ­zor, ktorÃ½ sa vÃ¡m pÃ¡Äi, a kÃºpte si ho.â. Pri pÃ­sanÃ­ Ãºloh je vÅ¾dy lepÅ¡ie poÅ¾iadaÅ¥ respondentov, aby nieÄo urobili, neÅ¾ sa ich pÃ½taÅ¥, ako by to urobili. NaprÃ­klad otÃ¡zka: âAko by ste postupovali pri kÃºpe televÃ­zora, ktorÃ½ sa vÃ¡m pÃ¡Äi?â je zlÃ¡ Ãºloha. OveÄ¾a lepÅ¡ou moÅ¾nosÅ¥ou by bolo napÃ­saÅ¥: âNÃ¡jdite televÃ­zor, ktorÃ½ sa vÃ¡m pÃ¡Äi, a kÃºpte si ho.â To, Äo chceme skÃºmaÅ¥, sÃº akcie respondenta. To, Äo respondenti hovoria a to, Äo robia, mÃ´Å¾e byÅ¥ Ãºplne odliÅ¡nÃ©. To, Äo respondenti v skutoÄnosti robia, je pre odhalenie problÃ©mov s UX oveÄ¾a spoÄ¾ahlivejÅ¡ie. Tvrdenia respondentov treba vyhodnocovaÅ¥ dÃ´sledne a s rozvahou [14], mÃ´Å¾u byÅ¥ zafarbenÃ©, doplnenÃ© o fantÃ¡ziu, napr. âmne by sa pÃ¡Äilo, keby tam bola tÃ¡ka funkcia, ktorÃ¡ by. . . â. Å½e by sa niekomu nieÄo pÃ¡Äilo, eÅ¡te neznamenÃ¡, Å¾e mÃ¡te Ã­sÅ¥ hneÄ meniÅ¥ vaÅ¡u aplikÃ¡ciu alebo to implementovaÅ¥. Treba nÃ¡zory vnÃ­maÅ¥, ale v Å¡irÅ¡om kontexte aj ÄalÅ¡Ã­ch podpornÃ½ch tvrdenÃ­ a"
195,159,0.577,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"9 OdporÃºÄacie systÃ©my orientovanÃ© na znovupouÅ¾itie kÃ³du PoÄas vÃ½voja softvÃ©ru bÃ½va snahou vÃ½vojÃ¡rov minimalizovaÅ¥ opakovanie pÃ­sania rovnakÃ©ho zdrojovÃ©ho kÃ³du. VÄaka analÃ½ze uÅ¾ predtÃ½m vytvorenÃ½ch artefaktov zdrojovÃ©ho kÃ³du nÃ¡m mÃ´Å¾e odporÃºÄacÃ­ systÃ©m navrhnÃºÅ¥ znovupouÅ¾itie celÃ½ch kniÅ¾nÃ­c, prÃ­padne iba jej niektorÃ½ch ÄastÃ­. S vyuÅ¾itÃ­m existujÃºcich ÄastÃ­ zdrojovÃ©ho kÃ³du je moÅ¾nÃ½ rÃ½chlejÅ¡Ã­ vÃ½voj softvÃ©ru. V tejto kapitole sÃº prezentovanÃ© princÃ­py a zÃ¡klady odporÃºÄacieho systÃ©mu orientovanÃ©ho na znovupouÅ¾itie kÃ³du. ZÃ¡roveÅ sa predstavÃ­ aj jeden z moÅ¾nÃ½ch architektonickÃ½ch nÃ¡vrhov pre vytvorenie odporÃºÄacieho systÃ©mu. UrÄite kaÅ¾dÃ½ vÃ½vojÃ¡r softvÃ©ru si pri svojej prÃ¡ci aspoÅ raz uvedomil, Å¾e aktuÃ¡lne vytvÃ¡ranÃº ÄasÅ¥ zdrojovÃ©ho kÃ³du uÅ¾ predtÃ½m niekde vytvoril, a preto ak by ju naÅ¡iel a opÃ¤Å¥ pouÅ¾il, tak by sa vyhol znÃ¡memu vÃ½roku âznova vynÃ¡jdeniu kolesaâ [1]. Aby vÃ½vojÃ¡ri vyhÄ¾adali uÅ¾itoÄnÃ© Äasti zdrojovÃ½ch kÃ³dov, musia preruÅ¡iÅ¥ aktuÃ¡lnu ÄinnosÅ¥ (teda vyvÃ­jaÅ¥) a investovaÅ¥ Ãºsilie a Äas do vyhÄ¾adÃ¡vania. VÃ½sledok ich hÄ¾adania nemusÃ­ byÅ¥ vÅ¾dy prÃ­nosnÃ½, niektorÃ© nÃ¡jdenÃ© Äasti nemusia vyhovujÃº podmienkam Äi potrebÃ¡m a pre pouÅ¾itie inÃ½ch je zas potrebnÃ© prispÃ´sobiÅ¥ zdrojovÃ½ kÃ³d. Dokonca je moÅ¾nÃ©, Å¾e niekedy sa vhodnÃ© Äasti ani nenÃ¡jdu. Ak chceme navrhnÃºÅ¥ efektÃ­vny systÃ©m umoÅ¾ÅujÃºci znovupouÅ¾itie existujÃºceho ÄastÃ­ kÃ³du, musÃ­me vyrieÅ¡iÅ¥ tri hlavnÃ© problÃ©my: - problÃ©m repozitÃ¡ra â kde nÃ¡jsÅ¥ dostatoÄnÃ© mnoÅ¾stvo znovupouÅ¾iteÄ¾nÃ©ho materiÃ¡lu, - problÃ©m reprezentÃ¡cie â ako uchovaÅ¥ a reprezentovaÅ¥ znovupouÅ¾iteÄ¾nÃ½ materiÃ¡l, - problÃ©m zÃ­skavania â ako formulovaÅ¥ a realizovaÅ¥ dopyty na repozitÃ¡r v jednoduchom a presnom spÃ´sobe."
130,118,0.576,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"PrÃ­buznÃ© vzory Interpret mÃ´Å¾e spolupracovaÅ¥ so vzormi ZloÅ¾enina, MuÅ¡ia vÃ¡ha, IterÃ¡tor a NÃ¡vÅ¡tevnÃ­k. AbstraktnÃ½ syntaktickÃ½ strom je inÅ¡tanciou vzoru ZloÅ¾enina, vzor MuÅ¡ia vÃ¡ha mÃ¡ uplatnenie pri zdieÄ¾anÃ­ koncovÃ½ch symbolov a vzor NÃ¡vÅ¡tevnÃ­k je moÅ¾nÃ© pouÅ¾iÅ¥ k udrÅ¾iavaniu sprÃ¡vania v kaÅ¾dom uzle abstraktnÃ©ho syntaktickÃ©ho stromu v jednej triede."
240,215,0.575,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"menej porovnanÃ­ (len 2) ale viac priradenÃ­. Priradenie je âlacnejÅ¡iaâ operÃ¡cia, v zmysle, Å¾e poÄÃ­taÄ zvyÄajne potrebujeme menej zdrojov na jej vykonanie, vyÅ¾aduje vÅ¡ak, istÃ½m spÃ´sobom, pomocnÃº pamÃ¤Å¥. VrÃ¡Å¥me sa eÅ¡te k predchÃ¡dzajÃºcemu rieÅ¡eniu s 4 porovnaniami a skÃºsme odstrÃ¡niÅ¥ prebytoÄnÃ© porovnania. V riadku 5 v podmienke (b <= a && b <= c) vykonÃ¡vame uÅ¾ opakovanÃ© porovnanie a a b. RozdeÄ¾me teda zloÅ¾enÃ© podmienky do jednoduchÃ½ch a pokÃºsme sa uÅ¾ raz zistenÃ½ vÃ½sledok porovnania vyuÅ¾iÅ¥, dostÃ¡vame tento kÃ³d:"
240,229,0.575,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"je moÅ¾nÃ½ pre nenulovÃ© b). Ak je b nulovÃ©, tak dostÃ¡vame rovnicu c = 0, ktorÃ¡ mÃ¡ pre koeficient c s hodnotou 0 nekoneÄne veÄ¾a rieÅ¡enÃ­ (x) a pre koeficient c â  0 nemÃ¡ rieÅ¡enie. Do vÃ½slednej funkcie preto doplnÃ­me nasledujÃºce prÃ­kazy:"
76,36,0.575,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.10 PrÃ­klad. V Å¡katuli mÃ¡me loptiÄky oÄÃ­slovanÃ© ÄÃ­slami 1 aÅ¾ 9. Realizujme nÃ¡hodnÃ½ vÃ½ber rozsahu 3 bez vrÃ¡tenia a za vÃ½sledok povaÅ¾ujme usporiadanÃº trojicu ÄÃ­sel. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e vÃ½sledok vÃ½beru vytvorÃ­ rastÃºcu postupnosÅ¥? RieÅ¡enie. PoÄet vÅ¡etkÃ½ch moÅ¾nÃ½ch usporiadanÃ½ch vÃ½berov bez vrÃ¡tenia sa rovnÃ¡ sÃºÄinu 9ï8ï7 = 504 (podÄ¾a 1.2.4). Nech A znamenÃ¡ udalosÅ¥, Å¾e vÃ½ber skonÄÃ­ rastÃºcou postupnosÅ¥ou troch ÄÃ­sel. Treba nÃ¡jsÅ¥ |A|. PretoÅ¾e ide o trojice rÃ´znych prvkov, vÅ¾dy Å¡iestim prÃ­padom odpovedÃ¡ jeden, priaznivÃ½ pre udalosÅ¥ A. Napr. trojiciam (1, 3, 4) (1, 4, 3) (3, 1, 4) (3, 4, 1) (4, 1, 3) (4, 3, 1) odpovedÃ¡ jedna rastÃºca trojica (1, 3, 4). KeÄÅ¾e poÄet vÅ¡etkÃ½ch usporiadanÃ½ch trojÃ­c sa rovnÃ¡ V(9, 3), poÄet rastÃºcich trojÃ­c sa rovnÃ¡ V(9, 3)/3! = C(9, 3). To znamenÃ¡, Å¾e |A|= C(9, 3) = 84. Pre P(A) mÃ¡me P(A) = 1.2.11 (NÃ¡hodnÃ© rozmiestnenia â mechanizmus) UvaÅ¾ujme o prieÄinkoch, oÄÃ­slovanÃ½ch od 1 po . Majme obÃ¡lok, ktorÃ© budeme nÃ¡hodne rozmiestÅovaÅ¥ do prieÄinkov. Äo znamenÃ¡ nÃ¡hodne? Predstavme si, Å¾e bokom umiestnime Å¡katuÄ¾u, ktorÃ¡ obsahuje lÃ­stkov s ÄÃ­slami 1 aÅ¾ . NÃ¡hodne Å¥ahÃ¡me prvÃ½ lÃ­stok zo Å¡katule a ÄÃ­slo na lÃ­stku bude znamenaÅ¥ ÄÃ­slo prieÄinku, do ktorÃ©ho dÃ¡me prvÃº obÃ¡lku. DruhÃ¡ obÃ¡lka bude putovaÅ¥ do prieÄinka s takÃ½m ÄÃ­slom, akÃ© bolo uvedenÃ© na druhom vytiahnutom lÃ­stku atÄ. Zrejme na umiestnenie obÃ¡lok bude potrebnÃ½ nÃ¡hodnÃ½ vÃ½ber rozsahu . Budeme diskutovaÅ¥ prÃ­pad, keÄ obÃ¡lky sÃº rozlÃ­Å¡iteÄ¾nÃ© (oznaÄenÃ©) a prÃ­pad, keÄ nie sÃº. ÄalÅ¡ou okolnosÅ¥ou bude, Äi prieÄinok mÃ´Å¾e obsahovaÅ¥ viac ako jednu obÃ¡lku, alebo nie. Rozoberme jednotlivÃ© prÃ­pady."
369,283,0.574,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.33. Vzor ÃverovÃ½ prÃ­pad â 1. ÄasÅ¥ ViacerÃ© z tried zodpovedajÃºcich hlavnÃ½m vÃ½stupom krokov ÃºverovÃ©ho procesu majÃº rovnakÃ© alebo podobnÃ© atribÃºty, ich hodnoty sa vÅ¡ak mÃ´Å¾u navzÃ¡jom lÃ­Å¡iÅ¥. NaprÃ­klad: ï· ÃrokovÃ¡ sadzba v indikatÃ­vnej ponuke je orientaÄnÃ¡ (urÄenÃ¡ intervalom), kÃ½m v nÃ¡vrhu je spresnenÃ¡ predajcom na zÃ¡klade finanÄnej analÃ½zy klienta. ÃrokovÃ¡ sadzba z nÃ¡vrhu mÃ´Å¾e byÅ¥ eÅ¡te zmenenÃ¡ v rozhodnutÃ­ o Ãºvere. (PoznÃ¡mka: pri hypo-"
393,540,0.574,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"V zÃ¡sade sa dÃ¡ povedaÅ¥, Å¾e sme rozdelili pohÄ¾ad na znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov na dve zÃ¡kladnÃ© skupiny, od ktorÃ½ch sa odvÃ­jajÃº rÃ´zne problÃ©my. KonkrÃ©tne ide o: Â znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov formou CASE nÃ¡strojov a Â znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov, resp. ich ÄastÃ­ pomocou samotnÃ©ho implementaÄnÃ©ho jazyka. Postupne sme identifikovali problÃ©my s viditeÄ¾nosÅ¥ou vzorov v celkovom nÃ¡vrhu, Äo je spojenÃ© s nÃ¡vrhom a implementÃ¡ciou prehÄ¾adnej a Å¡iroko pouÅ¾iteÄ¾nej notÃ¡cie a s pouÅ¾itÃ­m mikroarchitektÃºr, ktorÃ© sÃº eÅ¡te i dnes pomerne nejasne definovanÃ© vo vÅ¡eobecnosti a tieÅ¾ chÃ½ba definÃ­cia, Äi uÅ¾ formÃ¡lna alebo semiformÃ¡lna, skupÃ­n spolupracujÃºcich vzorov vo forme definÃ­ciÃ­ mikroarchitektÃºr. ZaujÃ­mavÃ© sa zdÃ¡ vytvorenie katalÃ³gu mikroarchitektÃºr ako skupÃ­n spolupracujÃºcich vzorov, priÄom Å¡truktÃºra katalÃ³gu by mohla byÅ¥ podobnÃ¡ Å¡truktÃºre sÃºÄasnÃ½ch katalÃ³gov nÃ¡vrhovÃ½ch vzorov."
240,530,0.574,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"ZostÃ¡va nÃ¡m napÃ­saÅ¥ funkciu nacitaj_zapas() pre spracovanie jednÃ©ho zÃ¡pasu zo sÃºboru. Funkcia bude sÃºbor naÄÃ­tavaÅ¥ podÄ¾a Å¡pecifikÃ¡cie formÃ¡tu v zadanÃ­ Ãºlohy. NajskÃ´r naÄÃ­tame a spracujeme menÃ¡ hrÃ¡Äov, pre kaÅ¾dÃ©ho nÃ¡jdeme podÄ¾a jeho mena index v poli hrÃ¡Äov h[]. Ak sa tam eÅ¡te nenachÃ¡dza, tak sa ho pokÃºsime pridaÅ¥. Pred pridanÃ­m musÃ­me eÅ¡te skontrolovaÅ¥, Äi pole h[] mÃ¡ dostatoÄnÃº kapacitu. Ak nie, tak pole zvÃ¤ÄÅ¡Ã­me na dvojnÃ¡sobnÃº veÄ¾kosÅ¥. TÃ½mto zdvojenÃ­m moÅ¾no vyhradÃ­me viac pamÃ¤te ako bude skutoÄne potrebnÃ© (napr. vyhradÃ­me aÅ¾ 128 prvkov, ale hrÃ¡Äov bude nakoniec len 65). MnoÅ¾stvo pouÅ¾itej pamÃ¤te bude vÅ¡ak k celkovÃ©mu poÄtu hrÃ¡Äov najviac dvojnÃ¡sobnÃ©, Äo je vzhÄ¾adom na oÄakÃ¡vanÃ© poÄty zanedbateÄ¾nÃ½ nedostatok. Naopak, ak by sme pole zvÃ¤ÄÅ¡ovali vÅ¾dy po jednom (o jednÃ©ho novÃ©ho hrÃ¡Äa), tak by neÃºmerne (nÃ¡sobne) narÃ¡stla ÄasovÃ¡ nÃ¡roÄnosÅ¥ naÄÃ­tavania. UrÄenie indexu hrÃ¡Äa v poli h[] podÄ¾a jeho mena implementujeme pomocnou funkciou index_hraca() takto:"
76,240,0.572,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"PretoÅ¾e variancia je strednÃ¡ hodnota kvadratickej odchÃ½lky, var( ) = E[( ) ], je jasnÃ©, Å¾e vlastnosti operÃ¡tora E sa prejavia na vlastnostiach variancie. PrÃ¡ve sme pouÅ¾ili oznaÄenie E[( ) ] namiesto presnÃ©ho E[( ( )) ] â toto zjednoduÅ¡enie, keÄ namiesto E( ) pÃ­Å¡eme E , budeme pouÅ¾Ã­vaÅ¥, v snahe zÄ¾ahÄiÅ¥ ÄitateÄ¾nosÅ¥ niektorÃ½ch vÃ½razov. 4.2.5 Veta (Vlastnosti variancie) Nech , sÃº nÃ¡hodnÃ© veliÄiny na tom istom pravdepodobnostnom priestore a existujÃº var( ), var( ). Potom platÃ­: 1. var( ) ï³ 0, pre kaÅ¾dÃº nÃ¡hodnÃº veliÄinu . 2. var("
59,718,0.571,KognitÃ­vna veda v kontexte informatickÃ½ch vied,ProblÃ©my ProblÃ©m 15.1. AkÃ© sÃº predstavy francÃºzskeho filozofa a matematika P. R. Laplaceho o racionalite? ProblÃ©m 15.2. Kto ako prvÃ½ formuloval predstavy o ohraniÄenej racionalite? ProblÃ©m 15.3. Äo je rÃ¡mcovanie v Kahnemanovej a Tverskeho behaviorÃ¡lnej ekonomiky?
59,714,0.569,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 15.3. (A) Priebeh nÃ¡vÅ¡tevnosti baru El Farol pre jednotlivÃ© epochy. Algoritmus bol iniciovanÃ½ tak, Å¾e kaÅ¾dÃ½ agent mal stratÃ©giu (11111111), t. j. za kaÅ¾dÃ½ch podmienok vo Å¡tvrtok navÅ¡tÃ­vil bar. Proces uÄenia sa stratÃ©giÃ­ umoÅ¾nil vznik novÃ½m stratÃ©giÃ¡m, ktorÃ© uÅ¾ poskytovali priemernÃº nÃ¡vÅ¡tevnosÅ¥ okolo 60 hostÃ­ (Äo je optimÃ¡lny vÃ½sledok). (B) Frakcie pouÅ¾Ã­vania jednotlivÃ½ch histÃ³riÃ­ v stratÃ©giÃ¡ch celej populÃ¡cie. Z grafu vyplÃ½va, Å¾e sa ustÃ¡lil ârovnovÃ¡Å¾nyâ stav, kde kaÅ¾dÃ¡ histÃ³ria (UUU, ..., CCC) sa vyuÅ¾Ã­va pribliÅ¾nÃ© na 60 %. (C) ZnÃ¡zornenie priebehov frekvencie nÃ¡vÅ¡tev jednotlivÃ½ch agentov. PriemernÃ¡ nÃ¡vÅ¡tevnosÅ¥ je pribliÅ¾ne 60 %, avÅ¡ak existujÃº agenti, ktorÃ­ na zÃ¡klade svojej stratÃ©gie navÅ¡tevujÃº bar ÄastejÅ¡ie (zriedkavejÅ¡ie). (D) ZnÃ¡zornenie priebehu nÃ¡vÅ¡tevnosti baru, ak sa nÃ¡vÅ¡tevnÃ­ci rozhodujÃº tak, Å¾e si vygenerujÃº nÃ¡hodnÃ© ÄÃ­slo 0 ï£ rand ï£ 1 , ak toto ÄÃ­slo spÄºÅa (nespÄºÅa) podmienku rand ï£ 0.6 , tak bar navÅ¡tÃ­vi (nenavÅ¡tÃ­vi). VÃ½sledkom tohto jednoduchÃ©ho rozhodovacieho procesu je, Å¾e priemernÃ¡ nÃ¡vÅ¡tevnosÅ¥ rÃ½chlo konverguje k 60 %, avÅ¡ak na rozdiel od rozhodovania so stratÃ©giou (pozri diagramy A a B) sÃº v tomto prÃ­pade veÄ¾mi veÄ¾kÃ© fluktuÃ¡cie."
40,67,0.569,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"8 PokroÄilÃ¡ verzia uÄiaceho algoritmu TÃºto modifikÃ¡ciu uÄenia navrhli H. Jaeger a H. Haas [4] pre Echo State neurÃ³novÃº sieÅ¥ so spÃ¤tnou vÃ¤zbou (s vÃ¡hami smerujÃºcimi z vÃ½stupnÃ½ch neurÃ³nov spÃ¤Å¥ do dynamickÃ©ho rezervoÃ¡ra W back . Jej podstata spoÄÃ­va v znovu vyuÅ¾itÃ­ vÃ½stupnÃ©ho signÃ¡lu z dynamickÃ©ho rezervoÃ¡ra pre opÃ¤tovnÃ© preuÄenie siete. KeÄ natrÃ©novanÃ¡ sieÅ¥ v procese âÅ¾ivotaâ autonÃ³mne generuje vÃ½stupnÃ½ signÃ¡l, prijÃ­ma svoj vlastnÃ½ vÃ½stupnÃ½ signÃ¡l cez spÃ¤tnovÃ¤zobnÃ© vÃ¡hy. Tento signÃ¡l sa lÃ­Å¡i od pÃ´vodne pouÅ¾itÃ©ho v procese vzorkovania, Äo spÃ´sobÃ­, Å¾e stavy v dynamickom rezervoÃ¡ri budÃº odliÅ¡nÃ© ako v procese uÄenia. Ak by sa poÄas uÄenia siete privÃ¡dzal na vÃ½stupnÃ© neurÃ³ny signÃ¡l podobnÃ½ tomu, ktorÃ½ bude vystupovaÅ¥ z dynamickÃ©ho rezervoÃ¡ra v procese Å¾ivota siete, presnosÅ¥ modelu sa zvÃ½Å¡i. TÃºto myÅ¡lienku moÅ¾no zahrnÃºÅ¥ do procesu uÄenia siete v nasledujÃºcich etapÃ¡ch: 1. Echo State neurÃ³novÃº sieÅ¥ najprv nauÄÃ­me klasickou verziou uÄiaceho algoritmu, ÄÃ­m dostaneme predbeÅ¾nÃ© vÃ½stupnÃ© vÃ¡hy, ktorÃ© si oznaÄÃ­me ako 2. Z pÃ´vodnÃ½ch vzoriek pouÅ¾itÃ½ch na uÄenie siete a predbeÅ¾nÃ½ch vÃ½stupnÃ½ch vÃ¡h vygenerujeme novÃº sÃ©riu trÃ©novacÃ­ch vzoriek d â²(n) pre n > 1 , a to nasledovne: o poloÅ¾Ã­me d â²(1) = d (1) a odÅ¡tartujeme sieÅ¥ z nÃ¡hodnÃ©ho stavu x (1) . Na vÃ½stup siete privedieme d (1) a vypoÄÃ­tame x (2) a y (2) pomocou tÃ½chto vzÅ¥ahov: x (2) = tanh(Wx (1) + Wback d (1)) , 0  y ( 2) = tanh(Wout ( x (2))), a poloÅ¾Ã­me d â²(2) = y (2). o pre ÄalÅ¡ie vzorky d â²(3),..., d â²(n) pouÅ¾ijeme nasledovnÃ© zovÅ¡eobecnenÃ© vzorce:   x (n) = tanh(Wx (n â 1) + Wback d (n â 1)), 0  y (n) = tanh(Wout ( x (n))), a poloÅ¾Ã­me d â²(n) = y (n). 3. Tento proces opakujeme n-krÃ¡t, ÄÃ­m dostaneme novÃº sÃ©riu vzoriek, ktorÃ¡ predstavuje jednokrokovÃº predikciu z pÃ´vodne natrÃ©novanej siete."
265,244,0.569,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"KvÃ´li rastu nÃ¡kladov na integrÃ¡ciu sÃºÄiastok navzÃ¡jom. Je totiÅ¾ dÃ´vodnÃ© sa domnievaÅ¥, Å¾e ÄalÅ¡Ã­m rozbÃ­janÃ­m niektorÃ½ch celkov (sÃºÄiastok) nedosiahneme dostatoÄne voÄ¾ne zviazanÃ© sÃºÄiastky. PrÃ­liÅ¡ vysokÃ¡ zviazanosÅ¥ zaÄne spÃ´sobovaÅ¥ takÃ© problÃ©my, Å¾e sa ÄalÅ¡ie delenie neoplatÃ­."
240,375,0.567,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-3 (rieÅ¡enie) NiektorÃ© chÃ½bajÃºce miesta vieme doplniÅ¥ veÄ¾mi Ä¾ahko: premennÃº vysledok, ktorÃ¡ nie je vo funkcii eÅ¡te deklarovanÃ¡, doplnÃ­me v riadku 3. NÃ¡vratovÃ¡ hodnota funkcie zodpovedÃ¡ hodnote prvku poÄ¾a â typ int. VstupnÃ© pole a musÃ­ do funkcie prÃ­sÅ¥ ako vstupnÃ½ argument, preto do argumentov funkcie v riadku 1 doplnÃ­me int *a alebo a[]. Funkcia musÃ­ prejsÅ¥ kaÅ¾dÃ½ prvok poÄ¾a a, preto cyklus v riadku 4 mÃ¡ podmienku i < n."
135,192,0.566,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â dodrÅ¾a heuristiky nÃ¡vrhu a pravidlÃ¡ Å¡tÃ½lu. Na zÃ¡klade analÃ½zy topolÃ³gie systÃ©mu spolu s informÃ¡ciami o sÃºiastkach a konektoroch moÅ¾no odvodi vlastnosti celÃ©ho systÃ©mu ako aj identifikova mnohÃ© problÃ©my. Medzi takÃ©to vlastnosti a problÃ©my patria napr. vÃ½konnos, problÃ©m Ãºzkeho hrdla, otÃ¡zky paralelizmu, bezpenosti a pod."
190,106,0.566,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ako uÅ¾ bolo spomenutÃ©, myÅ¡lienkovÃ½ pochod âviac informÃ¡ciÃ­ = lepÅ¡ia informovanosÅ¥â uÅ¾ bol dÃ¡vno prekonanÃ½. Ako teda mÃ´Å¾eme pomÃ´cÅ¥ Älenom tÃ­mu, aby boli informovanÃ­ o dianÃ­ na pracovisku (angl. workspace awareness, [11]), a pritom ich nezahlcovaÅ¥ nepotrebnÃ½mi informÃ¡ciami? Najprv potrebujeme identifikovaÅ¥ jednotlivÃ© podskupiny Ä¾udÃ­ v softvÃ©rovom tÃ­me: manaÅ¾Ã©rov, nÃ¡vrhÃ¡rov, vÃ½vojÃ¡rov a testerov. KomunikÃ¡cia kaÅ¾dÃ½ s kaÅ¾dÃ½m by isto priniesla nemalÃ© problÃ©my a spÃ´sobila informaÄnÃ© zahltenie u mnohÃ½ch Älenov tÃ­mu. KomunikaÄnÃ© cesty zÃ¡visia Äasto od vÃ½vojovÃ©ho modelu, zloÅ¾enia tÃ­mu a ich umiestnenia v priestore [12]. ZjednoduÅ¡enÃ½ vÅ¡eobecnÃ½ model by mohol vyzeraÅ¥ podobne ako obrÃ¡zku 2. Najviac vyÅ¥aÅ¾enÃ½mi Älenmi tÃ­mu v tomto ohÄ¾ade sÃº manaÅ¾Ã©ri a vÃ½vojÃ¡ri. Z obrÃ¡zku nie je zrejmÃ©, Å¾e vÃ½vojÃ¡ri sÃ­ce komunikujÃº s nÃ¡vrhÃ¡rmi aj testermi, no zvyÄajne v odliÅ¡nÃ½ch fÃ¡zach vÃ½voja. NavyÅ¡e kaÅ¾dÃ¡ podskupina tÃ­mu pouÅ¾Ã­va na rieÅ¡enie problÃ©mov inÃº sadu nÃ¡strojov, ktorÃ© nie je vÅ¾dy moÅ¾nÃ© prepojiÅ¥."
76,123,0.565,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.2 SpojitÃ© nÃ¡hodnÃ© veliÄiny a ich rozdelenia Doteraz sme hovorili o nÃ¡hodnÃ½ch veliÄinÃ¡ch, ktorÃ½ch mnoÅ¾ina moÅ¾nÃ½ch hodnÃ´t bola koneÄnÃ¡, alebo ak nekoneÄnÃ¡, tak spoÄÃ­tateÄ¾nÃ¡. Ako vieme, takÃ© veliÄiny nazÃ½vame diskrÃ©tne. Na druhej strane sa Äasto stretÃ¡vame so situÃ¡ciami, keÄ nÃ¡hodnÃ½m je napr. Äas, ktorÃ½ trÃ¡vime ÄakanÃ­m na obsluhu (ÄakanÃ­m vo fronte, Äi uÅ¾ v supermarkete, v banke, alebo na poÅ¡te), resp. nÃ¡hodnÃ½m je Äas bezporuchovÃ©ho fungovania hociakÃ©ho vÃ½robku. V tÃ½chto prÃ­padoch ide o nÃ¡hodnÃ© veliÄiny, ktorÃ½ch potenciÃ¡lne hodnoty sÃº akÃ©koÄ¾vek body intervalu, Äi uÅ¾ ohraniÄenÃ©ho, alebo neohraniÄenÃ©ho (Äasto berieme interval â¨ ) len preto, Å¾e potom sa s modelom dobre pracuje). TakÃ©to nÃ¡hodnÃ© veliÄiny budeme nazÃ½vaÅ¥ spojitÃ© (presnÃ¡ definÃ­cia nasleduje). PripomeÅme znÃ¡my fakt â kaÅ¾dÃ½ interval kladnej dÄºÅ¾ky je nespoÄÃ­tateÄ¾nÃ¡ mnoÅ¾ina. NuÅ¾ a to je dÃ´vod, pre ktorÃ½ pravdepodobnostnÃ½ opis spojitej nÃ¡hodnej veliÄiny nie je moÅ¾nÃ© urobiÅ¥ pomocou pravdepodobnostÃ­ jednotlivÃ½ch vÃ½sledkov (tÃ½ch moÅ¾nÃ½ch vÃ½sledkov je totiÅ¾ nespoÄÃ­tateÄ¾ne veÄ¾a, voÄ¾ne povedanÃ©, prÃ­liÅ¡ veÄ¾a) a naviac â a to vyzerÃ¡ ako paradox â pre pravdepodobnosti jednotlivÃ½ch vÃ½sledkov platÃ­ P( = ) = 0, pre kaÅ¾dÃ© reÃ¡lne . 2.2.1 DefinÃ­cia. Nech (ï, S, P) je pravdepodobnostnÃ½ priestor a je zobrazenie z ï do R. Zobrazenie nazÃ½vame nÃ¡hodnÃ¡ veliÄina, ak pre vÅ¡etky ïR, < , mÃ¡ zmysel hovoriÅ¥ o P({ï·: ï£ (ï·) < }), to znamenÃ¡, Å¾e mnoÅ¾ina {ï·: ï£ (ï·) < } patrÃ­ do S."
265,199,0.565,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"v projekte zameranom na zefektÃ­vnenie miestneho Ãºradu, sleduje analytik pohyb a Äinnosti konkrÃ©tnych klientov Ãºradu po budove, skÃºma tlaÄivÃ¡ ktorÃ© na rÃ´zne oddelenia doruÄujÃº, priÄom potom robÃ­ to istÃ© aj s ÃºradnÃ­kmi (sleduje Äo robia, kedy to robia). â¢ Å tÃºdium dokumentov o problÃ©movej oblasti. Jednak mÃ´Å¾e Ã­sÅ¥ o dokumenty, ktorÃ© sa v problÃ©movej oblasti pouÅ¾Ã­vajÃº (naprÃ­klad konkrÃ©tne tlaÄivo alebo metodickÃ½ pokyn Äi nÃ¡vod) ale aj o dokumenty ktorÃ© hovoria o danej oblasti (tutoriÃ¡ly, prÃ­ruÄky, ...). â¢ Å tÃºdium existujÃºceho softvÃ©ru, fungujÃºceho v problÃ©movej oblasti."
94,49,0.564,Sprievodca svetom vedeckÃ©ho publikovania,"publikovania vÅ¡ak ohrozuje nÃ¡stup predÃ¡torskÃ½ch Äasopisov (podrobnejÅ¡ie v kapitole 3). ÄasÅ¥ vedeckej obce zastÃ¡va nÃ¡zor, Å¾e otvorenÃ© vedeckÃ© publikovanie by nemalo byÅ¥ ÄinnosÅ¥ou zameranou na zisk (Haspelmath 2013), inÃ­ oponujÃº, Å¾e vydavateÄ¾skÃº prax vrÃ¡tane vyberania publikaÄnÃ½ch poplatkov moÅ¾no realizovaÅ¥ so ziskom aj s reÅ¡pektom k akademickÃ½m hodnotÃ¡m (Rittman 2015). NÃ¡strahÃ¡m zlatÃ©ho otvorenÃ©ho prÃ­stupu sa vyhÃ½ba takzvanÃ½ platinovÃ½ otvorenÃ½ prÃ­stup, keÄ vydavateÄ¾ zÃ­skava finanÄnÃ© prostriedky rovno od sponzora, takÅ¾e ich nemusÃ­ vyberaÅ¥ ani od ÄitateÄ¾ov, ani od autorov. Pre vydavateÄ¾a je to vÅ¡ak prirodzene namÃ¡havejÅ¡ia a menej vÃ½nosnÃ¡ cesta, s vÃ½zvou ustrÃ¡Å¾iÅ¥ nezÃ¡vislosÅ¥ redakÄnÃ©ho procesu (ak by niektorÃ½ sponzor nadobudol presvedÄenie, Å¾e za svoje peniaze mÃ¡ prÃ¡vo zasahovaÅ¥ do obsahu). NastÃºpilo na Åu naprÃ­klad vydavateÄ¾stvo Open Library of Humanities, podporovanÃ© americkou nadÃ¡ciou A. W. Mellona, a viacerÃ© eurÃ³pske Äasopisy â nemeckÃ½ Beilstein Journal of Organic Chemistry, Beilstein Journal of Nanotechnology, alebo Å¡vajÄiarsky Swiss Medical Weekly. V DOAJ (Directory of Open Access Journals) sa nachÃ¡dza viac ako tristo medzinÃ¡rodnÃ½ch vedeckÃ½ch Äasopisov, ktorÃ© publikujÃº otvorenÃ½m prÃ­stupom bez toho, Å¾e by vyÅ¾adovali poplatky od autorov. StruÄnÃ© zhrnutie histÃ³rie vedeckÃ½ch Äasopisov v podobe Äasovej osi ponÃºka obrÃ¡zok 1.1. ObrÃ¡zok 1.2 ho dopÄºÅa Äasovou osou vÃ½voja technolÃ³giÃ­ a organizaÄnej infraÅ¡truktÃºry na podporu vedeckej komunikÃ¡cie. TerÄom kritiky zo strany akademickej obce nie je len oligopol veÄ¾kÃ½ch vydavateÄ¾ov, ale aj systÃ©m hodnotenia vedy, narÃ¡Å¾ajÃºci na limity citaÄnej analÃ½zy (podrobnejÅ¡ie v kapitole 11), a navyÅ¡e zÃ¡vislÃ½ od draho predplÃ¡canÃ½ch komerÄnÃ½ch databÃ¡z. Na tieto problÃ©my odpovedÃ¡ naprÃ­klad projekt Anne-Wil Harzingovej Publish or Perish17 (ÄerpajÃºci z databÃ¡zy Google Scholar) alebo trend vyuÅ¾Ã­vania alternatÃ­vnych metrÃ­k ÄÃ­tanosti a spoloÄenskÃ©ho vplyvu jednotlivÃ½ch ÄlÃ¡nkov, ktorÃ© majÃº pomÃ´cÅ¥ prelomiÅ¥ neÃºprosnÃ½ diktÃ¡t impakt faktora (Altmetriky, viac v kapitole 7). VeÄ¾kÃ© vydavateÄ¾skÃ© domy vÅ¡ak ani po roku 2012 nezahÃ¡Ä¾ajÃº. Mnoho americkÃ½ch univerzÃ­t uÅ¾ odmieta ochotne uzatvÃ¡raÅ¥ âBig Dealâ a vydavatelia si uvedomujÃº, Å¾e ak nechcÃº stratiÅ¥ dominanciu na trhu, musia drÅ¾aÅ¥ krok s najnovÅ¡Ã­m vÃ½vojom a kontrolovaÅ¥ Äo najviac aspektov toku vÃ½skumnej prÃ¡ce (workflow, napr. virtuÃ¡lne laboratÃ³rne knihy, protokoly, dÃ¡tovÃ½ manaÅ¾ment a pod.) (Schonfeld 2017). V roku 2013 Elsevier odkÃºpil akademickÃº sociÃ¡lnu sieÅ¥ Mendeley, v roku 2016 repozitÃ¡r spoloÄenskÃ½ch vied SSRN, v roku 2017 firmu Plum Analytics, poskytovateÄ¾a altmetrÃ­k a v roku 2018 spoloÄnosÅ¥ Aries, ktorÃ¡ poskytuje redakÄnÃ© systÃ©my Å¡irokej Å¡kÃ¡le vydavateÄ¾ov (Anderson 2018). Elsevier sa prestÃ¡va nazÃ½vaÅ¥ vydavateÄ¾om, preferuje oznaÄenie dÃ¡tovÃ¡ spoloÄnosÅ¥. NaÄalej sa vÅ¡ak orientuje na akademickÃº âekonomiku prestÃ­Å¾eâ â napr. novÃ© sluÅ¾by Elsevieru smerujÃº k manaÅ¾mentu dÃ¡t, monitorovaniu, hodnoteniu a prezentovaniu (showcasing) vÃ½sledkov vÃ½skumu pre potreby vÃ½skumnÃ½ch inÅ¡titÃºciÃ­ a grantovÃ½ch agentÃºr."
240,89,0.564,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"MoÅ¾no nie Ãºplne jasnÃ© je vyhodnotenie vÃ½razu 2**p v riadku 3, ktorÃ© bez medzier mÃ´Å¾e vyzeraÅ¥ trochu zmÃ¤toÄne: dereferenÄnÃ½ operÃ¡tor * (hviezdiÄka) mÃ¡ vyÅ¡Å¡iu precendenciu (prioritu pri vyhodnocovanÃ­ vo vÃ½razoch) ako operÃ¡tor nÃ¡sobenia * (hviezdiÄka), a teda najskÃ´r sa zo smernÃ­ku p urÄÃ­ hodnota na ktorÃº ukazuje (8) a aÅ¾ potom sa tÃ¡to hodnota vynÃ¡sobÃ­ 2. Do premennej a sa preto priradÃ­ 2*8+1 = 17. Ãloha 1-14 (rieÅ¡enie) PriebeÅ¾nÃ© Ãºpravy hodnÃ´t premennÃ½ch uvÃ¡dzame v komentÃ¡roch na konci riadkov:"
393,456,0.564,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"PredchÃ¡dzajÃºce Äasti sÃº zameranÃ© na objasnenie vÅ¡eobecnÃ½ch prÃ­stupov a metÃ³d pouÅ¾itia Äi uÅ¾ vzorov alebo konkrÃ©tne nÃ¡vrhovÃ½ch vzorov. V nasledujÃºcich Äastiach sa budeme zaoberaÅ¥ konkrÃ©tne moÅ¾nosÅ¥ami znovupouÅ¾itia ÄastÃ­ nÃ¡vrhovÃ½ch vzorov. Objektovo orientovanÃ© programovanie mÃ¡ ako jeden z cieÄ¾ov umoÅ¾niÅ¥ jednoduchÃ© a z hÄ¾adiska vÃ½voja efektÃ­vne znovupouÅ¾itie ÄastÃ­ systÃ©mov. K naplneniu tohto cieÄ¾a mÃ´Å¾eme v OO programovanÃ­ vyuÅ¾Ã­vaÅ¥ dedenie, polymorfizmus, asociÃ¡cie a ÄalÅ¡ie viac alebo menej elementÃ¡rne prostriedky. NÃ¡vrhovÃ© vzory, ktorÃ½mi sa tu zaoberÃ¡me, sa implicitne spÃ¡jajÃº s objektovo orientovanÃ½m programovanÃ­m, no ich znovupouÅ¾itie je neformÃ¡lne definovanÃ© iba na Ãºrovni postupov, myÅ¡lienok a konceptov rieÅ¡enÃ­."
59,131,0.564,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ZÃ¡ver vyplÃ½vajÃºci z Obr. 3.8 mÃ´Å¾eme zovÅ¡eobecniÅ¥ tak, Å¾e evoluÄnÃ½ vznik zloÅ¾itÃ½ch Å¾ivoÄÃ­Å¡nych orgÃ¡nov neprebiehal priamoÄiaro za vzniku hotovÃ©ho orgÃ¡nu poÅ¾adovanej zloÅ¾itosti, ale postupne vyuÅ¾Ã­val3 starÅ¡ie Å¡truktÃºry organizmu, ktorÃ© boli prispÃ´sobenÃ© na novÃ© potreby. TÃ½mto spÃ´sobom je zabezpeÄenÃ½ neustÃ¡ly selekÄnÃ½ tlak vedÃºci v koneÄnom dÃ´sledku na vznik komplexnÃ©ho orgÃ¡nu prostrednÃ­ctvom medzistupÅov, ktorÃ½ch vÃ½znam mÃ´Å¾e byÅ¥ veÄ¾mi vzdialenÃ½ vÃ½znamu koneÄnÃ©ho orgÃ¡nu (pozri obrÃ¡zok 3.8). NiekoÄ¾ko poznÃ¡mok k problÃ©mom reprodukcie a dediÄnosti, ktorÃ½ch vÃ½znamnou ÄasÅ¥ou je tzv. embryogenÃ©za, Äo je spÃ´sob vzniku a vÃ½voja novÃ½ch jedincov zo zÃ¡rodkov. Budeme rozliÅ¡ovaÅ¥ dva druhy embryogenÃ©zy: 1. EpigenetickÃ¡ embryogenÃ©za, kde novÃ½ organizmus vznikÃ¡ delenÃ­m jednej âzÃ¡rodoÄnejâ bunky, tento druh embryogenÃ©zy sa vyskytuje na naÅ¡ej planÃ©te pri reprodukcii biologickÃ½ch systÃ©mov. MÃ´Å¾e byÅ¥ zjednoduÅ¡ene chÃ¡panÃ¡ ako recept na prÃ­pravu kolÃ¡Äa, kde je uvedenÃ© nielen to, Äo kolÃ¡Ä obsahuje, ale aj jeho prÃ­prava. 2. PreformaÄnÃ¡ embryogenÃ©za, kde novÃ½ organizmus je reprezentovanÃ½ zÃ¡rodkom, ktorÃ½ obsahuje vÅ¡etky detaily dospelÃ©ho organizmu. Tento typ embryogenÃ©zy mÃ´Å¾eme formÃ¡lne prirovnaÅ¥ k plÃ¡nu budovy alebo stroja, kde sÃº podrobne uvedenÃ© vÅ¡etky detaily. Existencia tohto druhu embryogenÃ©zy je pre nÃ¡s"
43,49,0.564,Objektovo orientovanÃ© programovanie v C++,"2.2 Filozoï¬a jazyka C++ Stroustrup si pri tvorbe svojho novÃ©ho jazyka vytÃ½Äil niekoÄ¾ko cieÄ¾ov, ktorÃ½mi sa po celÃ½ Äas riadil. Dokonca hovorÃ­, Å¾e ako nadÅ¡enÃ½ fanÃºÅ¡ik ï¬lozoï¬e sa inÅ¡piroval nielen svojimi programÃ¡torskÃ½mi skÃºsenosÅ¥ami, ale v rovnakej miere aj dielami svojich obÄ¾ÃºbenÃ½ch ï¬lozofov. Jazyk, ktorÃ©ho predstava sa mu postupne formovala v hlave, nemal teda len rieÅ¡iÅ¥ konkrÃ©tne praktickÃ© problÃ©my, s ktorÃ½mi zÃ¡pasil, ale mal maÅ¥ aj akÃºsi svoju ï¬lozoï¬u prÃ­buznÃº jeho vlastnÃ½m ï¬lozoï¬ckÃ½m ideÃ¡lom. Jazyk C++ jednoznaÄne vÄaÄÃ­ za svoj Ãºspech a popularitu prÃ¡ve spÃ´sobu, akÃ½m pracuje a akÃ½m bol navrhnutÃ½, a jeho zÃ¡kladnÃ© princÃ­py z neho robia silnÃ½, efektÃ­vny a v podstate univerzÃ¡lny prostriedok pre tvorbu poÄÃ­taÄovÃ½ch programov. O nÃ¡vrhu a vÃ½voji C++ sa podrobne hovorÃ­ v Stroustrupovej knihe [6]. Tu uvÃ¡dzame niekoÄ¾ko najdÃ´leÅ¾itejÅ¡Ã­ch princÃ­pov, ktorÃ© urÄili charakter tohto programovacieho jazyka. â¢ C++ musÃ­ byÅ¥ univerzÃ¡lne pouÅ¾iteÄ¾nÃ½ jazyk, nie jazyk urÄenÃ½ pre nejakÃ½ konkrÃ©tny typ aplikÃ¡ciÃ­."
393,505,0.563,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Autori sa vzhÄ¾adom na prostriedky ponÃºkanÃ© jazykom Beta rozhodli pre zabezpeÄenie znovupouÅ¾itia ÄastÃ­ nÃ¡vrhovÃ½ch vzorov formou kniÅ¾nice vzorov LDP. KniÅ¾nica LDP sÃºstreÄuje znovupouÅ¾iteÄ¾nÃ© Äasti nÃ¡vrhovÃ½ch vzorov, ktorÃ© sÃº v aplikÃ¡cii ohÃ½banÃ© rÃ´znymi prostriedkami. ParametrizÃ¡cia vzorov je z veÄ¾kej miery zabezpeÄenÃ¡ virtuÃ¡lnymi neterminÃ¡lmi, virtuÃ¡lnymi triedami a ÄalÅ¡Ã­mi moÅ¾nosÅ¥ami jazyka Beta. Autori sa nevyhli pouÅ¾itiu viacnÃ¡sobnÃ©ho dedenia, ku ktorÃ©mu ale uviedli alternatÃ­vu vo forme pouÅ¾itia kompozÃ­cie. VhodnosÅ¥ vÃ½beru sprÃ¡vneho jazyka sa prejavÃ­ najmÃ¤ pri znovupouÅ¾Ã­vanÃ­ ÄastÃ­ nÃ¡vrhovÃ½ch vzorov. KniÅ¾nica LDP obsahuje niekoÄ¾ko nÃ¡vrhovÃ½ch vzorov podÄ¾a (Gamma et al., 1995) a poukazuje na moÅ¾nosÅ¥ vytvorenia takejto kniÅ¾nice. CieÄ¾ v podobe vytvorenia prostriedku pre znovupouÅ¾itie nÃ¡vrhovÃ½ch vzorov bol naplnenÃ½, no nÃ¡jsÅ¥ rieÅ¡enie vyuÅ¾Ã­vajÃºce tÃºto kniÅ¾nicu je Å¥aÅ¾kÃ©, ak vÃ´bec nejakÃ© existuje. PouÅ¾itie takejto kniÅ¾nice vzorov so sebou prinÃ¡Å¡a vÃ½hody i nevÃ½hody. Medzi vÃ½hody urÄite patrÃ­ moÅ¾nosÅ¥ znovupouÅ¾ia ÄastÃ­ vzorov, priÄom nie je potrebnÃ© zaoberaÅ¥ sa implementÃ¡ciou opakujÃºcich sa ÄastÃ­. ÄalÅ¡ou z vÃ½hod je moÅ¾nosÅ¥ vÃ½raznejÅ¡ej dokumentÃ¡cie a priradeniu tried k vzorom. JednoduchÃ½m spÃ´sobom mÃ´Å¾eme identifikovaÅ¥ participantov v inÅ¡tancii konkrÃ©tneho vzoru. DokumentÃ¡cia mÃ´Å¾e byÅ¥ generovanÃ¡ poloautomatickÃ½m spÃ´sobom. K nevÃ½hodÃ¡m patrÃ­ nemoÅ¾nosÅ¥ modifikovaÅ¥, resp. ohÃ½baÅ¥ vzor inÃ½m, ako v kniÅ¾nici definovanÃ½m (naznaÄenÃ½m a povolenÃ½m) spÃ´sobom. Vzor je uloÅ¾enÃ½ v kniÅ¾nici a sprÃ­stupnenÃ© sÃº len jeho Äasti, priÄom aj tie je moÅ¾nÃ© modifikovaÅ¥ iba spÃ´sobmi, ktorÃ© poskytuje konkrÃ©tny implementaÄnÃ½ jazyk. Gamma vo svojej monografii (Gamma et al., 1995) v prÃ­pade viacerÃ½ch vzorov opÃ­sal rÃ´zne spÃ´soby ohÃ½bania vzoru. IstÃ¡ moÅ¾nosÅ¥ ako sprÃ­stupniÅ¥ viacero smerov v ohÃ½banÃ­ vzoru je v umiestenÃ­ do kniÅ¾nice viacero kÃ³piÃ­ vzoru, priÄom v kaÅ¾dej kÃ³pii vzoru bude povolenÃ½ inÃ½ smer ohÃ½bania. Ale opÃ¤Å¥ sa tÃ½m zniÅ¾uje moÅ¾nosÅ¥ a voÄ¾nosÅ¥ vlastnej modifikÃ¡cie vzoru podÄ¾a potreby konkrÃ©tnej aplikÃ¡cie. Na druhej strane, ak identifikujeme zÃ¡kladnÃ© spÃ´soby ohÃ½bania vzoru, mÃ´Å¾eme vylÃºÄiÅ¥ chyby, ktorÃ© mÃ´Å¾u nastaÅ¥ nepovolenou a nesprÃ¡vnou modifikÃ¡ciou vzoru. ÄalÅ¡ou z nevÃ½hod mÃ´Å¾e byÅ¥ prÃ­padnÃ¡ nutnosÅ¥ pouÅ¾itia vÅ¡eobecnÃ©ho nÃ¡zvoslovia, ktorÃ© sÃ­ce vo viacerÃ½ch spÃ´soboch vyjadruje jasnÃº prÃ­sluÅ¡nosÅ¥ k tomu ktorÃ©mu vzoru, no na druhej strane v prÃ­pade konkrÃ©tnej domÃ©ny mÃ´Å¾e byÅ¥ prÃ­liÅ¡ vÅ¡eobecnÃ© a niekedy aÅ¾ mÃ¤tÃºce. Autorom sa podarilo preskÃºmaÅ¥ zÃ¡vislosti u vÅ¡etkÃ½ch 17 vzorov, ktorÃ© neoznaÄili za idiÃ³my s vÃ½nimkou Adapter, Proxy a Chain of responsibility. VÃ½sledky vyhodnotenia moÅ¾nostÃ­ uloÅ¾enia vzoru do kniÅ¾nice sÃº zobrazenÃ© v tabuÄ¾ke 9-6. HlavnÃ½m dÃ´vodom neuloÅ¾enia niektorÃ½ch vzorov do kniÅ¾nice LDP je veÄ¾kosÅ¥ vÅ¡eobecnej Äasti konkrÃ©tneho vzoru. TÃ¡to veÄ¾kosÅ¥ bola prÃ­liÅ¡ malÃ¡ a znovupouÅ¾itie by bolo zanedbateÄ¾ne malÃ©. Aj napriek vÃ½razne malÃ©mu znovupouÅ¾itiu, koncentrovanÃ­m niektorÃ½ch vzorov, resp. ich ÄastÃ­ do kniÅ¾nice by sa podporila viditeÄ¾nosÅ¥ v celkovom nÃ¡vrhu."
240,462,0.563,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"budÃº uvedenÃ© ako vÃ½stupnÃ© argumenty (aby sme do nich mohli zapisovaÅ¥) ale budeme ich pouÅ¾Ã­vaÅ¥ aj ako vstupnÃ© argumenty (budeme z nich hodnoty aj ÄÃ­taÅ¥). V prÃ­pade, Å¾e by ÄÃ­slo, ktorÃ© do poÄ¾a vkladÃ¡me, malo presiahnuÅ¥ dÄºÅ¾ku poÄ¾a (n+1 > kapacita), tak pole zvÃ¤ÄÅ¡Ã­me funkciou realloc(). V tomto rieÅ¡enÃ­ demonÅ¡trujeme zvÃ¤ÄÅ¡enie poÄ¾a o konÅ¡tantnÃ½ prÃ­rastok (o 10 prvkov) lebo predpokladÃ¡me, Å¾e funkcia sa bude v programe volaÅ¥ len sporadicky. Potom ako funkcia vloz() zaruÄÃ­, Å¾e pole mÃ¡ dostatoÄnÃº kapacitu na pridanie ÄalÅ¡ieho prvku je potrebnÃ© nÃ¡jsÅ¥ umiestnenie novÃ©ho prvku vzhÄ¾adom na usporiadanie prvkov v poli. Ak sprÃ¡vne miesto nÃ¡jdeme, je moÅ¾nÃ©, Å¾e prvky, ktorÃ© sa nachÃ¡dzajÃº za tÃ½mto miestom budeme musieÅ¥ posunÃºÅ¥ na nasledujÃºce miesto v poli, ÄÃ­m vytvorÃ­me miesto pre novÃ½ prvok, do ktorÃ©ho priradÃ­me novÃº hodnotu. PosÃºvanie prvkov o jedno miesto Äalej mÃ´Å¾eme realizovaÅ¥ v cykle sÃºÄasne s hÄ¾adanÃ­m sprÃ¡vneho miesta pre pridÃ¡vanÃ½ prvok tak, Å¾e prvky poÄ¾a budeme prechÃ¡dzaÅ¥ (i) od konca (poslednÃ©ho prvku) smerom na zaÄiatok (prvÃ½ prvok): ak hodnota i-teho prvku je menÅ¡ia ako pridÃ¡vanÃ¡ hodnota (cislo), tak vieme Å¾e potom ako i-tÃ½ prvok presunieme na i+1 miesto (a[i+1] = a[i]), tak na uvoÄ¾nenÃ© i-te miesto vloÅ¾Ã­me hodnotu cislo, inak pokraÄujeme Äalej pre prvok i-1 (ktorÃ½ presunieme na i-te miesto atÄ). VÃ½slednÃ¡ implementÃ¡cia funkcie vloz() podÄ¾a uvedenÃ©ho opisu:"
59,248,0.562,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"epocha ObrÃ¡zok 4.13. Priebeh priemernÃ©ho fitnes pre dve rÃ´zne verzie GA s a bez memetickej informÃ¡ciou, keÄ uÄenie (Baldwinov efekt) je zahrnutÃ½ v oboch verziÃ¡ch, priÄom parameter strmosti uÄenia je ï¸ï = 0.5. VidÃ­me, Å¾e GA s uÄenÃ­m a s memetickou informÃ¡ciou podstatne rÃ½chlejÅ¡ie konverguje k maximÃ¡lnej hodnote fitnes neÅ¾ ako GA s uÄenÃ­m bez zahrnutia memetickej informÃ¡cie."
195,10,0.561,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄacie systÃ©my zaloÅ¾enÃ© na zdrojovom kÃ³de vÃ½ber podmnoÅ¾iny relevantnÃ½ch dÃ¡t z prvej fÃ¡zy, urÄenie ich podobnosti, frekvencie Äi skÃ³re z hÄ¾adiska vhodnosti odporÃºÄania [4, 6, 12, 17, 24]. 1.1.6 DetailnÃ½ vstup/vÃ½stup Z hÄ¾adiska interakcie pouÅ¾Ã­vateÄ¾a s odporÃºÄacÃ­m systÃ©mom nÃ¡s vo fÃ¡ze implementÃ¡cie zaujÃ­ma primÃ¡rne zvolenie konkrÃ©tnych vstupov a vÃ½stupov metÃ³dy. Zvolenie konkrÃ©tneho vstupu sa skladÃ¡ z voÄ¾by spÃ´sobu, akÃ½m z vyhÄ¾adÃ¡vacieho dopytu pouÅ¾Ã­vateÄ¾a vyberieme entity zdrojovÃ©ho kÃ³du, ktorÃ© sÃº relevantnÃ© pre pouÅ¾Ã­vateÄ¾ovu aktuÃ¡lnu Ãºlohu a ktorÃ© sa nÃ¡sledne dajÃº dobre pouÅ¾iÅ¥ pre samotnÃ© odporÃºÄanie. VoÄ¾bu konkrÃ©tneho vÃ½stupu chÃ¡peme tak, Å¾e nÃ¡s zaujÃ­ma konkrÃ©tny jednotlivÃ½ vÃ½sledok. Teda neodporÃºÄame vÅ¡etky potenciÃ¡lne vhodnÃ© poloÅ¾ky, ale len niekoÄ¾ko najrelevantnejÅ¡Ã­ch. Takto sa vyhneme hrozbe zahltenia pouÅ¾Ã­vateÄ¾a informÃ¡ciami, kedy by vÃ½sledky odporÃºÄania v nevhodne zvolenom mnoÅ¾stve mohli spÃ´sobovaÅ¥ eÅ¡te vÃ¤ÄÅ¡ie zahltenie, ako bez ich pouÅ¾itia. Riskujeme sÃ­ce vynechanie niektorÃ©ho z relevantnÃ½ch vÃ½sledkov, avÅ¡ak vyplÃ½vajÃºce vÃ½hody sÃº vÃ½razne prijateÄ¾nejÅ¡ie. Do mnoÅ¾iny vÃ½sledkov totiÅ¾ zahrnieme skÃ´r relevantnÃ© odporÃºÄania. Tu v praxi rieÅ¡ime skÃ´r problÃ©my s prioritizÃ¡ciou poloÅ¾iek ako so zahltenÃ­m pouÅ¾Ã­vateÄ¾a. 1.1.7 Podpora Po dokonÄenÃ­ implementÃ¡cie odporÃºÄacieho systÃ©mu nasleduje Å¡tandardne validÃ¡cia vytvorenÃ©ho produktu. Pri vÃ½bere spÃ´sobu overenia jeho vlastnostÃ­ nÃ¡s z hÄ¾adiska samotnÃ©ho odporÃºÄacieho systÃ©mu zaujÃ­ma prÃ­nos pouÅ¾Ã­vateÄ¾ovi, ako mu nejakÃ½m spÃ´sobom napomohol pri rieÅ¡enÃ­ Ãºloh. V prvom rade v tomto kroku hÄ¾adÃ¡me samotnÃ½ spÃ´sob overenia, ktorÃ½m vieme kvantifikovaÅ¥, ako dobre systÃ©m vykonÃ¡va urÄenÃº Ãºlohu. Na to sa typicky vyuÅ¾Ã­vajÃº prÃ­padovÃ© Å¡tÃºdie [11, 15, 19] Äi porovnania s inÃ½mi systÃ©mami [3, 7, 11, 12, 13], respektÃ­ve voÄi situÃ¡cii bez odporÃºÄaÄa [12]. TaktieÅ¾ je moÅ¾nÃ© vyuÅ¾iÅ¥ A/B testovanie, simulÃ¡cie pouÅ¾itia systÃ©mu Äi kontrolovanÃ© experimenty so zÃ¡vislÃ½mi a nezÃ¡vislÃ½mi premennÃ½mi. Po identifikovanÃ­ spÃ´sobu overenia meriame rozliÄnÃ© vlastnosti, pomocou ktorÃ½ch stanovujeme kvalitu odporÃºÄania [4, 15, 24]. Meriame a sledujeme uÅ¾itoÄnosÅ¥ odporÃºÄania, teda mieru, akou rada prispela k vyrieÅ¡eniu Ãºlohy [6, 12, 16]. S tÃ½m sÃºvisÃ­ tieÅ¾ Äasto meranÃ¡ schopnosÅ¥ dokonÄiÅ¥ Ãºlohu na zÃ¡klade odporÃºÄania a taktieÅ¾ rÃ½chlosÅ¥ vyrieÅ¡enia Ãºlohy [16]. OdporÃºÄanie vÅ¡ak mÃ´Å¾e napomÃ¡haÅ¥ aj inÃ½m spÃ´sobom a preto je v urÄitÃ½ch prÃ­padoch vhodnÃ© meraÅ¥ skÃ´r mieru intelektuÃ¡lnej nÃ¡mahy pouÅ¾Ã­vateÄ¾a, kedy odporÃºÄacÃ­ systÃ©m pouÅ¾Ã­vateÄ¾ovi pomÃ¡ha znÃ­Å¾iÅ¥ rozsah nÃ¡mahy nutnej pre dokonÄenie Ãºlohy. VyrieÅ¡enie Ãºlohy sa vo vÃ¤ÄÅ¡ine prÃ­padov dÃ¡ dosiahnuÅ¥ rozliÄnÃ½mi spÃ´sobmi a rovnako finÃ¡lne rieÅ¡enie sa mÃ´Å¾e znaÄne lÃ­Å¡iÅ¥. RieÅ¡enia tieÅ¾ mÃ´Å¾u dosahovaÅ¥ rozdielnu mieru kvality Äi sprÃ¡vnosti. Oprava chyby mÃ´Å¾e spÃ´sobiÅ¥ chybnÃ© sprÃ¡vanie v inej situÃ¡cii, prÃ­padne mÃ´Å¾e neÃºmerne spomaliÅ¥ vÃ½kon systÃ©mu. Preto je v istÃ½ch situÃ¡ciÃ¡ch vhodnÃ© validovaÅ¥ mieru sprÃ¡vnosti rieÅ¡enÃ­ dosiahnutÃ½ch na zÃ¡klade odporÃºÄanÃ­. Okrem sprÃ¡vnosti je moÅ¾nÃ© meraÅ¥ tieÅ¾ relevanciu odporÃºÄania. V tomto prÃ­pade vÅ¡ak ide o subjektÃ­vnu metriku, ktorÃ¡ sa nedÃ¡ vyhodnotiÅ¥ kvantitatÃ­vne."
369,254,0.561,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.18. Vzor BankovÃ½ produkt â alternatÃ­va 1 Model na obr. 4.18 je nehomogÃ©nny: niektorÃ© bankovÃ© produkty sÃº dvojÃºrovÅovÃ© (zahÅÅajÃº aj inÅ¡tanciu triedy BalÃ­k produktov), kÃ½m inÃ© iba jednoÃºrovÅovÃ© (obsahujÃº iba inÅ¡tanciu triedy ZÃ¡kladnÃ½ produkt). Z implementaÄnÃ©ho hÄ¾adiska bÃ½va Äasto jednoduchÅ¡ie rieÅ¡enie"
43,13,0.561,Objektovo orientovanÃ© programovanie v C++,"dom nÃ¡Å¡ho suseda, rodiÄovskÃ½ dom atÄ. Takto by sme mohli pokraÄovaÅ¥ Äalej. Ak by sme nÃ¡Å¡ svet povaÅ¾ovali za program, potom by sme skutoÄne vÅ¡etky predmety, hmotnÃ© aj nehmotnÃ©, mohli vidieÅ¥ ako objekty istÃ½ch tried a takisto platÃ­, Å¾e kaÅ¾dÃº akciu, ktorÃ¡ sa udeje, vykonÃ¡va objekt nejakej triedy. Å½iadna akcia nemÃ´Å¾e existovaÅ¥ nezÃ¡visle, kaÅ¾dÃ¡ schopnosÅ¥ alebo ÄinnosÅ¥ je spojenÃ¡ s nejakou triedou. NaprÃ­klad Ã­sÅ¥ mÃ´Å¾e Älovek alebo auto, svietiÅ¥ mÃ´Å¾e lampa alebo vesmÃ­rne teleso, stÃ¡Å¥ mÃ´Å¾e budova atÄ. Rovnako to platÃ­ pre vlastnosti â hÄºbku mÃ´Å¾u maÅ¥ jazerÃ¡ alebo nÃ¡doby, farbu vÅ¡etky viditeÄ¾nÃ© objekty. Presne tieto princÃ­py boli inÅ¡pirÃ¡ciou pre vytvorenie objektovo orientovanÃ©ho programovania a dobre navrhnutÃ© objektovo orientovanÃ© programy by mali pripomÃ­naÅ¥ organizÃ¡ciu a logiku reÃ¡lneho sveta."
393,536,0.558,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Rozdelenie softvÃ©ru na koncerny a adaptÃ©ry nielenÅ¾e umoÅ¾Åuje ÄiastoÄne prehÄ¾adnejÅ¡ie znovupouÅ¾itie ÄastÃ­ systÃ©mu, ale ponÃºka i akÃ©hosi sprievodcu pri znovupouÅ¾itÃ­, podÄ¾a ktorÃ©ho mÃ´Å¾e vÃ½vojÃ¡r postupovaÅ¥ a sprÃ¡vne pouÅ¾iÅ¥ koncern uloÅ¾enÃ½ v kniÅ¾nici. DÃ¡ sa povedaÅ¥, Å¾e protokol skladania definuje akÃºsi metodolÃ³giu, akou moÅ¾no danÃ½ koncern znovupouÅ¾iÅ¥. OpÃ­sanÃ½ prÃ­stup je pomerne mladÃ½ a je spojenÃ½ s viacerÃ½mi problÃ©mami, napr. pri adaptÃ¡ciÃ­ ClassMerging mÃ´Å¾e nastaÅ¥ problÃ©m s jazykmi podporujÃºcimi iba jeden strom dediÄnosti, keÄÅ¾e je potrebnÃ© spojiÅ¥ dva zoznamy rodiÄovskÃ½ch tried, ktorÃ© sa mÃ´Å¾u navyÅ¡e opakovaÅ¥."
130,404,0.556,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"TÃ¡to kapitola sa pokÃºsi poskytnÃºÅ¥ prehÄ¾ad zÃ¡kladnÃ½ch metÃ³d plÃ¡novania a niektorÃ½ch ich modifikÃ¡ciÃ­ s prihliadnutÃ­m na ich moÅ¾nÃ© pouÅ¾itie v multiagentovÃ½ch systÃ©moch. ProblÃ©m plÃ¡novania je jednÃ½m z najstarÅ¡Ã­ch problÃ©mov umelej inteligencie. ProblÃ©m plÃ¡novania moÅ¾no vyjadriÅ¥ ako hÄ¾adanie ÄinnostÃ­ (Äi uÅ¾ zoradenÃ½ch sekvenÄne alebo Äasovo sa prekrÃ½vajÃºcich), ktorÃ© pre danÃ© zadanie spÃ´sobia jeho vyrieÅ¡enie. NavyÅ¡e, klasickÃ¡ umelÃ¡ inteligencia na plÃ¡novanie kladie ÄalÅ¡ie poÅ¾iadavky, a to racionalitu a zdÃ´vodniteÄ¾nosÅ¥ rozhodnutÃ­ a vÃ½beru ÄinnostÃ­, ktorÃ© sa budÃº vykonÃ¡vaÅ¥. ProblÃ©m vytvÃ¡rania plÃ¡nov nie je triviÃ¡lny ani v prÃ­pade, Å¾e vykonÃ¡vanie plÃ¡nu nie je distribuovanÃ© a plÃ¡n sa vykonÃ¡va sekvenÄne. NÃ¡jdenie optimÃ¡lneho plÃ¡nu (optimÃ¡lnej postupnosti krokov, ktorÃ© treba vykonaÅ¥) je vo vÅ¡eobecnosti nerozhodnuteÄ¾nÃ½"
135,264,0.554,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.7 ArchitektÃºry sÃºbeÅ¾nÃ©ho softvÃ©ru RÃ´zne architektÃºry sÃº aplikovatenÃ© na rozlinÃ© triedy problÃ©mov. NiektorÃ© problÃ©my, i uÅ¾ z hadiska svojej povahy alebo z dÃ´vodov vyplÃ½vajÃºcich z prostredia, do ktorÃ©ho budÃº nasadenÃ©, sÃº vhodnÃ½mi kandidÃ¡tmi na sÃºbeÅ¾nÃ© spracovanie vo viacerÃ½ch vlÃ¡knach i procesoch."
190,426,0.554,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Äo je vÃ½sledkom monitorovania? SumÃ¡rne sprÃ¡vy a v nich indÃ­cie o nesprÃ¡vne fungujÃºcich zloÅ¾kÃ¡ch, âpodozreniaâ. K identifikÃ¡cii problÃ©mu eÅ¡te kus cesty. TÃº uÅ¾ musÃ­ prekonaÅ¥ Älovek. Å irokÃ½ zÃ¡ber systÃ©mu â pokrytie celÃ©ho projektu mu dÃ¡va dobrÃ½ zÃ¡klad. Aj neskÃºsenÃ©mu manaÅ¾Ã©rovi poskytne vÃ½chodiskovÃ½ bod, kde zaÄaÅ¥ hÄ¾adaÅ¥. Potom mÃ´Å¾e nasledovaÅ¥ analÃ½za doplÅujÃºcich materiÃ¡lov, ako spomÃ­nanÃ© sprÃ¡vy zamestnancov. UÅ¾ bude maÅ¥ na stole len tie relevantnÃ©. S vyuÅ¾itÃ­m priamej komunikÃ¡cie s podriadenÃ½mi potom mÃ´Å¾e dospieÅ¥ k identifikÃ¡cii problÃ©mu oveÄ¾a rÃ½chlejÅ¡ie. BohuÅ¾iaÄ¾ ani dodanÃ© podklady ÄastokrÃ¡t nepomÃ´Å¾u, rozhodujÃºce sÃº skÃºsenosti."
265,315,0.553,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UvaÅ¾ujte nasledujÃºce: âIntegraÄnÃ© testy by sme mohli pripraviÅ¥ tak, aby pokrÃ½vali celÃº funkcionalitu prÃ­sluÅ¡nÃ©ho komponentu a uÅ¡etrili by sme tak veÄ¾a prÃ¡ce s tvorbou (a udrÅ¾iavanÃ­m) jednotkovÃ½ch testov v rÃ¡mci komponentu. Pre otestovanie komponentu by sme vÅ¾dy spustili integraÄnÃ© testy a ak sme v poslednej iterÃ¡cii nieÄo spravili zle, ukÃ¡Å¾e sa to.â PreÄo teda nepouÅ¾Ã­vame iba integraÄnÃ© testovanie, ale aj jednotkovÃ© testovanie? Hoci Ãºvaha o ÃºsilÃ­ je platnÃ¡, proti takejto praxi sÃº dÃ´leÅ¾itejÅ¡ie dÃ´vody: 1. VytvoriÅ¥ integraÄnÃ© testy zvyÄajne vieme len pomocou prÃ­stupu Äierna skrinka. Zapojenie metÃ³d bielej skrinky je pre veÄ¾kÃ½ komponent, resp. jeho vnÃºtornÃº zloÅ¾itosÅ¥ prÃ­liÅ¡ nÃ¡roÄnÃ©. LenÅ¾e aj pre Äiernu skrinku je veÄ¾kÃ½ komponent rovnakÃ½ problÃ©m: s narastajÃºcou zloÅ¾itosÅ¥ou sa Äoraz Å¥aÅ¾Å¡ie dajÃº predpovedaÅ¥ triedy ekvivalencie. Z tohto vyplÃ½va, Å¾e len samotnÃ© integraÄnÃ© testy nikdy nebudÃº maÅ¥ schopnosÅ¥ dostatoÄne strÃ¡Å¾iÅ¥ pred chybami, vyplÃ½vajÃºcimi z nepredpokladanÃ½ch kombinÃ¡ciÃ­ okolnostÃ­. Preto si radÅ¡ej v zmysle stratÃ©gie ârozdeÄ¾uj a panujâ, rozloÅ¾Ã­me komponent na menÅ¡ie Äasti a testujeme ich jednotlivo (jednotkovo), pretoÅ¾e menÅ¡ie Äasti vieme Ä¾ahÅ¡ie bielo-skrinkovÃ½m prÃ­stupom analyzovaÅ¥. 2. IntegraÄnÃ© testy, keÄÅ¾e spÃºÅ¡Å¥ajÃº programy v celej svojej zloÅ¾itosti, spravidla trvajÃº dlho (Å¡peciÃ¡lne ak zahÅÅajÃº emulovanie sprÃ¡vania pouÅ¾Ã­vateÄ¾a na pouÅ¾Ã­vateÄ¾skom rozhranÃ­). A eÅ¡te dlhÅ¡ie by trvali, ak by sme sa predsa len pokÃºsili prekonaÅ¥ problÃ©m z bodu 1 a naozaj poctivo a dÃ´sledne by sme sa snaÅ¾ili prÃ­stupom bielej skrinky nadefinovaÅ¥ Äo najviac mnoÅ¾Ã­n testovacÃ­ch Ãºdajov. ReÃ¡lne by nÃ¡m ich poÄet prerÃ¡stol cez hlavu veÄ¾mi rÃ½chlo: veÄ pridanie Äo i len jednej podmienky v programe v skutoÄnosti znamenÃ¡ zdvojnÃ¡sobenie vÅ¡etkÃ½ch moÅ¾nostÃ­, ktorÃ© treba preskÃºmaÅ¥. RozdelenÃ­m na menÅ¡ie Äasti v rÃ¡mci jednotkovÃ©ho testovania opÃ¤Å¥ tento problÃ©m zmierÅujeme. 3. S jednotkovÃ½mi testami vieme lepÅ¡ie lokalizovaÅ¥, kde nastali problÃ©my v dÃ´sledku nedÃ¡vnych zmien v softvÃ©ri. Ak by sme pouÅ¾Ã­vali len integraÄnÃ© testy, po vykonanÃ­ zmien v komponente by sme sa sÃ­ce po ich spustenÃ­ dozvedeli, Å¾e sme nieÄo pokazili, no nevedeli by sme presne hneÄ, 4. IntegraÄnÃ© testy sa nevykonÃ¡vajÃº tak Äasto (ich beh spravidla dlhÅ¡ie trvÃ¡ a ich ÄastÃ© spÃºÅ¡Å¥anie by spomaÄ¾ovalo vÃ½voj). Teda aj chyby sa odhaÄ¾ujÃº"
190,362,0.553,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PodÄ¾a Å¡tÃºdie [2] je komunikÃ¡cia medzi zmluvnÃ½mi stranami jednÃ½m z najvÃ¤ÄÅ¡Ã­ch zdrojov rizÃ­k. ProblÃ©mom Äasto bÃ½va fakt, Å¾e medzi Älenmi tÃ­mu, ktorÃ­ realizujÃº projekt a koncovÃ½m pouÅ¾Ã­vateÄ¾om, ktorÃ½ definuje poÅ¾iadavky, stojÃ­ viacero Ä¾udÃ­. TÃ­to ovplyvÅujÃº projekt spÃ´sobom, ktorÃ½ vyplÃ½va z ich postavenia a pozÃ­cie, a potom sa mÃ´Å¾e staÅ¥, Å¾e majÃº rozdielne nÃ¡zory a pohÄ¾ady na konkrÃ©tne Äasti projektu. MyslÃ­m si, Å¾e v sÃºvislosti s tÃ½mto problÃ©mom sa vynÃ¡ra Äasto aj OrganizÃ¡cia tÃ­mu problÃ©m nepochopenia poÅ¾iadaviek zÃ¡kaznÃ­ka a tÃ½m aj nesplnenie jeho je najsilnejÅ¡ou oÄakÃ¡vanÃ­. Za kÄ¾ÃºÄovÃ©, pokladÃ¡m v oblasti komunikÃ¡cie so zÃ¡kaznÃ­kom zbraÅou v snahe tieto problÃ©my: predchÃ¡dzaÅ¥"
111,116,0.552,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"RÃ½chlejÅ¡ia reprodukcia chÃ½b ZloÅ¾itosÅ¥ webovÃ½ch strÃ¡nok/aplikÃ¡ciÃ­ spÃ´sobuje, Å¾e niektorÃ© veci jednoducho nebudÃº vÅ¾dy fungovaÅ¥ tak, ako by mali. Je potrebnÃ© zohÄ¾adniÅ¥ mnoÅ¾stvo podmienok, ako sÃº rÃ´zne typy zariadenÃ­, operaÄnÃ½ch systÃ©mov a prehliadaÄov, ako aj rÃ´zne rozlÃ­Å¡enia obrazovky alebo lokalizÃ¡cie. A to ani neberieme do Ãºvahy faktor pouÅ¾Ã­vateÄ¾a, ktorÃ½ mÃ¡ pri danej prÃ­leÅ¾itosti nekoneÄnÃº schopnosÅ¥ âpokaziÅ¥ veciâ spÃ´sobom, ktorÃ½ by vÃ½vojÃ¡r nikdy neÄakal (samozrejme pouÅ¾Ã­vateÄ¾, nÃ¡Å¡ zÃ¡kaznÃ­k nÃ¡Å¡ pÃ¡n, preto pokazil v ÃºvodzovkÃ¡ch). Testovanie toÄ¾kÃ½ch moÅ¾nostÃ­ sa rÃ½chlo stÃ¡va nemoÅ¾nÃ½m. KeÄ je objavenÃ¡ a nahlÃ¡senÃ¡ chyba, Äasto narazÃ­te na ÄalÅ¡Ã­ problÃ©m. Ako problÃ©m reprodukovaÅ¥. Pridanie nahrÃ¡vania sedenÃ­ mÃ´Å¾e zmeniÅ¥ spÃ´sob rieÅ¡enia chÃ½b, ktorÃ© sa objavia na vaÅ¡ich webovÃ½ch strÃ¡nkach. Namiesto toho, aby ste poÅ¾iadali pouÅ¾Ã­vateÄ¾a o zopakovanie krokov, ktorÃ© viedli k chybe, alebo aby ste ho poÅ¾iadali o poskytnutie snÃ­mky obrazovky, mÃ´Å¾ete si pozrieÅ¥ jeho sedenie a vidieÅ¥ chybu na vlastnÃ© oÄi."
190,290,0.552,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"spÃ´sobom a podÄ¾a Murphyho zÃ¡konov sa tÃ¡ informÃ¡cia objavÃ­ u konkurenÄnej firmy vÅ¾dy skÃ´r ako v naÅ¡ej. Preto je dÃ´leÅ¾itÃ©, aby manaÅ¾Ã©r mal prehÄ¾ad o tom, Äo sa deje v blÃ­zkom okolÃ­ a aj vo svete. InformÃ¡cie sÃº kÄ¾ÃºÄovÃ© aj v samotnÃ½ch pracovnÃ½ch skupinÃ¡ch. Je pre nÃ¡s veÄ¾kou vÃ½hodou maÅ¥ vÃ½borne vyÅ¡kolenÃ½ a skÃºsenÃ½ tÃ­m Ä¾udÃ­, ktorÃ­ rozumejÃº technikÃ¡m, postupom a aj prostriedkom, ktorÃ© majÃº na prÃ¡cu pouÅ¾Ã­vaÅ¥. Ä½udÃ­ by sme si mali tieÅ¾ voliÅ¥ tak, aby rozumeli problematike, ktorÃº chceme naÅ¡im projektom rieÅ¡iÅ¥ a vyberaÅ¥ si naprÃ­klad ekonomicky vzdelanÃ½ch Ä¾udÃ­, na rieÅ¡enie systÃ©mu pre podporu finanÄnÃ©ho oddelenia firmy. Ku kvalitnÃ½m informÃ¡ciÃ¡m poÄÃ­tame aj dokumentÃ¡ciu, ktorÃº vyÅ¾aduje zÃ¡kaznÃ­k. Je veÄ¾mi dobrÃ© vytvÃ¡raÅ¥ ju kvalitne aj kvÃ´li internÃ½m potrebÃ¡m, keÄÅ¾e zamestnanci vo firme sa Äasto menia, ManaÅ¾Ã©r by mal maÅ¥ prehÄ¾ad a potom je Å¥aÅ¾kÃ© opravovaÅ¥ chyby v programe."
40,98,0.551,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Na zÃ¡vÄr si popiÅ¡me chovÃ¡nÃ­ agenta â stopaÅe â, kterÃ½ dokÃ¡Å¾e nÃ¡sledovat jinÃ©ho agenta. TakovÃ© chovÃ¡nÃ­ se Äasto hodÃ­ v poÄÃ­taÄovÃ½ch hrÃ¡ch. VytvoÅenÃ­ stopaÅe je pomÄrnÄ jednoduchÃ©. JedinÃ© informace z prostÅedÃ­, jeÅ¾ bude potÅebovat, jsou pozice ostatnÃ­ch agentÅ¯, kterÃ© momentÃ¡lnÄ vidÃ­. MÃ¡me-li tyto informace k dispozici, mÅ¯Å¾eme vytvoÅit stopaÅe nÃ¡sledovnÄ: V momentÄ, kdy se v jeho zornÃ©m poli objevÃ­ cizÃ­ agent, vyÅ¡leme pÅÃ­kaz âjdi na pozici tohoto agentaâ (âjdiâ pomocÃ­ navigaÄnÃ­ch pravidel; tzn. pokud se napÅÃ­klad po cestÄ objevÃ­ pÅekÃ¡Å¾ka, obejdi ji). V pÅÃ­padÄ, Å¾e je agentÅ¯ ve stopaÅovÄ zornÃ©m poli vÃ­ce, bude stopaÅ nÃ¡sledovat nejbliÅ¾Å¡Ã­ho z nich. Jak se lze zbavit stopaÅe, pokud nÃ¡s sleduje? ZaprvÃ© mÅ¯Å¾eme zmizet z jeho zornÃ©ho pole. ZadruhÃ© mÅ¯Å¾eme pÅibÄhnout ke skupince agentÅ¯ a doufat, Å¾e stopaÅ zaÄne sledovat nÄkoho z nich. Nebo ho mÅ¯Å¾eme zkusit vlÃ¡kat do pasti jako na obrÃ¡zku 10. ZbÃ½vÃ¡ vyÅeÅ¡it jeden problÃ©m: co to znamenÃ¡, Å¾e stopaÅ nÄkoho âvidÃ­â? Obvykle to znamenÃ¡, Å¾e se cizÃ­ agent (nebo objekt) nachÃ¡zÃ­ v jeho zornÃ©m poli (âfield of viewâ) a mezi stopaÅem a agentem nenÃ­ Å¾Ã¡dnÃ¡ neprÅ¯hlednÃ¡ pÅekÃ¡Å¾ka. PÅÃ­tomnost pÅekÃ¡Å¾ky zjistÃ­me jiÅ¾ znÃ¡mou technikou vrhÃ¡nÃ­ paprskÅ¯: vrhneme paprsek z âoÄÃ­â agenta smÄrem k tÄÅ¾iÅ¡ti objektu: pokud paprsek narazÃ­ do pÅekÃ¡Å¾ky, Åekneme, Å¾e objekt agent nevidÃ­ (dobrÃ¡, pokud je objekt zakrytÃ½ ÄÃ¡steÄnÄ, tak to nemusÃ­ fungovat, ale vrhat vÃ­c paprskÅ¯ zase stojÃ­ vÃ½poÄetnÃ­ zdroje...). Å Ã­Åka zornÃ©ho pole agenta bÃ½vÃ¡ obvykle zhruba 90Â°. ExistujÃ­ i sloÅ¾itÄjÅ¡Ã­ mechanismy vnÃ­mÃ¡nÃ­, ale pouÅ¾Ã­vajÃ­ se jen tam, kde je to opravdu nutnÃ©: napÅÃ­klad ve hÅe Thief, kde se agenti Äasto pohybujÃ­ v pÅÃ­Å¡eÅÃ­ a kde jejich vjemy zÃ¡visÃ­ na kdejakÃ©m Å¡ustnutÃ­ [35]. VÃ½Å¡e jsme ÅÃ­kali, Å¾e agenti Äasto nevidÃ­ zdroje svÄtla, nevnÃ­majÃ­ stÃ­ny Äi mlhu. S vylepÅ¡enÃ½mi mechanismy vnÃ­mÃ¡nÃ­ to nemusÃ­ bÃ½t pravda. Na akademickÃ© pÅ¯dÄ se takÃ© vÄnuje nÄkolik skupin modelovÃ¡nÃ­ pozornosti (napÅ. [33]). Jde o to, Å¾e kdyÅ¾ je kolem agenta hodnÄ viditelnÃ½ch pÅedmÄtÅ¯, nemÄl by si jich stihnout vÅ¡imnout vÅ¡ech. PomocÃ­ mechanismu pozornosti lze takÃ© modelovat oÄnÃ­ pohyby: agenti vypadajÃ­ vÄrohodnÄji, pokud se jejich oÄi natÃ¡ÄÃ­ podle toho, na kterÃ½ objekt se dÃ­vajÃ­. K zamyÅ¡lenÃ­: dokÃ¡zali byste agenta stopaÅe vylepÅ¡it tak, aby se vymotal z pasti (obr. 10), pokud je do nÃ­ naveden? NÃ¡povÄda: zkuste vyuÅ¾Ã­t navigaÄnÃ­ho grafu."
76,172,0.551,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"RieÅ¡enie. V tejto situÃ¡cii je Ä¾ahkÃ© vidieÅ¥ ( ) ako zobrazenie, keÄ ï definujeme ako vÅ¡etky usporiadanÃ© pÃ¤tice nÃºl a jednotiek. Ak napr. ï· = (0, 1, 0, 1, 1), hodnotou vektora ( ) je dvojica (1, 3), pretoÅ¾e (ï·) = 1 a (ï·) = 3. Ak ï· = (1, 0, 1, 1, 1), hodnotou vektora ( ) je dvojica (2, 4), pretoÅ¾e (ï·) = 2 a (ï·) = 4. Priestor ï mÃ¡ zrejme 32 ( = ) bodov."
59,588,0.551,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"(12.2) yÌt ï«1 ï½ G ï¨ at ,st ;wï© TÃ¡to parametrickÃ¡ funkcia mÃ´Å¾e byÅ¥ naprÃ­klad implementovanÃ¡ pomocou neurÃ³novej siete alebo inÃ©ho âmatematickÃ©ho zariadeniaâ, ktorÃ© mÃ¡ vlastnosti univerzÃ¡lneho aproximÃ¡tora. UÄenie sa tohto komplexu v podstate mÃ´Å¾e prebiehaÅ¥ Å¡tandardnou metÃ³dou s uÄiteÄ¾om, priÄom poÅ¾adovanÃ© vÃ½stupnÃ© aktivity poskytuje priamo systÃ©m (t. j. pri tvorbe doprednÃ©ho modelu nie je potrebnÃ¡ trÃ©ningovÃ¡ mnoÅ¾ina, poÅ¾adovanÃ© vÃ½stupnÃ© hodnoty poskytuje priamo systÃ©m). Treba vÅ¡ak poznamenaÅ¥, Å¾e konÅ¡trukcia doprednÃ©ho modelu musÃ­ predchÃ¡dzaÅ¥ uÄenie sa komplexu, priÄom vÃ½slednÃ½ doprednÃ½ model nemusÃ­ byÅ¥ perfektnÃ½. V teÃ³rii riadenia je zvykom doprednÃ½ model nazÃ½vaÅ¥ identifikÃ¡cia modelu systÃ©mu."
236,19,0.551,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"KeÄ Ä¾udia z WYSIWYGovÃ©ho sveta stretnÃº Ä¾udÃ­, ktorÃ­ pouÅ¾Ã­vajÃº LATEX, najÄastejÅ¡ie sa diskutuje âo vÃ½hodÃ¡ch LATEXu v porovnanÃ­ s normÃ¡lnym textovÃ½m procesoromÃ¿ alebo naopak. NajlepÅ¡ie urobÃ­te, ak takÃ½to rozhovor zaÄne, keÄ budete v ÃºzadÃ­, keÄÅ¾e sa takÃ¡to diskusia Äasto vymykÃ¡ z rÃºk. AvÅ¡ak niekedy niet Ãºniku. . . Teda tu je troÅ¡ka streliva. NajvÃ¤ÄÅ¡ie vÃ½hody LATEXu oproti normÃ¡lnym textovÃ½m procesorom sÃº nasledujÃºce: â¢ SÃº dostupnÃ© profesionÃ¡lne vytvorenÃ© Ãºpravy strÃ¡nky, takÅ¾e dokument skutoÄne vyzerÃ¡, ako keby bol âvytlaÄenÃ½Ã¿. â¢ PÃ­sanie matematickÃ½ch vzorcov je zabezpeÄenÃ© pohodlnÃ½m spÃ´sobom. â¢ UÅ¾Ã­vateÄ¾ovi sa staÄÃ­ nauÄiÅ¥ niekoÄ¾ko Ä¾ahko pochopiteÄ¾nÃ½ch prÃ­kazov, definujÃºcich logickÃº Å¡truktÃºru dokumentu. Takmer nikdy nemusÃ­ âfuÅ¡ovaÅ¥Ã¿ do nastavenej Ãºpravy dokumentu. â¢ Ä½ahko mÃ´Å¾u byÅ¥ vygenerovanÃ© aj zloÅ¾itÃ© Å¡truktÃºry, ako poznÃ¡mky pod Äiarou, odkazy, obsah, pouÅ¾itÃ¡ literatÃºra a register. â¢ Na rieÅ¡enie mnohÃ½ch typografickÃ½ch Ãºloh priamo nepodporovanÃ½ch zÃ¡kladnÃ½m LATEXom existujÃº voÄ¾ne pripojiteÄ¾nÃ© balÃ­ky makier. NaprÃ­klad mÃ´Å¾ete pomocou nich vloÅ¾iÅ¥ do textu PostScriptovÃº grafiku alebo vytvoriÅ¥ bibliografie dodrÅ¾ujÃºc presnÃ© Å¡tandardy. Mnoho z tÃ½chto voÄ¾ne pripojiteÄ¾nÃ½ch makier je opÃ­sanÃ½ch v The LATEX Companion [3]. â¢ LATEX povzbudzuje autorov pÃ­saÅ¥ texty s kvalitnou Å¡truktÃºrou, pretoÅ¾e toto je spÃ´sob, ako LATEX pracuje â Å¡pecifikovanÃ­m Å¡truktÃºry. â¢ TEX, formÃ¡tovacÃ­ motor LATEXu2Îµ, je bezplatnÃ½ a Ä¾ahko prenositeÄ¾nÃ½. Preto beÅ¾Ã­ takmer na kaÅ¾dej dostupnej hardvÃ©rovej platforme. LATEX mÃ¡ aj urÄitÃ© nevÃ½hody, ale myslÃ­m si, Å¾e je pre mÅa trochu obtiaÅ¾ne nÃ¡jsÅ¥ nejakÃº rozumnÃº, hoci som si istÃ½, Å¾e inÃ­ Ä¾udia by vÃ¡m mohli povedaÅ¥ o stovkÃ¡ch ;-) â¢ LATEX nefunguje dobre Ä¾uÄom, ktorÃ­ predali svoju duÅ¡u. . . â¢ Hoci pri preddefinovanÃ½ch formÃ¡toch strÃ¡n sa dajÃº upravovaÅ¥ niektorÃ© parametre, vytvorenie novÃ©ho formÃ¡tu je nÃ¡roÄnÃ© a zaberie veÄ¾a Äasu2 . â¢ Je veÄ¾mi Å¥aÅ¾kÃ© napÃ­saÅ¥ neÅ¡truktÃºrovanÃ½ a chaotickÃ½ dokument."
76,356,0.551,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"8.1.6 PrÃ­klad. Na vÃ½robe urÄitÃ©ho vÃ½robku sa podieÄ¾ajÃº dve linky. PrvÃ¡ z nich, oznaÄme ju A, vyrÃ¡ba s 5-percentnou nepodarkovosÅ¥ou, kÃ½m druhÃ¡ linka B mÃ¡ nepodarkovosÅ¥ aÅ¾ 10percentnÃº. Predstavme si, Å¾e mÃ¡me pred sebou kontajner s 1000 vÃ½robkami a vieme o Åom iba to, Å¾e buÄ obsahuje vÃ½robky z linky A, alebo naopak, jeho obsah pochÃ¡dza z linky B. Predpokladajme, Å¾e sme realizovali nÃ¡hodnÃ½ vÃ½ber rozsahu = 100 a na zÃ¡klade zistenia poÄtu nepodarkov medzi vybratÃ½mi mÃ¡me rozhodnÃºÅ¥, z ktorej linky tÃ½ch 1000 vÃ½robkov pochÃ¡dza. Formulujme Ãºlohu ako Å¡tatistickÃ½ test na hladine ï¡ = 0.1 a nÃ¡jdime jeho silu. RieÅ¡enie. NÃ¡hodnÃ½ vÃ½ber modelujeme 100-ticou nezÃ¡vislÃ½ch veliÄÃ­n , ~ A( ), kde indikÃ¡tory nepodarku (prÃ­klad 6.2.5). Ak vÃ½robky boli vyrobenÃ© linkou A, tak = 0.05, ak vÃ½robky pochÃ¡dzajÃº z linky B, tak = 0.10. Ide o test o parametri alternatÃ­vneho rozdelenia: : = 0.05 proti : = 0.10 Testovacou Å¡tatistikou je veliÄina = + + ... + , ktorÃ¡ predstavuje poÄet nepodarkov medzi 100 vybratÃ½mi. VeliÄinou budeme identifikovaÅ¥ kritickÃº oblasÅ¥ K. Zrejme kritickÃ½mi pre sÃº prÃ­liÅ¡ veÄ¾kÃ© hodnoty , a preto K mÃ¡ tvar K = {("
265,149,0.551,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"HlavnÃ½ cieÄ¾ manaÅ¾mentu projektu je zabezpeÄiÅ¥, aby bol oÄakÃ¡vanÃ½ vÃ½slednÃ½ vÃ½robok alebo sluÅ¾ba dodanÃ½ vÄas, v dohodnutom rozsahu a v rÃ¡mci definovanÃ©ho rozpoÄtu. Inak povedanÃ©, vÃ½robok alebo sluÅ¾bu chceme dodaÅ¥ v zodpovedajÃºcej kvalite (pozor, netÃ½ka sa len produktu, ale aj procesu). VzÅ¥ah medzi tÃ½mito tromi veliÄinami nazÃ½vame aj trojuholnÃ­k manaÅ¾mentu projektu (Obr. 1.9), ktorÃ½ predstavuje akÃ½si model ohraniÄenÃ­ projektu. DodrÅ¾anie tÃ½chto ohraniÄenÃ­ v praxi nie je vÃ´bec jednoduchÃ©. DÃ´vody sÃºvisia so Å¡pecifickÃ½mi vlastnosÅ¥ami softvÃ©ru (alebo problÃ©mami pri tvorbe softvÃ©ru), ktorÃ© sa odrÃ¡Å¾ajÃº aj do problÃ©mov manaÅ¾mentu softvÃ©rovÃ©ho projektu (pozri otÃ¡zku 1.3.12). MÃ´Å¾e sa staÅ¥ (aj sa Äasto stÃ¡va), Å¾e pri rieÅ¡enÃ­ projektu potrebujeme zmeniÅ¥ jednu z troch veliÄÃ­n. Zmena Å¾iadnej veliÄiny sa nezaobÃ­de bez zmeny ostatnÃ½ch dvoch. NaprÃ­klad, ak sa zvÃ¤ÄÅ¡Ã­ rozsah projektu (napr. na podnet zÃ¡kaznÃ­ka), narastie aj Äas a/alebo nÃ¡klady projektu. AkÃ½ veÄ¾kÃ½ bude tento vplyv,"
76,409,0.551,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Hodnoty distribuÄnej funkcie rozdelenia Bi(20, ) . . . . . . . . . . . . . . . . . . . 170 (pomÃ´cka k ÃºlohÃ¡m 8.5.1 a 8.5.5) TabuÄ¾kovÃ¡ podpora pre rieÅ¡enie Ãºlohy 8.5.3 . . . . . . . . . . . . . . . . . . . . . . . . 171"
59,212,0.55,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"4 Ãloha uÄenia v evolÃºcii a memetika 4.1 Baldwinov efekt a Ãºloha uÄenia v evolÃºcii V r. 1896 americkÃ½ psycholÃ³g J. M. Baldwin [1] formuloval hypotÃ©zu, podÄ¾a ktorej jedinci z populÃ¡cie schopnÃ­ uÄiÅ¥ sa majÃº vÃ¤ÄÅ¡iu Å¡ancu preÅ¾itia, ich fitnes je vÃ¤ÄÅ¡ie ako fitnes jedincov, ktorÃ­ tÃºto vlastnosÅ¥ nemajÃº. Ak prostredie evolÃºcie zostÃ¡va dlhÃ½ Äas nemennÃ©, tak prirodzenÃ½ vÃ½ber mÃ´Å¾e viesÅ¥ k emergencii takÃ½ch jedincov populÃ¡cie, ktorÃ­ majÃº tÃºto schopnosÅ¥ uÄiÅ¥ sa geneticky zafixovanÃº, Baldwin nazval tento mechanizmus âorganickÃ¡ selekciaâ. V sÃºÄasnosti sa na poÄesÅ¥ Baldwina tento jav nazÃ½va Baldwinov efekt [2]. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e pri evolÃºcii kognitÃ­vneho aparÃ¡tu vystupuje do popredia aspekt uÄenia, t. j. schopnosÅ¥ jedincov adaptovaÅ¥ si svoj kognitÃ­vny orgÃ¡n tak, aby odrÃ¡Å¾al v urÄitom rozsahu zmeny v prostredÃ­ alebo novÃ© kognitÃ­vne funkcie dÃ´leÅ¾itÃ© pre preÅ¾itie a reprodukciu. VÃ½znam uÄenia v Darwinovej evolÃºcii spoÄÃ­va v tom, Å¾e organizmus s lepÅ¡Ã­m kognitÃ­vnym aparÃ¡tom mÃ¡ vÃ¤ÄÅ¡iu Å¡ancu na preÅ¾itie a reprodukciu. Poznamenajme, Å¾e zÃ¡kladnÃ¡ architektÃºra a snÃ¡Ä aj poÄiatoÄnÃ© nastavenie vybranÃ½ch vÃ¡hovÃ½ch koeficientov kognitÃ­vneho orgÃ¡nu sa dediÄne prenÃ¡Å¡ajÃº na potomkov, avÅ¡ak neprenÃ¡Å¡ajÃº sa vedomosti zÃ­skanÃ© rodiÄmi v priebehu ich Å¾ivota."
184,48,0.549,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"Å kÃ¡lovateÄ¾nosÅ¥ (scalability) opisuje ako dobre rieÅ¡enie konkrÃ©tneho problÃ©mu funguje v prÃ­pade, Å¾e sa veÄ¾kosÅ¥, resp. zloÅ¾itosÅ¥ problÃ©mu zvÃ¤ÄÅ¡uje. V kontexte architektÃºry Å¡kÃ¡lovateÄ¾nosÅ¥ opisuje ako dobre sa danÃ½ nÃ¡vrh architektÃºry vyrovnÃ¡ s narastajÃºcimi poÅ¾iadavkami na niektorÃº ÄasÅ¥ systÃ©mu. KonkrÃ©tna poÅ¾iadavka na Å¡kÃ¡lovateÄ¾nosÅ¥ systÃ©mu vyÅ¾aduje definovanie toho, Äo bude narastaÅ¥: Â zÃ¡Å¥aÅ¾ poÅ¾iadavkami (request load), Â poÄet sÃºÄasnÃ½ch spojenÃ­ (simultaneous connections), Â veÄ¾kosÅ¥ dÃ¡t (data size), Â rozsah nasadenia (deployment)."
76,279,0.549,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"beru je deÅ¡truktÃ­vnej povahy (ako napr. pri meranÃ­ Å¾ivotnosti vÃ½robkov, alebo pevnosti nosnÃ­kov). V takÃ½ch prÃ­padoch je sÃ­ce poruÅ¡enÃ¡ nezÃ¡vislosÅ¥ avÅ¡ak obyÄajne rozsah nÃ¡hodnÃ©ho vÃ½beru je podstatne menÅ¡Ã­ ako rozsah zÃ¡kladnÃ©ho sÃºboru, a preto nepatrnÃ© poruÅ¡enie nezÃ¡vislosti mÃ´Å¾eme zanedbaÅ¥ (pozri Ãºlohu 6.6.1). TermÃ­n nÃ¡hodnÃ½ vÃ½ber sa pouÅ¾Ã­va aj tam, kde sa v skutoÄnosti niÄ nevyberÃ¡, ale za tÃ½ch istÃ½ch podmienok sa -krÃ¡t (a nezÃ¡visle na sebe) meria sledovanÃ¡ nÃ¡hodnÃ¡ veliÄina (pozri prÃ­klad 6.2.8). 6.2.6 DefinÃ­cia. NÃ¡hodnÃ½ vÃ½ber z rozdelenia, ktorÃ© urÄuje distribuÄnÃ¡ funkcia , je -tica nÃ¡hodnÃ½ch veliÄÃ­n , , ... , s vlastnosÅ¥ami: 1. VÅ¡etky majÃº rovnakÃ© rozdelenie. Funkcia je distribuÄnou funkciou kaÅ¾dej 2. VeliÄiny , , ... , sÃº nezÃ¡vislÃ© nÃ¡hodnÃ© veliÄiny."
40,108,0.548,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"ReaktivnÃ­ pravidla jsou jenom jednÃ­m ze zpÅ¯sobÅ¯, jak psÃ¡t do Knihy PÅedpisÅ¯. Mezi dalÅ¡Ã­ zpÅ¯soby patÅÃ­ napÅÃ­klad koneÄnÃ© automaty (âfinite state machinesâ) nebo stromy chovÃ¡nÃ­ (âbehavioral treesâ). Ãvod k tÄmto a dalÅ¡Ã­m technikÃ¡m mÅ¯Å¾ete nalÃ©zt napÅÃ­klad v [10], [13], [14]) nebo opÄt v knihÃ¡ch ze sÃ©rie AI Game Programming Wisdom [48]. KomplexnÃ­ text, kterÃ½ uvÃ¡dÃ­ ÄtenÃ¡Åe do mnoha technik pouÅ¾Ã­vanÃ½ch pro tvorbu agentÅ¯ v poÄÃ­taÄovÃ½ch hrÃ¡ch je [30]. PojednÃ¡vÃ¡ dokonce i o nÄkolika nesmÄlÃ½ch pokusech tÃ½kajÃ­cÃ­ch se uÄenÃ­. JinÃ½ ÄlÃ¡nek pojednÃ¡vajÃ­cÃ­ o uÄenÃ­ agentÅ¯ v poÄÃ­taÄovÃ½ch hrÃ¡ch je [24]. Nejde ovÅ¡em o uÄenÃ­ celÃ© Knihy PÅedpisÅ¯, ale pouze o drobnÃ© modifikace (napÅÃ­klad: umÃ­m uÅ¾ jÃ­st a nauÄÃ­m se, Å¾e krÃ¡va chutnÃ¡ lÃ©pe neÅ¾ kamenÃ­). ProblÃ©mu uÄenÃ­ se vÄnuje takÃ© open source hra NERO [41]. Agenti z tÃ©to hry jsou namÃ­sto Knihy PÅedpisÅ¯ ÅÃ­zeni umÄlou neuronovou sÃ­tÃ­, pro jejÃ­Å¾ uÄenÃ­ se pouÅ¾Ã­vajÃ­ genetickÃ© algoritmy [55]. Pokud bylo agentovo chovÃ¡nÃ­ uÅ¾ivatelem kladnÄ ohodnoceno, budou jeho geny, kÃ³dujÃ­cÃ­ vÃ½slednÃ© chovÃ¡nÃ­, s velkou pravdÄpodobnostÃ­ pÅeneseny i na dalÅ¡Ã­ generaci agentÅ¯. Naopak geny Å¡patnÄ hodnocenÃ½ch agentÅ¯ z populace vymizÃ­. MÅ¯Å¾e bÃ½t zajÃ­mavÃ© sledovat, jak se agenti postupnÄ uÄÃ­ jednotlivÃ¡ chovÃ¡nÃ­ jako napÅÃ­klad chÅ¯zi podÃ©l stÄn, vÃ½slednÃ© chovÃ¡nÃ­ ale zdaleka nedosahuje komplexnosti chovÃ¡nÃ­ napsanÃ©ho ÄlovÄkem. PodobnÃ© tvrzenÃ­ platÃ­ i o poÄÃ­taÄovÃ© hÅe Creatures, kterÃ¡ uvÃ¡dÃ­ virtuÃ¡lnÃ­ agenty, jejichÅ¾ chovÃ¡nÃ­ se rovnÄÅ¾ ÄÃ¡steÄnÄ uÄÃ­ neuronovÃ½mi sÃ­tÄmi [28] (tentokrÃ¡t bez pouÅ¾itÃ­ genetickÃ½ch algoritmÅ¯). Kniha PÅedpisÅ¯ je ve skuteÄnosti Äasto naprogramovanÃ¡ pÅÃ­mo v programovacÃ­m jazyce, jÃ­mÅ¾ je psanÃ¡ poÄÃ­taÄovÃ¡ hra (napÅ. C++), nebo v âpomocnÃ©mâ, tzv. skriptovacÃ­m jazyce, kterÃ½ zÃ¡kladnÃ­ jazyk doplÅuje (napÅ. Lua). SpecielnÄ pro rozhodovacÃ­ pravidla ale takÃ© existuje nÄkolik programÅ¯, kterÃ© umoÅ¾ÅujÃ­ takovÃ© Knihy psÃ¡t a pak v nich vyhledÃ¡vat â napÅÃ­klad reaktivnÃ­ plÃ¡novaÄ POSH [12], nÃ¡stroj Jess [26] nebo nÃ¡stroj Soar [57] (kterÃ½ toho ve skuteÄnosti umÃ­ mnohem vÃ­c). Jak vÃ­ kaÅ¾dÃ½, kdo nÄkdy potkal Å¡patnÃ©ho ÃºÅednÃ­ka, pomocÃ­ Knihy PÅedpisÅ¯ se mnoho problÃ©mÅ¯ vyÅeÅ¡it nedÃ¡. O omezenÃ­ tohoto pÅÃ­stupu se pÃ­Å¡e v [5]. O alternativÄ se doÄtete dÃ¡le."
43,343,0.547,Objektovo orientovanÃ© programovanie v C++,"PrvÃ©mu prÃ­padu sme sa uÅ¾ podrobne venovali v Äasti 7.3 a vieme, Å¾e prÃ­padnÃ½m problÃ©mom, ktorÃ© mÃ´Å¾u nastaÅ¥, sa vieme vyhnÃºÅ¥ pomocou kopÃ­rovacieho konÅ¡truktora. DruhÃ¡ situÃ¡cia je trochu odliÅ¡nÃ¡. V tomto prÃ­pade nejde o vytvÃ¡ranie objektu, preto sa ani nezavolÃ¡ nijakÃ½ konÅ¡truktor. Oba objekty uÅ¾ existujÃº a v okamihu priradenia sa objekt objekt1 stane presnou kÃ³piou objektu objekt2. MÃ¡me tu teda ÄalÅ¡Ã­ prÃ­pad, keÄ vznikÃ¡ presnÃ¡ kÃ³pia. Äo znamenÃ¡ vytvorenie presnej kÃ³pie a akÃ© Å¥aÅ¾kosti mÃ´Å¾e so sebou priniesÅ¥ uÅ¾ dobre vieme. V kapitole 5.5 sme si ukÃ¡zali prÃ­klad, keÄ priradenie medzi dvomi objektami a nÃ¡slednÃ¡ existencia dvoch navlas rovnakÃ½ch objektov spÃ´sobÃ­ krach programu. Na rozdiel od inÃ½ch prÃ­padov nÃ¡s v tejto situÃ¡cii nemÃ´Å¾e zachrÃ¡niÅ¥ ani kopÃ­rovacÃ­ konÅ¡truktor, keÄÅ¾e nijakÃ½ konÅ¡truktor sa tu nespÃºÅ¡Å¥a. Äo teda s tÃ½mto problÃ©mom? V kopÃ­rovacom konÅ¡truktore ide o to, Å¾e programu povieme, akÃ½m spÃ´sobom mÃ¡ vytvÃ¡raÅ¥ kÃ³pie objektu, aby nenastali Å¾iadne kolÃ­zie. Äo keby sme aj pri priraÄovanÃ­ povedali programu, ako mÃ¡ priraÄovaÅ¥, aby to bolo bezpeÄnÃ©? To je moÅ¾nÃ©, ak deï¬nujeme vlastnÃ½ operÃ¡tor priradenia, teda operÃ¡tor =. OperÃ¡tor priradenia sa v C++ deï¬nuje tak, Å¾e jeho parametrom je odkaz na objekt danej triedy a rovnakÃ©ho typu je aj nÃ¡vratovÃ¡ hodnota. OperÃ¡tor priradenia pre triedu moja trieda by teda mal takÃºto deklarÃ¡ciu moja trieda& operator=(moja trieda& objekt1);"
369,279,0.546,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 4.31. Vzor ZabezpeÄenia a odkladacie podmienky Ãºveru ZloÅ¾itosÅ¥ hypotekÃ¡rnych Ãºverov je dÃ´sledkom viacerÃ½ch skutoÄnosti: ï· Charakteru zabezpeÄenia â nehnuteÄ¾nosti sÃº evidovanÃ© v katastri nehnuteÄ¾nostÃ­ po tzv. listoch vlastnÃ­ctva, priÄom list vlastnÃ­ctva predstavuje pomerne komplikovanÃº Å¡truktÃºru umoÅ¾ÅujÃºcu evidenciu stavieb, pozemkov a ich vlastnÃ­kov. ï· Presnosti evidencie na katastri nehnuteÄ¾nostÃ­ â v obdobÃ­ socializmu doÅ¡lo k vyvlastneniu veÄ¾kÃ©ho mnoÅ¾stva nehnuteÄ¾nostÃ­, ktorÃ© po roku 1989, naopak, boli predmetom komplikovanÃ½ch reÅ¡titÃºciÃ­. NavyÅ¡e, evidencia nehnuteÄ¾nostÃ­ v katastri nehnuteÄ¾nostÃ­ bola v obdobÃ­ socializmu zanedbÃ¡vanÃ¡. K tomuto pristupujÃº rÃ´zne snahy o podvody, sÃºdne spory a pod. ï· NehnuteÄ¾nosti vo vÃ½stavbe â klient mÃ´Å¾e hypotekÃ¡rny Ãºver ÄerpaÅ¥ aj na nehnuteÄ¾nosÅ¥ vo vÃ½stavbe (naprÃ­klad rodinnÃ½ dom vo vÃ½stavbe), priÄom zakladÃ¡ postupne postavenÃ© Äasti nehnuteÄ¾nosti. V tomto prÃ­pade je potrebnÃ© posudzovaÅ¥ aj viacerÃ© Äasti projektovej dokumentÃ¡cie stavby. ï· Ohodnotenia sÃºÄasnej hodnoty nehnuteÄ¾nosti â hodnota nehnuteÄ¾nosti sa poÄÃ­ta podÄ¾a pomerne komplikovanÃ©ho vzorca, ktorÃ©ho parametrami sÃº v prÃ­pade stavby nielen jej vek, lokalita, plocha, ale aj pouÅ¾itÃ© materiÃ¡ly. OhodnocovaÅ¥ stavby mÃ´Å¾e iba znalec v odbore oceÅovania nehnuteÄ¾nostÃ­. ï· Ohodnotenie budÃºcej hodnoty nehnuteÄ¾nosti â aj keÄ hodnota nehnuteÄ¾nosti najÄastejÅ¡ie stÃºpa, hypotekÃ¡rna a finanÄnÃ¡ krÃ­za v rokoch 2008 a 2009 poskytuje dostatoÄ-"
265,328,0.546,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"dolÃ³gie vo fÃ¡ze ÃºdrÅ¾by mÃ´Å¾e byÅ¥ niekedy nÃ¡roÄnÃ©. NiektorÃ© techniky sÃº veÄ¾mi Å¥aÅ¾ko pouÅ¾iteÄ¾nÃ©, napr. fixnÃ¡ dÄºÅ¾ka Å¡printu (pretoÅ¾e chybu je potrebnÃ© odstrÃ¡niÅ¥ hneÄ), refaktoring kÃ³du medzi jednotlivÃ½mi iterÃ¡ciami (Äasto nemoÅ¾nÃ© pri pohotovostnej oprave), a pod. Podmienky sÃº eÅ¡te nÃ¡roÄnejÅ¡ie, ak tÃ­m pracuje na cudzom kÃ³de, prÃ­p. ak ide o ÃºdrÅ¾bu nejakÃ©ho zanechanÃ©ho systÃ©mu."
195,157,0.546,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"8.4 Zhrnutie V tejto prÃ¡ci sme sa venovali oblastnÃ½m Å¡tÃºdiÃ¡m v kontexte odporÃºÄacÃ­ch systÃ©mov v softvÃ©rovom inÅ¾inierstve. NaÅ¡Ã­m cieÄ¾om bolo ukÃ¡zaÅ¥, ako viesÅ¥ krok za krokom oblastnÃº Å¡tÃºdiu na vytvorenie odporÃºÄacÃ­ch systÃ©mov. Na zaÄiatku sme predstavili akÃ© metÃ³dy, metodolÃ³gie a epistemolÃ³gie sa vyuÅ¾Ã­vajÃº na vÃ½skum vÅ¡eobecne. Tento prehÄ¾ad a poznatky by nÃ¡m mali daÅ¥ urÄitÃº perspektÃ­vu a konzistenciu v oblastnej Å¡tÃºdii. Äalej sme opÃ­sali, akÃ© kroky zahÅÅajÃº vedenie oblastnej Å¡tÃºdie. Nakoniec sme zvÃ½raznili vÃ½zvy tohto procesu. OblastnÃ© Å¡tÃºdie sÃº jedinÃ½m spÃ´sobom, ako vÃ½skumnÃ­ci mÃ´Å¾u pochopiÅ¥ oblasti svojho zÃ¡ujmu a navrhnÃºÅ¥ technickÃ© rieÅ¡enia pre reÃ¡lne potreby praktikantov. Bolo zistenÃ©, Å¾e technickÃ© vÃ½zvy sa Ä¾ahko prekonÃ¡vajÃº, za to sociÃ¡lne, organizaÄnÃ© a poznÃ¡vacie vÃ½zvy sÃº tie, ktorÃ© robia prijatie a pouÅ¾itie odporÃºÄacie systÃ©mu Å¥aÅ¾Å¡Ã­m. Preto je potrebnÃ© viesÅ¥ viac oblastnÃ½ch Å¡tÃºdiÃ­ na prekonÃ¡vanie tÃ½chto problÃ©mov a navrhnÃºÅ¥ ich rieÅ¡enia. KombinÃ¡cia softvÃ©rovÃ©ho inÅ¾inierstva, strojovÃ©ho uÄenia a dolovania dÃ¡t vie pomÃ´cÅ¥ prÃ­stupu k veÄ¾kÃ½m dÃ¡tam a hÄºbkovej analÃ½ze. Preto by odporÃºÄacie systÃ©my nemali byÅ¥ vytvorenÃ© obmedzenÃ½m poÄtom offline experimentov. Potrebujeme pochopiÅ¥ zÃ¡kladnÃ© pojmy a skÃºmaÅ¥ ich s dostupnÃ½mi dÃ¡tami a modelmi. V tomto zmysle sÃº oblastnÃ© Å¡tÃºdie jedinÃ½m spÃ´sobom k prekonaniu limitov a predpokladov."
130,75,0.546,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"DÃ´sledky Zmena sprÃ¡vania objektu jej obalenÃ­m inÃ½m objektom, dekoratÃ©rom mÃ´Å¾e vÃ½znamne zjednoduÅ¡iÅ¥ hierarchiu tried za cenu malÃ©ho skomplikovania kÃ³du. RozÅ¡Ã­renie alebo utlmenie nejakÃ©ho Å¡pecifickÃ©ho sprÃ¡vania viacerÃ½ch objektov sa rieÅ¡i namiesto vytvorenia viacerÃ½ch podtried pomocou implementÃ¡cie jednej triedy DekoratÃ©r, ktorÃ¡ zabezpeÄÃ­ zmenu sprÃ¡vania vÅ¡etkÃ½ch objektov s poÅ¾adovanÃ½m rozhranÃ­m."
190,358,0.545,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KaÅ¾dÃ¡ snaha, aktivita Äi samotnÃ¡ prÃ¡ca so sebou prinÃ¡Å¡a urÄitÃº ÃºroveÅ nejasnostÃ­ ohÄ¾adne toho, ako sa bude postupne vyvÃ­jaÅ¥, resp. akÃ© vÃ½sledky prinesie. Podobne je to aj pri vÃ½voji softvÃ©rovÃ©ho systÃ©mu. S kaÅ¾dÃ½m ÄalÅ¡Ã­m krokom vÃ½voja, s kaÅ¾dÃ½m novÃ½m nÃ¡vrhom a podnetom sÃºvisia rizikÃ¡, ktorÃ© tieto kroky sprevÃ¡dzajÃº. Samozrejme, vÅ¡eobecnou snahou, moÅ¾no rizikÃ¡ eliminovaÅ¥, resp. Äo najviac obmedziÅ¥. AvÅ¡ak ÃºplnÃ© vyradenie vÅ¡etkÃ½ch moÅ¾nÃ½ch rizÃ­k je takmer nemoÅ¾nÃ©. Preto je nutnÃ© pozrieÅ¥ sa na rizikovÃ© oblasti z druhej strany, to znamenÃ¡, snaÅ¾iÅ¥ sa ich odhadnÃºÅ¥ a predvÃ­daÅ¥ a nÃ¡sledne ich Äo najefektÃ­vnejÅ¡ie riadiÅ¥. PodÄ¾a mÃ´jho nÃ¡zoru je oveÄ¾a lepÅ¡ie maÅ¥ v projekte viac rizÃ­k, nad ktorÃ½mi mÃ¡me kontrolu, ako menej takÃ½ch rizÃ­k, o ktorÃ½ch nevieme. V kontexte tÃ­movÃ©ho projektu (projekt na univerzite, ktorÃ½ mÃ¡ spravidla Å¡esÅ¥ Älenov) nadobÃºda oblasÅ¥ rizÃ­k ÄalÅ¡ie rozmery spojenÃ© s manaÅ¾mentom tÃ­mu a komunikÃ¡ciou v tÃ­me. VÃ¤ÄÅ¡ina softvÃ©rovÃ½ch projektov sa vyvÃ­ja v podmienkach, ktorÃ© nie sÃº vÅ¾dy Ãºplne predvÃ­dateÄ¾nÃ© a v ktorÃ½ch existuje veÄ¾a faktorov, ktorÃ© mÃ´Å¾u ovplyvniÅ¥ vÃ½slednÃ½ produkt. Projekt povaÅ¾uje za ÃºspeÅ¡nÃ½ vtedy, ak spÄºÅa poÅ¾iadavky (funkcionalitu, spoÄ¾ahlivosÅ¥, udrÅ¾ovateÄ¾nosÅ¥, rozÅ¡Ã­riteÄ¾nosÅ¥, efektivita, schopnosÅ¥ zaÄleniÅ¥ sa do vÃ¤ÄÅ¡ieho projektu a schopnosÅ¥ prevÃ¡dzkovaÅ¥ systÃ©m v danÃ½ch podmienkach), dokonÄÃ­ sa v danom termÃ­ne a v rÃ¡mci stanovenÃ©ho rozpoÄtu [6]. VÃ½skum v [4], ukazuje, Å¾e len jedna Å¡estina vÅ¡etkÃ½ch projektov bola ukonÄenÃ¡ naÄas a v rÃ¡mci danÃ©ho rozpoÄtu, jedna tretina projektov bola zruÅ¡enÃ¡ a viac ako polovica priniesla len obmedzenÃ© vÃ½sledky. V Å¡tÃºdii [3] sa ukÃ¡zalo, Å¾e hlavnÃº Ãºlohu vo vysokej neÃºspeÅ¡nosti projektov zohrÃ¡vajÃº projektovÃ­ manaÅ¾Ã©ri, ktorÃ­ v prvÃ½ch fÃ¡zach projektu nedostatoÄne zohÄ¾adÅujÃº moÅ¾nÃ© rizikÃ¡ vyplÃ½vajÃºce z projektu. Po- NeÃºspeÅ¡nosÅ¥ tvrdzuje to tieÅ¾ Å¡tatistika, ktorÃ¡ ukazuje, Å¾e asi tretina projektov sa ukonÄÃ­ projektov Äasto s neÃºspechom aÅ¾ vo fÃ¡ze implementÃ¡cie. Preto je dnes jasnÃ©, Å¾e manaÅ¾- spÃ´sobujÃº projektovÃ­ manaÅ¾Ã©ri ment rizÃ­k musÃ­ byÅ¥ samozrejmou sÃºÄasÅ¥ou prÃ¡ce v tÃ­movom projekte."
59,406,0.544,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ï¨ p ï q ï© ï ï¨ q ï r ï© ï ï ï¨ p ï r ï© , ak sa nÃ¡m podarÃ­ ukÃ¡zaÅ¥, Å¾e prÃ­sluÅ¡nÃ© sÃ©mantickÃ© tablo mÃ¡ vÅ¡etky vetvy uzavretÃ©, potom platÃ­ relÃ¡cia ï» p ï q,q ï rï½ ï¨ p ï r ï© , pozri Obr. 7.3. PrÃ­klad 7.6. Pomocou sÃ©mantickÃ©ho tabla budeme hÄ¾adaÅ¥ zÃ¡ver z teÃ³rie ï ï½ ï» p ï q, p ï rï½ , t. j. budeme rieÅ¡iÅ¥ relÃ¡ciu ï ï½ ï» p ï q, p ï rï½ . VÃ½sledky sÃº znÃ¡zornenÃ© na Obr. 7.4, potom teÃ³ria ï ï½ ï» p ï q, p ï rï½ mÃ¡ Å¡tyri rÃ´zne interpretÃ¡cie â modely, pre ktorÃ© sÃº predpoklady teÃ³rie pravdivÃ© ï´1 ï½ ï¨ p 0 ,q ?, r ?ï©"
76,333,0.544,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"7.2.4 PoznÃ¡mka. PrÃ¡ve sme ukÃ¡zali, Å¾e vieme rozhodnÃºÅ¥, ktorÃ½ z dvoch uvaÅ¾ovanÃ½ch nevychÃ½lenÃ½ch odhadov je lepÅ¡Ã­. Rovnako by sme vybrali najlepÅ¡Ã­ spomedzi troch, Äi Å¡tyroch nevychÃ½lenÃ½ch odhadov. PokiaÄ¾ sa obmedzÃ­me na nevychÃ½lenÃ© odhady, tak nÃ¡jsÅ¥ najlepÅ¡Ã­ nevychÃ½lenÃ½ odhad znamenÃ¡ nÃ¡jsÅ¥ ten z nich, ktorÃ©ho variancia je (spomedzi vÅ¡etkÃ½ch nevychÃ½lenÃ½ch odhadov) najmenÅ¡ia moÅ¾nÃ¡. TÃ¡to problematika vÅ¡ak uÅ¾ presahuje rÃ¡mec tohoto textu. Nakoniec poznamenajme, Å¾e mierne vychÃ½lenÃ½ odhad ( ) nie je treba ignorovaÅ¥, pokiaÄ¾ jeho MSE( ) je menÅ¡ia ako variancia konkurenÄnÃ©ho nevychÃ½lenÃ©ho odhadu, pretoÅ¾e MSE( ) je vskutku dobrÃ½ ukazovateÄ¾ kvality odhadu. 7.2.5 PrÃ­klad. Nech odhadoch parametrov"
40,93,0.543,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Pokud je nÃ¡Å¡ Å¡patnÃ½ ÃºÅednÃ­k svÄdomitÃ½, mÅ¯Å¾e se stÃ¡t, Å¾e jej povÃ½Å¡Ã­ a pÅestÄhuje se do velkÃ© kancelÃ¡Åe s velkÃ½m stolem, poÄÃ­taÄem, tiskÃ¡rnou, registraturou na Å¡anony a akvÃ¡riem. Zde jiÅ¾ ÃºÅednÃ­k potÅebuje znÃ¡t vÃ­ce cest neÅ¾ jen od svÃ© Å¾idle ke dveÅÃ­m. MusÃ­ umÄt zajÃ­t si pro vytisknutÃ© dokumenty, odtud je zanÃ©st do registratury a Äas od Äasu nakrmit rybiÄky. V hlavÄ tedy nosÃ­ jakousi mapu kancelÃ¡Åe, do kterÃ© mÃ¡ zaznaÄeno, jak pÅechÃ¡zet mezi jednotlivÃ½mi mÃ­sty (obr. 13). VÅ¡imnÄme si, Å¾e pro samotnÃ½ pohyb jsou dÅ¯leÅ¾itÃ¡ pouze mÃ­sta a cesty â z obrÃ¡zku by klidnÄ mohl zmizet stÅ¯l Äi podstavec s akvÃ¡riem. K samotnÃ©mu pohybu nepotÅebujeme vÄdÄt, Å¾e obchÃ¡zÃ­me stÅ¯l nebo Å¾e se vyhÃ½bÃ¡me podstavci s akvÃ¡riem, dÅ¯leÅ¾itÃ¡ je pro nÃ¡s pouze informace cest, po kterÃ½ch se mÅ¯Å¾eme bezpeÄnÄ pohybovat. JinÃ½mi slovy nÃ¡Å¡ ÃºÅednÃ­k nepotÅebuje vidÄt, staÄÃ­ mu chodit po pamÄti (pÅedstavte si, Å¾e jdete v noci na zÃ¡chod a praskla Å¾Ã¡rovka). ProblÃ©m s mapou na obr. 13 je, Å¾e poÄet cest je kvadratickÃ½ vzhledem k poÄtu vrcholÅ¯ â musÃ­me se umÄt dostat odkudkoli kamkoli (snad aÅ¾ na triviÃ¡lnÃ­ cesty typu akvÃ¡rium â akvÃ¡rium). Pokud bychom chtÄli do takovÃ©hoto grafu zahrnout i kancelÃ¡Åe podÅÃ­zenÃ½ch, neÅku-li celou budovu ÃºÅadu, dostaneme se rychle do problÃ©mÅ¯. UrÄitÄ vÃ¡s napadÃ¡ jednoduchÃ½ trik. BliÅ¾Å¡Ã­m pohledem na cesty v kancelÃ¡Åi zjistÃ­me, Å¾e cesta od Å¾idle ÃºÅednÃ­ka k tiskÃ¡rnÄ je velice podobnÃ¡ cestÄ k akvÃ¡riu, liÅ¡Ã­ se jen dodateÄnÃ½m krokem k akvÃ¡riu. MÅ¯Å¾eme tedy zruÅ¡it cestu Å¾idle â akvÃ¡rium a zapamatujeme si, Å¾e cesta od Å¾idle k akvÃ¡riu vede pÅes tiskÃ¡rnu. PodobnÃ½m zpÅ¯sobem upravÃ­me vÅ¡echny cesty, kterÃ© majÃ­ nÄkterÃ© ÄÃ¡sti spoleÄnÃ© (obr. 14). Vznikne nÃ¡m tak graf, kterÃ©mu se ÅÃ­kÃ¡ navigaÄnÃ­, a jeho vrcholy se oznaÄujÃ­ jako navigaÄnÃ­ body (âway pointsâ nebo takÃ© ânavigation pointsâ Äi zkrÃ¡cenÄ ânavpointsâ). OdpovÄÄ na otÃ¡zku âkudy mÃ¡ agent jÃ­t?â se tak mÄnÃ­ na Ãºkol nalezenÃ­ cesty v grafu z vÃ½chozÃ­ho mÃ­sta do poÅ¾adovanÃ©ho cÃ­le. ObecnÄ se jednÃ¡ o Ãºlohu nalezenÃ­ nejkratÅ¡Ã­ cesty v grafu s kladnÃ½m ohodnocenÃ­m hran. Ãlohu mÅ¯Å¾eme ÅeÅ¡it napÅÃ­klad pomocÃ­ Dijkstrova algoritmu [18], A* [52] Äi FloydWarshallovÃ½m algoritmem [17]. Mohlo by se zdÃ¡t, Å¾e takovÃ½to graf je vÅ¡e, co nÃ¡Å¡ virtuÃ¡lnÃ­ agent potÅebuje k bezpeÄnÃ©mu pohybu po ÃºÅadÄ. AvÅ¡ak opak je pravdou. NÃ¡Å¡ graf je totiÅ¾ statickÃ½; je vytvoÅen s pÅedstavou, Å¾e zdi kancelÃ¡Åe se nezmÄnÃ­ pÅes noc, nÃ¡bytkem nikdo nebude hÃ½bat a po cestiÄkÃ¡ch se nebudou pohybovat jinÃ­ ÃºÅednÃ­ci. Co kdyÅ¾ ale stejnÃ½ graf vyuÅ¾Ã­vÃ¡ vÃ­cero ÃºÅednÃ­kÅ¯ a stÅetnou se na chodbÄ? Zde je jeÅ¡tÄ pomoc jednoduchÃ¡: zkombinujeme hledÃ¡nÃ­ cesty v grafu s navigaÄnÃ­mi pravidly popsanÃ½mi vÃ½Å¡e. Ale co kdyÅ¾ nÄjakÃ½ zlomyslnÃ­k schvÃ¡lnÄ Å¡oupne v noci se stolem uprostÅed kancelÃ¡Åe a pÅehradÃ­ cestu v grafu? Co kdyÅ¾ dojde k pÅestavbÄ ÃºÅadu a do kancelÃ¡Åe povedou novÃ© dveÅe nebo starÃ© budou zazdÄny? Ukazuje se, Å¾e nÃ¡Å¡ Å¡patnÃ½ ÃºÅednÃ­k bude opÄt chytÅejÅ¡Ã­ neÅ¾ virtuÃ¡lnÃ­ agent. ÃÅednÃ­k si jednoduÅ¡e pÅestavÃ­ svou mapu v hlavÄ a pÅizpÅ¯sobÃ­ se novÃ½m podmÃ­nkÃ¡m. Toto âpÅizpÅ¯sobenÃ­â agentÅ¯m jiÅ¾ jde hÅ¯Åe, ale i je dokÃ¡Å¾eme nauÄit, aby svÅ¯j graf umÄli revidovat (viz dÃ¡le)."
369,289,0.542,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Faktoring je prÃ­kladom bankovÃ©ho produktu, ktorÃ½ kombinuje Ärty bankovÃ½ch Ãºverov, obchodovania a platobnÃ©ho styku. Faktoring predstavuje financovanie krÃ¡tkodobÃ½ch pohÄ¾adÃ¡vok z obchodnÃ©ho styku. ZvyÄajne sa uplatÅuje pri zahraniÄnom obchode, pri ktorom chce maÅ¥ exportnÃ¡ firma zÃ¡ruku, Å¾e dostane za svoj tovar zaplatenÃ©. Faktoring mÃ¡ z hÄ¾adiska exportnej firmy tieto funkcie: 1. ZabezpeÄenie inkasa pohÄ¾adÃ¡vok â banka alebo inÃ¡ faktoringovÃ¡ spoloÄnosÅ¥ odkupuje od exportnej firmy pohÄ¾adÃ¡vky (faktÃºry) aÅ¾ do Åou schvÃ¡lenÃ©ho limitu (60 % aÅ¾ 90 %) a zabezpeÄuje v spoluprÃ¡ci s faktoringovou spoloÄnosÅ¥ou v krajine importÃ©ra Ãºhradu tÃ½chto pohÄ¾adÃ¡vok. Po obdrÅ¾anÃ­ peÅazÃ­ faktoringovÃ¡ spoloÄnosÅ¥ uhradÃ­ dodÃ¡vateÄ¾ovi zvyÅ¡nÃº ÄasÅ¥ hodnoty pohÄ¾adÃ¡vok. 2. RuÄenie â faktoringovÃ¡ spoloÄnosÅ¥ preberÃ¡ riziko platobnej neschopnosti importÃ©ra. Pri platobnej neschopnosti importÃ©ra faktoringovÃ¡ spoloÄnosÅ¥ uhradÃ­ exportÃ©rovi hodnotu pohÄ¾adÃ¡vky a sama (resp. v spoluprÃ¡ci s faktoringovou spoloÄnosÅ¥ou v krajine importÃ©ra) zabezpeÄuje vymÃ¡hanie pohÄ¾adÃ¡vok od importÃ©ra. 3. Prefinancovanie â faktÃºry v zahraniÄnom obchode majÃº dlhÃ½ Äas splatnosti, zvyÄajne 90 dnÃ­. FaktoringovÃ¡ spoloÄnosÅ¥ preplatÃ­ 60 % aÅ¾ 90 % hodnoty faktÃºry (znÃ­Å¾enÃº o spracovateÄ¾skÃ½ poplatok) zvyÄajne do 24 hodÃ­n, Äo umoÅ¾Åuje exportÃ©rovi okamÅ¾ite tieto peniaze pouÅ¾iÅ¥. UvedenÃ¡ funkcia mÃ¡ podobnÃ© Ärty ako poskytnutie krÃ¡tkodobÃ©ho Ãºveru."
190,140,0.542,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"VeÄ¾mi dÃ´leÅ¾itÃ½m aspektom, na ktorÃ½ musÃ­me neustÃ¡le pri tvorbe plÃ¡nu prihliadaÅ¥, je rozsah projektu, pre ktorÃ½ plÃ¡n zostavujeme. Zostavovanie plÃ¡nu bez ohÄ¾adu na rozsah projektu je zÃ¡sadnou chybou, ktorÃ¡ s najvÃ¤ÄÅ¡ou pravdepodobnosÅ¥ou vyÃºsti do vytvorenia prakticky nepouÅ¾iteÄ¾nÃ©ho plÃ¡nu, ktorÃ½ bude slÃºÅ¾iÅ¥ iba ako ÄalÅ¡ia dokumentÃ¡cia a alibi pre manaÅ¾Ã©rov, keÄ sa ich niekto spÃ½ta na to, Äo robili. Tu sa mÃ´Å¾eme stretnÃºÅ¥ s dvoma extrÃ©mami. Ak podcenÃ­me rozsah projektu, mÃ´Å¾eme sa dostaÅ¥ do situÃ¡cie, kedy navrhnutÃ½ plÃ¡n ani zÄaleka nepokrÃ½va potreby projektu, a teda je vysokÃ¡ pravdepodobnosÅ¥, Å¾e sa pri rieÅ¡enÃ­ projektu na nieÄo zabudne. SkÃ´r Äi neskÃ´r tak narazÃ­me na komplikÃ¡cie, ktorÃ© mÃ´Å¾u zÃ¡sadne ovplyvniÅ¥ celÃ½ priebeh rieÅ¡enia. TakÃ½to plÃ¡n vÃ¤ÄÅ¡inou vyÃºsti do oneskorenÃ©ho ukonÄenia projektu a s tÃ½m spojnÃ½m zvyÅ¡ovanÃ­m"
135,273,0.541,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â SISD (angl. Single Instruction Single Data) â tradinÃ© PC, â SIMD (angl. Single Instruction Multiple Data) â vektorovÃ© PC, â MISD (angl. Multiple Instruction Single Data) â viacerÃ© innosti nad jednÃ½mi Ãºdajmi, â MIMD (angl. Multiple Instruction Multiple Data) â rieÅ¡enie nezÃ¡vislÃ½ch Ãºloh, resp. Ãºloh rozdelitenÃ½ch do samostatnÃ½ch procesov. JednoduchÃ© paralelnÃ© problÃ©my, nazÃ½vanÃ© aÅ¾ triviÃ¡lne, i âtrÃ¡pneâ, sa vemi dobre nasadzujÃº na paralelnÃ© spracovanie. MajÃº totiÅ¾ sÃºbeÅ¾nÃ© rieÅ¡enie pomocou sady nezÃ¡vislÃ½ch"
94,128,0.541,Sprievodca svetom vedeckÃ©ho publikovania,"antivakcinaÄnÃ©ho hnutia. AntivakcinaÄnÃ© hnutia existovali uÅ¾ od poÄiatkov oÄkovania a zdÃ´vodÅovali odpor voÄi tejto preventÃ­vnej praxi rÃ´zne, vÃ¤ÄÅ¡inou nÃ¡boÅ¾ensky alebo politicky (povinnÃ© oÄkovanie vnÃ­mali ako nedÃ´veru v boÅ¾iu ochranu, alebo ako naruÅ¡enie osobnej slobody), bez odbornÃ½ch argumentov. NovÃ½ vietor do plachiet im dodal ÄlÃ¡nok Andrewa Wakefielda, ktorÃ½ vyÅ¡iel v roku 1998 v znÃ¡mom lekÃ¡rskom Äasopise Lancet. V recenznom konanÃ­ preÅ¡iel ÄlÃ¡nok rukami Å¡iestich hodnotiteÄ¾ov. VychÃ¡dzajÃºc z prÃ­padovej Å¡tÃºdie dvanÃ¡stich detÃ­ Wakefield vyslovil domnienku, Å¾e vakcÃ­na MMR (proti osÃ½pkam, prÃ­uÅ¡niciam a ruÅ¾ienke) spÃ´sobuje autizmus prostrednÃ­ctvom poÅ¡kodenia Ärevnej vÃ½stelky. V skutoÄnosti napÃ­sal, Å¾e vÃ½skum tÃºto sÃºvislosÅ¥ priamo nedokazuje. Iba ju celÃ½ Äas naznaÄoval, podporil 20-minÃºtovÃ½m sugestÃ­vnym videom a tlaÄovou konferenciou. Autizmus sa u detÃ­ zaÄÃ­na prejavovaÅ¥ spravidla medzi prvÃ½m a druhÃ½m rokom, Äo je aj vek oÄkovania MMR vakcÃ­nou. MnohÃ­ rodiÄia, zÃºfalo hÄ¾adajÃºci prÃ­Äinu stavu, ktorÃ½ im lekÃ¡ri nedokÃ¡zali uspokojivo vysvetliÅ¥, odrazu mali koho obviniÅ¥. AntivakcinaÄnÃ© hnutie zaÄalo ÄlÃ¡nok pouÅ¾Ã­vaÅ¥ ako argument, hoci nasledujÃºce, metodicky robustnejÅ¡ie epidemiologickÃ© Å¡tÃºdie (1999, 2001 a ÄalÅ¡ie, z novÅ¡Ã­ch napr. Jain et al. (2015)) Wakefieldove domnienky nepotvrdili (Plotkin et al. 2009). KontroverznÃ¡ diskusia o vzÅ¥ahu MMR vakcÃ­n a autizmu vÅ¡ak pokraÄovala. Po podozreniach z podvodu oslovil Lancet v roku 2004 nemocnicu, kde Wakefield vÃ½skum uskutoÄnil, aby preskÃºmala jeho podklady. Nemocnica nenaÅ¡la Å¾iadne pochybenia, okrem nepriznanÃ©ho konfliktu zÃ¡ujmov â eÅ¡te pred vÃ½skumom dostal Wakefield financie od prÃ¡vnych zÃ¡stupcov rodiÄov, ktorÃ­ Å¾alovali vÃ½robcu MMR vakcÃ­ny a existujÃº pÃ­somnÃ© doklady, Å¾e mal v Ãºmysle patentovaÅ¥ si vlastnÃº vakcÃ­nu. DesaÅ¥ (z dvanÃ¡stich) spoluautorov sa v roku 2004 od tvrdenÃ­ vo Wakefieldovom ÄlÃ¡nku diÅ¡tancovalo tak, Å¾e uverejnili âstiahnutie interpretÃ¡cieâ (Murch et al. 2004). AÅ¾ vyÅ¡etrovanie NajvyÅ¡Å¡ej lekÃ¡rskej rady (General Medical Council) v roku 2010 usvedÄilo Wakefielda z poruÅ¡enia etiky vo vzÅ¥ahu k detskÃ½m pacientom (museli okrem inÃ©ho podstÃºpiÅ¥ lumbÃ¡lnu punkciu, kolonoskopiu a kontrastnÃ© vyÅ¡etrenie s poÅ¾itÃ­m bÃ¡ria, niektorÃ­ z nich bez medicÃ­nskej prÃ­Äiny) a podvodu (tvrdenia o spÃ´sobe vÃ½beru pacientov a aj inÃ© Ãºdaje v ÄlÃ¡nku boli v rozpore s dokumentÃ¡ciou), Äo ho stÃ¡lo lekÃ¡rsku licenciu. AÅ¾ vtedy Äasopis Lancet ÄlÃ¡nok definitÃ­vne stiahol. Ani to vÅ¡ak nebrÃ¡ni antivakcinaÄnÃ©mu hnutiu Äalej zavÃ¡dzaÅ¥ verejnosÅ¥ o vzÅ¥ahu autizmu a oÄkovania. NÃ¡sledky sÃº viditeÄ¾nÃ© uÅ¾ dnes â pokles kolektÃ­vnej imunity vedie k vypuknutiu lokÃ¡lnych epidÃ©miÃ­ chorÃ´b, ktorÃ© boli vÄaka oÄkovaniu v rozvinutÃ½ch krajinÃ¡ch takmer vyhubenÃ©. V oblasti fyziky patrÃ­ k najznÃ¡mejÅ¡Ã­m prÃ­padom falÅ¡ovania vÃ½sledkov Jan Hendrik SchÃ¶n, nemeckÃ½ vedec-podvodnÃ­k (Reich 2009), laureÃ¡t prestÃ­Å¾nych ocenenÃ­, ktorÃ½ v roku 2001 zaÄal tvrdiÅ¥, Å¾e vyrobil organickÃ½ tranzistor. Publikoval o Åom mnoho ÄlÃ¡nkov v Nature, Science, Äi Physical Letters. LaboratÃ³riÃ¡ po celom svete sa ho mÃ¡rne snaÅ¾ili napodobniÅ¥, aÅ¾ si jedna vedkyÅa vÅ¡imla, Å¾e v experimentoch pri rÃ´znych teplotÃ¡ch nameral celkom rovnakÃ½ Å¡um. Aj inÃ­ zaÄali kriticky skÃºmaÅ¥ detaily jeho prÃ¡ce. KeÄ jeho zamestnÃ¡vateÄ¾ (Bellove laboratÃ³riÃ¡) v roku 2002 spustil kontrolu, J. SchÃ¶n tvrdil, Å¾e nemÃ¡ laboratÃ³rne knihy a chÃ½bajÃºce zÃ¡znamy v poÄÃ­taÄi vysvetÄ¾oval nedostatkom pamÃ¤Å¥ovej kapacity na uchovanie dÃ¡t z experimentov. PriÅ¡iel o zamestnanie, dokonca aj o titul PhD, ÄlÃ¡nky boli stiahnutÃ©. No vÃ¤ÄÅ¡iu hanbu neÅ¾ podvodnÃ­k zaÅ¾Ã­vali redakcie Äasopisov, ktorÃ© sa nechali oklamaÅ¥ a boli dokonca ochotnÃ© naruÅ¡iÅ¥ svoje zauÅ¾Ã­vanÃ© postupy, aby atraktÃ­vne novinky z jeho dielne vydÃ¡vali rÃ½chlejÅ¡ie. J. SchÃ¶n praktizoval vedu odzadu â pri rozhovoroch s kolegami"
111,49,0.54,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Äo ak mÃ¡m Å¡tandardizovanÃº kategÃ³riu s nÃ­zkou mierou zhody? Miera zhody sa povaÅ¾uje za vysokÃº, ak je vyÅ¡Å¡ia ako 60%. TakÃ©to Å¡tandardizovanÃ© kategÃ³rie moÅ¾no zvyÄajne povaÅ¾ovaÅ¥ za osvedÄenÃ© a pouÅ¾Ã­vaÅ¥ ich ako definitÃ­vnych reprezentantov konceptov. Äo vÅ¡ak v prÃ­pade, ak je miera zhody niÅ¾Å¡ia? PodrobnejÅ¡ie sa pozrite na karty, ktorÃ© respondenti priradili ku kategÃ³rii. MoÅ¾no nÃ¡jdete ÄiastkovÃ© skupiny respondentov, ktorÃ­ tÃºto kategÃ³riu koncipovali odliÅ¡ne. NaprÃ­klad, v Å¡tandardizovanej kategÃ³rii so 40% zhodou mÃ´Å¾ete zistiÅ¥, Å¾e traja respondenti nikdy nezahrnuli dve z kariet, ktorÃ© mali vÅ¡etci ostatnÃ­ respondenti. ZruÅ¡te toto zoskupenie a prerobte ho na dve samostatnÃ© Å¡tandardizovanÃ© kategÃ³rie, priÄom spomÃ­nanÃ­ traja respondenti dostanÃº vlastnÃ© Å¡tandardizovanÃ© kategÃ³rie. Zrazu zÃ­skate 70% ÃºroveÅ zhody a dve kategÃ³rie, ktorÃ© vÃ¡m povedia nieÄo o dvoch rÃ´znych spÃ´soboch uvaÅ¾ovania o podobnÃ½ch konceptoch. Å tandardizacÌnÃ¡ mrieÅ¾ka"
190,245,0.54,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"VidÃ­me teda, Å¾e ak chceme zvÃ½Å¡iÅ¥ pravdepodobnosÅ¥ Ãºspechu nÃ¡Å¡ho projektu, plÃ¡novanie musÃ­ tvoriÅ¥ jeho neoddeliteÄ¾nÃº sÃºÄasÅ¥. AvÅ¡ak to neznamenÃ¡, Å¾e plÃ¡novanie priamo Ãºspech zaruÄÃ­. Bez neho je len vÃ½voj komplikovanejÅ¡Ã­ a neistejÅ¡Ã­."
115,197,0.54,Algebra a diskrÃ©tna  matematika,"paralelnÃ© zapojenie â sÃºÄet premennÃ½ch, 156 paralelnÃ© spracovanie, 230, 301 Pascal, Blaise, 81 Pascalov trojuholnÃ­k, 81, 82-83, 85 Pascalova identita, 82 Peano, Giuseppe, 20 permutÃ¡cia, 88, 152, 216, 260, 317 â ako bijekcia, 88, 215 â ako postupnosÅ¥ Å¥ahov piÅ¡kvoriek, 294 â derangementÃ¡lna, 117-118 â, generovanie, 88, 89 â, grupa, 133-135 â s opakovanÃ­m, 92, 93 â, strom konÅ¡trukcie, 90 â, sÃºÄin, 134-135 Petersen, Julius, 264 Petersenov graf, 264, 266 Pisano, Leonardo, nazÃ½vanÃ½ Fibonacci, 102 piÅ¡kvorky, 288-295 planÃ¡rna (rovinnÃ¡) reprezentÃ¡cia grafu, 260261 planÃ¡rny graf, 260-264, 267, 274 plÃ¡novanie udalostÃ­, graf, 230 plne n-Ã¡rny strom, 280-281 poÄet rieÅ¡enÃ­ sÃºstavy lineÃ¡rnych rovnÃ­c, 206208 â, 1 rieÅ¡enie, 206-208 â, nekoneÄne veÄ¾a rieÅ¡enÃ­, 206-208 â, nemÃ¡ rieÅ¡enie, 206-208 poÄÃ­taÄovÃ©, transportnÃ© siete, 228, 237, 257, 305, 308 podgraf, 234, 237, 263, 266, 279, 308, 310 podgrupa, 131-132, 135, 136, 142 podgrupa, triviÃ¡lna, 131 podmnoÅ¾ina, 13, 32-33, 37, 40, 53-54, 67, 91, 131, 132, 142, 233 podmonoid, 142 podstrom, 279 pohyb v stavovom priestore hry, 292 pojem, elementÃ¡rny, 2, 29, 30 âpokrytieâ klauzÃºl, 167-171 pokrytie prvku, 64, 167"
59,207,0.539,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ProblÃ©m 3.18. Pomocou Algoritmu 3 zostrojte vÅ¡etky moÅ¾nÃ© maximÃ¡lne foldingy (s maximÃ¡lnym poÄtom spÃ¡rovanÃ½ch komplemntÃ¡rnych dvojÃ­c) pre danÃ½ binÃ¡rny reÅ¥azec x ï ï»0,1ï½ . ProblÃ©m 3.19. Ako je Å¡pecifikovanÃ¡ vÃ¤zenskÃ¡ dilema? Ako je definovanÃ¡ stratÃ©gia s pamÃ¤Å¥ou predchÃ¡dzajÃºcej Å¥ahu protihrÃ¡Äa? ZovÅ¡eobecnite tÃºto stratÃ©giu pre pamÃ¤Å¥ predchÃ¡dzajÃºcich dvoch Å¥ahov sÃºpera. ProblÃ©m 3.20. NapÃ­Å¡te algoritmus v pseudokÃ³de, ktorÃ½ pre danÃ© dve stratÃ©gie"
59,117,0.539,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"3.3 Hollandov genetickÃ½ algoritmus GenetickÃ© algoritmy boli vynÃ¡jdenÃ© informatikom Johnom Hollandom [25] poÄiatkom 70. rokov minulÃ©ho storoÄia. Po urÄitej nÃ¡behovej 10-roÄnej periÃ³de rozpakov a mlÄania v komunite informatikov, stali sa jednou z najbÃºrlivejÅ¡ie rozvÃ­jajÃºcich sa oblastÃ­ informatiky a umelej inteligencie [15,37]. MoÅ¾no konÅ¡tatovaÅ¥, Å¾e spolu s neurÃ³novÃ½mi sieÅ¥ami tvoria jadro novovznikajÃºcej oblasti nazÃ½vanej poÄÃ­taÄovÃ¡ inteligencia, ktorÃ¡ je schopnÃ¡ rieÅ¡iÅ¥ praktickÃ© inÅ¾inierske problÃ©my z informaÄnÃ½ch technolÃ³giÃ­, ktorÃ© vyÅ¾adujÃº vysokÃ½ stupeÅ âinteligencie1â. V tejto podkapitole ukÃ¡Å¾eme zÃ¡kladnÃ© princÃ­py genetickÃ½ch algoritmov. GenetickÃ½ algoritmus nemanipuluje priamo so Å¾ivÃ½mi organizmami, ale s ich genetickou reprezentÃ¡ciou. PÃ´vodnÃ½ Hollandov nÃ¡zov pre tÃºto reprezentÃ¡ciu bol âchromozÃ³mâ, Å¾iaÄ¾ tÃ¡to pÃ´vodnÃ¡ terminolÃ³gia vyvolÃ¡vala medzi biolÃ³gmi rÃ´zne asociÃ¡cie s Äisto biologickÃ½m vÃ½znamom tohto termÃ­nu, ktorÃ© nesÃºviseli s problematikou genetickÃ©ho algoritmu, preto budeme tieto informaÄnÃ© entity nazÃ½vaÅ¥ âreplikÃ¡toryâ. Postulujme, Å¾e replikÃ¡tory majÃº schopnosÅ¥ sa rozmnoÅ¾ovaÅ¥ â replikovaÅ¥, a to buÄ unÃ¡rne (asexuÃ¡lne) alebo binÃ¡rne (sexuÃ¡lne). Pri unÃ¡rnej replikÃ¡cii sa zÃºÄastÅuje procesu jeden replikÃ¡tor â rodiÄ, zatiaÄ¾ Äo pri binÃ¡rnej replikÃ¡cii sa zÃºÄastÅujÃº procesu dva replikÃ¡tory â rodiÄia. RodiÄia (rodiÄ) sÃº kvÃ¡zinÃ¡hodne vybranÃ­ z populÃ¡cie v zÃ¡vislosti na ich fitnes (replikÃ¡tory s vÃ¤ÄÅ¡Ã­m fitnes s vÃ¤ÄÅ¡ou pravdepodobnosÅ¥ou vstupujÃº do replikÃ¡cie) a produkujÃº novÃ© replikÃ¡tory â potomkov. Budeme rozliÅ¡ovaÅ¥ tieto tri zloÅ¾ky replikaÄnÃ©ho procesu: 1. selekcia rodiÄov, 2. replikÃ¡cia rodiÄov, priÄom vznikajÃº potomkovia, a 3. nÃ¡vrat potomkov do populÃ¡cie."
135,710,0.539,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"na rieÅ¡enÃ½ problÃ©m, vidia iba svojim lokÃ¡lnym pohadom. SystÃ©m by mal by schopnÃ½ vysporiada sa s obmedzeniami, ktorÃ© si jednotlivÃ­ agenti kvÃ´li svojmu lokÃ¡lnemu pohadu neuvedomujÃº. Od agentov sa vyÅ¾aduje, aby spolu rozumne kooperovali. Jednou z ciest spoluprÃ¡ce medzi agentmi bez explicitnej komunikÃ¡cie je vyuÅ¾itie inteligencie roja (Bonabeau, 1999; Vries, 1998)."
76,51,0.539,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Teraz je vÃ½sledkom neusporiadanÃ¡ dvojica farieb. Farby sÃº tri, ale objektov je 6. KeÄ pouÅ¾ijeme opÃ¤Å¥ pomocnÃ© indexovanie, tak je zrejmÃ©, Å¾e kÃ½m k vÃ½sledku (c-c) vedie len jedna dvojica ÄervenÃ½ch (sÃº tam len dve ÄervenÃ©), tak k vÃ½sledku (b-c) vedie 6 prvotnÃ½ch vÃ½sledkov: {b1, c1}, {b1, c2}, {b2, c1}, {b2, c2}, {b3, c1}, {b3, c2}. Tentoraz prvotnÃ© vÃ½sledky chÃ¡peme ako neusporiadanÃ© dvojice. PomocnÃ½m homogÃ©nnym priestorom je priestor vÅ¡etkÃ½ch moÅ¾nÃ½ch neusporiadanÃ½ch dvojÃ­c. Zrejme mÃ¡ 15 (= C(6, 2) ) bodov. 1.3.7 PrÃ­klad. NÃ¡hodnÃ½ pokus spoÄÃ­va v hÃ¡dzanÃ­ mincou dovtedy, kÃ½m nepadne znak (akonÃ¡hle na minci padne znak, pokus skonÄil). Navrhnime priestor moÅ¾nÃ½ch vÃ½sledkov tak, aby sme mohli modelovaÅ¥ udalosti a) A â v pokuse sa bude hÃ¡dzaÅ¥ aspoÅ tri razy, b) B â poÄet hodov v pokuse bude pÃ¡rne ÄÃ­slo. UrÄime pravdepodobnoti jednotlivÃ½ch vÃ½sledkov a nÃ¡jdime P(A), resp. P(B). RieÅ¡enie. Teraz mnoÅ¾ina moÅ¾nÃ½ch vÃ½sledkov pokusu je nekoneÄnÃ¡ (ale spoÄÃ­tateÄ¾nÃ¡), pretoÅ¾e ... } = { (Z) (C Z) (C C Z) (C C C Z) â¦ (C C â¦ C Z) â¦ }. Pre udalosti mÃ¡me"
265,223,0.538,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"KtorÃ¡ vlastnosÅ¥ Å¡pecifikÃ¡cie poÅ¾iadaviek je dÃ´leÅ¾itejÅ¡ia â merateÄ¾nosÅ¥ alebo konzistentnosÅ¥? Vysvetlite preÄo. JednoznaÄne merateÄ¾nosÅ¥. Bez tejto vlastnosti nemÃ´Å¾eme vyhodnotiÅ¥ splnenie jednotlivÃ½ch poÅ¾iadaviek a projekt sa tak prakticky nedÃ¡ rieÅ¡iÅ¥ uÅ¾ len preto, Å¾e nemÃ´Å¾me so zÃ¡kaznÃ­kom uzavrieÅ¥ rozumnÃ½ kontrakt. AkÃ¡koÄ¾vek Å¡pecifikÃ¡cia je bez merateÄ¾nosti nepouÅ¾iteÄ¾nÃ¡. KonzistentnosÅ¥ je dÃ´leÅ¾itÃ¡ vlastnosÅ¥, ale pri reÃ¡lnych projektoch s obmedzenÃ½mi zdrojmi sa spravidla nedÃ¡ dosiahnuÅ¥. To neznamenÃ¡, Å¾e sa neusilujeme o konzistentnosÅ¥, ale konzistentnosÅ¥ nie je nevyhnutnÃ¡ a problÃ©my, ktorÃ© nÃ¡m jej nedostatok spÃ´sobÃ­ spravidla vieme vyrieÅ¡iÅ¥."
40,82,0.538,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Neradujme se ale pÅedÄasnÄ, nenÃ­ to tak jednoduchÃ©, jak to mÅ¯Å¾e vypadat na prvnÃ­ pohled. Za vÅ¡Ã­m jsou celkem sloÅ¾itÃ© rovnice a navÃ­c je zapotÅebÃ­ ke kostem pÅidat i âkloubyâ s danou (rozumnou) tuhostÃ­ a rozsahem pohybu, coÅ¾ je opÄt prÃ¡ce pro ÄlovÄka, nikoli pro poÄÃ­taÄ. NavÃ­c je dÅ¯leÅ¾itÃ© si uvÄdomit, Å¾e tyto rovnice nemusÃ­ mÃ­t jednoznaÄnÃ© ÅeÅ¡enÃ­: kdyÅ¾ zatÃ¡hnete za konec ruky nebo ocelovÃ©ho ramene, klouby se mohou do vÃ½slednÃ© pozice dostat vÃ­ce zpÅ¯soby. Ve hrÃ¡ch se takto ÅeÅ¡enÃ¡ inverznÃ­ kinematika pouÅ¾Ã­vÃ¡ Äasto u jeÅÃ¡bÅ¯ nebo jinÃ½ch strojÅ¯, kde nevadÃ­ (ba je pÅÃ­mo Å¾Ã¡doucÃ­) strojenÃ½ a strojovÃ½ vzhled tÄchto animacÃ­. O inverznÃ­ kinematice se pÃ­Å¡e ve vÄtÅ¡inÄ zÃ¡kladnÃ­ch uÄebnic o animacÃ­ch, napÅÃ­klad [23], [45]. DoporuÄit lze takÃ© text [20]. BlendovÃ¡nÃ­ animacÃ­ TypickÃ½m problÃ©mem, kterÃ½ se v rÃ¡mci animovÃ¡nÃ­ agentÅ¯ ÅeÅ¡Ã­, je blendovÃ¡nÃ­ (Äesky nÄkdy spojovÃ¡nÃ­, mixovÃ¡nÃ­) animacÃ­. Obvykle animace fungujÃ­ tak, Å¾e tÄlo agenta ovlÃ¡dÃ¡ prÃ¡vÄ jedna animace, agent napÅÃ­klad buÄ jde, nebo bÄÅ¾Ã­. Ale co v pÅÃ­padÄ, Å¾e agent pÅechÃ¡zÃ­ z chÅ¯ze do bÄhu? Mohli bychom si pÅipravit pÅechodovou animaci a pouÅ¾Ã­t ji po skonÄenÃ­ probÃ­hajÃ­cÃ­ho cyklu chÅ¯ze (pÅechodovÃ¡ animace by zaÄÃ­nala v zÃ¡kladnÃ­ pozici chÅ¯ze a konÄila v zÃ¡kladnÃ­ pozici bÄhu). To mÃ¡ tu nevÃ½hodu â kromÄ toho, Å¾e je to prÃ¡ce navÃ­c â, Å¾e to mÅ¯Å¾e dost dlouho trvat, coÅ¾ je problÃ©m, zvlÃ¡Å¡tÄ kdyÅ¾ se jednÃ¡ o hrÃ¡Äem ovlÃ¡danou postavu. TakÃ© mÅ¯Å¾eme problÃ©m ignorovat a prostÄ napÅÃ­klad z 10. snÃ­mku animace chÅ¯ze pÅejÃ­t na 11. snÃ­mek animace bÄhu. To je ÅeÅ¡enÃ­, kterÃ© bylo dÅÃ­v celkem bÄÅ¾nÃ©, ale tehdy byly takÃ© postavy hrubÅ¡Ã­ a monitory mÄly menÅ¡Ã­ rozliÅ¡enÃ­. Dnes je preferovanÃ½ zpÅ¯sob blendovÃ¡nÃ­, neboli prolÃ­nÃ¡nÃ­, animacÃ­. Pro kaÅ¾dou kost se vezmou hodnoty z obou animacÃ­ a vhodnÃ½m zpÅ¯sobem se zprÅ¯mÄrujÃ­ (zde se opÄt s vÃ½hodou vyuÅ¾ijÃ­ zmÃ­nÄnÃ© kvaterniony). JednÃ¡ se o vÃ¡Å¾enÃ½ prÅ¯mÄr, kde se vÃ¡hy mÄnÃ­ tak, Å¾e jejich souÄet je stÃ¡le 1; na zaÄÃ¡tku je vÃ¡ha animace, do kterÃ© pÅechÃ¡zÃ­me (v naÅ¡em pÅÃ­padÄ bÄhu), rovnÃ¡ 0, na konci je rovnÃ¡ nule vÃ¡ha vÃ½chozÃ­ animace (v naÅ¡em pÅÃ­padÄ chÅ¯ze). VÃ½sledkem je plynulÃ½ a vÄtÅ¡inou celkem vÄrohodnÃ½ pÅechod mezi obÄma animacemi. BlendovÃ¡nÃ­ animacÃ­ se dÃ¡ tÃ©Å¾ vyuÅ¾Ã­t k inverznÃ­ kinematice. V takovÃ©m pÅÃ­padÄ se postupuje tak, Å¾e grafici-animÃ¡toÅi vytvoÅÃ­ nÄkolik verzÃ­ stejnÃ© animace, napÅÃ­klad krok 30 cm dlouhÃ½ a krok 60 cm dlouhÃ½. Pokud pak budeme chtÃ­t udÄlat krok 40 cm dlouhÃ½, zprÅ¯mÄrujeme obÄ animace s vÃ¡hami 0,67 a 0,33. ObdobnÃ½ problÃ©m je skloubenÃ­ dvou rÅ¯znÃ½ch animacÃ­. ÅeknÄme, Å¾e mÃ¡me pÅedpÅipravenou animaci chÅ¯ze a otoÄenÃ­ hlavy. Mohli bychom je automaticky spojit? Animace chÅ¯ze se starÃ¡ o nohy a zbytek tÄla ji uÅ¾ tolik nezajÃ­mÃ¡. Animace otoÄenÃ­ hlavy zase hÃ½be pouze hlavou. Kosti, kterÃ© tyto animace rozhÃ½bÃ¡vajÃ­, se tedy nepÅekrÃ½vajÃ­ a spojenÃ­ animacÃ­ je pomÄrnÄ jednoduchÃ©: pustÃ­me animaci chÅ¯ze na nohy a animaci otoÄenÃ­ hlavy na hlavu a mÃ¡me agenta, co po nÃ¡s pokukuje, kdyÅ¾ prochÃ¡zÃ­ kolem. NÄkdy jde obdobu tohoto postupu aplikovat i tehdy, kdyÅ¾ se nÄkterÃ© kosti pÅekrÃ½vajÃ­: pouÅ¾ijeme na tyto kosti vhodnÄ zvolenÃ½ vÃ¡Å¾enÃ½ prÅ¯mÄr. VÃ­ce se o blendovÃ¡nÃ­ animacÃ­ lze doÄÃ­st napÅÃ­klad v [27], [19]."
369,110,0.538,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Partneri firmy Na reprezentÃ¡ciu externÃ½ch ÃºÄastnÃ­kov â partnerov, t. j. zÃ¡kaznÃ­kov a dodÃ¡vateÄ¾ov, sa kladÃº inÃ© poÅ¾iadavky. PredovÅ¡etkÃ½m bÃ½va uÅ¾itoÄnÃ©, aby vÅ¡etci partneri boli evidovanÃ­ na jednom mieste, Äo zabraÅuje redundancii dÃ¡t a zjednoduÅ¡uje programovÃ½ kÃ³d. KeÄÅ¾e osoby a firmy majÃº nielen spoloÄnÃ©, ale aj odliÅ¡nÃ© atribÃºty, rieÅ¡enie ponÃºka relÃ¡cia generalizÃ¡cie (obr. 2.26). SpoloÄnÃ½mi atribÃºtmi a relÃ¡ciami sÃº naprÃ­klad ÄÃ­slo partnera a jeho adresa. OdliÅ¡nÃ½mi atribÃºtmi sÃº jeho prirodzenÃ© identifikÃ¡tory: meno, priezvisko, dÃ¡tum narodenia a rodnÃ© ÄÃ­slo3 pri osobe a nÃ¡zov firmy, dÃ¡tum zaloÅ¾enia a identifikaÄnÃ© ÄÃ­slo organizÃ¡cie (IÄO), prÃ­padne inÃ© ÄÃ­slo identifikujÃºce danÃº organizÃ¡ciu. Pri partneroch je potrebnÃ¡ moÅ¾nosÅ¥ evidencie (minimÃ¡lne) dvoch adries: adresy trvalÃ©ho bydliska osoby/sÃ­dla firmy a kontaktnej adresy. Na obr. 2.26 sme v porovnanÃ­ s exaktnÃ½m modelom z Äasti 1.3 ukÃ¡zali v praxi ÄastejÅ¡ie pouÅ¾Ã­vanÃ½ prÃ­stup k modelovaniu adries: partner mÃ¡ samostatnÃ© relÃ¡cie do registra obcÃ­ a registra ulÃ­c, kÃ½m orientaÄnÃ© ÄÃ­sla sa zadÃ¡vajÃº iba ako znakovÃ© reÅ¥azce. UvedenÃ½ model nespÄºÅa princÃ­py normalizÃ¡cie (orientaÄnÃ© ÄÃ­sla by mali byÅ¥ samostatnÃ© inÅ¡tancie, ktorÃ© jednoznaÄne urÄujÃº ulice a obce a tieÅ¾ ulica jednoznaÄne urÄuje obec), je vÅ¡ak urÄitÃ½m kompromisom medzi presnÃ½m (a zriedkavo pouÅ¾Ã­vanÃ½m) modelom a modelom zaloÅ¾enÃ½m iba na znakovÃ½ch reÅ¥azcoch, ktorÃ½ prinÃ¡Å¡a mnoÅ¾stvo chÃ½b. Pri partneroch nebÃ½va potrebnÃ© evidovaÅ¥ ich organizaÄnÃº Å¡truktÃºru, pretoÅ¾e partnerom je firma/organizÃ¡cia ako celok. VÃ½nimkou je, ak mÃ¡ firma viacero teritoriÃ¡lnych poboÄiek alebo prevÃ¡dzok a firma, ktorÃ¡ prevÃ¡dzkuje softvÃ©rovÃ½ systÃ©m spolupracuje jednotlivo s viacerÃ½mi z nich. InÃ½m prÃ­padom je, ak firma patrÃ­ do nejakÃ©ho zdruÅ¾enia alebo (nadnÃ¡rodnÃ©ho) koncernu. (Oba prÃ­pady ponechÃ¡vame ÄitateÄ¾ovi ako cviÄenie.) Pri partneroch niekedy evidujeme aj jej zÃ¡stupcov, ktorÃ­ sÃº oprÃ¡vnenÃ­ konaÅ¥ v jej mene. TakÃ½chto zÃ¡stupcov mÃ´Å¾e byÅ¥ pre jednu firmu viac a dokonca mÃ´Å¾u byÅ¥ medzi nimi definovanÃ© vzÅ¥ahy. (Firma mÃ¡ naprÃ­klad Å¡tyroch konateÄ¾ov, priÄom za firmu musia vystupovaÅ¥ vÅ¾dy minimÃ¡lne dvaja z nich a nesmÃº to byÅ¥ sÃºÄasne konatelia X a Y.). EvidovaÅ¥ zÃ¡stupcov firmy v softvÃ©rovom systÃ©me mÃ´Å¾e byÅ¥ dosÅ¥ ambiciÃ³zny cieÄ¾, pretoÅ¾e tÃ½chto zÃ¡stupcov pri veÄ¾kej firme (naprÃ­klad banke) mÃ´Å¾e byÅ¥ veÄ¾a s rÃ´znymi kompetenciami a navyÅ¡e sa po Äase menia. Z uvedenÃ©ho dÃ´vodu sa zvyÄajne takÃ¡to evidencia redukuje na evidenciu"
76,247,0.535,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"PodÄ¾a bodu 5 z nezÃ¡vislosti , vyplÃ½va nekorelovanosÅ¥ (to sme urobili v dÃ´kaze bodu 5 vety 4.2.5). OpaÄnÃ¡ imlikÃ¡cia (vo vÅ¡eobecnosti) neplatÃ­, ako ukazuje nasledujÃºci prÃ­klad. 4.2.18 PrÃ­klad. Nech ~ R{ -1, 0, 1 }, = a uvaÅ¾ujme o nÃ¡hodnom vektore ( ). Äo je moÅ¾nÃ© povedaÅ¥ o zÃ¡vislosti zloÅ¾iek vektora, o kovariancii a o korelaÄnom koeficiente? RieÅ¡enie. Aj keÄ je vektor ( ) umelo vytvorenÃ½, je to nÃ¡hodnÃ½ vektor a Ä¾ahko nÃ¡jdeme tabuÄ¾ku jeho pravdepodobnostnej funkcie:"
111,31,0.533,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Kedy pouÅ¾Ã­vaÅ¥ hybridnÃ© triedenie kariet namiesto uzavretÃ©ho? HybridnÃ© triedenie kariet, ktorÃ© je bliÅ¾Å¡ie k uzavretÃ©mu, zÃ­skate, ak ho vytvorÃ­te pomocou zoznamu kategÃ³riÃ­, ktorÃ© sÃº dostatoÄnÃ© na triedenie vÅ¡etkÃ½ch kariet bez toho, aby bolo potrebnÃ© vytvÃ¡raÅ¥ novÃ© kategÃ³rie (aspoÅ podÄ¾a vÃ¡Å¡ho vlastnÃ©ho chÃ¡pania informÃ¡ciÃ­). Ak Ä¾udia mÃ´Å¾u kartu zaradiÅ¥ do existujÃºcej kategÃ³rie, je pravdepodobnejÅ¡ie, Å¾e tak urobia. IbaÅ¾e by Å¾iadna z existujÃºcich kategÃ³riÃ­ nezodpovedala ich predstavÃ¡m o tom, Äo danÃ¡ karta predstavuje. Vtedy si vytvoria novÃº kategÃ³riu, ÄÃ­m sa prejavÃ­ rozdiel medzi uzavretÃ½m a hybridnÃ½m triedenÃ­m kariet."
205,154,0.533,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","PreliezaÄ webu v jazyku python funkcia nÃ¡m z tÃ½chto parametrov vytvorÃ­ adresu http://fi.it/stuff/index.html. HlavnÃ¡ vÃ½hoda je vÅ¡ak v tom, Å¾e ak budÃº parametre http://fi.it/ a http://stuba.sk/stuff2/index.html, funkcia nÃ¡m vrÃ¡ti neporuÅ¡enÃº adresu http://stuba.sk/stuff2/index.html. VÄaka tejto funkcii teda dostaneme vÅ¾dy sprÃ¡vnu adresu pre ÄalÅ¡ie spracovanie. 8.3.4 NormalizÃ¡cia adries KeÄ uÅ¾ mÃ¡me adresy, ktorÃ© sÃº v rovnakej podobe, ostÃ¡va nÃ¡m poslednÃ½ problÃ©m - identifikÃ¡cia duplicitnÃ½ch adries. ProblÃ©m dneÅ¡nÃ©ho webu je to, Å¾e existuje viacero podÃ´b tej istej adresy. NaprÃ­klad adresa www.fi.it je to istÃ©, ako www.fi.it/index.html, http://www.fi.it alebo fi.it. Okrem toho mÃ´Å¾u maÅ¥ adresy rozdiely vo veÄ¾kÃ½ch a malÃ½ch pÃ­smenÃ¡ch, alebo je na ceste adresy niekde pouÅ¾itÃ½ reÅ¥azec â..â pre nÃ¡vrat do predchÃ¡dzajÃºceho adresÃ¡ra, alebo mnoho rÃ´znych ÄalÅ¡Ã­ch odliÅ¡nostÃ­. My vÅ¡ak potrebujeme to, aby sme adresu navÅ¡tÃ­vili iba raz a nepridÃ¡vali ju viackrÃ¡t do zoznamu. To zabezpeÄÃ­me procesom, ktorÃ½ sa nazÃ½va normalizovanie. Normalizovanie zahÅÅa: - prevod na malÃ© pÃ­smenÃ¡, - konvertovanie adresy do tvaru IDN (medzinÃ¡rodnÃ© menÃ¡ domÃ©n, angl. Internationalized domain name), - vymazÃ¡vanie predvolenÃ©ho portu 80, - zmenÅ¡ovanie cesty (nahrÃ¡dzanie znakov ./ ../ // a podobne), - vymazÃ¡vanie poslednÃ©ho znaku â.â z cesty, - vÃ½mena vÅ¡etkÃ½ch znakov % ÄÃ­slo znaku za konkrÃ©tny znak tam, kde je to moÅ¾nÃ©, - pri ostatnÃ½ch znakoch s % ÄÃ­slo znaku premieÅa na veÄ¾kÃ© pÃ­smenÃ¡, - premena medzier na %20, - normalizovanie IP adries. Na to, aby sme pridali sprÃ¡vne adresy, vyuÅ¾Ã­vame kniÅ¾nicu urlnorm [11]. V hore uvedenom kÃ³de spÃºÅ¡Å¥ame normalizovanie prÃ­kazom: urlnorm.norm(link). Na tento ÃºÄel existuje veÄ¾kÃ© mnoÅ¾stvo kniÅ¾nÃ­c nielen pre python, ale aj pre inÃ© programovacie jazyky. Nie je takisto problÃ©m spraviÅ¥ si vlastnÃ© pravidlÃ¡ pre normalizovanie, hoci v takom prÃ­pade je veÄ¾kÃ© riziko zabudnutia na niektorÃº z podmienok a teda vytvorenie nedokonalej normalizÃ¡cie. 8.3.5 Zoznamy navÅ¡tÃ­venÃ½ch adries a adries na navÅ¡tÃ­venie ÄalÅ¡Ã­m problÃ©mom, s ktorÃ½m sa pri tvorbe preliezaÄa stretneme, je ukladanie webovÃ½ch adries. Na tento ÃºÄel potrebujem dve ÃºloÅ¾iskÃ¡: - Pre adresy, ktorÃ© chceme navÅ¡tÃ­viÅ¥ - pre navÅ¡tÃ­venÃ© adresy. PrvÃ© ÃºloÅ¾isko potrebuje z dÃ´vodu, Å¾e nie okamÅ¾ite po nÃ¡jdenÃ­ ÄalÅ¡ej adresy ju ideme navÅ¡tÃ­viÅ¥. Adresy si musÃ­me ukladaÅ¥ a podÄ¾a zvolenej stratÃ©gie ich Äalej navÅ¡tevovaÅ¥. Medzi najpouÅ¾Ã­vanejÅ¡ie stratÃ©gie patria: stratÃ©gia do hÄºbky, do Å¡Ã­rky, stratÃ©gie zaloÅ¾enÃ© na ÄiastoÄnom skÃ³re strÃ¡nok (angl. PageRank) a ÄalÅ¡ie."
195,201,0.532,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"11.4 ExistujÃºce rieÅ¡enia Spomedzi mnohÃ½ch rieÅ¡enÃ­ pre odporÃºÄanie systematickÃ½ch zmien uvedieme prÃ­klad pouÅ¾itia systÃ©mu Sydit [6], ktorÃ½ identifikuje abstraktnÃ½ vzor transformÃ¡cie z prÃ­kladu zadanÃ©ho programÃ¡torom s uvaÅ¾ovanÃ­m jeho kontextu. V Ãºvode kapitoly sme uviedli prÃ­klad zmeny metÃ³dy getLaunchConfigurations (ukÃ¡Å¾ky 11.2 a 11.3). Sydit reprezentuje zdrojovÃ½ kÃ³d metÃ³dy pomocou abstraktnÃ©ho syntaktickÃ©ho stromu, zvlÃ¡Å¡Å¥ pre pÃ´vodnÃº verziu a zvlÃ¡Å¡Å¥ pre upravenÃº. KoreÅom abstraktnÃ©ho syntaktickÃ©ho stromu metÃ³dy je predpis metÃ³dy, postupnÃ© riadky metÃ³dy sa nachÃ¡dzajÃº v potomkoch koreÅa. PodobnÃ½m spÃ´sobom sa potom rozvetvujÃº cykly a podmienky. Sydit porovnÃ¡ stromy a identifikuje medzi nimi rozdiel Îð´ = [ð1 , ð2 , â¦ , ðð ] ako postupnosÅ¥ Ãºprav e syntaktickÃ©ho stromu â operÃ¡cie vloÅ¾enie vrcholu, zmazanie, upravenie alebo presunutie. IdentifikovanÃº transformÃ¡ciu Îð´ nÃ¡sledne Sydit zovÅ¡eobecnÃ­ nahradenÃ­m nÃ¡zvov premennÃ½ch, typov a metÃ³dy vÅ¡eobecnÃ½mi identifikÃ¡tormi, napr. $M1$, $M2$, $V1$, $T1$, $T2$. Tak dokÃ¡Å¾eme transformÃ¡ciu pouÅ¾iÅ¥ aj v inÃ½ch sÃºÄiastkach zdrojovÃ©ho kÃ³du. Na obrÃ¡zku 15 uvÃ¡dzame prÃ­klad identifikovanej transformÃ¡cie vo vÅ¡eobecnom tvare s operÃ¡ciami presunutia, upravenia a vloÅ¾enia. PouÅ¾itie transformÃ¡cie nÃ¡sledne tkvie z automatickej identifikÃ¡cie miest v zdrojovom kÃ³de, ktorÃ© zodpovedajÃº abstraktnÃ©mu syntaktickÃ©mu stromu Ãºpravy a jej aplikÃ¡cie. VÅ¡eobecnÃ© symboly sa zamenia podÄ¾a identifikovanÃ©ho miesta, napr. $T2$ $v2$ = null na ILaunchConfiguration cfg = null."
76,260,0.532,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"VidÃ­me, Å¾e teraz je aproximÃ¡cia rÃ¡dovo lepÅ¡ia (ako bola bez korekcie). Vo vÅ¡eobecnosti sa nedÃ¡ povedaÅ¥, akÃ© je dostatoÄne veÄ¾kÃ©, aby aproximÃ¡cia dÃ¡vala dobrÃ© vÃ½sledky. Zistilo sa vÅ¡ak, Å¾e ak platÃ­: (1 â ) > 9 , tak vÃ½sledky sÃº uspokojivÃ©. 5.1.9 PrÃ­klad. PoÄas skÃºÅ¡ky spoÄ¾ahlivosti dochÃ¡dza k zniÄeniu vÃ½robku s pravdepodobnosÅ¥ou = 0.02. NÃ¡jdime pravdepodobnosÅ¥ toho, Å¾e v sÃ©rii 500 vÃ½robkov je poÄet zniÄenÃ½ch a) menÅ¡Ã­ ako 12, b) menÅ¡Ã­ ako 12, a pritom viac ako 6. RieÅ¡enie. a) Najprv bez korekcie:"
240,297,0.531,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"poÄ¾a navrhnite aj rekurzÃ­vne rieÅ¡enie bez pouÅ¾itia cyklov. DoplÅujÃºca Ãºloha: Modifikujte rieÅ¡enie tak, aby pracovalo pre inÃ© povolenÃ© Å¥ahy (poÄty kamienkov, ktorÃ© je dovolenÃ© z kÃ´pky odobraÅ¥ v jednom Å¥ahu): napr. 3, 5, 7 alebo 9 kamienkov. Ãloha 4-5 NapÃ­Å¡te zdrojovÃ½ kÃ³d funkcie vypis_histogram(), ktorÃ¡ dostane pole celÃ½ch ÄÃ­sel reprezentujÃºcich znÃ¡mky, ktorÃ© Å¡tudenti zÃ­skali v predmete a na vÃ½stup vypÃ­Å¡e histogram zÃ­skanÃ½ch znÃ¡mok a dosiahnutÃ© poÄty do zÃ¡tvorky podÄ¾a ukÃ¡Å¾ky niÅ¾Å¡ie. KaÅ¾dÃ¡ znÃ¡mka vo vstupnom poli znamky[] je vo vÃ½slednom histograme reprezentovanÃ¡ jednou hviezdiÄkou. Vstup: znamky[] = { 3,1,2,3,5,2,1,2,2,1,2,3,2,3,5,2,3,1,2,2,3,5 } VÃ½stup:"
190,162,0.531,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"CieÄ¾om tvorby nÃ¡Ärtu je dodaÅ¥ koncovÃ©mu pouÅ¾Ã­vateÄ¾ovi Äo moÅ¾no najrÃ½chlejÅ¡ie predstavu, ako bude koncovÃ© rieÅ¡enie vyzeraÅ¥, a tak sa ubezpeÄiÅ¥, Å¾e naÅ¡a predstava o vytvÃ¡ranom rieÅ¡enÃ­ koreÅ¡ponduje s predstavou pouÅ¾Ã­vateÄ¾a. PodÄ¾a mÃ´jho nÃ¡zoru je prÃ¡ve prezentÃ¡cia nÃ¡Ärtu alebo funkÄnÃ©ho prototypu najbezpeÄnejÅ¡ou formou overenia sprÃ¡vnosti formÃ¡lnej Å¡pecifikÃ¡cie pri interaktÃ­vnych aplikÃ¡ciÃ¡ch. Do nÃ¡Ärtu a Äalej prototypu sa zapracujÃº pripomienky pouÅ¾Ã­vateÄ¾a aÅ¾ do vytvorenia prvej oficiÃ¡lnej verzie. TÃ¡to sa odovzdÃ¡ pouÅ¾Ã­vateÄ¾ovi a upravuje sa na jeho Å¾iadosÅ¥. ObrÃ¡zok 1 zobrazuje deÄ¾bu projektu po Äasovej osi na etapy a po funkÄnej osi na komponenty. Po nÃ¡slednom analyzovanÃ­ sa etapa rozdelÃ­ na menÅ¡ie Äasti â moduly, ktorÃ© sa prideÄ¾ujÃº tÃ­mom. Rozsah modulu predpokladÃ¡ pribliÅ¾ne dva tÃ½Å¾dne prÃ¡ce pre jednÃ©ho Äloveka. Na rozsahu modulu je realizovanÃ½ mikro-manaÅ¾ment projektu."
240,477,0.531,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"opakujÃºce sa bloky podobnÃ©ho kÃ³du, ktorÃ© zodpovedajÃº jednotlivÃ½m smerom (riadkom, stÄºpcom a diagonÃ¡lam). VÅ¡imnime si malÃ½ rozdiel, Å¾e v riadku 7 cyklus zaÄÃ­na o 1, teda ako keby sme 0-tÃ½ riadok (alebo stÄºpec) nepreÅ¡li. Ako je to moÅ¾nÃ©? Jednoducho. PredtÃ½m ako budeme kontrolovaÅ¥, Äi sÃºÄet ÄÃ­sel v riadkoch, stÄºpcoch alebo diagonÃ¡lach je rovnakÃ½, musÃ­me hodnotu sÃºÄtu urÄiÅ¥: napr. podÄ¾a 0-tÃ©ho riadku. V riadku 5 preto doplnÃ­me a[0][j], ÄÃ­m v cykle v riadkoch 4-5 urÄÃ­me do premennej (sucet) sÃºÄet ÄÃ­sel, voÄi ktorÃ©mu budeme ostatnÃ© sÃºÄty porovnÃ¡vaÅ¥ (sucet). PrehliadnutÃ­m zostÃ¡vajÃºceho programu si vÅ¡imneme, Å¾e sÃºÄty v riadkoch, stÄºpcoch a diagonÃ¡lach si v cykloch poÄÃ­tame do premennej k, ktorÃº by sme mali porovnaÅ¥ voÄi referenÄnÃ©mu sÃºÄtu (sucet). Ak je hodnota rÃ´zna, tak Å¡tvorec nie je magickÃ½ (return 0 â doplnÃ­me v riadkoch 12, 20, 26 a 31), nakoniec v riadku 33 vieme, Å¾e je magickÃ½ (return 1). V riadkoch 11, 19, 25 a 30 doplnÃ­me porovnanie zistenÃ©ho sÃºÄtu s referenÄnÃ½m sÃºÄtom (k != sucet). ZostÃ¡va doplniÅ¥ chÃ½bajÃºce miesta v riadkoch 10, 18, 24 a 29, v ktorÃ½ch budeme postupne poÄÃ­taÅ¥ sÃºÄty pre riadky, stÄºpce, hlavnÃº a vedÄ¾ajÅ¡iu diagonÃ¡lu. V riadku 10 doplnÃ­me a[i][j], v riadku 18 tieÅ¾ a[i][j], v riadku 24 doplnÃ­me a[i][i] a v riadku 29 doplnÃ­me a[i][n-i-1]."
40,40,0.531,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Na prvÃ½ pohÄ¾ad sa nÃ¡m mÃ´Å¾e zdaÅ¥, Å¾e toto tvrdenie nÃ¡m nijako nepomÃ´Å¾e pri hÄ¾adanÃ­ Echo State neurÃ³novÃ½ch sietÃ­. Ale praktickÃ½mi experimentmi bolo zistenÃ©, Å¾e ak nedodrÅ¾Ã­me podmienky uvedenÃ© vo vete 1, ÄiÅ¾e ak spektrÃ¡lny polomer vÃ¡hovej matice je menÅ¡Ã­ ako jedna, tak neurÃ³novÃ¡ sieÅ¥, ktorÃº zÃ­skame tÃ½mto spÃ´sobom, mÃ¡ echo stavy. HypotÃ©za 1. Nech Î´ a Îµ sÃº dve malÃ© kladnÃ© ÄÃ­sla. Potom existuje veÄ¾kosÅ¥ neurÃ³novej siete N takÃ¡, Å¾e ak dynamickÃ½ rezervoÃ¡r o veÄ¾kosti N skonÅ¡truujeme nÃ¡hodnÃ½m vygenerovanÃ­m matice W0 za pouÅ¾itia uniformnÃ©ho rozdelenia a z rozsahu [â1,1] , Äalej tÃºto maticu W0 normalizujeme na W1 , 1  W1 = W0 , kde Î»max je spektrÃ¡lny polomer matice W0 a nakoniec"
76,18,0.53,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ZakonÄime prÃ­klad 1.1.3. Uvedomili sme si, Å¾e v Åom nie je moÅ¾nÃ© modelovaÅ¥ pravdepodobnosÅ¥ Å¡pekulatÃ­vnou metÃ³dou. V skutoÄnosti neznÃ¡me pravdepodobnosti vÃ½sledkov b, m, Ä mÃ´Å¾eme len odhadnÃºÅ¥. Ak relatÃ­vnymi poÄetnosÅ¥ami odhadneme , , (pritom tak, aby platilo: = 1), potom (vÄaka aditivite) vieme stanoviÅ¥ pravdepodobnosÅ¥ akejkoÄ¾vek udalosti. PravdepodobnostnÃº Å¡truktÃºru nÃ¡Å¡ho priestoru popisuje tabuÄ¾ka"
40,64,0.53,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"MoÅ¾nÃ© varianty: 1. Pri niektorÃ½ch dÃ¡tach mÃ´Å¾e dochÃ¡dzaÅ¥ k problÃ©mom so stabilitou vo fÃ¡ze pouÅ¾itia natrÃ©novanej neurÃ³novej siete. V takÃ½chto prÃ­padoch veÄ¾mi Äasto pomÃ´Å¾e pridanie Å¡umu vo vzorkovacej fÃ¡ze a nÃ¡sledne upravenie vzÅ¥ahu (25):    x (n + 1) = f (W in u (n + 1) + Wx (n) + W back d (n) + v(n)) ,"
94,85,0.53,Sprievodca svetom vedeckÃ©ho publikovania,"editor Umberto32 dokonca existuje aj pre slovenskÃ½ jazyk. OceniÅ¥ ho mÃ´Å¾u Å¡tudenti pri pÃ­sanÃ­ zÃ¡vereÄnÃ½ch prÃ¡c, Äi autori uÄebnÃ­c, ktorÃ­ chcÃº aj v odbornom texte udrÅ¾aÅ¥ priamoÄiary, Ä¾ahko pochopiteÄ¾nÃ½ Å¡tÃ½l). PoÄÃ­taÄovÃ½ program prirodzene nenahradÃ­ Å¾ivÃ©ho ÄitateÄ¾a. VeÄ¾kÃº vÃ½hodu znamenÃ¡ kolega (alebo priateÄ¾ z akademickej sociÃ¡lnej siete), ktorÃ½ ovlÃ¡da angliÄtinu ako rodenÃ½ reÄnÃ­k. Ak vedec nikoho takÃ©ho nepoznÃ¡, mÃ´Å¾e sa pokÃºsiÅ¥ nÃ¡jsÅ¥ profesionÃ¡lneho korektora â ideÃ¡lne takÃ©ho, ktorÃ½ rozumie vedeckÃ©mu Å¾argÃ³nu z danÃ©ho odboru. Do oblasti elektronickÃ©ho vedeckÃ©ho publikovania zaÄalo vstupovaÅ¥ takÃ© mnoÅ¾stvo autorov z krajÃ­n mimo anglofÃ³nneho priestoru, Å¾e vytvorili dostatoÄne veÄ¾kÃ½ trh pre vznik segmentu editaÄnÃ½ch sluÅ¾ieb Å¡pecializovanÃ½ch na vedeckÃ© rukopisy33. Tieto sluÅ¾by sÃº spoplatnenÃ©: za gramatickÃº korektÃºru ÄlÃ¡nku v rozsahu do 6000 slov zaplatÃ­ autor 200 â 400 Eur (minimÃ¡lna taxa). Okrem gramatickÃ©ho a Å¡tylistickÃ©ho skultivovania ÄlÃ¡nku ponÃºkajÃº editaÄnÃ© firmy v rÃ¡mci rozÅ¡Ã­renÃ½ch sluÅ¾ieb aj technickÃ© Ãºpravy, vytvorenie reprezentatÃ­vnych obrÃ¡zkov podÄ¾a nÃ¡vrhu autora, kontrolu Å¡tatistickÃ©ho spracovania, pomoc pri vÃ½bere Äasopisu, napÃ­sanie sprievodnÃ©ho listu, alebo pomoc pri komunikÃ¡cii s redakciou. EditaÄnÃ© sluÅ¾by tieÅ¾ podliehajÃº vlastnÃ©mu etickÃ©mu kÃ³dexu. Ich vÃ½pomoc by nemala dosahovaÅ¥ ÃºroveÅ autorskÃ©ho prÃ­nosu, pri Å¡tylistickÃ½ch ÃºpravÃ¡ch by nemali zasahovaÅ¥ do obsahu, Äi neprimerane posÃºvaÅ¥ vyznenie textu. V Å¾iadnom prÃ­pade by sa nemali podieÄ¾aÅ¥ na fabrikÃ¡cii dÃ¡t alebo prekrÃºcanÃ­ vÃ½sledkov. Pri komunikÃ¡cii s redakciami by nemali prepisovaÅ¥ autorskÃ© prÃ¡va k ÄlÃ¡nku na vydavateÄ¾a v mene autorov. Pre slovenskÃ©ho vÃ½skumnÃ­ka s obmedzenÃ½mi zdrojmi na publikovanie sÃº editaÄnÃ© sluÅ¾by zvÃ¤ÄÅ¡a nedostupnÃ©, no na ich strÃ¡nkach sa dajÃº aj bezplatne nÃ¡jsÅ¥ uÅ¾itoÄnÃ© redaktorskÃ© tipy a triky, prÃ­padne varovania pred ÄastÃ½mi chybami."
43,197,0.529,Objektovo orientovanÃ© programovanie v C++,"V predchÃ¡dzajÃºcich dvoch prÃ­kladoch, resp. aj v kapitole 1, sme mali do Äinenia s problÃ©mami, kde sa ukÃ¡zalo uÅ¾itoÄnÃ© vytvoriÅ¥ neprÃ¡zdny konÅ¡truktor. DosiaÄ¾ sme sa vÅ¡ak nestretli s prÃ­kladom, v ktorom by nejakÃº Ãºlohu hral aj deÅ¡truktor. Preto si teraz ukÃ¡Å¾eme prÃ­klad, v ktorom neprÃ¡zdny deÅ¡truktor mÃ¡ svoje opodstatnenie â je pouÅ¾itÃ½ na dealokÃ¡ciu pamÃ¤Å¥ovÃ©ho miesta, ktorÃ© je potrebnÃ© uvoÄ¾niÅ¥ pri zÃ¡niku objektu."
111,36,0.529,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 3.4: VÅ¡etky karty by mali byÅ¥ na rovnakej konceptuÃ¡lnej Ãºrovni, aby sa dali zaradiÅ¥ do rovnakÃ½ch mentÃ¡lnych modelov. Triedenie kariet je koncepÄnÃ¡ ÄinnosÅ¥, nie test pouÅ¾iteÄ¾nosti. CieÄ¾om triedenia kariet je skÃºmaÅ¥, ako Ä¾udia chÃ¡pu informÃ¡cie, nie testovaÅ¥ navigÃ¡ciu webovej strÃ¡nky. To je dÃ´vod, preÄo by vÅ¡etky karty mali byÅ¥ na rovnakej konceptuÃ¡lnej Ãºrovni, aby sa dali zaradiÅ¥ do rovnakÃ½ch mentÃ¡lnych modelov, podÄ¾a ktorÃ½ch ich respondenti triedia. Okrem toho, Å¾e vÅ¡etky karty musia byÅ¥ konzistentnÃ© a rovnakÃ©, aby sa vytvorili koncepÄnÃ© skupiny, je tieÅ¾ dÃ´leÅ¾itÃ©, aby bolo dostatok kariet podobnÃ½ch alebo navzÃ¡jom prÃ­buznÃ½ch. Pri kaÅ¾dej karte by ste si mali vedieÅ¥ predstaviÅ¥ aspoÅ jednu ÄalÅ¡iu kartu, ktorÃº by s Åou bolo moÅ¾nÃ© zaradiÅ¥ do kategÃ³rie. V opaÄnom prÃ­pade, ak budÃº vÅ¡etky karty veÄ¾mi odliÅ¡nÃ© a Ä¾udia (respondenti) medzi nimi nebudÃº vidieÅ¥ Å¾iadnu sÃºvislosÅ¥, nebudÃº schopnÃ­ vytvoriÅ¥ Å¾iadne ucelenÃ© kategÃ³rie a vy sa nedozviete niÄ uÅ¾itoÄnÃ© pre zoskupovanie poloÅ¾iek na vaÅ¡ej webovej strÃ¡nke. Takisto ak bude triedenie prÃ­liÅ¡ nÃ¡roÄnÃ©, bude vÃ¤ÄÅ¡ia pravdepodobnosÅ¥, Å¾e respondenti Å¡tÃºdiu opustia, resp. triedenie nedokonÄia. NajlepÅ¡Ã­ spÃ´sob, ako sa s tÃ½mto problÃ©mom vysporiadaÅ¥, je overiÅ¥ prÃ­tomnosÅ¥ kariet, pre ktorÃ© je Å¥aÅ¾kÃ© nÃ¡jsÅ¥ âprÃ­buznÃ½châ. Ak to chcete urobiÅ¥, zdieÄ¾ajte odkaz na nÃ¡hÄ¾ad Å¡tÃºdie triedenia kariet s kolegami z vÃ¡Å¡ho tÃ­mu a nechajte ich karty zatriediÅ¥. Ak sa niektorÃ© karty zdajÃº byÅ¥ nÃ¡roÄnÃ© na triedenie, ale napriek tomu ich povaÅ¾ujete za dÃ´leÅ¾itÃ© pre Å¡tÃºdiu, mÃ´Å¾ete ich vyvÃ¡Å¾iÅ¥ pridanÃ­m kariet,"
190,287,0.528,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Je zaujÃ­mavÃ©, Å¾e nie vÅ¾dy vieme povedaÅ¥, kto urobil chybu. Ak zadÃ¡vateÄ¾ a vÃ½vojÃ¡r nepracujÃº v rovnakej oblasti, Äasto sa stÃ¡va, Å¾e pouÅ¾Ã­vajÃº rozdielnu terminolÃ³giu alebo si vÃ´bec nerozumejÃº. BÃ½va rovnako Å¥aÅ¾kÃ© pre zadÃ¡vateÄ¾a vyjadriÅ¥, Äo skutoÄne potrebuje ako pre vÃ½vojÃ¡ra pochopiÅ¥, Äo sa mu zadÃ¡vateÄ¾ snaÅ¾Ã­ vysvetliÅ¥. Chyby vÅ¡ak mÃ´Å¾u robiÅ¥ aj manaÅ¾Ã©ri. ProjektovÃ­ manaÅ¾Ã©ri bÃ½vajÃº Äasto tÃ½mi Ä¾uÄmi, ktorÃ­ vypracÃºvajÃº aj plÃ¡ny rizÃ­k a keÄÅ¾e kaÅ¾dÃ½ radÅ¡ej hÄ¾adÃ¡ chyby a problÃ©my mimo seba, rizikÃ¡ tÃ½kajÃºce sa manaÅ¾mentu sa Äasto podceÅujÃº aÅ¾ ignorujÃº. Ak si nedÃ¡me pozor na tieto hrozby uvedenÃ© vyÅ¡Å¡ie, mÃ´Å¾eme sa Ä¾ahko dostaÅ¥ do problÃ©mov spÃ´sobeChyby mÃ´Å¾u nÃ½ch najmÃ¤ tÃ½mito faktormi:"
205,30,0.528,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy aj pozvÃ¡nku na diskusiu. Niekedy sÃº diskusie tak ohnivÃ©, Å¾e prekroÄia hranice sluÅ¡nosti a Äo je horÅ¡ie, aj etnickej alebo nÃ¡boÅ¾enskej znÃ¡Å¡anlivosti. Kto nesie zodpovednosÅ¥ za zverejÅovanie takÃ½chto nÃ¡zorov? Je prÃ­pustnÃ© alebo naopak Å¾elateÄ¾nÃ© ich mazaÅ¥ (cenzurovaÅ¥)? WebovÃ© sÃ­dlo mÃ´Å¾e byÅ¥ eÅ¡te interaktÃ­vnejÅ¡ie. Wiki je webovÃ© sÃ­dlo, ktorÃ©ho obsah mÃ´Å¾u spoloÄne vytvÃ¡raÅ¥ viacerÃ­ Ä¾udia. Podporuje spoluprÃ¡cu Ä¾udÃ­, ktorÃ­ vÃ´bec nemusia byÅ¥ technicky zdatnÃ­. SociÃ¡lna sieÅ¥ je pÃ´vodne pojem, ktorÃ½ zaviedli v sociÃ¡lnych vedÃ¡ch pri Å¡tÃºdiu vzÅ¥ahov medzi jednotlivcami, skupinami, organizÃ¡ciami alebo dokonca spoloÄnosÅ¥ami. Opisuje sociÃ¡lnu Å¡truktÃºru, urÄenÃº ich interakciami. Å tudoval sa uÅ¾ v prvej polovici dvadsiateho storoÄia, keÄ sa eÅ¡te o poÄÃ­taÄoch a tobÃ´Å¾ o webe nechyrovalo. ZvyÅ¡ujÃºca sa moÅ¾nosÅ¥ interaktÃ­vnosti webovÃ½ch sÃ­del priniesla nÃ¡pad podporiÅ¥ interakciu medzi Ä¾uÄmi poskytnutÃ­m webovÃ©ho sÃ­dla, ktorÃ© umoÅ¾Åuje komukoÄ¾vek vytvoriÅ¥ si akÃ½si osobnÃ½ profil, prehlÃ¡siÅ¥ sa za âpriateÄ¾aâ inej osoby so zverejnenÃ½m profilom alebo pridaÅ¥ sa do jednej Äi viacerÃ½ch skupÃ­n. MomentÃ¡lne je najpopulÃ¡rnejÅ¡ou realizÃ¡ciou takÃ©ho nÃ¡padu sÃ­dlo alebo sluÅ¾ba sociÃ¡lneho zosieÅ¥ovania, nazÃ½vanÃ¡ Facebook. VÃ½voj poslednÃ½ch rokov priniesol aj podporu pÃ­sania a Å¡Ã­renia tzv. mikroblogov, t.j. kratuÄkÃ½ch poznÃ¡mok, ktorÃ© nemajÃº viac neÅ¾ 140 znakov. Tieto aj ÄalÅ¡ie novÃ© moÅ¾nosti sociÃ¡lnej komunikÃ¡cie alebo vzÅ¥ahov v spojitosti s webom sÃº novÃ½mi javmi. StÃ¡vajÃº sa pomaly predmetom skÃºmania sociÃ¡lnych vied [1], ale skÃºmanie sa nezaobÃ­de bez hlbokÃ©ho pochopenia vlastnostÃ­ webu. Na druhej strane, ich pochopenie je nevyhnutnÃ© pre hlbÅ¡ie pochopenie toho, Äo je web. MÃ¡lokto asi bude vÃ¡Å¾ne tvrdiÅ¥, Å¾e oznaÄenie niekoho za âpriateÄ¾aâ v sluÅ¾be sociÃ¡lneho zosieÅ¥ovania robÃ­ z tÃ½chto dvoch Ä¾udÃ­ priateÄ¾ov. Ak vÅ¡ak odhliadneme od tohto oznaÄenia, nejakÃ¡ sociÃ¡lna vÃ¤zba medzi dvoma Ä¾uÄmi vznikÃ¡. Je prÃ­kladom Å¡pecifickÃ©ho sociÃ¡lneho vzÅ¥ahu, ktorÃ½ je podmienenÃ½ existenciou webu. Äaleko viac, hypotÃ©za webovedy znie, Å¾e poznanie vlastnostÃ­ aj takÃ½chto sociÃ¡lnych vÃ¤zieb vznikajÃºcich v prostredÃ­ webu je potrebnÃ© pre jeho lepÅ¡ie pochopenie."
115,159,0.527,Algebra a diskrÃ©tna  matematika,"13.4. PouÅ¾ite Kruskalov algoritmus na nÃ¡jdenie minimÃ¡lnej kostry pri grafoch z prÃ­kladu 13.3 a urÄite jej vÃ¡hu. RieÅ¡enie: NÃ¡jdenÃ© kostry sÃº rovnakÃ©, ale keby niektorÃ© z hrÃ¡n s vyÅ¡Å¡Ã­mi vÃ¡hami mali rovnakÃ© vÃ¡hy, potom tak Kruskalov, aj Primov algoritmus by mohli viesÅ¥ k rozdielnym kostrÃ¡m kvÃ´li nÃ¡hodnosti vÃ½beru u rovnako ohodnotenÃ½ch hrÃ¡n. 13.5. Nech T je minimÃ¡lna kostra ohodnotenÃ©ho grafu G. UrÄte, Äi nasledujÃºce tvrdenia sÃº pravdivÃ©: (a) VÃ¡ha kaÅ¾dej hrany patriacej do T je menÅ¡ia alebo rovnÃ¡ vÃ¡he Ä¾ubovoÄ¾nej hrany z G nepatriacej do T. KontraprÃ­klad"
190,259,0.527,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"1. VÅ¡etci, ktorÃ­ prispievajÃº do projektu pracujÃº spolu na jednom mieste. Ak s nami zÃ¡kaznÃ­cka strana pracuje priamo na projekte, nemusÃ­me Bez riadenia venovaÅ¥ toÄ¾ko Ãºsilia Å¡pecifikÃ¡cii a poÅ¾iadavkÃ¡m. VÅ¡etci poznajÃº prokvality sa jekt do hÄºbky. nezaobÃ­de ani 2. PlÃ¡novanie projektu poÄas celÃ©ho jeho Å¾ivota. malÃ½ projekt 3. ÄastÃ¡ aÅ¾ neustÃ¡la integrÃ¡cia produktu. SnaÅ¾iÅ¥ sa vytvÃ¡raÅ¥ jednotlivÃ© Äasti aplikÃ¡cie tak, aby mohli byÅ¥ samostatne integrovateÄ¾nÃ©. OveÄ¾a s 5-7 Ä¾uÄmi. rÃ½chlejÅ¡ie vieme posÃºdiÅ¥ aktuÃ¡lny stav projektu a nÃ¡sledne odhadovaÅ¥ novÃ© Äinnosti bez namÃ¡havÃ©ho a podrobnÃ©ho plÃ¡novania. 4. ÄastÃ© prehliadky kÃ³du. Nie je priamo sÃºÄasÅ¥ou agilnÃ½ch metodÃ­k, ale z mÃ´jho pohÄ¾adu vhodnejÅ¡ie ako niekedy Å¥aÅ¾ko realizovateÄ¾nÃ© programovanie v pÃ¡roch. Ak si zavolÃ¡m pri uloÅ¾enÃ­ do ÃºloÅ¾iska kolegu na posÃºdenie toho, Äo som spravil spotrebujeme mÃ¡lo projektovÃ©ho Äasu, ale veÄ¾a zÃ­skame. S tÃ½mto princÃ­pom sÃºvisÃ­ aj princÃ­p spoloÄnÃ©ho vlastnÃ­ctva kÃ³du."
43,404,0.527,Objektovo orientovanÃ© programovanie v C++,"Teraz uÅ¾ program bude pracovaÅ¥ skutoÄne korektne. Na zÃ¡ver eÅ¡te spomeÅme, Å¾e zatiaÄ¾ Äo deÅ¡truktor mÃ´Å¾e byÅ¥ virtuÃ¡lny, konÅ¡truktor nie. Pri konÅ¡truktoroch vÅ¡ak ani nenastÃ¡va uvedenÃ½ problÃ©m â vÅ¾dy sa zavolÃ¡ sprÃ¡vny konÅ¡truktor prislÃºchajÃºci k objektu, ktorÃ½ vytvÃ¡rame."
190,95,0.526,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Proces samotnÃ©ho rozkladu je pomerne zloÅ¾itÃ½. ZatiaÄ¾ nemÃ¡me presnÃ½ kÄ¾ÃºÄ, ktorÃ½m by sme mohli kaÅ¾dÃ½ projekt rozloÅ¾iÅ¥. KaÅ¾dÃ½ projekt je jedineÄnÃ½, a preto si vyÅ¾aduje jedineÄnÃ½ prÃ­stup. VÃ½sledok kvalitnÃ©ho rozkladu prÃ¡ce, v ktorom vÅ¡etky elementy sÃº nezÃ¡vislÃ©, paralelne vykonÃ¡vateÄ¾nÃ© a zÃ¡roveÅ sÃº nastavenÃ© tak, aby rozvinuli aj schopnosti rieÅ¡iteÄ¾ov, sa dÃ¡ prirovnaÅ¥ k umeleckÃ©mu dielu. VytvorenÃ½ strom by mal byÅ¥ podÄ¾a mÅa kompromisom medzi kvalitou a efektivitou a zÃ¡roveÅ by rozloÅ¾enie prÃ¡c malo umoÅ¾ÅovaÅ¥ rozvoj pracovnÃ­kov. Ãplne stopercentnÃ½ takÃ½to rozklad nikdy nebude, ale skÃºsenÃ½ vedÃºci pracovnÃ­k sa snaÅ¾Ã­ tomuto ideÃ¡lnemu modelu priblÃ­Å¾iÅ¥. VzhÄ¾adom na tieto fakty si myslÃ­m, Å¾e kvalitnÃ½ vedÃºci pracovnÃ­k, ktorÃ½ dokÃ¡Å¾e aj zloÅ¾itÃ½ projekt kvalitne s prehÄ¾adom rozloÅ¾iÅ¥, by mal byÅ¥ vo firme vyvÃ¡Å¾enÃ½ zlatom."
135,282,0.525,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.7.6 MetodolÃ³gia paralelnÃ©ho programovania ParalelnÃ© programovanie je innos vemi nÃ¡ronÃ¡ na autorovu tvorivos a predstavivos. Postupom asu bola vytvorenÃ¡ metodolÃ³gia, ktorÃ¡ uahuje vykonanie niektorÃ½ch innostÃ­. IdeÃ¡lnym zavedenÃ­m paralelizmu by bolo jeho pouÅ¾itie bez ohadu na hardvÃ©rovÃº architektÃºru a programovacÃ­ jazyk. V praxi vÅ¡ak treba bra vÅ¡etky tieto faktory do Ãºvahy a preto je dÃ´leÅ¾itÃ½ aj vÃ½ber programovacieho jazyka a k nemu najvhodnejÅ¡ej architektÃºry."
195,206,0.525,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"12 OdporÃºÄanie vo fÃ¡ze analÃ½zy poÅ¾iadaviek Vo fÃ¡ze analÃ½zy poÅ¾iadaviek vznikajÃº rÃ´zne predstavy a ciele o produkte viacerÃ½ch ÃºÄastnÃ­kov, ktorÃ­, eÅ¡te navyÅ¡e, nemusia byÅ¥ vÅ¾dy dostupnÃ­ geograficky. Preto vzÃ¡jomnÃ¡ dohoda mÃ´Å¾e byÅ¥ problematickÃ¡ a prinÃ¡Å¡a rÃ´zne vÃ½zvy. RieÅ¡enÃ­m sa mÃ´Å¾u zdaÅ¥ online fÃ³ra, avÅ¡ak tie trpia viac problÃ©mami, ako sa zdÃ¡. JednÃ½m z prÃ­kladov mÃ´Å¾e byÅ¥ nÃ­zka efektivita dohadovania sa na fÃ³re Ãºstiaca do neschopnosti ÃºÄastnÃ­kov sa dohodnÃºÅ¥. OdporÃºÄanÃ­m sa vÅ¡ak dajÃº zmierniÅ¥ rÃ´zne, aj tieto problÃ©my, napr. odporÃºÄanÃ­m ÃºÄastnÃ­kovâexpertov, tÃ©m diskusii, Äi dokonca funkciÃ­ podÄ¾a podobnÃ©ho produktu. Dohadovanie potom naberÃ¡ inÃ½ rozmer; systÃ©m prispieva k formovaniu produktu. Tento ÄlÃ¡nok diskutuje a opisuje postupy, existujÃºce systÃ©my a algoritmy pre odporÃºÄanie vo fÃ¡ze analÃ½zy poÅ¾iadaviek. Formovanie softvÃ©rovÃ©ho produktu je zloÅ¾itÃ½ proces, v ktorom pÃ´sobÃ­ mnoho Ä¾udÃ­. Za cieÄ¾ si kladÃº explicitnÃº identifikÃ¡ciu potrieb, poÅ¾iadaviek a tÃºÅ¾ob ÃºÄastnÃ­kov. PrÃ¡ve tu je dÃ´leÅ¾itÃ© si uvedomiÅ¥, Å¾e tÃ­to ÃºÄastnÃ­ci zvÃ¤ÄÅ¡a orientovanÃ­ na podnikanie nemajÃº technickÃ© pozadie a preto sÃº potrebnÃ­ aj ÄalÅ¡Ã­ ÃºÄastnÃ­ciâprÃ¡ve tÃ­ s technickÃ½m pozadÃ­m. V sÃºÄte je to potom tÃ½chto mnoho Ä¾udÃ­, kde kaÅ¾dÃ½ je orientovanÃ½ na inÃº problematiku, ktorÃ­ sa spoloÄne podieÄ¾ajÃº na formovanÃ­ analÃ½zy poÅ¾iadaviek a teda identifikÃ¡ciu potrieb, poÅ¾iadaviek a tÃºÅ¾ob. VÅ¡etci tÃ­to Ä¾udia sa musia dohodnÃºÅ¥ a Äasto sa nenachÃ¡dzajÃº na rovnakom mieste, alebo majÃº rovnakÃ½ ÄasovÃ½ priestor. Preto systÃ©m vo fÃ¡ze analÃ½zy poÅ¾iadaviek musÃ­ umoÅ¾niÅ¥ formovaÅ¥ poÅ¾iadavky v iterÃ¡ciÃ¡ch a asynchrÃ³nne. Okrem spomenutÃ©ho, kaÅ¾dÃ½ ÃºÄastnÃ­k mÃ´Å¾e maÅ¥ inÃ© predstavy a eÅ¡te navyÅ¡e do toho vstupuje expert, ktorÃ½ mÃ´Å¾e vo veÄ¾kej miere ovplyvniÅ¥ rozhodovanie."
76,42,0.525,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.3 DiskrÃ©tny pravdepodobnostnÃ½ priestor Z ÄlÃ¡nku 1.1 vieme, Å¾e model nÃ¡hodnÃ©ho pokusu je trojica symbolov: (ï, S, P). ï predstavuje mnoÅ¾inu vÅ¡etkÃ½ch potenciÃ¡lne moÅ¾nÃ½ch vÃ½sledkov pokusu, S je systÃ©m podmnoÅ¾Ã­n mnoÅ¾iny ï a modeluje nÃ¡hodnÃ© udalosti. PovedaÅ¥, Å¾e A je nÃ¡hodnÃ¡ udalosÅ¥, je to istÃ©, ako napÃ­saÅ¥ AïS. Symbol P predstavuje pravdepodobnosÅ¥. Pritom P chÃ¡peme ako zobrazenie, ktorÃ© udalostiam A (t. j. prvkom systÃ©mu S) priraÄuje ich pravdepodobnosÅ¥ P(A). ZdÃ´razÅujeme, Å¾e ï· jedna vec je pre udalosti konkrÃ©tneho pokusu vedieÅ¥ stanoviÅ¥ ich pravdepodobnosti, teda pre AïS vedieÅ¥ stanoviÅ¥ hodnotu P(A) tak, aby model sprÃ¡vne popisoval skutoÄnosÅ¥ a ï· druhÃ¡ vec je â poznaÅ¥ vlastnosti, ktorÃ© mÃ¡ kaÅ¾dÃ¡ pravdepodobnosÅ¥. PrvÃ¡ vec je nÃ¡roÄnejÅ¡ia. Aj preto, Å¾e nie je vÅ¾dy jednoduchÃ© postrehnÃºÅ¥, Å¾e v naÅ¡om modelovanÃ­ je nieÄo zlÃ©, Å¾e nieÄo nesedÃ­. Äo sa tÃ½ka druhej veci, teda vlastnostÃ­ pravdepodobnosti vo vÅ¡eobecnosti, tÃº prÃ¡cu uÅ¾ urobili inÃ­. Budeme si vÅ¡Ã­maÅ¥, Äo o tom hovoria vety tejto kapitoly. V tomto ÄlÃ¡nku bude mnoÅ¾ina ï alebo koneÄnÃ¡, alebo ak nekoneÄnÃ¡, tak spoÄÃ­tateÄ¾nÃ¡. Za systÃ©m S mÃ´Å¾eme v tÃ½chto prÃ­padoch vziaÅ¥ systÃ©m vÅ¡etkÃ½ch podmnoÅ¾Ã­n mnoÅ¾iny ï. AkÃ© vlastnosti mÃ¡ (kaÅ¾dÃ¡) pravdepodobnosÅ¥ P na systÃ©me S? MotivÃ¡ciou pre nasledujÃºcu definÃ­ciu sÃº vlastnosti tÃ½ch konkrÃ©tnych pravdepodobnostÃ­, ktorÃ© sme rozoberali v ÄlÃ¡nkoch 1.1 a 1.2. ZÃ­skali sme ich buÄ uplatnenÃ­m klasickej Laplaceovej definÃ­cie, alebo pravdepodobnosti sme chÃ¡pali ako limity postupnostÃ­ relatÃ­vnych poÄetnostÃ­. V oboch prÃ­padoch â keÄ P chÃ¡peme ako zobrazenie â je pravdepodobnosÅ¥ P aditÃ­vna. V definÃ­cii 1.3.1 pouÅ¾ijme zÃ¡pis P( ) namiesto presnÃ©ho P({ }) a toto zjednoduÅ¡enie budeme pouÅ¾Ã­vaÅ¥ aj Äalej. 1.3.1 DefinÃ­cia. PravdepodobnostnÃ½ priestor (ï, S, P) sa nazÃ½va diskrÃ©tny, ak ï je koneÄnÃ¡, t. j. ï = { }, alebo nekoneÄnÃ¡, ale spoÄÃ­tateÄ¾nÃ¡, t. j. ï = { S je systÃ©m vÅ¡etkÃ½ch podmnoÅ¾Ã­n mnoÅ¾iny ï, P: S â â© âª je zobrazenie s vlastnosÅ¥ami: 1. â"
236,38,0.525,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Veci, ktorÃ© potrebujete vedieÅ¥ .idx Ak vÃ¡Å¡ dokument obsahuje register. LATEX sem ukladÃ¡ vÅ¡etky slovÃ¡, ktorÃ© sa majÃº objaviÅ¥ v registri. Tento sÃºbor musÃ­ byÅ¥ spracovanÃ½ programom makeindex. ÄalÅ¡iu informÃ¡ciu o tvorbe indexu nÃ¡jdete v oddiele 4.4 na strane 63. .ind Je to vÃ½sledok spracovania sÃºboru .idx pripravenÃ½ na zaradenie do vÃ¡Å¡ho dokumentu poÄas nasledujÃºceho kompilaÄnÃ©ho cyklu. .ilg SÃºbor hlÃ¡senÃ­ o priebehu programu makeindex."
135,318,0.525,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"120 Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informanÃ½ch systÃ©mov Pri nÃ¡vrhu rÃ¡mca treba myslie na to, Å¾e je asto jednoduchÅ¡ie vytvÃ¡ra aplikÃ¡ciu inÅ¡tanciovanÃ­m existujÃºcich Å¡tandardnÃ½ch objektov, im sa dosiahne, Å¾e asti aplikÃ¡cie je moÅ¾nÃ© vytvori bez programovania, naprÃ­klad cez grafickÃ© rozhranie rÃ¡mca. KeÅ¾e v mnohÃ½ch organizÃ¡ciÃ¡ch sa stÃ¡le pouÅ¾Ã­va kvalitnÃ½ hoci zastaranÃ½ softvÃ©r, treba pri nÃ¡vrhu myslie aj na moÅ¾nosti jeho integrÃ¡cie ako aj na integrÃ¡ciu aplikÃ¡ciÃ­ vytvorenÃ½ch v rozdielnych rÃ¡mcoch. NÃ¡vrh rÃ¡mcov by mal by vykonÃ¡vanÃ½ aÅ¾ po riadnom pochopenÃ­ domÃ©novej oblasti, priom by mal by o najahÅ¡ie pochopitenÃ½. Z hadiska Å¡truktÃºry sa odporÃºa navrhova rÃ¡mce tak, aby podporovali najmÃ¤ zamenitenos, dokonca eÅ¡te pred znovupouÅ¾itenosou. KaÅ¾dÃ½ dobrÃ½ nÃ¡vrh by mal obsahova aj moÅ¾nosti testovania. ProblÃ©my s rÃ¡mcami RÃ¡mce sÃº zaloÅ¾enÃ© na uritÃ½ch zÃ¡kladnÃ½ch Å¡truktÃºrach rieÅ¡enÃ­ problÃ©mov a vychÃ¡dzajÃº z mnohÃ½ch predpokladov, na ktorÃ© reagujÃº vlastnÃ½mi spÃ´sobmi. Tieto vlastnosti vÅ¡ak mÃ´Å¾u spÃ´sobova viacerÃ© problÃ©my, i uÅ¾ ide o vÃ½voj rÃ¡mcov so zapracovÃ¡vanÃ­m zmien v domÃ©novej oblasti alebo rozsahom pokrytia domÃ©ny alebo kompozÃ­ciou, kedy mÃ´Å¾u vznika naprÃ­klad problÃ©my s riadenÃ­m, ak spojÃ­me dva rÃ¡mce, ktorÃ© aktÃ­vne riadia tok aplikÃ¡cie. alÅ¡Ã­mi problÃ©mami bÃ½vajÃº naprÃ­klad kompozÃ­cia so zastaranÃ½mi komponentmi, ktorÃ¡ sa zvykne rieÅ¡i pomocou adaptÃ©ra, i pokazenie rÃ¡mca, kedy v rÃ¡mci vÃ½voja rÃ¡mca prestanÃº by funknÃ© starÅ¡ie aplikÃ¡cie. RÃ¡mce predstavujÃº znanÃº pomoc pri vÃ½voji softvÃ©ru. PredstavujÃº posun v znovupouÅ¾itÃ­ a zefektÃ­vnenÃ­ prÃ¡ce. MajÃº vyÅ¡Å¡ie vstupnÃ© nÃ¡klady (najmÃ¤ z hadiska nauenia) a svoje nevÃ½hody, ale ponÃºkajÃº aj podstatnÃ© vÃ½hody, ktorÃ© umoÅ¾ujÃº vyvÃ­ja kvalitnÃ© aplikÃ¡cie."
190,244,0.525,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"UrÄite nie som sÃ¡m, kto si uÅ¾ mnohokrÃ¡t pred prÃ¡cou na malom projekte povedal: âTak toto je malÃ½ projekt. Nebudem predsa strÃ¡caÅ¥ Äas nad jeho plÃ¡novanÃ­m. SamotnÃ¡ realizÃ¡cia bude takto kratÅ¡ia!â V koneÄnom dÃ´sledku som sa takto aÅ¾ prÃ­liÅ¡ Äasto oklamal. Nakoniec som venoval projektu podstatne viac, ako som pÃ´vodne zamÃ½Å¡Ä¾al. Äi uÅ¾ Äasu alebo sily. VÃ¤ÄÅ¡inou vÅ¡ak obe. Dnes si radÅ¡ej poloÅ¾Ã­m otÃ¡zku: âNaozaj dokÃ¡Å¾em okamÅ¾ite odhadnÃºÅ¥, Äo vÅ¡etko budem musieÅ¥ do projektu vloÅ¾iÅ¥? VidÃ­m do projektu tak dobre, aj keÄ som sa nad nÃ­m vÃ´bec nezamÃ½Å¡Ä¾al? NuÅ¾, odpoveÄ je takmer vÅ¾dy ânieâ. Äo je teda najvÃ¤ÄÅ¡Ã­m problÃ©mom malÃ½ch projektov? Ä½udia ich majÃº tendenciu podceÅovaÅ¥. Äo sa na prvÃ½ pohÄ¾ad zdÃ¡ ako malÃ½ projekt, nÃ¡s mÃ´Å¾e v koneÄnom dÃ´sledku stÃ¡Å¥ omnoho viac ako projekt, ktorÃ©ho veÄ¾kÃ½ rozsah je Ä¾ahko rozpoznateÄ¾nÃ½."
195,132,0.524,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"7 VÃ½konnostnÃ© testovanie V predchÃ¡dzajÃºcej kapitole sme sa venovali metrikÃ¡m a meraniu typickÃ½ch charakteristickÃ½ch vlastnostÃ­ odporÃºÄaÄov. SpomÃ­nali sme vlastnosti ako presnosÅ¥ odporÃºÄania, pokrytie, rÃ½chlosÅ¥ uÄenia, robustnosÅ¥, uÅ¾itoÄnosÅ¥ a niekoÄ¾ko ÄalÅ¡Ã­ch. V tejto kapitole nadviaÅ¾eme na porovnÃ¡vanie a vyhodnocovanie jednotlivÃ½ch kvalitatÃ­vnych charakteristÃ­k v sÃºvislosti s meranÃ­m celkovÃ©ho vÃ½konu odporÃºÄaÄov. Pri hÄ¾adanÃ­ ideÃ¡lneho odporÃºÄaÄa musÃ­me zohÄ¾adniÅ¥ viacero charakteristÃ­k sÃºÄasne a taktieÅ¾ nemÃ´Å¾eme ignorovaÅ¥ Å¡pecifickÃ© poÅ¾iadavky vyplÃ½vajÃºce z prostredia, v ktorom bude odporÃºÄaÄ nasadenÃ½. TakÃ©to merania odporÃºÄaÄov sa oznaÄujÃº pojmom vÃ½konnostnÃ© testovanie. Pri vÃ½konnostnom testovanÃ­ zohÄ¾adÅujeme nielen kvalitatÃ­vne charakteristiky, ale aj ÄalÅ¡ie hÄ¾adiskÃ¡ odporÃºÄaÄov, ktorÃ© vplÃ½vajÃº na ich pouÅ¾itie. VÃ½konnostnÃ© testovanie je systematickÃ½ proces porovnÃ¡vania a merania produktov s cieÄ¾om ich neustÃ¡leho vylepÅ¡ovania. PÃ´vodne sa tento pojem pouÅ¾Ã­val v domÃ©ne zlepÅ¡ovania podnikovÃ½ch procesov hÄ¾adanÃ­m spÃ´sobov, ako efektÃ­vnejÅ¡ie dosiahnuÅ¥ podnikovÃ© ciele. KeÄÅ¾e ide o zloÅ¾itÃ© procesy, je potrebnÃ© zvoliÅ¥ iteratÃ­vny postup, priÄom sa oÄakÃ¡va, Å¾e kaÅ¾dÃ¡ ÄalÅ¡ia iterÃ¡cia tento proces aspoÅ trochu zefektÃ­vni. Preto sa oznaÄuje ako nepretrÅ¾itÃ½ a systematickÃ½ proces porovnÃ¡vania a merania produktov, procesov a metÃ³d vlastnej organizÃ¡cie s tÃ½mi, ktorÃ© boli uznanÃ© ako vhodnÃ© pre toto meranie, za ÃºÄelom urÄiÅ¥ ciele zlepÅ¡enia vlastnÃ½ch aktivÃ­t [6]. V poslednej dobe zaÄÃ­na byÅ¥ tento pojem populÃ¡rny aj vo vedeckej oblasti softvÃ©rovÃ©ho inÅ¾inierstva, kde sa vÃ½konnostnÃ½m testovanÃ­m oznaÄuje proces hÄ¾adania optimÃ¡lneho algoritmu pre konkrÃ©tny vedeckÃ½ problÃ©m alebo optimalizÃ¡ciu Å¾ivotnÃ©ho cyklu vÃ½voja softvÃ©ru vrÃ¡tane jeho automatizovanÃ©ho testovania [3]. Ide o konÅ¡trukÄnÃ½ prÃ­stup zvyÅ¡ovania kvality v oblasti manaÅ¾mentu a inÅ¾inierstva s cieÄ¾om nÃ¡jsÅ¥ najhodnejÅ¡ie rieÅ¡enie pre konkrÃ©tny problÃ©m [2]. Autori publikÃ¡cie zameranej na odporÃºÄanie v oblasti softvÃ©rovÃ©ho inÅ¾inierstva [7] identifikujÃº vÃ½konnostnÃ© testovanie ako metodolÃ³giu vhodnÃº pre zaistenie kvality odporÃºÄaÄov v softvÃ©rovom inÅ¾inierstve. ZameriavajÃº sa prevaÅ¾ne na vyhodnocovanie charakteristÃ­k ako presnosÅ¥, ÃºplnosÅ¥, uÅ¾itoÄ-"
240,114,0.523,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 2-2 (rieÅ¡enie) ASCII hodnoty znakov ÄÃ­slic tvoria interval: '0' (48), '1' (49), ..., '9' (57), preto v podmienke mÃ´Å¾eme pouÅ¾iÅ¥ operÃ¡cie >= a <=. Podobne pri znakoch: 'a' (97), ..., 'z' (122) a 'A' (65), ..., 'Z' (90). DoplnenÃ½ program je nasledovnÃ½:"
265,402,0.523,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"Je to stratÃ©gia, kedy najskÃ´r navrhujeme zÃ¡sadnÃ© Ärty softvÃ©ru a postupne sa prepracÃºvame k detailom (inÃ½mi slovami, ideme od abstraktnÃ©ho ku konkrÃ©tnemu). Z pohÄ¾adu Å¡truktÃºry softvÃ©ru je pre tÃºto stratÃ©giu typickÃ©, Å¾e najskÃ´r vypracÃºvame architektonickÃ½ nÃ¡vrh a aÅ¾ nÃ¡sledne jednotlivÃ© komponenty a ich sÃºÄasti. Z pohÄ¾adu dynamiky softvÃ©ru zaÄÃ­name od procesov a funkcionÃ¡lnych poÅ¾iadaviek a postupne odkrÃ½vame a navrhujeme detailnejÅ¡ie, akÃ© procesy a algoritmy majÃº prebiehaÅ¥ vo vnÃºtri softvÃ©ru aÅ¾ sa dostaneme na ÃºroveÅ jednotlivÃ½ch metÃ³d. Po tejto stratÃ©gii siahame predovÅ¡etkÃ½m vtedy, keÄ je jasnÃ¡ Å¡pecifikÃ¡cia celÃ©ho softvÃ©ru. StratÃ©gia mÃ¡ blÃ­zko k vodopÃ¡dovÃ©mu modelu vÃ½voja, preto si musÃ­me byÅ¥ vedomÃ­ aj jej rizÃ­k. Jeden z nich je aj problematickÃ© odhadovanie Ãºsilia (prÃ¡ce) a predvÃ­danie problÃ©mov hlavne v prvÃ½ch fÃ¡zach vÃ½voja, keÄ pracujeme s prÃ­liÅ¡ veÄ¾kÃ½mi, zatiaÄ¾ neznÃ¡mymi komponentmi. Je preto veÄ¾mi vÃ½hodnÃ©, ak rieÅ¡ime dobre znÃ¡my problÃ©m, resp. mÃ¡me skÃºsenosti s podobnÃ½m projektom a mÃ´Å¾eme tak lepÅ¡ie odhadovaÅ¥ a predvÃ­daÅ¥ problÃ©my."
94,211,0.522,Sprievodca svetom vedeckÃ©ho publikovania,"PredmetovÃ© kategÃ³rie (Subject cathegories) KaÅ¾dÃ¡ publikÃ¡cia indexovanÃ¡ v databÃ¡ze Scopus je zaradenÃ¡ do predmetovÃ½ch kategÃ³riÃ­. Scopus umoÅ¾Åuje vyhÄ¾adÃ¡vaÅ¥ ÄasopiseckÃ© tituly podÄ¾a kategorickÃ©ho Älenenia, priÄom tieto Äasopisy majÃº vyrÃ¡tanÃ© citaÄnÃ© metriky CiteScore, SNIP a SJR. Takto je moÅ¾nÃ© zistiÅ¥ najcitovanejÅ¡ie Äasopisy v danej kategÃ³rii a vzÃ¡jomne tieto kategÃ³rie (a ÄasopiseckÃ© tituly) porovnÃ¡vaÅ¥. OpÃ¤Å¥ platÃ­, Å¾e vzhÄ¾adom na multidisciplinaritu dneÅ¡nÃ©ho vÃ½skumu mÃ´Å¾e byÅ¥ titul zaradenÃ½ do viacerÃ½ch kategÃ³riÃ­."
76,135,0.521,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.3.4 PoznÃ¡mka. DÃ¡ sa dokÃ¡zaÅ¥, Å¾e kaÅ¾dÃº funkciu G: R ï® â© âª, ktorÃ¡ mÃ¡ vlastnosti 1, 2, 3 z vety 2.3.3, mÃ´Å¾eme povaÅ¾ovaÅ¥ za distribuÄnÃº funkciu nejakej nÃ¡hodnej veliÄiny. MoÅ¾no totiÅ¾ zostrojiÅ¥ (ï, S, P) a definovaÅ¥ na Åom tak, aby funkcia G bola distribuÄnou funkciou veliÄiny . Ak teda zadanie Ãºlohy zaÄÃ­na slovami ânech je distribuÄnou funkciouâ (veliÄiny ), staÄÃ­ overiÅ¥, Å¾e mÃ¡ vlastnosti 1, 2, 3 a akceptujeme, Å¾e takÃ¡ nÃ¡hodnÃ¡ veliÄina (ktorej je distribuÄnÃ¡ funkcia) naozaj existuje (aj keÄ ju nemÃ¡me zadanÃº). 2.3.5 Veta. Nech je diskrÃ©tna veliÄina s pravdepodobnostnou funkciou mnoÅ¾inou ( ) = { â¦ }. Potom pre jej distribuÄnÃº funkciu platÃ­ ( ) pre vÅ¡etky xïR. Ak"
111,100,0.521,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Ako sa vyrovnaÅ¥ s ânonresponse biasâ? â¢ ZvÃ½Å¡te mieru odpovedÃ­. Venujte patriÄnÃ© Ãºsilie dobre navrhnÃºÅ¥ dotaznÃ­k. KratÅ¡ie a jasne formulovanÃ© dotaznÃ­ky majÃº vÃ¤ÄÅ¡iu Å¡ancu, Å¾e ich Ä¾udia vyplnia. Vyhnite sa citlivÃ½m otÃ¡zkam, ktorÃ© by mohli respondentov odradiÅ¥ od odpovedania. â¢ SnaÅ¾te sa vybraÅ¥ vzorku, ktorÃ¡ je Äo najreprezentatÃ­vnejÅ¡ia pre celÃº populÃ¡ciu. PonÃºknite ÃºÄastnÃ­kom nejakÃº odmenu, napr. moÅ¾nosÅ¥ zÃ­skaÅ¥ kupÃ³n. Personalizujte oslovenie respondentov a zdÃ´raznite dÃ´leÅ¾itosÅ¥ ich odpovedÃ­. UbezpeÄte respondentov o anonymite ich odpovedÃ­. PonÃºknite rÃ´zne moÅ¾nosti vyplnenia dotaznÃ­ka, napr. cez mobil aj stolnÃ½ poÄÃ­taÄ. â¢ Niekedy mÃ´Å¾e byÅ¥ vhodnejÅ¡ia inÃ¡ metÃ³da vÃ½skumu, napr. rozhovor alebo pozorovanie. Ak viete, Å¾e chcete z nejakÃ©ho dÃ´vodu vylÃºÄiÅ¥ skupinu respondentov, mÃ´Å¾ete nastaviÅ¥ kontrolnÃº otÃ¡zku (angl. screening question). TÃ¡to otÃ¡zka sa zobrazÃ­ ako prvÃ¡ otÃ¡zka v Å¡tÃºdii a vÅ¡etci respondenti, ktorÃ­ odpovedia moÅ¾nosÅ¥ou, ktorÃº ste oznaÄili na vylÃºÄenie, budÃº automaticky vylÃºÄenÃ­. OtÃ¡zka mÃ´Å¾e byÅ¥ aj komplexnejÅ¡ia, miesto jednej moÅ¾nosti na vylÃºÄenie mÃ´Å¾ete zvoliÅ¥ viacerÃ© moÅ¾nosti, prÃ­p. pridaÅ¥ viackrokovÃ©/podmienenÃ© vylÃºÄenie zo Å¡tÃºdie. DotaznÃ­ky sÃº najrozÅ¡Ã­renejÅ¡Ã­ nÃ¡stroj na zÃ­skavanie spÃ¤tnej vÃ¤zby. V obehu je veÄ¾a prieskumov a Ä¾udia nemusia maÅ¥ veÄ¾kÃº motivÃ¡ciu zÃºÄastniÅ¥ sa prÃ¡ve na tom vaÅ¡om. Preto mÃ´Å¾e byÅ¥ naozaj dobrÃ© pouÅ¾iÅ¥ nejakÃº motivÃ¡ciu. PonÃºknite kupÃ³n alebo bezplatnÃº skÃºÅ¡obnÃº verziu, darÄekovÃº kartu alebo skorÅ¡Ã­ prÃ­stup (k sluÅ¾be, funkcii) tÃ½m, ktorÃ­ sa zÃºÄastnia. Majte vÅ¡ak na pamÃ¤ti, Å¾e aj to mÃ´Å¾e do vaÅ¡ich Ãºdajov vniesÅ¥ skreslenie. NiektorÃ­ Ä¾udia sa mÃ´Å¾u prieskumu zÃºÄastniÅ¥ len preto, aby zÃ­skali odmenu a odpovediam nebudÃº venovaÅ¥ veÄ¾kÃº pozornosÅ¥. InÃ­ mÃ´Å¾u maÅ¥ tendenciu odpovedaÅ¥ pozitÃ­vnejÅ¡ie. V prÃ­pade, ak robÃ­te zmeny na svojej webovej strÃ¡nke (produkte Äi sluÅ¾be), mÃ´Å¾e byÅ¥ uÅ¾itoÄnÃ© zbieraÅ¥ Ãºdaje z dotaznÃ­ka poÄas dlhÅ¡ieho ÄasovÃ©ho obdobia a zistiÅ¥, ako sa odpovede menia so zmenami vaÅ¡ej webovej strÃ¡nky."
59,14,0.521,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1.4 KognitÃ­vna neuroveda Neuroveda Å¡tuduje nervovÃ½ systÃ©m, jeho vlastnosti, architektÃºru, fyziolÃ³giu a biofyziku neurÃ³nov a spojov (synapsiÃ­) medzi nimi. Jej Å¡pecializovanÃ¡ ÄasÅ¥ kognitÃ­vna neuroveda [13] Å¡tuduje mechanizmy realizÃ¡cie kognitÃ­vnych aktivÃ­t mozgu. Je to veda o informaÄnÃ½ch procesoch prebiehajÃºcich v mozgu: (1) akÃ½m spÃ´sobom je tÃ¡to informÃ¡cia zÃ­skavanÃ¡ z naÅ¡ich zmyslov, (2) ako sÃº realizovanÃ© procesy vnÃ­mania a rozpoznÃ¡vania, (3) ako vznikÃ¡ myslenie a vedomie, (4) ako vznikajÃº procesy rozhodovania, ktorÃ© zahÅÅajÃº predvÃ­danie budÃºcich stavov nÃ¡Å¡ho okolia a dÃ´sledkov naÅ¡ej aktivity, (5) Äo je to uÄenie a ako je realizovanÃ¡ pamÃ¤Å¥ a koneÄne, (6) ako sÃº implementovanÃ© procesy tvoriace nÃ¡Å¡ jazyk? Tieto Äinnosti patria do fundamentÃ¡lneho jadra kognitÃ­vnej vedy. MÃ´Å¾eme si poloÅ¾iÅ¥ otÃ¡zku, akÃ½ je rozdiel medzi kognitÃ­vnou vedou a kognitÃ­vnou neurovedou? HÄ¾adaÅ¥ odpoveÄ na tÃºto otÃ¡zku nie je jednoduchÃ© v dÃ´sledku veÄ¾kÃ©ho presahu medzi tÃ½mito dvoma âkognitÃ­vnymiâ vednÃ½mi disciplÃ­nami. SnÃ¡Ä, pomocou urÄitÃ©ho zjednoduÅ¡enÃ©ho prÃ­stupu k tomuto problÃ©mu, mÃ´Å¾eme povedaÅ¥, Å¾e medzi âkognitÃ­vnou neurovedouâ a âkognitÃ­vnou vedouâ existuje demarkaÄnÃ¡ Äiara v predmete ich zÃ¡ujmu, predmet zÃ¡ujmu kognitÃ­vnej neurovedy je hardvÃ©r (t. j. biologickÃ¡ realizÃ¡cia procesov) a predmet zÃ¡ujmu kognitÃ­vnej vedy je softvÃ©r (t. j. informatickÃ¡ a/alebo algoritmickÃ¡ realizÃ¡cia procesov). Tu musÃ­me vÅ¡ak poznamenaÅ¥, Å¾e toto zakotvenie kognitÃ­vnej vedy v biologickÃ½ch vedÃ¡ch (na nervovom substrÃ¡te) je hlavnÃ© kritÃ©rium odlÃ­Å¡enia kognitÃ­vnej vedy od umelej inteligencie, ktorÃ¡ taktieÅ¾ Å¡tuduje algoritmickÃº realizÃ¡ciu kognitÃ­vnych (alebo vÅ¡eobecnejÅ¡ie â inteligentnÃ½ch) procesov, ale nie je zakotvenÃ¡ na neurÃ³novom substrÃ¡te. VeÄ¾mi zaujÃ­mavÃ¡ je histÃ³ria neurovedy (a teda aj kognitÃ­vnej neurovedy). Za prvÃ½ch experimentÃ¡torov s Ä¾udskÃ½m mozgom sÃº pokladanÃ­ EgypÅ¥ania, ktorÃ­ uÅ¾ pred 5000 rokmi vykonÃ¡vali chirurgickÃ© vÃ½kony na mozgu. O ÃºspeÅ¡nosti tÃ½chto zÃ¡krokov svedÄia archeologickÃ© nÃ¡lezy, kde boli nÃ¡jdenÃ© lebky so zahojenou trepanÃ¡ciou lebeÄnej kosti. Filozof Aristoteles veril, Å¾e centrom naÅ¡ej inteligencie je srdce (podÄ¾a neho mozog je orgÃ¡n na"
369,307,0.521,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"PoistnÃ¡ zmluva obsahuje jeden alebo viac predmetov poistenia, priÄom kaÅ¾dÃ½ predmet poistenia sa tÃ½ka jednÃ©ho poistnÃ©ho objektu. Ak naprÃ­klad fyzickÃ¡ osoba uzatvÃ¡ra zÃ¡konnÃ© poistenie motorovÃ©ho vozidla, poistnÃ¡ zmluva mÃ¡ iba jeden predmet poistenia. Dva alebo niekoÄ¾ko predmetov poistenia mÃ¡ poistnÃ¡ zmluva naprÃ­klad pri Å¾ivotnom poistenÃ­ manÅ¾elov alebo rodiÄa s dieÅ¥aÅ¥om. Viac predmetov poistenia vystupuje pri skupinovom poistenÃ­, naprÃ­klad (tzv. flotily) motorovÃ½ch vozidiel firmy alebo pri Ãºrazovom poistenÃ­ pracovnÃ­kov firmy. KeÄÅ¾e jeden poistnÃ½ objekt mÃ´Å¾e byÅ¥ pouÅ¾itÃ½ vo viacerÃ½ch poistnÃ½ch zmluvÃ¡ch (naprÃ­klad ten istÃ½ automobil v zmluve o povinnom zmluvnom poistenÃ­ aj v zmluve o havarijnom poistenÃ­), Äasto sa odÄleÅuje od samotnÃ©ho predmetu poistenia. Pre poistnÃ© objekty sa, v zÃ¡vislosti od ich typov, evidujÃº tieÅ¾ rÃ´zne popisnÃ© atribÃºty. Pre motorovÃ© vozidlo sa naprÃ­klad evidujÃº Ãºdaje podÄ¾a osvedÄenia o evidencii (technickÃ©ho preukazu): druh vozidla, znaÄka a typ vozidla, Å¡tÃ¡tna poznÃ¡vacia znaÄka, vÃ½robnÃ© ÄÃ­slo karosÃ©rie, vÃ½robnÃ© ÄÃ­slo motora, rok vÃ½roby, farba, objem valcov, vÃ½kon motora a ÄalÅ¡ie. UvedenÃ© atribÃºty slÃºÅ¾ia nielen na identifikÃ¡ciu poistnÃ©ho objektu, ale niekedy tieÅ¾ na vÃ½poÄet poistnÃ©ho (poistnÃ© mÃ´Å¾e naprÃ­klad zÃ¡visieÅ¥ od typu vozidla, objemu valcov, prÃ­padne inÃ½ch atribÃºtov) a Å¡tatistiky a poistnÃº matematiku, ktorÃ¡ tak mÃ´Å¾e presnejÅ¡ie urÄovaÅ¥ sadzby poistnÃ©ho (vozidlÃ¡ urÄitÃ½ch typov sa naprÃ­klad kradnÃº viac ako vozidlÃ¡ inÃ½ch typov a majÃº preto vyÅ¡Å¡ie sadzby poistnÃ©ho). Predmet poistenia zÃ¡roveÅ spÃ¡ja poistnÃ½ objekt s poistnÃ½mi rizikami, ktorÃ© sÃº dohodnutÃ© pre tento poistnÃ½ objekt. PoistnÃ½ objekt mÃ´Å¾e byÅ¥ na jednej zmluve poistenÃ½ voÄi viacerÃ½m poistnÃ½m rizikÃ¡m, naprÃ­klad motorovÃ© vozidlo voÄi Å¾ivlu, odcudzeniu a krÃ¡deÅ¾i. JednotlivÃ© poistnÃ© rizikÃ¡ mÃ´Å¾u maÅ¥ svoje Å¡pecifickÃ© poistnÃ© sumy, poistnÃ© a zÄ¾avy. Pri havarijnom poistenÃ­ motorovÃ©ho vozidla je naprÃ­klad havÃ¡ria pravdepodobnejÅ¡ia ako poÅ¡kodenie vozidla Å¾ivelnou udalosÅ¥ou, preto mÃ¡va poistnÃ© riziko havÃ¡rie vyÅ¡Å¡ie poistnÃ©. TaktieÅ¾ bonus/malus sa Å¡tandardne poskytuje na poistnÃ© riziko havÃ¡rie a nie na poistnÃ© riziko krÃ¡deÅ¾e motorovÃ©ho vozidla. Pri poistenÃ­ zodpovednosti za Å¡kodu mÃ´Å¾u byÅ¥ jednotlivÃ½mi poistnÃ½mi rizikami: Å¡koda na zdravÃ­, Å¡koda na veciach a uÅ¡lÃ½ zisk. KaÅ¾dÃ© z tÃ½chto poistnÃ½ch rizÃ­k mÃ´Å¾e maÅ¥ inÃº poistnÃº sumu. Podobne mÃ´Å¾e byÅ¥ pri Ãºrazovom poistenÃ­ dohodnutÃ½ch viacero poistnÃ½ch rizÃ­k: Ãºmrtie nÃ¡sledkom Ãºrazu, trvalÃ© nÃ¡sledky poÅ¡kodenia zdravia, dennÃ© odÅ¡kodnenie po dobu nevyhnutnÃ©ho lieÄenia. KaÅ¾dÃ© z tÃ½chto poistnÃ½ch rizÃ­k mÃ¡ inÃº poistnÃº sumu. Pri viacerÃ½ch poistnÃ½ch rizikÃ¡ch na jeden poistnÃ½ objekt, predovÅ¡etkÃ½m pri Å¾ivotnom poistenÃ­, sa zvyÄajne jedno poistnÃ© riziko povaÅ¾uje za hlavnÃ© riziko a na jeho zÃ¡klade sa odvÃ¡dzajÃº hlavnÃ© parametre zmluvy: poistnÃ¡ suma, minimÃ¡lna dÄºÅ¾ka poistnÃ©ho obdobia a poistnÃ©. Pri Å¾ivotnom poistenÃ­ je takÃ½mto poistnÃ½m rizikom poistenie na doÅ¾itie7, poistenie na Ãºmrtie alebo ich kombinÃ¡cia. HlavnÃ© poistnÃ© riziko je povinnÃ© a nie je moÅ¾nÃ© ho zruÅ¡iÅ¥. Zmena parametrov hlavnÃ©ho poistnÃ©ho je spravidla moÅ¾nÃ¡, vyÅ¾aduje vÅ¡ak prepoÄÃ­tanie ostatnÃ½ch parametrov zmluvy (najmÃ¤ poistnÃ©ho) a mÃ´Å¾e dokonca viesÅ¥ k vytvoreniu novej verzie zmluvy (nahradeniu starej poistnej zmluvy novou zmluvou). PoistnÃ© riziko, ktorÃ© nie je hlavnÃ½m rizikom, moÅ¾no zvyÄajne v priebehu existencie poistnej zmluvy pri-"
43,482,0.52,Objektovo orientovanÃ© programovanie v C++,"Pri vyhÄ¾adÃ¡vanÃ­ prechÃ¡dzame oba vektory naraz, priÄom v jednom vyhÄ¾adÃ¡vame zadanÃ© slovo a druhÃ½ prechÃ¡dzame zÃ¡roveÅ s nÃ­m, aby sme mohli v prÃ­pade ÃºspeÅ¡nÃ©ho vyhÄ¾adania vypÃ­saÅ¥ zodpovedajÃºci preklad. Dajme tomu, Å¾e platÃ­ jazyk=1, ÄiÅ¾e mÃ¡me prehÄ¾adaÅ¥ vektor slova1. VyhÄ¾adÃ¡vanie realizujeme tak, Å¾e z prÃ­sluÅ¡nÃ©ho iterÃ¡tora it1 urobÃ­me riadiacu premennÃº cyklu, v ktorom pole prechÃ¡dzame. ZaÄÃ­name od prvÃ©ho prvku, ktorÃ©mu zodpovedÃ¡ iterÃ¡tor slova1.begin()"
76,321,0.52,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Odhad 2 Ì sa realizuje hodnotou 2ï1.18 = 2.36. Tomuto odhadu nedÃ´verujeme, pretoÅ¾e najvÃ¤ÄÅ¡Ã­ Ãºdaj sa rovnÃ¡ 2.4 a je zrejmÃ©, Å¾e ï± nemÃ´Å¾e byÅ¥ menÅ¡ie ako niektorÃ© . DruhÃ½ odhad (zatiaÄ¾ neupravovanÃ½), dÃ¡va hodnotu 2.4. Tento konkrÃ©tny odhad mÃ´Å¾eme povaÅ¾ovaÅ¥ (zatiaÄ¾ laicky a len v tejto situÃ¡cii) za lepÅ¡Ã­. Samozrejme, cÃ­time, Å¾e je nutnÃ© formulovaÅ¥ vlastnosti, ktorÃ© mÃ¡ maÅ¥ dobrÃ½ odhad (keÄ naÅ nazerÃ¡me ako na odhadovaciu Å¡tatistiku). 7.1.3 PrÃ­klad. Predpokladajme, Å¾e konkrÃ©tnou technolÃ³giou vyrÃ¡banÃ© elektronickÃ© komponenty majÃº Å¾ivotnosÅ¥, ktorÃº modelujeme exponenciÃ¡lnym rozdelenÃ­m Exp(ï¬), v ktorom parameter ï¬ nie je znÃ¡my. Z celkovej produkcie nÃ¡hodne vyberieme 20 vÃ½robkov a na zÃ¡klade merania ich Å¾ivotnostÃ­, t. j. na zÃ¡klade nameranÃ½ch hodnÃ´t = 855, = 1048, â¦, = 1792, chceme odhadnÃºÅ¥ a) strednÃº hodnotu Å¾ivotnosti, b) pravdepodobnosÅ¥ toho, Å¾e Å¾ivotnosÅ¥ (nÃ¡hodne vybratÃ©ho) vÃ½robku prekroÄÃ­ 1200 hodÃ­n. RieÅ¡enie. Nech veliÄina predstavuje Å¾ivotnosÅ¥ vyrÃ¡banÃ½ch vÃ½robkov. PodÄ¾a predpokladu ~ Exp(ï¬) a v bode (a) chceme odhadnÃºÅ¥ E( ). Z ÄlÃ¡nku 6.3 vieme, Å¾e odhadom strednej hodnoty E( ) je vÃ½berovÃ½ priemer Ì . Ak napr. z danÃ½ch 20 dÃ¡t sa vÃ½berovÃ½ priemer realizuje hodnotou 1243, tak za odhad E( ) vezmeme 1243. SituÃ¡cia je trochu inÃ¡ ako v prÃ­klade 7.1.2, kde iÅ¡lo priamo o odhad parametra. Teraz ide o odhad E( ) a z kapitoly 4 vieme, Å¾e E( ) = . To znamenÃ¡, Å¾e odhadovaÅ¥ E( ) znaï¬"
190,126,0.52,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"KaÅ¾dÃ¡ palica mÃ¡ dva konce. OpaÄnÃ½ extrÃ©m oproti predoÅ¡lÃ©mu bodu je plÃ¡novanie do detailu. Samo detailnÃ© plÃ¡novanie je Å¾iadÃºce, avÅ¡ak nie hneÄ na zaÄiatku projektu. Toto je charakteristika vodopÃ¡dovÃ©ho modelu â plÃ¡novanie sa v Ãºplnosti vykonÃ¡ na zaÄiatku, a potom sa postupuje podÄ¾a pevne stanovenÃ©ho plÃ¡nu. V sÃºÄasnosti je vÅ¡ak jeho pouÅ¾itie v praxi zriedkavÃ©. NÃ¡stup novÃ½ch agilnÃ½ch metÃ³d vÃ½voja softvÃ©ru a mnohÃ© ÄlÃ¡nky poukazujÃº na to, Å¾e sa toto nie je ideÃ¡lny postup. Royce povaÅ¾uje vodopÃ¡dovÃ½ model za riskantnÃ½ a nÃ¡chylnÃ½ k zlyhaniu [6]. DetailnÃ© S tÃ½mto nÃ¡zorom sÃºhlasÃ­m, nakoÄ¾ko kaÅ¾dÃ½ projekt je jedineÄnÃ½ a aÅ¾ poÄas jeho plÃ¡novanie vykonÃ¡vania sa odhalia vÅ¡etky jeho Å¡pecifikÃ¡. DetailnÃ© plÃ¡novanie hneÄ na zaÄiatku je Å¥aÅ¾kÃ©, keÄÅ¾e nemusÃ­ byÅ¥ eÅ¡te presne hneÄ zrejmÃ©, akÃ© Äinnosti bude projekt vyÅ¾adovaÅ¥, Äi ako dlho budÃº trvaÅ¥. Samozrejme, na zaÄiatku po skÃºsenosti s predoÅ¡lÃ½mi projektmi uÅ¾ mÃ´Å¾u projektovÃ­ manaÅ¾Ã©ri maÅ¥ predsta- projektu vu o tom, Äo budÃº jednotlivÃ© etapy zahÅÅaÅ¥. Ak manaÅ¾Ã©r svoj tÃ­m poznÃ¡, mÃ´Å¾e je Å¥aÅ¾kÃ©. maÅ¥ predstavu aj o tom, koÄ¾ko to bude trvaÅ¥. AvÅ¡ak, ako som uÅ¾ spomenul, realita je takÃ¡, Å¾e Å¾iaden projekt nie je rovnakÃ½ a v kaÅ¾dom projekte sa vyskytnÃº rÃ´zne vplyvy, ktorÃ© skÃ´r Äi neskÃ´r odklonia projekt od pÃ´vodnÃ©ho plÃ¡nu. PlÃ¡novanie do detailu je vÅ¡eobecne v projekte Å¾iadÃºce preto, aby bolo v kaÅ¾dom momente jednoznaÄnÃ©, akÃ© sÃº aktuÃ¡lne Ãºlohy, ciele a akÃ½ je ÄalÅ¡Ã­ predpokladanÃ½ postup. TvrdÃ­m ale, Å¾e je nezodpovednÃ© zostaviÅ¥ detailnÃ½ plÃ¡n hneÄ na zaÄiatku a plÃ¡novanie jednoducho âodpÃ­saÅ¥â. McConnel opisuje plÃ¡novanie ako jazdu autom v noci z mesta A do mesta B. MÃ¡ sÃ­ce k dispozÃ­cii mapu celej trasy, ale na detaily si dosvieti len do urÄitej vzdialenosti [4]. Tento prÃ­klad nÃ¡zorne demonÅ¡truje fakt, Å¾e detaily sa vyjasnia aÅ¾ vtedy, keÄ k nÃ­m prÃ­deme."
190,83,0.519,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"majÃº naopak vÃ¤ÄÅ¡Ã­ prehÄ¾ad o reÃ¡lnom nasadenÃ­ aplikÃ¡cie a vedia, akÃ© moÅ¾nÃ© situÃ¡cie mÃ´Å¾u nastaÅ¥ pri jej pouÅ¾Ã­vanÃ­. Tieto rozdiely sa prejavujÃº v efektivite testov na Ãºrovni jednotiek softvÃ©ru (angl. unit testing), kde mÃ´Å¾e byÅ¥ znaÄnÃ½ rozdiel medzi testom pripravenÃ½m vÃ½vojÃ¡rom a testom od testera. Toto odliÅ¡nÃ© myslenie mÃ´Å¾e predstavovaÅ¥ bariÃ©ru v efektÃ­vnej komunikÃ¡cii vÃ½vojÃ¡rov a testerov. InÃ½m problÃ©mom zaradenÃ½m do tejto vrstvy je tzv. personalizovanie kÃ³du. VeÄ¾a vÃ½vojÃ¡rov berie osobne fakt, Å¾e niekto nÃ¡jde v ich kÃ³de chybu. Äasto si chyby odmietajÃº uznaÅ¥, hÄ¾adajÃº chybu prÃ¡ve v testerovi. Z Ä¾udskÃ©ho hÄ¾adiska na vzÅ¥ahy urÄite negatÃ­vne vplÃ½va aj to, Å¾e vÃ½vojÃ¡ri a testeri spolu komunikujÃº najmÃ¤ vtedy, keÄ tester vÃ½vojÃ¡rovi VeÄ¾a vÃ½vojÃ¡rov oznamuje chybu. To je pre vÃ½vojÃ¡ra dosÅ¥ neprÃ­jemnÃ¡ situÃ¡cia. Aj keÄ vÃ½vojÃ¡r berie osobne, chybu objektÃ­vne uznÃ¡, podvedome sa mu osoba testera spÃ¡ja iba keÄ niekto s neprÃ­jemnÃ½mi zÃ¡Å¾itkami. To mÃ´Å¾e viesÅ¥ k vybudovaniu negatÃ­vneho vzÅ¥ahu nÃ¡jde v ich k testerovi a moÅ¾nÃ½m veÄ¾mi vÃ¡Å¾nym konfliktom. ManaÅ¾Ã©r, ktorÃ½ ignoruje tÃºto âÄ¾udskÃºâ vrstvu zdrojov konfliktu, sa mÃ´- kÃ³de chybu. Å¾e vo svojom tÃ­me veÄ¾mi Ä¾ahko ocitnÃºÅ¥ medzi dvoma nenÃ¡vidiacimi sa skupinami. Preto sa treba o vzÅ¥ah medzi tÃ½mito dvoma skupinami staraÅ¥, zabezpeÄiÅ¥ stretnutia tÃ­mu a komunikÃ¡ciu aj mimo prÃ¡ce. Ak sa tieto dve skupiny spoznajÃº aj v inÃ½ch situÃ¡ciÃ¡ch ako prÃ¡ve pri oznamovanÃ­ chÃ½b, budÃº si lepÅ¡ie rozumieÅ¥ aj v prÃ¡ci. ÄalÅ¡ou moÅ¾nosÅ¥ou je aj zorganizovanie Å¡peciÃ¡lneho kurzu o zvlÃ¡danÃ­ konfliktnÃ½ch situÃ¡ciÃ­ pre Älenov tÃ­mu. Okrem toho, Å¾e si ÃºÄastnÃ­ci kurzu osvoja schopnosti, ktorÃ© im pomÃ´Å¾u lepÅ¡ie komunikovaÅ¥ a zvlÃ¡daÅ¥ konfliktnÃ© situÃ¡cie sa zÃ¡roveÅ spoznajÃº aj z inej strÃ¡nky ako pracovnej, Äo urÄite zlepÅ¡Ã­ ich vzÃ¡jomnÃ© vzÅ¥ahy. ProblÃ©my komunikÃ¡cie a personalizovania kÃ³du by sa mohli daÅ¥ rieÅ¡iÅ¥ aj vhodnÃ½m pÃ¡rovanÃ­m vÃ½vojÃ¡ra s testerom, ktorÃ½ testuje jeho kÃ³d. PredpokladÃ¡m, Å¾e starÅ¡Ã­ a skÃºsenejÅ¡Ã­ tester mÃ´Å¾e pri komunikÃ¡cii chÃ½b mladÅ¡iemu vÃ½vojÃ¡rovi ÄerpaÅ¥ zo svojich skÃºsenostÃ­ a naopak, skÃºsenejÅ¡Ã­ vÃ½vojÃ¡r by uÅ¾ nemusel trpieÅ¥ prÃ­liÅ¡nÃ½m zosobÅovanÃ­m kÃ³du a mÃ´Å¾e prijaÅ¥ svoje chyby objektÃ­vne."
190,491,0.518,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"reaktÃ­vne stratÃ©gie Â· 53 redukcia neurÄitosti vÃ½sledku projektu Â· 154 refaktoring kÃ³du Â· 44, 239, 271 revÃ­zie a Ãºpravy Â· 109 rezerva v plÃ¡ne Â· 88 rÃ©Å¾ia Â· 47 riadenie konfliktov Â· 52 riadenie kvality Â· 160 riadenie rizÃ­k Â· 202, 229, 230 rieÅ¡enie problÃ©mov Â· 75 riziko Â· 99, 172, 197, 224 informaÄnÃ©ho zahltenia Â· 78 outsourcingu Â· 29, 36 projektu Â· 106 softvÃ©rovÃ½ch plÃ¡nov Â· 106 rizikovÃ© faktory Â· 103 role v tÃ­me Â· 140 rozklad Ãºloh Â· 64 funkcionÃ¡lny Â· 64 fyzickÃ½ Â· 64 rozpis ÄinnostÃ­ Â· 99 rozsah projektu Â· 96, 99, 154 rozvoj pracovnÃ­kov Â· 63, 66 rozvrh projektu Â· 160"
265,196,0.515,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"PoznÃ¡mka: vÅ¾dy zÃ¡leÅ¾Ã­ na kontexte v ktorom aktivitÃ¡m dÃ¡vame nÃ¡zvy. Hoci otÃ¡zka uvÃ¡dza o akÃ½ projekt ide, ako informÃ¡cia to nemusÃ­ staÄiÅ¥. NiektorÃ© prÃ­klady preto mÃ´Å¾u byÅ¥ diskutabilnÃ©. ÄastÃ© chyby, robenÃ© pri identifikÃ¡cii aktivÃ­t v nich vÅ¡ak urÄite moÅ¾no vidieÅ¥. â¢ ÃdrÅ¾ba databÃ¡zy (nesprÃ¡vne, nÃ¡zov obsahuje pojem softvÃ©rovÃ©ho inÅ¾inierstva, navyÅ¡e je vÃ¡gny; radÅ¡ej vyjadrime, Äo sa v skutoÄnosti bude ro-"
43,495,0.514,Objektovo orientovanÃ© programovanie v C++,"V ÄalÅ¡om prÃ­klade si predvedieme pouÅ¾itie Å¡truktÃºry mapa (map). PrÃ­klad. NapÃ­Å¡me program, ktorÃ½ umoÅ¾nÃ­ pridÃ¡vaÅ¥ do telefÃ³nneho zoznamu novÃ© poloÅ¾ky. KaÅ¾dÃ¡ poloÅ¾ka obsahuje meno a telefÃ³nne ÄÃ­slo a zoznam je usporiadanÃ½ abecedne podÄ¾a mena. Rozbor rieÅ¡enia. V programe vytvorÃ­me triedu telefonny zoznam, ktorÃ¡ bude obsahovaÅ¥ zoznam mien a ÄÃ­sel. KeÄÅ¾e tu ide o uchovÃ¡vanie dvojÃ­c Ãºdajov, priÄom celÃ½ zoznam je usporiadanÃ½ podÄ¾a prvÃ©ho prvku dvojice (meno), ide o klasickÃº situÃ¡ciu, v ktorej sa dÃ¡ pouÅ¾iÅ¥ Å¡truktÃºra mapa. PridÃ¡vanie novÃ½ch poloÅ¾iek do zoznamu zabezpeÄÃ­ metÃ³da Pridaj a zoznam sa vypÃ­Å¡e prostrednÃ­ctvom metÃ³dy Vypis."
195,72,0.514,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"3.4 Spracovanie dÃ¡t interakciÃ­ Ako sme uviedli v Ãºvodnej motivÃ¡cii, dÃ¡ta interakciÃ­ sa vyznaÄujÃº vysokou ÃºrovÅou podrobnosti o prÃ¡ci programÃ¡tora prÃ¡ve vÄaka nÃ­zkej Ãºrovni sledovanÃ½ch udalostÃ­. TÃ½m sa vÅ¡ak dostÃ¡vame do rozporu, kedy sÃ­ce zaznamenÃ¡vame podrobnÃ© informÃ¡cie, no dÃ¡t interakciÃ­ je veÄ¾kÃ© mnoÅ¾stvo a je zloÅ¾itÃ© ich spracovaÅ¥ a vyhodnotiÅ¥. PrÃ­kladom je upravovanie obsahu sÃºboru zdrojovÃ©ho kÃ³du, ktorÃ© mÃ´Å¾eme sledovaÅ¥ aÅ¾ na Ãºrovni stlÃ¡Äania klÃ¡ves klÃ¡vesnice. Preto dÃ¡ta interakciÃ­ tradiÄne predspracujeme pred ich vyhodnocovanÃ­m filtrovanÃ­m, agregovanÃ­m, Äi identifikÃ¡ciou sedenÃ­ [9]. Zo zaznamenanÃ½ch interakciÃ­ sa najÄastejÅ¡ie snaÅ¾Ã­me odfiltrovaÅ¥ nepodstatnÃº ÄinnosÅ¥. Z uvedenÃ©ho prÃ­kladu zaznamenÃ¡vania pÃ­sania znakov zdrojovÃ©ho kÃ³du nÃ¡s nemusia zaujÃ­maÅ¥ znaky, ktorÃ© programÃ¡tor napÃ­sal a nÃ¡sledne zmazal. AgregovanÃ­m dÃ¡t interakciÃ­ sa posÃºvame na vyÅ¡Å¡ie Ãºrovne granularity programÃ¡torovej Äinnosti. Napr. pÃ­sanie znakov agregujeme na Ãºpravy riadkov zdrojovÃ©ho kÃ³du, cez Ãºpravy jednotlivÃ½ch sÃºÄiastok v sÃºboroch zdrojovÃ©ho kÃ³du, aÅ¾ po Ãºpravy samotnÃ½ch sÃºborov. PodÄ¾a Ãºlohy pouÅ¾itia mÃ´Å¾e postaÄovaÅ¥ poznaÅ¥ zmenenÃ© riadky v zdrojovom sÃºbore postupne v Äase, neÅ¾ presnÃ© ÄasovÃ© peÄiatky zadanie vÅ¡etkÃ½ch znakov. RÃ´zne Ãºrovne granularity dosiahneme tÃ½mito prÃ­stupmi: - SÃ©mantickÃ½ prÃ­stup â vopred urÄenÃ¡ hierarchia typov interakciÃ­, napr. kopÃ­rovanie fragmentu kÃ³du medzi sÃºÄiastkami zdrojovÃ©ho kÃ³du pozostÃ¡va z akcie oznaÄenia, kopÃ­rovania a prilepenia. - HeuristickÃ½ prÃ­stup â rozdelenie interakciÃ­ do aktivÃ­t programÃ¡tora podÄ¾a zadanÃ½ch pravidiel, napr. Å¡tudovanie (navigÃ¡cia bez Ãºprav obsahu kÃ³du), opravovanie chyby (zmena kÃ³du a jeho kontrolovanie), vylepÅ¡enie kÃ³du (Å¡tudovanie kÃ³du a nÃ¡slednÃ© Ãºpravy). - PravdepodobnostnÃ½ prÃ­stup â identifikovanie vzorov v dÃ¡tach interakciÃ­ pouÅ¾itÃ­m metÃ³d dolovania v dÃ¡tach a strojovÃ©ho uÄenia. Tak mÃ´Å¾eme podobne urÄovaÅ¥ aktivitu programÃ¡tora, Äi Å¡tuduje kÃ³d, pridÃ¡va novÃº funkcionalitu alebo opravuje chybu. Poslednou ÄasÅ¥ou predspracovania je identifikÃ¡cia sedenÃ­, kedy rozdeÄ¾ujeme interakcie do sÃºvislÃ½ch Ãºsekov prÃ¡ce programÃ¡tora. DÃ¡ta interakciÃ­ predstavujÃº prÃºd zaznamenanÃ½ch udalostÃ­, ktorÃ½ sa beÅ¾ne preruÅ¡uje iba neprÃ­tomnosÅ¥ou programÃ¡tora. V skutoÄnosti vÅ¡ak programÃ¡tor pracuje postupne na ÃºlohÃ¡ch. Aby sme z dÃ¡t interakciÃ­ zÃ­skali cennÃ© informÃ¡cie, rozdeÄ¾ujeme ich na jednotlivÃ© sedenia k ÃºlohÃ¡m. Projekt Mylyn to umoÅ¾Åuje tÃ½m, Å¾e sÃ¡m programÃ¡tor urÄÃ­ svoju Ãºlohu a prepÃ­na sa medzi nimi [7]. Sledovanie Å¡tudovania kÃ³du alebo aj Ãºprav je Å¡pecifickÃ© pre konkrÃ©tnu Ãºlohu. IdentifikÃ¡cia sedenÃ­ vÅ¡ak nie je vÅ¾dy moÅ¾nÃ¡ zo strany programÃ¡tora, preto sa ich snaÅ¾Ã­me identifikovaÅ¥ aj pomocou tÃ½chto pozorovanÃ­: - ÄinnosÅ¥ programÃ¡tora so stanovenÃ½m cieÄ¾om typicky trvÃ¡ od 30 do 90 minÃºt [10]. - PrÃ¡ca na Ãºlohe mÃ´Å¾e pokraÄovaÅ¥ medzi pracovnÃ½mi dÅami, preto je nutnÃ© spÃ¡jaÅ¥ sedenia. - ProgramÃ¡tor sa poÄas spoloÄnÃ©ho sedenia mÃ´Å¾e sÃºstrediÅ¥ na viacero Ãºloh. Vtedy je vhodnÃ© rozliÅ¡ovaÅ¥ medzi sedeniami pomocou artefaktov, s ktorÃ½mi pracuje."
76,121,0.514,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.1.6 Pokus spoÄÃ­va v hÃ¡dzanÃ­ piatimi mincami, ktorÃ½ch ruby, resp. lÃ­ca sme oznaÄili ÄÃ­slami jedna, resp. dva. Nech predstavuje sÃºÄet ÄÃ­sel, ktorÃ© padli na minciach. NÃ¡jdite tabuÄ¾ku rozdelenia veliÄiny a urÄte P(3 ï£ < 8). 2.1.7 Na terÄ striedavo strieÄ¾ajÃº dvaja strelci a zasahujÃº ho na sebe nezÃ¡visle s pravdepodobnosÅ¥ami = 0.8 a = 0.7. Predpokladajme, Å¾e kaÅ¾dÃ½ strieÄ¾a 2 razy. Nech je celkovÃ½ poÄet zÃ¡sahov. NÃ¡jdite rozdelenie veliÄiny a urÄte P( â¥ 3). 2.1.8 Predpokladajme, Å¾e tri sÃºÄiastky zlyhÃ¡vajÃº poÄas doby T s danÃ½mi pravdepodobnosÅ¥ami = 0.3, = 0.4 a = 0.5, priÄom udalosti zlyhania sÃº nezÃ¡vislÃ©. Nech oznaÄuje poÄet zlyhanÃ½ch poÄas doby T. UrÄte rozdelenie veliÄiny . 2.1.9 V Å¡katuli mÃ¡me 10 vÃ½robkov a medzi nimi sÃº Å¡tyri nepodarky. NÃ¡hodne vyÅ¥ahujeme vÃ½robok, aÅ¾ kÃ½m nevytiahneme dobrÃ½ (vytiahnutÃ© vÃ½robky spÃ¤Å¥ nevraciame). Nech je poÄet vytiahnutÃ½ch v pokuse. UrÄte rozdelenie veliÄiny . 2.1.10 UvaÅ¾ujme o obmene predchÃ¡dzajÃºcej Ãºlohy â pokraÄujeme vo vÃ½bere, aÅ¾ kÃ½m nevytiahneme dva dobrÃ©. Nech znamenÃ¡ poÄet vytiahnutÃ½ch vÃ½robkov v pokuse. UrÄte rozdelenie veliÄiny . 2.1.11 V Å¡katuli mÃ¡me pÃ¤Å¥ loptiÄiek s ÄÃ­slami 1, 2, â¦ , 5. NÃ¡hodne vyberieme naraz tri. Nech je najvÃ¤ÄÅ¡ie z vytiahnutÃ½ch ÄÃ­sel, je najmenÅ¡ie a nech je sÃºÄet ÄÃ­sel na vytiahnutÃ½ch loptiÄkÃ¡ch. NÃ¡jdite rozdelenie veliÄÃ­n , a . 2.1.12 Z balÃ­Äka 52 francÃºzskych kariet sme nÃ¡hodne vybrali 5 kariet (vÃ½berom bez vrÃ¡tenia). Nech predstavuje poÄet figÃºr medzi vybranÃ½mi (keÄÅ¾e za figÃºry povaÅ¾ujeme J, Q, K, A, balÃ­Äek obsahuje 16 figÃºr). NÃ¡jdite rozdelenie veliÄiny . 2.1.13 HrÃ¡Ä hrÃ¡ hru, v ktorej s pravdepodobnosÅ¥ou zÃ­skava bod a s pravdepodobnosÅ¥ou bod strÃ¡ca (teda zÃ­skava ï­1 bod), priÄom zrejme + = 1. Nech predstavuje hrÃ¡Äovo skÃ³re po piatich kolÃ¡ch tejto hry. NÃ¡jdite rozdelenie veliÄiny . (Ak napr. hrÃ¡Ä bol dva razy ÃºspeÅ¡nÃ½ a tri razy neÃºspeÅ¡nÃ½, = ï­1). 2.1.14 Milan a Cyril hrajÃº hazardnÃº hru: Milan hÃ¡dÅ¾e modrou a Cyril Äervenou kockou. 10 centov zÃ­skava od sÃºpera ten, komu padne vÃ¤ÄÅ¡ie ÄÃ­slo (ak padnÃº rovnakÃ© ÄÃ­sla, hra konÄÃ­ remÃ­zou a nikto nikomu niÄ neplatÃ­). Predpokladajme, Å¾e kaÅ¾dÃ½ z nich zaÄÃ­na hraÅ¥ s 30-timi centami (teda zaÄiatoÄnÃ½ kapitÃ¡l kaÅ¾dÃ©ho je 30 centov). Nech predstavuje kapitÃ¡l Milana po troch kolÃ¡ch tejto hry. NÃ¡jdite rozdelenie veliÄiny . 2.1.15 Nech nÃ¡hodnÃ½ pokus spoÄÃ­va v 6-nÃ¡sobnom nezÃ¡vislom opakovanÃ­ hodu riadnou mincou. Za vÃ½sledok pokusu povaÅ¾ujeme usporiadanÃº 6-ticu symbolov C, Z (ÄÃ­slo, znak). KeÄÅ¾e minca je riadna, t. j. symetrickÃ¡ a homogÃ©nna, kaÅ¾dÃ½ zo 64 vÃ½sledkov mÃ¡ rovnakÃº pravdepodobnosÅ¥. Nech predstavuje poÄet zmien v 6-tici. Napr. ak vÃ½sledok pokusu je ï·, ï· = (C, Z, Z, C, Z, C), tak (ï·) = 4. Keby vÃ½sledkom bol (C, Z, Z, Z, C, C), tak sa realizuje hodnotou 2. Zrejme je nÃ¡hodnÃ¡ veliÄina a ( ) = {0, 1, â¦ , 5}. UrÄte rozdelenie veliÄiny . Viete nÃ¡jsÅ¥ rozdelenie aj pre prÃ­pad -nÃ¡sobnÃ©ho hodu (riadnou) mincou?"
122,76,0.513,Modelovanie softvÃ©ru,"Obr. 4.7: NÃ¡vrhovÃ½ diagram tried e-obchodu. â¢ Composite rieÅ¡i vhniezdenÃ© pohÄ¾ady, kde View je Composite alebo Leaf NÃ¡vrhovÃ© vzory je niekedy moÅ¾nÃ© rozpoznaÅ¥ uÅ¾ na zÃ¡klade samotnÃ©ho Å¡trukturÃ¡lneho usporiadania tried a rozhranÃ­, ktorÃ© v nich vystupujÃº. ObrÃ¡zky 4.8â4.10 zobrazujÃº prÃ­klady nÃ¡vrhovÃ½ch vzorov vo forme zaslepenej Å¡truktÃºry a Å¡truktÃºry s obsahom. VÅ¡imnime si, naprÃ­klad, veÄ¾mi charakteristickÃº kombinÃ¡ciu agregÃ¡cie a dedenia v opaÄnom smere vo vzore Composite. V naÅ¡om prÃ­klade bol uplatnenÃ½ vzor Observer, ktorÃ©ho Å¡truktÃºra nie je aÅ¾ takÃ¡ charakteristickÃ¡. Na obrÃ¡zku 4.2 je vyznaÄenÃ½ poznÃ¡mkou umiestnenou medzi triedami, ktorÃ© tento vzor realizujÃº. Ak MVC prirovnÃ¡me k stereotypom Unified Process, triedy oznaÄenÃ© ako entity a control spolu zodpovedajÃº role Model, priÄom boundary zodpovedÃ¡ role View. Rola Controller v tejto analytickej reprezentÃ¡cii Å¡truktÃºry eÅ¡te nie je vyÄlenenÃ¡. DÃ´leÅ¾itÃ© je poznamenaÅ¥, Å¾e napriek podobnosti v pomenovanÃ­ triedy oznaÄenÃ© ako control nezodpovedajÃº role Controller."
59,539,0.513,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Tieto predstavy naÅ¡li urÄitÃ© vyvrcholenie u francÃºzskeho osvieteneckÃ©ho vedca a filozofa P. R. Laplaceho v jeho dikcii o superinteligentnej bytosti, ktorÃ¡ pomocou matematickÃ½ch metÃ³d vidÃ­ svojim âzrakomâ vÅ¡etky udalosti z minulosti, prÃ­tomnosti a aj budÃºcnosti, pre Åu neexistujÃº nÃ¡hodnÃ© alebo neurÄitÃ© udalosti. V sÃºÄasnosti je veÄ¾mi populÃ¡rna Dawkinsova memetika, ktorÃ¡ rozvÃ­ja podobnÃ© nÃ¡zory (pozri kap. 4.2)."
240,419,0.512,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-9 (rieÅ¡enie) Program po znakoch vypisuje znaky odvodenÃ© od reÅ¥azcovÃ½ch konÅ¡tÃ¡nt. PrvÃ½ vypÃ­sanÃ½ znak (riadok 3) je znak, ktorÃ©ho hodnotu dostaneme, keÄ od prvÃ©ho znaku reÅ¥azca ""abc"" (znak 'a', kÃ³d 97) odpoÄÃ­tame kÃ³d znaku ' ' (medzera, kÃ³d 32), teda 97-32 = 65, Äo zodpovedÃ¡ kÃ³du znaku 'A'. V riadku 4 program vypÃ­Å¡e znak 'e' posunutÃ½ o 3 (znak 'h'), a znak 'm' zvÃ½Å¡enÃ½ o dva (znak 'o'). V riadku 5 program vypÃ­Å¡e poslednÃ½ jeden znak, ktorÃ½ zÃ­skame komplikovanÃ½m vÃ½poÄtom: prvÃ½ znak reÅ¥azca ""slnko"" (znak 's', kÃ³d 115) znÃ­Å¾enÃ½ o hodnotu znaku '0' (kÃ³d 48) deleno 5 (48/5=9), teda vÃ½slednÃ½ znak 'j'. ÄalÅ¡ie znaky (ako napr. :)) uÅ¾ program nevypÃ­Å¡e, lebo formÃ¡tovacÃ­ reÅ¥azec je (predÄasne) ukonÄenÃ½ znakom '\0'. Ãloha 4-10 (rieÅ¡enie) V riadku 13 do premennej x priradÃ­me smernÃ­k na reÅ¥azcovÃº konÅ¡tantu ""kamen"". NÃ¡sledne 47-krÃ¡t vykonanÃ­m funkcie hraj() a priradenÃ­m vÃ½sledku do x upravÃ­ hodnotu premennej x. Porovnania reÅ¥azcov pomocou == mÃ´Å¾u vzbudzovaÅ¥ podozrenie, Å¾e sa reÃ¡lne neporovnÃ¡vajÃº hodnoty reÅ¥azcov, ale len smernÃ­ky, a to je aj pravda, v tomto programe nie je potrebnÃ© porovnÃ¡vaÅ¥ reÅ¥azce po znakoch, pretoÅ¾e staÄÃ­ porovnaÅ¥ smernÃ­ky reÅ¥azcovÃ½ch konÅ¡tÃ¡nt, ktorÃ© sÃº rovnakÃ© pre rovnakÃ© reÅ¥azce a rÃ´zne pre rozdielne reÅ¥azce. V prÃ­pade x = ""kamen"" je vÃ½sledok hraj(x) == ""papier"", v nasledujÃºcom prÃ­pade x = ""papier"" je vÃ½sledok hraj(x) == ""noznice"" a v nasledujÃºcom prÃ­pade x = ""noznice"" je vÃ½sledok hraj(x) == ""kamen"", ÄÃ­m premennÃ¡ x (po kaÅ¾dÃ½ch"
369,380,0.512,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ï· DiagnÃ³zu spÃ´sobuje urÄitÃ½ etiologickÃ½ agens (pÃ´vodca nÃ¡kazy). Aj keÄ model umoÅ¾Åuje kardinalitu mnoho-mnoho, zvyÄajne bÃ½va diagnÃ³za vyvolanÃ¡ iba jednÃ½m etiologickÃ½m agens. ï· EtiologickÃ½ agens mÃ´Å¾e byÅ¥ Å¡pecifikovanÃ½ do niekoÄ¾kÃ½ch ÃºrovnÃ­ presnosti â v modeli je hierarchickÃ¡ Å¡truktÃºra etiologickÃ©ho agensu znÃ¡zornenÃ¡ rekurzÃ­vnou relÃ¡ciou. NaprÃ­klad vÃ­rus chrÃ­pky mÃ¡ svoj typ (A, B, ...), subtyp (H1, H5, H5N1, ...) a variant (napr. California 7/2004 â like). ï· Pre diagnÃ³zu mÃ´Å¾u byÅ¥ uvedenÃ© znÃ¡me pramene nÃ¡kazy, faktory prenosu, mechanizmy prenosu, rizikovÃ© faktory a klinickÃ© formy. ï· Pre diagnÃ³zu mÃ´Å¾u byÅ¥ stanovenÃ© typy epidemiologickÃ½ch opatrenÃ­. ï· Na lieÄenie diagnÃ³z, resp. ich prevenciu sÃº urÄenÃ© urÄitÃ© lieky."
43,294,0.511,Objektovo orientovanÃ© programovanie v C++,"kde moj objekt je objekt triedy moja trieda. V takomto prÃ­pade sa pri vykonÃ¡vanÃ­ prÃ­kazu return vytvorÃ­ kÃ³pia objektu moj objekt a tÃ¡to kÃ³pia sa odoÅ¡le na miesto, odkiaÄ¾ bola funkcia volanÃ¡. PÃ´vodnÃ½ objekt moj objekt v tomto okamihu zanikÃ¡ a kÃ³pia zanikÃ¡ po jej pouÅ¾itÃ­ na mieste volania funkcie. KeÄ hovorÃ­me o kÃ³piÃ¡ch, mÃ¡me na mysli presnÃ© kÃ³pie, kde sa skutoÄne presne skopÃ­ruje hodnota kaÅ¾dÃ©ho Ãºdaja. V kapitole 6.4 sme vÅ¡ak videli, Å¾e takÃ©to kopÃ­rovanie sa programu mÃ´Å¾e staÅ¥ osudnÃ½m, ak trieda obsahuje smernÃ­ky. DÃ´vodom je, Å¾e Äo bolo raz dynamicky alokovanÃ©, musÃ­ sa aj dealokovaÅ¥. Pri vytvorenÃ­ kÃ³pie vzniknÃº dva objekty so smernÃ­kmi ukazujÃºcimi na to istÃ© miesto v pamÃ¤ti a v istÃ½ch momentoch sa oba objekty pokÃºsia toto miesto uvoÄ¾niÅ¥. Objekt, ktorÃ½ sa o to pokÃºsi ako prvÃ½, mÃ¡ Å¡Å¥astie â dealokÃ¡cia prebehne bez problÃ©mov. DruhÃ½ objekt vÅ¡ak bude chcieÅ¥ uvoÄ¾niÅ¥ uÅ¾ uvoÄ¾nenÃ© miesto a program sa v tomto okamihu dostane do problematickej situÃ¡cie. Ak teda narÃ¡bame s objektami triedy, ktorÃ¡ obsahuje smernÃ­ky, musÃ­me zabrÃ¡niÅ¥ vytvÃ¡raniu ich presnÃ½ch kÃ³piÃ­. Ak je objekt parametrom funkcie, dÃ¡ sa to vyrieÅ¡iÅ¥ tak, Å¾e ho nebudeme odovzdÃ¡vaÅ¥ hodnotou, ale smernÃ­kom alebo odkazom. To sme si uÅ¾ ukÃ¡zali. Ak je objekt nÃ¡vratovou hodnotou funkcie, vzniku presnej kÃ³pie sa dÃ¡ takisto vyhnÃºÅ¥. Pri inicializÃ¡cii priradenÃ­m vÅ¡ak v skutoÄnosti kÃ³piu vytvoriÅ¥ chceme â prÃ­kaz priradenia hovorÃ­, Å¾e chceme maÅ¥ dva objekty s rovnakÃ½mi Ãºdajmi. V niektorÃ½ch situÃ¡ciÃ¡ch by sa nÃ¡m hodilo, keby sme mohli vytvoriÅ¥ kÃ³piu, ktorÃ¡ by bola âskoro presnÃ¡â. To znamenÃ¡, Å¾e by sa skopÃ­rovalo vÅ¡etko s vÃ½nimkou adries. Ak by teda naprÃ­klad objekt obsahoval dynamicky alokovanÃ© pole, jeho kÃ³pia by tieÅ¾ obsahovala dynamicky alokovanÃ© pole s presne rovnakou veÄ¾kosÅ¥ou aj obsahom, ale umiestnenÃ© na inom mieste v pamÃ¤ti. VÅ¡eobecne, objekt aj jeho kÃ³pia by mali zapÃºzdrovaÅ¥ Ãºplne rovnakÃ© hodnoty, nikdy by vÅ¡ak nemali obsahovaÅ¥ smernÃ­ky ukazujÃºce na to istÃ© miesto v pamÃ¤ti. KopÃ­rovanie, s ktorÃ½m sme sa doteraz stretli, takto nefunguje. Chceli by sme maÅ¥ teda moÅ¾nosÅ¥ povedaÅ¥ programu, ako mÃ¡ vytvÃ¡raÅ¥ kÃ³pie objektov. C++ nÃ¡m takÃºto moÅ¾nosÅ¥ ponÃºka a je Åou vytvorenie tzv. kopÃ­rovacieho konÅ¡truktora (angl. copy constructor). KopÃ­rovacÃ­ konÅ¡truktor je konÅ¡truktor, ktorÃ½ deï¬nuje, akÃ½m spÃ´sobom sa mÃ¡ vytvoriÅ¥ kÃ³pia objektu danej triedy. Ak je tento konÅ¡truktor deï¬novanÃ½, automaticky sa spustÃ­ vo vÅ¡etkÃ½ch troch spomÃ­nanÃ½ch prÃ­padoch â ak vykonÃ¡vame inicializÃ¡ciu priradenÃ­m a ak je objekt parametrom alebo nÃ¡vratovou hodnotou funkcie. Inak povedanÃ©, vÅ¾dy, keÄ sa v programe vytvÃ¡ra kÃ³pia nejakÃ©ho objektu, program zistÃ­, Äi prÃ­sluÅ¡nÃ¡ trieda mÃ¡ kopÃ­rovacÃ­ konÅ¡truktor. Ak Ã¡no, tak ho spustÃ­, a ak nie, tak sa vyrobÃ­ presnÃ¡ kÃ³pia objektu. Ako program spoznÃ¡, ktorÃ½ konÅ¡truktor je kopÃ­rovacÃ­? KopÃ­rovacÃ­ konÅ¡truktor sa vyznaÄuje tÃ½m, Å¾e mÃ¡ jedinÃ½ parameter â odkaz na objekt triedy, ku ktorej patrÃ­. Ide vlastne o odkaz na objekt, z ktorÃ©ho sa vytvÃ¡ra kÃ³pia. DeklarÃ¡cia kopÃ­rovacieho konÅ¡truktora triedy moja trieda by teda vyzerala takto moja trieda(moja trieda &objekt1);"
76,271,0.51,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"5.2.2 Riadnou hracou kockou hodÃ­me 36-krÃ¡t. UrÄte (resp. aproximujte) pravdepodobnosÅ¥ toho, Å¾e sÃºÄet bodov, ktorÃ© padnÃº v pokuse, bude aspoÅ 144. NÃ¡jdite chybu v Ãºvahe: PretoÅ¾e 144/36 = 4, priÄom na kocke padnÃº aspoÅ 4 body s pravdepodobnosÅ¥ou 0.5, tak (vÄaka nezÃ¡vislosti) hÄ¾adanÃ¡ pravdepodobnosÅ¥ sa rovnÃ¡ = 1.46 5.2.3 Teraz uvaÅ¾ujme o (hypoteticky) faloÅ¡nej kocke, na ktorej jednotlivÃ© steny s bodmi 1, 2, 3, ..., 6 padajÃº s pravdepodobnosÅ¥ami: (0.1, 0.1, 0.1, 0.1, 0.2, 0.4). Predstavme si, Å¾e takouto kockou hodÃ­me 36-krÃ¡t. UrÄte (resp. aproximujte) pravdepodobnosÅ¥ toho, Å¾e sÃºÄet bodov, ktorÃ© padnÃº v pokuse, bude aspoÅ 144. 5.2.4 Å½ivotnosÅ¥ batÃ©rie istÃ©ho typu je veliÄina so strednou hodnotou 55 (hod.) a smerodajnou odchÃ½lkou 8 (hod.). KeÄ batÃ©ria doÅ¾ije, je vzÃ¡pÃ¤tÃ­ nahradenÃ¡ novou rovnakÃ©ho typu. Aproximujte pravdepodobnosÅ¥ toho, Å¾e 20 batÃ©riÃ­ nÃ¡m postaÄÃ­ na aspoÅ 1000 hodÃ­n prÃ¡ce. 5.2.5 Nech ( ) je postupnosÅ¥ nezÃ¡vislÃ½ch veliÄÃ­n s rozdelenÃ­m N(0, 1). Vieme, Å¾e veliÄiny uÅ¾ nemajÃº normÃ¡lne rozdelenie (pozri 2.5.11). ZdÃ´vodnite, preÄo nÃ¡hodnÃ© veliÄiny majÃº pre veÄ¾kÃ© pribliÅ¾ne normÃ¡lne rozdelenie. OtÃ¡zka znie: AkÃ© sÃº parametre toho normÃ¡lneho rozdelenia? (VyuÅ¾ite fakt, ktorÃ½ sme nedokazovali: Ak N(0, 1), tak E( ) = 3)."
43,238,0.509,Objektovo orientovanÃ© programovanie v C++,"â¢ MetÃ³du Nacitaj, ktorÃ¡ naÄÃ­ta obrÃ¡zok zo sÃºboru. â¢ MetÃ³du Inverzia, ktorÃ¡ invertuje obrÃ¡zok a vÃ½sledok zapÃ­Å¡e do sÃºboru. â¢ MetÃ³du PreklopX, ktorÃ¡ preklopÃ­ obrÃ¡zok podÄ¾a osi x a vÃ½sledok zapÃ­Å¡e do sÃºboru. â¢ MetÃ³du PreklopY, ktorÃ¡ preklopÃ­ obrÃ¡zok podÄ¾a osi y a vÃ½sledok zapÃ­Å¡e do sÃºboru. 5. PrepÃ­Å¡te hru Pexeso (kapitola 4, cviÄenie 6) do objektovo orientovanej podoby. 6. Vytvorte objektovo orientovanÃ½ program, ktorÃ½ bude vedieÅ¥ spracovÃ¡vaÅ¥ objednÃ¡vky tovaru od zÃ¡kaznÃ­kov. Ãdaje o objednÃ¡vkach sÃº uloÅ¾enÃ© v textovom sÃºbore, pre kaÅ¾dÃº z nich je uloÅ¾enÃ© meno zÃ¡kaznÃ­ka, tovar, ktorÃ½ si objednal a objednanÃ© mnoÅ¾stvo (kaÅ¾dÃ½ Ãºdaj je v samostatnom riadku). Dajme tomu, Å¾e objednÃ¡vky sa vybavujÃº presne v takom poradÃ­, v akom prichÃ¡dzajÃº. VÃ¡Å¡ program by mal vedieÅ¥ pridaÅ¥ novÃº objednÃ¡vku na koniec sÃºboru a vymazaÅ¥ z jeho zaÄiatku objednÃ¡vku, ktorÃ¡ uÅ¾ bola vybavenÃ¡. 7. NapÃ­Å¡te objektovo orientovanÃ½ program, ktorÃ½ bude vytvÃ¡raÅ¥ playlisty pre prehrÃ¡vaÄ hudby. Program bude maÅ¥ k dispozÃ­cii niekoÄ¾ko sÃºborov so zoznamami skladieb. Pre kaÅ¾dÃº skladbu sÃº v Åom zapÃ­sanÃ© tri Ãºdaje â nÃ¡zov, interpret a dÄºÅ¾ka v sekundÃ¡ch. Ãdaje pre vÅ¡etky skladby sÃº zapÃ­sanÃ© za sebou, kaÅ¾dÃ½ Ãºdaj je v samostatnom riadku. MÃ´Å¾ete predpokladaÅ¥, Å¾e v Å¾iadnom sÃºbore nie je viac ako 30 skladieb. VÃ¡Å¡ program bude vytvÃ¡raÅ¥ novÃ© playlisty tak, Å¾e vytvorÃ­ novÃ½ textovÃ½ sÃºbor a doÅho uloÅ¾Ã­ novovytvorenÃ½ zoznam skladieb. UÅ¾Ã­vateÄ¾ bude maÅ¥ niekoÄ¾ko moÅ¾nostÃ­: â¢ NÃ¡hodnÃ© preusporiadanie vÅ¡etkÃ½ch skladieb zo vÅ¡etkÃ½ch sÃºborov. â¢ NÃ¡hodnÃ© preusporiadanie vÅ¡etkÃ½ch skladieb z jednÃ©ho sÃºboru. â¢ NÃ¡hodnÃ½ vÃ½ber zadanÃ©ho poÄtu skladieb zo vÅ¡etkÃ½ch sÃºborov alebo len z jednÃ©ho vybranÃ©ho. â¢ VÃ½ber skladieb len od konkrÃ©tneho interpreta. â¢ VÃ½ber skladieb podÄ¾a dÄºÅ¾ky. NapÃ­Å¡te program tak, aby vedel vypÃ­saÅ¥ na obrazovku obsah ktorÃ©hokoÄ¾vek sÃºboru a tieÅ¾ novÃ½ playlist. V tomto vÃ½pise sa dÄºÅ¾ka skladby objavÃ­ v Å¡tandardnom formÃ¡te minÃºty:sekundy. 8. Vytvorte triedu skladba s Ãºdajmi podÄ¾a predchÃ¡dzajÃºceho cviÄenia, ktorÃ© sa budÃº daÅ¥ nastaviÅ¥ v konÅ¡truktore. V hlavnom programe potom vytvorte pole piatich skladieb tak, Å¾e priamo pri vytvÃ¡ranÃ­ poÄ¾a vymenujete vÅ¡etky jeho prvky. NÃ¡jdite potom v tomto poli vÅ¡etky skladby kratÅ¡ie ako tri minÃºty a vypÃ­Å¡te vÅ¡etky informÃ¡cie o nich. 9. NapÃ­Å¡te objektovo orientovanÃ½ program, ktorÃ½ umoÅ¾nÃ­ Å¡tudentom prihlasovaÅ¥ sa na skÃºÅ¡ky z rÃ´znych predmetov. KaÅ¾dÃ½ Å¡tudent mÃ¡ meno, Å¡tudijnÃ½ odbor a roÄnÃ­k, v ktorom prÃ¡ve je. KaÅ¾dÃ½ predmet mÃ¡ svoj textovÃ½ sÃºbor so zoznamom vÅ¡etkÃ½ch termÃ­nov. Pre kaÅ¾dÃ½ termÃ­n zase existuje textovÃ½ sÃºbor, v ktorom je zoznam uÅ¾ prihlÃ¡senÃ½ch Å¡tudentov. Å tudentovi sa na poÅ¾iadanie vypÃ­Å¡u vÅ¡etky termÃ­ny pre zadanÃ½ predmet. Ak si potom vyberie niektorÃ½ z termÃ­nov, vÅ¡etky jeho Ãºdaje sa pripÃ­Å¡u na koniec sÃºboru so Å¡tudentami, ktorÃ­ sÃº uÅ¾ na tento termÃ­n prihlÃ¡senÃ­."
43,105,0.509,Objektovo orientovanÃ© programovanie v C++,"PrÃ­klad. NapÃ­Å¡me program, ktorÃ½ vytvorÃ­ graf funkcie z(x, y) = x2 + y2 vo forme 2D obrÃ¡zku. Funkcia sa bude vyÄÃ­sÄ¾ovaÅ¥ na intervale [â1, 1] Ã [â1, 1]. Pri rieÅ¡enÃ­ tejto Ãºlohy postupujeme tak, Å¾e kaÅ¾dÃ½ z intervalov sa rozdelÃ­ na 200 rovnakÃ½ch podintervalov. DÄºÅ¾ka jednÃ©ho podintervalu bude teda 0,01. TÃ½m dostaneme sieÅ¥ 201 Ã 201 rovnomerne rozloÅ¾enÃ½ch uzlovÃ½ch bodov. KaÅ¾dÃ½ z tÃ½chto bodov bude predstavovaÅ¥ jeden pixel obrÃ¡zku. Hodnotu z pre kaÅ¾dÃ½ pixel uloÅ¾Ã­me do sÃºboru v binÃ¡rnej forme. FunkÄnÃ© hodnoty budÃº typu ï¬oat."
76,35,0.509,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.2.9 PrÃ­klad. V Å¡katuli mÃ¡me 30 vÃ½robkov a medzi nimi je 5 nepodarkov. NÃ¡hodne vyberme naraz 4. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e medzi vybratÃ½mi bude prÃ¡ve jeden nepodarok? RieÅ¡enie. VybraÅ¥ naraz Å¡tyri je to istÃ©, ako realizovaÅ¥ neusporiadanÃ½ vÃ½ber rozsahu 4 bez vrÃ¡tenia. PoÄet moÅ¾nÃ½ch vÃ½berov sa rovnÃ¡ C(30, 4) = 27 405 a vÅ¡etky sÃº rovnako pravdepodobnÃ©. Nech A je udalosÅ¥, Å¾e medzi vybratÃ½mi je jeden nepodarok. KoÄ¾ko prvkov mÃ¡ mnoÅ¾ina A? Jeden nepodarok z piatich nepodarkov moÅ¾no vybraÅ¥ piatimi spÃ´sobmi. PoÄet moÅ¾nostÃ­ ako vybraÅ¥ 3 dobrÃ© vÃ½robky z 25 dobrÃ½ch sa rovnÃ¡ C(25, 3) = 2300. KaÅ¾dÃ½ z tÃ½ch piatich spÃ´sobov vytvorÃ­ s kaÅ¾dou z tÃ½ch 2300 moÅ¾nostÃ­ priaznivÃº Å¡tvoricu pre nastatie A. Preto poÄet prvkov A sa rovnÃ¡ 5 ï C(25, 3) = 5 ï 2300 = 11 500. Nakoniec P(A) ="
369,115,0.507,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"NÃ¡sobnosÅ¥ou nula sme v skutoÄnosti vyjadrili dve veci: po prvÃ©, Å¾e nie kaÅ¾dÃ½ objekt musÃ­ maÅ¥ svoj typ a po druhÃ©, Å¾e objekty vo vÅ¡eobecnosti nemusia byÅ¥ v modeli typovanÃ© a trieda Typ objektu nemusÃ­ v danom modeli vÃ´bec existovaÅ¥."
76,265,0.507,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"veliÄiny + ... + sa blÃ­Å¾i k normÃ¡lnemu rozdeleniu (a to bez ohÄ¾adu na to, Äi je kocka normÃ¡lna, alebo faloÅ¡nÃ¡). Uvedomme si, Å¾e v tomto prÃ­pade sÃº veliÄiny diskrÃ©tne, a preto pre kaÅ¾dÃ© aj sÃºÄet je diskrÃ©tna veliÄina, napr. = {50, 51, ... , 300}. Ak vÅ¡ak je dostatoÄne veÄ¾kÃ©, rozdelenie sÃºÄtu + ... + mÃ´Å¾eme aproximovaÅ¥ rozdelenÃ­m normÃ¡lnym â teda spojitÃ½m rozdelenÃ­m. Toto ilustrujÃº Ãºlohy 5.2.2 a 5.2.3. 5.2.4 PoznÃ¡mka. Nech ( ) je postupnosÅ¥ nezÃ¡vislÃ½ch, rovnako rozdelenÃ½ch nÃ¡hodnÃ½ch veliÄÃ­n, priÄom E( ) = a var( ) = (Å¾iadne konkrÃ©tne rozdelenie nemÃ¡me na mysli). Aj keÄ rozdelenie veliÄiny nepoznÃ¡me (samozrejme, veÄ nepoznÃ¡me rozdelenie ), vieme urÄiÅ¥ strednÃº hodnotu a varianciu veliÄiny . Zrejme platÃ­:"
135,186,0.507,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,3.1 Prehad architektÃºr softvÃ©ru Na rÃ´zne triedy problÃ©mov boli vytvorenÃ© rÃ´zne zodpovedajÃºce architektÃºry ako vÃ½sledky vÃ½voja snÃ¡h o navrhnutie rieÅ¡enÃ­ na Å¡pecifikovanÃ© problÃ©my. NasledujÃºce podkapitoly budÃº pojednÃ¡va o opise architektÃºr a architektonickÃ½ch Å¡tÃ½loch.
240,242,0.505,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"VÅ¡imnime si riadok 14, ktorÃ½ sa v cykle zavolÃ¡ n krÃ¡t: teda pri kaÅ¾dom volanÃ­ rekurzÃ­vnej funkcie sa n krÃ¡t vnorÃ­me hlbÅ¡ie (ÄÃ­slo Ãºrovne k-1), aÅ¾ kÃ½m dosiahneme poslednÃº ÃºroveÅ (riadok 5) k = 0, v ktorej vypÃ­Å¡eme hodnotu globÃ¡lnej premennej x a Äalej sa nevnÃ¡rame (ale vrÃ¡time spÃ¤Å¥ do predchÃ¡dzajÃºcej Ãºrovne k = 1). GlobÃ¡lna premennÃ¡ x teda musÃ­ postupne nadobudnÃºÅ¥ vÅ¡etky moÅ¾nÃ© hodnoty variÃ¡ciÃ­ s opakovanÃ­m k-tej triedy, napr. pre n = 2 a k = 3 to je: 111, 112, 121, 122, 211, 212, 221 a 222. Hodnotu globÃ¡lnej premennej x upravujeme v riadku 13, v ktorom pridÃ¡me do x cifru p sprava, a v riadku 15, v ktorom po vynorenÃ­ z rekurzie odstrÃ¡nime poslednÃº cifru x, ktorÃº sme tam pridali v riadku 13. DÃ´leÅ¾itÃ© pozorovanie je, Å¾e efekt riadkov 13 a 15 je spolu neutrÃ¡lny: prÃ­kaz v riadku 15 odstrÃ¡ni Ãºpravu vykonanÃº v riadku 13 a vrÃ¡ti hodnotu x do stavu pred vykonanÃ­m riadku 13. Na zÃ¡klade toho vykonÃ¡vanÃ½ cyklus v riadku 9 pre p = 1, â¦, n vyskÃºÅ¡a pridaÅ¥ postupne kaÅ¾dÃº z cifier do vÃ½slednÃ©ho ÄÃ­sla sprava a vnorÃ­ sa â ÄÃ­m pre konkrÃ©tne dosadenie cifry p na k-tej Ãºrovni dosadÃ­ (a aj vypÃ­Å¡e na vÃ½stup) vÅ¡etky moÅ¾nÃ© dosadenia zostÃ¡vajÃºcich cifier. PostupnÃ½m rekurzÃ­vnym vnÃ¡ranÃ­m do ÃºrovnÃ­ k-1, â¦, 1 sa pre kaÅ¾dÃº zo zostÃ¡vajÃºcich cifier dosadia vÅ¡etky moÅ¾nosti cifier, priÄom po kompletnom dosadenÃ­ k cifier sa (v Ãºrovni rekurzie pre k = 0) hodnota x vypÃ­Å¡e. RieÅ¡enie doplÅujÃºcej Ãºlohy (1): Bez pouÅ¾itia globÃ¡lnych alebo statickÃ½ch premennÃ½ch). GlobÃ¡lnu premennÃº x mÃ´Å¾eme odstrÃ¡niÅ¥ tak, Å¾e do funkcie pridÃ¡me pomocnÃ½ argument, v ktorom si budeme hodnotu priebeÅ¾ne prenÃ¡Å¡aÅ¥, upravenÃ© rieÅ¡enie je nasledujÃºce:"
130,99,0.505,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"3 VYBRANÃ VZORY SPRÃVANIA Äo v skutoÄnosti rozumieme pod pojmom sprÃ¡vanie v objektovo orientovanom svete obzvlÃ¡Å¡Å¥? AkÃ© typy sprÃ¡vania nÃ¡m definujÃº takto pomenovanÃ© vzory? PokiaÄ¾ nechceme alebo nepotrebujeme odpoveÄ v kontexte konkrÃ©tneho vzoru mÃ´Å¾eme povedaÅ¥, Å¾e ide o definÃ­ciu vÅ¡eobecnÃ©ho postupu, ktorÃ½ je konkretizovanÃ½ inÅ¡tanciou samotnÃ©ho vzoru. Vzory sprÃ¡vania resp. ich charakteristickÃ¡ skupina nÃ¡m umoÅ¾ÅujÃº alternovaÅ¥ nad konkrÃ©tnym postupom v Äase behu programu. Nie je potrebnÃ© urÄiÅ¥ konkrÃ©tny prÃ­stup uÅ¾ v Äase kompilÃ¡cie, konkrÃ©tne postupy alebo sprÃ¡vania sa dodrÅ¾iavanÃ­m vzorom definovanÃ½ch rozhranÃ­ stÃ¡vajÃº vzÃ¡jomne zameniteÄ¾nÃ© a z vonkajÅ¡ieho pohÄ¾adu ekvivalentnÃ©."
135,69,0.505,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"ProblÃ©my mÃ´Å¾e spÃ´sobi aj nekonzistencia stavu entity pri odoslanÃ­ notifikÃ¡cie o jeho zmene. MÃ´Å¾e sa sta, Å¾e notifikÃ¡cia sa odoÅ¡le v ase, ke eÅ¡te nedoÅ¡lo k Ãºplnej zmene stavu, a nastane konflikt. PrÃ¡ve z tohto dÃ´vodu bÃ½va metÃ³da notifikujPozorovatele() niekedy zapuzdrenÃ¡ ako privÃ¡tna metÃ³da. NÃ¡strahou pouÅ¾itia vzoru je aj vÃ½konnos metÃ³dy aktualizuj(), do ktorej je sÃºstredenÃ¡ celÃ¡ logika reakcie na zmenu stavu predmetu pozorovania."
135,157,0.505,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"2.5.1 ProblÃ©my a ciele Objektovo orientovanÃ© programovacie jazyky prinÃ¡Å¡ajÃº vÃ½hody oproti procedurÃ¡lnym jazykom, najmÃ¤ vaka zapuzdreniu dÃ¡t a operÃ¡ciÃ­ nad nimi. VznikajÃº ale aj novÃ© problÃ©my sÃºvisiace s binÃ¡rnou kompatibilitou predchÃ¡dzajÃºcich verziÃ­ kniÅ¾nÃ­c a zdieanÃ­m objektov medzi rÃ´znymi programovacÃ­mi jazykmi (Hamilton, 1996). V procedurÃ¡lnom jazyku postauje, aby novÃ¡ verzia kniÅ¾nice zachovala kompatibilnÃ© signatÃºry funkciÃ­ a aby pridanÃ© novÃ© funkcie nekolidovali s menami v klientskej aplikÃ¡cii. UdrÅ¾iava kompatibilitu definÃ­ciÃ­ tried v objektovo orientovanÃ½ch jazykov ale nie je takÃ© ahkÃ©. V statickÃ½ch jazykoch (napr. C++, Java) je v klientskom kÃ³de skompilovanÃ© mnoÅ¾stvo informÃ¡ciÃ­ o pouÅ¾itej triede (vekos, poradie a umiestnenie metÃ³d, offset5 od rodiovskej triedy) a aj malÃ¡ zmena vo vnÃºtornej Å¡truktÃºre triedy spÃ´sobÃ­ nutnos prekompilova klientsky kÃ³d. V dynamickÃ½ch jazykoch (napr. Smalltalk), ktorÃ© informÃ¡cie o triedach spravujÃº poas vykonÃ¡vania programu, tieto problÃ©my nevznikajÃº. alÅ¡Ã­ problÃ©m je spÃ´sobenÃ½ zdieanÃ­m kÃ³du medzi jazykmi, ke v prÃ­pade objektovo orientovanÃ½ch programovacÃ­ch jazykov neexistuje Å¾iadna Å¡tandardnÃ¡ reprezentÃ¡cia objektov, ktorÃ¡ by umoÅ¾nila pouÅ¾Ã­va objekty napr. zo Smalltalku v C++. ProblÃ©my nastÃ¡vajÃº uÅ¾ aj medzi rÃ´znymi kompilÃ¡tormi C++, kde kaÅ¾dÃ½ mÃ´Å¾e pouÅ¾Ã­va rozlinÃ© zarovnanie objektov v pamÃ¤ti a pouÅ¾itie objektovej kniÅ¾nice vytvorenej v inom kompilÃ¡tore sa tak stÃ¡va neschodnÃ©. Naopak, v procedurÃ¡lnych jazykoch linkovacÃ­ proces v operanom systÃ©me dodrÅ¾uje uritÃ© konvencie, o umoÅ¾uje vola kniÅ¾nice medzi rÃ´znymi procedurÃ¡lnymi jazykmi (napr. C, Fortran) relatÃ­vne jednoducho. TechnolÃ³gia SOM sprÃ­stupujÃºca objekty bola navrhnutÃ¡ ako rieÅ¡enie obmedzenÃ­ pre Å¡irÅ¡ie pouÅ¾itie kniÅ¾nÃ­c objektovÃ½ch tried (IBM, 1994) s nasledujÃºcimi ciemi: 1. MoÅ¾nos odvodi novÃº objektovÃº triedu z binÃ¡rneho tvaru kniÅ¾nice, bez nutnosti ma k dispozÃ­cii pÃ´vodnÃ½ zdrojovÃ½ kÃ³d zÃ¡kladnej triedy. 2. MoÅ¾nos pouÅ¾Ã­va objektovÃ© triedy a odvodzova novÃ© triedy bez ohadu na programovacÃ­ jazyk, v ktorom bola objektovÃ¡ kniÅ¾nica alebo klientska aplikÃ¡cia implementovanÃ¡. 3. UmoÅ¾ni nÃ¡slednÃ© zmeny (vylepÅ¡enia, opravy) vo vytvorenÃ½ch sÃºiastkach bez nutnosti rekompilÃ¡cie existujÃºcich klientskych aplikÃ¡ciÃ­, ktorÃ© ich pouÅ¾Ã­vajÃº."
240,399,0.505,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"Ãloha 4-5 (rieÅ¡enie) NajskÃ´r urÄÃ­me vstupnÃ© a vÃ½stupnÃ© argumenty funkcie. PodÄ¾a zadania je jedinÃ½ vstup pole celÃ½ch ÄÃ­sel, preto vstupnÃ© argumenty sÃº dva: adresa prvÃ©ho prvku poÄ¾a (typ int*) a poÄet prvkov poÄ¾a (typ int). CieÄ¾om funkcie je vÃ½pis na vÃ½stup, teda vÃ½stupnÃ©"
236,34,0.504,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"Pri prÃ¡ci s LATEXom sa Äoskoro ocitnete v bludisku sÃºborov s rÃ´znymi koncovkami (extensions) a pravdepodobne bez pochopenia ich pÃ´vodu. DoleuvednÃ½ zoznam vÃ¡m napovie nieÄo o rÃ´znych typoch sÃºborov, na ktorÃ© mÃ´Å¾ete natrafiÅ¥ pri prÃ¡ci s TEXom. ProsÃ­m, vezmite vÅ¡ak na vedomie, Å¾e tÃ¡to tabuÄ¾ka si nenÃ¡rokuje staÅ¥ sa ÃºplnÃ½m zoznamom koncoviek a ak nÃ¡jdete takÃº, o ktorej ste presvedÄenÃ­, Å¾e je dÃ´leÅ¾itÃ¡, napÃ­Å¡te nÃ¡m pÃ¡r riadkov. .tex VstupnÃ½ (zdrojovÃ½) sÃºbor LATEXu alebo TEXu. MÃ´Å¾e ho kompilovaÅ¥ latex, respektÃ­ve tex."
43,31,0.504,Objektovo orientovanÃ© programovanie v C++,"1.7 DediÄnosÅ¥ Ak sa pozrieme okolo nÃ¡s, zistÃ­me, Å¾e objekty reÃ¡lneho sveta sÃº hierarchicky usporiadanÃ©. To znamenÃ¡, Å¾e vÅ¡etky patria do nejakej skupiny, alebo ak chceme triedy, ktorÃ¡ sa Äalej mÃ´Å¾e deliÅ¥ na menÅ¡ie skupiny (podtriedy) charakteristickÃ© nejakou vlastnosÅ¥ou a s takÃ½mto delenÃ­m mÃ´Å¾eme postupovaÅ¥ Äalej do rÃ´znej hÄºbky. Ako prÃ­klad si mÃ´Å¾eme uviesÅ¥ triedu Å¾ivÃ½ch organizmov. Ich spoloÄnou vlastnosÅ¥ou mÃ´Å¾e byÅ¥ naprÃ­klad dÄºÅ¾ka Å¾ivota. V tejto triede je obsiahnutÃ¡ podtrieda Å¾ivoÄÃ­chov, ktorÃ© okrem dÄºÅ¾ky Å¾ivota mÃ´Å¾u byÅ¥ charakterizovanÃ© spÃ´sobom pohybu. Podtriedou Å¾ivoÄÃ­chov je hmyz, ktorÃ©ho ÄalÅ¡ou vlastnosÅ¥ou je poÄet nÃ´h. Medzi hmyzom mÃ´Å¾eme Äalej nÃ¡jsÅ¥ podtriedu motÃ½Ä¾ov, ktorÃ© okrem vÅ¡etkÃ½ch uvedenÃ½ch vlastnostÃ­ majÃº navyÅ¡e eÅ¡te farbu krÃ­del. VidÃ­me, Å¾e pri takomto delenÃ­ vÅ¾dy existujÃº nejakÃ© spoloÄnÃ© vlastnosti pre vÅ¡etky objekty danej triedy a kaÅ¾dÃ¡ ÄalÅ¡ia podtrieda je okrem tÃ½chto vlastnostÃ­ charakteristickÃ¡ nieÄim novÃ½m, Äo ju robÃ­ odliÅ¡nou. MÃ´Å¾eme teda povedaÅ¥, Å¾e objekt nejakej podtriedy mÃ¡ na jednej strane vlastnosti, ktorÃ© v podstate zdedil tÃ½m, Å¾e je aj prvkom nejakej vyÅ¡Å¡ie postavenej triedy, a na druhej strane mÃ¡ aj svoje Å¡peciï¬ckÃ© vlastnosti, ktorÃ© vyÅ¡Å¡ie postavenÃ¡ trieda nemÃ¡. Teda kaÅ¾dÃ½ motÃ½Ä¾ mÃ¡ urÄitÃ½ poÄet nÃ´h z toho dÃ´vodu, Å¾e je to hmyz, ale farbu krÃ­del mÃ¡ preto, Å¾e je motÃ½Ä¾, pretoÅ¾e nie kaÅ¾dÃ½ hmyz mÃ¡ aj krÃ­dla. Objektovo orientovanÃ© programovanie vyuÅ¾Ã­va takÃ©to hierarchickÃ© usporiadanie na prehÄ¾adnejÅ¡iu a efektÃ­vnejÅ¡iu organizÃ¡ciu programu. Tento princÃ­p, pri ktorom kaÅ¾dÃ¡ trieda mÃ´Å¾e maÅ¥ podtriedy, ktorÃ© sÃº nieÄÃ­m Å¡peciï¬ckÃ©, a pri ktorom prvky podtriedy preberajÃº vlastnosti triedy, z ktorej pÃ´vodne pochÃ¡dzajÃº, sa nazÃ½va dediÄnosÅ¥ (angl. inheritance). OpÃ¤Å¥ platÃ­, Å¾e dediÄnosÅ¥ je veÄ¾mi uÅ¾itoÄnÃ¡ najmÃ¤ pri rozsiahlych programoch, v ktorÃ½ch sa vyskytujÃº triedy so spoloÄnÃ½mi vlastnosÅ¥ami alebo s rovnakÃ½mi metÃ³dami. DediÄnosÅ¥ umoÅ¾Åuje tieto spoloÄnÃ© prvky deï¬novaÅ¥ na jednom mieste, v jednej rodiÄovskej triede, a v triedach, ktorÃ© sÃº od nej odvodenÃ©, sa potom uvÃ¡dzajÃº len novÃ© Ãºdaje a metÃ³dy, ktorÃ© rodiÄovskÃ¡ trieda neobsahuje. Takto sa skracuje"
205,163,0.504,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","8.5 Zhrnutie V tejto kapitole sme na zaÄiatku opÃ­sali relatÃ­vne mladÃ½ jazyk python. Tu sme ukÃ¡zali jeho veÄ¾mi zaujÃ­mavÃº vlastnosÅ¥ pouÅ¾itia odsadenÃ­ na oznaÄenie blokov. NÃ¡sledne sme opÃ­sali, Äo je to webovÃ½ preliezaÄ a akÃ½m spÃ´sobom s na dneÅ¡nom webe pouÅ¾Ã­va. HlavnÃ¡ ÄasÅ¥ naÅ¡ej kapitoly potom patrila vytvoreniu webovÃ©ho preliezaÄa v jazyku python. Tu sme poukÃ¡zali na niektorÃ© nÃ¡strahy, ktorÃ© tu ÄakajÃº na vÃ½vojÃ¡ra. UkÃ¡zali sme spÃ´soby rieÅ¡enia relatÃ­vnej a absolÃºtnej cesty, spÃ´soby normalizÃ¡cie adries, ale aj efektÃ­vne spÃ´soby vytvÃ¡rania databÃ¡z pre zachytÃ¡vanie zoznamov adries. V zÃ¡vereÄnej Äasti sme skonÅ¡truovali zÃ¡kladnÃº Å¡truktÃºru preliezaÄa."
76,54,0.503,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.4 Kolmogorovov model nÃ¡hodnÃ©ho pokusu Doteraz iÅ¡lo o nÃ¡hodnÃ© pokusy, v ktorÃ½ch mnoÅ¾ina ï vÅ¡etkÃ½ch moÅ¾nÃ½ch vÃ½sledkov bola koneÄnÃ¡, resp. spoÄÃ­tateÄ¾nÃ¡. V takÃ½ch prÃ­padoch sme si mohli dovoliÅ¥ dve veci: ï· SystÃ©m nÃ¡hodnÃ½ch udalostÃ­ modelovaÅ¥ systÃ©mom vÅ¡etkÃ½ch podmnoÅ¾Ã­n mnoÅ¾iny ï. ï· PravdepodobnosÅ¥ udalostÃ­ definovaÅ¥ pomocou pravdepodobnostÃ­ jednotlivÃ½ch vÃ½sledkov pokusu: ( ). P(A) = â Obe skutoÄnosti sme si Ä¾ahko osvojili. Teraz vÅ¡ak musÃ­me zobraÅ¥ na vedomie fakt, Å¾e ak ï nie je spoÄÃ­tateÄ¾nÃ¡, tak z istÃ½ch dÃ´vodov (jemnej matematickej povahy) sa s takÃ½mito predpokladmi pracovaÅ¥ nedÃ¡."
111,70,0.501,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Å tatistiky po jednotlivÃ½ch ÃºlohÃ¡ch Obr. 4.4 ilustruje zobrazenie Å¡tatistÃ­k pre konkrÃ©tnu Ãºlohu - Ãloha 1. Je vidieÅ¥, Å¾e ÃºspeÅ¡nosÅ¥ v prÃ­pade predmetnej Ãºlohy bola veÄ¾mi nÃ­zka. SprÃ¡vnu odpoveÄ si vybralo len 14,3% respondentov, z ktorÃ½ch tretina sa najprv vydala inou cestou (a dosiahla tak len nepriamy Ãºspech). Okrem toho, miera priamosti nÃ¡m hovorÃ­, Å¾e 61,9% respondentov si vybralo svoju odpoveÄ bez akÃ©hokoÄ¾vek nÃ¡vratu. AÅ¾ 52,4% respondentov priÅ¡lo k nesprÃ¡vnemu cieÄ¾u priamo a vybrali si ho ako svoju odpoveÄ, Äo znamenÃ¡, Å¾e respondenti sa poÄas tejto Ãºlohy skutoÄne cÃ­tili sebaisto. To, Å¾e 81% Ä¾udÃ­ vybralo nesprÃ¡vnu odpoveÄ, je zrejmÃ½m signÃ¡lom, Å¾e nieÄo nie je v poriadku. Ak chceme tieto vÃ½sledky preskÃºmaÅ¥ podrobnejÅ¡ie, mÃ´Å¾eme sa pozrieÅ¥ na prvÃ© kliknutia a dosiahnutÃ© ciele."
59,140,0.501,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Proces replikÃ¡cie jedinca â replikÃ¡tora je formÃ¡lne chÃ¡panÃ½ ako kopÃ­rovanie jeho genotypu a vytvorenie novÃ©ho fenotypu urÄenÃ©ho kopÃ­rovanÃ½m genotypom. To znamenÃ¡, Å¾e fenotyp â organizmus replikÃ¡tora â mÃ´Å¾eme chÃ¡paÅ¥ ako nosiÄ (vehikel) genotypu, ktorÃ½ umoÅ¾Åuje jeho replikÃ¡ciu. Pre zjednoduÅ¡enie naÅ¡ich Ãºvah chÃ¡peme proces replikÃ¡cie len ako kopÃ­rovanie genotypu, priÄom tento proces kopÃ­rovania je âfyzickyâ uskutoÄnenÃ½ fenotypom replikÃ¡tora. Je potrebnÃ© poznamenaÅ¥, Å¾e ide o veÄ¾mi silnÃº idealizÃ¡ciu, ale umoÅ¾nÃ­ nÃ¡m zaviesÅ¥ pomerne jednoduchÃº algoritmizÃ¡ciu univerzÃ¡lneho darwinizmu (pozri algoritmus 1). MusÃ­me vÅ¡ak podotknÃºÅ¥, Å¾e mÃ´Å¾u existovaÅ¥ darwinovskÃ© systÃ©my, kde odlÃ­Å¡enie fenotypu od genotypu neplatÃ­, kde sa genotyp kopÃ­ruje â replikuje inÃ½m zariadenÃ­m, ako vlastnÃ½m fenotypom. DobrÃ½ prÃ­klad tejto situÃ¡cie sÃº biologickÃ© a poÄÃ­taÄovÃ© vÃ­rusy, ktorÃ© na vlastnÃº replikÃ¡ciu vyuÅ¾Ã­vajÃº systÃ©my, v ktorÃ½ch parazitujÃº. Postulujme, Å¾e replikÃ¡tor je reprezentovanÃ½ svojÃ­m genotypom x, ktorÃ½, ako uÅ¾ bolo poznamenanÃ©, obsahuje zakÃ³dovanÃº informÃ¡ciu o konÅ¡trukcii replikÃ¡tora (pripomeÅme si Dawkinsove prirovnanie genotypu k receptu na kolÃ¡Ä). PopulÃ¡cia replikÃ¡torov je mnoÅ¾ina genotypov P ï½ x1 , x2 ,..., x p"
184,166,0.501,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"RizikÃ¡ NajvÃ¤ÄÅ¡ie riziko spojenÃ© s nÃ¡vrhom systÃ©mu ICDE predstavuje nesprÃ¡vne odhadnutie poÅ¾iadaviek nÃ¡strojov tretÃ­ch strÃ¡n, pretoÅ¾e len minimum potenciÃ¡lnych vÃ½vojÃ¡rov tÃ½chto nÃ¡strojov ich dokÃ¡Å¾e (v sÃºÄasnosti) Å¡pecifikovaÅ¥. VhodnÃ½m opatrenÃ­m na znÃ­Å¾enie tohto rizika je pouÅ¾itie jednoduchÃ©ho a Ä¾ahko rozÅ¡Ã­riteÄ¾nÃ©ho poÄiatoÄnÃ©ho programovÃ©ho rozhrania API, ktorÃ© bude rozÅ¡Ã­renÃ© po identifikovanÃ­ dodatoÄnÃ½ch poÅ¾iadaviek vyplÃ½vajÃºcich z novÃ½ch prÃ­padov pouÅ¾itia. 2.5.3"
59,11,0.5,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"uvedomenia, akÃº ÄinnosÅ¥ vlastne vykonÃ¡va. SumarizujÃºc, umelÃ© inteligentnÃ© systÃ©my nebudÃº maÅ¥ vedomie a preto nebudÃº Ãºplne rovnocennÃ© Ä¾udskej mysli. NiekoÄ¾ko poznÃ¡mok k tomuto zÃ¡veru, podÄ¾a ktorÃ©ho umelÃ¡ myseÄ¾, ktorÃ¡ by bola rovnocennÃ¡ s Ä¾udskou mysÄ¾ou, nie je moÅ¾nÃ¡ (mnoho filozofov takto interpretuje Searleho prÃ­klad âÄÃ­nskej izbyâ). Koncom 19. storoÄia pre inÅ¾inierov â strojÃ¡rov existovala aktuÃ¡lna vÃ½zva zostrojiÅ¥ lietajÃºci stroj, ktorÃ½ je Å¥aÅ¾Å¡Ã­ ako vzduch. Existovali seriÃ³zne inÅ¾inierske analÃ½zy, ktorÃ© diskutovali existenciu lietajÃºceho stroja. HlavnÃ¡ nÃ¡mietka vyplÃ½vajÃºca z tÃ½chto analÃ½z bola, Å¾e neexistuje takÃ½ vÃ½konnÃ½ stroj, ktorÃ½ by dokÃ¡zal hÃ½baÅ¥ krÃ­dlami tak, aby stroj lietal Å¡tÃ½lom podobnÃ½m vtÃ¡kom. PouÅ¾itie vrtule bola Ãºplne novÃ¡ paradigma, pre konÅ¡trukciu lietajÃºcich strojov â lietadiel, ktorÃ¡ nemala v prÃ­rode analÃ³giu (podobne, ako objav kolesa asi pred 3000 rokmi pred Kr.). PouÅ¾itie tohto zariadenia koncom 19. storoÄia rÃ½chlo viedlo ku vzniku lietajÃºcich zariadenÃ­ â lietadiel s vrtuÄ¾ou a k ich bÃºrlivÃ©mu rozvoju. VychÃ¡dzajÃºc z tejto analÃ³gie mÃ´Å¾eme tvrdiÅ¥, Å¾e umelÃ¡ myseÄ¾ nemusÃ­ byÅ¥ viazanÃ¡ len na biologickÃ½ mozog (podobne, ako lietajÃºce stroje len na vtÃ¡kov), ale mÃ´Å¾e byÅ¥ implementovanÃ¡ napr. pomocou rozsiahlych umelÃ½ch neurÃ³novÃ½ch sietÃ­ implementovanÃ½ch na mnohovrstvovom kremÃ­kovom Äipe. To, Äi takÃ©to âzariadenieâ simulujÃºce Ä¾udskÃº myseÄ¾ bude alebo nebude maÅ¥ efemÃ©rnu vlastnosÅ¥, ktorÃº nazÃ½vame vedomie, je len sekundÃ¡rny ï­ nepodstatnÃ½ problÃ©m cielenej simulÃ¡cie mysle pomocou kremÃ­kovÃ½ch Äipov."
190,81,0.499,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"konfliktov medzi vÃ½vojÃ¡rmi a testermi mÃ´Å¾eme kategorizovaÅ¥ do troch vrstiev: (i) proces testovania softvÃ©ru, (ii) Ä¾udia a (iii) organizÃ¡cia [1]. V kaÅ¾dej z tÃ½chto vrstiev sa dajÃº identifikovaÅ¥ moÅ¾nÃ© zdroje konfliktu a nÃ¡sledne moÅ¾nosti podpory rieÅ¡enia zo strany manaÅ¾Ã©ra."
76,75,0.499,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.5.8 PrÃ­klad. UvaÅ¾ujme dve Å¡katule z prÃ­kladu 1.5.3, teda Ä¾avÃ¡ obsahuje 3 biele a 2 Äierne, pravÃ¡ jednu bielu a Å¡tyri Äierne loptiÄky. NÃ¡hodnÃ½ pokus spoÄÃ­va v nÃ¡hodnej voÄ¾be Å¡katule a nÃ¡hodnom Å¥ahanÃ­ loptiÄky z nej. K voÄ¾be Å¡katule pouÅ¾ijeme hraciu kocku. Ak na kocke padne menej ako 5, volÃ­me Ä¾avÃº Å¡katuÄ¾u, inak pravÃº. S akou pravdepodobnosÅ¥ou bude a) vytiahnutÃ¡ loptiÄka biela a bude Å¥ahanÃ¡ z Ä¾avej Å¡katule? b) vytiahnutÃ¡ loptiÄka Äierna a bude Å¥ahanÃ¡ z pravej Å¡katule? c) vytiahnutÃ¡ loptiÄka biela? RieÅ¡enie. OznaÄme â loptiÄku Å¥ahÃ¡me z Ä¾avej Å¡katule, â loptiÄku Å¥ahÃ¡me z pravej Å¡katule. Nech B je udalosÅ¥ â vytiahnutÃ¡ je biela, resp. C â vytiahnutÃ¡ je Äierna. Na zodpovedanie prvÃ½ch dvoch otÃ¡zok niÄ novÃ© nepotrebujeme. Teda postupujeme ako doteraz. a) P(Bï"
59,453,0.498,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"9 RevÃ­zia poznatkov 9.1 ÃvodnÃ© poznÃ¡mky1 ProblÃ©m revÃ­zie poznatkov mÃ¡ vo filozofii a v logike dlhÃº tradÃ­ciu. Stal sa integrÃ¡lnou sÃºÄasÅ¥ou mnohÃ½ch traktÃ¡tov a monografiÃ­ z filozofie poznania (epistemolÃ³gie) a logiky od staroveku aÅ¾ po sÃºÄasnosÅ¥, ktorÃ© obsahovali rozsiahle kapitoly, kde vÃ¤ÄÅ¡inou na fenomenologicko-Å¡pekulatÃ­vnej Ãºrovni sa formulovali zÃ¡sady nÃ¡Å¡ho myslenia, argumentÃ¡cie a zmeny poznatkov vyplÃ½vajÃºcich zo zmien vÃ½chodiskovÃ½ch predpokladov, ich rozÅ¡Ã­renia alebo ÄiastoÄnej falzifikÃ¡cie. TÃ¡to zaujÃ­mavÃ¡ problematika sa stala sÃºÄasÅ¥ou aplikovanej matematickej logiky aÅ¾ koncom minulÃ©ho storoÄia, keÄ jej formÃ¡lny aparÃ¡t bol pouÅ¾itÃ½ na formulÃ¡ciu teÃ³rie revÃ­zie poznatkov. TaktieÅ¾, problÃ©m revÃ­zie poznatkov sa stal v sÃºÄasnosti integrÃ¡lnou ÄasÅ¥ou informatiky a umelej inteligencie a tÃ½m musel prejsÅ¥ z roviny vÅ¡eobecnoÅ¡pekulatÃ­vnej k rovine formÃ¡lno-exaktnej, ktorÃ¡ mÃ´Å¾e slÃºÅ¾iÅ¥ ako zÃ¡klad algoritmizÃ¡cie problematiky revÃ­zie poznatkov na poÄÃ­taÄoch. Tak naprÃ­klad, ak chceme Å¡pecifikovaÅ¥ zÃ¡kladnÃ© epistemickÃ© princÃ­py vÃ½vinu vedy, dynamiku jej vÃ½voja v Äase, tento cieÄ¾ mÃ´Å¾e byÅ¥ realizovanÃ½ na abstraktnej Ãºrovni tak, Å¾e Å¡tudujeme danÃº konzistentnÃº databÃ¡zu poznatkov. TÃ¡to databÃ¡za je v Äase postupne modifikovanÃ¡ elementÃ¡rnymi operÃ¡ciami, ako je dodanie novÃ©ho poznatku a odstrÃ¡nenie pÃ´vodnÃ©ho poznatku. V obidvoch prÃ­padoch tieto operÃ¡cie zmeny mÃ´Å¾u ovplyvÅovaÅ¥ ostatnÃ© poznatky, preto sa vykonÃ¡va ich revÃ­zia, aby sa odstrÃ¡nili prÃ­padnÃ© nekonzistentosti. V poÄiatoÄnom obdobÃ­ vzniku teÃ³rie revÃ­zie poznatkov (80. roky minulÃ©ho storoÄia) zÃ¡kladnÃ© idey boli formulovanÃ© Å¡vÃ©dskym kognitÃ­vnym vedcom Petrom GÃ¤rdenforsom [3,4] a dvojicou americkÃ½ch logikov Carlosom AlchourrrÃ³nom a Davidom Makinsomom [1], ktorÃ­ spoloÄne v r. 1985 publikovali v Journal of Symbolic Logic vÃ½znamnÃº prÃ¡cu [1] (ktorÃ¡ sa v odbornej literatÃºre oznaÄuje akronymom AGM poÄiatoÄnÃ½ch pÃ­smen ich priezvisk v abecednom poriadku jej autorov), v ktorej formulovali zÃ¡kladnÃ© princÃ­py, koncepcie a konÅ¡trukcie teÃ³rie revÃ­zie poznatkov. PrÃ­klad 9.1. Predpokladajme, Å¾e teÃ³ria obsahuje tieto Å¡tyri poznatky: p1 = Â´vÅ¡etky eurÃ³pske labute sÃº bieleÂ´ p2 = Â´vtÃ¡k zachytenÃ½ do siete je labuÅ¥Â´ p3 = Â´vtÃ¡k zachytenÃ½ v sieti pochÃ¡dza zo SlovenskaÂ´ p4 = Â´Slovensko je ÄasÅ¥ EurÃ³pyÂ´ Ak tieto Å¡tyri poznatky tvoria vstup do programu simulujÃºceho logickÃ© usudzovanie, potom ako vÃ½stup z tohto programu dostaneme novÃ½ poznatok p5 = Â´vtÃ¡k zachytenÃ½ v sieti je bielyÂ´ Teraz predpokladajme, Å¾e naÅ¡a databÃ¡za bola doplnenÃ¡ o ÄalÅ¡Ã­ poznatok p6 = Â´vtÃ¡k zachytenÃ½ v sieti je ÄiernyÂ´ Tento novÃ½ âpoznatokâ je v kontradikcii so zÃ¡verom p5 , t. j. platÃ­ p6 ï½ ïp5 . Potom musÃ­me vykonaÅ¥ revÃ­ziu databÃ¡zy, aby sme odstrÃ¡nili tÃºto nekonzistentnosÅ¥, t. j. niektorÃ½ poznatok z pÃ´vodnej databÃ¡zy {p1, p2, p3, p4} musÃ­ byÅ¥ odstrÃ¡nenÃ½ alebo modifikovanÃ½. Tak naprÃ­klad, ak poznatok p1 nahradÃ­me novÃ½m poznatkom"
40,46,0.498,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Vytvorenie RC ANN s echo stavmi Najprv skonÅ¡truujeme neurÃ³novÃº sieÅ¥ s echo stavmi a nÃ¡sledne zvolÃ­me takÃº veÄ¾kosÅ¥ dynamickÃ©ho rezervoÃ¡ra, aby odrÃ¡Å¾ala potreby Äi uÅ¾ komplexnosti Ãºlohy alebo poÅ¾adovanej presnosti."
265,461,0.498,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"hodnovernosÅ¥ prototypu (miera rozpracovania, Ãºplnosti prototypu â low, medium, high fidelity prototype), hodnovernosÅ¥ nÃ¡vrhu (miera aktuÃ¡lneho naplnenia pouÅ¾Ã­vateÄ¾skÃ½ch poÅ¾iadaviek v navrhnutom rieÅ¡enÃ­; najÄastejÅ¡ie v sÃºvislosti s nÃ¡vrhom pouÅ¾Ã­vateÄ¾skÃ©ho rozhrania),"
40,38,0.497,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"DefinÃ­cia 2. (KontraktÃ­vnosÅ¥). S tÃ½mi istÃ½mi predpokladmi ako v definÃ­cii 1,    neurÃ³novÃ¡ sieÅ¥ (W in ,W ,W back ) je kontraktÃ­vna vzhÄ¾adom na U a D , ak pre vÅ¡etky vstupno/vÃ½stupnÃ© sekvencie (u (n), d (n â 1)) â U Ã D sprava idÃºce do nekoneÄna, kde n = 0,1,2,... existuje (Î´ n ) nâ¥0 , takÃ©, Å¾e pre vÅ¡etky poÄiatoÄnÃ© stavy x (0), x â²(0) a pre vÅ¡etky n â¥ 0 platÃ­, Å¾e x (n) â x â²(n) < Î´ n , kde x (n) (resp. x â²(n) ) je stav neurÃ³novej siete v Äase n. IntuitÃ­vne mÃ´Å¾eme povedaÅ¥, Å¾e Äasom dÃ´jde k takzvanÃ©mu âvymytiuâ vplyvu poÄiatoÄnej inicializÃ¡cie neurÃ³novej siete (obr. 5). SchopnosÅ¥ dosiahnuÅ¥ echo stavy Ãºzko sÃºvisÃ­ s algebraickÃ½mi vlastnosÅ¥ami vÃ¡hovej matice W . Å½iaÄ¾, zatiaÄ¾ nie sÃº znÃ¡me Å¾iadne nutnÃ© a postaÄujÃºce podmienky,    na zÃ¡klade ktorÃ½ch by sa dalo jednoznaÄne rozhodnÃºÅ¥, Äi pri zadanÃ½ch W in ,W ,W back mÃ¡ danÃ¡ neurÃ³novÃ¡ sieÅ¥ schopnosÅ¥ dosiahnuÅ¥ echo stavy alebo nie."
393,455,0.497,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"nÃ¡vrhovÃ½mi vzormi zodpovedajÃºcimi detailnÃ©mu nÃ¡vrhu v kontexte objektovo orientovanÃ©ho vÃ½voja softvÃ©ru a budeme vychÃ¡dzaÅ¥ najmÃ¤ z katalÃ³gu (Gamma et al., 1995). V zÃ¡sade neexistujÃº Å¾iadne obmedzenia, ktorÃ© by uprednostnili dogmatickÃ½ alebo nedogmatickÃ½ prÃ­stup k nÃ¡vrhovÃ½m vzorom. OtÃ¡zka mÃ´Å¾e znieÅ¥: ako a kedy sa aplikujÃº nÃ¡vrhovÃ© vzory a ktorÃ½ z prÃ­stupov v tom alebo onom prÃ­pade pouÅ¾iÅ¥? OpÃ¤Å¥ sÃº zauÅ¾Ã­vanÃ© dva zÃ¡kladnÃ© prÃ­stupy kedy a ako nÃ¡vrhovÃ© vzory pouÅ¾iÅ¥. PomÃ´ckou alebo akousi metodikou v prÃ­pade pouÅ¾itia nÃ¡vrhovÃ©ho vzoru mÃ´Å¾u byÅ¥ rÃ´zne metÃ³dy pre prÃ¡cu so vzormi napr.: (Dong, 2002, JakubÃ­k, 2005a, Yacoub & Ammar, 2000), ktorÃ© sÃº viac alebo menej zdokumentovanÃ© v rÃ´znych publikÃ¡ciÃ¡ch. NÃ¡vrhovÃ© vzory sa mÃ´Å¾u pouÅ¾iÅ¥ poÄas Å¡tandardnej fÃ¡zy detailnÃ©ho nÃ¡vrhu, kedy sa podÄ¾a poÅ¾iadaviek a predchÃ¡dzajÃºcej analÃ½zy vzory vyberajÃº na rieÅ¡enie konkrÃ©tnych problÃ©mov. Uprednostnenie pouÅ¾itia dogmatickÃ©ho alebo nedogmatickÃ©ho prÃ­stupu Ãºzko zÃ¡visÃ­ od konkrÃ©tneho prÃ­padu. Ak navrhujeme softvÃ©r takpovediac na zelenej lÃºke, zdÃ¡ sa vhodnejÅ¡ie pouÅ¾iÅ¥ dogmatickÃ½ prÃ­stup, poÄas ktorÃ©ho sÃº jasne identifikovanÃ© vzory, jednotlivÃ© roly vo vzoroch ako i funkcionalita spojenÃ¡ s konkrÃ©tnym vzorom. V prÃ­pade vyuÅ¾itia uÅ¾ vytvorenÃ½ch ÄastÃ­ softvÃ©ru, ktorÃ© sa budÃº meniÅ¥ pre potreby aplikÃ¡cie, je asi vhodnejÅ¡ie pouÅ¾iÅ¥ nedogmatickÃ½ prÃ­stup, s ktorÃ½m zjednoduÅ¡Ã­me samotnÃ½ vÃ½voj, umoÅ¾nÃ­me prispÃ´sobiÅ¥ samotnÃ½ vzor konkrÃ©tnemu pouÅ¾itiu, no vyÅ¾adujeme kvalifikovanÃ©ho nÃ¡vrhÃ¡ra ovlÃ¡dajÃºceho definovanÃº skupinu nÃ¡vrhovÃ½ch vzorov. Ak nÃ¡vrhovÃ© vzory pouÅ¾Ã­vame v Äasti refaktoringu a optimalizÃ¡cie (aj keÄ nie vÃ½konnostnej, keÄÅ¾e sÃºÄasnÃ© nÃ¡vrhovÃ© vzory skÃ´r pridÃ¡vajÃº do nÃ¡vrhu ÄalÅ¡ie vrstvy abstrakcie, novÃ© triedy a samotnÃ© vykonanie funkcionality nie je optimalizovanÃ© z hÄ¾adiska Äasu a vÃ½konu) sÃº vzory ÄastokrÃ¡t modifikovanÃ© v existujÃºcom nÃ¡vrhu alebo vkladanÃ© do ÄastÃ­ nÃ¡vrhu, kde vyÅ¾adujeme vyÅ¡Å¡iu generalicitu a vÅ¡eobecnosÅ¥. PridÃ¡vanie genericity a vÅ¡eobecnosti v koneÄnom dÃ´sledku spÃ´sobuje Ä¾ahÅ¡iu rozÅ¡Ã­riteÄ¾nosÅ¥ a jednoduchÅ¡iu konfigurovateÄ¾nosÅ¥ vÃ½slednÃ©ho softvÃ©rovÃ©ho produktu. V tomto prÃ­pade sa zdÃ¡ vhodnejÅ¡Ã­ nedogmatickÃ½ prÃ­stup z dÃ´vodu moÅ¾nÃ½ch modifikÃ¡ciÃ­ vÅ¡eobecnÃ½ch vzorov, bez potreby prÃ­liÅ¡nÃ©ho upravovania uÅ¾ existujÃºcich ÄastÃ­ systÃ©mu. V tabuÄ¾ke 9-2 uvÃ¡dzame vybranÃ© vlastnosti pouÅ¾itia nÃ¡vrhovÃ½ch vzorov v rÃ´znych etapÃ¡ch vÃ½voja softvÃ©ru pri rÃ´znych prÃ­stupoch."
76,159,0.497,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"ktorÃ½ mÃ¡ univerzÃ¡lnu platnosÅ¥. PlatÃ­ tak pre diskrÃ©tne veliÄiny, ako aj pre spojitÃ© s hustotou a aj pre vÅ¡etky ostatnÃ© (v Ãºlohe 2.5.20 jednu takÃº veliÄinu predstavÃ­me). DÃ´leÅ¾itosÅ¥ distribuÄnej funkcie vynikne prÃ¡ve v tomto ÄlÃ¡nku, v ktorom pÃ´jde o urÄenie rozdelenia novej nÃ¡hodnej veliÄiny , ktorÃ¡ je transformÃ¡ciou pÃ´vodnej veliÄiny , t. j. = ( ). Vstupom Ãºlohy je rozdelenie veliÄiny a transformÃ¡cia, ktorÃº predstavuje danÃ¡ funkcia . CieÄ¾om snaÅ¾enia je urÄiÅ¥ rozdelenie veliÄiny = ( ). Rozdelenie veliÄiny je danÃ© buÄ funkciou alebo . KeÄÅ¾e pracujeme s dvoma nÃ¡hodnÃ½mi veliÄinami , , oznaÄme ich distribuÄnÃ© funkcie a . DanÃ© sÃº teda funkcia a funkcia . Ãlohou je urÄiÅ¥ . NajÄastejÅ¡ie transformÃ¡cie sÃº lineÃ¡rna funkcia, ( ) = a jednoduchÃ¡ kvadratickÃ¡, ( ) = . PrincipiÃ¡lne vÅ¡ak funkciou mÃ´Å¾e byÅ¥ akÃ¡koÄ¾vek reÃ¡lna funkcia reÃ¡lnej premennej. Samozrejme, definiÄnÃ½ obor funkcie musÃ­ obsahovaÅ¥ obor hodnÃ´t veliÄiny (tÃ¡to podmienka zaruÄuje, Å¾e veliÄina = ( ) je dobre definovanÃ¡). V prvÃ½ch troch situÃ¡ciÃ¡ch ide o prÃ­pady, keÄ veliÄina je diskrÃ©tna, a preto aj veliÄina , = ( ), je diskrÃ©tna. Pri hÄ¾adanÃ­ pravdepodobnostnej funkcie veliÄiny v odsekoch 2.5.1 a 2.5.2 vystaÄÃ­me s aditivitou pravdepodobnosti, pretoÅ¾e ( ) je koneÄnÃ¡. 2.5.1 PrÃ­klad. Nech rozdelenie veliÄiny je danÃ© pravdepodobnostnou funkciou vo forme tabuÄ¾ky ( )"
135,61,0.497,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"1.3.3 AbstraktnejÅ¡Ã­ pohad: vzor RukovÃ¤-Teleso VrÃ¡me sa teraz do prostredia objektovo orientovanÃ½ch programov a pozrime sa na vzor Obaova (resp. AdaptÃ©r poda GoF) abstraktnejÅ¡Ã­m pohadom. Tento vzor je sÃºasou Å¡irÅ¡ej mnoÅ¾iny vzorov, oznaovanej niekedy ako vzor RukovÃ¤-Teleso (angl. Handle-Body Pattern)3. Charakteristickou rtou tÃ½chto vzorov je, Å¾e implementÃ¡cia nieoho (teleso, angl. body) je oddelenÃ¡ od rozhrania, s ktorÃ½m pracujÃº klienti (rukovÃ¤, angl. handle). Volania, zachytenÃ© rukovÃ¤ou, sÃº Å¡tandardne poslanÃ© na spracovanie telesu, avÅ¡ak mÃ´Å¾u by predtÃ½m upravenÃ©, prÃ­padne aj Ãºplne potlaenÃ©. RukovÃ¤ teda istÃ½m spÃ´sobom obauje teleso, preto sa vzoru RukovÃ¤-Teleso tieÅ¾ niekedy hovorÃ­ Obaova. Vzor RukovÃ¤-Teleso zah a, okrem inÃ½ch, nasledujÃºce vzory (nÃ¡zvy poda GoF): 1. AdaptÃ©r (angl. Adapter), ktorÃ½ upravuje rozhranie triedy do poÅ¾adovanÃ©ho tvaru (povedanÃ© naÅ¡ou terminolÃ³giou, rieÅ¡i situÃ¡cie, kedy R Râ, priom F a Fâ mÃ´Å¾u, avÅ¡ak nemusia by rovnakÃ©). 2. DekoratÃ©r (angl. Decorator), ktorÃ½ pridÃ¡va triede dodatonÃº funknos bez zmeny rozhrania (t.j. F Fâ, R = Râ). 3. Most (angl. Bridge), ktorÃ½ umoÅ¾uje dynamicky meni implementÃ¡ciu realizujÃºcu danÃ© rozhranie (t.j. F = Fâ, R = Râ, avÅ¡ak sÃºiastku B vieme poas vykonÃ¡vania nahradi sÃºiastkou C poskytujÃºcou funknos F prostrednÃ­ctvom rozhrania R). 4. ZÃ¡stupca (angl. Proxy), ktorÃ½ modifikuje alebo dop a niektorÃ© vlastnosti triedy nie priamo sÃºvisiace s jej funknosou (ako sÃº vzdialenÃ½ prÃ­stup, neskorÃ¡ inicializÃ¡cia, ochrana a inÃ©) â t.j. mohli by sme poveda, Å¾e F = Fâ, R = Râ, s tÃ½m, Å¾e menia sa niefunknÃ© aspekty poskytovanej sluÅ¾by."
59,477,0.497,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"V literatÃºre sa pouÅ¾Ã­va Å¥aÅ¾ko preloÅ¾iteÄ¾nÃ½ angl. termÃ­n âepistemic entrenchmentâ, Äo v prenesenom zmysle slova mÃ´Å¾e byÅ¥ preloÅ¾enÃ© ako âepistemickÃ¡ pevnosÅ¥ â nedobytnosÅ¥â. Z tÃ½chto dÃ´vodov pouÅ¾Ã­vame novÃ½ termÃ­n âepistemickÃ¡ vÃ½znamnosÅ¥â, ktorÃ½ pomerne presne vystihuje zmysel a vÃ½znam pÃ´vodnÃ©ho anglickÃ©ho termÃ­nu. Poznamenajme, Å¾e prÃ­stup âepistemickej vÃ½znamnostiâ mÃ´Å¾eme chÃ¡paÅ¥ ako prejav naÅ¡ej racionÃ¡lnosti k vÅ¡eobecnÃ©mu problÃ©mu revÃ­zie poznatkov mimologickÃ½mi prostriedkami."
43,333,0.495,Objektovo orientovanÃ© programovanie v C++,"Prirodzene, hodnota tohto fantÃ³movÃ©ho parametra sa ani nikde nepouÅ¾ije, je to skutoÄne len oznaÄenie postï¬xovÃ©ho tvaru. Deï¬nujme teraz obe formy operÃ¡tora. Preï¬xovÃ½ tvar jednoducho pripoÄÃ­ta k pÃ´vodnej hodnote zlomku zlomok 11 , t. j. ÄitateÄ¾ bude maÅ¥ novÃº hodnotu citatel+menovatel a menovateÄ¾ sa nezmenÃ­. MetÃ³da potom vrÃ¡ti samotnÃ½ zlomok, uÅ¾ so zmenenÃ½mi Ãºdajmi. UÅ¾ vieme, Å¾e k samotnÃ©mu zlomku mÃ´Å¾eme pristupovaÅ¥ pomocou smernÃ­ka this. zlomok zlomok::operator++() citatel+=menovatel; return *this;"
130,382,0.494,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 1,"JednoduchÃ¡ Å¡truktÃºra NajjednoduchÅ¡Ã­ spÃ´sob rozdeÄ¾ovania Ãºloh je ten, Å¾e vÅ¡etky agenty (Äasti systÃ©mu) sÃº Ãºplne riadenÃ© nadradenÃ½mi agentmi. ZnamenÃ¡ to, Å¾e agent dostane prÃ­kaz od nadradenÃ©ho agenta a nemÃ´Å¾e odmietnuÅ¥ jeho splnenie. Ide teda o prÃ­snu podriadenosÅ¥ agentov. TypickÃ© pouÅ¾itie jednoduchej Å¡truktÃºry rozdeÄ¾ovania Ãºloh je hierarchia vojenskÃ©ho typu, kde k rozdeÄ¾ovaniu Ãºloh dochÃ¡dza postupnÃ½m delegovanÃ­m Ãºloh agentom na niÅ¾Å¡om stupni hierarchie. PouÅ¾itie tohto princÃ­pu vÅ¡ak nie je obmedzenÃ© iba na hierarchie, pouÅ¾Ã­va sa prakticky vo vÅ¡etkÃ½ch typoch organizÃ¡ciÃ­, kde je moÅ¾nÃ© vo vzÅ¥ahu jednoznaÄne odlÃ­Å¡iÅ¥ zadÃ¡vateÄ¾a Ãºlohy od toho kto ju vykonÃ¡va."
190,312,0.494,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Kvalita produktu je danÃ¡ tÃ½m, do akej miery spÄºÅa jednotlivÃ© charakteristiky. Je pomerne nÃ¡roÄnÃ© urÄiÅ¥, ktorÃ© z nich sÃº pre stanovenie celkovej kvality najdÃ´leÅ¾itejÅ¡ie. No je pomerne jednoduchÃ© urÄiÅ¥, ktorÃ© z tÃ½chto vlastnostÃ­ sÃº prioritnÃ© pre jednotlivÃ© skupiny Ä¾udÃ­ pracujÃºcich so softvÃ©rom. Priority pouÅ¾Ã­vateÄ¾a sÃº, aby program robil to Äo mÃ¡, fungoval bez vÃ½padkov a najmÃ¤, aby sa s nÃ­m dobre pracovalo. Teda pre beÅ¾nÃ©ho pouÅ¾Ã­vateÄ¾a nie je dÃ´leÅ¾itÃ©, Äi dokÃ¡Å¾e bez problÃ©mov doprogramovaÅ¥ do svojho textovÃ©ho editora modul pre spoluprÃ¡cu s expertnÃ½m systÃ©mom, ale Äi bude vedieÅ¥ pohodlne a Ä¾ahko pridaÅ¥ do svojho dokumentu obrÃ¡zok, bez toho, aby mu program zamrzol a spadol. A chybovÃ¡ sprÃ¡va na Ãºrovni kÃ³du, ktorÃ¡ sa po spadnutÃ­ ukÃ¡Å¾e moÅ¾no pomÃ´Å¾e programÃ¡torovi lokalizovaÅ¥ a odstrÃ¡niÅ¥ chybu, ale normÃ¡lne pouÅ¾Ã­vateÄ¾a len eÅ¡te viac nahnevÃ¡. PouÅ¾ijÃºc jazyk normy ISO/IEC 9126: pouÅ¾iteÄ¾nosÅ¥, funkÄnosÅ¥ a bezporuchovosÅ¥. Na druhej strane, vÃ½vojÃ¡r bude pri programovanÃ­ dbaÅ¥ na to, aby bol program Äo najprehÄ¾adnejÅ¡ie napÃ­sanÃ½, aby sa s jeho jednotlivÃ½mi ÄasÅ¥ami dalo pekne jednoducho manipulovaÅ¥, meniÅ¥ ich a prispÃ´sobovaÅ¥ tomu Äo prÃ¡ve potrebuje do programu pridaÅ¥, odstrÃ¡niÅ¥ alebo zmeniÅ¥. Inak povedanÃ© udrÅ¾ovateÄ¾nosÅ¥ a prenosnosÅ¥. JedinÃ¡ poloÅ¾ka, ktorÃ¡ zostala nepovÅ¡imnutÃ¡ je efektivita. Aj napriek tomu, Å¾e efektivita je veÄ¾mi dÃ´leÅ¾itÃ¡, podÄ¾a mÃ´jho nÃ¡zoru je aÅ¾ niekde na chvoste Priority rebrÃ­Äka dÃ´leÅ¾itosti tÃ½chto charakteristÃ­k. ProgramÃ¡tor totiÅ¾ ako tvor lenivÃ½, pouÅ¾Ã­vateÄ¾a sÃº samozrejme aÅ¾ na svetlÃ© vÃ½nimky, radÅ¡ej oÅ¾elie nejakÃº tu inÅ¡trukciu alebo inÃ© ako priority prÃ­kaz navyÅ¡e, ako by mal zmeniÅ¥ ÄasÅ¥ alebo celÃ½ program. Samozrejme nevÃ½vojÃ¡ra. hovorÃ­me tu o bohapustom plytvanÃ­ strojovÃ©ho Äasu, ale ruku na srdce, vÃ¤ÄÅ¡ina Ä¾udÃ­ predsa len Å¾ije a aj programuje cestou menÅ¡ieho odporu. PouÅ¾Ã­vateÄ¾ tieÅ¾ rÃ¡d odpustÃ­ svojmu obÄ¾ÃºbenÃ©mu programu to, Å¾e Å¡tartuje o nejakÃº tÃº sekundiÄku dlhÅ¡ie, Å¾e vÃ½poÄet sa nevykonÃ¡ tak rÃ½chlo ako u inÃ©ho programu, podstatnÃ© je, Å¾e tento program robÃ­ to Äo robiÅ¥ mÃ¡, a Å¾e s nÃ­m je aj napriek jeho muchÃ¡m zÅ¾itÃ½ a vie s nÃ­m pracovaÅ¥ bez vÃ¤ÄÅ¡ej nÃ¡mahy. Napriek tomu sa prÃ¡ve efektivita stala povestnou ÄereÅ¡niÄkou na torte, ktorÃ¡ oddeÄ¾uje dobrÃ½ch od najlepÅ¡Ã­ch a najlepÅ¡Ã­ch od excelentnÃ½ch. Paradoxne charakteristika, nad ktorou vÃ¤ÄÅ¡ina Ä¾udÃ­ privrie oko a mÃ¡vne rukou je tÃ½m, podÄ¾a Äoho si kaÅ¾dÃ½ trochu rozumnÃ½ pouÅ¾Ã­vateÄ¾ nakoniec vyberie medzi dvoma softvÃ©rovÃ½mi produktami, ktorÃ© poskytujÃº rovnakÃº funkcionalitu, stabilitu a pouÅ¾Ã­vateÄ¾skÃº prÃ­vetivosÅ¥. VÃ½vojÃ¡ri budÃº zase na druhej strane celÃ­ pyÅ¡nÃ­ na to, akÃ½ optimÃ¡lny program sa im podarilo napÃ­saÅ¥ a v dokumentÃ¡cii k projektu nezabudnÃº priloÅ¾iÅ¥ sÃ©riu grafov, z ktorÃ½ch je jasne vidno, Å¾e pri spracovanÃ­ Ãºdajov na beÅ¾nej vstupnej mnoÅ¾ine prÃ¡ve ten ich program pracuje presne o 0,7223 sekundy rÃ½chlejÅ¡ie, ako ostatnÃ© programy, ktorÃ© navyÅ¡e zoÅ¾erÃº o celÃ© dva megabajty pamÃ¤te viac."
76,207,0.494,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"3.3.9 PrÃ­klad. V prÃ­klade 3.2.6 sme uvaÅ¾ovali o Å¾iarivkÃ¡ch, ktorÃ½ch Å¾ivotnosÅ¥ modelovala veliÄina s rozdelenÃ­m Exp( ), kde = 0.01. Predpokladajme, Å¾e v prÃ­stroji mÃ¡me jednu Å¾iarivku a naviac sme si pribalili jednu nÃ¡hradnÃº. AkÃ¡ je pravdepodobnosÅ¥ toho, Å¾e poÄas 300 hodÃ­n prÃ¡ce s prÃ­strojom nebudeme maÅ¥ problÃ©m so Å¾iarivkou? RieÅ¡enie. Zrejme ak modelujÃº Å¾ivotnosti Å¾iariviek, tak ~ Exp(0.01) a sÃº nezÃ¡vislÃ©. Preto podÄ¾a bodu 3 vety 3.3.7 pre sÃºÄet + platÃ­: + ~ Erl(2, 0.01). Pre hustotu rozdelenia Erl(2, ) mÃ¡me (x) = x exp(- x), a preto P( +"
135,729,0.493,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"â ak je vele na zaiatku priradenÃ½ zdroj, ktorÃ©ho kvalita je vysokÃ¡ (naprÃ­klad 95 %), napriek tomu existuje pravdepodobnos (hoci iba 5 %), Å¾e bude zlÃ¡kanÃ¡ inou velou. V tomto prÃ­pade ak vela tento zdroj opustÃ­, neexistuje moÅ¾nos nÃ¡vratu k tomuto zdroju. ExistujÃº iba dva spÃ´soby, ako sa vela dostane na zdroj a to na zÃ¡klade poiatonÃ©ho priradenia, alebo v prÃ­pade zlÃ¡kania inou velou. TÃ½mto sa mÃ´Å¾e vemi kvalitnÃ½ zdroj sta neprÃ­stupnÃ½m pre celÃ© spoloenstvo. HlavnÃ© poÅ¾iadavky pri vytvÃ¡ranÃ­ modelu boli:"
190,211,0.493,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Na zÃ¡ver si teda poloÅ¾me otÃ¡zku: sÃº plÃ¡ny na to, aby sa poruÅ¡ovali? sa nemeria podÄ¾a DovolÃ­m si odpovedaÅ¥ nepriamo, a to prÃ­kladom z [1], ktorÃ½ akoby bol dodrÅ¾iavania priam stvorenÃ½ pre tento ÃºÄel. plÃ¡nov, ale podÄ¾a Rozsiahly a prepracovanÃ½ plÃ¡n pre vylodenie Spojencov s krycÃ­m dosahovania cieÄ¾ov. oznaÄenÃ­m Omaha Beach na severnom pobreÅ¾Ã­ FrancÃºzska dÅa 6. jÃºna 1944 vÃ´bec nepredpokladal a ani nekontroloval priebeh samotnÃ©ho vylodenia. V skutoÄnosti takmer niÄ neprebiehalo podÄ¾a plÃ¡nu. Nakoniec sa ale Nemcom toto Ãºzemie ubrÃ¡niÅ¥ nepodarilo a zÃ¡mer Spojencov ho obsadiÅ¥ (a neskÃ´r vyhraÅ¥ samotnÃº 2. svetovÃº vojnu) vyÅ¡iel. Ak posudzujeme misiu Omaha Beach podÄ¾a plÃ¡nu, tak Ãºplne zlyhala. Ale ak ju posudzujeme podÄ¾a cieÄ¾ov, tak ide o jasnÃ½ Ãºspech. SoftvÃ©rovÃ© projekty sÃ­ce nie sÃº takÃ© nepredvÃ­dateÄ¾nÃ© ako vojenskÃ© operÃ¡cie, ale predsa majÃº s nimi nieÄo spoloÄnÃ©. Je to skutoÄnosÅ¥, Å¾e aj plÃ¡ny v softvÃ©rovom inÅ¾inierstve do istej miery ânepreÅ¾ijÃºâ kontakt so samotnÃ½m projektom i realitou. To vÅ¡ak vÃ´bec nevadÃ­, pretoÅ¾e hlavnÃ½m cieÄ¾om plÃ¡nov je poskytnÃºÅ¥ takÃ© smerovanie a rozdelenie dostupnÃ½ch zdrojov projektu, ktorÃ© predstavuje jednu z (viacerÃ½ch) moÅ¾nÃ½ch ciest vedÃºcich k ÃºspeÅ¡nÃ©mu dosiahnutiu vytÃ½ÄenÃ½ch cieÄ¾ov. PlÃ¡ny boli poruÅ¡ovanÃ©, sÃº poruÅ¡ovanÃ© a budÃº poruÅ¡ovanÃ©. Nesmieme vÅ¡ak zabÃºdaÅ¥, Å¾e Ãºspech projektov sa nemeria podÄ¾a (bezhlavÃ©ho) dodrÅ¾iavania plÃ¡nov, ale podÄ¾a dosiahnutia cieÄ¾ov projektu v rÃ¡mci podmienok a ohraniÄenÃ­, ktorÃ© boli naÅ stanovenÃ©."
240,198,0.493,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"na konkrÃ©tnu implementÃ¡ciu. MÃ´Å¾eme takto vytvoriÅ¥ âvÅ¡eobecnÃ©â funkcie, ktorÃ© pri vykonÃ¡vanÃ­ zavolajÃº pomocnÃ© funkcie prostrednÃ­ctvom prÃ­sluÅ¡nÃ©ho smernÃ­ku na funkciu, ktorÃ½ dostali ako argument. TÃºto vÅ¡eobecnÃº implementÃ¡ciu potom moÅ¾no pouÅ¾iÅ¥ s rÃ´znymi implementÃ¡ciami pomocnÃ½ch funkciÃ­ predpÃ­sanÃ©ho typu. VyuÅ¾itie tohto prÃ­stupu zniÅ¾uje previazanosÅ¥ medzi rÃ´znymi ÄasÅ¥ami kÃ³du. VyuÅ¾itÃ­m smernÃ­ka na funkciu je napr. moÅ¾nÃ© v jazyku C implementovaÅ¥ zauÅ¾Ã­vanÃ© nÃ¡vrhovÃ© vzory Strategy (stratÃ©gia) a Observer (pozorovateÄ¾), resp. posielanie sprÃ¡v vzorom Publish-subscribe. UvaÅ¾ujme nasledujÃºcu vÅ¡eobecnÃº funkciu tabulka(), ktorÃ¡ pre danÃº aritmetickÃº operÃ¡ciu vypÃ­Å¡e vÃ½sledkovÃº tabuÄ¾ku veÄ¾kosti do n, priÄom ÄÃ­sla sÃº zarovnanÃ© na k miest:"
276,67,0.493,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"Router# erase startup-config Router# erase nvram: PreferovanÃ½ je prvÃ½ prÃ­kaz, lebo pri pouÅ¾Ã­vanÃ­ druhÃ©ho sa nÃ¡m jednoducho mÃ´Å¾e staÅ¥, Å¾e namiesto nvram: zadÃ¡me flash: a vymaÅ¾eme sÃºbor operaÄnÃ©ho systÃ©mu. KonfigurÃ¡cia hesiel, konzolovÃ©ho aj vzdialenÃ©ho prÃ­stupu na smerovaÄ je rovnakÃ¡ ako v prÃ­pade prepÃ­naÄa. Rozdiel je v tom, Å¾e IP adresu na smerovaÄi nastavujeme priamo na fyzickÃ© rozhranie a toto rozhranie treba zapnÃºÅ¥ (predvolene sÃº rozhrania smerovaÄa vypnutÃ©), napr.:"
236,32,0.492,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"PoÄas pÃ­sania dokumentu pravdepodobne nÃ¡jdete miesta, kde samotnÃ½ zÃ¡kladnÃ½ LATEX nemÃ´Å¾e vyrieÅ¡it vÃ¡Å¡ problÃ©m. KeÄ chcete do vÃ¡Å¡ho dokumentu vloÅ¾iÅ¥ grafiku, farebnÃ½ text alebo zdrojovÃ½ text zo sÃºboru, musÃ­te zvÃ¤ÄÅ¡iÅ¥ schopnosti LATEXu. TakÃ©to rozÅ¡Ã­renia sa nazÃ½vajÃº balÃ­ky makier. Tieto balÃ­ky sa aktivujÃº pomocou prÃ­kazu \usepackage[voÄ¾by]{balÃ­k }"
184,25,0.492,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"PrÃ¡ca softvÃ©rovÃ©ho architekta nespoÄÃ­va len vo vytvorenÃ­ architektÃºry. PodÄ¾a SEI 1 musÃ­ softvÃ©rovÃ½ architekt Äalej: Â zdokumentovaÅ¥ a komunikovaÅ¥ vytvorenÃº architektÃºru; Â uistiÅ¥ sa, Å¾e ju kaÅ¾dÃ½ pouÅ¾Ã­va a to sprÃ¡vnym spÃ´sobom; Â uistiÅ¥ sa, Å¾e vytvÃ¡ranÃ½ softvÃ©r je v sÃºlade s architektÃºrou; Â uistiÅ¥ sa, Å¾e manaÅ¾ment architektÃºre rozumie na poÅ¾adovanej Ãºrovni detailnosti; Â rieÅ¡iÅ¥ technickÃ© problÃ©my; Â rieÅ¡iÅ¥ nezhody a robiÅ¥ kompromisy; Â uistiÅ¥ sa, Å¾e sa pouÅ¾Ã­vajÃº sprÃ¡vne modelovacie techniky, aby sa vedelo v dostatoÄnom predstihu, Äi sa dosiahnu poÅ¾iadavky na kvalitu ako je vÃ½konnosÅ¥; Â spolupodieÄ¾aÅ¥ sa na problÃ©moch ako je vÃ½ber konkrÃ©tnych nÃ¡strojov a prostredÃ­; Â uistiÅ¥ sa, Å¾e architektÃºra je sprÃ¡vna z hÄ¾adiska nasadenia, ÃºdrÅ¾by a ÄalÅ¡ieho vÃ½voja systÃ©mu; Â udrÅ¾iavaÅ¥ morÃ¡lku vo vÃ½vojom tÃ­me; Â chÃ¡paÅ¥ a plÃ¡novaÅ¥ vÃ½vojovÃ© smery aplikÃ¡cie, plÃ¡novaÅ¥ nasadenie novÃ½ch technolÃ³giÃ­; Â vykonÃ¡vaÅ¥ manaÅ¾ment rizÃ­k sÃºvisiacich s architektÃºrou. UvedenÃ½ zoznam nie je kompletnÃ½ a zrejme ani nikdy nemÃ´Å¾e byÅ¥, keÄÅ¾e kaÅ¾dÃ½ mÃ¡ svoje vlastnÃ© oÄakÃ¡vania a definÃ­cie prÃ¡ce softvÃ©rovÃ©ho architekta. Zo zoznamu sa vÅ¡ak dajÃº abstrahovaÅ¥ zÃ¡kladnÃ© zruÄnosti softvÃ©rovÃ©ho architekta v tÃ½chto Å¡tyroch oblastiach: Â VzÅ¥ahy â architekt hrÃ¡ vÃ½znamnÃº rolu vo viacerÃ½ch vzÅ¥ahoch v rÃ¡mci spoloÄnosti ako aj navonok smerom k zÃ¡kaznÃ­kovi. Äasto sa zÃºÄastÅuje stretnutÃ­ so zÃ¡kaz1"
393,518,0.491,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"ObrÃ¡zok 9-15. Diagram tried predstavenÃ©ho rieÅ¡enia pre transparentnÃº skladbu. OtÃ¡zka na druhÃº stranu znie, Äi je vÃ´bec moÅ¾nÃ© znovupouÅ¾iÅ¥ Äasti vzoru bez fyzickÃ©ho rozdelenia tried spÃ¡jajÃºcich vÅ¡eobecnÃº a domÃ©novo zÃ¡vislÃº ÄasÅ¥ vzoru? Ako uvidÃ­me v Äasti 9.6, je to moÅ¾nÃ© s pomocou Å¡peciÃ¡lnych rozÅ¡Ã­renÃ­. TÃ¡to ÄasÅ¥ mala za cieÄ¾ poukÃ¡zaÅ¥ na netriviÃ¡lnosÅ¥ realizÃ¡cie dekompozÃ­cie vzoru pomocou Å¡tandardnÃ½ch prostriedkov jazyka C++. NavyÅ¡e sa podarilo poukÃ¡zaÅ¥ na nutnosÅ¥ prijatia poruÅ¡enÃ­ v obmedzeniach modelu rolÃ­ v kontexte nÃ¡vrhovÃ©ho vzoru Composite s cieÄ¾om oddeliÅ¥ vÅ¡eobecnÃº ÄasÅ¥ od domÃ©novo zÃ¡vislej Äasti vzoru (napr. v podobe obsadenia role Component triedami ConcreteComponent a CommonComponent, ÄÃ­m sa poruÅ¡ili obmedzenia na poÄet tried obsadenÃ½ch v danej roli)."
111,67,0.491,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Ãlohy Ãlohy by mali reprezentovaÅ¥ prÃ­pady pouÅ¾itia vaÅ¡ej webovej strÃ¡nky. SprÃ¡vne napÃ­sanie Ãºloh je nevyhnutnÃ©, aby sa respondenti sprÃ¡vali Äo najprirodzenejÅ¡ie. Chcete, aby respondenti interagovali so stromom rovnako ako v reÃ¡lnej situÃ¡cii napr. s navigaÄnÃ½m menu. SprÃ¡vne odpovede pre jednotlivÃ© Ãºlohy si urÄÃ­te vy. Ãloha mÃ´Å¾e maÅ¥ aj viac ako jednu sprÃ¡vnu odpoveÄ. Ako sprÃ¡vne odpovede pre Ãºlohy je moÅ¾nÃ© vybraÅ¥ len obsahovÃ© (listovÃ©) uzly. ZÃ­skajte ÄalÅ¡ie informÃ¡cie o tom, preÄo nie je moÅ¾nÃ© vybraÅ¥ nadradenÃ© uzly ako sprÃ¡vne odpovede [5]. ZvÃ¡Å¾te ciele, ktorÃ© ste si stanovili pre testovanie a pouÅ¾ite ich ako zÃ¡klad pri formulovanÃ­ Ãºloh. Povedzme, Å¾e mÃ¡me menu internetovÃ©ho obchodu a jednÃ½m z vaÅ¡ich cieÄ¾ov je zistiÅ¥, Äi vaÅ¡i zÃ¡kaznÃ­ci nÃ¡jdu formulÃ¡r na vrÃ¡tenie peÅazÃ­. Ãloha, ktorÃº formulujete pre tento cieÄ¾ by mohla znieÅ¥: âJedna z poloÅ¾iek vo vaÅ¡ej objednÃ¡vke bola poÅ¡kodenÃ¡. NÃ¡jdite, kde by ste mohli tento problÃ©m vyrieÅ¡iÅ¥.â VÃ½sledky pre tÃºto Ãºlohu potom odpovedia na otÃ¡zky, ako naprÃ­klad: â¢ KoÄ¾ko Ä¾udÃ­/respondentov ÃºspeÅ¡ne naÅ¡lo formulÃ¡r na vrÃ¡tenie peÅazÃ­? â¢ Ako priamo si respondenti vybrali svoje odpovede? BlÃºdili? Ako veÄ¾mi? â¢ Ako dlho im trvalo nÃ¡jsÅ¥ formulÃ¡r na vrÃ¡tenie peÅazÃ­? â¢ AkÃ½mi cestami v ponuke sa respondenti vydali, aby naÅ¡li formulÃ¡r na vrÃ¡tenie peÅazÃ­? Ak napÃ­Å¡ete svoje Ãºlohy tak, aby podrobne pokrÃ½vali rÃ´zne oblasti, ktorÃ© chcete zlepÅ¡iÅ¥, Ãºdaje, ktorÃ© potom zÃ­skate, vÃ¡m ukÃ¡Å¾u, do akej miery sa vÃ¡m darÃ­ splniÅ¥ vaÅ¡e ciele. Ak len 50% respondentov naÅ¡lo formulÃ¡r na vrÃ¡tenie peÅazÃ­ a zvyÅ¡nÃ½ch 50% ho najskÃ´r hÄ¾adalo v inÃ½ch Äastiach menu, mÃ´Å¾eme pokojne povedaÅ¥, Å¾e tieto metriky dokazujÃº, Å¾e formulÃ¡r na vrÃ¡tenie peÅazÃ­ potrebuje premiestnenie. Chcete, aby Ãºlohy jemne nabÃ¡dali respondentov k tomu, aby sa sprÃ¡vali ako v skutoÄnej situÃ¡cii, ktorÃ¡ mÃ´Å¾e nastaÅ¥ na vaÅ¡ej webovej strÃ¡nke. ÄÃ­tanie Ãºloh by malo respondentom pomÃ´cÅ¥ dostaÅ¥ sa do sprÃ¡vneho myslenia. DobrÃ½m spÃ´sobom ako to dosiahnuÅ¥, je prezentovaÅ¥ Ãºlohy ako prÃ­behy (angl. user stories) s pouÅ¾itÃ­m jednoduchÃ©ho a neformÃ¡lneho jazyka, ktorÃ½ nastavÃ­ situÃ¡ciu a podnieti respondentov k hÄ¾adaniu rieÅ¡enia. NaprÃ­klad namiesto: âVyberte, kde si myslÃ­te, Å¾e nÃ¡jdete prevÃ¡dzkovÃº dobu poÅ¡ty.â by ste mohli napÃ­saÅ¥: âChceli by ste poslaÅ¥ balÃ­k poÅ¡tou, ale neviete, kedy je poÅ¡ta otvorenÃ¡. Kde by ste hÄ¾adali informÃ¡cie, ktorÃ© by vÃ¡m pomohli?â Ãloha poskytuje respondentom kontext a vÃ½znam, ktorÃ½ viac sÃºstredÃ­ ich pozornosÅ¥ a nÃºti ich hlbÅ¡ie spracovaÅ¥ informÃ¡cie, namiesto toho, aby im dÃ¡vala presnÃ© pokyny, ako vyrieÅ¡iÅ¥ Ãºlohu."
369,52,0.49,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"Obr. 1.12. NormalizÃ¡cia nÃ¡sobnosti mnoho-mnoho do prvej normÃ¡lnej formy PoÅ¾iadavka na reprezentÃ¡ciu Ãºdajov v prvej normÃ¡lnej forme vychÃ¡dzala tak z potreby jednoduchÃ©ho matematickÃ©ho modelu pre relaÄnÃ© databÃ¡zy ako aj efektÃ­vnosti implementÃ¡cie v reÃ¡lnych relaÄnÃ½ch databÃ¡zach. TakÃ¡to poÅ¾iadavka nie je uÅ¾ v sÃºÄasnosti kladenÃ¡ na vnÃºtropamÃ¤Å¥ovÃ© objekty (hodnotou atribÃºtu mÃ´Å¾e byÅ¥ kolekcia objektov) ani na objektovo orientovanÃ© databÃ¡zy (ktorÃ© sÃº vÅ¡ak pomerne zriedkavÃ©). PrvÃ¡ normÃ¡lna forma sa nemusÃ­ striktne dodrÅ¾iavaÅ¥ ani pri dÃ¡tovom modelovanÃ­ v etape analÃ½zy. NedodrÅ¾iava sa pri âhrubÅ¡omâ modelovanÃ­ v prvÃ½ch fÃ¡zach tejto etapy. Na druhej strane, ak vÃ½slednÃ½ model etapy analÃ½zy nie je (v prevaÅ¾nej vÃ¤ÄÅ¡ine) v prvej normÃ¡lnej forme, v etape nÃ¡vrhu bude zvyÄajne potrebnÃ© spraviÅ¥ jeho normalizÃ¡ciu, pri ktorej vzniknÃº novÃ© triedy. Ak takÃºto normalizÃ¡ciu robia nÃ¡vrhÃ¡ri a nie analytici, nÃ¡zvy tried nebÃ½vajÃº vÅ¾dy peknÃ©, Äo nÃ¡sledne sÅ¥aÅ¾uje ÄitateÄ¾nosÅ¥ modelu. Z uvedenÃ©ho dÃ´vodu sa zvyÄajne dÃ¡tovÃ© modely normalizujÃº uÅ¾ v etape analÃ½zy a tento zvyk budeme aÅ¾ na niekoÄ¾ko vÃ½nimiek dodrÅ¾iavaÅ¥ aj my v tejto uÄebnici. (VÃ½nimkami budÃº najmÃ¤ relÃ¡cie na metaÃºrovni, ktorÃ½ch normalizÃ¡cia by model skÃ´r zne-prehÄ¾adnila.)"
40,47,0.489,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Vzorkovacia fÃ¡za ZaÄneme z Ä¾ubovoÄ¾nÃ©ho poÄiatoÄnÃ©ho stavu neurÃ³novej siete x (0) a vypoÄÃ­tame novÃ½ stav siete pre kaÅ¾dÃº vstupnÃº vzorku n = 0,..., nmax na zÃ¡klade vzorca:    x (n + 1) = f (W in u teach (n + 1) + Wx (n)) NÃ¡sledne je dÃ´leÅ¾itÃ© zvoliÅ¥ si vhodnÃ½ ÄasovÃ½ okamih nmin , po ktorom predpokladÃ¡me, Å¾e uÅ¾ doÅ¡lo k vymytiu vplyvu poÄiatoÄnej inicializÃ¡cie siete. Po tomto okamihu je uÅ¾ stav neurÃ³novej siete urÄovanÃ½ iba predchÃ¡dzajÃºcimi stavmi a vstupmi neurÃ³novej siete."
43,439,0.488,Objektovo orientovanÃ© programovanie v C++,"Vektor je najuniverzÃ¡lnejÅ¡ou dÃ¡tovou Å¡truktÃºrou. Ide vlastne o jednorozmernÃ© dynamickÃ© pole, ktorÃ© mÃ´Å¾e obsahovaÅ¥ prvky Ä¾ubovoÄ¾nÃ©ho typu. VeÄ¾kosÅ¥ tohto poÄ¾a je premenlivÃ¡, to znamenÃ¡, Å¾e sa mÃ´Å¾e zmeniÅ¥ kedykoÄ¾vek, keÄ je to potrebnÃ©. Nie je teda napevno danÃ¡ v Äase kompilÃ¡cie, ale ani poÄiatoÄnou alokÃ¡ciou, ako to je charakteristickÃ© pre dynamickÃ© pole alokovanÃ© pomocou operÃ¡tora new[ ]. To je veÄ¾kou vÃ½hodou tejto Å¡truktÃºry â mÃ´Å¾eme do nej pridÃ¡vaÅ¥ prvky prakticky bez obmedzenia (pravdaÅ¾e, obmedzenie je danÃ© fyzickÃ½mi moÅ¾nosÅ¥ami operaÄnej pamÃ¤te) a jej veÄ¾kosÅ¥ sa automaticky prispÃ´sobÃ­ tak, aby sa do nej novÃ© prvky zmestili. PrÃ¡ca s tÃ½mto poÄ¾om sa veÄ¾mi podobÃ¡ na prÃ¡cu s poÄ¾ami, ktorÃ© uÅ¾ poznÃ¡me. Ide o pole s nÃ¡hodnÃ½m prÃ­stupom, Äo znamenÃ¡, Å¾e mÃ´Å¾eme priamo pristupovaÅ¥ k Ä¾ubovoÄ¾nÃ©mu prvku, pouÅ¾iÅ¥ alebo zmeniÅ¥ jeho hodnotu. Tento nÃ¡hodnÃ½ prÃ­stup je rÃ½chly. Äo je vÅ¡ak pomerne pomalÃ©, je vkladanie alebo vymazÃ¡vanie prvku do/z poÄ¾a. Tak ako pri inÃ½ch poliach, s ktorÃ½mi sme sa stretli, novÃ½ prvok mÃ´Å¾eme vloÅ¾iÅ¥ len tak, Å¾e preÅ uvoÄ¾nÃ­me miesto tÃ½m, Å¾e vÅ¡etky prvky za vybranÃ½m miestom poposÃºvame o jedno miesto Äalej. RÃ½chle je len vkladanie na koniec, a preto je to aj najÄastejÅ¡Ã­ spÃ´sob, ako sa do vektora novÃ© prvky vkladajÃº. Rovnako je to aj s vymazanÃ­m prvku. VoÄ¾nÃ© miesto sa zaplnÃ­ len tak, Å¾e vÅ¡etky prvky za nÃ­m posunieme o jedno miesto spÃ¤Å¥. RÃ½chle je opÃ¤Å¥ len vymazanie poslednÃ©ho prvku. Tieto princÃ­py sÃº znÃ¡zornenÃ© na obr. 10.1."
240,504,0.488,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"3. NadviaÅ¾eme na rieÅ¡enie predchÃ¡dzajÃºcej Ãºlohy (2) a namiesto cyklu for v riadku 8 pouÅ¾ijeme nasledujÃºci cyklus: while (--n) 4. PostupnosÅ¥ ÄÃ­sel na vstupe by sme si museli celÃº zapamÃ¤taÅ¥ v pamÃ¤ti do poÄ¾a. PriebeÅ¾ne by sme si urÄovali index maximÃ¡lneho ÄÃ­sla a pri vÃ½pise vÃ½sledku by sme vypÃ­sali hodnotu ÄÃ­sla na indexe max. UpravenÃ½ program uvÃ¡dzame na konci. VÅ¡imnime si, Å¾e okrem vytvorenia poÄ¾a potrebnej veÄ¾kosti sme museli upraviÅ¥ hranice cyklov, pretoÅ¾e polia sÃº v jazyku C indexovanÃ© od 0 do N-1. ReprezentÃ¡cia vÃ½sledku v tomto cviÄenÃ­ je pre tÃºto Ãºlohu nevÃ½hodnÃ¡, pretoÅ¾e vÃ½slednÃ½ program potrebuje pre vÃ½poÄet vÃ½sledku vÃ½znamne viac pamÃ¤ti. RieÅ¡enie bez naÄÃ­tania vstupnej postupnosti do pamÃ¤te je teda vÃ½razne efektÃ­vnejÅ¡ie."
190,74,0.488,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Äasto sa pouÅ¾Ã­vajÃº aj nÃ¡zvy funkÄnÃ½ a dysfunkÄnÃ½ konflikt. FunkÄnÃ½ konflikt, ktorÃ½ prinÃ¡Å¡a pozitÃ­vne vÃ½sledky mÃ´Å¾e Ä¾ahko eskalovaÅ¥ do dysfunkÄnÃ©ho konfliktu, ktorÃ½ rozruÅ¡Ã­ vzÅ¥ahy, naruÅ¡Ã­ pracovnÃ½ proces. Tieto poznatky nÃ¡m dÃ¡vajÃº silnÃº motivÃ¡ciu, preÄo by mal byÅ¥ konflikt vÅ¾dy riadenÃ½."
135,384,0.488,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"5.3.1 Vzorovo orientovanÃ¡ analÃ½za a nÃ¡vrh PrÃ¡ca Vzorovo orientovanÃ¡ analÃ½za a nÃ¡vrh (Pattern Oriented Analysis and Design - POAD) [38] [39] predstavuje systematickÃ½ prÃ­stup ku kompozÃ­ciÃ­ nÃ¡vrhovÃ½ch vzorov. VychÃ¡dza pritom z myÅ¡lienky, Å¾e zÃ¡kladnÃ½mi stavebnÃ½mi blokmi softvÃ©ru by mali by spolupracujÃºce inÅ¡tancie nÃ¡vrhovÃ½ch vzory, ktorÃ© dokÃ¡Å¾u poskytnÃº funkne overenÃ© rieÅ¡enia. Aby sa zjednoduÅ¡il proces vÃ½voja obdobnÃ½m spÃ´sobom, prÃ¡ca POAD predstavuje metodolÃ³giu, ktorÃ¡ vedie vÃ½vojÃ¡rov od poiatonÃ½ch analÃ½z k optimalizovanÃ©mu OO nÃ¡vrhu, ktorÃ½ je zaloÅ¾enÃ½ na pouÅ¾itÃ­ kooperujÃºcich inÅ¡tanciÃ¡ch nÃ¡vrhovÃ½ch vzorov. V rÃ¡mci POAD sa pozerÃ¡me na nÃ¡vrhovÃ½ vzor ako na komponent nÃ¡vrhu, ktorÃ½ je s ostatnÃ½mi komponentmi i inÃ½mi elementmi nÃ¡vrhu spojenÃ½ pomocou rozhranÃ­. Vzor mÃ¡ teda definovanÃ© rozhrania, pomocou ktorÃ½ch mÃ´Å¾e spolupracova s inÃ½mi vzormi. TakÃ½ prÃ­stup so sebou prinÃ¡Å¡a nasledujÃºce vÃ½hody:"
205,137,0.487,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","E predstavuje mnoÅ¾inu vÅ¡etkÃ½ch orientovanÃ½ch hrÃ¡n a epq predstavuje prepojenie zo strÃ¡nky p na strÃ¡nku q. Podobne ako v algoritme PageRank, aj algoritmus HITS vyÅ¾aduje vÃ½poÄet vo viacerÃ½ch iterÃ¡ciÃ¡ch, aÅ¾ kÃ½m hodnoty centier a autorÃ­t neskonvergujÃº. ProblÃ©my JednÃ½m z problÃ©mov oproti algoritmu PageRank je, Å¾e algoritmus HITS nikdy nepouÅ¾ili vo vÃ¤ÄÅ¡om rozsahu, pretoÅ¾e IBM naÅ vlastnÃ­ patent. NavyÅ¡e algoritmus HITS je zÃ¡vislÃ½ na dopyte, takÅ¾e sa vykonÃ¡va aÅ¾ po zadanÃ­ dopytu, nie poÄas indexovania, Äo mÃ¡ znaÄnÃ½ dopad na jeho ÄasovÃº efektÃ­vnosÅ¥ pri spracovanÃ­ dopytu."
205,235,0.486,"Weboveda: vÃ½chodiskÃ¡, predmet, metÃ³dy","14.2 HierarchickÃ© metÃ³dy HierarchickÃ© metÃ³dy [2] vytvÃ¡rajÃº zhluky na zÃ¡klade hierarchickej dekompozÃ­cie mnoÅ¾iny vstupnÃ½ch Ãºdajov. Delia sa na rozdeÄ¾ovacie a zluÄovacie v zÃ¡vislosti od smeru dekompozÃ­cie. RozdeÄ¾ovacie metÃ³dy alebo tieÅ¾ metÃ³dy zhora nadol najprv zaradia vÅ¡etky objekty do jednÃ©ho zhluku. Potom postupne rozdeÄ¾ujÃº tento zhluk na stÃ¡le menÅ¡ie zhluky. Naopak, zluÄovacie metÃ³dy alebo tieÅ¾ metÃ³dy zdola nahor, zaradia kaÅ¾dÃ½ objekt do vlastnÃ©ho zhluku a potom spÃ¡jajÃº zhluky, ktorÃ© sÃº si najpodobnejÅ¡ie. Pri obidvoch smeroch sa dekompozÃ­cia konÄÃ­ v momente splnenia ukonÄovacej podmienky. NevÃ½hodou hierarchickÃ½ch metÃ³d je, Å¾e ak raz rozdelÃ­me alebo spojÃ­me nejakÃ© zhluky, nemoÅ¾no tento krok vrÃ¡tiÅ¥ spÃ¤Å¥. ÄalÅ¡ou nevÃ½hodou je, Å¾e tÃ¡to metÃ³da je vÃ½poÄtovo veÄ¾mi nÃ¡roÄnÃ¡. Preto je niekedy vhodnÃ© pouÅ¾iÅ¥ alternatÃ­vne metÃ³dy, ako naprÃ­klad metÃ³da K-priemerov. Na obrÃ¡zku 56 vidÃ­me zaradenie podobnÃ½ch poloÅ¾iek do zhlukov pouÅ¾itÃ­m hierarchickÃ©ho zhlukovania."
43,150,0.486,Objektovo orientovanÃ© programovanie v C++,"Ak uÅ¾ rezervovanÃ© miesto v pamÃ¤ti nepotrebujeme, je sprÃ¡vne ho uvoÄ¾niÅ¥. Aby sme zabezpeÄili optimÃ¡lne fungovanie nÃ¡Å¡ho programu alebo inÃ½ch programov, ktorÃ© tieÅ¾ potrebujÃº miesto v pamÃ¤ti, urobÃ­me najlepÅ¡ie, ak miesto uvoÄ¾nÃ­me hneÄ v okamihu, keÄ prestane byÅ¥ potrebnÃ©. Na uvoÄ¾nenie pamÃ¤Å¥ovÃ©ho miesta â dealokÃ¡ciu â slÃºÅ¾ia operÃ¡tory delete a delete[ ]. Ak sme mali alokovanÃ© miesto pre jednu premennÃº nejakÃ©ho typu na adrese uchovanej v premennej smernik, toto miesto uvoÄ¾nÃ­me takto delete smernik;"
236,46,0.486,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"VÃ¤ÄÅ¡inou sa knihy tlaÄia tak, Å¾e kaÅ¾dÃ½ riadok mÃ¡ rovnakÃº dÄºÅ¾ku. LATEX lÃ¡me riadky a vkladÃ¡ medzery medzi slovÃ¡ tak, aby dosiahol optimÃ¡lny vzhÄ¾ad celÃ©ho odseku. V prÃ­pade, Å¾e je to nutnÃ©, slovÃ¡, ktorÃ© sa nezmestia pohodlne do riadku, rozdelÃ­. Od druhu dokumentu zÃ¡visÃ­, ako sÃº odseky sÃ¡dzanÃ©. NormÃ¡lne je prvÃ½ riadok odseku pevne stanovenÃ½ a medzi dvoma odsekmi nie je Å¾iadne voÄ¾nÃ© miesto. Viac informÃ¡ciÃ­ nÃ¡jdete v kapitole 5.3.2. V Å¡peciÃ¡lnych prÃ­padoch mÃ´Å¾eme prikÃ¡zaÅ¥ LATEXu, aby zlomil riadok (ukonÄil ho) v danom mieste: \\ alebo \newline"
40,27,0.485,UmelÃ¡ inteligencia a kognitÃ­vna veda II,"Echo State neurÃ³novÃ© siete sa teda na rozdiel od klasickÃ½ch sietÃ­ nepokÃºÅ¡ajÃº dosiahnuÅ¥ poÅ¾adovanÃ© sprÃ¡vanie (dynamiku) adaptÃ¡ciou vÃ¡h relatÃ­vne malÃ©ho poÄtu neurÃ³nov, ale vyuÅ¾Ã­vajÃº dynamiku mohutnej (nÃ¡hodne inicializovanej) skrytej vrstvy na extrahovanie zaujÃ­mavÃ½ch vlastnostÃ­ zo vstupnej postupnosti. Ãlohou vÃ½stupnÃ½ch neurÃ³nov je transformovaÅ¥ tieto vlastnosti (aktivity neurÃ³nov v dynamickom rezervoÃ¡ri) do poÅ¾adovanÃ©ho vÃ½stupu. Proces extrahovania zaujÃ­mavÃ½ch vlastnostÃ­ dynamickÃ½m rezervoÃ¡rom je znÃ¡zornenÃ½ na obr. 3. VstupnÃ½ signÃ¡l sa privedie prostrednÃ­ctvom vstupnÃ½ch neurÃ³nov do skrytej vrstvy, kde nÃ¡sledne dÃ´jde k interakcii veÄ¾kÃ©ho poÄtu nÃ¡hodne poprepÃ¡janÃ½ch neurÃ³nov. Takto je vÃ½slednÃ¡ odozva dynamickÃ©ho rezervoÃ¡ra v porovnanÃ­ so vstupnÃ½m signÃ¡lom podstatne informaÄne âbohatÅ¡iaâ. V dynamickom rezervoÃ¡ri sa typicky nachÃ¡dzajÃº stovky neurÃ³nov a ich aktivity reprezentujÃº obraz vstupnÃ©ho signÃ¡lu v mnohorozmernom stavovom priestore, ktorÃ½ zÃ¡roveÅ tvorÃ­ priestor zaujÃ­mavÃ½ch vlastnostÃ­ (feature space). Aj v prÃ­pade klasickÃ½ch prÃ­stupov k trÃ©novaniu doprednÃ½ch Äi rekurentnÃ½ch sietÃ­ mÃ´Å¾eme hovoriÅ¥ o priestore zaujÃ­mavÃ½ch vlastnostÃ­, ktorÃ½ tvoria aktivity skrytej, resp. rekurentnej vrstvy. Ten mÃ¡ vÅ¡ak, ako uÅ¾ bolo spomenutÃ©, zvyÄajne menÅ¡Ã­ poÄet dimenziÃ­ (typicky desiatky neurÃ³nov). KlasickÃ© prÃ­stupy sa snaÅ¾ia trÃ©novanÃ­m zmeniÅ¥ rozloÅ¾enie stavov (aktivity skrytÃ½ch neurÃ³nov) v tomto priestore takÃ½m spÃ´sobom, aby boli vÃ½stupnÃ© neurÃ³ny schopnÃ© produkovaÅ¥ poÅ¾adovanÃ© vÃ½stupy [5]. Existuje aj prÃ­stup, veÄ¾mi podobnÃ½ Echo State neurÃ³novÃ½m sieÅ¥am, ktorÃ½ sa volÃ¡ âLiquid State Machineâ a bol nezÃ¡visle vynÃ¡jdenÃ½ a skÃºmanÃ½ Wolfgangom Maassom (viac v [6, 1])."
195,67,0.484,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"Sledovanie interakciÃ­ programÃ¡tora JednotlivÃ© systÃ©my sa odliÅ¡ujÃº ÃºrovÅou podrobnosti zbieranÃ½ch dÃ¡t, ich umiestnenia lokÃ¡lne alebo vzdialene, alebo aj podporovanÃ½mi zdrojmi dÃ¡t. ÃroveÅ podrobnosti dÃ¡t vplÃ½va na efektÃ­vnosÅ¥ zbierania dÃ¡t a moÅ¾nosti ich pouÅ¾itia. - Mylyn â verejne dostupnÃ© rozÅ¡Ã­renie pre vÃ½vojovÃ© prostredie Eclipse8. LokÃ¡lny logovaÄ uchovÃ¡va agregovanÃ© dÃ¡ta o prÃ¡ci programÃ¡tora so sÃºbormi zdrojovÃ©ho kÃ³du, ktorÃ© je moÅ¾nÃ© pridaÅ¥ k rieÅ¡eniam Ãºloh v systÃ©me pre sprÃ¡vu Ãºloh v podobe kontextu Ãºlohy. Kontext Ãºlohy je vÃ½hodnÃ© pouÅ¾iÅ¥ pri nÃ¡vrate k prÃ¡ci, alebo jej prevzatÃ­ po inom programÃ¡torovi. - PerConIK â vÃ½skumnÃ½ projekt zameranÃ½ na zbieranie dÃ¡t, ich spracovanie a vyhodnotenie9. Oproti Mylyn sa vyznaÄuje zbieranÃ­m podrobnejÅ¡Ã­ch dÃ¡t, a to ako z prostredia Eclipse, tak aj Microsoft Visual Studio do vzdialenÃ©ho centrÃ¡lneho ÃºloÅ¾iska. Spomedzi vÃ½skumnÃ½ch vÃ½stupov projektu mÃ´Å¾eme spomenÃºÅ¥ oznaÄovanie zdrojovÃ©ho kÃ³du metadÃ¡tami v podobe informaÄnÃ½ch znaÄiek nesÃºcich informÃ¡cie zÃ­skanie prÃ¡ve z dÃ¡t interakciÃ­ [11], odhadovanie expertÃ­zy programÃ¡tora [8], alebo aj identifikÃ¡ciu zÃ¡vislostÃ­ v zdrojovom kÃ³de bez syntaktickej analÃ½zy [6]. HlavnÃ½m problÃ©mom rozsiahleho rozÅ¡Ã­renia a uplatniteÄ¾nosti systÃ©mov pre sledovanie programÃ¡tora a je potreba vlastnÃ½ch rozÅ¡Ã­renÃ­ do existujÃºcich vÃ½vojÃ¡rskych nÃ¡strojov a presvedÄenie programÃ¡tora ich pouÅ¾Ã­vaÅ¥. PodobnÃ© rieÅ¡enia vÅ¡ak uÅ¾ existujÃº pre zaznamenÃ¡vanie Äinnosti pouÅ¾Ã­vateÄ¾a na Webe. V kombinÃ¡cii s narastajÃºcim trendom prechodu vÃ½vojovÃ½ch prostredÃ­ na Web10 tak vidÃ­me zjednoduÅ¡enie rozÅ¡Ã­renia prostredÃ­ o sledovanie Äinnosti programÃ¡tora [5]."
94,264,0.484,Sprievodca svetom vedeckÃ©ho publikovania,"zaÄÃ­najÃº vyÅ¾adovaÅ¥ a zrejme aj to, Å¾e vÃ½sledky s dÃ¡tami sÃº pre ostatnÃ½ch vedcov dÃ´veryhodnejÅ¡ie a potenciÃ¡lne vyuÅ¾iteÄ¾nejÅ¡ie. HistorickÃ½m prÃ­kladom prÃ­nosu otvorenÃ½ch dÃ¡t k rozvoju Ä¾udskÃ©ho poznania je projekt mapovania Ä¾udskÃ©ho genÃ³mu (Human Genome Project117, 1990 â 2003). UÅ¾ v roku 1996 na bermudskej konferencii vedci urÄili pravidlÃ¡, podÄ¾a ktorÃ½ch laboratÃ³riÃ¡ v rÃ¡mci projektu zverejÅovali vÅ¡etky Ãºseky DNA do 24 hodÃ­n po ich sekvenovanÃ­. Korene bermudskÃ½ch pravidiel siahajÃº do Å¡esÅ¥desiatych a sedemdesiatych rokov 20. storoÄia, do vÃ½skumnej komunity venujÃºcej sa modelovÃ©mu organizmu hlÃ­stovcovi Caenorhabditis elegans. Pre Ä¾udskÃ½ genÃ³m ich presadili vÃ½znamnÃ­ nematolÃ³govia John Sulston a Robert Waterston. OtvorenÃ¡ prax v tom Äase eÅ¡te nebola zvykom a prieÄila sa naprÃ­klad nemeckÃ½m a japonskÃ½m predpisom (Cook-Deegan a McGuire 2017), ale pre organizÃ¡ciu prÃ¡ce na projekte takÃ©ho rozsahu bolo nemysliteÄ¾nÃ© zadrÅ¾iavaÅ¥ informÃ¡cie, Äi uÅ¾ kvÃ´li publikovaniu v Äasopisoch, alebo z inÃ½ch dÃ´vodov. Promptne zdieÄ¾anÃ© a voÄ¾ne prÃ­stupnÃ© dÃ¡ta skutoÄne urÃ½chlili vÃ½skum â naprÃ­klad generovali v porovnanÃ­ so sekvenÄnÃ½mi dÃ¡tami sÃºkromnej firmy Celera (prÃ­stupnÃ½mi na zÃ¡klade licencie) o 20 â 30 % viac aplikÃ¡ciÃ­ (Williams 2013). Kedysi prevlÃ¡dal nÃ¡zor, Å¾e prÃ¡va duÅ¡evnÃ©ho vlastnÃ­ctva, t. j. moÅ¾nosÅ¥ patentovania, rozvoju Ä¾udskÃ©ho poznania iba prospievajÃº, pretoÅ¾e vidina monetizÃ¡cie vedeckÃ½ch objavov by mala nalÃ¡kaÅ¥ do oblasti vÃ½skumu investÃ­cie sÃºkromnÃ½ch podnikateÄ¾ov. Ako vÅ¡ak vidieÅ¥, za podmienky, Å¾e kÄ¾ÃºÄovÃ½m faktorom nie je finanÄnÃ½ prÃ­spevok sÃºkromnej firmy, ale intelektuÃ¡lny prÃ­nos mnoÅ¾stva akademickÃ½ch pracovnÃ­kov, ktorÃ­ na problÃ©me pracujÃº, mÃ´Å¾u patenty vÃ½skum brzdiÅ¥. Predstava, Å¾e vedec, ktorÃ½ chce skÃºmaÅ¥ konkrÃ©tny gÃ©n, musÃ­ prejsÅ¥ byrokratickou patentovou procedÃºrou, dokonca aj keÄ neplÃ¡nuje svoj vÃ½skum komerÄne vyuÅ¾iÅ¥, iba preto, aby si gÃ©n medzi Äasom nepatentoval niekto inÃ½ a nezabrÃ¡nil mu pokraÄovaÅ¥ v prÃ¡ci, mnohÃ½ch desila. PrÃ¡vne komplikÃ¡cie Äi neistota odrÃ¡dzali vedcov od vÃ½skumu tÃ½ch gÃ©nov, ktorÃ© mala vo svojom portfÃ³liu Celera (dokonca aj keÄ akademickÃ½, neziskovÃ½ vÃ½skum na nich nebol zakÃ¡zanÃ½). U gÃ©nov vo verejnej domÃ©ne sa takÃ©to prekÃ¡Å¾ky nevyskytovali. K ich vÃ½skumu sa teda pripojilo viac Ä¾udÃ­ s rÃ´znymi nÃ¡padmi a prÃ­stupmi, Äo malo za nÃ¡sledok objavenie vÃ¤ÄÅ¡ieho mnoÅ¾stva rieÅ¡enÃ­. Napokon sÃºd v USA rozhodol, Å¾e gÃ©ny ako dielo prÃ­rody nemÃ´Å¾u byÅ¥ predmetom patentu (patentovaÅ¥ sa vÅ¡ak naÄalej mÃ´Å¾u pozmenenÃ© gÃ©ny alebo komplementÃ¡rne sekvencie). Politika zdieÄ¾ania dÃ¡t v projekte Ä¾udskÃ©ho genÃ³mu sa stala prÃ­kladom pre ÄalÅ¡ie podobnÃ© projekty, ktorÃ© zverejnili Å¡irokÃº paletu biomedicÃ­nskych Komunita skÃºmajÃºca Ceanorhabditis elegans tieÅ¾ nezahÃ¡Ä¾a a vyuÅ¾Ã­va dÃ¡ta z predchÃ¡dzajÃºceho extenzÃ­vneho vÃ½skumu na otvorenÃ½ projekt OpenWorm118 s cieÄ¾om vybudovaÅ¥ prvÃ½ virtuÃ¡lny organizmus. V oblasti projektov tÃ½kajÃºcich sa zdravia a funkciÃ­ Ä¾udskÃ©ho tela je vÅ¡ak dnes oproti obdobiu sekvenovania DNA situÃ¡cia zloÅ¾itejÅ¡ia. ZverejÅuje sa mnoho druhov Ãºdajov, no nestaÄÃ­, Å¾e sÃº prÃ­stupnÃ© â musia byÅ¥ sprÃ¡vne zorganizovanÃ© a zodpovedajÃºco 117 https://www.genome.gov/10001772/all-about-the--human-genome-project-hgp/ 118 http://openworm.org/"
265,444,0.484,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"StavovÃ½ diagram opisuje stavovÃ½ priestor nejakej veci (napr. objektu, dÃ¡tovej entity, komponentu, podsystÃ©mu Äi celÃ©ho systÃ©mu). PrincÃ­p fungovania stavovÃ½ch priestorov je veÄ¾mi podobnÃ½ koneÄnÃ½m automatom. StavovÃ½ priestor tvorÃ­ mnoÅ¾ina stavov, v akÃ½ch sa vec mÃ´Å¾e nachÃ¡dzaÅ¥ a prechodov medzi nimi. Prechody predstavujÃº okolnosti, za akÃ½ch vec svoj stav mÃ´Å¾e meniÅ¥. S prechodmi sÃº asociovanÃ©: â¢ udalosti, predstavujÃºce spÃºÅ¡Å¥aÄe prechodov medzi stavmi, â¢ podmienky, urÄujÃºce Äi prechody mÃ´Å¾u byÅ¥ uskutoÄnenÃ© a â¢ akcie, ktorÃ© sa vykonajÃº poÄas prechodov. Vec sa naraz mÃ´Å¾e nachÃ¡dzaÅ¥ len v jednom stave pre jeden stavovÃ½ priestor, mÃ´Å¾e vÅ¡ak maÅ¥ definovanÃ½ch viacero stavovÃ½ch priestorov (viacero stavovÃ½ch diagramov). Stavy taktieÅ¾ mÃ´Å¾u existovaÅ¥ v hierarchii (stavovÃ½ diagram umoÅ¾Åuje definovaÅ¥ zloÅ¾enÃ© stavy, teda samostatnÃ½ stavovÃ½ priestor vhniezdenÃ½ stavu vyÅ¡Å¡ej Ãºrovne). Modelovanie stavov sa pouÅ¾Ã­va najmÃ¤ vtedy, ak od stavu vecÃ­ zÃ¡visÃ­ ich sprÃ¡vanie. NaprÃ­klad na stlaÄenie rovnakÃ©ho tlaÄidla reaguje bankomat (ktorÃ©ho"
115,47,0.484,Algebra a diskrÃ©tna  matematika,"Ak sa nÃ¡m podarÃ­ dokÃ¡zaÅ¥, Å¾e vlastnosÅ¥ P mÃ¡ kaÅ¾dÃ½ objekt z nejakÃ©ho univerza U, potom vzhÄ¾adom k tomuto univerzu mÃ´Å¾eme definovaÅ¥ univerzÃ¡lny kvantifikÃ¡tor â P ( a ) â§ ... â§ P ( c ) â§ ... = Ã P ( x ) = def âx P ( x ) (1.12)"
190,235,0.484,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Predstavme si, Å¾e nÃ¡s prÃ¡ve prijali na prÃ¡cu na projekte. Nech na Åom pracuje eÅ¡te niekoÄ¾ko ÄalÅ¡Ã­ch Ä¾udÃ­. NemusÃ­ ich byÅ¥ veÄ¾a, staÄÃ­ dvaja, traja. Nie je dÃ´leÅ¾itÃ©, ÄÃ­m sa projekt zaoberÃ¡. DÃ´leÅ¾itÃ© je, Å¾e preÅ nebol vytvorenÃ½ Å¾iaden plÃ¡n alebo bol vytvorenÃ½ len veÄ¾mi hrubÃ½ plÃ¡n, ktorÃ½ ani zÄaleka nepokrÃ½va vÅ¡etky nutnÃ© nÃ¡leÅ¾itosti. ManaÅ¾Ã©r zvolal poradu, kde vÅ¡etkÃ½m oznÃ¡mil, o Äo pribliÅ¾ne v projekte ide a Å¾e od kaÅ¾dÃ©ho oÄakÃ¡va, aby sa zapojil."
76,150,0.483,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"sa rovnÃ¡ 1, vedie â ako vidÃ­me â na sÃºÄet geometrickÃ©ho radu s kvocientom 1 â . VÅ¡imnime si, Å¾e hodnotu distribuÄnej funkcie ( ), pre > 0, mÃ´Å¾eme vyjadriÅ¥ takto: ( ) = P( < ) = P( = 0) + P( = 1) + ... + P( = = ("
43,128,0.483,Objektovo orientovanÃ© programovanie v C++,"PrvÃ¡ verzia metÃ³dy vrÃ¡ti znakovÃ½ reÅ¥azec zviazanÃ½ so streamom, druhÃ¡ ho umoÅ¾Åuje zmeniÅ¥. PrÃ­klad. Predstavme si situÃ¡ciu, keÄ mÃ¡me veÄ¾kÃ½ textovÃ½ sÃºbor, ktorÃ½ chceme zapÃ­saÅ¥ na CD. SÃºbor je vÅ¡ak takÃ½ veÄ¾kÃ½, Å¾e na jedno CD sa nezmestÃ­. Preto je rozdelenÃ½ na niekoÄ¾ko ÄastÃ­. Ak sa pÃ´vodnÃ½ sÃºbor volÃ¡ subor.txt, jednotlivÃ© Äasti sa budÃº volaÅ¥ subor cast1.txt, subor cast2.txt atÄ. Ak chceme takto rozdelenÃ½ sÃºbor nahraÅ¥ spÃ¤Å¥ do poÄÃ­taÄa, potrebujeme program, ktorÃ½ by dokÃ¡zal jednotlivÃ© Äasti spojiÅ¥. NapÃ­Å¡me program, ktorÃ½ bude vykonÃ¡vaÅ¥ takÃ©to spÃ¡janie ÄastÃ­ do jednÃ©ho textovÃ©ho sÃºboru. Program naÄÃ­ta od uÅ¾Ã­vateÄ¾a meno pÃ´vodnÃ©ho sÃºboru (bez prÃ­pony .txt) a poÄet ÄastÃ­, na ktorÃ© bol sÃºbor rozdelenÃ½. Potom zaÄne jednotlivÃ© Äasti spÃ¡jaÅ¥. V tomto programe budeme potrebovaÅ¥ vygenerovaÅ¥ nÃ¡zvy jednotlivÃ½ch ÄastÃ­ pÃ´vodnÃ©ho sÃºboru. PrÃ¡ve na to vyuÅ¾ijeme triedu stringstream. KaÅ¾dÃ½ nÃ¡zov sa bude skladaÅ¥ z nÃ¡zvu pÃ´vodnÃ©ho sÃºboru, prÃ­pony cast, poradovÃ©ho ÄÃ­sla a prÃ­pony .txt. VÅ¡etky tieto zloÅ¾ky nÃ¡zvu poÅ¡leme pomocou operÃ¡tora << do reÅ¥azcovÃ©ho streamu, ÄÃ­m z nich vytvorÃ­me jeden znakovÃ½ reÅ¥azec. Aby sme ho mohli pouÅ¾iÅ¥ ako parameter pre konÅ¡truktor triedy fstream, ktorÃ½ vyÅ¾aduje nÃ¡zov sÃºboru vo forme C-stringu, musÃ­me najskÃ´r pomocou metÃ³dy str zÃ­skaÅ¥ obsah streamu vo forme premennej typu string. Z nej potom zÃ­skame prÃ­sluÅ¡nÃ© pole znakov pomocou metÃ³dy c str. VÅ¡imnime si, Å¾e streamy nazov a cast vytvÃ¡rame ako lokÃ¡lne premennÃ© v cykle, teda v kaÅ¾dom kroku cyklu vytvÃ¡rame vlastne novÃ© premennÃ©, ktorÃ© na konci cyklu zaniknÃº. Takto zabezpeÄÃ­me, Å¾e obe premennÃ© budÃº vÅ¾dy vhodne inicializovanÃ© â nebudÃº si âpamÃ¤taÅ¥â informÃ¡cie z predchÃ¡dzajÃºcich krokov. #include <iostream> #include <fstream> #include <string> #include <sstream> using namespace std; int main() int pocet; string povodny; char c; cout<<""Ako sa vola povodny subor?""<<endl; getline(cin,povodny); cout<<""Na kolko casti je subor rozdeleny?""<<endl; cin>>pocet; fstream vysledok((povodny+"".txt"").c str(), fstream::out); for (int i=1;i<=pocet;i++) stringstream nazov; nazov<<povodny<<"" cast""<<i<<"".txt""; fstream cast(nazov.str().c str(), fstream::in); while (true) c=cast.get(); if (cast.eof()) break;"
94,129,0.483,Sprievodca svetom vedeckÃ©ho publikovania,"sa dozvedel, v akÃ© vÃ½sledky dÃºfajÃº a v poÄÃ­taÄi vyrobil zodpovedajÃºce grafy. Kolegovia boli nadÅ¡enÃ­, keÄ priÅ¡iel s dÃ¡tami, ktorÃ© podporovali ich teÃ³rie. SchÃ¶n prefÃ­kane vyuÅ¾Ã­val slabiny akademickÃ©ho systÃ©mu, aÅ¾ kÃ½m ho nezastavil samoopravnÃ½ mechanizmus vedy. Dovtedy vÅ¡ak mnoho vedcov z celÃ©ho sveta mrhalo prostriedkami a svojÃ­m Äasom v mÃ¡rnom ÃºsilÃ­ replikovaÅ¥ SchÃ¶nove sfalÅ¡ovanÃ© vÃ½sledky. PodobnÃ© pocity zaÅ¾Ã­vali aj vÃ½skumnÃ­ci v oblasti kmeÅovÃ½ch buniek, ktorÃ­ sa snaÅ¾ili zopakovaÅ¥ Ãºspechy slÃ¡vneho juhokÃ³rejskÃ©ho vedca Woo-suk Hwanga (Sang-Hun 2014). Ten tvrdil (a v rokoch 2004 a 2005 publikoval v Äasopise Science), Å¾e naklonoval Ä¾udskÃ© embryo a zÃ­skal z neho kmeÅovÃ© bunky â neskÃ´r dokonca pÃ­sal o jedenÃ¡stich lÃ­niÃ¡ch kmeÅovÃ½ch buniek vytvorenÃ½ch geneticky âna mieruâ rÃ´znym pacientom. BÃ½valÃ½ spolupracovnÃ­k vÅ¡ak vrhol na Hwangove vÃ½sledky pochybnosti a vyÅ¡etrovanie potvrdilo falÅ¡ovanie â lÃ­nie kmeÅovÃ½ch buniek nevznikli klonovanÃ­m, ale (najpravdepodobnejÅ¡ie) partenogenÃ©zou a nebolo ich jedenÃ¡sÅ¥, ale iba dve (autori zÃ¡merne upravili obrÃ¡zky). NavyÅ¡e sa ukÃ¡zalo, Å¾e Hwangovo laboratÃ³rium nadobudlo Ä¾udskÃ© vajÃ­Äka neetickÃ½m spÃ´sobom a pouÅ¾ilo vÃ¤ÄÅ¡Ã­ poÄet, neÅ¾ pÃ´vodne priznalo. Malo Ã­sÅ¥ o dobrovoÄ¾nÃ© darovanie, no potvrdilo sa kupÄenie a dokonca zÃ­skavanie vajÃ­Äok od mladÅ¡Ã­ch vÃ½skumnÃ­Äok. V roku 2006 oba ÄlÃ¡nky zo Science stiahli. SamotnÃ½ Äasopis dal svoju komunikÃ¡ciu s autormi preÅ¡etriÅ¥ komisiou odbornÃ­kov, ktorÃ¡ konÅ¡tatovala, Å¾e recenznÃ© konanie prebehlo Å¡tandardne. Recenzenti zavÃ¡hali iba vtedy, keÄ sa pri pochybnostiach o pÃ´vode lÃ­nie kmeÅovÃ½ch buniek (Äi nevznikla partenogeneticky) uspokojili s vysvetlenÃ­m autorov a neÅ¾iadali dÃ¡ta. Po Å¡kandÃ¡le pristÃºpil Äasopis Science k sprÃ­sneniu redakÄnÃ½ch procedÃºr (van der Heyden et al. 2009). Pod drobnohÄ¾adom sa ocitla aj Hwangova prÃ¡ca o prvom klonovanÃ­ psa, ktorÃº uverejnil v Nature, tÃ¡ vÅ¡ak bola v poriadku. ÃspeÅ¡nÃ© klonovanie zvierat napokon umoÅ¾nilo Hwangovi po vÃ½povedi na Univerzite v Soule pokraÄovaÅ¥ v kariÃ©re a pokÃºsiÅ¥ sa rehabilitovaÅ¥ (Cyranoski 2014). Z peÅazÃ­ od skalnÃ½ch fanÃºÅ¡ikov, ktorÃ­ ho napriek medzinÃ¡rodnej hanbe neprestali podporovaÅ¥, vybudoval spoloÄnosÅ¥ Sooam, kde sa venuje klonovaniu zvierat (naprÃ­klad milovanÃ½ch psov, s ktorÃ½ch odchodom sa bohatÃ­ majitelia nechcÃº zmieriÅ¥, ale aj krÃ¡v, ktorÃ© v mlieku produkujÃº Ä¾udskÃ© proteÃ­ny, alebo geneticky pozmenenÃ½ch prasiat, ktorÃ½ch orgÃ¡ny by mohli byÅ¥ vhodnÃ© na transplantÃ¡cie pre Ä¾udÃ­). Publikovanie pochybnÃ©ho vÃ½skumu mÃ´Å¾e maÅ¥ doslova globÃ¡lny dopad, naprÃ­klad ak sa tÃ½ka politicky citlivej otÃ¡zky ako je globÃ¡lne otepÄ¾ovanie. Willie Soon a Sallie Baulinas publikovali v roku 2003 ÄlÃ¡nok v recenzovanom Äasopise Climate Research. IÅ¡lo o review â prehÄ¾ad a interpretÃ¡ciu predchÃ¡dzajÃºcich vÃ½skumov. Soon a Baulinas z nich vyvodili, Å¾e najteplejÅ¡Ã­m obdobÃ­m za poslednÃ½ch tisÃ­c rokov nebolo dvadsiate storoÄie, ale obdobie oteplenia v stredoveku. Politici a zÃ¡stupcovia energetickÃ©ho priemyslu v USA popierajÃºci globÃ¡lne zmeny klÃ­my privÃ­tali ÄlÃ¡nok s nadÅ¡enÃ­m ako zÃ¡mienku na odmietanie environmentÃ¡lnych opatrenÃ­. Medzi klimatolÃ³gmi sa strhla bÃºrka kritiky, Å¾e prezentovanÃ© zÃ¡very z pouÅ¾itÃ½ch dÃ¡t nevyplÃ½vajÃº (Mann et al. 2003). ÄlÃ¡nok nebol stiahnutÃ½, hoci vydavateÄ¾ Otto Kinne neskÃ´r priznal, Å¾e nemal byÅ¥ uverejnenÃ½ v podobe, ako vyÅ¡iel. Polovica Älenov redakÄnej rady Äasopisu Climate Research odstÃºpila (Goodess 2003). Odhalenie finanÄnÃ½ch vÃ¤zieb Soona na uhoÄ¾nÃ½ a ropnÃ½ priemysel nikoho neprekvapilo. RecenznÃ© konanie prebehlo formÃ¡lne podÄ¾a pravidiel â pod redakÄnÃ½m dohÄ¾adom Chrisa de Freitasa, editora nÃ¡zorovo spriaznenÃ©ho s autormi (ktorÃ©ho rukami preÅ¡li viacerÃ© neskÃ´r spochybÅovanÃ© ÄlÃ¡nky). De Freitas poslal rukopis Å¡tyrom hodnotiteÄ¾om a Å¾iadny z nich neodporÃºÄal odmietnutie. Tento prÃ­klad"
59,629,0.482,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"OpÃ­Å¡eme bliÅ¾Å¡ie hÄ¾adanie analÃ³gie medzi dvoma objektmi O1 a O2, ktorÃ© sÃº reprezentovanÃ© grafmi G1 a G2. KonÅ¡trukcia tÃ½chto grafov mÃ´Å¾e byÅ¥ urobenÃ© tak, Å¾e si zvolÃ­me vybranÃ© Ärty v oboch objektoch, tieto sÃº reprezentovanÃ© vrcholmi v prÃ­sluÅ¡nÃ½ch grafoch. Ak dve Ärty blÃ­zko sÃºvisia (Äasovo, priestorovo alebo funkcionÃ¡lne), potom ich vrcholy prepojÃ­me hranou grafu. V umelej inteligencii [5] existuje mnoho rÃ´znych metÃ³d ako reprezentovaÅ¥ objekty pomocou grafov (ktorÃ© majÃº ohodnotenÃ© vrcholy a/alebo hrany). HÄ¾adÃ¡me potom takÃ© zobrazenie mnoÅ¾iny vrcholov jednÃ©ho grafu na mnoÅ¾inu vrcholov druhÃ©ho grafu, ktorÃ© zachovÃ¡va maximÃ¡lnu podobnosÅ¥ medzi dvojicou priradenÃ½ch vrcholov. Rozsah analÃ³gia medzi objektmi je priamoÃºmernÃ½ poÄtu tÃ½chto elementÃ¡rnych podobnostÃ­. K formalizÃ¡cii analÃ³gie medzi grafmi G1 a G2 pouÅ¾ijeme koncepciu maximÃ¡lneho spoloÄnÃ©ho podgrafu G12 ï½ ï¨V12 ,E12 ï© pre ktorÃ½ platÃ­ (pozri Obr. 13.2): 1. spoloÄnÃ½ graf G12 je sÃºÄasne podgrafom grafov G1 a G2, G12 ï G1 a G12 ï G2 , 2. spoloÄnÃ½ podgraf G12 obsahuje maximÃ¡lny poÄet hrÃ¡n E12 ï½ max ,."
41,111,0.482,InformaÄnÃ© vzdelÃ¡vanie,"UniverzitnÃ¡ kniÅ¾nica v Bratislave a vedeckÃ© kniÅ¾nice UniverzitnÃ¡ kniÅ¾nica v Bratislave (UKB) je najstarÅ¡ia a najvÃ¤ÄÅ¡ia vedeckÃ¡ kniÅ¾nica v Slovenskej republike. Vznikla v roku 1919 ako KniÅ¾nica Univerzity KomenskÃ©ho. SÃºbeÅ¾ne so svojÃ­m akademickÃ½m poslanÃ­m plnila do roku 1954 funkciu nÃ¡rodnej kniÅ¾nice. UÅ¾ v roku svojho vzniku zÃ­skala prÃ¡vo na povinnÃ½ vÃ½tlaÄok knÃ­h a periodÃ­k z Ãºzemia Slovenska. Od roku 1954 je samostatnou vedeckou kniÅ¾nicou slÃºÅ¾iacou Å¡irokej verejnosti. Ponechala si vÅ¡ak nÃ¡zov UniverzitnÃ¡ kniÅ¾nica, pretoÅ¾e vyjadruje jej histÃ³riu, Å¡irokÃº profilÃ¡ciu fondu i pouÅ¾Ã­vateÄ¾skÃ©ho zÃ¡zemia; pod tÃ½mto nÃ¡zvom sa stala znÃ¡mou v zahraniÄÃ­. Z klasickej kniÅ¾nice sa postupne pretvorila na modernÃº kniÅ¾niÄno-informaÄnÃº inÅ¡titÃºciu. Koncom roka 2013 fond UKB obsahoval v sÃºhrne 2,65 mil. kniÅ¾niÄnÃ½ch jednotiek. ObsahovÃº a typologickÃº skladbu kniÅ¾niÄnÃ©ho fondu vytvÃ¡rajÃº tieto zloÅ¾ky: SlovenskÃ¡ literatÃºra - V relatÃ­vnej Ãºplnosti je zastÃºpenÃ¡ novÅ¡ia literatÃºra a tlaÄ zÃ­skavanÃ¡ v rÃ¡mci povinnÃ©ho vÃ½tlaÄku. UnikÃ¡tna je najmÃ¤ produkcia z obdobia 1919/1920-39, kedy kniÅ¾nica dostÃ¡vala povinnÃ½ vÃ½tlaÄok ako jedinÃ¡ na Slovensku. Z domÃ¡cej i zahraniÄnej slovenskej literatÃºry a tlaÄe sa od roku 1920 buduje konzervaÄnÃ½ fond. ZahraniÄnÃ¡ literatÃºra - V sÃºÄasnosti ho tvorÃ­ literatÃºra z odborov spoloÄenskÃ½ch vied v Å¡irokom chÃ¡panÃ­, prÃ­rodnÃ½ch vied, ich hraniÄnÃ½ch a prienikovÃ½ch disciplÃ­n a dokumenty univerzÃ¡lneho charakteru s osobitÃ½m zreteÄ¾om na sekundÃ¡rne informaÄnÃ© pramene. NadobÃºda sa literatÃºra vo svetovÃ½ch jazykoch, v slovanskÃ½ch jazykoch a ÄalÅ¡Ã­ch eurÃ³pskych jazykoch. Zo sÃºÄasnÃ©ho roÄnÃ©ho prÃ­rastku fondu (30 tis. kn. j.) zahraniÄnÃ¡ literatÃºra tvorÃ­ okolo 35%. Popri klasickÃ½ch tlaÄenÃ½ch"
76,13,0.481,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"1.1.3 PrÃ­klad. Nech pokus spoÄÃ­va v nÃ¡hodnom Å¥ahanÃ­ guÄ¾ky zo Å¡katule, ktorÃ¡ obsahuje 100 guliek, avÅ¡ak teraz vieme len to, Å¾e farby guliÄiek sÃº alebo biela, alebo modrÃ¡, alebo ÄervenÃ¡ (teda nevieme, koÄ¾ko ktorÃ½ch). VÃ½sledok pokusu je opÃ¤Å¥ farba vytiahnutej guÄ¾ky. ÄÃ­m sa takÃ½to pokus lÃ­Å¡i od pokusu z 1.1.2? Zrejme ï, S sÃº rovnakÃ©, ale urÄiÅ¥ P je nieÄo novÃ©, lebo zloÅ¾enie Å¡katule nepoznÃ¡me. Ako teraz modelovaÅ¥ pravdepodobnosÅ¥ spojenÃº s pokusom? Je nutnÃ© zamyslieÅ¥ sa nad tÃ½m, Äo je pravdepodobnosÅ¥. Na otÃ¡zku, preÄo verÃ­me postupom v predchÃ¡dzajÃºcich odstavcoch, odpovedÃ¡me takto: Keby sme opakovane realizovali pokus z 1.1.2 (nÃ¡hodne Å¥ahÃ¡me guÄ¾ku, poznaÄÃ­me si jej farbu a vrÃ¡time ju spÃ¤Å¥), tak v dlhom rade opakovanÃ­ pokusu zistÃ­me pribliÅ¾nÃº zhodu medzi stanovenou pravdepodobnosÅ¥ou P a relatÃ­vnymi poÄetnosÅ¥ami vÃ½skytu jednotlivÃ½ch vÃ½sledkov, resp. udalostÃ­. Ak totiÅ¾ v 1.1.2 napr. P({b}) = 0.5, tak v 1000 opakovaniach pokusu pribliÅ¾ne v polovici z nich, t. j. pribliÅ¾ne v 500 prÃ­padoch, pozorujeme vytiahnutie bielej. InÃ½mi slovami, verÃ­me, Å¾e frekvencia vÃ½sledku {b} kolÃ­Å¡e okolo 0.5. KeÄÅ¾e ale teraz zloÅ¾enie Å¡katule nepoznÃ¡me, neostÃ¡va niÄ inÃ©, len vykonaÅ¥ experiment. Opakujme nÃ¡Å¡ pokus (napr. 60-krÃ¡t) a predpokladajme, Å¾e sme zÃ­skali takÃ©to vÃ½sledky:"
59,12,0.481,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"1.3 KognitÃ­vna veda a psycholÃ³gia PsycholÃ³gia je veda [3,17], ktorÃ¡ sa zaoberÃ¡ reprezentÃ¡ciou a spracovanÃ­m informÃ¡cie Å¾ivoÄÃ­chmi s vyÅ¡Å¡ou nervovou aktivitou (a teda aj Ä¾uÄmi). Tieto sÃº schopnÃ© prijÃ­maÅ¥ informÃ¡ciu z okolia, vytvÃ¡raÅ¥ jej vnÃºtornÃº reprezentÃ¡ciu a transformovaÅ¥ ju s cieÄ¾om vÃ½beru a vÃ½konu akciÃ­. InteligentnÃ© informaÄnÃ© procesy sÃº vyjadrenÃ© schopnosÅ¥ou zÃ­skavaÅ¥ a spracovÃ¡vaÅ¥ informÃ¡ciu z okolia s cieÄ¾om vykonÃ¡vania adaptÃ­vnych akciÃ­, ktorÃ© zvyÅ¡ujÃº schopnosÅ¥ organizmu preÅ¾Ã­vaÅ¥ a rozmnoÅ¾ovaÅ¥ sa. V tejto sÃºvislosti je dÃ´leÅ¾itÃ½ pojem âadaptÃ­vna akciaâ, Äo znamenÃ¡, Å¾e proces vytvÃ¡rania akcie je vÃ½sledkom uÄenia organizmu v danom prostredÃ­ s cieÄ¾om optimalizÃ¡cie danej akcie. ÃstrednÃ½ problÃ©m Å¡tudovanÃ½m psycholÃ³giou sÃº informaÄnÃ© procesy, ktorÃ© prebiehajÃº medzi vstupom informÃ¡cie prostrednÃ­ctvom zmyslov a vÃ½stupom informÃ¡cie prostrednÃ­ctvom motorickÃ½ch centier. ZloÅ¾itÃ© formy inteligencie, ktorÃ© sÃº pozorovanÃ© u humanoidov, vyÅ¾adujÃº teÃ³rie mechanizmov vÃ½konu kognitÃ­vnych akciÃ­ a vnÃºtornej skÃºsenosti (existencia pamÃ¤ti a schopnosti vytvÃ¡rania vnÃºtornÃ½ch modelov prostredia). Tieto organizmy sÃº schopnÃ© vÃ½konu zloÅ¾itÃ½ch kognitÃ­vnych akciÃ­, akÃ½mi sÃº rozhodovanie (angl. decision making), rieÅ¡enie problÃ©mov (angl. problem solving) a plÃ¡novania (angl. planning); u Ä¾udÃ­ pristupuje k tÃ½mto aktivitÃ¡m schopnosÅ¥ komunikÃ¡cie prostrednÃ­ctvom jazyka formÃ¡lne reprezentovanÃ©ho generatÃ­vnou gramatikou. Ä½udia sÃº schopnÃ­ najzloÅ¾itejÅ¡Ã­ch a najvÅ¡eobecnejÅ¡Ã­ch foriem spracovania a transformÃ¡cie, preto podstatnÃ¡ ÄasÅ¥ psycholÃ³gie je orientovanÃ¡ na pochopenie procesov spracovania informÃ¡cie a inteligencie u Ä¾udÃ­ s cieÄ¾om vytvÃ¡rania kognitÃ­vnych architektÃºr a modelov tÃ½chto procesov (vyÅ¡Å¡Ã­ch kognitÃ­vnych procesov). PsycholÃ³gia (menovite tÃ¡ jej ÄasÅ¥, ktorÃ¡ sa zaoberÃ¡ kognitÃ­vnymi procesmi, t. j. kognitÃ­vna psycholÃ³gia) patrÃ­ do jadra kognitÃ­vnej vedy. VÃ½skum kognitÃ­vnej vedy mÃ¡ vÅ¾dy bezprostrednÃ½ alebo sprostredkovanÃ½ vÃ½znam v psycholÃ³gii. Nie vÅ¡etky vÃ½skumy o inteligentnÃ½ch informaÄnÃ½ch procesoch sÃº vÃ½znamnÃ© pre psycholÃ³giu. MusÃ­me poznamenaÅ¥, Å¾e odbornÃ½ zÃ¡ber kognitÃ­vnej vedy je o mnoho vÅ¡eobecnejÅ¡Ã­ ako psycholÃ³gie, preto nie vÅ¡etky vÃ½sledky tohto novÃ©ho vednÃ©ho odboru sÃº relevantnÃ© pre psycholÃ³giu. Vznik informatiky v 50. rokoch minulÃ©ho storoÄia znamenal novÃ½ impulz pre rozvoj psycholÃ³gie, menovite jej odklon od striktnÃ©ho behaviorizmu, ktorÃ½ oznaÄoval za nevedeckÃ©"
240,141,0.48,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"do obrazca pridaÅ¥. Napr. pridanÃ­m podmienky i < n/2 do vÃ½razu v riadku 13 by sme (bodkami) vyplnili aj plochu hornej polovice Å¡tvorca. Ãloha 2-15 (rieÅ¡enie) NajskÃ´r musÃ­me definovaÅ¥ premennÃ©, ktorÃ© sÃº v programe pouÅ¾itÃ©. V riadku 6 do premennej n naÄÃ­tavame cez formÃ¡tovacÃ­ reÅ¥azec %d celÃ© ÄÃ­slo typu int. Äalej v programe pracujeme s dvoma riadiacimi premennÃ½mi cyklu (i a j), ktorÃ© rozsahom (rÃ¡dovo) zodpovedajÃº rozmeru hviezdy (2*n+1), preto vÅ¡etky pouÅ¾itÃ© premennÃ© mÃ´Å¾eme definovaÅ¥ ako typ int. Program by mal vykresliÅ¥ obrazec rozmerov 2*n+1 riadkov a 2*n+1 stÄºpcov, preto poÄet opakovanÃ­ cyklov v riadkoch 7 a 9 zodpovedÃ¡ tomuto rozmeru. ZostÃ¡va nÃ¡m doplniÅ¥ podmienky urÄujÃºce, ktorÃ½ znak sa vypÃ­Å¡e v i-tom riadok a j-tom stÄºpci obrazca. Podmienka v riadku 10 urÄuje Äi sa vypÃ­Å¡e znak #. Znaky # vo vÃ½stupe tvoria spojenie dvoch Äiar, preto v zloÅ¾enej podmienke pouÅ¾ijeme logickÃ© vÃ½razy rovnosti (==): stredovÃ½ riadok (i==n) a stredovÃ½ stÄºpec (j==n). Podmienka v riadku 12 potom urÄuje, kde sa vypÃ­Å¡e znak o. Znaky o vo vÃ½stupe tvoria dve plochy, preto pouÅ¾ijeme logickÃ© vÃ½razy nerovnosti: Ä¾avÃ½-hornÃ½ kvadrant (i<n && j<n) a pravÃ½ dolnÃ½ kvadrant (i>n && j>n). VÃ½slednÃ½ doplnenÃ½ program vyzerÃ¡ takto:"
190,309,0.48,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"PrvÃ© dve z tÃ½chto definÃ­cii sa v podstate zhodujÃº. Tretia definÃ­cia hovorÃ­ o tom, Å¾e pokiaÄ¾ mÃ¡ byÅ¥ nieÄo, produkt, sluÅ¾ba alebo softvÃ©r, kvalitnÃ½ musÃ­ byÅ¥ vÃ½nimoÄnÃ½ a v nieÄom lepÅ¡Ã­ ako ostatnÃ© dostupnÃ© veci. Je len logickÃ©, Å¾e takÃ¡to definÃ­cia nemohla padnÃºÅ¥ na ÃºrodnÃº pÃ´du v komunite programÃ¡torov, ktorÃ½ sa snaÅ¾ia vÅ¡etko robiÅ¥ podÄ¾a moÅ¾nosti Äo najrÃ½chlejÅ¡ie a najjednoduchÅ¡ie. A naviac, keby sa celÃ½ svet pridÅÅ¾al tejto definÃ­cie, Ä¾udia by zrazu s prekvapenÃ­m zistili, Å¾e vÃ¤ÄÅ¡ina toho Äo pouÅ¾Ã­vajÃº je jednoducho nieÄo nekvalitnÃ©. No a to by bola tvrdÃ¡ rana pravdepodobne pre kaÅ¾dÃ©ho Å¾ijÃºceho v dneÅ¡nej spoloÄnosti. Aj keÄ si to vÃ¤ÄÅ¡ina Ä¾udÃ­ nechce priznaÅ¥. MoÅ¾no prÃ¡ve preto sa kvalita softvÃ©ru v sÃºÄasnosti meria podÄ¾a prvÃ½ch dvoch definÃ­ciÃ­. Okrem ich nespornej pravdivosti, ktorÃº vÅ¡etci akosi podvedome cÃ­tia, dÃ¡vajÃº moÅ¾nosÅ¥ vzniku omnoho vÃ¤ÄÅ¡iemu mnoÅ¾stvu kvalitnÃ½ch vecÃ­ ako tretia, oxfordskÃ¡ definÃ­cia. V tom tkvie ich sila, a to je ich veÄ¾kou prednosÅ¥ou a vÃ½hodou. VÅ¡ak kaÅ¾dÃ½ predsa chce robiÅ¥ kvalitnÃ© veci bez toho, aby musel preukazovaÅ¥ vÃ½nimoÄnosÅ¥. Bez ohÄ¾adu na to, Äi sa jednÃ¡ o vÃ½robu hrncov, tlaÄ novÃ­n alebo tvorbu informaÄnÃ©ho systÃ©m pre uchovÃ¡vanie informÃ¡cii o krvnÃ½ch skupinÃ¡ch dobrovoÄ¾nÃ½ch darcov krvi. ÄalÅ¡ou vÃ½hodou alebo aj nevÃ½hodou je fakt, Å¾e poskytujÃº neuveriteÄ¾ne Å¡irokÃ½ priestor pre manipulÃ¡ciu s pojmami kvalita. Ide o jednoduchÃ½ princÃ­p spoÄÃ­vajÃºci v tom, Å¾e pokiaÄ¾ sÃº splnenÃ© zadanÃ© poÅ¾iadavky, produkt je kvalitnÃ½. Za touto jednoduchou implikÃ¡ciou sa toho skrÃ½va viac ako sa zdÃ¡. InÃ½mi slovami aj Ãºplne zle fungujÃºci program, ktorÃ½ nedokÃ¡Å¾e sprÃ¡vne spoÄÃ­taÅ¥ dve ÄÃ­sla sa mÃ´Å¾e s ÄistÃ½m svedomÃ­m oznaÄiÅ¥ za kvalitnÃ½ pokiaÄ¾ zadÃ¡vateÄ¾ omylom, schvÃ¡lne alebo z nepozornosti sÃºhlasil prÃ¡ve s touto jeho vlastnosÅ¥ou. Koniec koncov nevadÃ­, Å¾e to nerobÃ­ to, Äo to mÃ¡ robiÅ¥, najmÃ¤ Å¾e je to podÄ¾a poÅ¾iadaviek a je to kvalitnÃ©. HlavnÃ½ problÃ©m, ktorÃ½ z tÃ½chto definÃ­cii vyplÃ½va je teda nasledovnÃ½: nie Na kvalitu sa je kvalita ako kvalita. PokiaÄ¾ niekto oÄakÃ¡va od filmu vzÃ¡jomnÃ© kynoÅ¾enie dÃ¡ nazeraÅ¥ monÅ¡truÃ³znych robotov a obyvateÄ¾ov naÅ¡ej planÃ©ty, bude zjavne povaÅ¾ovaÅ¥ za rÃ´zne. kvalitnÃ© Ãºplne inÃ© filmy ako niekto s citlivou duÅ¡ou pachtiaci po romantike."
190,392,0.48,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"UviesÅ¥ do praxe novÃ© metÃ³dy, techniky, Äi nÃ¡stroje, nie je vÃ´bec VÄaka refaktoringu takÃ© jednoduchÃ©, ako by sme si mohli spoÄiatku myslieÅ¥. Firmy sa zdrojovÃ½ kÃ³d doslova Äasto noviniek obÃ¡vajÃº, keÄÅ¾e nechcÃº riskovaÅ¥, Å¾e sa vydajÃº cestou, Å¾ije a vyvÃ­ja sa, nielen ktorÃ¡ sÃ­ce vyzerÃ¡ sÄ¾ubne, ale Äasom sa ukÃ¡Å¾e, Å¾e vedie do slepej nekontrolovane rastie. uliÄky a neprinÃ¡Å¡a im Å¾iadne vÃ½hody. Preto vyÄkÃ¡vajÃº, ako sa situÃ¡cia vyvinie a dovtedy pouÅ¾Ã­vajÃº overenÃ© prostriedky. Za znaÄnÃ½ problÃ©m pri zavÃ¡dzanÃ­ noviniek do praxe pokladÃ¡m nedostatok odbornÃ­kov, ktorÃ­ vedia vyuÅ¾Ã­vaÅ¥ novÃ© prÃ­stupy, Äi pracovaÅ¥ s novÅ¡Ã­mi nÃ¡strojmi a naplno vyuÅ¾iÅ¥ ich potenciÃ¡l. BeÅ¾nÃ© sÃº prÃ­pady, keÄ firma zabezpeÄÃ­ modernÃ½ kvalitnÃ½ softvÃ©r, zamestnanci vÅ¡ak nevyuÅ¾Ã­vajÃº jeho novÃ© moÅ¾nosti, a teda stagnujÃº na rovnakej Ãºrovni kvality. Aj preto sa dnes dobrÃ© univerzity nesnaÅ¾ia Å¡tudentov informatiky nauÄiÅ¥ pracovaÅ¥ s konkrÃ©tnymi nÃ¡strojmi, ale skÃ´r vybudovaÅ¥ u nich schopnosti samostatne sa uÄiÅ¥ stÃ¡le novÃ© veci. Na vÃ½ber je dnes veÄ¾kÃ© mnoÅ¾stvo metÃ³d na zlepÅ¡enie kvality. IdeÃ¡lne by bolo keby sme pouÅ¾ili vÅ¡etky, ktorÃ© sa osvedÄili. SkutoÄnÃ½ stav mÃ¡ od toho ideÃ¡lneho Äaleko. V reÃ¡lnom svete sa totiÅ¾ musÃ­"
190,231,0.48,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,KaÅ¾dodennÃ© Äinnosti ako uhasenie smÃ¤du nemoÅ¾no povaÅ¾ovaÅ¥ za projekt. Vo vÅ¡eobecnosti projektom rozumieme Äasovo ohraniÄenÃ© Ãºsilie s cieÄ¾om dosiahnutia jedineÄnÃ©ho vÃ½sledku. UhasenÃ½ smÃ¤d sa za Å¾iadnych okolnostÃ­ nedÃ¡ povaÅ¾ovaÅ¥ za jedineÄnÃ½ vÃ½sledok. Tento cieÄ¾ dosahujeme neustÃ¡le.
43,500,0.48,Objektovo orientovanÃ© programovanie v C++,"CviÄenia 1. Vytvorte vektor celÃ½ch ÄÃ­sel. Nech uÅ¾Ã­vateÄ¾ zadÃ¡ dÄºÅ¾ku vektora a jeho prvÃ© dva prvky. Potom doplÅte ostatnÃ© prvky tak, Å¾e kaÅ¾dÃ½ prvok bude sÃºÄtom dvoch predchÃ¡dzajÃºcich. 2. Vytvorte si sÃºbor, v ktorom budÃº zapÃ­sanÃ© celÃ© ÄÃ­sla. Vytvorte si vektor celÃ½ch ÄÃ­sel a naÄÃ­tajte doÅho vÅ¡etky ÄÃ­sla zo sÃºboru. Potom spoÄÃ­tajte, koÄ¾ko je v zozname pÃ¡rnych a koÄ¾ko nepÃ¡rnych ÄÃ­sel. V prvej verzii naprogramujte poÄÃ­tanie pÃ¡rnych a nepÃ¡rnych ÄÃ­sel sami. V druhej verzii pouÅ¾ite funkciu count if z kniÅ¾nice algorithm. 3. V sÃºbore sÃº zapÃ­sanÃ© slovÃ¡, kaÅ¾dÃ© v jednom riadku. Vytvorte vektor s prvkami typu string a naÄÃ­tajte doÅho vÅ¡etky slovÃ¡. Potom nech uÅ¾Ã­vateÄ¾ zadÃ¡ nejakÃ© pÃ­smeno. VymaÅ¾te zo zoznamu vÅ¡etky slovÃ¡, ktorÃ© sa zaÄÃ­najÃº danÃ½m pÃ­smenom. 4. Nech uÅ¾Ã­vateÄ¾ postupne zadÃ¡va vrcholy mnohouholnÃ­ka (predpokladajme, Å¾e ich zadÃ¡va sprÃ¡vne, teda Å¾e sa jednotlivÃ© strany nepretÃ­najÃº). Nech sa naÄÃ­tanie konÄÃ­ vtedy, ak znova zadÃ¡ prvÃ½ bod, ÄÃ­m sa mnohouholnÃ­k uzavrie. Vytvorte triedu bod, ktorÃ¡ bude maÅ¥ dva Ãºdaje - sÃºradnice x a y. Nech sa vrcholy mnohouholnÃ­ka ukladajÃº vo vektore, ktorÃ©ho prvkami budÃº objekty triedy bod. Po naÄÃ­tanÃ­ vrcholov vypoÄÃ­tajte obvod mnohouholnÃ­ka. 5. Zoberte si nejakÃ½ program v C alebo C++. Vytvorte si vektor s prvkami typu string a naÄÃ­tajte doÅho postupne vÅ¡etky riadky programu (kaÅ¾dÃ½ prvok bude obsahovaÅ¥ jeden riadok). Potom vytvorte novÃ½ sÃºbor tak, Å¾e odstrÃ¡nite vÅ¡etky komentÃ¡re, teda budÃº v Åom len samotnÃ© prÃ­kazy. JednoduchÅ¡ia verzia mÃ´Å¾e vymazÃ¡vaÅ¥ len jednoriadkovÃ© komentÃ¡re, teda riadky, ktorÃ© zaÄÃ­najÃº znakmi â//â. PokroÄilejÅ¡ia verzia mÃ´Å¾e odstraÅovaÅ¥ aj viacriadkovÃ© komentÃ¡re ohraniÄenÃ© znakmi â/*â a â*/â. MÃ´Å¾ete predpokladaÅ¥, Å¾e komentÃ¡re nikdy nezaberajÃº len ÄasÅ¥ riadku. 6. Vytvorte mnoÅ¾inu znakov obsahujÃºcu len malÃ© pÃ­smenÃ¡ abecedy. PÃ­smenÃ¡ v nej budÃº usporiadanÃ© abecedne, ale s malou obmenou â samohlÃ¡sky budÃº vÅ¾dy pred spoluhlÃ¡skami. Nech program postupne ÄÃ­ta od uÅ¾Ã­vateÄ¾a znaky a zaraÄuje ich do mnoÅ¾iny. Ak uÅ¾Ã­vateÄ¾ zadÃ¡ nieÄo inÃ© ako malÃ© pÃ­smeno abecedy, bude tento vstup ignorovanÃ½ okrem prÃ­padu, keÄ zadÃ¡ pÃ­smeno âKâ. Vtedy program ukonÄÃ­ naÄÃ­tavanie a vypÃ­Å¡e obsah mnoÅ¾iny. 7. Vytvorte multimapu, v ktorej budÃº uloÅ¾enÃ© Ãºdaje o knihÃ¡ch â jeden prvok dvojice bude nÃ¡zov knihy a druhÃ½ rok vydania. Navrhnite multimapu najprv"
369,301,0.48,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"kaskÃ¡dy, rozloÅ¾ili tovar do viacerÃ½ch lodÃ­, aby tak znÃ­Å¾ili stratu pri prevrhnutÃ­ sa niektorej lode. V Babylone zas, keÄ obchodnÃ­k dostal Ãºver na financovanie dopravy tovaru, tento zaplatil svojmu veriteÄ¾ovi1 urÄitÃº sumu za garanciu, Å¾e veriteÄ¾ zruÅ¡Ã­ Ãºver, ak tovar poÄas prepravy ukradnÃº. PrincÃ­p rozloÅ¾enia straty medzi viacero osÃ´b zaviedli neskÃ´r obyvatelia ostrova Rodos. KaÅ¾dÃ½ z obchodnÃ­kov, ktorÃ½ch tovar sa prepravoval spolu, zaplatil poistnÃ© v pomernej vÃ½Å¡ke, ktorÃ© sa pouÅ¾ilo na odÅ¡kodnenie obchodnÃ­ka alebo obchodnÃ­kov, ktorÃ½ch tovar sa zniÄil pri poÅ¡kodenÃ­ alebo potopenÃ­ lode. SamostatnÃ© poisÅ¥ovacie zmluvy, t. j. poisÅ¥ovacie zmluvy, ktorÃ© nie sÃº viazanÃ© na Ãºvery alebo inÃ© typy zmlÃºv, sa vÅ¡ak objavili aÅ¾ v 14. storoÄÃ­ v Janove [Wikipedia 2009b]. KomerÄnÃ© poistenie je zaloÅ¾enÃ© na niekoÄ¾kÃ½ch zÃ¡kladnÃ½ch princÃ­poch [Wikipedia 2009b]: 1. VeÄ¾kÃ© mnoÅ¾stvo homogÃ©nnych objektov, ktorÃ© sÃº vystavenÃ© prÃ­sluÅ¡nÃ©mu riziku.2 UvedenÃ½ princÃ­p umoÅ¾Åuje vÃ½poÄet pravdepodobnosti vzniku poistnej udalosti na niektorom objekte. 2. JednoznaÄnosÅ¥ udalosti. UdalosÅ¥, ktorÃ¡ je predmetom poistenia, sa stala v urÄitom Äase na urÄitom mieste a z urÄitÃ½ch dÃ´vodov. Tento princÃ­p umoÅ¾Åuje verifikÃ¡ciu splnenia poistnÃ½ch podmienok. 3. NÃ¡hodnosÅ¥ udalosti. UdalosÅ¥ by mala byÅ¥ nÃ¡hodnÃ¡ alebo aspoÅ mimo moÅ¾nosti ovplyvnenia poistenou osobou. Å pekulatÃ­vne obchody (naprÃ­klad na burze) zvyÄajne nie je moÅ¾nÃ© poistiÅ¥. 4. Rozsiahla Å¡koda. Rozsah Å¡kody musÃ­ byÅ¥ dostatoÄne veÄ¾kÃ½, aby malo vÃ½znam pre poistenÃº osobu (presnejÅ¡ie poistnÃ­ka) sa voÄi takejto udalosti poistiÅ¥. 5. PrijateÄ¾nÃ¡ vÃ½Å¡ka poistnÃ©ho. Ak vÃ½Å¡ka poistnÃ©ho presiahne urÄitÃº hranicu, potenciÃ¡lny platiteÄ¾ poistnÃ©ho stratÃ­ zÃ¡ujem o poistenie a bude radÅ¡ej sÃ¡m znÃ¡Å¡aÅ¥ riziko poistnej udalosti. 6. OdhadnuteÄ¾nÃ¡ Å¡koda. Je moÅ¾nÃ© urÄiÅ¥ finanÄnÃº vÃ½Å¡ku vzniknutej Å¡kody. 7. MalÃ© riziko katastroficky veÄ¾kÃ½ch Å¡kÃ´d. Ak poistnÃ¡ udalosÅ¥ mÃ´Å¾e sÃºÄasne zasiahnuÅ¥ veÄ¾kÃ© mnoÅ¾stvo poistenÃ½ch osÃ´b (naprÃ­klad pri zÃ¡plavÃ¡ch alebo zemetraseniach), ohrozuje to schopnosÅ¥ poisÅ¥ovne splniÅ¥ svoje finanÄnÃ© zÃ¡vÃ¤zky.3 PoisÅ¥ovnÃ­ctvo je moÅ¾nÃ© ÄleniÅ¥ podÄ¾a viacerÃ½ch hÄ¾adÃ­sk: formy poistenia, predmetu poistenia, spÃ´sobu poistenia a poistnÃ½ch rizÃ­k. PodÄ¾a formy poistenia (poistnÃ© formy) rozliÅ¡ujeme: 1. ZÃ¡konnÃ© poistenie â je urÄenÃ© zÃ¡konom a neuzatvÃ¡ra sa zmluva medzi poisÅ¥ovÅou a poistenÃ½m subjektom. PrÃ­kladom je zdravotnÃ© poistenie (t. j. poistenie na Ãºhradu nÃ¡kladov za zdravotnÃº starostlivosÅ¥), nemocenskÃ© poistenie (t. j. poistenie straty"
265,349,0.479,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"UveÄte vÃ½hody a nevÃ½hody iteratÃ­vneho modelu vÃ½voja softvÃ©ru (v porovnanÃ­ voÄi vodopÃ¡dovÃ©mu modelu). VÃ½hody: ZlepÅ¡ovanie produktu krok za krokom. MoÅ¾nosÅ¥ vytvorenia poÄiatoÄnej zjednoduÅ¡enej verzie produktu. ZÃ¡kaznÃ­k mÃ´Å¾e poskytovaÅ¥ priebeÅ¾nÃº spÃ¤tnÃº vÃ¤zbu, Äo mÃ´Å¾e pomÃ´cÅ¥ redukovaÅ¥ nepochopenÃ© poÅ¾iadavky uÅ¾ v zaÄiatoÄnej fÃ¡ze vÃ½voja. PotenciÃ¡l skorÃ©ho odhalenia chÃ½b, bez nutnosti opakovania uÅ¾ raz vykonanÃ½ch procesov vÃ½voja (nÃ¡vrh, implementÃ¡cia, testovanie) alebo spÃ¤tnÃ©ho negatÃ­vneho ovplyvnenia uÅ¾ hotovÃ½ch ÄastÃ­ (napr. aj vrÃ¡tane dokumentÃ¡cie)."
393,475,0.479,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 2,"Podpora implementaÄnÃ½ch jazykov SÃºÄasnÃ© CASE nÃ¡stroje vo vÃ¤ÄÅ¡ine prÃ­padov podporujÃº implementaÄnÃ© jazyky ako JAVA, C++, C# a VB. Od CASE nÃ¡stroja v zÃ¡sade oÄakÃ¡vame generovanie zdrojovÃ©ho kÃ³du v jazyku, resp. V jazykoch, v ktorÃ½ch sa realizuje celÃ½ projekt. VÃ½ber nÃ¡stroja ale Äasto nie je zÃ¡leÅ¾itosÅ¥ou iba jedinÃ©ho projektu a teda pri investÃ­ciÃ­ do kvalitnÃ©ho nÃ¡stroja budeme oÄakÃ¡vaÅ¥ podporu pre Äo moÅ¾no najviac implementaÄnÃ½ch jazykov."
343,78,0.479,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"sa potom ukladajÃº do databÃ¡zy, ako je naprÃ­klad PostgreSQL, a mÃ´Å¾u sa na nich vykonaÅ¥ rÃ´zne dopyty. V praxi sa pouÅ¾Ã­vajÃº dva typy indexerov - vÅ¡eobecnÃ© a vlastnÃ©. VÅ¡eobecnÃ© indexery, ako je naprÃ­klad Moralis alebo Alchemy, indexujÃº vÅ¡eobecnÃ© dÃ¡ta, ako sÃº ERC20 tokeny. VlastnÃ© indexery, ako je naprÃ­klad The Graph, SubSquid alebo SubQuery, umoÅ¾ÅujÃº indexovaÅ¥ vÅ¡etky dÃ¡ta na blockchaine a vytvÃ¡raÅ¥ vlastnÃº schÃ©mu. VÃ½hodou pouÅ¾itia indexerov je, Å¾e zlepÅ¡ujÃº pouÅ¾Ã­vateÄ¾skÃ½ zÃ¡Å¾itok tÃ½m, Å¾e zrÃ½chÄ¾ujÃº naÄÃ­tanie dÃ¡t a umoÅ¾ÅujÃº analytickÃ© dotazy. NevÃ½hodou je, Å¾e ich nastavenie mÃ´Å¾e byÅ¥ zloÅ¾itÃ© a mÃ´Å¾u byÅ¥ pomalÃ© pri spracovanÃ­ veÄ¾kÃ©ho mnoÅ¾stva dÃ¡t. DecentralizovanÃ© aplikÃ¡cie sÃº veÄ¾mi praktickÃ© a majÃº veÄ¾kÃ½ potenciÃ¡l a prÃ¡ve vÄaka indexeru sa z nich mÃ´Å¾u staÅ¥ jednoduchÃ© a rÃ½chle aplikÃ¡cie na kaÅ¾dodennÃ© pouÅ¾itie. AvÅ¡ak, ako vÅ¡etko, aj ony majÃº svoje vÃ½hody a nevÃ½hody. DÃ´leÅ¾itÃ© je vedieÅ¥, kedy a ako ich pouÅ¾iÅ¥. Aj zle nastavenÃ½ indexer mÃ´Å¾e spraviÅ¥ obrovskÃ© problÃ©my. V praxi, ak dÃ¡me SubSquidu indexovaÅ¥ vÅ¡etko, Äo dokÃ¡Å¾e, dosiahneme veÄ¾kosÅ¥ Postgres databÃ¡zy v nÃ¡sobkoch vÃ¤ÄÅ¡iu, ako je samotnÃ½ blockchain. KeÄÅ¾e SubSquid spracovÃ¡va dÃ¡ta rÃ½chlosÅ¥ou 50 000-krÃ¡t za sekundu, nemÃ´Å¾eme sledovaÅ¥ vÅ¡etko, takÅ¾e nÃ¡m mÃ´Å¾u pomÃ´cÅ¥ logy. Bez logov by to bolo rÃ½chlejÅ¡ie, ale s nimi aspoÅ vieme, Äo sa deje. Je to uÅ¾itoÄnÃ©, keÄ sa nieÄo pokazÃ­ alebo keÄ vidÃ­me nejakÃ© nesÃºvisiace dÃ¡ta. Potom si vieme vytvoriÅ¥ event, ktorÃ½ nÃ¡m zaznamenÃ¡ nejakÃº ÄasovÃº peÄiatku, vytvoriÅ¥ si novÃº kolekciu, pridaÅ¥ do nej vybranÃ© dÃ¡ta a opÃ½taÅ¥ sa, Äi mÃ¡ nejakÃ© metadÃ¡ta. Ak Ã¡no, mÃ´Å¾eme ich uloÅ¾iÅ¥ na IPFS ako decentralizovanÃ© ÃºloÅ¾isko. Takto efektÃ­vne sa dajÃº spracovaÅ¥ dÃ¡ta, Äi uÅ¾ je to EVM, Substrate alebo nieÄo inÃ©. Ako zaÄaÅ¥ so SubSquidom? MajÃº veÄ¾mi dobre spracovanÃº dokumentÃ¡ciu 2, ktorÃ¡ prevedie od zaÄiatku aÅ¾ po pokroÄilÃ© indexovacie sluÅ¾by. Ak ste uÅ¾ pouÅ¾Ã­vali naprÃ­klad Create React App, mÃ´Å¾ete pouÅ¾iÅ¥ SubSquid init, nainÅ¡talovaÅ¥ si to cez npm sqd, daÅ¥ init, daÅ¥ nÃ¡zov svojho Squidu, daÅ¥ mÃ­nus mÃ­nus template, vygenerovaÅ¥ si Squid, daÅ¥ mu adresu alebo Å¡pecifickÃ½ kontrakt ABI, ktorÃ© eventy, ktorÃ© funkcie a daÅ¥ to na ethereum mainnet, spustiÅ¥ databÃ¡zu, migrovaÅ¥ to a beÅ¾aÅ¥. Je to najefektÃ­vnejÅ¡Ã­ nÃ¡stroj, keÄ potrebujete Å¡kÃ¡lovaÅ¥ svoju aplikÃ¡ciu, Äi uÅ¾ je to od liquidity miningu"
111,90,0.478,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Ciele Jednou z najdÃ´leÅ¾itejÅ¡Ã­ch poÅ¾iadaviek pri vytvÃ¡ranÃ­ dobrÃ©ho dotaznÃ­ka je dobre definovanÃ½ cieÄ¾. MusÃ­te vedieÅ¥, preÄo prieskum realizujete, akÃ© informÃ¡cie chcete zÃ­skaÅ¥, Äo sa chcete dozvedieÅ¥ o svojich pouÅ¾Ã­vateÄ¾och a na Äo budÃº Ãºdaje pouÅ¾itÃ©. VÅ¾dy je tieÅ¾ dobrÃ© poloÅ¾iÅ¥ si otÃ¡zku, Äi by ste namiesto prieskumu nemohli zÃ­skaÅ¥ informÃ¡cie nejakÃ½m inÃ½m, moÅ¾no lepÅ¡Ã­m spÃ´sobom (napr. pomocou inÃ½ch nÃ¡strojov a UX metrÃ­k alebo pomocou Ãºdajov z analÃ½zy webovÃ½ch strÃ¡nok). DotaznÃ­k nie je len nÃ¡hodnÃ½ zoznam otÃ¡zok, ale je to Å¡pecifickÃ½ nÃ¡stroj navrhnutÃ½ s konkrÃ©tnym cieÄ¾om. ZvyÄajne, keÄ vytvÃ¡rate dotaznÃ­k, mÃ¡te nejakÃ½ problÃ©m, ktorÃ½ potrebujete vyrieÅ¡iÅ¥, alebo otÃ¡zku, na ktorÃº potrebujete odpoveÄ. Podnety mÃ´Å¾u pochÃ¡dzaÅ¥ z rÃ´znych zdrojov â zo stretnutÃ­ so zainteresovanÃ½mi stranami, z analytickÃ½ch Ãºdajov, z podpory pouÅ¾Ã­vateÄ¾ov, z prieskumu trhu alebo dokonca zo samotnÃ©ho procesu nÃ¡vrhu produktu Äi sluÅ¾by. PredtÃ½m, ako zaÄnete vytvÃ¡raÅ¥ otÃ¡zky do"
276,16,0.478,ZÃKLADY KONFIGURÃCIE PREPÃNACÃCH A SMEROVACÃCH...,"privilegovanom reÅ¾ime pomÃ½lime. IOS interpretuje nerozpoznanÃ½ prÃ­kaz ako domÃ©novÃ© meno a snaÅ¾Ã­ sa kontaktovaÅ¥ DNS (Domain Name System) server. KeÄÅ¾e sa s nÃ­m nevie skontaktovaÅ¥, musÃ­me poÄkaÅ¥ kÃ½m vyprÅ¡Ã­ ÄasovaÄ niekoÄ¾kokrÃ¡t a zariadenie to nakoniec vzdÃ¡. Na preruÅ¡enie takÃ©hoto vyhÄ¾adÃ¡vania mÃ´Å¾eme pouÅ¾iÅ¥ tzv. âescape sequenceâ, ktorÃº predstavuje kombinÃ¡cia klÃ¡ves CTRL+SHIFT+6+X. VhodnÃ© je vÅ¡ak funkciu vyhÄ¾adÃ¡vania domÃ©novÃ½ch mien Ãºplne deaktivovaÅ¥ pomocou nasledujÃºceho prÃ­kazu."
43,275,0.478,Objektovo orientovanÃ© programovanie v C++,"CviÄenia 1. Vytvorte triedu rastlina, ktorÃ¡ bude maÅ¥ tri Ãºdaje â nÃ¡zov, minimÃ¡lnu teplotu, ktorÃº rastlina potrebuje a maximÃ¡lnu teplotu, ktorÃº znesie. Tieto tri Ãºdaje sa nastavia v konÅ¡truktore, zvyÅ¡nÃº ÄasÅ¥ objektovej Å¡truktÃºry doplÅte sami. V programe vytvorte dynamickou alokÃ¡ciou dva objekty triedy rastlina. Potom rozhodnite, Äi by ste tieto dve rastliny mohli pestovaÅ¥ na jednom mieste (podÄ¾a minimÃ¡lnej a maximÃ¡lnej teploty, ktorÃº znesÃº). 2. Vytvorte triedu autobus, ktorÃ¡ bude maÅ¥ tieto Ãºdaje: â¢ identiï¬kaÄnÃ© ÄÃ­slo autobusu â¢ ÄÃ­slo linky â¢ poÄet miest â¢ pojazdnosÅ¥ â¢ Ãºdaj, Äi je autobus voÄ¾nÃ½ ÄalÅ¡iu Å¡truktÃºru triedy (jej metÃ³dy) navrhnite sami. Program naÄÃ­ta zoznam autobusov do dynamicky alokovanÃ©ho poÄ¾a, buÄ z klÃ¡vesnice alebo zo sÃºboru. Na niektorej linke vypadol autobus a treba poslaÅ¥ zÃ¡loÅ¾nÃ½. Program naÄÃ­ta ÄÃ­slo linky a poÄet miest, ktorÃ© by autobus mal maÅ¥. Potom nÃ¡jde v zozname, Äi je voÄ¾nÃ½ nejakÃ½ pojazdnÃ½ autobus, ktorÃ½ mÃ¡ danÃº kapacitu. Prednostne vyhÄ¾adÃ¡, Äi je voÄ¾nÃ½ autobus, ktorÃ½ jazdÃ­ na danej linke, ak nie, aÅ¾ potom hÄ¾adÃ¡ aj medzi ostatnÃ½mi. VypÃ­Å¡e prvÃ½ voÄ¾nÃ½ autobus, ktorÃ½ spÄºÅa danÃ© podmienky. 3. Predstavte si, Å¾e pracujete v nÃ­zkonÃ¡kladovÃ½ch aerolÃ­niÃ¡ch a vaÅ¡ou Ãºlohou je stanoviÅ¥ ceny leteniek pre rÃ´zne lety. VaÅ¡a cenovÃ¡ politika je takÃ¡, Å¾e niekoÄ¾ko miest v lietadle sa predÃ¡ za nÃ­zke akciovÃ© ceny a zvyÅ¡ok miest za plnÃ© ceny tak, aby mnoÅ¾stvo utÅÅ¾enÃ½ch peÅazÃ­ prevÃ½Å¡ilo nÃ¡klady na let. KaÅ¾dÃ½ let je danÃ½ niekoÄ¾kÃ½mi Ãºdajmi: â¢ miesto odletu â¢ miesto prÃ­letu â¢ poÄet miest v lietadle â¢ poÄet miest za akciovÃº cenu â¢ akciovÃ¡ cena â¢ poÄet miest za plnÃº cenu â¢ plnÃ¡ cena"
94,476,0.477,Sprievodca svetom vedeckÃ©ho publikovania,"individuÃ¡lnych benefitov pre konkrÃ©tnych klientov. Typy takÃ½chto sluÅ¾ieb podÄ¾a zamerania: tvorba obsahu, zdokonalenie produktov, asistencia a zdieÄ¾anie rieÅ¡enia. PrÃ­klady takÃ½chto sluÅ¾ieb: Experts-Exchange â v tomto virtuÃ¡lnom priestore moÅ¾no zakÃºpiÅ¥ odpovede na svoje otÃ¡zky. PortÃ¡ly fungujÃºce na princÃ­pe voÄ¾nej vÃ½meny znalostÃ­ (free knowledge exchange): Quora, Ask Metafilter, Yahoo! Answers, Wikipediaâs Reference Desk alebo 3form Free Knowledge Exchange. kolaboratÃ³rium â virtuÃ¡lna platforma na medzinÃ¡rodnÃº prezentÃ¡ciu vÃ½skumnÃ½ch aktivÃ­t s moÅ¾nosÅ¥ou vzÃ¡jomnej interakcie medzi vedcami, na zdieÄ¾anie dÃ¡t a elektronickÃ½ch zdrojov a prÃ­stup k zdrojom digitÃ¡lnych kniÅ¾nÃ­c. NeskÃ´r sa toto ponÃ­manie rozÅ¡Ã­rilo na priestor pre realizÃ¡ciu experimentÃ¡lneho a empirickÃ©ho vÃ½skumu aÅ¾ na tzv. open space pre kreatÃ­vne aktivity jednotlivcov a skupÃ­n spojenÃ© s rieÅ¡enÃ­m konkrÃ©tnych vedeckÃ½ch problÃ©mov, t. j. ide o virtuÃ¡lny priestor pre realizÃ¡ciu kolektÃ­vnej inteligencie. komunikÃ¡cia â vÃ½mena informÃ¡ciÃ­ prostrednÃ­ctvom spoloÄnej sÃºstavy symbolov (z latinskÃ©ho communicare, radiÅ¥ sa, diskutovaÅ¥, communicatio, spoloÄnÃ¡ ÃºÄasÅ¥). megaÄasopis â vedeckÃ½ Äasopis publikujÃºci otvorenÃ½m prÃ­stupom na internete veÄ¾kÃ© mnoÅ¾stvo ÄlÃ¡nkov v dÃ´sledku redakÄnej politiky, ktorÃ¡ je menej selektÃ­vna ako u beÅ¾nÃ½ch vedeckÃ½ch Äasopisov (tzv. âsoundness only peer reviewââ posudzuje kvalitu metodickÃ©ho spracovania ÄlÃ¡nku a hodnotenie jeho vedeckÃ©ho vÃ½znamu nechÃ¡va na komunite), napr. PLOS One, e-Life, PeerJ a pod. meta-analÃ½za â sÃºhrnnÃ¡ analÃ½za vypracovanÃ¡ z mnohÃ½ch Å¡tÃºdiÃ­ uverejnenÃ½ch v sÃºvislosti s jednÃ½m problÃ©mom alebo javom. metadÃ¡ta â Å¡truktÃºrovanÃ© Ãºdaje nesÃºce informÃ¡cie o primÃ¡rnych dÃ¡tach (napr. knihe alebo ÄlÃ¡nku v elektronickom Äasopise). MÃ´Å¾u to byÅ¥ informÃ¡cie o type primÃ¡rneho dokumentu, jeho zdroji, uloÅ¾enÃ­, rozsahu, Äase, kedy bol naposledy zmenenÃ½, alebo inÃ© Ãºdaje. Å truktÃºra a formÃ¡t metadÃ¡t bÃ½vajÃº Å¡tandardizovanÃ©. Existuje niekoÄ¾ko typov metadÃ¡t, napr. deskriptÃ­vne, Å¡trukturÃ¡lne, referenÄnÃ©, Å¡tatistickÃ© s ÄalÅ¡Ã­mi sub-typmi. MetadÃ¡ta sÃº zvyÄajne Å¡truktÃºrovanÃ© podÄ¾a urÄitej konkrÃ©tnej Å¡tandardizovanej koncepcie s pouÅ¾itÃ­m definovanej schÃ©my metadÃ¡t (prvkov). MetadÃ¡tovÃ© schÃ©my vytvÃ¡rajÃº nÃ¡sledne systÃ©m metadÃ¡tovÃ½ch Å¡tandardov a metadÃ¡tovÃ½ch modelov. VÃ½sledkom ÄalÅ¡ej Å¡tandardizÃ¡cie sÃº potom naprÃ­klad rÃ´zne kontrolovanÃ© slovnÃ­ky, taxonÃ³mie, slovnÃ­ky, metadÃ¡tovÃ© registre a pod., ktorÃ© prispievajÃº k ÄalÅ¡ej Å¡tandardizÃ¡cii. K najznÃ¡mejÅ¡Ã­m metadÃ¡tovÃ½m Å¡tandardom patrÃ­ Dublin Core. obÄianska veda (citizen science alebo aj crowd science, civic science, volunteer monitoring alebo networked science, v slovenÄine je niekedy pouÅ¾Ã­vanÃ½ aj termÃ­n dobrovoÄ¾nÃ­cka veda) â projekty navrhnutÃ© a vedenÃ© kvalifikovanÃ½mi vedcami tak, aby umoÅ¾Åovali participÃ¡ciu verejnosti. Äasto sa jednÃ¡ o prÃ¡cu s veÄ¾kÃ½mi sÃºbormi dÃ¡t, ktorÃ© by malÃ¡ skupina vedcov nedokÃ¡zala vlastnÃ½mi silami dosÅ¥ rÃ½chlo analyzovaÅ¥, napr. fotografie z vesmÃ­rnych sond, alebo digitalizovanÃ© tkanivovÃ© rezy, na ktorÃ½ch (Äasto formou poÄÃ­taÄovej hry) ÃºÄastnÃ­ci projektu hÄ¾adajÃº vybranÃ© Å¡truktÃºry. NavzÃ¡jom sa kontrolujÃº (jednu vzorku analyzujÃº nezÃ¡visle viacerÃ­), ÄÃ­m zniÅ¾ujÃº pravdepodobnosÅ¥ chÃ½b."
190,243,0.477,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ãno, je to pravda. Aj keÄ je projekt malÃ½, stÃ¡le je to projekt a treba ho za projekt povaÅ¾ovaÅ¥. Ak v malom projekte nebudeme vedieÅ¥, Äo je naÅ¡ou Ãºlohou, nebudeme poznaÅ¥ techniky, prostriedky a zdroje potrebnÃ© pre naÅ¡u prÃ¡cu, nemÃ´Å¾eme ÄakaÅ¥ Ãºspech. Ak nÃ¡m dokonca nebude znÃ¡my ani Äas, dokedy treba prÃ¡ce ukonÄiÅ¥, tak sa mÃ´Å¾e staÅ¥, Å¾e sa celÃ© vynaloÅ¾enÃ© Ãºsilie ukÃ¡Å¾e ako zbytoÄnÃ©. Ak sa nezaobÃ­deme bez plÃ¡novania projektov ako takÃ½ch, nezaobÃ­deme sa ani bez plÃ¡novania projektov menÅ¡ieho rozsahu."
195,167,0.477,OdporÃºÄanie pre softvÃ©rovÃ½ch inÅ¾inierov,"OdporÃºÄacie systÃ©my orientovanÃ© na znovupouÅ¾itie kÃ³du Takto je zabezpeÄenÃ©, Å¾e odporÃºÄacÃ­ systÃ©m si je vÅ¾dy vedomÃ½ kontextu, v ktorom pouÅ¾Ã­vateÄ¾ aktuÃ¡lne vyvÃ­ja a chcel zÃ­skaÅ¥ odporÃºÄenie. Zbieranie dÃ¡t s vytvÃ¡ranÃ­m kontextu a nÃ¡slednÃ½m spustenÃ­m vyhÄ¾adÃ¡vania musÃ­ prebiehaÅ¥ v rozumnÃ½ch ÄasovÃ½ch intervaloch a s mierou. NevhodnÃ½m spÃ´sobom je zaÄatie zbierania kontextu vÅ¾dy po stlaÄenÃ­ akÃ©hokoÄ¾vek tlaÄidla klÃ¡vesnice, Äo mÃ¡ za nÃ¡sledok neÃºmernÃ© zaÅ¥aÅ¾enie systÃ©mu. PrincÃ­pom celÃ©ho tohto procesu je pred pripraviÅ¥ si zoznam znovupouÅ¾iteÄ¾nÃ½ch kÃºskov zdrojovÃ½ch kÃ³dov v nÃ¡povedi eÅ¡te pred tÃ½m, ako sa pouÅ¾Ã­vateÄ¾ rozhodne ich nÃ¡jsÅ¥. Okrem samostatnÃ©ho zberu Ãºdajov, ktorÃ½ prebieha paralelne popri aktuÃ¡lnej Äinnosti pouÅ¾Ã­vateÄ¾a, je moÅ¾nÃ© agentovi daÅ¥ vedieÅ¥ zÃ¡ujem pouÅ¾Ã­vateÄ¾a o vyhÄ¾adanie znovupouÅ¾iteÄ¾nÃ½ch kÃºskov kÃ³dov, napr. prostrednÃ­ctvom klÃ¡vesovej skratky. VÃ¤ÄÅ¡inou to bÃ½vajÃº prÃ­pady, keÄ pouÅ¾Ã­vateÄ¾ chce poradiÅ¥, Äi aktuÃ¡lne vytvorenÃ½ zdrojovÃ½ kÃ³d nie je podobnÃ½ niektorÃ©mu uÅ¾ predtÃ½m vytvorenÃ©mu fragmentu. InfraÅ¡truktÃºra vyhÄ¾adÃ¡vania JednotlivÃ© kÃºsky zdrojovÃ½ch kÃ³dov je potrebnÃ© niekde uchovÃ¡vaÅ¥, aby bolo moÅ¾nÃ© s nimi vykonÃ¡vaÅ¥ ÄalÅ¡ie operÃ¡cie, napr. vyhÄ¾adÃ¡vanie, porovnÃ¡vania existujÃºcich kÃºskov kÃ³du s novÃ½mi, prÃ­p. pridÃ¡vaÅ¥ novÃ© kÃºsky kÃ³du. UchovÃ¡vanie kÃºskov zdrojovÃ½ch kÃ³dov je dobrÃ© oddeliÅ¥ od zvyÅ¡nej Äasti odporÃºÄacieho systÃ©mu do formy databÃ¡zy, ktorÃ¡ bude uchovÃ¡vaÅ¥ a pracovaÅ¥ s veÄ¾kÃ½m mnoÅ¾stvom malÃ½ch ÄastÃ­ kusov zdrojovÃ©ho kÃ³du. K jednotlivÃ½m Äastiam kusov zdrojovÃ½ch kÃ³dov je moÅ¾nÃ© si napr. znaÄiÅ¥ ich uÅ¾itoÄnosÅ¥ a vhodnosÅ¥, ÄÃ­m sa spresnÃ­ vÃ½ber pri nÃ¡povede. Ako databÃ¡zu je moÅ¾nÃ© pouÅ¾iÅ¥ akÃºkoÄ¾vek relaÄnÃº databÃ¡zu, napr. Oracle, Microsoft SQL Server, MySQL alebo PostgreSQL. V prÃ­pade pouÅ¾itia tohto rieÅ¡enia je dobrÃ© umiestniÅ¥ databÃ¡zu na samostatnÃ½ server, ktorÃ½ poskytuje dostatoÄnÃ½ vÃ½kon bez obmedzovania ostatnÃ½ch ÄastÃ­, priÄom odporÃºÄacÃ­ systÃ©m musÃ­ komunikovaÅ¥ a udrÅ¾iavaÅ¥ spojenie s databÃ¡zou prostrednÃ­ctvom internetovÃ©ho pripojenia, Äo mÃ´Å¾e spÃ´sobiÅ¥ urÄitÃ© spomalenie. AvÅ¡ak z hÄ¾adiska vÃ½konu a minimalizÃ¡cie Äasu potrebnÃ©ho na vyhÄ¾adÃ¡vanie je vhodnejÅ¡ie pouÅ¾iÅ¥ dokumentovo orientovanÃ© textovÃ© databÃ¡zy, napr. Lucene/Solr, alebo NoSQL databÃ¡zy, akou je MongoDB. Tieto databÃ¡zy je moÅ¾nÃ© pouÅ¾iÅ¥ aj v rÃ¡mci odporÃºÄaÄa bez potreby pouÅ¾itia dodatoÄnÃ©ho hardvÃ©ru. Vyberanie a radenie odporuÄenÃ­ Len Äo sa z databÃ¡zy vytiahnu vÃ½sledky, je moÅ¾nÃ© ich povaÅ¾ovaÅ¥ za finÃ¡lne a ponÃºknuÅ¥ pouÅ¾Ã­vateÄ¾ovi na pouÅ¾itie, napr. vo forme prvÃ½ch desiatich nÃ¡jdenÃ½ch zhÃ´d. AvÅ¡ak pouÅ¾Ã­vateÄ¾ pri poÅ¾iadavke o nÃ¡jdenie podobnostÃ­ oÄakÃ¡va, Å¾e nÃ¡jdenÃ© podobnosti sa mu odporuÄia zoradenÃ½m spÃ´sobom zostupne, kde na prvom mieste bude kandidÃ¡t s najvyÅ¡Å¡ou zhodou podobnosti. To je moÅ¾nÃ© za pomoci takzvanej Å¡pekulatÃ­vnej analÃ½zy [4], keÄ pred samotnÃ½m zobrazenÃ­m budÃº vÃ½sledky ohodnotenÃ© a upravÃ­ sa poradie zobrazovania. Tento modul pre Ãºpravu zobrazovania vÃ½sledkov mÃ´Å¾e byÅ¥ vytvorenÃ½ dvoma spÃ´sobmi:"
135,268,0.477,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 4,"3.7.2 Paralelizmus na Ãºrovni procesov Pri hrubej granularite sa zameriavame na paralelizmus vo vykonÃ¡vanÃ­ programu na Ãºrovni samostatne vykonÃ¡vanÃ½ch postupnostÃ­ inÅ¡trukciÃ­, o om pojednÃ¡va tÃ¡to podkapitola. Proces, vlÃ¡kno Proces je artefaktom operanÃ©ho systÃ©mu. Jeden proces vÅ¡ak mÃ´Å¾e prebieha vo viacerÃ½ch vlÃ¡knach (angl. threads). VÃ½hodou tÃ½chto vlÃ¡kien je niÅ¾Å¡ia rÃ©Å¾ia pri ich prepÃ­nanÃ­, pretoÅ¾e sa spÃºÅ¡ajÃº v spolonom adresnom priestore. Na zÃ¡klade tÃ½chto vlastnostÃ­ sa vlÃ¡kna zvyknÃº nazÃ½va aj odahenÃ© procesy. Na druhÃº stranu vyplÃ½va z pouÅ¾itia spolonÃ©ho pamÃ¤ovÃ©ho priestoru menÅ¡ie vzÃ¡jomnÃ© zabezpeenie vlÃ¡kien. Na zÃ¡klade paralelizÃ¡cie vykonÃ¡vania poznÃ¡me:"
94,208,0.476,Sprievodca svetom vedeckÃ©ho publikovania,"CitÃ¡cia v odbore, kde citovanosÅ¥ nie je vysokÃ¡, mÃ¡ relatÃ­vne vyÅ¡Å¡iu âhodnotuâ a naopak. CitaÄnÃ¡ metrika SNIP hodnotÃ­ citaÄnÃ© Ãºdaje Äasopisu v kontexte jednotlivÃ½ch vedeckÃ½ch odborov. SNIP reprezentuje citaÄnÃ½ potenciÃ¡l Äasopisu odvodenÃ½ z citaÄnÃ½ch zvyklostÃ­ danÃ©ho odboru."
76,133,0.476,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"2.3 DistribuÄnÃ¡ funkcia Zopakujme, Å¾e nÃ¡hodnÃ¡ veliÄina je po pravdepodobnostnej strÃ¡nke znÃ¡ma, keÄ poznÃ¡me jej rozdelenie. To znamenÃ¡, Å¾e dokÃ¡Å¾eme stanoviÅ¥ hodnoty P( ï£ < ), pre akÃ©koÄ¾vek , ïR. InÃ½mi slovami, vieme urÄiÅ¥ pravdepodobnosÅ¥ toho, Å¾e v pokuse sa realizuje hodnotou, ktorÃ¡ leÅ¾Ã­ v intervale â¨ Ak je diskrÃ©tna veliÄina a dobnostnÃ¡ funkcia vzÅ¥ahom"
59,249,0.476,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"Na Obr. 4.13 sÃº znÃ¡zornenÃ© vÃ½sledky naÅ¡ich simulaÄnÃ½ch vÃ½poÄtov v dvoch verziÃ¡ch so zahrnutÃ­m uÄenia, ale jedna verzia neobsahuje memetickÃº informÃ¡ciu, zatiaÄ¾ Äo druhÃ¡ verzia ju obsahuje. VidÃ­me, Å¾e zahrnutie mÃ©mov do GA s uÄenÃ­m podstatne zvyÅ¡uje jeho"
111,118,0.476,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"KvalitnejÅ¡ia podpora zÃ¡kaznÃ­kov PrÃ¡ca technickej podpory je nÃ¡roÄnÃ¡ na technickÃ© zruÄnosti, ako aj na trpezlivosÅ¥. NahrÃ¡vanie sedenÃ­ dokÃ¡Å¾e pomÃ´cÅ¥ pracovnÃ­kom technickej podpory s niektorÃ½mi z nasledujÃºcich problÃ©mov: â¢ Ako prinÃºtiÅ¥ pouÅ¾Ã­vateÄ¾a, aby poskytol celÃ½ kontext, aby som mohol vyrieÅ¡iÅ¥ jeho problÃ©m? â¢ Neexistuje lepÅ¡Ã­ spÃ´sob, ako vÅ¾dy Å¾iadaÅ¥ pouÅ¾Ã­vateÄ¾a o snÃ­mku obrazovky? â¢ PouÅ¾Ã­vatelia sÃº zvyÄajne uÅ¾ frustrovanÃ­, ak veci nefungujÃº tak, ako by mali. Ako mÃ´Å¾em od frustrovanÃ©ho Äloveka zÃ­skaÅ¥ viac informÃ¡ciÃ­? Pomocou jednoduchej identifikÃ¡cie pouÅ¾Ã­vateÄ¾a poskytne nahrÃ¡vanie sedenÃ­ vaÅ¡ej technickej podpore moÅ¾nosÅ¥ priamo zistiÅ¥, Äo nie je v poriadku, a podÄ¾a toho konaÅ¥. Dokonca existujÃº varianty nahrÃ¡vania sedenÃ­ v reÃ¡lnom Äase. PracovnÃ­k technickej podpory vidÃ­ v reÃ¡lnom Äase interakciu predmetnÃ©ho pouÅ¾Ã­vateÄ¾a s rozhranÃ­m a dokÃ¡Å¾e ho tak priamo navigovaÅ¥."
111,110,0.476,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"Obr. 8.3: Pre kaÅ¾dÃº Ãºlohu zÃ­skate rozloÅ¾enie vÅ¡etkÃ½ch kliknutÃ­ naprieÄ stimulom a poÄet respondentov, ktorÃ­ klikli na jednotlivÃ© hotspoty. Ä¾udia nemusia venovaÅ¥ toÄ¾ko Äasu hÄ¾adaniu odpovede a namiesto toho mÃ´Å¾u jednoducho odÃ­sÅ¥. V neposlednom rade dostanete odpovede na svoje ÄalÅ¡ie otÃ¡zky. OpÃ¤Å¥ platÃ­, Å¾e aj keÄ zÃ­skate veÄ¾a sprÃ¡vnych odpovedÃ­, ale odpovede naznaÄujÃº, Å¾e respondenti si neboli istÃ­ svojou voÄ¾bou alebo Å¾e Ãºlohy povaÅ¾ovali za Å¥aÅ¾kÃ©, mali by ste prehodnotiÅ¥ svoj nÃ¡vrh. OtÃ¡zky s voÄ¾nÃ½m textom mÃ´Å¾u tieÅ¾ poskytnÃºÅ¥ uÅ¾itoÄnÃ© informÃ¡cie o postojoch respondentov k vÃ¡Å¡mu produktu. Test prvÃ©ho kliknutia je ÃºÄinnÃ¡ metÃ³da na odhalenie problÃ©mov s pouÅ¾iteÄ¾nosÅ¥ou a oÄakÃ¡vanÃ­ pouÅ¾Ã­vateÄ¾ov. VhodnÃ½ je napr. pre nÃ¡vrhy pouÅ¾Ã­vateÄ¾skÃ½ch rozhranÃ­, ÄiastkovÃ½ch komponentov, ako sÃº formulÃ¡re alebo ponuky. Poskytuje moÅ¾nosÅ¥ pozrieÅ¥ sa na rÃ´zne sprÃ¡vanie pouÅ¾Ã­vateÄ¾ov/respondentov Å¡pecifickÃ© pre konkrÃ©tne Ãºlohy a pozorovaÅ¥ ich nezÃ¡visle od seba. TÃºto metÃ³du moÅ¾no pouÅ¾iÅ¥ v akejkoÄ¾vek fÃ¡ze nÃ¡vrhu, od poÄiatoÄnÃ½ch skÃ­c aÅ¾ po snÃ­mky obrazovky existujÃºcej webovej strÃ¡nky/aplikÃ¡cie."
369,51,0.475,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"pretoÅ¾e uchovÃ¡va vÅ¡etky (aj historickÃ©18) manÅ¾elstvÃ¡. RieÅ¡enie je analogickÃ© ako v prvom prÃ­pade: vytvorenie Å¡pecializovanej triedy pre opakujÃºce sa Ãºdaje. V modeli sa to prejavÃ­ tak, Å¾e vznikne novÃ¡ trieda (ManÅ¾elstvo), ktorÃ¡ bude reprezentovaÅ¥ pÃ´vodnÃº relÃ¡ciu medzi triedami (obr. 1.12). Trieda, ktorÃ¡ reprezentuje relÃ¡ciu, Äasto mÃ¡va aj svoje Å¡pecifickÃ© atribÃºty. V naÅ¡om prÃ­klade je takÃ½mto atribÃºtom dÃ¡tum sobÃ¡Å¡a, ktorÃ½ je Å¡pecifickÃ½ pre kaÅ¾dÃ© manÅ¾elstvo."
184,221,0.475,Å tÃºdie vybranÃ½ch tÃ©m programovÃ½ch a informaÄnÃ½ch 3,"ObrÃ¡zok 3-10. TransformÃ¡cie modelov v MDA. MDA je zastreÅ¡enÃ© radom OMG Å¡tandardov, vrÃ¡tane UML, MOF (Meta-Object Facility), XMI (XML Metadata Interchange) a CWM (Common Warehouse Metamodel) a taktieÅ¾ obsahuje smernice a Å¡tandardy aj pre transformÃ¡cie modelov a generickÃ© sluÅ¾by. Å tandardy MDA tak spoloÄne definujÃº spÃ´sob, ktorÃ½m je aj za pomoci nÃ¡strojov kompatibilnÃ½ch s MDA moÅ¾nÃ© vyvÃ­jaÅ¥ systÃ©my. Modely v MDA je nutnÃ© Å¡pecifikovaÅ¥ v modelovacom jazyku. MÃ´Å¾e Ã­sÅ¥ o vÅ¡eobecnÃ© modelovacie jazyky pouÅ¾iteÄ¾nÃ© vo viacerÃ½ch domÃ©nach (napr. UML), ale aj o domÃ©novo Å¡pecifickÃ© modelovacie jazyky. MOF tu zohrÃ¡va Ãºlohu metamodelovacieho jazyka, ktorÃ½ umoÅ¾Åuje Å¡pecifikovaÅ¥ inÃ© modelovacie jazyky a zÃ¡roveÅ definuje spÃ´sob ukladania modelov vytvorenÃ½ch v tÃ½chto jazykoch do XML dokumentov. AkÃ½koÄ¾vek existujÃºci modelovacÃ­ jazyk je teda po vytvorenÃ­ jeho MOF reprezentÃ¡cie uÅ¾ moÅ¾nÃ© povaÅ¾ovaÅ¥ za kompatibilnÃ½ s MDA. PrÃ­kladmi takto definovanÃ½ch modelovacÃ­ch jazykov sÃº, aj keÄ pomerne vÅ¡eobecnÃ©, UML a CWM, ktorÃ© sÃº zÃ¡roveÅ sÃºÄasÅ¥ou balÃ­ka MDA Å¡tandardov. ZatiaÄ¾ Äo UML sa sÃºstreÄuje skÃ´r na objektovÃ© modelovanie, CWM sa naopak zameriava na dÃ¡tovÃ© modelovanie. Spojenie XMI a MOF navyÅ¡e umoÅ¾Åuje automatickÃº serializÃ¡ciu modelov do Å¡tandardizovanÃ½ch XML dokumentov, ÄÃ­m sa zvyÅ¡ujÃº moÅ¾nosti ÄalÅ¡ieho spracovania modelov v rÃ´znych nÃ¡strojoch. PrÃ­kladom takÃ©hoto ÃºspeÅ¡nÃ©ho vyuÅ¾itia XMI je Å¡tandardizovanÃ¡ XML schÃ©ma pre UML modely slÃºÅ¾iaca ako vÃ½mennÃ½ formÃ¡t medzi modelovacÃ­mi nÃ¡strojmi. MDA sa snaÅ¾Ã­ pokryÅ¥ vÅ¡etky fÃ¡zy procesu vÃ½voja softvÃ©ru, od domÃ©novÃ½ch modelov, cez analytickÃ© a nÃ¡vrhovÃ© modely aÅ¾ po modely samotnÃ©ho kÃ³du, priÄom dÃ´raz sa kladie na Å¡tandardizÃ¡ciu vÃ½mennÃ½ch formÃ¡tov samotnÃ½ch modelov."
76,12,0.475,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"rÃ­me aditivita. Je uÅ¾itoÄnÃ© sledovaÅ¥, ako budeme argumentovaÅ¥ pri obhajovanÃ­ toho, Å¾e kaÅ¾dÃ¡ pravdepodobnosÅ¥ je aditÃ­vna. 1.1.2 PrÃ­klad. Nech pokus spoÄÃ­va v nÃ¡hodnom Å¥ahanÃ­ guÄ¾ky zo Å¡katule, ktorÃ¡ obsahuje 10 guliek: 5 bielych, 3 modrÃ© a 2 ÄervenÃ©. Za vÃ½sledok opÃ¤Å¥ povaÅ¾ujeme farbu vytiahnutej guÄ¾ky. ÄÃ­m sa takÃ½to pokus lÃ­Å¡i od pokusu z 1.1.1? Zrejme ï, S sÃº rovnakÃ© ako v 1.1.1, ale P bude inÃ¡, veÄ vytiahnutie bielej mÃ¡ vÃ¤ÄÅ¡iu pravdepodobnosÅ¥, ako vytiahnutie modrej, alebo Äervenej. KeÄÅ¾e vytiahnutie kaÅ¾dej (z tÃ½ch desiatich guliek) je rovnako moÅ¾nÃ©, tak kladieme P({b}) = 0.5 (pretoÅ¾e 5 z desiatich realizujÃº udalosÅ¥ {b}), P({m})= 0.3 (pretoÅ¾e 3 z desiatich realizujÃº udalosÅ¥ {m}), P({Ä}) = 0.2 (pretoÅ¾e 2 z desiatich realizujÃº udalosÅ¥ {Ä}). TakÃ½to postup je zaiste v zhode s intuÃ­ciou, resp. so skÃºsenosÅ¥ou. MÃ´Å¾eme povedaÅ¥ aj to, Å¾e postupujeme v zhode so znÃ¡mou Laplaceovou definÃ­ciou (mimochodom, s oznaÄenÃ­m definÃ­cia sa dÃ¡ v tomto prÃ­pade polemizovaÅ¥), ktorÃº vÅ¡ak vzÅ¥ahujeme na pomocnÃ½ priestor ï , ktorÃ½ mÃ¡ 10 rovnako moÅ¾nÃ½ch âprvotnÃ½ch vÃ½sledkovâ: ï = {b1, b2, b3, b4, b5, m1, m2, m3, Ä1, Ä2}. Analogicky ako v 1.1.1 (odvolÃ¡vajÃºc sa na aditivitu P), urÄÃ­me pravdepodobnosti udalostÃ­ A = {b, m}, B = {b, Ä}, C = {m, Ä}. Teraz pravdepodobnosÅ¥ P urÄuje tabuÄ¾ka"
59,478,0.475,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"9.4 RevÃ­zia teÃ³rie Nech ï ï½ ï»ïª1 ,ïª2 ,...,ïªn ï½ je konzistentnÃ¡ teÃ³ria, ktorÃ¡ je rozÅ¡Ã­renÃ¡ o novÃ© poznatky z konzistentnej mnoÅ¾iny ï, priÄom novÃ¡ teÃ³ria ïï¢ ï½ ï ï ï stÃ¡va sa nekonzistentnou. ProblÃ©m revÃ­zie potom spoÄÃ­va v tom, Å¾e hÄ¾adÃ¡me takÃº minimÃ¡lnu mnoÅ¾inu formÃºl ï ï ï , ktorÃº keÄ odpoÄÃ­tame od ïï¢ , dostaneme maximÃ¡lnu konzistentnÃº teÃ³riu ïï¢ï¢ ï½ ï¨ ï ï ï ï© ï­ ï , ktorÃ¡ nie je podmnoÅ¾inou pÃ´vodnej teÃ³rie ïï¢ï¢ ï ï . To znamenÃ¡, Å¾e pri kontrakcii sa snaÅ¾Ã­me uchovaÅ¥ novÃ© poznatky z ï a odstraÅovaÅ¥ len poznatky z pÃ´vodnej teÃ³rie ï, pozri Obr. 9.4. Z tÃ½chto ÃºvodnÃ½ch poznÃ¡mok opÃ¤Å¥ vyplÃ½va, Å¾e proces revÃ­zie nie je jednoznaÄnÃ½ a preto musÃ­me pouÅ¾iÅ¥ âmimologickÃ©â prostriedky na aspoÅ ÄiastoÄnÃ© odstrÃ¡nenie tejto nejednoznaÄnosti."
94,325,0.474,Sprievodca svetom vedeckÃ©ho publikovania,"9.2.1.2 IdentifikÃ¡cia autora ZÃ¡kladnou podmienkou vyhÄ¾adania prÃ¡ce konkrÃ©tneho autora a jeho odlÃ­Å¡enia od ostatnÃ½ch je presnÃ¡ identifikÃ¡cia. ProblÃ©mom sa mÃ´Å¾e staÅ¥ najmÃ¤ v situÃ¡cii, keÄ je citovanÃ© iba priezvisko s iniciÃ¡lou krstnÃ©ho mena (v zahraniÄnÃ½ch Äasopisoch Äasto bez diakritiky). PomÃ´cÅ¥ mÃ´Å¾e afiliÃ¡cia (pracovisko), no hoci v minulosti vedec mohol na jednom mieste pracovaÅ¥ aj desiatky rokov, dnes je zvykom striedaÅ¥ zamestnÃ¡vateÄ¾a po niekoÄ¾kÃ½ch rokoch a afiliÃ¡cie v starÅ¡Ã­ch ÄlÃ¡nkoch rÃ½chlo strÃ¡cajÃº aktuÃ¡lnosÅ¥. Meno nie je stopercentnÃ½m identifikÃ¡torom ani v Ã¡zijskÃ½ch krajinÃ¡ch, kde Å¾ije mnoho Ä¾udÃ­ s rovnakÃ½m priezviskom (ale ÄastÃ© priezviskÃ¡ sa vyskytujÃº aj v EurÃ³pe, napr. NovÃ¡k, MÃ¼ller/Miller, Schmied/Smithâ¦), Äo mÃ´Å¾e viesÅ¥ k chybnej evidencii publikaÄnej aktivity. NaprÃ­klad autorky uvÃ¡dzanÃ© ako A. Smith, Anna Smith a Anna L. Smith sÃº tri rÃ´zne osoby, no z dÃ´vodu nÃ¡hodnej zhody mena dochÃ¡dza k nesprÃ¡vnemu priradeniu ich publikÃ¡ciÃ­ nielen voÄ¾ne na internete, ale aj oficiÃ¡lne v rÃ´znych registroch a databÃ¡zach. Å½eny navyÅ¡e po svadbe Äasto prijÃ­majÃº priezvisko manÅ¾ela, Äo sÅ¥aÅ¾uje sledovanie vedeckÃ©ho zÃ¡znamu vÃ½skumnÃ­Äok. Preto vznikla myÅ¡lienka ÄÃ­selnÃ½ch identifikÃ¡torov, ktorÃ© by dokÃ¡zali jednoznaÄne odlÃ­Å¡iÅ¥ menovcov a zÃ¡roveÅ udrÅ¾aÅ¥ kontinuitu zÃ¡znamu aj po zmene mena. Å truktÃºru identifikÃ¡tora tvorÃ­ alfanumerickÃ½ znakovÃ½ kÃ³d, umoÅ¾ÅujÃºci identifikÃ¡ciu mena autora a sÃºvisiace publikovanÃ© prÃ¡ce. Podmienkou je registrÃ¡cia, vytvorenie elektronickÃ©ho 156 https://www.crossref.org/guestquery"
369,99,0.474,AplikaÄnÃ© architektÃºry softvÃ©rovÃ½ch systÃ©mov,"ï· Osoba mÃ¡ zodpovednosÅ¥ za doÄasne vytvorenÃº organizaÄnÃº jednotku (naprÃ­klad projektovÃ½ tÃ­m). ï· Osoba mÃ¡ zodpovednosÅ¥ voÄi celej organizÃ¡cii â zodpovednosÅ¥ou je pracovnÃ¡ zmluva. Pojem zodpovednosÅ¥ je vÅ¡eobecnejÅ¡Ã­ ako pojem pracovnÃ½ vzÅ¥ah a vzor ZodpovednosÅ¥ tak mÃ¡ aj Å¡irÅ¡ie vyuÅ¾itie, naprÃ­klad: ï· Ãloha danÃ¡ pracovnÃ­kovi inÃ½m pracovnÃ­kom (zvyÄajne nadriadenÃ½m). ï· PracovnÃ½ prÃ­kaz pracovnÃ­kovi inÃ½m pracovnÃ­kom â podobne ako Ãºloha. UvedenÃ½ vzor dokonca umoÅ¾Åuje reprezentovaÅ¥ vonkajÅ¡ie vzÅ¥ahy, t. j. vzÅ¥ahy presahujÃºce hranice firmy, naprÃ­klad: ï· Zmluva urÄujÃºca zodpovednosÅ¥ jednej organizÃ¡cie voÄi druhej organizÃ¡cii. ï· Zmluva uzatvorenÃ¡ medzi zÃ¡kaznÃ­kom a firmou na kÃºpu tovaru. ï· DaÅovÃ¡ povinnosÅ¥ osoby alebo firmy voÄi daÅovÃ©mu Ãºradu ï· a inÃ©. OpÃ­sanÃ© moÅ¾nosti vzoru ZodpovednosÅ¥ vedÃº k inÃ©mu vÅ¡eobecnÃ©mu problÃ©mu v oblasti vzorov: voÄ¾by Ãºrovne generalizÃ¡cie. Vysoko generalizovanÃ© vzory majÃº zvyÄajne Å¡irokÃ© vyuÅ¾itie. PouÅ¾itÃ© pojmy v nich vÅ¡ak bÃ½vajÃº natoÄ¾ko vÅ¡eobecnÃ©, Å¾e analytikovi uÅ¾ nenapovedajÃº kedy a akÃ½m spÃ´sobom vzor pouÅ¾iÅ¥. V tejto uÄebnici sa budeme preto pridÅÅ¾aÅ¥ skÃ´r niÅ¾Å¡ej Ãºrovni abstrakcie, aby mal ÄitateÄ¾ (aspoÅ ten skÃºsenejÅ¡Ã­ ï) predstavu o Äom ÄÃ­ta. Z uvedenÃ©ho dÃ´vodu nebudeme v uÄebnici pouÅ¾Ã­vaÅ¥ vzor ZodpovednosÅ¥ v jeho najvÅ¡eobecnejÅ¡ej forme a radÅ¡ej ho v ÄalÅ¡Ã­ch podkapitolÃ¡ch skonkrÃ©tnime na jednotlivÃ© prÃ­pady Äi uÅ¾ pracovnÃ½ch vzÅ¥ahov v rÃ¡mci organizÃ¡cie alebo vonkajÅ¡Ã­ch obchodnÃ½ch vzÅ¥ahov firmy. Na druhej strane mÃ¡ aj vÅ¡eobecnÃ½ vzor ZodpovednosÅ¥ svoj kontext (hranice pouÅ¾iteÄ¾nosti). Pojem zodpovednosÅ¥ mÃ¡ urÄitÃº sÃ©mantiku. V jeho pozadÃ­ je explicitnÃ½ dokument (zmluva, zÃ¡kon, smernica, pÃ­somnÃ½ pracovnÃ½ prÃ­kaz), ktorÃ½ zodpovednosÅ¥ medzi ÃºÄastnÃ­kmi stanovuje. Tento vzor nezahÅÅa akÃ½koÄ¾vek vzÅ¥ah medzi ÃºÄastnÃ­kmi, naprÃ­klad sÃºrodeneckÃ½ vzÅ¥ah medzi osobami alebo konkurenÄnÃ½ vzÅ¥ah medzi firmami. ZodpovednosÅ¥ sa v urÄitÃ½ch prÃ­padoch mÃ´Å¾e tÃ½kaÅ¥ viac neÅ¾ dvoch ÃºÄastnÃ­kov. Ako prÃ­klad slÃºÅ¾ia niektorÃ© zmluvy medzi firmami. Zmluvu podpisujÃº Å¡tatutÃ¡rni zÃ¡stupcovia firiem, ktorÃ½ch mÃ´Å¾e byÅ¥ na kaÅ¾dej strane viac. NavyÅ¡e mÃ´Å¾e zmluva uvÃ¡dzaÅ¥ oprÃ¡vnenÃ© osoby, ktorÃ© majÃº na starosti jej technickÃ© zabezpeÄenie. Podobne, ako sme pÃ´vodne na obr. 2.2 zamÃ½Å¡Ä¾ali pridÃ¡vaÅ¥ ÄalÅ¡ie Å¡pecializovanÃ© relÃ¡cie, to mÃ´Å¾eme urobiÅ¥ aj v modeli na obr. 2.10. VÅ¡eobecnejÅ¡ie rieÅ¡enie, podobne ako na obr. 2.3, spoÄÃ­va v generalizÃ¡ciÃ­ pÃ´vodnÃ½ch dvoch relÃ¡ciÃ­ medzi ÃÄastnÃ­kom a ZodpovednosÅ¥ou formou typovania relÃ¡ciÃ­. Triedu, ktorÃ¡ reprezentuje generalizovanÃº relÃ¡ciu, nazveme Rola ÃºÄastnÃ­ka. Vzor MnohostrannÃ¡ zodpovednosÅ¥, ktorÃ½ vznikol zovÅ¡eobecnenÃ­m vzoru ZodpovednosÅ¥, ukazuje obr. 2.11."
190,160,0.474,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"Ak chceme vytvoriÅ¥ dobrÃ½ plÃ¡n, musÃ­me reÃ¡lne odhadnÃºÅ¥ rizikÃ¡ projektu, potreb- projektovÃ­ nÃ© zdroje, ÄasovÃ½ harmonogram a poÄÃ­taÅ¥ s nepredvÃ­dateÄ¾nÃ½m. CieÄ¾om plÃ¡novamanaÅ¾Ã©ri â nia je okrem inÃ©ho aj manaÅ¾ment rizÃ­k. Uvedomenie si rizÃ­k a kalkulÃ¡cia s nimi optimisti. nÃ¡m umoÅ¾Åuje klÃ¡sÅ¥ dÃ´raz na kritickÃ© aspekty projektu. PodÄ¾a mojich skÃºsenostÃ­ sÃº najhorÅ¡Ã­ projektovÃ­ manaÅ¾Ã©ri optimisti. OptimistickÃ½ projektovÃ½ plÃ¡n zvyÄajne predpokladÃ¡, Å¾e prÃ¡ce na projekte pÃ´jdu ako po masle. TermÃ­ny etÃ¡p sa tvoria s heslom âto je jednoduchÃ©â alebo ânieÄo takÃ© sme uÅ¾ predsa robiliâ. Nie je Å¥aÅ¾kÃ© si predstaviÅ¥ akÃº katastrofu vyvolÃ¡ sebe menÅ¡ia komplikÃ¡cia v procese vÃ½voja. PokÃºsme sa vytvoriÅ¥ dobrÃ½ plÃ¡n. ZaÄnime vytvorenÃ­m realistickÃ©ho plÃ¡nu, v ktorom triezvo zvÃ¡Å¾ime vÅ¡etky aspekty a zahrnieme doÅ manaÅ¾ment rizÃ­k. NÃ¡sledne doÅ vnesme kontrolovanÃ½ zÃ¡van pesimizmu. VerÃ­m, Å¾e prÃ¡ve takto vznikÃ¡ dobrÃ½ plÃ¡n. Venujme sa teraz jednotlivÃ½m etapÃ¡m osobitne."
190,405,0.474,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"pre kaÅ¾dÃº novÃº funkcionalitu tak zÃ­skame komplexnÃº sadu testov, ktorÃ¡ preverÃ­ funkÄnosÅ¥ kÃ³du. Ak testy prejdÃº, vÅ¡etko je v poriadku. Ak testy PrÃ¡ca s kÃ³dom, neprejdÃº? UkÃ¡Å¾u, kde je chyba. Ak sÃº testy dostatoÄne jemne granulovanÃ© ktorÃ½ mÃ¡ len a navzÃ¡jom nezÃ¡vislÃ©, kaÅ¾dÃ½ test overuje prÃ¡ve jednu malÃº vlastnosÅ¥ kÃ³du. minimÃ¡lne alebo Test, ktorÃ½ zlyhÃ¡, tak presne ukÃ¡Å¾e na chybnÃ© miesto v kÃ³de, aj s posÅ¾iadne pokrytie tupom, ako chybu vyvolaÅ¥. Ako dlho by to trvalo Äloveku? testami, je ako Testy jednotiek softvÃ©ru nÃ¡m navyÅ¡e umoÅ¾ÅujÃº simulovaÅ¥ rÃ´zne podmienky, ktorÃ© poÄas beÅ¾nÃ©ho âÄloveko-testovaniaâ nikdy nenastanÃº, prechÃ¡dzaÅ¥ sa prÃ­padne je obtiaÅ¾ne ich nasimulovaÅ¥. Ako sa zachovÃ¡ nÃ¡Å¡ systÃ©m, ak sa po tenkom Ä¾ade. externÃ½ systÃ©m zachovÃ¡ tak, Äi onak? Po vytvorenÃ­ testu je odpoveÄ otÃ¡zkou pÃ¡r sekÃºnd. PrÃ¡ca s kÃ³dom, ktorÃ½ mÃ¡ len minimÃ¡lne alebo Å¾iadne pokrytie testami, je ako prechÃ¡dzaÅ¥ sa po tenkom Ä¾ade. Nikdy neviete, kedy sa Ä¾ad praskne a vy sa prepadnete. TÃ¡to paralela vÅ¡ak nie je Ãºplne presnÃ¡. Pri vÃ½voji softvÃ©ru nevidÃ­me chybu hneÄ, ale prejavÃ­ sa aÅ¾ dlho potom, Äo Ä¾ad praskol. KÃ³d pokrytÃ½ testami umoÅ¾Åuje zmeny kÃ³du bez strachu. Po kaÅ¾dej zmene kÃ³du sa spustÃ­ sada testov, ktorÃ¡ odhalÃ­ novÃ© chyby a zaistÃ­, Å¾e starÃ½ kÃ³d nebol poÅ¡kodenÃ½ novÃ½mi zmenami. Podobne ako prehliadky kÃ³du, ani testy jednotiek softvÃ©ru nie sÃº nÃ¡hradou za ruÄnÃ© testovanie. Testy jednotiek softvÃ©ru mÃ´Å¾u nedokÃ¡Å¾u odhaliÅ¥ niektorÃ© druhy chÃ½b, ktorÃ© odhalÃ­ len manuÃ¡lne testovanie. Rovnako nedokÃ¡Å¾u odchytiÅ¥ vÅ¡etky chyby, mali by sa preto pouÅ¾Ã­vaÅ¥ ako doplnok k ostatnÃ½m druhom testov. Napriek zrejmÃ½m vÃ½hodÃ¡m sa spÃ¡ja s tvorbou testov mnoho kontroverziÃ­. VÃ¤ÄÅ¡ina vÃ½vojÃ¡rov podvedome tuÅ¡Ã­, Å¾e by mali tvoriÅ¥ testy. Len mÃ¡lo ich vÅ¡ak aj naozaj tvorÃ­. UniverzÃ¡lnou odpoveÄou na otÃ¡zku âPreÄo nie?â je âMÃ¡m mÃ¡lo Äasuâ. To vÅ¡ak vedie k vytvoreniu bludnÃ©ho cyklu. ÄÃ­m menej Äasu programÃ¡tor mÃ¡, tÃ½m menej testov tvorÃ­. ÄÃ­m menej testov tvorÃ­, tÃ½m je menej produktÃ­vny a jeho kÃ³d je menej stabilnÃ½ [1]. ÄÃ­m je menej produktÃ­vny a ÄÃ­m menej stabilnÃ½ kÃ³d tvorÃ­, tÃ½m mÃ¡ menej Äasu a dostÃ¡va sa pod vÃ¤ÄÅ¡Ã­ tlak. ZaÄarovanÃ½ kruh. Ãplne opaÄnÃ½m extrÃ©mom je posadnutosÅ¥ testami. Jednou z metrÃ­k kvality testov je pokrytie testami, ktorÃ¡ opisuje stupeÅ otestovanosti kÃ³du. 100% pokrytie kÃ³du znamenÃ¡, Å¾e test vykonÃ¡va testovanÃ© funkcie takÃ½m spÃ´sobom (s takÃ½mi argumentmi) a simuluje takÃ© podmienky, Å¾e testovanÃ½ kÃ³d prejde pri testoch vÅ¡etkÃ½mi moÅ¾nÃ½mi cestami. TakÃ©to pokrytie kÃ³du sa vyÅ¾aduje pri kritickÃ½ch aplikÃ¡ciÃ¡ch (pre armÃ¡du), je vÅ¡ak veÄ¾mi Å¥aÅ¾ko dosiahnuteÄ¾nÃ©. MyslÃ­m, Å¾e je zbytoÄnÃ© snaÅ¾iÅ¥ sa dosiahnuÅ¥ Äo najvÃ¤ÄÅ¡ie pokrytie kÃ³du. Pri beÅ¾nÃ½ch projektoch je to zbytoÄnÃ© â je dÃ´leÅ¾itÃ©, aby kaÅ¾dÃ¡ jednotka kÃ³du"
343,74,0.474,ZÃ¡klady digitÃ¡lnych mien a blockchain sietÃ­,"transakciu neskÃ´r ako ostatnÃ­. VÃ½sledkom je, Å¾e existuje niekoÄ¾ko verziÃ­ pravdy o tom, akÃ© poradie je spravodlivÃ©. Dohoda medzi geograficky distribuovanÃ½mi autoritami, alebo uzlami, musÃ­ prebehnÃºÅ¥ pred konÅ¡trukciou kaÅ¾dÃ©ho bloku. Z toho vyplÃ½va tzv. podmienka synchronizÃ¡cie, teda uzly musia medzi sebou rÃ½chlo komunikovaÅ¥ a poskytnÃºÅ¥ dostatok dÃ¡t na to, aby bolo moÅ¾nÃ© vytvoriÅ¥ rozhodnutie. KeÄ vznikÃ¡ novÃ½ blockchain a jeho komunita autorÃ­t, kolÃ¡torov, alebo stakerov je eÅ¡te obmedzenÃ¡, je Å¥aÅ¾kÃ© dosiahnuÅ¥ dostatoÄnÃº synchronizÃ¡ciu. VÄaka rozsahu a kvalite Polkadot blockchainu mÃ´Å¾eme vytvoriÅ¥ novÃ© blockchainy, ktorÃ© sÃº odvodenÃ© a priamo interoperabilnÃ© s Polkadotom. TakÃ©to blockchainy je moÅ¾nÃ© vytvÃ¡raÅ¥ cez Substrate a z neho odvÃ¡dzaÅ¥ ÄalÅ¡ie podmienky. V rÃ¡mci Polkadotu a Substrate vytvÃ¡rajÃº nielen novÃ© mechanizmy, ale pridÃ¡vajÃº aj biznis logiku na blockchain a menia princÃ­py komunikÃ¡cie medzi uzlami a spÃ´sobom, akÃ½m sÃº transakcie a bloky vykonanÃ©. NespoliehajÃº sa len na to, Å¾e poskytnutÃ¡ bezpeÄnosÅ¥ je dostatoÄnÃ¡, a preto pridÃ¡vajÃº ÄalÅ¡ie Å¡ifrovanie transakciÃ­, aby ich boti nevideli. Toto je zobrazenÃ© na obrÃ¡zku 27. VÃ½hodou Mangaty je, Å¾e sÃº plne auditovanÃ½ a majÃº veÄ¾mi vysokÃ© bezpeÄnostnÃ© kontroly. Na to slÃºÅ¾ia naprÃ­klad aj bezpeÄnostnÃ© audity a penetraÄnÃ© testy. ExistujÃº firmy, ktorÃ© skÃºmajÃº kÃ³d a sÃº Å¡pecializovanÃ© na Substrate framework. PrechÃ¡dzajÃº cez celÃ½ kÃ³d, robia penetraÄnÃ© testy a skÃºmajÃº, ako bezpeÄnÃ© sÃº mechanizmy. Jednou z vÃ½hod aplikaÄne Å¡pecifickÃ½ch blockchainov je to, Å¾e slÃºÅ¾ia len na jednu Ãºlohu alebo aplikÃ¡ciu. Preto je Å¡kÃ¡lovateÄ¾nosÅ¥ pre nich dÃ´leÅ¾itejÅ¡ia ako pre vÅ¡eobecnÃ© blockchainy, ako je naprÃ­klad Ethereum. KeÄ na Ethereum mÃ¡te svoju DeFi aplikÃ¡ciu, musÃ­te sÃºÅ¥aÅ¾iÅ¥ o vÃ½konnosÅ¥ a dostupnosÅ¥ dÃ¡t s NFT. KeÄ mÃ¡te aplikaÄne Å¡pecifickÃ½ blockchain s rovnakou dostupnosÅ¥ou, rÃ½chlosÅ¥ou a vÃ½konnosÅ¥ou, uÅ¾ len to, Å¾e tam existuje iba jedna aplikÃ¡cia, robÃ­ blockchain efektÃ­vnejÅ¡Ã­m a problÃ©my so Å¡kÃ¡lovateÄ¾nosÅ¥ou sÃº menej podstatnÃ©. Ak by ale nestaÄilo, Mangata mÃ¡ niekoÄ¾ko stratÃ©giÃ­ na Å¡kÃ¡lovanie. Jedna z nich umoÅ¾Åuje vyuÅ¾iÅ¥ vÃ½hody polkadotovÃ©ho ekosystÃ©mu. MÃ´Å¾u vytvoriÅ¥ ÄalÅ¡Ã­ blockchain a pripojiÅ¥ ho k polkadotu rovnakÃ½mi mechanizmami, ako je pripojenÃ¡ Mangata na to, aby vykonÃ¡val rovnakÃ© transakcie paralelne. Tento mechanizmus vychÃ¡dza z logiky shardingu, ktorÃ¡ je aplikovanÃ¡ pre Ethereum"
76,19,0.474,PRAVDEPODOBNOSÅ¤ A MATEMATICKÃ Å TATISTIKA,"Ak vezmeme do Ãºvahy fakt, Å¾e Å¡katuÄ¾a obsahovala 100 guliek, tak naÅ¡e tipy na zloÅ¾enie Å¡katule by boli: 50 â 30 â 20, resp. 51 â 29 â 20 a pod. AvÅ¡ak 100 %-nÃ½ tip zrejme neexistuje. 1.1.4 PrÃ­klad. Nech pokus spoÄÃ­va v hode dvoma riadnymi hracÃ­mi kockami, modrou a Äervenou. Za vÃ½sledok pokusu povaÅ¾ujme usporiadanÃº dvojicu ÄÃ­sel ( ), ktorÃ© padli na kockÃ¡ch ( bodov na modrej, na Äervenej). UvaÅ¾ujme nasledujÃºce udalosti A, B: A â spoÄÃ­va v tom, Å¾e na modrej padne aspoÅ toÄ¾ko bodov ako na Äervenej, B â spoÄÃ­va v tom, Å¾e na kaÅ¾dej kocke padne pÃ¡rne ÄÃ­slo. Modelujme ich ako podmnoÅ¾iny mnoÅ¾iny vÅ¡etkÃ½ch vÃ½sledkov. VÅ¡imneme si, Å¾e systÃ©m nÃ¡hodnÃ½ch udalostÃ­ mÃ¡ istÃº Å¡truktÃºru, Äo znamenÃ¡, Å¾e s dvojicou udalostÃ­ A, B sa prirodzene objavujÃº ÄalÅ¡ie udalosti: AïB, AïB, A\B, resp. B\A. Nakoniec, definujme pravdepodobnosÅ¥ v tomto pokuse. RieÅ¡enie. Zrejme mnoÅ¾ina ï (ktorÃ¡ modeluje vÅ¡etky moÅ¾nÃ© vÃ½sledky pokusu) mÃ¡ 36 prvkov. Prvky ï· mnoÅ¾iny ï sÃº usporiadanÃ© dvojice ( ) a mÃ´Å¾eme ich znÃ¡zorniÅ¥ ako uzlovÃ© body mrieÅ¾ky (obr. 1-1) a oÄÃ­slovaÅ¥ zÄ¾ava doprava a zhora nadol: = (1, 1), = (1, 2), ... , = (1, 6), = (2, 1), = (2, 2), ... , = (2, 6) , ... , = (6, 1), = (6, 2), ... , = (6, 6). UdalosÅ¥ A modelujeme mnoÅ¾inou A = {("
240,513,0.472,PROGRAMOVANIE V JAZYKU C V RIEÅ ENÃCH PRÃKLADOCH 1,"sme uÅ¾ urÄili ako top a pri ÄalÅ¡Ã­ch volaniach funkcie ich uÅ¾ nebudeme uvaÅ¾ovaÅ¥, aby nÃ¡m ÄalÅ¡ie volanie funkcie vrÃ¡tilo index hrÃ¡Äa s najvyÅ¡Å¡Ã­m bodovÃ½m spomedzi zostÃ¡vajÃºcich hrÃ¡Äov. Nato vyuÅ¾ijeme pole prÃ­znakov used[], v ktorom si budeme pamÃ¤taÅ¥, Äi sme uÅ¾ hrÃ¡Äa z funkcie niekedy vrÃ¡tili. Funkcia vyuÅ¾ijÃºc premennÃº used[] prejde globÃ¡lne pole hrÃ¡Äov (h[]) a nÃ¡jde takÃ©ho, ktorÃ½ zÃ­skal Äo najviac"
236,122,0.472,Nie prÃ­liÅ¡ struÄnÃ½ Ãºvod do systÃ©mu LATEX2e,"VÅ¡imnite si, Å¾e na oboch stranÃ¡ch strednÃ©ho stÄºpca, znaku rovnosti, je veÄ¾a voÄ¾nÃ©ho miesta. Ako uvidÃ­te v nasledujÃºcom prÃ­klade, toto voÄ¾nÃ© miesto mÃ´Å¾e byÅ¥ zmenÅ¡enÃ© prÃ­kazom \setlength\arraycolsep{2pt}. DlhÃ© rovnice nie sÃº automaticky rozdeÄ¾ovanÃ© na peknÃ© Äasti. Autor musÃ­ sÃ¡m urÄiÅ¥, kde sa majÃº rozdeliÅ¥ a nakoÄ¾ko ich treba odsadiÅ¥. Na dosiahnutie tohoto sa najÄastejÅ¡ie pouÅ¾Ã­vajÃº nasledujÃºce dve metÃ³dy:"
265,281,0.472,SoftvÃ©rovÃ© inÅ¾inierstvo v otÃ¡zkach a odpovediach,"NÃ¡stroje na sprÃ¡vu verziÃ­ zdrojovÃ½ch kÃ³dov sa Äasto pouÅ¾Ã­vajÃº nesprÃ¡vne. AkÃ© chyby Äi nedbalosti sa v praxi Äasto vyskytujÃº? Medzi ÄastÃ© chyby a âzlozvykyâ patrÃ­ naprÃ­klad: â¢ NeuvÃ¡dzanie Å¾iadnych (alebo uvÃ¡dzanie nevhodnÃ½ch) commit sprÃ¡v. KaÅ¾dÃ© odovzdanie zdrojovÃ©ho kÃ³du prirodzene reprezentuje nejakÃº zmenu oproti predchÃ¡dzajÃºcemu stavu. Commit sprÃ¡va slÃºÅ¾i na opis tejto zmeny. PokiaÄ¾ tieto opisy nevytvÃ¡rame, prichÃ¡dzame o prehÄ¾ad zmien. â¢ OdovzdÃ¡vanie âviacerÃ½ch vecÃ­ narazâ. Commit by mal byÅ¥ ucelenÃ½ (nemali by sme odovzdÃ¡vaÅ¥ poloviÄatÃ© zmeny), no zÃ¡roveÅ by sa mal venovaÅ¥ len jednej zÃ¡leÅ¾itosti. Niekedy sa vÅ¡ak stÃ¡va, Å¾e do jednÃ©ho odovzdania vÃ½vojÃ¡ri zapracujÃº aj viacero zÃ¡leÅ¾itostÃ­, ktorÃ© spolu vzÃ¡jomne aÅ¾ tak nesÃºvisia. Ak potom chceme vrÃ¡tiÅ¥ zmeny v niektorej z tÃ½chto zÃ¡leÅ¾itostÃ­, musÃ­me vrÃ¡tiÅ¥ aj zmeny v zÃ¡leÅ¾itostiach, ktorÃ© sÃº s Åou zviazanÃ©, ale inak ich vracaÅ¥ nepotrebujeme. â¢ NepouÅ¾Ã­vanie vetiev. Vetvenie verziÃ­ zdrojovÃ©ho kÃ³du je po odovzdaniach (commits) ÄalÅ¡Ã­m uÅ¾itoÄnÃ½m nÃ¡strojom ako oddeliÅ¥ zmeny zdrojovÃ©ho kÃ³du, ktorÃ© spolu nesÃºvisia. PoskytujÃº moÅ¾nosÅ¥ paralelnÃ©ho vÃ½voja a poskytujÃº tak vÃ¤ÄÅ¡iu flexibilitu aj Äo sa tÃ½ka prijÃ­mania zmien do hlavnej vetvy. Ak sa vetvenie nepouÅ¾Ã­va, je sprÃ¡va zdrojovÃ©ho kÃ³du podstatne menej flexibilnÃ¡ a mÃ´Å¾e dochÃ¡dzaÅ¥ k ÄastejÅ¡Ã­m konfliktom. RozpracovanÃ© zmeny Äasto nemÃ´Å¾u byÅ¥ uzatvÃ¡ranÃ© dostatoÄne rÃ½chlo a mÃ´Å¾u blokovaÅ¥ ostatnÃ½ch vÃ½vojÃ¡rov, ktorÃ­ na projekte pracujÃº."
111,134,0.472,ZÃ¡kladnÃ© metÃ³dy na zlepÅ¡enie pouÅ¾itelânosti webov,"InterpretÃ¡cia vÃ½sledkov HlavnÃ½m vÃ½stupom pouÅ¾Ã­vateÄ¾skÃ©ho testovania by mali byÅ¥ videonahrÃ¡vky (alebo nahrÃ¡vky sedenÃ­), ktorÃ© zachytÃ¡vajÃº ako respondenti realizovali jednotlivÃ© Ãºlohy. Pri analÃ½ze vÃ½sledkov nemoderovanÃ©ho testovania nemÃ¡te k dispozÃ­cii Ãºdaje, ktorÃ© zachytÃ¡vajÃº vaÅ¡u (moderÃ¡torovu) komunikÃ¡ciu/interakciu s respondentom. V zÃ¡vislosti od nastavenia pouÅ¾Ã­vateÄ¾skej Å¡tÃºdie, nahrÃ¡vka mÃ´Å¾e obsahovaÅ¥ hlas respondenta (rozmÃ½Å¡Ä¾anie nahlas), prÃ­p. aj tvÃ¡r. Pozorne si pozrite celÃ© video. Analyzujte, ako pouÅ¾Ã­vatelia postupovali, ako rieÅ¡il jednotlivÃ© Ãºlohy, Äo hovorili, akÃ© prvky (Äasti rozhrania) ich zaujali a upÃºtali ich pozornosÅ¥. Z Äoho mali pozitÃ­vne dojmy, a naopak, z Äoho boli zmÃ¤tenÃ­ (Äo ich frustrovalo). Na zÃ¡klade videonahrÃ¡vok identifikujte konkrÃ©tne problÃ©my, s ktorÃ½mi sa pouÅ¾Ã­vatelia stretli. Zoskupte podobnÃ© problÃ©my alebo spÃ¤tnÃº vÃ¤zbu do tÃ©m. Vyberte si konkrÃ©tne citÃ¡ty, ktorÃ© ilustrujÃº problÃ©my alebo pozitÃ­vne aspekty. Zapojte do analÃ½zy aj ostatnÃ½ch Älenov tÃ­mu, aby ste zÃ­skali rÃ´zne pohÄ¾ady. BuÄte objektÃ­vni, snaÅ¾te sa vyhnÃºÅ¥ osobnÃ½m nÃ¡zorom a sÃºstreÄte sa na fakty. Zamerajte sa na pouÅ¾Ã­vateÄ¾a, myslite na to, Äo pouÅ¾Ã­vateÄ¾ cÃ­ti a preÅ¾Ã­va. Sledujte neverbÃ¡lne signÃ¡ly, ako je mraÄenie, povzdychy alebo komentÃ¡re, ktorÃ© vyjadrujÃº frustrÃ¡ciu. NajmÃ¤ pri nemoderovanom testovanÃ­, vyhodnoÅ¥te odpovede na otÃ¡zky v dotaznÃ­ku. Zamerajte sa na otvorenÃ© otÃ¡zky, ktorÃ© vÃ¡m poskytnÃº viac detailnÃ½ch informÃ¡ciÃ­. Svoje zistenia a nÃ¡vrhy podporte aj kvantitatÃ­vnymi Ãºdajmi, napr.: â¢ Äas na dokonÄenie Ãºlohy â Zmerajte, koÄ¾ko Äasu trvalo pouÅ¾Ã­vateÄ¾om dokonÄenie jednotlivÃ½ch Ãºloh."
59,94,0.47,KognitÃ­vna veda v kontexte informatickÃ½ch vied,"ObrÃ¡zok 2.22. SchematickÃ© znÃ¡zornenie vzÅ¥ahu medzi konekcionistickÃ½m a symbolickÃ½m prÃ­stupom k interpretÃ¡cii kognitÃ­vnych aktivÃ­t Ä¾udskÃ©ho mozgu. InterpretatÃ­vna sila tohto grafu je zaloÅ¾enÃ¡ na existencii vety 2.5, [1,5]. PodÄ¾a tejto slÃ¡vnej vety, kaÅ¾dÃ¡ neurÃ³novÃ¡ sieÅ¥ (konekcionistickÃ© vÃ½poÄtovÃ© zariadenie) je ekvivalentnÃ¡ koneÄnostavovÃ©mu stroju (automatu, symbolickÃ©mu vÃ½poÄtovÃ©mu zariadeniu). To znamenÃ¡, idÃºc v grafe zdola-nahor, hÄ¾adÃ¡me takÃ© symbolickÃ© korelÃ¡ty, ktorÃ© integrujÃº aktivity jednotlivÃ½ch neurÃ³nov. Ak ideme opaÄnÃ½m smerom zhora-nadol, potom hÄ¾adÃ¡me konekcionistickÃ© korelÃ¡ty pre symbolickÃ© vÃ½razy. MÃ´Å¾eme teda konÅ¡tatovaÅ¥, Å¾e medzi konekcionistickÃ½m a symbolickÃ½m prÃ­stupom k Å¡tÃºdiu kognitÃ­vnych aktivÃ­t neexistuje exkluzÃ­vna disjunkcia, hlavnÃ½m kritÃ©riom miery zahrnutia prvÃ©ho alebo druhÃ©ho prÃ­stupu je v pohodlnosti a jednoznaÄnosti Å¡tÃºdiu vybranÃ½ch kognitÃ­vnych aktivÃ­t. V sÃºÄasnosti sa ustÃ¡lil kompromis, Å¾e vyÅ¡Å¡ie kognitÃ­vne aktivity sa obvykle Å¡tudujÃº na symbolickej Ãºrovni (aj keÄ moÅ¾no pouÅ¾iÅ¥ ich Å¡tÃºdium na konekcionistickÃ½ prÃ­stup), zatiaÄ¾ Äo niÅ¾Å¡ie kognitÃ­vne aktivity sa Å¡tudujÃº pomocou konekcionistickÃ©ho formalizmu."
190,108,0.47,O softvÃ©ri od A po Z ; Ãvahy nastupujÃºcich profesionÃ¡lov,"BÃ¡zy poznatkov predstavujÃº stÃ¡ly zdroj informÃ¡ciÃ­ v tÃ­me. Mali by slÃºÅ¾iÅ¥ predovÅ¡etkÃ½m na zdieÄ¾anie informÃ¡ciÃ­, ktorÃ© presahujÃº rÃ¡mec jednÃ©ho projektu. Ide naprÃ­klad o firemnÃ© know-how, rÃ´zne tipy na rieÅ¡enie beÅ¾nÃ½ch problÃ©mov, pravidlÃ¡ a Å¡tandardy pouÅ¾Ã­vanÃ© v rÃ¡mci tÃ­mu. JednotlivÃ­ Älenovia tÃ­mu si mÃ´Å¾u nÃ¡jsÅ¥ informÃ¡cie vÅ¾dy, keÄ ich potrebujÃº vÄaka podpore vyhÄ¾adÃ¡vania. Jeden z modernÃ½ch spÃ´sobov udrÅ¾iavania bÃ¡zy poznatkov je vyuÅ¾itie kolaboratÃ­vneho systÃ©mu, do ktorÃ©ho mÃ´Å¾u prispievaÅ¥ vÅ¡etci Älenovia tÃ­mu. Tento spÃ´sob prinÃ¡Å¡a ale problÃ©my tÃ½kajÃºce sa zodpovednosti za udrÅ¾iavanie aktuÃ¡lnosti informÃ¡ciÃ­. VÃ½hodou takÃ©hoto uchovÃ¡vania informÃ¡ciÃ­, ktorÃ¡ sa prejavÃ­ pri dlhÅ¡Ã­ch projektoch, je najmÃ¤ nezÃ¡vislosÅ¥ informÃ¡ciÃ­ od prÃ­chodu a odchodu Älenov tÃ­mu."
301,0,0.47,Ako sprÃ¡vne vybraÅ¥ sprÃ¡vnych Ä¾udÃ­,"Ako sprÃ¡vne vybraÅ¥ sprÃ¡vnych Ä¾udÃ­ VytvoriÅ¥ dobrÃ½ a efektÃ­vny tÃ­m je pomerne nÃ¡roÄnÃ¡ Ãºloha. JednÃ½m z nÃ¡strojov, ktorÃ© to pomÃ¡hajÃº docieliÅ¥, je aj analÃ½za osobnostÃ­. V sÃºÄasnosti existuje niekoÄ¾ko rÃ´znych metodÃ­k, prostriedkov a prÃ­stupov na urÄenie charakterovÃ½ch vlastnostÃ­ Äloveka, jeho povahovÃ½ch ÄÅt a predpokladov. Na zÃ¡klade nich moÅ¾no urÄiÅ¥ zloÅ¾enie tÃ­mu a rozdeliÅ¥ jednotlivÃ© Ãºlohy v rÃ¡mci neho pre dosiahnutie Äo moÅ¾no najvÃ¤ÄÅ¡ej efektivity prÃ¡ce. ObjavujÃº sa vÅ¡ak aj nÃ¡zory, Å¾e tieto metÃ³dy majÃº svoje preukÃ¡zateÄ¾nÃ© nedostatky a obmedzenia. Pri vytvÃ¡ranÃ­ tÃ­mu by sme mali teda prihliadaÅ¥ aj na inÃ© vlastnosti, ako naprÃ­klad na vedomosti, zruÄnosti, predchÃ¡dzajÃºce skÃºsenosti a prax. Ani toto vÅ¡etko eÅ¡te nemusÃ­ zaruÄiÅ¥ vytvorenie ideÃ¡lneho tÃ­mu, ale pomÃ¡ha nÃ¡m predÃ­sÅ¥ niektorÃ½m neÅ¾iadÃºcim situÃ¡ciÃ¡m, ktorÃ© by mohli v softvÃ©rovom tÃ­me nastaÅ¥. Esej sa sÃºstreÄuje na niektorÃ© prÃ­stupy vyuÅ¾Ã­vanÃ© v tejto oblasti."
